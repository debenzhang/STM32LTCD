
TestSDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025d30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002eda8  08025ee0  08025ee0  00035ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000ef2  08054c88  08054c88  00064c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000014  08055b7c  08055b7c  00065b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00034650  08055b90  08055b90  00065b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000060  0808a1e0  0808a1e0  0009a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0808a240  0808a240  000a0110  2**0
                  CONTENTS
  8 .ARM          00000008  0808a240  0808a240  0009a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0808a248  0808a248  000a0110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0808a248  0808a248  0009a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0808a25c  0808a25c  0009a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000110  20000000  0808a264  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002a0c  20000110  0808a374  000a0110  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20002b1c  0808a374  000a2b1c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000a0110  2**0
                  CONTENTS, READONLY
 16 .debug_info   000abd78  00000000  00000000  000a0140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 000138fb  00000000  00000000  0014beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00003bf8  00000000  00000000  0015f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003588  00000000  00000000  001633b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00036905  00000000  00000000  00166938  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0003fe0c  00000000  00000000  0019d23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000ff8e7  00000000  00000000  001dd049  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  002dc930  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ffa0  00000000  00000000  002dca2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08025ec8 	.word	0x08025ec8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08025ec8 	.word	0x08025ec8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <Explore_Disk>:
            }
        }
    }
}

FRESULT Explore_Disk(char *path, uint8_t recu_level) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0da      	sub	sp, #360	; 0x168
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	6018      	str	r0, [r3, #0]
 8000d76:	460a      	mov	r2, r1
 8000d78:	1cfb      	adds	r3, r7, #3
 8000d7a:	701a      	strb	r2, [r3, #0]
  FRESULT res = FR_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  FILINFO fno;
  DIR dir;
  char *fn;
  char tmp[14];

  res = f_opendir(&dir, path);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	f107 0218 	add.w	r2, r7, #24
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	f00c fe2c 	bl	800d9e8 <f_opendir>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  printf("res1: %d \r\n", res);
 8000d96:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <Explore_Disk+0x8c>)
 8000d9e:	f024 fc13 	bl	80255c8 <iprintf>

  for (;;) {
	  res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000da2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fedf 	bl	800db70 <f_readdir>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	  if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000db8:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10e      	bne.n	8000dde <Explore_Disk+0x72>
 8000dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dc4:	7d9b      	ldrb	r3, [r3, #22]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <Explore_Disk+0x72>
//		  if (res != FR_OK) break;
//		  path[i] = 0;
//	  } else {                                       /* It is a file. */
//		  printf("%s/%s\n", path, fno.fname);
//	  }
	  printf("%s/%s\n", path, fno.fname);
 8000dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dce:	f103 0216 	add.w	r2, r3, #22
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <Explore_Disk+0x90>)
 8000dd8:	f024 fbf6 	bl	80255c8 <iprintf>
	  res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ddc:	e7e1      	b.n	8000da2 <Explore_Disk+0x36>
  }
  f_closedir(&dir);
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c fe9e 	bl	800db24 <f_closedir>
  return res;
 8000de8:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08025f10 	.word	0x08025f10
 8000dfc:	08025f1c 	.word	0x08025f1c

08000e00 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MX_CRC_Init+0x24>)
 8000e08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e0c:	f001 fe9d 	bl	8002b4a <HAL_CRC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e16:	f000 fd3b 	bl	8001890 <Error_Handler>
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001e50 	.word	0x20001e50
 8000e24:	40023000 	.word	0x40023000

08000e28 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_CRC_MspInit+0x3c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10d      	bne.n	8000e56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023000 	.word	0x40023000
 8000e68:	40023800 	.word	0x40023800

08000e6c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_DMA2D_Init+0x60>)
 8000e74:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000ea2:	f001 fe90 	bl	8002bc6 <HAL_DMA2D_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000eac:	f000 fcf0 	bl	8001890 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000eb4:	f002 f950 	bl	8003158 <HAL_DMA2D_ConfigLayer>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ebe:	f000 fce7 	bl	8001890 <Error_Handler>
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20001e58 	.word	0x20001e58
 8000ecc:	4002b000 	.word	0x4002b000

08000ed0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DMA2D_MspInit+0x48>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d115      	bne.n	8000f0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	205a      	movs	r0, #90	; 0x5a
 8000f04:	f001 fddd 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f08:	205a      	movs	r0, #90	; 0x5a
 8000f0a:	f001 fdf6 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	4002b000 	.word	0x4002b000
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_DMA2D_MspDeInit+0x2c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d108      	bne.n	8000f44 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_DMA2D_MspDeInit+0x30>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_DMA2D_MspDeInit+0x30>)
 8000f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt Deinit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8000f3e:	205a      	movs	r0, #90	; 0x5a
 8000f40:	f001 fde9 	bl	8002b16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	4002b000 	.word	0x4002b000
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_FMC_Init+0x98>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <MX_FMC_Init+0x9c>)
 8000f70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_FMC_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_FMC_Init+0x98>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_FMC_Init+0x98>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_FMC_Init+0x98>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_FMC_Init+0x98>)
 8000f8c:	2240      	movs	r2, #64	; 0x40
 8000f8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_FMC_Init+0x98>)
 8000f92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_FMC_Init+0x98>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_FMC_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_FMC_Init+0x98>)
 8000fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_FMC_Init+0x98>)
 8000fd6:	f005 fa49 	bl	800646c <HAL_SDRAM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fe0:	f000 fc56 	bl	8001890 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20001e98 	.word	0x20001e98
 8000ff0:	a0000140 	.word	0xa0000140

08000ff4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_FMC_MspInit+0x114>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d177      	bne.n	8001100 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_FMC_MspInit+0x114>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_FMC_MspInit+0x118>)
 800101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101e:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_FMC_MspInit+0x118>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6393      	str	r3, [r2, #56]	; 0x38
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_FMC_MspInit+0x118>)
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001032:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001036:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4830      	ldr	r0, [pc, #192]	; (8001110 <HAL_FMC_MspInit+0x11c>)
 800104e:	f002 f9b1 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	482a      	ldr	r0, [pc, #168]	; (8001114 <HAL_FMC_MspInit+0x120>)
 800106c:	f002 f9a2 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001070:	f248 1337 	movw	r3, #33079	; 0x8137
 8001074:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	; (8001118 <HAL_FMC_MspInit+0x124>)
 800108c:	f002 f992 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001090:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001094:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <HAL_FMC_MspInit+0x128>)
 80010ac:	f002 f982 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b0:	23c0      	movs	r3, #192	; 0xc0
 80010b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c0:	230c      	movs	r3, #12
 80010c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <HAL_FMC_MspInit+0x12c>)
 80010ca:	f002 f973 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e0:	230c      	movs	r3, #12
 80010e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <HAL_FMC_MspInit+0x130>)
 80010ea:	f002 f963 	bl	80033b4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f001 fce5 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80010f8:	2030      	movs	r0, #48	; 0x30
 80010fa:	f001 fcfe 	bl	8002afa <HAL_NVIC_EnableIRQ>
 80010fe:	e000      	b.n	8001102 <HAL_FMC_MspInit+0x10e>
    return;
 8001100:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000012c 	.word	0x2000012c
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400
 8001114:	40020800 	.word	0x40020800
 8001118:	40021800 	.word	0x40021800
 800111c:	40021000 	.word	0x40021000
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001130:	f7ff ff60 	bl	8000ff4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	4b79      	ldr	r3, [pc, #484]	; (800133c <MX_GPIO_Init+0x200>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a78      	ldr	r2, [pc, #480]	; (800133c <MX_GPIO_Init+0x200>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <MX_GPIO_Init+0x200>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	623b      	str	r3, [r7, #32]
 800116c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <MX_GPIO_Init+0x200>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a71      	ldr	r2, [pc, #452]	; (800133c <MX_GPIO_Init+0x200>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <MX_GPIO_Init+0x200>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	4b6b      	ldr	r3, [pc, #428]	; (800133c <MX_GPIO_Init+0x200>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a6a      	ldr	r2, [pc, #424]	; (800133c <MX_GPIO_Init+0x200>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b68      	ldr	r3, [pc, #416]	; (800133c <MX_GPIO_Init+0x200>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	4b64      	ldr	r3, [pc, #400]	; (800133c <MX_GPIO_Init+0x200>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a63      	ldr	r2, [pc, #396]	; (800133c <MX_GPIO_Init+0x200>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b61      	ldr	r3, [pc, #388]	; (800133c <MX_GPIO_Init+0x200>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <MX_GPIO_Init+0x200>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <MX_GPIO_Init+0x200>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <MX_GPIO_Init+0x200>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <MX_GPIO_Init+0x200>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a55      	ldr	r2, [pc, #340]	; (800133c <MX_GPIO_Init+0x200>)
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <MX_GPIO_Init+0x200>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <MX_GPIO_Init+0x200>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <MX_GPIO_Init+0x200>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <MX_GPIO_Init+0x200>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <MX_GPIO_Init+0x200>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a47      	ldr	r2, [pc, #284]	; (800133c <MX_GPIO_Init+0x200>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <MX_GPIO_Init+0x200>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <MX_GPIO_Init+0x200>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <MX_GPIO_Init+0x200>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <MX_GPIO_Init+0x200>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001254:	483a      	ldr	r0, [pc, #232]	; (8001340 <MX_GPIO_Init+0x204>)
 8001256:	f002 fa6f 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001260:	4838      	ldr	r0, [pc, #224]	; (8001344 <MX_GPIO_Init+0x208>)
 8001262:	f002 fa69 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2130      	movs	r1, #48	; 0x30
 800126a:	4837      	ldr	r0, [pc, #220]	; (8001348 <MX_GPIO_Init+0x20c>)
 800126c:	f002 fa64 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BL_Pin|LED_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f242 0110 	movw	r1, #8208	; 0x2010
 8001276:	4835      	ldr	r0, [pc, #212]	; (800134c <MX_GPIO_Init+0x210>)
 8001278:	f002 fa5e 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2108      	movs	r1, #8
 8001280:	4830      	ldr	r0, [pc, #192]	; (8001344 <MX_GPIO_Init+0x208>)
 8001282:	f002 fa59 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001290:	2302      	movs	r3, #2
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MX_GPIO_Init+0x204>)
 80012a0:	f002 f888 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80012a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_GPIO_Init+0x208>)
 80012be:	f002 f879 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c2:	2310      	movs	r3, #16
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ce:	2301      	movs	r3, #1
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_GPIO_Init+0x20c>)
 80012da:	f002 f86b 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012de:	2320      	movs	r3, #32
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e2:	2311      	movs	r3, #17
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ea:	2301      	movs	r3, #1
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0x20c>)
 80012f6:	f002 f85d 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_BL_Pin|LED_Pin;
 80012fa:	f242 0310 	movw	r3, #8208	; 0x2010
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_GPIO_Init+0x210>)
 8001314:	f002 f84e 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_USB_Pin;
 8001318:	2308      	movs	r3, #8
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001324:	2301      	movs	r3, #1
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0x208>)
 8001330:	f002 f840 	bl	80033b4 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020800 	.word	0x40020800
 8001344:	40022000 	.word	0x40022000
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40020c00 	.word	0x40020c00

08001350 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2234      	movs	r2, #52	; 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f023 fdba 	bl	8024ed6 <memset>

  hltdc.Instance = LTDC;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_LTDC_Init+0xfc>)
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <MX_LTDC_Init+0x100>)
 8001366:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_LTDC_Init+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <MX_LTDC_Init+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <MX_LTDC_Init+0xfc>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_LTDC_Init+0xfc>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 87;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <MX_LTDC_Init+0xfc>)
 8001382:	2257      	movs	r2, #87	; 0x57
 8001384:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 31;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_LTDC_Init+0xfc>)
 8001388:	221f      	movs	r2, #31
 800138a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 175;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_LTDC_Init+0xfc>)
 800138e:	22af      	movs	r2, #175	; 0xaf
 8001390:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 63;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_LTDC_Init+0xfc>)
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 975;
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_LTDC_Init+0xfc>)
 800139a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 543;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_LTDC_Init+0xfc>)
 80013a2:	f240 221f 	movw	r2, #543	; 0x21f
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1015;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_LTDC_Init+0xfc>)
 80013aa:	f240 32f7 	movw	r2, #1015	; 0x3f7
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 556;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_LTDC_Init+0xfc>)
 80013b2:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_LTDC_Init+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_LTDC_Init+0xfc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_LTDC_Init+0xfc>)
 80013d2:	f003 febb 	bl	800514c <HAL_LTDC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013dc:	f000 fa58 	bl	8001890 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80013e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80013ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013f8:	23ff      	movs	r3, #255	; 0xff
 80013fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800140a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001410:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001416:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_LTDC_Init+0xfc>)
 8001436:	f004 f811 	bl	800545c <HAL_LTDC_ConfigLayer>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001440:	f000 fa26 	bl	8001890 <Error_Handler>
  }

}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	; 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20001ecc 	.word	0x20001ecc
 8001450:	40016800 	.word	0x40016800

08001454 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_LTDC_MspInit+0x18c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	f040 80b0 	bne.w	80015d8 <HAL_LTDC_MspInit+0x184>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 8001482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001486:	6453      	str	r3, [r2, #68]	; 0x44
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800150e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001520:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	230e      	movs	r3, #14
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	482a      	ldr	r0, [pc, #168]	; (80015e8 <HAL_LTDC_MspInit+0x194>)
 800153e:	f001 ff39 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <HAL_LTDC_MspInit+0x198>)
 8001560:	f001 ff28 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001574:	2309      	movs	r3, #9
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <HAL_LTDC_MspInit+0x19c>)
 8001580:	f001 ff18 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8001584:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001596:	230e      	movs	r3, #14
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <HAL_LTDC_MspInit+0x1a0>)
 80015a2:	f001 ff07 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80015a6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b8:	230e      	movs	r3, #14
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <HAL_LTDC_MspInit+0x1a4>)
 80015c4:	f001 fef6 	bl	80033b4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2058      	movs	r0, #88	; 0x58
 80015ce:	f001 fa78 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015d2:	2058      	movs	r0, #88	; 0x58
 80015d4:	f001 fa91 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40016800 	.word	0x40016800
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40021800 	.word	0x40021800

080015fc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    while ((USART1->SR & 0X40) == 0);
 8001604:	bf00      	nop
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <__io_putchar+0x2c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f9      	beq.n	8001606 <__io_putchar+0xa>
    USART1->DR = (uint8_t) ch;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__io_putchar+0x2c>)
 8001618:	605a      	str	r2, [r3, #4]
    return ch;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40011000 	.word	0x40011000

0800162c <timer_loop>:
uint8_t timer_irq = 0;
uint8_t touch_cnt = 0;

uint8_t pre_state;

void timer_loop(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	if(timer_irq == 0) return;
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <timer_loop+0xa0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d046      	beq.n	80016c6 <timer_loop+0x9a>
	timer_irq = 0;
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <timer_loop+0xa0>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

	touch_cnt++;
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <timer_loop+0xa4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <timer_loop+0xa4>)
 8001648:	701a      	strb	r2, [r3, #0]
	if(touch_cnt > 20) {
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <timer_loop+0xa4>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d904      	bls.n	800165c <timer_loop+0x30>
		touch_cnt = 0;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <timer_loop+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		Touch_Scan();
 8001658:	f000 fcf6 	bl	8002048 <Touch_Scan>
	}

	MX_USB_HOST_Process();
 800165c:	f012 fb86 	bl	8013d6c <MX_USB_HOST_Process>

	if (pre_state != Appli_state) {
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <timer_loop+0xa8>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <timer_loop+0xac>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d026      	beq.n	80016ba <timer_loop+0x8e>
		switch(Appli_state) {
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <timer_loop+0xac>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d00b      	beq.n	800168c <timer_loop+0x60>
 8001674:	2b03      	cmp	r3, #3
 8001676:	d000      	beq.n	800167a <timer_loop+0x4e>
					Explore_Disk(USBHPath, 1);
				}

				break;
			default:
				break;
 8001678:	e020      	b.n	80016bc <timer_loop+0x90>
				printf("APPLICATION_DISCONNECT. \r\n");
 800167a:	4818      	ldr	r0, [pc, #96]	; (80016dc <timer_loop+0xb0>)
 800167c:	f024 f818 	bl	80256b0 <puts>
				if(f_mount(NULL, "", 0) != FR_OK) {
 8001680:	2200      	movs	r2, #0
 8001682:	4917      	ldr	r1, [pc, #92]	; (80016e0 <timer_loop+0xb4>)
 8001684:	2000      	movs	r0, #0
 8001686:	f00c f969 	bl	800d95c <f_mount>
				break;
 800168a:	e017      	b.n	80016bc <timer_loop+0x90>
				printf("APPLICATION_READY. \r\n");
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <timer_loop+0xb8>)
 800168e:	f024 f80f 	bl	80256b0 <puts>
				if(f_mount(&USBDISKFatFs, (TCHAR const*)USBHPath, 0) != FR_OK) {
 8001692:	2200      	movs	r2, #0
 8001694:	4914      	ldr	r1, [pc, #80]	; (80016e8 <timer_loop+0xbc>)
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <timer_loop+0xc0>)
 8001698:	f00c f960 	bl	800d95c <f_mount>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <timer_loop+0x7e>
					printf("f_mount fails. \r\n");
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <timer_loop+0xc4>)
 80016a4:	f024 f804 	bl	80256b0 <puts>
					break;
 80016a8:	e008      	b.n	80016bc <timer_loop+0x90>
					printf("f_mount success. \r\n");
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <timer_loop+0xc8>)
 80016ac:	f024 f800 	bl	80256b0 <puts>
					Explore_Disk(USBHPath, 1);
 80016b0:	2101      	movs	r1, #1
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <timer_loop+0xbc>)
 80016b4:	f7ff fb5a 	bl	8000d6c <Explore_Disk>
				break;
 80016b8:	e000      	b.n	80016bc <timer_loop+0x90>
		}
	}
 80016ba:	bf00      	nop
	pre_state = Appli_state;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <timer_loop+0xac>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <timer_loop+0xa8>)
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e000      	b.n	80016c8 <timer_loop+0x9c>
	if(timer_irq == 0) return;
 80016c6:	bf00      	nop
//			f_mount(NULL, "", 0);
//			break;
//		default:
//			break;
//	}
}
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000130 	.word	0x20000130
 80016d0:	20000131 	.word	0x20000131
 80016d4:	20001f74 	.word	0x20001f74
 80016d8:	20001344 	.word	0x20001344
 80016dc:	08025f58 	.word	0x08025f58
 80016e0:	08025f74 	.word	0x08025f74
 80016e4:	08025f78 	.word	0x08025f78
 80016e8:	20001610 	.word	0x20001610
 80016ec:	20001c1c 	.word	0x20001c1c
 80016f0:	08025f90 	.word	0x08025f90
 80016f4:	08025fa4 	.word	0x08025fa4

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Appli_state = APPLICATION_IDLE;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <main+0x7c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
  pre_state = Appli_state;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <main+0x7c>)
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <main+0x80>)
 8001708:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170a:	f001 f849 	bl	80027a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170e:	f000 f83b 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001712:	f7ff fd13 	bl	800113c <MX_GPIO_Init>
  MX_FMC_Init();
 8001716:	f7ff fc1d 	bl	8000f54 <MX_FMC_Init>
  MX_TIM2_Init();
 800171a:	f000 fa8f 	bl	8001c3c <MX_TIM2_Init>
  MX_LTDC_Init();
 800171e:	f7ff fe17 	bl	8001350 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001722:	f7ff fba3 	bl	8000e6c <MX_DMA2D_Init>
  MX_CRC_Init();
 8001726:	f7ff fb6b 	bl	8000e00 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800172a:	f000 ff95 	bl	8002658 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800172e:	f012 faf7 	bl	8013d20 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001732:	f007 f9e1 	bl	8008af8 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001736:	f00c fbb9 	bl	800deac <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  // 点亮 LED
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2110      	movs	r1, #16
 800173e:	480f      	ldr	r0, [pc, #60]	; (800177c <main+0x84>)
 8001740:	f001 fffa 	bl	8003738 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <main+0x88>)
 8001746:	f004 ff5f 	bl	8006608 <HAL_TIM_Base_Start_IT>

  SDRAM_Init();
 800174a:	f000 f8d9 	bl	8001900 <SDRAM_Init>

  HAL_Delay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f001 f898 	bl	8002884 <HAL_Delay>

  // 点亮 LCD
  HAL_GPIO_WritePin(LED_BL_GPIO_Port, LED_BL_Pin, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <main+0x84>)
 800175c:	f001 ffec 	bl	8003738 <HAL_GPIO_WritePin>

  printf("System running... \r\n");
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <main+0x8c>)
 8001762:	f023 ffa5 	bl	80256b0 <puts>

  Touch_Init();				// 触摸屏初始化
 8001766:	f000 fc07 	bl	8001f78 <Touch_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    // MX_USB_HOST_Process();
	timer_loop();
 800176a:	f7ff ff5f 	bl	800162c <timer_loop>
    MX_TouchGFX_Process();
 800176e:	f00c fba3 	bl	800deb8 <MX_TouchGFX_Process>
	timer_loop();
 8001772:	e7fa      	b.n	800176a <main+0x72>
 8001774:	20001344 	.word	0x20001344
 8001778:	20001f74 	.word	0x20001f74
 800177c:	40020c00 	.word	0x40020c00
 8001780:	20001f78 	.word	0x20001f78
 8001784:	08025fb8 	.word	0x08025fb8

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0a0      	sub	sp, #128	; 0x80
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f023 fb9d 	bl	8024ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2230      	movs	r2, #48	; 0x30
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f023 fb8e 	bl	8024ed6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <SystemClock_Config+0x100>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <SystemClock_Config+0x100>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <SystemClock_Config+0x100>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <SystemClock_Config+0x104>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e2:	4a2a      	ldr	r2, [pc, #168]	; (800188c <SystemClock_Config+0x104>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <SystemClock_Config+0x104>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001804:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001808:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800180a:	230f      	movs	r3, #15
 800180c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 144;
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001812:	2302      	movs	r3, #2
 8001814:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001816:	2305      	movs	r3, #5
 8001818:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800181e:	4618      	mov	r0, r3
 8001820:	f004 f82a 	bl	8005878 <HAL_RCC_OscConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800182a:	f000 f831 	bl	8001890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2302      	movs	r3, #2
 8001834:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800183a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184a:	2103      	movs	r1, #3
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fa83 	bl	8005d58 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001858:	f000 f81a 	bl	8001890 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800185c:	2308      	movs	r3, #8
 800185e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001860:	233c      	movs	r3, #60	; 0x3c
 8001862:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fc3d 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800187c:	f000 f808 	bl	8001890 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3780      	adds	r7, #128	; 0x80
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SDRAM_SendCommand>:
 */
#include "main.h"
#include "sdram_fmc_drv.h"

static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80018b4:	2310      	movs	r3, #16
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
 80018b8:	e004      	b.n	80018c4 <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d101      	bne.n	80018c4 <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80018c0:	2308      	movs	r3, #8
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018dc:	4619      	mov	r1, r3
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <SDRAM_SendCommand+0x5c>)
 80018e0:	f004 fe1c 	bl	800651c <HAL_SDRAM_SendCommand>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <SDRAM_SendCommand+0x50>
        return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e000      	b.n	80018f2 <SDRAM_SendCommand+0x52>
    }

    return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20001e98 	.word	0x20001e98

08001900 <SDRAM_Init>:

void SDRAM_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 2, 1, 0);
 8001906:	2300      	movs	r3, #0
 8001908:	2201      	movs	r2, #1
 800190a:	2102      	movs	r1, #2
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ffc7 	bl	80018a0 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 ffb6 	bl	8002884 <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 2, 1, 0);
 8001918:	2300      	movs	r3, #0
 800191a:	2201      	movs	r2, #1
 800191c:	2102      	movs	r1, #2
 800191e:	2002      	movs	r0, #2
 8001920:	f7ff ffbe 	bl	80018a0 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 2, 8, 0);
 8001924:	2300      	movs	r3, #0
 8001926:	2208      	movs	r2, #8
 8001928:	2102      	movs	r1, #2
 800192a:	2003      	movs	r0, #3
 800192c:	f7ff ffb8 	bl	80018a0 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 8001930:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001934:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 2, 1, temp);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	2102      	movs	r1, #2
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff ffaf 	bl	80018a0 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 8001942:	f240 6184 	movw	r1, #1668	; 0x684
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <SDRAM_Init+0x54>)
 8001948:	f004 fe13 	bl	8006572 <HAL_SDRAM_ProgramRefreshRate>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20001e98 	.word	0x20001e98

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 ff22 	bl	8002844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	timer_irq = 1;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <TIM2_IRQHandler+0x14>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <TIM2_IRQHandler+0x18>)
 8001a10:	f004 fe1e 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000130 	.word	0x20000130
 8001a1c:	20001f78 	.word	0x20001f78

08001a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USART1_IRQHandler+0x10>)
 8001a26:	f005 fa1d 	bl	8006e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20001fd0 	.word	0x20001fd0

08001a34 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <FMC_IRQHandler+0x10>)
 8001a3a:	f004 fd4b 	bl	80064d4 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001e98 	.word	0x20001e98

08001a48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <OTG_HS_IRQHandler+0x10>)
 8001a4e:	f002 f91b 	bl	8003c88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20002854 	.word	0x20002854

08001a5c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <LTDC_IRQHandler+0x10>)
 8001a62:	f003 fc43 	bl	80052ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20001ecc 	.word	0x20001ecc

08001a70 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA2D_IRQHandler+0x10>)
 8001a76:	f001 fa5e 	bl	8002f36 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20001e58 	.word	0x20001e58

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a9e:	f023 f9c3 	bl	8024e28 <__errno>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	2316      	movs	r3, #22
 8001aa6:	6013      	str	r3, [r2, #0]
	return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ac6:	e7fe      	b.n	8001ac6 <_exit+0x12>

08001ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ada:	f3af 8000 	nop.w
 8001ade:	4601      	mov	r1, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf0      	blt.n	8001ada <_read+0x12>
	}

return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e009      	b.n	8001b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd6d 	bl	80015fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf1      	blt.n	8001b14 <_write+0x12>
	}
	return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_close>:

int _close(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b62:	605a      	str	r2, [r3, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_isatty>:

int _isatty(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f023 f928 	bl	8024e28 <__errno>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	230c      	movs	r3, #12
 8001bdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20030000 	.word	0x20030000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	20000134 	.word	0x20000134
 8001c0c:	20002b20 	.word	0x20002b20

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <SystemInit+0x28>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <SystemInit+0x28>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SystemInit+0x28>)
 8001c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	463b      	mov	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90 - 1;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c62:	2259      	movs	r2, #89	; 0x59
 8001c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c80:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c82:	f004 fc96 	bl	80065b2 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c8c:	f7ff fe00 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001c9e:	f004 fddf 	bl	8006860 <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ca8:	f7ff fdf2 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_TIM2_Init+0x94>)
 8001cba:	f004 fff5 	bl	8006ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cc4:	f7ff fde4 	bl	8001890 <Error_Handler>
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20001f78 	.word	0x20001f78

08001cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201c      	movs	r0, #28
 8001d08:	f000 fedb 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f000 fef4 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <GT9XX_Reset>:
*	函数功能:	复位GT911
*	说    明:	复位GT911，并将芯片的IIC地址配置为0xBA/0xBB
******************************************************************************************/

void GT9XX_Reset(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	Touch_INT_Out();	//	将INT引脚配置为输出
 8001d24:	f000 fb0c 	bl	8002340 <Touch_INT_Out>

	// 初始化引脚状态
	HAL_GPIO_WritePin(Touch_INT_PORT,Touch_INT_PIN,GPIO_PIN_RESET);  // INT输出低电平
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2e:	4813      	ldr	r0, [pc, #76]	; (8001d7c <GT9XX_Reset+0x5c>)
 8001d30:	f001 fd02 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);    // RST输出高	电平
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3a:	4811      	ldr	r0, [pc, #68]	; (8001d80 <GT9XX_Reset+0x60>)
 8001d3c:	f001 fcfc 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(10000);
 8001d40:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d44:	f000 fae2 	bl	800230c <Touch_IIC_Delay>

	// 开始执行复位
	//	INT引脚保持低电平不变，将器件地址设置为0XBA/0XBB
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_RESET); // 拉低复位引脚，此时芯片执行复位
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d4e:	480c      	ldr	r0, [pc, #48]	; (8001d80 <GT9XX_Reset+0x60>)
 8001d50:	f001 fcf2 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(250000);										// 延时
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <GT9XX_Reset+0x64>)
 8001d56:	f000 fad9 	bl	800230c <Touch_IIC_Delay>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);			// 拉高复位引脚，复位结束
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <GT9XX_Reset+0x60>)
 8001d62:	f001 fce9 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(450000);										// 延时
 8001d66:	4808      	ldr	r0, [pc, #32]	; (8001d88 <GT9XX_Reset+0x68>)
 8001d68:	f000 fad0 	bl	800230c <Touch_IIC_Delay>
	Touch_INT_In();													// INT引脚转为浮空输入
 8001d6c:	f000 fb06 	bl	800237c <Touch_INT_In>
	Touch_IIC_Delay(350000);										// 延时
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <GT9XX_Reset+0x6c>)
 8001d72:	f000 facb 	bl	800230c <Touch_IIC_Delay>

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40020800 	.word	0x40020800
 8001d84:	0003d090 	.word	0x0003d090
 8001d88:	0006ddd0 	.word	0x0006ddd0
 8001d8c:	00055730 	.word	0x00055730

08001d90 <GT9XX_WriteHandle>:
*	函数功能:	GT9XX 写操作
*	说    明:	对指定的寄存器执行写操作
******************************************************************************************/

uint8_t GT9XX_WriteHandle (uint16_t addr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
	uint8_t status;				// 状态标志位

	Touch_IIC_Start();	// 启动IIC通信
 8001d9a:	f000 fb0d 	bl	80023b8 <Touch_IIC_Start>
	if( Touch_IIC_WriteByte(GT9XX_IIC_WADDR) == ACK_OK ) //写数据指令
 8001d9e:	20ba      	movs	r0, #186	; 0xba
 8001da0:	f000 fbd6 	bl	8002550 <Touch_IIC_WriteByte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d113      	bne.n	8001dd2 <GT9XX_WriteHandle+0x42>
	{
		if( Touch_IIC_WriteByte((uint8_t)(addr >> 8)) == ACK_OK ) //写入16位地址
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fbcc 	bl	8002550 <Touch_IIC_WriteByte>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d109      	bne.n	8001dd2 <GT9XX_WriteHandle+0x42>
		{
			if( Touch_IIC_WriteByte((uint8_t)(addr)) != ACK_OK )
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fbc4 	bl	8002550 <Touch_IIC_WriteByte>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <GT9XX_WriteHandle+0x42>
			{
				status = ERROR;	// 操作失败
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	status = SUCCESS;	// 操作成功
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	return status;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <GT9XX_WriteData>:
*	函数功能:	GT9XX 写一字节数据
*	说    明:	对指定的寄存器写入一字节数据
******************************************************************************************/

uint8_t GT9XX_WriteData (uint16_t addr,uint8_t value)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	460a      	mov	r2, r1
 8001dea:	80fb      	strh	r3, [r7, #6]
 8001dec:	4613      	mov	r3, r2
 8001dee:	717b      	strb	r3, [r7, #5]
	uint8_t status;

	Touch_IIC_Start(); //启动IIC通讯
 8001df0:	f000 fae2 	bl	80023b8 <Touch_IIC_Start>

	if( GT9XX_WriteHandle(addr) == SUCCESS)	//写入要操作的寄存器
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffca 	bl	8001d90 <GT9XX_WriteHandle>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <GT9XX_WriteData+0x34>
	{
		if (Touch_IIC_WriteByte(value) != ACK_OK) //写数据
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fba3 	bl	8002550 <Touch_IIC_WriteByte>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <GT9XX_WriteData+0x34>
		{
			status = ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
		}
	}
	Touch_IIC_Stop(); // 停止通讯
 8001e14:	f000 faf4 	bl	8002400 <Touch_IIC_Stop>

	status = SUCCESS;	// 写入成功
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
	return status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <GT9XX_ReadReg>:
*	函数功能:	GT9XX 读寄存器
*	说    明:	从芯片的寄存器区读取指定长度的数据
******************************************************************************************/

uint8_t GT9XX_ReadReg (uint16_t addr, uint8_t cnt, uint8_t *value)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	603a      	str	r2, [r7, #0]
 8001e30:	80fb      	strh	r3, [r7, #6]
 8001e32:	460b      	mov	r3, r1
 8001e34:	717b      	strb	r3, [r7, #5]
	uint8_t status;
	uint8_t i;

	status = ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
	Touch_IIC_Start();		// 启动IIC通信
 8001e3a:	f000 fabd 	bl	80023b8 <Touch_IIC_Start>

	if( GT9XX_WriteHandle(addr) == SUCCESS) //写入要操作的寄存器
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ffa5 	bl	8001d90 <GT9XX_WriteHandle>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12b      	bne.n	8001ea4 <GT9XX_ReadReg+0x7e>
	{
		Touch_IIC_Start(); //重新启动IIC通讯
 8001e4c:	f000 fab4 	bl	80023b8 <Touch_IIC_Start>

		if (Touch_IIC_WriteByte(GT9XX_IIC_RADDR) == ACK_OK)	// 发送读命令
 8001e50:	20bb      	movs	r0, #187	; 0xbb
 8001e52:	f000 fb7d 	bl	8002550 <Touch_IIC_WriteByte>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d123      	bne.n	8001ea4 <GT9XX_ReadReg+0x7e>
		{
			for(i = 0 ; i < cnt; i++)	// 计数
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73bb      	strb	r3, [r7, #14]
 8001e60:	e018      	b.n	8001e94 <GT9XX_ReadReg+0x6e>
			{
				if (i == (cnt - 1))
 8001e62:	7bba      	ldrb	r2, [r7, #14]
 8001e64:	797b      	ldrb	r3, [r7, #5]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d108      	bne.n	8001e7e <GT9XX_ReadReg+0x58>
				{
					value[i] = Touch_IIC_ReadByte(0);	// 读到最后一个数据时发送 非应答信号
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	18d4      	adds	r4, r2, r3
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 fbae 	bl	80025d4 <Touch_IIC_ReadByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	7023      	strb	r3, [r4, #0]
 8001e7c:	e007      	b.n	8001e8e <GT9XX_ReadReg+0x68>
				}
				else
				{
					value[i] = Touch_IIC_ReadByte(1);	// 发送应答信号
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	18d4      	adds	r4, r2, r3
 8001e84:	2001      	movs	r0, #1
 8001e86:	f000 fba5 	bl	80025d4 <Touch_IIC_ReadByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	7023      	strb	r3, [r4, #0]
			for(i = 0 ; i < cnt; i++)	// 计数
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73bb      	strb	r3, [r7, #14]
 8001e94:	7bba      	ldrb	r2, [r7, #14]
 8001e96:	797b      	ldrb	r3, [r7, #5]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3e2      	bcc.n	8001e62 <GT9XX_ReadReg+0x3c>
				}
			}
			Touch_IIC_Stop();	// 停止IIC通信
 8001e9c:	f000 fab0 	bl	8002400 <Touch_IIC_Stop>
			status = SUCCESS;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
		}
	}
	Touch_IIC_Stop();	// 停止IIC通信
 8001ea4:	f000 faac 	bl	8002400 <Touch_IIC_Stop>
	return (status);
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
	...

08001eb4 <PanelRecognition>:
*				 旧版本的RST和INT引脚并没有连接到核心板，因此可以根据这两个引脚的电平状态进行识别，其它版本
*				 的屏幕无需理会此处
******************************************************************************************************************/

void	PanelRecognition (void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

	Touch_INT_CLK_ENABLE;	//初始化IO口时钟
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <PanelRecognition+0xb4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <PanelRecognition+0xb4>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <PanelRecognition+0xb4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
	Touch_RST_CLK_ENABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <PanelRecognition+0xb4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <PanelRecognition+0xb4>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <PanelRecognition+0xb4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		//	输入模式
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;		 			//	下拉输入
 8001f06:	2302      	movs	r3, #2
 8001f08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f12:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <PanelRecognition+0xb8>)
 8001f1c:	f001 fa4a 	bl	80033b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin  = Touch_RST_PIN; 					//	RST
 8001f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f24:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <PanelRecognition+0xb8>)
 8001f2e:	f001 fa41 	bl	80033b4 <HAL_GPIO_Init>

	Touch_IIC_Delay(4000);		// 延时
 8001f32:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001f36:	f000 f9e9 	bl	800230c <Touch_IIC_Delay>

	//	 7寸屏 V1.1 之前版本的RST和INT引脚并没有连接到核心板，因此可以根据这两个引脚的电平状态进行识别，
	//	 其它版本的屏幕无需理会此处
	if( (HAL_GPIO_ReadPin(Touch_RST_PORT,Touch_RST_PIN) != 1) && (HAL_GPIO_ReadPin(Touch_INT_PORT,Touch_INT_PIN) != 1)  )
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <PanelRecognition+0xbc>)
 8001f40:	f001 fbe2 	bl	8003708 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00a      	beq.n	8001f60 <PanelRecognition+0xac>
 8001f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <PanelRecognition+0xb8>)
 8001f50:	f001 fbda 	bl	8003708 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d002      	beq.n	8001f60 <PanelRecognition+0xac>
	{
		// 7寸屏 V1.1 之前版本的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
		//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
		//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
		Modify_Flag	= 1;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <PanelRecognition+0xc0>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
	}
}
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40020800 	.word	0x40020800
 8001f74:	20000138 	.word	0x20000138

08001f78 <Touch_Init>:
*	函数功能: 触摸IC初始化，并读取相应信息发送到串口
*	说    明: 初始化触摸面板
******************************************************************************************/

uint8_t Touch_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
	uint8_t GT9XX_Info[11];	// 触摸屏IC信息
	uint8_t cfgVersion = 0;	// 触摸配置版本
 8001f7e:	2300      	movs	r3, #0
 8001f80:	70fb      	strb	r3, [r7, #3]

	PanelRecognition();			// 识别屏幕面板的版本，在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
 8001f82:	f7ff ff97 	bl	8001eb4 <PanelRecognition>
	Touch_IIC_GPIO_Config(); 	// 初始化IIC引脚
 8001f86:	f000 f92f 	bl	80021e8 <Touch_IIC_GPIO_Config>
	GT9XX_Reset();					// 复位IC
 8001f8a:	f7ff fec9 	bl	8001d20 <GT9XX_Reset>

	GT9XX_ReadReg (GT9XX_ID_ADDR,11,GT9XX_Info);		// 读触摸屏IC信息
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	461a      	mov	r2, r3
 8001f92:	210b      	movs	r1, #11
 8001f94:	f248 1040 	movw	r0, #33088	; 0x8140
 8001f98:	f7ff ff45 	bl	8001e26 <GT9XX_ReadReg>
	GT9XX_ReadReg (GT9XX_CFG_ADDR,1,&cfgVersion);	// 读触摸配置版本
 8001f9c:	1cfb      	adds	r3, r7, #3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	f248 0047 	movw	r0, #32839	; 0x8047
 8001fa6:	f7ff ff3e 	bl	8001e26 <GT9XX_ReadReg>

	if( GT9XX_Info[0] == '9' )		//	判断第一个字符是否为 ‘9’
 8001faa:	793b      	ldrb	r3, [r7, #4]
 8001fac:	2b39      	cmp	r3, #57	; 0x39
 8001fae:	d134      	bne.n	800201a <Touch_Init+0xa2>
	{
		printf("Touch ID: GT%.4s \r\n",GT9XX_Info);									// 打印触摸芯片的ID
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481d      	ldr	r0, [pc, #116]	; (800202c <Touch_Init+0xb4>)
 8001fb6:	f023 fb07 	bl	80255c8 <iprintf>
		printf("Version: 0X%.4x\r\n",(GT9XX_Info[5]<<8) + GT9XX_Info[4]);	// 芯片固件版本
 8001fba:	7a7b      	ldrb	r3, [r7, #9]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	7a3a      	ldrb	r2, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481a      	ldr	r0, [pc, #104]	; (8002030 <Touch_Init+0xb8>)
 8001fc6:	f023 faff 	bl	80255c8 <iprintf>
		printf("XY: %d * %d\r\n",(GT9XX_Info[7]<<8) + GT9XX_Info[6],(GT9XX_Info[9]<<8) +GT9XX_Info[8]);	// 当前触摸分辨率
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	7aba      	ldrb	r2, [r7, #10]
 8001fd0:	1899      	adds	r1, r3, r2
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	7b3a      	ldrb	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4815      	ldr	r0, [pc, #84]	; (8002034 <Touch_Init+0xbc>)
 8001fde:	f023 faf3 	bl	80255c8 <iprintf>
		printf("Touch V: 0X%.2x \r\n",cfgVersion);	// 触摸配置版本
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <Touch_Init+0xc0>)
 8001fe8:	f023 faee 	bl	80255c8 <iprintf>

		if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 1024 )		// 判断触摸屏的X轴分辨率是否为1024
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	7aba      	ldrb	r2, [r7, #10]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d103      	bne.n	8002002 <Touch_Init+0x8a>
		{
			// 在 7寸屏 V1.1 之前的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
			//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
			//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
			Modify_Flag	= 1;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <Touch_Init+0xc4>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e009      	b.n	8002016 <Touch_Init+0x9e>
		}
		else if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 800 )	// 触摸屏的X轴分辨率为800
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	7aba      	ldrb	r2, [r7, #10]
 8002008:	4413      	add	r3, r2
 800200a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800200e:	d102      	bne.n	8002016 <Touch_Init+0x9e>
		{
			Modify_Flag	= 0;	// 置0标志位，无需做处理
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <Touch_Init+0xc4>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
		}

		return SUCCESS;
 8002016:	2300      	movs	r3, #0
 8002018:	e003      	b.n	8002022 <Touch_Init+0xaa>
	}
	else
	{
		printf("未检测到触摸IC\r\n");			//错误，未检测到触摸屏
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <Touch_Init+0xc8>)
 800201c:	f023 fb48 	bl	80256b0 <puts>
		return ERROR;
 8002020:	2301      	movs	r3, #1
	}

}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08025fd0 	.word	0x08025fd0
 8002030:	08025fe4 	.word	0x08025fe4
 8002034:	08025ff8 	.word	0x08025ff8
 8002038:	08026008 	.word	0x08026008
 800203c:	20000138 	.word	0x20000138
 8002040:	0802601c 	.word	0x0802601c
 8002044:	00000000 	.word	0x00000000

08002048 <Touch_Scan>:
*	函数功能: 触摸扫描
*	说    明: 在程序里周期性的调用该函数，用以检测触摸操作，触摸信息存储在 touchInfo 结构体
******************************************************************************************/

void Touch_Scan(void)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b08d      	sub	sp, #52	; 0x34
 800204c:	af00      	add	r7, sp, #0
 	uint8_t  touchData[2 + 8 * TOUCH_MAX ]; 		// 用于存储触摸数据
	uint8_t  i = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	GT9XX_ReadReg (GT9XX_READ_ADDR,2 + 8 * TOUCH_MAX ,touchData);		// 读数据
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	461a      	mov	r2, r3
 8002058:	212a      	movs	r1, #42	; 0x2a
 800205a:	f248 104e 	movw	r0, #33102	; 0x814e
 800205e:	f7ff fee2 	bl	8001e26 <GT9XX_ReadReg>
	GT9XX_WriteData (GT9XX_READ_ADDR,0);								//	清除触摸芯片的寄存器标志位
 8002062:	2100      	movs	r1, #0
 8002064:	f248 104e 	movw	r0, #33102	; 0x814e
 8002068:	f7ff feba 	bl	8001de0 <GT9XX_WriteData>
//	for(i = 0; i < 8; i++) {
//		printf("%x ", touchData[i]);
//	}
//	printf("\r\n");

	touchInfo.num = touchData[0] & 0x0f;								// 取当前的触摸点数
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <Touch_Scan+0x198>)
 8002076:	705a      	strb	r2, [r3, #1]


	if ( (touchInfo.num >= 1) && (touchInfo.num <=5) ) 					// 当触摸数在 1-5 之间时
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <Touch_Scan+0x198>)
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 809d 	beq.w	80021bc <Touch_Scan+0x174>
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <Touch_Scan+0x198>)
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b05      	cmp	r3, #5
 8002088:	f200 8098 	bhi.w	80021bc <Touch_Scan+0x174>
	{
		for(i=0;i<touchInfo.num;i++)									// 取相应的触摸坐标
 800208c:	2300      	movs	r3, #0
 800208e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002092:	e088      	b.n	80021a6 <Touch_Scan+0x15e>
		{
			touchInfo.y[i] = (touchData[5+8*i]<<8) | touchData[4+8*i];	// 获取Y坐标
 8002094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	3305      	adds	r3, #5
 800209c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020a0:	4413      	add	r3, r2
 80020a2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	3304      	adds	r3, #4
 80020b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020b6:	440b      	add	r3, r1
 80020b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020c6:	b291      	uxth	r1, r2
 80020c8:	4a45      	ldr	r2, [pc, #276]	; (80021e0 <Touch_Scan+0x198>)
 80020ca:	3304      	adds	r3, #4
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	460a      	mov	r2, r1
 80020d2:	809a      	strh	r2, [r3, #4]
			touchInfo.x[i] = (touchData[3+8*i]<<8) | touchData[2+8*i];	//	获取X坐标
 80020d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	3303      	adds	r3, #3
 80020dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020e0:	4413      	add	r3, r2
 80020e2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	3302      	adds	r3, #2
 80020f2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020f6:	440b      	add	r3, r1
 80020f8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
 8002102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002106:	b291      	uxth	r1, r2
 8002108:	4a35      	ldr	r2, [pc, #212]	; (80021e0 <Touch_Scan+0x198>)
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	460a      	mov	r2, r1
 8002110:	805a      	strh	r2, [r3, #2]

			// 在 7寸屏 V1.1 之前的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
			//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
			//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
			if( Modify_Flag == 1)
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <Touch_Scan+0x19c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d13f      	bne.n	800219c <Touch_Scan+0x154>
			{
				touchInfo.y[i] *= 0.8;		// 将1024*600分辨率的触摸坐标换算成800*480的分辨率
 800211c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002120:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <Touch_Scan+0x198>)
 8002122:	3304      	adds	r3, #4
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa02 	bl	8000534 <__aeabi_i2d>
 8002130:	a327      	add	r3, pc, #156	; (adr r3, 80021d0 <Touch_Scan+0x188>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa67 	bl	8000608 <__aeabi_dmul>
 800213a:	4603      	mov	r3, r0
 800213c:	460c      	mov	r4, r1
 800213e:	461a      	mov	r2, r3
 8002140:	4623      	mov	r3, r4
 8002142:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fc6f 	bl	8000a2c <__aeabi_d2uiz>
 800214e:	4603      	mov	r3, r0
 8002150:	b299      	uxth	r1, r3
 8002152:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <Touch_Scan+0x198>)
 8002154:	1d23      	adds	r3, r4, #4
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	460a      	mov	r2, r1
 800215c:	809a      	strh	r2, [r3, #4]
				touchInfo.x[i] *= 0.78;		// 将1024*600分辨率的触摸坐标换算成800*480的分辨率
 800215e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <Touch_Scan+0x198>)
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	885b      	ldrh	r3, [r3, #2]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f9e2 	bl	8000534 <__aeabi_i2d>
 8002170:	a319      	add	r3, pc, #100	; (adr r3, 80021d8 <Touch_Scan+0x190>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fa47 	bl	8000608 <__aeabi_dmul>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc4f 	bl	8000a2c <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	b299      	uxth	r1, r3
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <Touch_Scan+0x198>)
 8002194:	0063      	lsls	r3, r4, #1
 8002196:	4413      	add	r3, r2
 8002198:	460a      	mov	r2, r1
 800219a:	805a      	strh	r2, [r3, #2]
		for(i=0;i<touchInfo.num;i++)									// 取相应的触摸坐标
 800219c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021a0:	3301      	adds	r3, #1
 80021a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <Touch_Scan+0x198>)
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021ae:	429a      	cmp	r2, r3
 80021b0:	f4ff af70 	bcc.w	8002094 <Touch_Scan+0x4c>
			}
		}
		touchInfo.flag = 1;		// 触摸标志位置1，代表有触摸动作发生
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <Touch_Scan+0x198>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e002      	b.n	80021c2 <Touch_Scan+0x17a>
	}
	else
	{
		touchInfo.flag = 0;		// 触摸标志位置0，无触摸动作
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <Touch_Scan+0x198>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	}
}
 80021c2:	bf00      	nop
 80021c4:	3734      	adds	r7, #52	; 0x34
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	9999999a 	.word	0x9999999a
 80021d4:	3fe99999 	.word	0x3fe99999
 80021d8:	8f5c28f6 	.word	0x8f5c28f6
 80021dc:	3fe8f5c2 	.word	0x3fe8f5c2
 80021e0:	20001fb8 	.word	0x20001fb8
 80021e4:	20000138 	.word	0x20000138

080021e8 <Touch_IIC_GPIO_Config>:
*	函数功能: 初始化IIC的GPIO口,推挽输出
*	说    明: 由于IIC通信速度不高，这里的IO口速度配置为2M即可
******************************************************************************************/

void Touch_IIC_GPIO_Config (void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]

	Touch_IIC_SCL_CLK_ENABLE;	//初始化IO口时钟
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
	Touch_IIC_SDA_CLK_ENABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b37      	ldr	r3, [pc, #220]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a36      	ldr	r2, [pc, #216]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
	Touch_INT_CLK_ENABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
	Touch_RST_CLK_ENABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a28      	ldr	r2, [pc, #160]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <Touch_IIC_GPIO_Config+0x114>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 			= Touch_IIC_SCL_PIN;				// SCL引脚
 800226e:	2310      	movs	r3, #16
 8002270:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_OD;			// 开漏输出
 8002272:	2311      	movs	r3, #17
 8002274:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;						// 不带上下拉
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;			// 速度等级
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Touch_IIC_SCL_PORT, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	481e      	ldr	r0, [pc, #120]	; (8002300 <Touch_IIC_GPIO_Config+0x118>)
 8002286:	f001 f895 	bl	80033b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= Touch_IIC_SDA_PIN;				// SDA引脚
 800228a:	2320      	movs	r3, #32
 800228c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_IIC_SDA_PORT, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	481a      	ldr	r0, [pc, #104]	; (8002300 <Touch_IIC_GPIO_Config+0x118>)
 8002296:	f001 f88d 	bl	80033b4 <HAL_GPIO_Init>


	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;      			// 推挽输出
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 					// 上拉
 800229e:	2301      	movs	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Pin = Touch_INT_PIN; 							//	INT
 80022a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4815      	ldr	r0, [pc, #84]	; (8002304 <Touch_IIC_GPIO_Config+0x11c>)
 80022b0:	f001 f880 	bl	80033b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Touch_RST_PIN; 							//	RST
 80022b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4811      	ldr	r0, [pc, #68]	; (8002308 <Touch_IIC_GPIO_Config+0x120>)
 80022c2:	f001 f877 	bl	80033b4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(Touch_IIC_SCL_PORT, Touch_IIC_SCL_PIN, GPIO_PIN_SET);		// SCL输出高电平
 80022c6:	2201      	movs	r2, #1
 80022c8:	2110      	movs	r1, #16
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <Touch_IIC_GPIO_Config+0x118>)
 80022cc:	f001 fa34 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_IIC_SDA_PORT, Touch_IIC_SDA_PIN, GPIO_PIN_SET);    // SDA输出高电平
 80022d0:	2201      	movs	r2, #1
 80022d2:	2120      	movs	r1, #32
 80022d4:	480a      	ldr	r0, [pc, #40]	; (8002300 <Touch_IIC_GPIO_Config+0x118>)
 80022d6:	f001 fa2f 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_INT_PORT, 	  Touch_INT_PIN,     GPIO_PIN_RESET);  // INT输出低电平
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e0:	4808      	ldr	r0, [pc, #32]	; (8002304 <Touch_IIC_GPIO_Config+0x11c>)
 80022e2:	f001 fa29 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,     Touch_RST_PIN,     GPIO_PIN_SET);    // RST输出高	电平
 80022e6:	2201      	movs	r2, #1
 80022e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <Touch_IIC_GPIO_Config+0x120>)
 80022ee:	f001 fa23 	bl	8003738 <HAL_GPIO_WritePin>

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021c00 	.word	0x40021c00
 8002304:	40022000 	.word	0x40022000
 8002308:	40020800 	.word	0x40020800

0800230c <Touch_IIC_Delay>:
*	函数功能: 简单延时函数
*	说    明: 为了移植的简便性且对延时精度要求不高，所以不需要使用定时器做延时
******************************************************************************************/

void Touch_IIC_Delay(uint32_t a)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	int i;
	while (a --)
 8002314:	e008      	b.n	8002328 <Touch_IIC_Delay+0x1c>
	{
		for (i = 0; i < 10; i++);
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e002      	b.n	8002322 <Touch_IIC_Delay+0x16>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b09      	cmp	r3, #9
 8002326:	ddf9      	ble.n	800231c <Touch_IIC_Delay+0x10>
	while (a --)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f1      	bne.n	8002316 <Touch_IIC_Delay+0xa>
	}
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <Touch_INT_Out>:
*	函数功能: 配置IIC的INT脚为输出模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_Out(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;      	// 输出模式
 8002354:	2301      	movs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 			// 上拉
 8002358:	2301      	movs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8002360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002364:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <Touch_INT_Out+0x38>)
 800236c:	f001 f822 	bl	80033b4 <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022000 	.word	0x40022000

0800237c <Touch_INT_In>:
*	函数功能: 配置IIC的INT脚为输入模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_In(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		// 输入模式
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;		 			// 浮空
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 800239c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <Touch_INT_In+0x38>)
 80023a8:	f001 f804 	bl	80033b4 <HAL_GPIO_Init>

}
 80023ac:	bf00      	nop
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40022000 	.word	0x40022000

080023b8 <Touch_IIC_Start>:
*	函数功能: IIC起始信号
*	说    明: 在SCL处于高电平期间，SDA由高到低跳变为起始信号
******************************************************************************************/

void Touch_IIC_Start(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	Touch_IIC_SDA(1);
 80023bc:	2201      	movs	r2, #1
 80023be:	2120      	movs	r1, #32
 80023c0:	480e      	ldr	r0, [pc, #56]	; (80023fc <Touch_IIC_Start+0x44>)
 80023c2:	f001 f9b9 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_SCL(1);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2110      	movs	r1, #16
 80023ca:	480c      	ldr	r0, [pc, #48]	; (80023fc <Touch_IIC_Start+0x44>)
 80023cc:	f001 f9b4 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80023d0:	2014      	movs	r0, #20
 80023d2:	f7ff ff9b 	bl	800230c <Touch_IIC_Delay>

	Touch_IIC_SDA(0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2120      	movs	r1, #32
 80023da:	4808      	ldr	r0, [pc, #32]	; (80023fc <Touch_IIC_Start+0x44>)
 80023dc:	f001 f9ac 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80023e0:	2014      	movs	r0, #20
 80023e2:	f7ff ff93 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SCL(0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2110      	movs	r1, #16
 80023ea:	4804      	ldr	r0, [pc, #16]	; (80023fc <Touch_IIC_Start+0x44>)
 80023ec:	f001 f9a4 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80023f0:	2014      	movs	r0, #20
 80023f2:	f7ff ff8b 	bl	800230c <Touch_IIC_Delay>
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021c00 	.word	0x40021c00

08002400 <Touch_IIC_Stop>:
*	函数功能: IIC停止信号
*	说    明: 在SCL处于高电平期间，SDA由低到高跳变为起始信号
******************************************************************************************/

void Touch_IIC_Stop(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 8002404:	2200      	movs	r2, #0
 8002406:	2110      	movs	r1, #16
 8002408:	480f      	ldr	r0, [pc, #60]	; (8002448 <Touch_IIC_Stop+0x48>)
 800240a:	f001 f995 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800240e:	2014      	movs	r0, #20
 8002410:	f7ff ff7c 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SDA(0);
 8002414:	2200      	movs	r2, #0
 8002416:	2120      	movs	r1, #32
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <Touch_IIC_Stop+0x48>)
 800241a:	f001 f98d 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800241e:	2014      	movs	r0, #20
 8002420:	f7ff ff74 	bl	800230c <Touch_IIC_Delay>

	Touch_IIC_SCL(1);
 8002424:	2201      	movs	r2, #1
 8002426:	2110      	movs	r1, #16
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <Touch_IIC_Stop+0x48>)
 800242a:	f001 f985 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800242e:	2014      	movs	r0, #20
 8002430:	f7ff ff6c 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SDA(1);
 8002434:	2201      	movs	r2, #1
 8002436:	2120      	movs	r1, #32
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <Touch_IIC_Stop+0x48>)
 800243a:	f001 f97d 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800243e:	2014      	movs	r0, #20
 8002440:	f7ff ff64 	bl	800230c <Touch_IIC_Delay>
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021c00 	.word	0x40021c00

0800244c <Touch_IIC_ACK>:
*	函数功能: IIC应答信号
*	说    明: 在SCL为高电平期间，SDA引脚输出为低电平，产生应答信号
******************************************************************************************/

void Touch_IIC_ACK(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	4812      	ldr	r0, [pc, #72]	; (80024a0 <Touch_IIC_ACK+0x54>)
 8002456:	f001 f96f 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800245a:	2014      	movs	r0, #20
 800245c:	f7ff ff56 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SDA(0);
 8002460:	2200      	movs	r2, #0
 8002462:	2120      	movs	r1, #32
 8002464:	480e      	ldr	r0, [pc, #56]	; (80024a0 <Touch_IIC_ACK+0x54>)
 8002466:	f001 f967 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800246a:	2014      	movs	r0, #20
 800246c:	f7ff ff4e 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 8002470:	2201      	movs	r2, #1
 8002472:	2110      	movs	r1, #16
 8002474:	480a      	ldr	r0, [pc, #40]	; (80024a0 <Touch_IIC_ACK+0x54>)
 8002476:	f001 f95f 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800247a:	2014      	movs	r0, #20
 800247c:	f7ff ff46 	bl	800230c <Touch_IIC_Delay>

	Touch_IIC_SCL(0);		// SCL输出低时，SDA应立即拉高，释放总线
 8002480:	2200      	movs	r2, #0
 8002482:	2110      	movs	r1, #16
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <Touch_IIC_ACK+0x54>)
 8002486:	f001 f957 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_SDA(1);
 800248a:	2201      	movs	r2, #1
 800248c:	2120      	movs	r1, #32
 800248e:	4804      	ldr	r0, [pc, #16]	; (80024a0 <Touch_IIC_ACK+0x54>)
 8002490:	f001 f952 	bl	8003738 <HAL_GPIO_WritePin>

	Touch_IIC_Delay(IIC_DelayVaule);
 8002494:	2014      	movs	r0, #20
 8002496:	f7ff ff39 	bl	800230c <Touch_IIC_Delay>

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021c00 	.word	0x40021c00

080024a4 <Touch_IIC_NoACK>:
*	函数功能: IIC非应答信号
*	说    明: 在SCL为高电平期间，若SDA引脚为高电平，产生非应答信号
******************************************************************************************/

void Touch_IIC_NoACK(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2110      	movs	r1, #16
 80024ac:	480f      	ldr	r0, [pc, #60]	; (80024ec <Touch_IIC_NoACK+0x48>)
 80024ae:	f001 f943 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024b2:	2014      	movs	r0, #20
 80024b4:	f7ff ff2a 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SDA(1);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2120      	movs	r1, #32
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <Touch_IIC_NoACK+0x48>)
 80024be:	f001 f93b 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024c2:	2014      	movs	r0, #20
 80024c4:	f7ff ff22 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2110      	movs	r1, #16
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <Touch_IIC_NoACK+0x48>)
 80024ce:	f001 f933 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024d2:	2014      	movs	r0, #20
 80024d4:	f7ff ff1a 	bl	800230c <Touch_IIC_Delay>

	Touch_IIC_SCL(0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2110      	movs	r1, #16
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <Touch_IIC_NoACK+0x48>)
 80024de:	f001 f92b 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024e2:	2014      	movs	r0, #20
 80024e4:	f7ff ff12 	bl	800230c <Touch_IIC_Delay>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021c00 	.word	0x40021c00

080024f0 <Touch_IIC_WaitACK>:
*	函数功能: 等待接收设备发出应答信号
*	说    明: 在SCL为高电平期间，若检测到SDA引脚为低电平，则接收设备响应正常
******************************************************************************************/

uint8_t Touch_IIC_WaitACK(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	Touch_IIC_SDA(1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	2120      	movs	r1, #32
 80024f8:	4814      	ldr	r0, [pc, #80]	; (800254c <Touch_IIC_WaitACK+0x5c>)
 80024fa:	f001 f91d 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024fe:	2014      	movs	r0, #20
 8002500:	f7ff ff04 	bl	800230c <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 8002504:	2201      	movs	r2, #1
 8002506:	2110      	movs	r1, #16
 8002508:	4810      	ldr	r0, [pc, #64]	; (800254c <Touch_IIC_WaitACK+0x5c>)
 800250a:	f001 f915 	bl	8003738 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800250e:	2014      	movs	r0, #20
 8002510:	f7ff fefc 	bl	800230c <Touch_IIC_Delay>

	if( HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) != 0) //判断设备是否有做出响应
 8002514:	2120      	movs	r1, #32
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <Touch_IIC_WaitACK+0x5c>)
 8002518:	f001 f8f6 	bl	8003708 <HAL_GPIO_ReadPin>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <Touch_IIC_WaitACK+0x46>
	{
		Touch_IIC_SCL(0);
 8002522:	2200      	movs	r2, #0
 8002524:	2110      	movs	r1, #16
 8002526:	4809      	ldr	r0, [pc, #36]	; (800254c <Touch_IIC_WaitACK+0x5c>)
 8002528:	f001 f906 	bl	8003738 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 800252c:	2014      	movs	r0, #20
 800252e:	f7ff feed 	bl	800230c <Touch_IIC_Delay>
		return ACK_ERR;	//无应答
 8002532:	2300      	movs	r3, #0
 8002534:	e008      	b.n	8002548 <Touch_IIC_WaitACK+0x58>
	}
	else
	{
		Touch_IIC_SCL(0);
 8002536:	2200      	movs	r2, #0
 8002538:	2110      	movs	r1, #16
 800253a:	4804      	ldr	r0, [pc, #16]	; (800254c <Touch_IIC_WaitACK+0x5c>)
 800253c:	f001 f8fc 	bl	8003738 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 8002540:	2014      	movs	r0, #20
 8002542:	f7ff fee3 	bl	800230c <Touch_IIC_Delay>
		return ACK_OK;	//应答正常
 8002546:	2301      	movs	r3, #1
	}
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021c00 	.word	0x40021c00

08002550 <Touch_IIC_WriteByte>:
*	函数功能:	写一字节数据
*	说    明:高位在前
******************************************************************************************/

uint8_t Touch_IIC_WriteByte(uint8_t IIC_Data)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e02c      	b.n	80025ba <Touch_IIC_WriteByte+0x6a>
	{
		Touch_IIC_SDA(IIC_Data & 0x80);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da05      	bge.n	8002574 <Touch_IIC_WriteByte+0x24>
 8002568:	2201      	movs	r2, #1
 800256a:	2120      	movs	r1, #32
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <Touch_IIC_WriteByte+0x80>)
 800256e:	f001 f8e3 	bl	8003738 <HAL_GPIO_WritePin>
 8002572:	e004      	b.n	800257e <Touch_IIC_WriteByte+0x2e>
 8002574:	2200      	movs	r2, #0
 8002576:	2120      	movs	r1, #32
 8002578:	4815      	ldr	r0, [pc, #84]	; (80025d0 <Touch_IIC_WriteByte+0x80>)
 800257a:	f001 f8dd 	bl	8003738 <HAL_GPIO_WritePin>

		Touch_IIC_Delay( IIC_DelayVaule );
 800257e:	2014      	movs	r0, #20
 8002580:	f7ff fec4 	bl	800230c <Touch_IIC_Delay>
		Touch_IIC_SCL(1);
 8002584:	2201      	movs	r2, #1
 8002586:	2110      	movs	r1, #16
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <Touch_IIC_WriteByte+0x80>)
 800258a:	f001 f8d5 	bl	8003738 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 800258e:	2014      	movs	r0, #20
 8002590:	f7ff febc 	bl	800230c <Touch_IIC_Delay>
		Touch_IIC_SCL(0);
 8002594:	2200      	movs	r2, #0
 8002596:	2110      	movs	r1, #16
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <Touch_IIC_WriteByte+0x80>)
 800259a:	f001 f8cd 	bl	8003738 <HAL_GPIO_WritePin>
		if(i == 7)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d104      	bne.n	80025ae <Touch_IIC_WriteByte+0x5e>
		{
			Touch_IIC_SDA(1);
 80025a4:	2201      	movs	r2, #1
 80025a6:	2120      	movs	r1, #32
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <Touch_IIC_WriteByte+0x80>)
 80025aa:	f001 f8c5 	bl	8003738 <HAL_GPIO_WritePin>
		}
		IIC_Data <<= 1;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d9cf      	bls.n	8002560 <Touch_IIC_WriteByte+0x10>
	}

	return Touch_IIC_WaitACK(); //等待设备响应
 80025c0:	f7ff ff96 	bl	80024f0 <Touch_IIC_WaitACK>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021c00 	.word	0x40021c00

080025d4 <Touch_IIC_ReadByte>:
*	说    明:1.高位在前
*				2.应在主机接收最后一字节数据时发送非应答信号
******************************************************************************************/

uint8_t Touch_IIC_ReadByte(uint8_t ACK_Mode)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t IIC_Data = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < 8; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73bb      	strb	r3, [r7, #14]
 80025ea:	e022      	b.n	8002632 <Touch_IIC_ReadByte+0x5e>
	{
		IIC_Data <<= 1;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]

		Touch_IIC_SCL(1);
 80025f2:	2201      	movs	r2, #1
 80025f4:	2110      	movs	r1, #16
 80025f6:	4817      	ldr	r0, [pc, #92]	; (8002654 <Touch_IIC_ReadByte+0x80>)
 80025f8:	f001 f89e 	bl	8003738 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 80025fc:	2014      	movs	r0, #20
 80025fe:	f7ff fe85 	bl	800230c <Touch_IIC_Delay>
		IIC_Data |= (HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) & 0x01);
 8002602:	2120      	movs	r1, #32
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <Touch_IIC_ReadByte+0x80>)
 8002606:	f001 f87f 	bl	8003708 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	b25a      	sxtb	r2, r3
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4313      	orrs	r3, r2
 8002618:	b25b      	sxtb	r3, r3
 800261a:	73fb      	strb	r3, [r7, #15]
		Touch_IIC_SCL(0);
 800261c:	2200      	movs	r2, #0
 800261e:	2110      	movs	r1, #16
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <Touch_IIC_ReadByte+0x80>)
 8002622:	f001 f889 	bl	8003738 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 8002626:	2014      	movs	r0, #20
 8002628:	f7ff fe70 	bl	800230c <Touch_IIC_Delay>
	for (i = 0; i < 8; i++)
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	3301      	adds	r3, #1
 8002630:	73bb      	strb	r3, [r7, #14]
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	2b07      	cmp	r3, #7
 8002636:	d9d9      	bls.n	80025ec <Touch_IIC_ReadByte+0x18>
	}

	if ( ACK_Mode == 1 )				//	应答信号
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <Touch_IIC_ReadByte+0x70>
		Touch_IIC_ACK();
 800263e:	f7ff ff05 	bl	800244c <Touch_IIC_ACK>
 8002642:	e001      	b.n	8002648 <Touch_IIC_ReadByte+0x74>
	else
		Touch_IIC_NoACK();		 	// 非应答信号
 8002644:	f7ff ff2e 	bl	80024a4 <Touch_IIC_NoACK>

	return IIC_Data;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021c00 	.word	0x40021c00

08002658 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <MX_USART1_UART_Init+0x50>)
 8002660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002690:	f004 fb9a 	bl	8006dc8 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800269a:	f7ff f8f9 	bl	8001890 <Error_Handler>
  }

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20001fd0 	.word	0x20001fd0
 80026a8:	40011000 	.word	0x40011000

080026ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_UART_MspInit+0x94>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d134      	bne.n	8002738 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_UART_MspInit+0x98>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002706:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002718:	2307      	movs	r3, #7
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <HAL_UART_MspInit+0x9c>)
 8002724:	f000 fe46 	bl	80033b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2025      	movs	r0, #37	; 0x25
 800272e:	f000 f9c8 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002732:	2025      	movs	r0, #37	; 0x25
 8002734:	f000 f9e1 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002738:	bf00      	nop
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40011000 	.word	0x40011000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000

0800274c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002784 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002750:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002752:	e003      	b.n	800275c <LoopCopyDataInit>

08002754 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002756:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002758:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800275a:	3104      	adds	r1, #4

0800275c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800275c:	480b      	ldr	r0, [pc, #44]	; (800278c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002760:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002762:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002764:	d3f6      	bcc.n	8002754 <CopyDataInit>
  ldr  r2, =_sbss
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002768:	e002      	b.n	8002770 <LoopFillZerobss>

0800276a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800276a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800276c:	f842 3b04 	str.w	r3, [r2], #4

08002770 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002772:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002774:	d3f9      	bcc.n	800276a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002776:	f7ff fa4b 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277a:	f022 fb6d 	bl	8024e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277e:	f7fe ffbb 	bl	80016f8 <main>
  bx  lr    
 8002782:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002784:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002788:	0808a264 	.word	0x0808a264
  ldr  r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002790:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8002794:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8002798:	20002b1c 	.word	0x20002b1c

0800279c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC_IRQHandler>
	...

080027a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <HAL_Init+0x40>)
 80027aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_Init+0x40>)
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <HAL_Init+0x40>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c8:	2003      	movs	r0, #3
 80027ca:	f000 f96f 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f000 f808 	bl	80027e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d4:	f7ff f8c0 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_InitTick+0x54>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_InitTick+0x58>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f995 	bl	8002b32 <HAL_SYSTICK_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e00e      	b.n	8002830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d80a      	bhi.n	800282e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f000 f94f 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002824:	4a06      	ldr	r2, [pc, #24]	; (8002840 <HAL_InitTick+0x5c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000004 	.word	0x20000004
 800283c:	2000000c 	.word	0x2000000c
 8002840:	20000008 	.word	0x20000008

08002844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x20>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x24>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_IncTick+0x24>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000000c 	.word	0x2000000c
 8002868:	20002010 	.word	0x20002010

0800286c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTick+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20002010 	.word	0x20002010

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff ffee 	bl	800286c <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d005      	beq.n	80028aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_Delay+0x40>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028aa:	bf00      	nop
 80028ac:	f7ff ffde 	bl	800286c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d8f7      	bhi.n	80028ac <HAL_Delay+0x28>
  {
  }
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db10      	blt.n	800299c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4909      	ldr	r1, [pc, #36]	; (80029a8 <__NVIC_DisableIRQ+0x40>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	3320      	adds	r3, #32
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002994:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002998:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff07 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff1c 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff0f 	bl	800292c <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff1f 	bl	8002968 <__NVIC_DisableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ff94 	bl	8002a68 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e00e      	b.n	8002b7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	795b      	ldrb	r3, [r3, #5]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fe f95b 	bl	8000e28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e00c      	b.n	8002bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03b      	b.n	8002c50 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe f96f 	bl	8000ed0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	f023 0107 	bic.w	r1, r3, #7
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68d1      	ldr	r1, [r2, #12]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e05f      	b.n	8002d2a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_DMA2D_DeInit+0xdc>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d02e      	beq.n	8002cd4 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8c1 	bl	8002e0c <HAL_DMA2D_Abort>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e04a      	b.n	8002d2a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8f7 	bl	8002e98 <HAL_DMA2D_CLUTLoading_Abort>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d011      	beq.n	8002cd4 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e03a      	b.n	8002d2a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d108      	bne.n	8002cd4 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8e7 	bl	8002e98 <HAL_DMA2D_CLUTLoading_Abort>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e02a      	b.n	8002d2a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	223f      	movs	r2, #63	; 0x3f
 8002ce2:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe f907 	bl	8000f20 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA2D_Start_IT+0x1c>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e020      	b.n	8002d96 <HAL_DMA2D_Start_IT+0x5e>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa84 	bl	800327c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002d82:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e024      	b.n	8002e04 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa4d 	bl	800327c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002df0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0205 	bic.w	r2, r3, #5
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0204 	orr.w	r2, r2, #4
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7ff fd20 	bl	800286c <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e2e:	e017      	b.n	8002e60 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002e30:	f7ff fd1c 	bl	800286c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	d90f      	bls.n	8002e60 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e017      	b.n	8002e90 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e0      	bne.n	8002e30 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0204 	orr.w	r2, r2, #4
 8002eb8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d103      	bne.n	8002ec8 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002ec8:	f7ff fcd0 	bl	800286c <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002ece:	e017      	b.n	8002f00 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002ed0:	f7ff fccc 	bl	800286c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ede:	d90f      	bls.n	8002f00 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e016      	b.n	8002f2e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e1      	bne.n	8002ed0 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d026      	beq.n	8002fa6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d021      	beq.n	8002fa6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d026      	beq.n	8002ffe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d026      	beq.n	8003056 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d021      	beq.n	8003056 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003020:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2208      	movs	r2, #8
 8003028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2204      	movs	r2, #4
 8003080:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f853 	bl	800312e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d024      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01f      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01f      	beq.n	8003126 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01a      	beq.n	8003126 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f80e 	bl	8003142 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_DMA2D_ConfigLayer+0x20>
 8003174:	2302      	movs	r3, #2
 8003176:	e079      	b.n	800326c <HAL_DMA2D_ConfigLayer+0x114>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	3318      	adds	r3, #24
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_DMA2D_ConfigLayer+0x120>)
 80031a4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b0a      	cmp	r3, #10
 80031ac:	d003      	beq.n	80031b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	d107      	bne.n	80031c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e005      	b.n	80031d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d120      	bne.n	800321a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	ea02 0103 	and.w	r1, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d003      	beq.n	800320a <HAL_DMA2D_ConfigLayer+0xb2>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b09      	cmp	r3, #9
 8003208:	d127      	bne.n	800325a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
 8003218:	e01f      	b.n	800325a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	ea02 0103 	and.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	430a      	orrs	r2, r1
 8003230:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b0a      	cmp	r3, #10
 8003242:	d003      	beq.n	800324c <HAL_DMA2D_ConfigLayer+0xf4>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b09      	cmp	r3, #9
 800324a:	d106      	bne.n	800325a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003258:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	ff03000f 	.word	0xff03000f

0800327c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800327c:	b480      	push	{r7}
 800327e:	b08b      	sub	sp, #44	; 0x2c
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	041a      	lsls	r2, r3, #16
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b4:	d174      	bne.n	80033a0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80032bc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032c4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032cc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	e053      	b.n	8003396 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d106      	bne.n	8003304 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e048      	b.n	8003396 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d111      	bne.n	8003330 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	0cdb      	lsrs	r3, r3, #19
 8003310:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	0a9b      	lsrs	r3, r3, #10
 8003316:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	08db      	lsrs	r3, r3, #3
 800331c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	02db      	lsls	r3, r3, #11
 8003326:	4313      	orrs	r3, r2
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	e032      	b.n	8003396 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d117      	bne.n	8003368 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	0fdb      	lsrs	r3, r3, #31
 800333c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	0cdb      	lsrs	r3, r3, #19
 8003342:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	0adb      	lsrs	r3, r3, #11
 8003348:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	431a      	orrs	r2, r3
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	03db      	lsls	r3, r3, #15
 800335e:	4313      	orrs	r3, r2
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	e016      	b.n	8003396 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	0f1b      	lsrs	r3, r3, #28
 800336c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	0d1b      	lsrs	r3, r3, #20
 8003372:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	0b1b      	lsrs	r3, r3, #12
 8003378:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	011a      	lsls	r2, r3, #4
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	431a      	orrs	r2, r3
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	4313      	orrs	r3, r2
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800339e:	e003      	b.n	80033a8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e177      	b.n	80036c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8166 	bne.w	80036ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00b      	beq.n	800340e <HAL_GPIO_Init+0x5a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003402:	2b11      	cmp	r3, #17
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b12      	cmp	r3, #18
 800340c:	d130      	bne.n	8003470 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0201 	and.w	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0xfc>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80c0 	beq.w	80036ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_GPIO_Init+0x320>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a64      	ldr	r2, [pc, #400]	; (80036d4 <HAL_GPIO_Init+0x320>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_GPIO_Init+0x320>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003556:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_GPIO_Init+0x324>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a57      	ldr	r2, [pc, #348]	; (80036dc <HAL_GPIO_Init+0x328>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d037      	beq.n	80035f2 <HAL_GPIO_Init+0x23e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a56      	ldr	r2, [pc, #344]	; (80036e0 <HAL_GPIO_Init+0x32c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_GPIO_Init+0x23a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a55      	ldr	r2, [pc, #340]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02b      	beq.n	80035ea <HAL_GPIO_Init+0x236>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_GPIO_Init+0x334>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x232>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a53      	ldr	r2, [pc, #332]	; (80036ec <HAL_GPIO_Init+0x338>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x22e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_GPIO_Init+0x33c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x22a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_GPIO_Init+0x340>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x226>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_GPIO_Init+0x344>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x222>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <HAL_GPIO_Init+0x348>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x21e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_GPIO_Init+0x34c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x21a>
 80035ca:	2309      	movs	r3, #9
 80035cc:	e012      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ce:	230a      	movs	r3, #10
 80035d0:	e010      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e00e      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035d6:	2307      	movs	r3, #7
 80035d8:	e00c      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035da:	2306      	movs	r3, #6
 80035dc:	e00a      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035de:	2305      	movs	r3, #5
 80035e0:	e008      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035e2:	2304      	movs	r3, #4
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035e6:	2303      	movs	r3, #3
 80035e8:	e004      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035f2:	2300      	movs	r3, #0
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	0092      	lsls	r2, r2, #2
 80035fc:	4093      	lsls	r3, r2
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003604:	4934      	ldr	r1, [pc, #208]	; (80036d8 <HAL_GPIO_Init+0x324>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003612:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <HAL_GPIO_Init+0x350>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003636:	4a33      	ldr	r2, [pc, #204]	; (8003704 <HAL_GPIO_Init+0x350>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_GPIO_Init+0x350>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_GPIO_Init+0x350>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003666:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_GPIO_Init+0x350>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_GPIO_Init+0x350>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_GPIO_Init+0x350>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <HAL_GPIO_Init+0x350>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f ae84 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40021c00 	.word	0x40021c00
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022400 	.word	0x40022400
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800376a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376c:	b08f      	sub	sp, #60	; 0x3c
 800376e:	af0a      	add	r7, sp, #40	; 0x28
 8003770:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e054      	b.n	8003826 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f010 fb20 	bl	8013ddc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fac1 	bl	8007d42 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	687e      	ldr	r6, [r7, #4]
 80037c8:	466d      	mov	r5, sp
 80037ca:	f106 0410 	add.w	r4, r6, #16
 80037ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037da:	e885 0003 	stmia.w	r5, {r0, r1}
 80037de:	1d33      	adds	r3, r6, #4
 80037e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	f004 fa3b 	bl	8007c5e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 fab8 	bl	8007d64 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	687e      	ldr	r6, [r7, #4]
 80037fc:	466d      	mov	r5, sp
 80037fe:	f106 0410 	add.w	r4, r6, #16
 8003802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800380e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003812:	1d33      	adds	r3, r6, #4
 8003814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f004 fbca 	bl	8007fb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800382e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800382e:	b590      	push	{r4, r7, lr}
 8003830:	b089      	sub	sp, #36	; 0x24
 8003832:	af04      	add	r7, sp, #16
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	461a      	mov	r2, r3
 800383c:	4603      	mov	r3, r0
 800383e:	70fb      	strb	r3, [r7, #3]
 8003840:	460b      	mov	r3, r1
 8003842:	70bb      	strb	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_HCD_HC_Init+0x28>
 8003852:	2302      	movs	r3, #2
 8003854:	e07f      	b.n	8003956 <HAL_HCD_HC_Init+0x128>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	333d      	adds	r3, #61	; 0x3d
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	3338      	adds	r3, #56	; 0x38
 8003882:	787a      	ldrb	r2, [r7, #1]
 8003884:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3340      	adds	r3, #64	; 0x40
 8003896:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003898:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3339      	adds	r3, #57	; 0x39
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	333f      	adds	r3, #63	; 0x3f
 80038be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	78bb      	ldrb	r3, [r7, #2]
 80038c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038cc:	b2d8      	uxtb	r0, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	333a      	adds	r3, #58	; 0x3a
 80038dc:	4602      	mov	r2, r0
 80038de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80038e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da0a      	bge.n	80038fe <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	333b      	adds	r3, #59	; 0x3b
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e009      	b.n	8003912 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	440b      	add	r3, r1
 800390c:	333b      	adds	r3, #59	; 0x3b
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	440b      	add	r3, r1
 8003920:	333c      	adds	r3, #60	; 0x3c
 8003922:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003926:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	787c      	ldrb	r4, [r7, #1]
 800392e:	78ba      	ldrb	r2, [r7, #2]
 8003930:	78f9      	ldrb	r1, [r7, #3]
 8003932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4623      	mov	r3, r4
 8003944:	f004 fcb6 	bl	80082b4 <USB_HC_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}

0800395e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_HCD_HC_Halt+0x1e>
 8003978:	2302      	movs	r3, #2
 800397a:	e00f      	b.n	800399c <HAL_HCD_HC_Halt+0x3e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f004 fef2 	bl	8008776 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	70fb      	strb	r3, [r7, #3]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70bb      	strb	r3, [r7, #2]
 80039ba:	4613      	mov	r3, r2
 80039bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	333b      	adds	r3, #59	; 0x3b
 80039ce:	78ba      	ldrb	r2, [r7, #2]
 80039d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	333f      	adds	r3, #63	; 0x3f
 80039e2:	787a      	ldrb	r2, [r7, #1]
 80039e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039e6:	7c3b      	ldrb	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d114      	bne.n	8003a16 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	3342      	adds	r3, #66	; 0x42
 80039fc:	2203      	movs	r2, #3
 80039fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	333d      	adds	r3, #61	; 0x3d
 8003a10:	7f3a      	ldrb	r2, [r7, #28]
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e009      	b.n	8003a2a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	3342      	adds	r3, #66	; 0x42
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a2a:	787b      	ldrb	r3, [r7, #1]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	f200 80d6 	bhi.w	8003bde <HAL_HCD_HC_SubmitRequest+0x23a>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a49 	.word	0x08003a49
 8003a3c:	08003bc9 	.word	0x08003bc9
 8003a40:	08003ab5 	.word	0x08003ab5
 8003a44:	08003b3f 	.word	0x08003b3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a48:	7c3b      	ldrb	r3, [r7, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 80c9 	bne.w	8003be2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8003a50:	78bb      	ldrb	r3, [r7, #2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80c5 	bne.w	8003be2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003a58:	8b3b      	ldrh	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3351      	adds	r3, #81	; 0x51
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3351      	adds	r3, #81	; 0x51
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	3342      	adds	r3, #66	; 0x42
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a9c:	e0a1      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3342      	adds	r3, #66	; 0x42
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      break;
 8003ab2:	e096      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ab4:	78bb      	ldrb	r3, [r7, #2]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d120      	bne.n	8003afc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3351      	adds	r3, #81	; 0x51
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3342      	adds	r3, #66	; 0x42
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ae4:	e07e      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	440b      	add	r3, r1
 8003af4:	3342      	adds	r3, #66	; 0x42
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	e073      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	3350      	adds	r3, #80	; 0x50
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	3342      	adds	r3, #66	; 0x42
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e05d      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	440b      	add	r3, r1
 8003b36:	3342      	adds	r3, #66	; 0x42
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
      break;
 8003b3c:	e052      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b3e:	78bb      	ldrb	r3, [r7, #2]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d120      	bne.n	8003b86 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3351      	adds	r3, #81	; 0x51
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3342      	adds	r3, #66	; 0x42
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b6e:	e039      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3342      	adds	r3, #66	; 0x42
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]
      break;
 8003b84:	e02e      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	3350      	adds	r3, #80	; 0x50
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	3342      	adds	r3, #66	; 0x42
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
      break;
 8003bb0:	e018      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3342      	adds	r3, #66	; 0x42
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	701a      	strb	r2, [r3, #0]
      break;
 8003bc6:	e00d      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3342      	adds	r3, #66	; 0x42
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
      break;
 8003bdc:	e002      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003be2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	; 0x44
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	8b39      	ldrh	r1, [r7, #24]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4403      	add	r3, r0
 8003c08:	3348      	adds	r3, #72	; 0x48
 8003c0a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	335c      	adds	r3, #92	; 0x5c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334c      	adds	r3, #76	; 0x4c
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	3339      	adds	r3, #57	; 0x39
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	335d      	adds	r3, #93	; 0x5d
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	3338      	adds	r3, #56	; 0x38
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	18d1      	adds	r1, r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	f004 fc26 	bl	80084c8 <USB_HC_StartXfer>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f004 f943 	bl	8007f2a <USB_GetMode>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	f040 80ef 	bne.w	8003e8a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 f927 	bl	8007f04 <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80e5 	beq.w	8003e88 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f004 f91e 	bl	8007f04 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd2:	d104      	bne.n	8003cde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 f90e 	bl	8007f04 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf2:	d104      	bne.n	8003cfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 f8fe 	bl	8007f04 <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d12:	d104      	bne.n	8003d1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 f8ee 	bl	8007f04 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d103      	bne.n	8003d3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2202      	movs	r2, #2
 8003d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 f8e0 	bl	8007f04 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d4e:	d115      	bne.n	8003d7c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f010 f8a2 	bl	8013eb4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 f9d6 	bl	8008128 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 f8bf 	bl	8007f04 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d102      	bne.n	8003d98 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 f966 	bl	8005064 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f004 f8b1 	bl	8007f04 <USB_ReadInterrupts>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d106      	bne.n	8003dba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f010 f865 	bl	8013e7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2208      	movs	r2, #8
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 f8a0 	bl	8007f04 <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dce:	d138      	bne.n	8003e42 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f004 fcbd 	bl	8008754 <USB_HC_ReadInterrupt>
 8003dda:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e025      	b.n	8003e2e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d106      	bne.n	8003e1c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8cf 	bl	8003fb8 <HCD_HC_IN_IRQHandler>
 8003e1a:	e005      	b.n	8003e28 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fcfd 	bl	8004822 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3d4      	bcc.n	8003de2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 f85c 	bl	8007f04 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d101      	bne.n	8003e5a <HAL_HCD_IRQHandler+0x1d2>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_HCD_IRQHandler+0x1d4>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d014      	beq.n	8003e8a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0210 	bic.w	r2, r2, #16
 8003e6e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f001 f84b 	bl	8004f0c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0210 	orr.w	r2, r2, #16
 8003e84:	619a      	str	r2, [r3, #24]
 8003e86:	e000      	b.n	8003e8a <HAL_HCD_IRQHandler+0x202>
      return;
 8003e88:	bf00      	nop
    }
  }
}
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_HCD_Start+0x16>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e013      	b.n	8003ece <HAL_HCD_Start+0x3e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 ff34 	bl	8007d20 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 f996 	bl	80081f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_HCD_Stop+0x16>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e00d      	b.n	8003f08 <HAL_HCD_Stop+0x32>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f004 fd77 	bl	80089ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 f93d 	bl	800819c <USB_ResetPort>
 8003f22:	4603      	mov	r3, r0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	335c      	adds	r3, #92	; 0x5c
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	334c      	adds	r3, #76	; 0x4c
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 f97f 	bl	8008290 <USB_GetCurrentFrame>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 f95a 	bl	8008262 <USB_GetHostSpeed>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d119      	bne.n	800401c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	440a      	add	r2, r1
 8004010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	60d3      	str	r3, [r2, #12]
 800401a:	e0ce      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d12c      	bne.n	800408e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004046:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	335d      	adds	r3, #93	; 0x5d
 8004058:	2207      	movs	r2, #7
 800405a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f004 fb75 	bl	8008776 <USB_HC_Halt>
 800408c:	e095      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d109      	bne.n	80040b8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	2320      	movs	r3, #32
 80040b4:	6093      	str	r3, [r2, #8]
 80040b6:	e080      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d134      	bne.n	8004138 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2205      	movs	r2, #5
 8004100:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	461a      	mov	r2, r3
 8004110:	2310      	movs	r3, #16
 8004112:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	461a      	mov	r2, r3
 8004122:	2308      	movs	r3, #8
 8004124:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fb20 	bl	8008776 <USB_HC_Halt>
 8004136:	e040      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d134      	bne.n	80041ba <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	440a      	add	r2, r1
 8004166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f004 fafb 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	461a      	mov	r2, r3
 800418e:	2310      	movs	r3, #16
 8004190:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	335d      	adds	r3, #93	; 0x5d
 80041a2:	2208      	movs	r2, #8
 80041a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b2:	461a      	mov	r2, r3
 80041b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d122      	bne.n	8004218 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 faba 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004214:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004216:	e300      	b.n	800481a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	f040 80fd 	bne.w	800442a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	3348      	adds	r3, #72	; 0x48
 8004248:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	440b      	add	r3, r1
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800425c:	1ad1      	subs	r1, r2, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4403      	add	r3, r0
 800426c:	334c      	adds	r3, #76	; 0x4c
 800426e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	440b      	add	r3, r1
 800427e:	335d      	adds	r3, #93	; 0x5d
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	3358      	adds	r3, #88	; 0x58
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	461a      	mov	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	440b      	add	r3, r1
 80042b8:	333f      	adds	r3, #63	; 0x3f
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	333f      	adds	r3, #63	; 0x3f
 80042d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d121      	bne.n	800431a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f004 fa38 	bl	8008776 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	461a      	mov	r2, r3
 8004314:	2310      	movs	r3, #16
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e070      	b.n	80043fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	333f      	adds	r3, #63	; 0x3f
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d12a      	bne.n	8004386 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	440a      	add	r2, r1
 8004346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800434e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	335c      	adds	r3, #92	; 0x5c
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	b2d8      	uxtb	r0, r3
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	335c      	adds	r3, #92	; 0x5c
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	4601      	mov	r1, r0
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f00f fda6 	bl	8013ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004384:	e03a      	b.n	80043fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	333f      	adds	r3, #63	; 0x3f
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d12f      	bne.n	80043fc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	335c      	adds	r3, #92	; 0x5c
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	3350      	adds	r3, #80	; 0x50
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f083 0301 	eor.w	r3, r3, #1
 80043c6:	b2d8      	uxtb	r0, r3
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	3350      	adds	r3, #80	; 0x50
 80043d8:	4602      	mov	r2, r0
 80043da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	b2d8      	uxtb	r0, r3
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	440b      	add	r3, r1
 80043ee:	335c      	adds	r3, #92	; 0x5c
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	4601      	mov	r1, r0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f00f fd6a 	bl	8013ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	3350      	adds	r3, #80	; 0x50
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f083 0301 	eor.w	r3, r3, #1
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	3350      	adds	r3, #80	; 0x50
 8004424:	4602      	mov	r2, r0
 8004426:	701a      	strb	r2, [r3, #0]
}
 8004428:	e1f7      	b.n	800481a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	f040 811a 	bne.w	8004676 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	440a      	add	r2, r1
 8004458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	440b      	add	r3, r1
 8004470:	335d      	adds	r3, #93	; 0x5d
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10a      	bne.n	800448e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	335c      	adds	r3, #92	; 0x5c
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e0d9      	b.n	8004642 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	440b      	add	r3, r1
 800449c:	335d      	adds	r3, #93	; 0x5d
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d10a      	bne.n	80044ba <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	440b      	add	r3, r1
 80044b2:	335c      	adds	r3, #92	; 0x5c
 80044b4:	2205      	movs	r2, #5
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e0c3      	b.n	8004642 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	440b      	add	r3, r1
 80044c8:	335d      	adds	r3, #93	; 0x5d
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d00a      	beq.n	80044e6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	335d      	adds	r3, #93	; 0x5d
 80044e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d156      	bne.n	8004594 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	3358      	adds	r3, #88	; 0x58
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c59      	adds	r1, r3, #1
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4403      	add	r3, r0
 8004508:	3358      	adds	r3, #88	; 0x58
 800450a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	3358      	adds	r3, #88	; 0x58
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d914      	bls.n	800454c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	3358      	adds	r3, #88	; 0x58
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	335c      	adds	r3, #92	; 0x5c
 8004546:	2204      	movs	r2, #4
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e009      	b.n	8004560 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	440b      	add	r3, r1
 800455a:	335c      	adds	r3, #92	; 0x5c
 800455c:	2202      	movs	r2, #2
 800455e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004576:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800457e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e056      	b.n	8004642 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	440b      	add	r3, r1
 80045a2:	335d      	adds	r3, #93	; 0x5d
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d123      	bne.n	80045f2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	440b      	add	r3, r1
 80045b8:	335c      	adds	r3, #92	; 0x5c
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045dc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	e027      	b.n	8004642 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	335d      	adds	r3, #93	; 0x5d
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b07      	cmp	r3, #7
 8004606:	d11c      	bne.n	8004642 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	3358      	adds	r3, #88	; 0x58
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4403      	add	r3, r0
 800462a:	3358      	adds	r3, #88	; 0x58
 800462c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	440b      	add	r3, r1
 800463c:	335c      	adds	r3, #92	; 0x5c
 800463e:	2204      	movs	r2, #4
 8004640:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2302      	movs	r3, #2
 8004652:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	b2d8      	uxtb	r0, r3
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	440b      	add	r3, r1
 8004666:	335c      	adds	r3, #92	; 0x5c
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	4601      	mov	r1, r0
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f00f fc2e 	bl	8013ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004674:	e0d1      	b.n	800481a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d13e      	bne.n	800470a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f043 0302 	orr.w	r3, r3, #2
 80046aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	3358      	adds	r3, #88	; 0x58
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1c59      	adds	r1, r3, #1
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4403      	add	r3, r0
 80046ce:	3358      	adds	r3, #88	; 0x58
 80046d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	335d      	adds	r3, #93	; 0x5d
 80046e2:	2206      	movs	r2, #6
 80046e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 f840 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	6093      	str	r3, [r2, #8]
}
 8004708:	e087      	b.n	800481a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d17c      	bne.n	800481a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	333f      	adds	r3, #63	; 0x3f
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d122      	bne.n	800477c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	440b      	add	r3, r1
 8004744:	3358      	adds	r3, #88	; 0x58
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	440a      	add	r2, r1
 8004760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f003 fffe 	bl	8008776 <USB_HC_Halt>
 800477a:	e045      	b.n	8004808 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	440b      	add	r3, r1
 800478a:	333f      	adds	r3, #63	; 0x3f
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	440b      	add	r3, r1
 80047a0:	333f      	adds	r3, #63	; 0x3f
 80047a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d12f      	bne.n	8004808 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	440b      	add	r3, r1
 80047b6:	3358      	adds	r3, #88	; 0x58
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d121      	bne.n	8004808 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	335d      	adds	r3, #93	; 0x5d
 80047d4:	2203      	movs	r2, #3
 80047d6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f003 ffb7 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	461a      	mov	r2, r3
 8004816:	2310      	movs	r3, #16
 8004818:	6093      	str	r3, [r2, #8]
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d119      	bne.n	8004886 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485e:	461a      	mov	r2, r3
 8004860:	2304      	movs	r3, #4
 8004862:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	440a      	add	r2, r1
 800487a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487e:	f043 0302 	orr.w	r3, r3, #2
 8004882:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004884:	e33e      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d141      	bne.n	8004920 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a8:	461a      	mov	r2, r3
 80048aa:	2320      	movs	r3, #32
 80048ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	333d      	adds	r3, #61	; 0x3d
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 831f 	bne.w	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	333d      	adds	r3, #61	; 0x3d
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	335c      	adds	r3, #92	; 0x5c
 80048ea:	2202      	movs	r2, #2
 80048ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	440a      	add	r2, r1
 8004904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f003 ff2c 	bl	8008776 <USB_HC_Halt>
}
 800491e:	e2f1      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d13f      	bne.n	80049b6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	440b      	add	r3, r1
 8004944:	335d      	adds	r3, #93	; 0x5d
 8004946:	2204      	movs	r2, #4
 8004948:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	333d      	adds	r3, #61	; 0x3d
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	3358      	adds	r3, #88	; 0x58
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	440a      	add	r2, r1
 8004988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f003 feea 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	e2a6      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d122      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f003 febc 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a10:	6093      	str	r3, [r2, #8]
}
 8004a12:	e277      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d135      	bne.n	8004a96 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	3358      	adds	r3, #88	; 0x58
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a58:	f043 0302 	orr.w	r3, r3, #2
 8004a5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f003 fe84 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	440b      	add	r3, r1
 8004a8e:	335d      	adds	r3, #93	; 0x5d
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
}
 8004a94:	e236      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d12b      	bne.n	8004b04 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2308      	movs	r3, #8
 8004abc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 fe44 	bl	8008776 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	440b      	add	r3, r1
 8004afc:	335d      	adds	r3, #93	; 0x5d
 8004afe:	2205      	movs	r2, #5
 8004b00:	701a      	strb	r2, [r3, #0]
}
 8004b02:	e1ff      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d155      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	3358      	adds	r3, #88	; 0x58
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	335d      	adds	r3, #93	; 0x5d
 8004b3e:	2203      	movs	r2, #3
 8004b40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	333d      	adds	r3, #61	; 0x3d
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d114      	bne.n	8004b82 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	333c      	adds	r3, #60	; 0x3c
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	440b      	add	r3, r1
 8004b7c:	333d      	adds	r3, #61	; 0x3d
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f003 fde2 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	6093      	str	r3, [r2, #8]
}
 8004bc4:	e19e      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d12b      	bne.n	8004c34 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fdb5 	bl	8008776 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	335d      	adds	r3, #93	; 0x5d
 8004c1c:	2206      	movs	r2, #6
 8004c1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	6093      	str	r3, [r2, #8]
}
 8004c32:	e167      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4a:	d135      	bne.n	8004cb8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f003 fd7d 	bl	8008776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	440b      	add	r3, r1
 8004cb0:	335d      	adds	r3, #93	; 0x5d
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	701a      	strb	r2, [r3, #0]
}
 8004cb6:	e125      	b.n	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	f040 811a 	bne.w	8004f04 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cea:	f023 0302 	bic.w	r3, r3, #2
 8004cee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	440b      	add	r3, r1
 8004cfe:	335d      	adds	r3, #93	; 0x5d
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d137      	bne.n	8004d76 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	440b      	add	r3, r1
 8004d14:	335c      	adds	r3, #92	; 0x5c
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	333f      	adds	r3, #63	; 0x3f
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d00b      	beq.n	8004d48 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	333f      	adds	r3, #63	; 0x3f
 8004d40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	f040 80c5 	bne.w	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	3351      	adds	r3, #81	; 0x51
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f083 0301 	eor.w	r3, r3, #1
 8004d5e:	b2d8      	uxtb	r0, r3
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3351      	adds	r3, #81	; 0x51
 8004d70:	4602      	mov	r2, r0
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e0ad      	b.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	440b      	add	r3, r1
 8004d84:	335d      	adds	r3, #93	; 0x5d
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d10a      	bne.n	8004da2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e097      	b.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	335d      	adds	r3, #93	; 0x5d
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d10a      	bne.n	8004dce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	335c      	adds	r3, #92	; 0x5c
 8004dc8:	2202      	movs	r2, #2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e081      	b.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	440b      	add	r3, r1
 8004ddc:	335d      	adds	r3, #93	; 0x5d
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10a      	bne.n	8004dfa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	440b      	add	r3, r1
 8004df2:	335c      	adds	r3, #92	; 0x5c
 8004df4:	2205      	movs	r2, #5
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e06b      	b.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	440b      	add	r3, r1
 8004e08:	335d      	adds	r3, #93	; 0x5d
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b06      	cmp	r3, #6
 8004e0e:	d00a      	beq.n	8004e26 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	440b      	add	r3, r1
 8004e1e:	335d      	adds	r3, #93	; 0x5d
 8004e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d155      	bne.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	440b      	add	r3, r1
 8004e34:	3358      	adds	r3, #88	; 0x58
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4403      	add	r3, r0
 8004e48:	3358      	adds	r3, #88	; 0x58
 8004e4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	440b      	add	r3, r1
 8004e5a:	3358      	adds	r3, #88	; 0x58
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d914      	bls.n	8004e8c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	3358      	adds	r3, #88	; 0x58
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	440b      	add	r3, r1
 8004e84:	335c      	adds	r3, #92	; 0x5c
 8004e86:	2204      	movs	r2, #4
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e009      	b.n	8004ea0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	335c      	adds	r3, #92	; 0x5c
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ebe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	b2d8      	uxtb	r0, r3
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	335c      	adds	r3, #92	; 0x5c
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	4601      	mov	r1, r0
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f00e ffe6 	bl	8013ed0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f04:	bf00      	nop
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	0c5b      	lsrs	r3, r3, #17
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f40:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d003      	beq.n	8004f50 <HCD_RXQLVL_IRQHandler+0x44>
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	f000 8082 	beq.w	8005052 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f4e:	e083      	b.n	8005058 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d07f      	beq.n	8005056 <HCD_RXQLVL_IRQHandler+0x14a>
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	3344      	adds	r3, #68	; 0x44
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d074      	beq.n	8005056 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3344      	adds	r3, #68	; 0x44
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	b292      	uxth	r2, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	f002 ff93 	bl	8007eb2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	3344      	adds	r3, #68	; 0x44
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	18d1      	adds	r1, r2, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4403      	add	r3, r0
 8004fb0:	3344      	adds	r3, #68	; 0x44
 8004fb2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	334c      	adds	r3, #76	; 0x4c
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	18d1      	adds	r1, r2, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4403      	add	r3, r0
 8004fd8:	334c      	adds	r3, #76	; 0x4c
 8004fda:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HCD_RXQLVL_IRQHandler+0x154>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d031      	beq.n	8005056 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005008:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005010:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	440b      	add	r3, r1
 8005032:	3350      	adds	r3, #80	; 0x50
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2d8      	uxtb	r0, r3
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	440b      	add	r3, r1
 800504a:	3350      	adds	r3, #80	; 0x50
 800504c:	4602      	mov	r2, r0
 800504e:	701a      	strb	r2, [r3, #0]
      break;
 8005050:	e001      	b.n	8005056 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005056:	bf00      	nop
  }
}
 8005058:	bf00      	nop
 800505a:	3728      	adds	r7, #40	; 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	1ff80000 	.word	0x1ff80000

08005064 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005090:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d10b      	bne.n	80050b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d102      	bne.n	80050ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f00e fef6 	bl	8013e98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d132      	bne.n	8005124 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f043 0308 	orr.w	r3, r3, #8
 80050c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d126      	bne.n	800511e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d113      	bne.n	8005100 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e2:	d106      	bne.n	80050f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f003 f81c 	bl	8008128 <USB_InitFSLSPClkSel>
 80050f0:	e011      	b.n	8005116 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2101      	movs	r1, #1
 80050f8:	4618      	mov	r0, r3
 80050fa:	f003 f815 	bl	8008128 <USB_InitFSLSPClkSel>
 80050fe:	e00a      	b.n	8005116 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510e:	461a      	mov	r2, r3
 8005110:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005114:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f00e fee8 	bl	8013eec <HAL_HCD_PortEnabled_Callback>
 800511c:	e002      	b.n	8005124 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f00e fef2 	bl	8013f08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b20      	cmp	r3, #32
 800512c:	d103      	bne.n	8005136 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6013      	str	r3, [r2, #0]
}
 8005142:	bf00      	nop
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0bf      	b.n	80052de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc f96e 	bl	8001454 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800518e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6999      	ldr	r1, [r3, #24]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 80051c0:	400b      	ands	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6919      	ldr	r1, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 800521c:	400b      	ands	r3, r1
 800521e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6919      	ldr	r1, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6959      	ldr	r1, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 800524a:	400b      	ands	r3, r1
 800524c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6959      	ldr	r1, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0206 	orr.w	r2, r2, #6
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	f000f800 	.word	0xf000f800

080052ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d023      	beq.n	8005356 <HAL_LTDC_IRQHandler+0x6a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2204      	movs	r2, #4
 800532e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2204      	movs	r2, #4
 8005344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f86f 	bl	8005434 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d023      	beq.n	80053a8 <HAL_LTDC_IRQHandler+0xbc>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01e      	beq.n	80053a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0202 	bic.w	r2, r2, #2
 8005378:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2202      	movs	r2, #2
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005388:	f043 0202 	orr.w	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f846 	bl	8005434 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <HAL_LTDC_IRQHandler+0xfe>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f00e fc5b 	bl	8013ca0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <HAL_LTDC_IRQHandler+0x140>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0208 	bic.w	r2, r2, #8
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2208      	movs	r2, #8
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f80e 	bl	8005448 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800545c:	b5b0      	push	{r4, r5, r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_LTDC_ConfigLayer+0x1a>
 8005472:	2302      	movs	r3, #2
 8005474:	e02c      	b.n	80054d0 <HAL_LTDC_ConfigLayer+0x74>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2134      	movs	r1, #52	; 0x34
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f849 	bl	8005548 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}

080054d8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_LTDC_ProgramLineEvent+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e023      	b.n	8005538 <HAL_LTDC_ProgramLineEvent+0x60>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40016800 	.word	0x40016800

08005548 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005564:	4413      	add	r3, r2
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	01db      	lsls	r3, r3, #7
 8005574:	4413      	add	r3, r2
 8005576:	3384      	adds	r3, #132	; 0x84
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4611      	mov	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	01d2      	lsls	r2, r2, #7
 8005584:	440a      	add	r2, r1
 8005586:	3284      	adds	r2, #132	; 0x84
 8005588:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800558c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559e:	4413      	add	r3, r2
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4619      	mov	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	440b      	add	r3, r1
 80055ae:	3384      	adds	r3, #132	; 0x84
 80055b0:	4619      	mov	r1, r3
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c6:	4413      	add	r3, r2
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	01db      	lsls	r3, r3, #7
 80055d6:	4413      	add	r3, r2
 80055d8:	3384      	adds	r3, #132	; 0x84
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	4611      	mov	r1, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	01d2      	lsls	r2, r2, #7
 80055e6:	440a      	add	r2, r1
 80055e8:	3284      	adds	r2, #132	; 0x84
 80055ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fe:	4413      	add	r3, r2
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4619      	mov	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	01db      	lsls	r3, r3, #7
 800560c:	440b      	add	r3, r1
 800560e:	3384      	adds	r3, #132	; 0x84
 8005610:	4619      	mov	r1, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	01db      	lsls	r3, r3, #7
 8005622:	4413      	add	r3, r2
 8005624:	3384      	adds	r3, #132	; 0x84
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	4611      	mov	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	01d2      	lsls	r2, r2, #7
 8005632:	440a      	add	r2, r1
 8005634:	3284      	adds	r2, #132	; 0x84
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	4413      	add	r3, r2
 8005648:	3384      	adds	r3, #132	; 0x84
 800564a:	461a      	mov	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	4413      	add	r3, r2
 800567a:	3384      	adds	r3, #132	; 0x84
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	01db      	lsls	r3, r3, #7
 8005688:	4413      	add	r3, r2
 800568a:	3384      	adds	r3, #132	; 0x84
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005698:	461a      	mov	r2, r3
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	431a      	orrs	r2, r3
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	440b      	add	r3, r1
 80056ae:	3384      	adds	r3, #132	; 0x84
 80056b0:	4619      	mov	r1, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	3384      	adds	r3, #132	; 0x84
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	4611      	mov	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	01d2      	lsls	r2, r2, #7
 80056d2:	440a      	add	r2, r1
 80056d4:	3284      	adds	r2, #132	; 0x84
 80056d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	4413      	add	r3, r2
 80056e8:	3384      	adds	r3, #132	; 0x84
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	3384      	adds	r3, #132	; 0x84
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	4611      	mov	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	01d2      	lsls	r2, r2, #7
 800570c:	440a      	add	r2, r1
 800570e:	3284      	adds	r2, #132	; 0x84
 8005710:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005714:	f023 0307 	bic.w	r3, r3, #7
 8005718:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6809      	ldr	r1, [r1, #0]
 8005726:	4608      	mov	r0, r1
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	01c9      	lsls	r1, r1, #7
 800572c:	4401      	add	r1, r0
 800572e:	3184      	adds	r1, #132	; 0x84
 8005730:	4313      	orrs	r3, r2
 8005732:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	01db      	lsls	r3, r3, #7
 800573e:	4413      	add	r3, r2
 8005740:	3384      	adds	r3, #132	; 0x84
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	4413      	add	r3, r2
 8005750:	3384      	adds	r3, #132	; 0x84
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	01db      	lsls	r3, r3, #7
 8005762:	4413      	add	r3, r2
 8005764:	3384      	adds	r3, #132	; 0x84
 8005766:	461a      	mov	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005776:	2304      	movs	r3, #4
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	e01b      	b.n	80057b4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d102      	bne.n	800578a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005784:	2303      	movs	r3, #3
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	e014      	b.n	80057b4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b04      	cmp	r3, #4
 8005790:	d00b      	beq.n	80057aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005796:	2b02      	cmp	r3, #2
 8005798:	d007      	beq.n	80057aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d003      	beq.n	80057aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057a6:	2b07      	cmp	r3, #7
 80057a8:	d102      	bne.n	80057b0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80057aa:	2302      	movs	r3, #2
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e001      	b.n	80057b4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	01db      	lsls	r3, r3, #7
 80057be:	4413      	add	r3, r2
 80057c0:	3384      	adds	r3, #132	; 0x84
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	4611      	mov	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	01d2      	lsls	r2, r2, #7
 80057ce:	440a      	add	r2, r1
 80057d0:	3284      	adds	r2, #132	; 0x84
 80057d2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80057d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	041a      	lsls	r2, r3, #16
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1acb      	subs	r3, r1, r3
 80057ee:	69f9      	ldr	r1, [r7, #28]
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	3303      	adds	r3, #3
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6809      	ldr	r1, [r1, #0]
 80057fa:	4608      	mov	r0, r1
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	01c9      	lsls	r1, r1, #7
 8005800:	4401      	add	r1, r0
 8005802:	3184      	adds	r1, #132	; 0x84
 8005804:	4313      	orrs	r3, r2
 8005806:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	01db      	lsls	r3, r3, #7
 8005812:	4413      	add	r3, r2
 8005814:	3384      	adds	r3, #132	; 0x84
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4611      	mov	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	01d2      	lsls	r2, r2, #7
 8005822:	440a      	add	r2, r1
 8005824:	3284      	adds	r2, #132	; 0x84
 8005826:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800582a:	f023 0307 	bic.w	r3, r3, #7
 800582e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	01db      	lsls	r3, r3, #7
 800583a:	4413      	add	r3, r2
 800583c:	3384      	adds	r3, #132	; 0x84
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	01db      	lsls	r3, r3, #7
 8005850:	4413      	add	r3, r2
 8005852:	3384      	adds	r3, #132	; 0x84
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	4611      	mov	r1, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	01d2      	lsls	r2, r2, #7
 8005860:	440a      	add	r2, r1
 8005862:	3284      	adds	r2, #132	; 0x84
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e25b      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005896:	4ba3      	ldr	r3, [pc, #652]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00c      	beq.n	80058bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4ba0      	ldr	r3, [pc, #640]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d112      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ae:	4b9d      	ldr	r3, [pc, #628]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b99      	ldr	r3, [pc, #612]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05b      	beq.n	8005980 <HAL_RCC_OscConfig+0x108>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d157      	bne.n	8005980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e236      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x74>
 80058de:	4b91      	ldr	r3, [pc, #580]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a90      	ldr	r2, [pc, #576]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e01d      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x98>
 80058f6:	4b8b      	ldr	r3, [pc, #556]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a8a      	ldr	r2, [pc, #552]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b88      	ldr	r3, [pc, #544]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a87      	ldr	r2, [pc, #540]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0xb0>
 8005910:	4b84      	ldr	r3, [pc, #528]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a83      	ldr	r2, [pc, #524]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b81      	ldr	r3, [pc, #516]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a80      	ldr	r2, [pc, #512]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fc ff9c 	bl	800286c <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005938:	f7fc ff98 	bl	800286c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e1fb      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b76      	ldr	r3, [pc, #472]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xc0>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fc ff88 	bl	800286c <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005960:	f7fc ff84 	bl	800286c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e1e7      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005972:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0xe8>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d063      	beq.n	8005a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b62      	ldr	r3, [pc, #392]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d11c      	bne.n	80059e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059a6:	4b5f      	ldr	r3, [pc, #380]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d116      	bne.n	80059e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	4b5c      	ldr	r3, [pc, #368]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_RCC_OscConfig+0x152>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e1bb      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ca:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4952      	ldr	r1, [pc, #328]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059de:	e03a      	b.n	8005a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e8:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <HAL_RCC_OscConfig+0x2b0>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fc ff3d 	bl	800286c <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f6:	f7fc ff39 	bl	800286c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e19c      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a08:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a14:	4b43      	ldr	r3, [pc, #268]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4940      	ldr	r1, [pc, #256]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <HAL_RCC_OscConfig+0x2b0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc ff1c 	bl	800286c <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a38:	f7fc ff18 	bl	800286c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e17b      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d030      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6a:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <HAL_RCC_OscConfig+0x2b4>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fc fefc 	bl	800286c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a78:	f7fc fef8 	bl	800286c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e15b      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x200>
 8005a96:	e015      	b.n	8005ac4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCC_OscConfig+0x2b4>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9e:	f7fc fee5 	bl	800286c <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa6:	f7fc fee1 	bl	800286c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e144      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80a0 	beq.w	8005c12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_RCC_OscConfig+0x2b8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d121      	bne.n	8005b52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_RCC_OscConfig+0x2b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <HAL_RCC_OscConfig+0x2b8>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fc fea7 	bl	800286c <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	e011      	b.n	8005b46 <HAL_RCC_OscConfig+0x2ce>
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470000 	.word	0x42470000
 8005b2c:	42470e80 	.word	0x42470e80
 8005b30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b34:	f7fc fe9a 	bl	800286c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e0fd      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b46:	4b81      	ldr	r3, [pc, #516]	; (8005d4c <HAL_RCC_OscConfig+0x4d4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d106      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2f0>
 8005b5a:	4b7d      	ldr	r3, [pc, #500]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a7c      	ldr	r2, [pc, #496]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x32a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCC_OscConfig+0x312>
 8005b70:	4b77      	ldr	r3, [pc, #476]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4a76      	ldr	r2, [pc, #472]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b76:	f043 0304 	orr.w	r3, r3, #4
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7c:	4b74      	ldr	r3, [pc, #464]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	4a73      	ldr	r2, [pc, #460]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6713      	str	r3, [r2, #112]	; 0x70
 8005b88:	e00b      	b.n	8005ba2 <HAL_RCC_OscConfig+0x32a>
 8005b8a:	4b71      	ldr	r3, [pc, #452]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a70      	ldr	r2, [pc, #448]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6713      	str	r3, [r2, #112]	; 0x70
 8005b96:	4b6e      	ldr	r3, [pc, #440]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	4a6d      	ldr	r2, [pc, #436]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005b9c:	f023 0304 	bic.w	r3, r3, #4
 8005ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d015      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fc fe5f 	bl	800286c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc fe5b 	bl	800286c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0bc      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ee      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x33a>
 8005bd4:	e014      	b.n	8005c00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd6:	f7fc fe49 	bl	800286c <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bdc:	e00a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fc fe45 	bl	800286c <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0a6      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf4:	4b56      	ldr	r3, [pc, #344]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c06:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	4a51      	ldr	r2, [pc, #324]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8092 	beq.w	8005d40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d05c      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d141      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <HAL_RCC_OscConfig+0x4dc>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fc fe19 	bl	800286c <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3e:	f7fc fe15 	bl	800286c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e078      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c50:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	019b      	lsls	r3, r3, #6
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	3b01      	subs	r3, #1
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	061b      	lsls	r3, r3, #24
 8005c80:	4933      	ldr	r1, [pc, #204]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c86:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <HAL_RCC_OscConfig+0x4dc>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fc fdee 	bl	800286c <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c94:	f7fc fdea 	bl	800286c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e04d      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0x41c>
 8005cb2:	e045      	b.n	8005d40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb4:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <HAL_RCC_OscConfig+0x4dc>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fc fdd7 	bl	800286c <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fc fdd3 	bl	800286c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e036      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x44a>
 8005ce0:	e02e      	b.n	8005d40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e029      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cee:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <HAL_RCC_OscConfig+0x4d8>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d11c      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d115      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d16:	4013      	ands	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	40023800 	.word	0x40023800
 8005d54:	42470060 	.word	0x42470060

08005d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0cc      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d6c:	4b68      	ldr	r3, [pc, #416]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d90c      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7a:	4b65      	ldr	r3, [pc, #404]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b63      	ldr	r3, [pc, #396]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0b8      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dac:	4b59      	ldr	r3, [pc, #356]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4a58      	ldr	r2, [pc, #352]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc4:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd0:	4b50      	ldr	r3, [pc, #320]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	494d      	ldr	r1, [pc, #308]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d044      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d119      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e07f      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d003      	beq.n	8005e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e16:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e06f      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e26:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e067      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e36:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f023 0203 	bic.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4934      	ldr	r1, [pc, #208]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e48:	f7fc fd10 	bl	800286c <HAL_GetTick>
 8005e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	e00a      	b.n	8005e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e50:	f7fc fd0c 	bl	800286c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e04f      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 020c 	and.w	r2, r3, #12
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d1eb      	bne.n	8005e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d20c      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e86:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <HAL_RCC_ClockConfig+0x1b8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e032      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4916      	ldr	r1, [pc, #88]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	490e      	ldr	r1, [pc, #56]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ede:	f000 f821 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a0a      	ldr	r2, [pc, #40]	; (8005f18 <HAL_RCC_ClockConfig+0x1c0>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fc fc70 	bl	80027e4 <HAL_InitTick>

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40023c00 	.word	0x40023c00
 8005f14:	40023800 	.word	0x40023800
 8005f18:	08026590 	.word	0x08026590
 8005f1c:	20000004 	.word	0x20000004
 8005f20:	20000008 	.word	0x20000008

08005f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	2300      	movs	r3, #0
 8005f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f3a:	4b50      	ldr	r3, [pc, #320]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d007      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x32>
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d008      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x38>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 808d 	bne.w	800606a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f50:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f52:	60bb      	str	r3, [r7, #8]
       break;
 8005f54:	e08c      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f56:	4b4b      	ldr	r3, [pc, #300]	; (8006084 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f58:	60bb      	str	r3, [r7, #8]
      break;
 8005f5a:	e089      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f5c:	4b47      	ldr	r3, [pc, #284]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f66:	4b45      	ldr	r3, [pc, #276]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d023      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f72:	4b42      	ldr	r3, [pc, #264]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	f04f 0400 	mov.w	r4, #0
 8005f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	ea03 0501 	and.w	r5, r3, r1
 8005f88:	ea04 0602 	and.w	r6, r4, r2
 8005f8c:	4a3d      	ldr	r2, [pc, #244]	; (8006084 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f8e:	fb02 f106 	mul.w	r1, r2, r6
 8005f92:	2200      	movs	r2, #0
 8005f94:	fb02 f205 	mul.w	r2, r2, r5
 8005f98:	440a      	add	r2, r1
 8005f9a:	493a      	ldr	r1, [pc, #232]	; (8006084 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f9c:	fba5 0101 	umull	r0, r1, r5, r1
 8005fa0:	1853      	adds	r3, r2, r1
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f04f 0400 	mov.w	r4, #0
 8005faa:	461a      	mov	r2, r3
 8005fac:	4623      	mov	r3, r4
 8005fae:	f7fa fd5d 	bl	8000a6c <__aeabi_uldivmod>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e049      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	f04f 0400 	mov.w	r4, #0
 8005fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	ea03 0501 	and.w	r5, r3, r1
 8005fd0:	ea04 0602 	and.w	r6, r4, r2
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	f04f 0400 	mov.w	r4, #0
 8005fe0:	0154      	lsls	r4, r2, #5
 8005fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005fe6:	014b      	lsls	r3, r1, #5
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4622      	mov	r2, r4
 8005fec:	1b49      	subs	r1, r1, r5
 8005fee:	eb62 0206 	sbc.w	r2, r2, r6
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	f04f 0400 	mov.w	r4, #0
 8005ffa:	0194      	lsls	r4, r2, #6
 8005ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006000:	018b      	lsls	r3, r1, #6
 8006002:	1a5b      	subs	r3, r3, r1
 8006004:	eb64 0402 	sbc.w	r4, r4, r2
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	00e2      	lsls	r2, r4, #3
 8006012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006016:	00d9      	lsls	r1, r3, #3
 8006018:	460b      	mov	r3, r1
 800601a:	4614      	mov	r4, r2
 800601c:	195b      	adds	r3, r3, r5
 800601e:	eb44 0406 	adc.w	r4, r4, r6
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	02a2      	lsls	r2, r4, #10
 800602c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006030:	0299      	lsls	r1, r3, #10
 8006032:	460b      	mov	r3, r1
 8006034:	4614      	mov	r4, r2
 8006036:	4618      	mov	r0, r3
 8006038:	4621      	mov	r1, r4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f04f 0400 	mov.w	r4, #0
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	f7fa fd12 	bl	8000a6c <__aeabi_uldivmod>
 8006048:	4603      	mov	r3, r0
 800604a:	460c      	mov	r4, r1
 800604c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800604e:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_RCC_GetSysClockFreq+0x158>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	3301      	adds	r3, #1
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	60bb      	str	r3, [r7, #8]
      break;
 8006068:	e002      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetSysClockFreq+0x15c>)
 800606c:	60bb      	str	r3, [r7, #8]
      break;
 800606e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006070:	68bb      	ldr	r3, [r7, #8]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607a:	bf00      	nop
 800607c:	40023800 	.word	0x40023800
 8006080:	00f42400 	.word	0x00f42400
 8006084:	017d7840 	.word	0x017d7840

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCC_GetHCLKFreq+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000004 	.word	0x20000004

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff0 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a8:	4601      	mov	r1, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4a03      	ldr	r2, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	080265a0 	.word	0x080265a0

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffdc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060d0:	4601      	mov	r1, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4a03      	ldr	r2, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5cd3      	ldrb	r3, [r2, r3]
 80060e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	080265a0 	.word	0x080265a0

080060f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006120:	2b00      	cmp	r3, #0
 8006122:	d075      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006124:	4bad      	ldr	r3, [pc, #692]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800612a:	f7fc fb9f 	bl	800286c <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006132:	f7fc fb9b 	bl	800286c <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e18b      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006144:	4ba6      	ldr	r3, [pc, #664]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f0      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	019a      	lsls	r2, r3, #6
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	071b      	lsls	r3, r3, #28
 8006168:	499d      	ldr	r1, [pc, #628]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01f      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800617c:	4b98      	ldr	r3, [pc, #608]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800617e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006182:	0f1b      	lsrs	r3, r3, #28
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	019a      	lsls	r2, r3, #6
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	061b      	lsls	r3, r3, #24
 8006196:	431a      	orrs	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	071b      	lsls	r3, r3, #28
 800619c:	4990      	ldr	r1, [pc, #576]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061a4:	4b8e      	ldr	r3, [pc, #568]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061aa:	f023 021f 	bic.w	r2, r3, #31
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	498a      	ldr	r1, [pc, #552]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	019a      	lsls	r2, r3, #6
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	061b      	lsls	r3, r3, #24
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	071b      	lsls	r3, r3, #28
 80061dc:	4980      	ldr	r1, [pc, #512]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061e4:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ea:	f7fc fb3f 	bl	800286c <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061f2:	f7fc fb3b 	bl	800286c <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e12b      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006204:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006224:	2b00      	cmp	r3, #0
 8006226:	d079      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006228:	4b6e      	ldr	r3, [pc, #440]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800622e:	f7fc fb1d 	bl	800286c <HAL_GetTick>
 8006232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006234:	e008      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006236:	f7fc fb19 	bl	800286c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e109      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006248:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006254:	d0ef      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	0f1b      	lsrs	r3, r3, #28
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	019a      	lsls	r2, r3, #6
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	431a      	orrs	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	071b      	lsls	r3, r3, #28
 8006282:	4957      	ldr	r1, [pc, #348]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800628a:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800628c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006290:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	3b01      	subs	r3, #1
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	4950      	ldr	r1, [pc, #320]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01e      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	0e1b      	lsrs	r3, r3, #24
 80062b8:	f003 030f 	and.w	r3, r3, #15
 80062bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	019a      	lsls	r2, r3, #6
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	071b      	lsls	r3, r3, #28
 80062d0:	4943      	ldr	r1, [pc, #268]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062d8:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	493e      	ldr	r1, [pc, #248]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062ee:	4b3d      	ldr	r3, [pc, #244]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062f4:	f7fc faba 	bl	800286c <HAL_GetTick>
 80062f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062fc:	f7fc fab6 	bl	800286c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e0a6      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631a:	d1ef      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 808d 	beq.w	8006444 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4a2b      	ldr	r2, [pc, #172]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006338:	6413      	str	r3, [r2, #64]	; 0x40
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006346:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800634c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006350:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006352:	f7fc fa8b 	bl	800286c <HAL_GetTick>
 8006356:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800635a:	f7fc fa87 	bl	800286c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e077      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800636c:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006380:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d039      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	d032      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063ac:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d11e      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063be:	f7fc fa55 	bl	800286c <HAL_GetTick>
 80063c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c4:	e014      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c6:	f7fc fa51 	bl	800286c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d90b      	bls.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e03f      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80063dc:	42470068 	.word	0x42470068
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470070 	.word	0x42470070
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0e4      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006408:	d10d      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	4911      	ldr	r1, [pc, #68]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006420:	4313      	orrs	r3, r2
 8006422:	608b      	str	r3, [r1, #8]
 8006424:	e005      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	4a0e      	ldr	r2, [pc, #56]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800642c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006430:	6093      	str	r3, [r2, #8]
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006434:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	4909      	ldr	r1, [pc, #36]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006440:	4313      	orrs	r3, r2
 8006442:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006456:	4b04      	ldr	r3, [pc, #16]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006458:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40023800 	.word	0x40023800
 8006468:	424711e0 	.word	0x424711e0

0800646c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e025      	b.n	80064cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fa fe47 	bl	8001128 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f001 fa95 	bl	80079dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	f001 fb00 	bl	8007ac2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10a      	bne.n	8006500 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f80c 	bl	8006508 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	615a      	str	r2, [r3, #20]
  }
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d101      	bne.n	8006538 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
 8006536:	e018      	b.n	800656a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fb39 	bl	8007bc0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d104      	bne.n	8006560 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2205      	movs	r2, #5
 800655a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800655e:	e003      	b.n	8006568 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d101      	bne.n	800658c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	e00e      	b.n	80065aa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fb4c 	bl	8007c38 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e01d      	b.n	8006600 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7fb fb7b 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f000 fa1f 	bl	8006a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b06      	cmp	r3, #6
 8006630:	d007      	beq.n	8006642 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0202 	mvn.w	r2, #2
 800667c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9af 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9a1 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9b2 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0204 	mvn.w	r2, #4
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f985 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f977 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f988 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b08      	cmp	r3, #8
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0208 	mvn.w	r2, #8
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f95b 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f94d 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f95e 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b10      	cmp	r3, #16
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0210 	mvn.w	r2, #16
 8006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2208      	movs	r2, #8
 800677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f931 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f923 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f934 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10e      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0201 	mvn.w	r2, #1
 80067cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f8fd 	bl	80069ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	d10e      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d107      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fada 	bl	8006db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d10e      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d107      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8f9 	bl	8006a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b20      	cmp	r3, #32
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b20      	cmp	r3, #32
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0220 	mvn.w	r2, #32
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 faa4 	bl	8006da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_TIM_ConfigClockSource+0x18>
 8006874:	2302      	movs	r3, #2
 8006876:	e0a6      	b.n	80069c6 <HAL_TIM_ConfigClockSource+0x166>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d067      	beq.n	8006980 <HAL_TIM_ConfigClockSource+0x120>
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d80b      	bhi.n	80068cc <HAL_TIM_ConfigClockSource+0x6c>
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d073      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x140>
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d802      	bhi.n	80068c2 <HAL_TIM_ConfigClockSource+0x62>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d06f      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80068c0:	e078      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d06c      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x140>
 80068c6:	2b30      	cmp	r3, #48	; 0x30
 80068c8:	d06a      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80068ca:	e073      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068cc:	2b70      	cmp	r3, #112	; 0x70
 80068ce:	d00d      	beq.n	80068ec <HAL_TIM_ConfigClockSource+0x8c>
 80068d0:	2b70      	cmp	r3, #112	; 0x70
 80068d2:	d804      	bhi.n	80068de <HAL_TIM_ConfigClockSource+0x7e>
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d033      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0xe0>
 80068d8:	2b60      	cmp	r3, #96	; 0x60
 80068da:	d041      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068dc:	e06a      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d066      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x152>
 80068e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e8:	d017      	beq.n	800691a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068ea:	e063      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6899      	ldr	r1, [r3, #8]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f000 f9b4 	bl	8006c68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
      break;
 8006918:	e04c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f000 f99d 	bl	8006c68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693c:	609a      	str	r2, [r3, #8]
      break;
 800693e:	e039      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	461a      	mov	r2, r3
 800694e:	f000 f911 	bl	8006b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2150      	movs	r1, #80	; 0x50
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f96a 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 800695e:	e029      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6859      	ldr	r1, [r3, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	461a      	mov	r2, r3
 800696e:	f000 f930 	bl	8006bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2160      	movs	r1, #96	; 0x60
 8006978:	4618      	mov	r0, r3
 800697a:	f000 f95a 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 800697e:	e019      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6859      	ldr	r1, [r3, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	461a      	mov	r2, r3
 800698e:	f000 f8f1 	bl	8006b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2140      	movs	r1, #64	; 0x40
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f94a 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 800699e:	e009      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 f941 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80069b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a40      	ldr	r2, [pc, #256]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d00f      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3d      	ldr	r2, [pc, #244]	; (8006b4c <TIM_Base_SetConfig+0x118>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00b      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3c      	ldr	r2, [pc, #240]	; (8006b50 <TIM_Base_SetConfig+0x11c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a3b      	ldr	r2, [pc, #236]	; (8006b54 <TIM_Base_SetConfig+0x120>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d02b      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d027      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <TIM_Base_SetConfig+0x118>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d023      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2b      	ldr	r2, [pc, #172]	; (8006b50 <TIM_Base_SetConfig+0x11c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01f      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2a      	ldr	r2, [pc, #168]	; (8006b54 <TIM_Base_SetConfig+0x120>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01b      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a29      	ldr	r2, [pc, #164]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d017      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <TIM_Base_SetConfig+0x128>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00f      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <TIM_Base_SetConfig+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <TIM_Base_SetConfig+0x134>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a24      	ldr	r2, [pc, #144]	; (8006b6c <TIM_Base_SetConfig+0x138>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a23      	ldr	r2, [pc, #140]	; (8006b70 <TIM_Base_SetConfig+0x13c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d108      	bne.n	8006af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d103      	bne.n	8006b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	615a      	str	r2, [r3, #20]
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40010400 	.word	0x40010400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800
 8006b68:	40001800 	.word	0x40001800
 8006b6c:	40001c00 	.word	0x40001c00
 8006b70:	40002000 	.word	0x40002000

08006b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 030a 	bic.w	r3, r3, #10
 8006bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b087      	sub	sp, #28
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0210 	bic.w	r2, r3, #16
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	031b      	lsls	r3, r3, #12
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f043 0307 	orr.w	r3, r3, #7
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	609a      	str	r2, [r3, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e05a      	b.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0c:	d01d      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a1d      	ldr	r2, [pc, #116]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1a      	ldr	r2, [pc, #104]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d10c      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40001800 	.word	0x40001800

08006da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e03f      	b.n	8006e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fb fc5c 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2224      	movs	r2, #36	; 0x24
 8006df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa69 	bl	80072e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10d      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x52>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f996 	bl	80071e0 <UART_Receive_IT>
      return;
 8006eb4:	e0d1      	b.n	800705a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80b0 	beq.w	800701e <HAL_UART_IRQHandler+0x1ba>
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x70>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80a5 	beq.w	800701e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x90>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <HAL_UART_IRQHandler+0xb0>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	f043 0202 	orr.w	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_UART_IRQHandler+0xd0>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	f043 0204 	orr.w	r2, r3, #4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <HAL_UART_IRQHandler+0xfa>
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <HAL_UART_IRQHandler+0xee>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	f043 0208 	orr.w	r2, r3, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d078      	beq.n	8007058 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <HAL_UART_IRQHandler+0x11c>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f930 	bl	80071e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x144>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d031      	beq.n	800700c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f879 	bl	80070a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d123      	bne.n	8007004 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <HAL_UART_IRQHandler+0x1fc>)
 8006fda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fb fdce 	bl	8002b82 <HAL_DMA_Abort_IT>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d016      	beq.n	800701a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffa:	e00e      	b.n	800701a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f845 	bl	800708c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007002:	e00a      	b.n	800701a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f841 	bl	800708c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700a:	e006      	b.n	800701a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f83d 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007018:	e01e      	b.n	8007058 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701a:	bf00      	nop
    return;
 800701c:	e01c      	b.n	8007058 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_UART_IRQHandler+0x1d6>
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f866 	bl	8007104 <UART_Transmit_IT>
    return;
 8007038:	e00f      	b.n	800705a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <HAL_UART_IRQHandler+0x1f6>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f8ae 	bl	80071b0 <UART_EndTransmit_IT>
    return;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007058:	bf00      	nop
  }
}
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	080070dd 	.word	0x080070dd

08007064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0201 	bic.w	r2, r2, #1
 80070c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff ffc8 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b21      	cmp	r3, #33	; 0x21
 8007116:	d144      	bne.n	80071a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d11a      	bne.n	8007158 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007136:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	621a      	str	r2, [r3, #32]
 800714a:	e00e      	b.n	800716a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	621a      	str	r2, [r3, #32]
 8007156:	e008      	b.n	800716a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	1c59      	adds	r1, r3, #1
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6211      	str	r1, [r2, #32]
 8007162:	781a      	ldrb	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29b      	uxth	r3, r3
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4619      	mov	r1, r3
 8007178:	84d1      	strh	r1, [r2, #38]	; 0x26
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10f      	bne.n	800719e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800718c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800719c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e000      	b.n	80071a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff ff47 	bl	8007064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b22      	cmp	r3, #34	; 0x22
 80071f2:	d171      	bne.n	80072d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fc:	d123      	bne.n	8007246 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10e      	bne.n	800722a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28
 8007228:	e029      	b.n	800727e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	b29b      	uxth	r3, r3
 8007232:	b2db      	uxtb	r3, r3
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
 8007244:	e01b      	b.n	800727e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6858      	ldr	r0, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6291      	str	r1, [r2, #40]	; 0x28
 800725e:	b2c2      	uxtb	r2, r0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e00c      	b.n	800727e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	1c58      	adds	r0, r3, #1
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	6288      	str	r0, [r1, #40]	; 0x28
 8007276:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29b      	uxth	r3, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800728e:	2b00      	cmp	r3, #0
 8007290:	d120      	bne.n	80072d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0220 	bic.w	r2, r2, #32
 80072a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fed4 	bl	8007078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e002      	b.n	80072da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80072d8:	2302      	movs	r3, #2
  }
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007326:	f023 030c 	bic.w	r3, r3, #12
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	430b      	orrs	r3, r1
 8007332:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007352:	f040 818b 	bne.w	800766c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4ac1      	ldr	r2, [pc, #772]	; (8007660 <UART_SetConfig+0x37c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d005      	beq.n	800736c <UART_SetConfig+0x88>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4abf      	ldr	r2, [pc, #764]	; (8007664 <UART_SetConfig+0x380>)
 8007366:	4293      	cmp	r3, r2
 8007368:	f040 80bd 	bne.w	80074e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fe feac 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8007370:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	461d      	mov	r5, r3
 8007376:	f04f 0600 	mov.w	r6, #0
 800737a:	46a8      	mov	r8, r5
 800737c:	46b1      	mov	r9, r6
 800737e:	eb18 0308 	adds.w	r3, r8, r8
 8007382:	eb49 0409 	adc.w	r4, r9, r9
 8007386:	4698      	mov	r8, r3
 8007388:	46a1      	mov	r9, r4
 800738a:	eb18 0805 	adds.w	r8, r8, r5
 800738e:	eb49 0906 	adc.w	r9, r9, r6
 8007392:	f04f 0100 	mov.w	r1, #0
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800739e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073a6:	4688      	mov	r8, r1
 80073a8:	4691      	mov	r9, r2
 80073aa:	eb18 0005 	adds.w	r0, r8, r5
 80073ae:	eb49 0106 	adc.w	r1, r9, r6
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	461d      	mov	r5, r3
 80073b8:	f04f 0600 	mov.w	r6, #0
 80073bc:	196b      	adds	r3, r5, r5
 80073be:	eb46 0406 	adc.w	r4, r6, r6
 80073c2:	461a      	mov	r2, r3
 80073c4:	4623      	mov	r3, r4
 80073c6:	f7f9 fb51 	bl	8000a6c <__aeabi_uldivmod>
 80073ca:	4603      	mov	r3, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	461a      	mov	r2, r3
 80073d0:	4ba5      	ldr	r3, [pc, #660]	; (8007668 <UART_SetConfig+0x384>)
 80073d2:	fba3 2302 	umull	r2, r3, r3, r2
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	461d      	mov	r5, r3
 80073e0:	f04f 0600 	mov.w	r6, #0
 80073e4:	46a9      	mov	r9, r5
 80073e6:	46b2      	mov	sl, r6
 80073e8:	eb19 0309 	adds.w	r3, r9, r9
 80073ec:	eb4a 040a 	adc.w	r4, sl, sl
 80073f0:	4699      	mov	r9, r3
 80073f2:	46a2      	mov	sl, r4
 80073f4:	eb19 0905 	adds.w	r9, r9, r5
 80073f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80073fc:	f04f 0100 	mov.w	r1, #0
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007408:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800740c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007410:	4689      	mov	r9, r1
 8007412:	4692      	mov	sl, r2
 8007414:	eb19 0005 	adds.w	r0, r9, r5
 8007418:	eb4a 0106 	adc.w	r1, sl, r6
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	461d      	mov	r5, r3
 8007422:	f04f 0600 	mov.w	r6, #0
 8007426:	196b      	adds	r3, r5, r5
 8007428:	eb46 0406 	adc.w	r4, r6, r6
 800742c:	461a      	mov	r2, r3
 800742e:	4623      	mov	r3, r4
 8007430:	f7f9 fb1c 	bl	8000a6c <__aeabi_uldivmod>
 8007434:	4603      	mov	r3, r0
 8007436:	460c      	mov	r4, r1
 8007438:	461a      	mov	r2, r3
 800743a:	4b8b      	ldr	r3, [pc, #556]	; (8007668 <UART_SetConfig+0x384>)
 800743c:	fba3 1302 	umull	r1, r3, r3, r2
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	2164      	movs	r1, #100	; 0x64
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	3332      	adds	r3, #50	; 0x32
 800744e:	4a86      	ldr	r2, [pc, #536]	; (8007668 <UART_SetConfig+0x384>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800745c:	4498      	add	r8, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	461d      	mov	r5, r3
 8007462:	f04f 0600 	mov.w	r6, #0
 8007466:	46a9      	mov	r9, r5
 8007468:	46b2      	mov	sl, r6
 800746a:	eb19 0309 	adds.w	r3, r9, r9
 800746e:	eb4a 040a 	adc.w	r4, sl, sl
 8007472:	4699      	mov	r9, r3
 8007474:	46a2      	mov	sl, r4
 8007476:	eb19 0905 	adds.w	r9, r9, r5
 800747a:	eb4a 0a06 	adc.w	sl, sl, r6
 800747e:	f04f 0100 	mov.w	r1, #0
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800748a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800748e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007492:	4689      	mov	r9, r1
 8007494:	4692      	mov	sl, r2
 8007496:	eb19 0005 	adds.w	r0, r9, r5
 800749a:	eb4a 0106 	adc.w	r1, sl, r6
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	461d      	mov	r5, r3
 80074a4:	f04f 0600 	mov.w	r6, #0
 80074a8:	196b      	adds	r3, r5, r5
 80074aa:	eb46 0406 	adc.w	r4, r6, r6
 80074ae:	461a      	mov	r2, r3
 80074b0:	4623      	mov	r3, r4
 80074b2:	f7f9 fadb 	bl	8000a6c <__aeabi_uldivmod>
 80074b6:	4603      	mov	r3, r0
 80074b8:	460c      	mov	r4, r1
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <UART_SetConfig+0x384>)
 80074be:	fba3 1302 	umull	r1, r3, r3, r2
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2164      	movs	r1, #100	; 0x64
 80074c6:	fb01 f303 	mul.w	r3, r1, r3
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	3332      	adds	r3, #50	; 0x32
 80074d0:	4a65      	ldr	r2, [pc, #404]	; (8007668 <UART_SetConfig+0x384>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	f003 0207 	and.w	r2, r3, #7
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4442      	add	r2, r8
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	e26f      	b.n	80079c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074e6:	f7fe fddb 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 80074ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	461d      	mov	r5, r3
 80074f0:	f04f 0600 	mov.w	r6, #0
 80074f4:	46a8      	mov	r8, r5
 80074f6:	46b1      	mov	r9, r6
 80074f8:	eb18 0308 	adds.w	r3, r8, r8
 80074fc:	eb49 0409 	adc.w	r4, r9, r9
 8007500:	4698      	mov	r8, r3
 8007502:	46a1      	mov	r9, r4
 8007504:	eb18 0805 	adds.w	r8, r8, r5
 8007508:	eb49 0906 	adc.w	r9, r9, r6
 800750c:	f04f 0100 	mov.w	r1, #0
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007518:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800751c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007520:	4688      	mov	r8, r1
 8007522:	4691      	mov	r9, r2
 8007524:	eb18 0005 	adds.w	r0, r8, r5
 8007528:	eb49 0106 	adc.w	r1, r9, r6
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	461d      	mov	r5, r3
 8007532:	f04f 0600 	mov.w	r6, #0
 8007536:	196b      	adds	r3, r5, r5
 8007538:	eb46 0406 	adc.w	r4, r6, r6
 800753c:	461a      	mov	r2, r3
 800753e:	4623      	mov	r3, r4
 8007540:	f7f9 fa94 	bl	8000a6c <__aeabi_uldivmod>
 8007544:	4603      	mov	r3, r0
 8007546:	460c      	mov	r4, r1
 8007548:	461a      	mov	r2, r3
 800754a:	4b47      	ldr	r3, [pc, #284]	; (8007668 <UART_SetConfig+0x384>)
 800754c:	fba3 2302 	umull	r2, r3, r3, r2
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	461d      	mov	r5, r3
 800755a:	f04f 0600 	mov.w	r6, #0
 800755e:	46a9      	mov	r9, r5
 8007560:	46b2      	mov	sl, r6
 8007562:	eb19 0309 	adds.w	r3, r9, r9
 8007566:	eb4a 040a 	adc.w	r4, sl, sl
 800756a:	4699      	mov	r9, r3
 800756c:	46a2      	mov	sl, r4
 800756e:	eb19 0905 	adds.w	r9, r9, r5
 8007572:	eb4a 0a06 	adc.w	sl, sl, r6
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800758a:	4689      	mov	r9, r1
 800758c:	4692      	mov	sl, r2
 800758e:	eb19 0005 	adds.w	r0, r9, r5
 8007592:	eb4a 0106 	adc.w	r1, sl, r6
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	461d      	mov	r5, r3
 800759c:	f04f 0600 	mov.w	r6, #0
 80075a0:	196b      	adds	r3, r5, r5
 80075a2:	eb46 0406 	adc.w	r4, r6, r6
 80075a6:	461a      	mov	r2, r3
 80075a8:	4623      	mov	r3, r4
 80075aa:	f7f9 fa5f 	bl	8000a6c <__aeabi_uldivmod>
 80075ae:	4603      	mov	r3, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	461a      	mov	r2, r3
 80075b4:	4b2c      	ldr	r3, [pc, #176]	; (8007668 <UART_SetConfig+0x384>)
 80075b6:	fba3 1302 	umull	r1, r3, r3, r2
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	2164      	movs	r1, #100	; 0x64
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	3332      	adds	r3, #50	; 0x32
 80075c8:	4a27      	ldr	r2, [pc, #156]	; (8007668 <UART_SetConfig+0x384>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075d6:	4498      	add	r8, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	461d      	mov	r5, r3
 80075dc:	f04f 0600 	mov.w	r6, #0
 80075e0:	46a9      	mov	r9, r5
 80075e2:	46b2      	mov	sl, r6
 80075e4:	eb19 0309 	adds.w	r3, r9, r9
 80075e8:	eb4a 040a 	adc.w	r4, sl, sl
 80075ec:	4699      	mov	r9, r3
 80075ee:	46a2      	mov	sl, r4
 80075f0:	eb19 0905 	adds.w	r9, r9, r5
 80075f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80075f8:	f04f 0100 	mov.w	r1, #0
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007604:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007608:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800760c:	4689      	mov	r9, r1
 800760e:	4692      	mov	sl, r2
 8007610:	eb19 0005 	adds.w	r0, r9, r5
 8007614:	eb4a 0106 	adc.w	r1, sl, r6
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	461d      	mov	r5, r3
 800761e:	f04f 0600 	mov.w	r6, #0
 8007622:	196b      	adds	r3, r5, r5
 8007624:	eb46 0406 	adc.w	r4, r6, r6
 8007628:	461a      	mov	r2, r3
 800762a:	4623      	mov	r3, r4
 800762c:	f7f9 fa1e 	bl	8000a6c <__aeabi_uldivmod>
 8007630:	4603      	mov	r3, r0
 8007632:	460c      	mov	r4, r1
 8007634:	461a      	mov	r2, r3
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <UART_SetConfig+0x384>)
 8007638:	fba3 1302 	umull	r1, r3, r3, r2
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	2164      	movs	r1, #100	; 0x64
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	3332      	adds	r3, #50	; 0x32
 800764a:	4a07      	ldr	r2, [pc, #28]	; (8007668 <UART_SetConfig+0x384>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	f003 0207 	and.w	r2, r3, #7
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4442      	add	r2, r8
 800765c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800765e:	e1b2      	b.n	80079c6 <UART_SetConfig+0x6e2>
 8007660:	40011000 	.word	0x40011000
 8007664:	40011400 	.word	0x40011400
 8007668:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4ad7      	ldr	r2, [pc, #860]	; (80079d0 <UART_SetConfig+0x6ec>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d005      	beq.n	8007682 <UART_SetConfig+0x39e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4ad6      	ldr	r2, [pc, #856]	; (80079d4 <UART_SetConfig+0x6f0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	f040 80d1 	bne.w	8007824 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007682:	f7fe fd21 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8007686:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	469a      	mov	sl, r3
 800768c:	f04f 0b00 	mov.w	fp, #0
 8007690:	46d0      	mov	r8, sl
 8007692:	46d9      	mov	r9, fp
 8007694:	eb18 0308 	adds.w	r3, r8, r8
 8007698:	eb49 0409 	adc.w	r4, r9, r9
 800769c:	4698      	mov	r8, r3
 800769e:	46a1      	mov	r9, r4
 80076a0:	eb18 080a 	adds.w	r8, r8, sl
 80076a4:	eb49 090b 	adc.w	r9, r9, fp
 80076a8:	f04f 0100 	mov.w	r1, #0
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076bc:	4688      	mov	r8, r1
 80076be:	4691      	mov	r9, r2
 80076c0:	eb1a 0508 	adds.w	r5, sl, r8
 80076c4:	eb4b 0609 	adc.w	r6, fp, r9
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4619      	mov	r1, r3
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	f04f 0400 	mov.w	r4, #0
 80076da:	0094      	lsls	r4, r2, #2
 80076dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076e0:	008b      	lsls	r3, r1, #2
 80076e2:	461a      	mov	r2, r3
 80076e4:	4623      	mov	r3, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	4631      	mov	r1, r6
 80076ea:	f7f9 f9bf 	bl	8000a6c <__aeabi_uldivmod>
 80076ee:	4603      	mov	r3, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	461a      	mov	r2, r3
 80076f4:	4bb8      	ldr	r3, [pc, #736]	; (80079d8 <UART_SetConfig+0x6f4>)
 80076f6:	fba3 2302 	umull	r2, r3, r3, r2
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	469b      	mov	fp, r3
 8007704:	f04f 0c00 	mov.w	ip, #0
 8007708:	46d9      	mov	r9, fp
 800770a:	46e2      	mov	sl, ip
 800770c:	eb19 0309 	adds.w	r3, r9, r9
 8007710:	eb4a 040a 	adc.w	r4, sl, sl
 8007714:	4699      	mov	r9, r3
 8007716:	46a2      	mov	sl, r4
 8007718:	eb19 090b 	adds.w	r9, r9, fp
 800771c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007734:	4689      	mov	r9, r1
 8007736:	4692      	mov	sl, r2
 8007738:	eb1b 0509 	adds.w	r5, fp, r9
 800773c:	eb4c 060a 	adc.w	r6, ip, sl
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4619      	mov	r1, r3
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	f04f 0400 	mov.w	r4, #0
 8007752:	0094      	lsls	r4, r2, #2
 8007754:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007758:	008b      	lsls	r3, r1, #2
 800775a:	461a      	mov	r2, r3
 800775c:	4623      	mov	r3, r4
 800775e:	4628      	mov	r0, r5
 8007760:	4631      	mov	r1, r6
 8007762:	f7f9 f983 	bl	8000a6c <__aeabi_uldivmod>
 8007766:	4603      	mov	r3, r0
 8007768:	460c      	mov	r4, r1
 800776a:	461a      	mov	r2, r3
 800776c:	4b9a      	ldr	r3, [pc, #616]	; (80079d8 <UART_SetConfig+0x6f4>)
 800776e:	fba3 1302 	umull	r1, r3, r3, r2
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	2164      	movs	r1, #100	; 0x64
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	3332      	adds	r3, #50	; 0x32
 8007780:	4a95      	ldr	r2, [pc, #596]	; (80079d8 <UART_SetConfig+0x6f4>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800778c:	4498      	add	r8, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	469b      	mov	fp, r3
 8007792:	f04f 0c00 	mov.w	ip, #0
 8007796:	46d9      	mov	r9, fp
 8007798:	46e2      	mov	sl, ip
 800779a:	eb19 0309 	adds.w	r3, r9, r9
 800779e:	eb4a 040a 	adc.w	r4, sl, sl
 80077a2:	4699      	mov	r9, r3
 80077a4:	46a2      	mov	sl, r4
 80077a6:	eb19 090b 	adds.w	r9, r9, fp
 80077aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077ae:	f04f 0100 	mov.w	r1, #0
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077c2:	4689      	mov	r9, r1
 80077c4:	4692      	mov	sl, r2
 80077c6:	eb1b 0509 	adds.w	r5, fp, r9
 80077ca:	eb4c 060a 	adc.w	r6, ip, sl
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	4619      	mov	r1, r3
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	f04f 0400 	mov.w	r4, #0
 80077e0:	0094      	lsls	r4, r2, #2
 80077e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077e6:	008b      	lsls	r3, r1, #2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	4631      	mov	r1, r6
 80077f0:	f7f9 f93c 	bl	8000a6c <__aeabi_uldivmod>
 80077f4:	4603      	mov	r3, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	461a      	mov	r2, r3
 80077fa:	4b77      	ldr	r3, [pc, #476]	; (80079d8 <UART_SetConfig+0x6f4>)
 80077fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	2164      	movs	r1, #100	; 0x64
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	3332      	adds	r3, #50	; 0x32
 800780e:	4a72      	ldr	r2, [pc, #456]	; (80079d8 <UART_SetConfig+0x6f4>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4442      	add	r2, r8
 8007820:	609a      	str	r2, [r3, #8]
 8007822:	e0d0      	b.n	80079c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007824:	f7fe fc3c 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8007828:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	469a      	mov	sl, r3
 800782e:	f04f 0b00 	mov.w	fp, #0
 8007832:	46d0      	mov	r8, sl
 8007834:	46d9      	mov	r9, fp
 8007836:	eb18 0308 	adds.w	r3, r8, r8
 800783a:	eb49 0409 	adc.w	r4, r9, r9
 800783e:	4698      	mov	r8, r3
 8007840:	46a1      	mov	r9, r4
 8007842:	eb18 080a 	adds.w	r8, r8, sl
 8007846:	eb49 090b 	adc.w	r9, r9, fp
 800784a:	f04f 0100 	mov.w	r1, #0
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007856:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800785a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800785e:	4688      	mov	r8, r1
 8007860:	4691      	mov	r9, r2
 8007862:	eb1a 0508 	adds.w	r5, sl, r8
 8007866:	eb4b 0609 	adc.w	r6, fp, r9
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	f04f 0400 	mov.w	r4, #0
 800787c:	0094      	lsls	r4, r2, #2
 800787e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007882:	008b      	lsls	r3, r1, #2
 8007884:	461a      	mov	r2, r3
 8007886:	4623      	mov	r3, r4
 8007888:	4628      	mov	r0, r5
 800788a:	4631      	mov	r1, r6
 800788c:	f7f9 f8ee 	bl	8000a6c <__aeabi_uldivmod>
 8007890:	4603      	mov	r3, r0
 8007892:	460c      	mov	r4, r1
 8007894:	461a      	mov	r2, r3
 8007896:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <UART_SetConfig+0x6f4>)
 8007898:	fba3 2302 	umull	r2, r3, r3, r2
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	469b      	mov	fp, r3
 80078a6:	f04f 0c00 	mov.w	ip, #0
 80078aa:	46d9      	mov	r9, fp
 80078ac:	46e2      	mov	sl, ip
 80078ae:	eb19 0309 	adds.w	r3, r9, r9
 80078b2:	eb4a 040a 	adc.w	r4, sl, sl
 80078b6:	4699      	mov	r9, r3
 80078b8:	46a2      	mov	sl, r4
 80078ba:	eb19 090b 	adds.w	r9, r9, fp
 80078be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078c2:	f04f 0100 	mov.w	r1, #0
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078d6:	4689      	mov	r9, r1
 80078d8:	4692      	mov	sl, r2
 80078da:	eb1b 0509 	adds.w	r5, fp, r9
 80078de:	eb4c 060a 	adc.w	r6, ip, sl
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4619      	mov	r1, r3
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	0094      	lsls	r4, r2, #2
 80078f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078fa:	008b      	lsls	r3, r1, #2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4623      	mov	r3, r4
 8007900:	4628      	mov	r0, r5
 8007902:	4631      	mov	r1, r6
 8007904:	f7f9 f8b2 	bl	8000a6c <__aeabi_uldivmod>
 8007908:	4603      	mov	r3, r0
 800790a:	460c      	mov	r4, r1
 800790c:	461a      	mov	r2, r3
 800790e:	4b32      	ldr	r3, [pc, #200]	; (80079d8 <UART_SetConfig+0x6f4>)
 8007910:	fba3 1302 	umull	r1, r3, r3, r2
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	2164      	movs	r1, #100	; 0x64
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	3332      	adds	r3, #50	; 0x32
 8007922:	4a2d      	ldr	r2, [pc, #180]	; (80079d8 <UART_SetConfig+0x6f4>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800792e:	4498      	add	r8, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	469b      	mov	fp, r3
 8007934:	f04f 0c00 	mov.w	ip, #0
 8007938:	46d9      	mov	r9, fp
 800793a:	46e2      	mov	sl, ip
 800793c:	eb19 0309 	adds.w	r3, r9, r9
 8007940:	eb4a 040a 	adc.w	r4, sl, sl
 8007944:	4699      	mov	r9, r3
 8007946:	46a2      	mov	sl, r4
 8007948:	eb19 090b 	adds.w	r9, r9, fp
 800794c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800795c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007964:	4689      	mov	r9, r1
 8007966:	4692      	mov	sl, r2
 8007968:	eb1b 0509 	adds.w	r5, fp, r9
 800796c:	eb4c 060a 	adc.w	r6, ip, sl
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4619      	mov	r1, r3
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	f04f 0400 	mov.w	r4, #0
 8007982:	0094      	lsls	r4, r2, #2
 8007984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007988:	008b      	lsls	r3, r1, #2
 800798a:	461a      	mov	r2, r3
 800798c:	4623      	mov	r3, r4
 800798e:	4628      	mov	r0, r5
 8007990:	4631      	mov	r1, r6
 8007992:	f7f9 f86b 	bl	8000a6c <__aeabi_uldivmod>
 8007996:	4603      	mov	r3, r0
 8007998:	460c      	mov	r4, r1
 800799a:	461a      	mov	r2, r3
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <UART_SetConfig+0x6f4>)
 800799e:	fba3 1302 	umull	r1, r3, r3, r2
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	2164      	movs	r1, #100	; 0x64
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	3332      	adds	r3, #50	; 0x32
 80079b0:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <UART_SetConfig+0x6f4>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	f003 020f 	and.w	r2, r3, #15
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4442      	add	r2, r8
 80079c2:	609a      	str	r2, [r3, #8]
}
 80079c4:	e7ff      	b.n	80079c6 <UART_SetConfig+0x6e2>
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	40011000 	.word	0x40011000
 80079d4:	40011400 	.word	0x40011400
 80079d8:	51eb851f 	.word	0x51eb851f

080079dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d029      	beq.n	8007a4a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a06:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a10:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007a16:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007a1c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007a22:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007a28:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007a2e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007a34:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007a3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	e034      	b.n	8007ab4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a56:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a60:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a66:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a7e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a88:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007a8e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007a94:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007a9a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007aa0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d02e      	beq.n	8007b3a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ae8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007af8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b02:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b0c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b16:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b20:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	609a      	str	r2, [r3, #8]
 8007b38:	e03b      	b.n	8007bb2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b4a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b70:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007b80:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007b8a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007b94:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007bdc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007be6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007bf8:	f7fa fe38 	bl	800286c <HAL_GetTick>
 8007bfc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007bfe:	e010      	b.n	8007c22 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d00c      	beq.n	8007c22 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <FMC_SDRAM_SendCommand+0x5e>
 8007c0e:	f7fa fe2d 	bl	800286c <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d201      	bcs.n	8007c22 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e006      	b.n	8007c30 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d0e8      	beq.n	8007c00 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c5e:	b084      	sub	sp, #16
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	f107 001c 	add.w	r0, r7, #28
 8007c6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d122      	bne.n	8007cbc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d105      	bne.n	8007cb0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f949 	bl	8007f48 <USB_CoreReset>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
 8007cba:	e01a      	b.n	8007cf2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f93d 	bl	8007f48 <USB_CoreReset>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8007ce4:	e005      	b.n	8007cf2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10b      	bne.n	8007d10 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f043 0206 	orr.w	r2, r3, #6
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d1c:	b004      	add	sp, #16
 8007d1e:	4770      	bx	lr

08007d20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f043 0201 	orr.w	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f023 0201 	bic.w	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d106      	bne.n	8007d90 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	e00b      	b.n	8007da8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	e001      	b.n	8007da8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e003      	b.n	8007db0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007da8:	2032      	movs	r0, #50	; 0x32
 8007daa:	f7fa fd6b 	bl	8002884 <HAL_Delay>

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	019b      	lsls	r3, r3, #6
 8007dca:	f043 0220 	orr.w	r2, r3, #32
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <USB_FlushTxFifo+0x48>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e006      	b.n	8007df2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d0f0      	beq.n	8007dd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	00030d40 	.word	0x00030d40

08007e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2210      	movs	r2, #16
 8007e14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <USB_FlushRxFifo+0x40>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d901      	bls.n	8007e28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e006      	b.n	8007e36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d0f0      	beq.n	8007e16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	00030d40 	.word	0x00030d40

08007e48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b089      	sub	sp, #36	; 0x24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4611      	mov	r1, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	460b      	mov	r3, r1
 8007e58:	71fb      	strb	r3, [r7, #7]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11a      	bne.n	8007ea4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e6e:	88bb      	ldrh	r3, [r7, #4]
 8007e70:	3303      	adds	r3, #3
 8007e72:	089b      	lsrs	r3, r3, #2
 8007e74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e76:	2300      	movs	r3, #0
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	e00f      	b.n	8007e9c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	031a      	lsls	r2, r3, #12
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e88:	461a      	mov	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	3304      	adds	r3, #4
 8007e94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d3eb      	bcc.n	8007e7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3724      	adds	r7, #36	; 0x24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b089      	sub	sp, #36	; 0x24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	3303      	adds	r3, #3
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
 8007ed4:	e00b      	b.n	8007eee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3ef      	bcc.n	8007ed6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ef6:	69fb      	ldr	r3, [r7, #28]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3724      	adds	r7, #36	; 0x24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0301 	and.w	r3, r3, #1
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4a13      	ldr	r2, [pc, #76]	; (8007fac <USB_CoreReset+0x64>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d901      	bls.n	8007f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e01b      	b.n	8007f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	daf2      	bge.n	8007f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a09      	ldr	r2, [pc, #36]	; (8007fac <USB_CoreReset+0x64>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d901      	bls.n	8007f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e006      	b.n	8007f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d0f0      	beq.n	8007f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	00030d40 	.word	0x00030d40

08007fb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	f107 001c 	add.w	r0, r7, #28
 8007fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d018      	beq.n	8008034 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10a      	bne.n	800801e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008016:	f043 0304 	orr.w	r3, r3, #4
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e014      	b.n	8008048 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e009      	b.n	8008048 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008042:	f023 0304 	bic.w	r3, r3, #4
 8008046:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008048:	2110      	movs	r1, #16
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff feb4 	bl	8007db8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fed7 	bl	8007e04 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e015      	b.n	8008088 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008068:	461a      	mov	r2, r3
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	429a      	cmp	r2, r3
 800808e:	d3e5      	bcc.n	800805c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f8ac 	bl	80081f0 <USB_DriveVbus>

  HAL_Delay(200U);
 8008098:	20c8      	movs	r0, #200	; 0xc8
 800809a:	f7fa fbf3 	bl	8002884 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295
 80080aa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a14      	ldr	r2, [pc, #80]	; (8008114 <USB_HostInit+0x164>)
 80080c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a13      	ldr	r2, [pc, #76]	; (8008118 <USB_HostInit+0x168>)
 80080ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80080ce:	e009      	b.n	80080e4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a10      	ldr	r2, [pc, #64]	; (800811c <USB_HostInit+0x16c>)
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a10      	ldr	r2, [pc, #64]	; (8008120 <USB_HostInit+0x170>)
 80080e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f043 0210 	orr.w	r2, r3, #16
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <USB_HostInit+0x174>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810e:	b004      	add	sp, #16
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	01000200 	.word	0x01000200
 8008118:	00e00300 	.word	0x00e00300
 800811c:	00600080 	.word	0x00600080
 8008120:	004000e0 	.word	0x004000e0
 8008124:	a3200008 	.word	0xa3200008

08008128 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008146:	f023 0303 	bic.w	r3, r3, #3
 800814a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008160:	4313      	orrs	r3, r2
 8008162:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d107      	bne.n	800817a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008170:	461a      	mov	r2, r3
 8008172:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008176:	6053      	str	r3, [r2, #4]
 8008178:	e009      	b.n	800818e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d106      	bne.n	800818e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008186:	461a      	mov	r2, r3
 8008188:	f241 7370 	movw	r3, #6000	; 0x1770
 800818c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80081bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80081cc:	2064      	movs	r0, #100	; 0x64
 80081ce:	f7fa fb59 	bl	8002884 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80081e0:	200a      	movs	r0, #10
 80081e2:	f7fa fb4f 	bl	8002884 <HAL_Delay>

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008214:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <USB_DriveVbus+0x44>
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d106      	bne.n	8008234 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800822e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008232:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823e:	d109      	bne.n	8008254 <USB_DriveVbus+0x64>
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800824e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008252:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	0c5b      	lsrs	r3, r3, #17
 8008280:	f003 0303 	and.w	r3, r3, #3
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	b29b      	uxth	r3, r3
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	70fb      	strb	r3, [r7, #3]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70bb      	strb	r3, [r7, #2]
 80082ca:	4613      	mov	r3, r2
 80082cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e2:	461a      	mov	r2, r3
 80082e4:	f04f 33ff 	mov.w	r3, #4294967295
 80082e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80082ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d87e      	bhi.n	80083f0 <USB_HC_Init+0x13c>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <USB_HC_Init+0x44>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008309 	.word	0x08008309
 80082fc:	080083b3 	.word	0x080083b3
 8008300:	08008309 	.word	0x08008309
 8008304:	08008375 	.word	0x08008375
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008314:	461a      	mov	r2, r3
 8008316:	f240 439d 	movw	r3, #1181	; 0x49d
 800831a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800831c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008320:	2b00      	cmp	r3, #0
 8008322:	da10      	bge.n	8008346 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4413      	add	r3, r2
 800832c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	440a      	add	r2, r1
 800833a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008342:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008344:	e057      	b.n	80083f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d051      	beq.n	80083f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4413      	add	r3, r2
 800835a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	440a      	add	r2, r1
 8008368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800836c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008370:	60d3      	str	r3, [r2, #12]
      break;
 8008372:	e040      	b.n	80083f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4413      	add	r3, r2
 800837c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008380:	461a      	mov	r2, r3
 8008382:	f240 639d 	movw	r3, #1693	; 0x69d
 8008386:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800838c:	2b00      	cmp	r3, #0
 800838e:	da34      	bge.n	80083fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4413      	add	r3, r2
 8008398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80083b0:	e023      	b.n	80083fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083be:	461a      	mov	r2, r3
 80083c0:	f240 2325 	movw	r3, #549	; 0x225
 80083c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	da17      	bge.n	80083fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80083ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80083ee:	e006      	b.n	80083fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
      break;
 80083f4:	e004      	b.n	8008400 <USB_HC_Init+0x14c>
      break;
 80083f6:	bf00      	nop
 80083f8:	e002      	b.n	8008400 <USB_HC_Init+0x14c>
      break;
 80083fa:	bf00      	nop
 80083fc:	e000      	b.n	8008400 <USB_HC_Init+0x14c>
      break;
 80083fe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008406:	699a      	ldr	r2, [r3, #24]
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	2101      	movs	r1, #1
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800841a:	4313      	orrs	r3, r2
 800841c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800842a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800842e:	2b00      	cmp	r3, #0
 8008430:	da03      	bge.n	800843a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	e001      	b.n	800843e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800843e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	e001      	b.n	8008452 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008452:	787b      	ldrb	r3, [r7, #1]
 8008454:	059b      	lsls	r3, r3, #22
 8008456:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800845a:	78bb      	ldrb	r3, [r7, #2]
 800845c:	02db      	lsls	r3, r3, #11
 800845e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008462:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008468:	049b      	lsls	r3, r3, #18
 800846a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800846e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008470:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008472:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008476:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	0159      	lsls	r1, r3, #5
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	440b      	add	r3, r1
 8008484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008488:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800848e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008494:	2b03      	cmp	r3, #3
 8008496:	d10f      	bne.n	80084b8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop

080084c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08c      	sub	sp, #48	; 0x30
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80084e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d028      	beq.n	8008544 <USB_HC_StartXfer+0x7c>
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d124      	bne.n	8008544 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <USB_HC_StartXfer+0x50>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	795b      	ldrb	r3, [r3, #5]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	4619      	mov	r1, r3
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fa30 	bl	8008974 <USB_DoPing>
      return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e114      	b.n	8008742 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d112      	bne.n	8008544 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	440a      	add	r2, r1
 8008534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008538:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800853c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d018      	beq.n	800857e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	8912      	ldrh	r2, [r2, #8]
 8008554:	4413      	add	r3, r2
 8008556:	3b01      	subs	r3, #1
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	8912      	ldrh	r2, [r2, #8]
 800855c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008560:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008562:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008564:	8b7b      	ldrh	r3, [r7, #26]
 8008566:	429a      	cmp	r2, r3
 8008568:	d90b      	bls.n	8008582 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800856a:	8b7b      	ldrh	r3, [r7, #26]
 800856c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800856e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	8912      	ldrh	r2, [r2, #8]
 8008574:	fb02 f203 	mul.w	r2, r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	611a      	str	r2, [r3, #16]
 800857c:	e001      	b.n	8008582 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800857e:	2301      	movs	r3, #1
 8008580:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	78db      	ldrb	r3, [r3, #3]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800858a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	8912      	ldrh	r2, [r2, #8]
 8008590:	fb02 f203 	mul.w	r2, r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085a2:	04d9      	lsls	r1, r3, #19
 80085a4:	4b69      	ldr	r3, [pc, #420]	; (800874c <USB_HC_StartXfer+0x284>)
 80085a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	7a9b      	ldrb	r3, [r3, #10]
 80085ae:	075b      	lsls	r3, r3, #29
 80085b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085b4:	69f9      	ldr	r1, [r7, #28]
 80085b6:	0148      	lsls	r0, r1, #5
 80085b8:	6a39      	ldr	r1, [r7, #32]
 80085ba:	4401      	add	r1, r0
 80085bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	68d9      	ldr	r1, [r3, #12]
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085da:	460a      	mov	r2, r1
 80085dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008610:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008614:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	7e7b      	ldrb	r3, [r7, #25]
 8008626:	075b      	lsls	r3, r3, #29
 8008628:	69f9      	ldr	r1, [r7, #28]
 800862a:	0148      	lsls	r0, r1, #5
 800862c:	6a39      	ldr	r1, [r7, #32]
 800862e:	4401      	add	r1, r0
 8008630:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008634:	4313      	orrs	r3, r2
 8008636:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a42      	ldr	r2, [pc, #264]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008648:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800864a:	4b41      	ldr	r3, [pc, #260]	; (8008750 <USB_HC_StartXfer+0x288>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008652:	4a3f      	ldr	r2, [pc, #252]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008654:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	78db      	ldrb	r3, [r3, #3]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800865e:	4b3c      	ldr	r3, [pc, #240]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008666:	4a3a      	ldr	r2, [pc, #232]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e005      	b.n	8008678 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800866c:	4b38      	ldr	r3, [pc, #224]	; (8008750 <USB_HC_StartXfer+0x288>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008674:	4a36      	ldr	r2, [pc, #216]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008676:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008678:	4b35      	ldr	r3, [pc, #212]	; (8008750 <USB_HC_StartXfer+0x288>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008680:	4a33      	ldr	r2, [pc, #204]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008682:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	4413      	add	r3, r2
 800868c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008690:	461a      	mov	r2, r3
 8008692:	4b2f      	ldr	r3, [pc, #188]	; (8008750 <USB_HC_StartXfer+0x288>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e04f      	b.n	8008742 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d14a      	bne.n	8008740 <USB_HC_StartXfer+0x278>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d046      	beq.n	8008740 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	79db      	ldrb	r3, [r3, #7]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d830      	bhi.n	800871c <USB_HC_StartXfer+0x254>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <USB_HC_StartXfer+0x1f8>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086d1 	.word	0x080086d1
 80086c4:	080086f5 	.word	0x080086f5
 80086c8:	080086d1 	.word	0x080086d1
 80086cc:	080086f5 	.word	0x080086f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	3303      	adds	r3, #3
 80086d6:	089b      	lsrs	r3, r3, #2
 80086d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086da:	8afa      	ldrh	r2, [r7, #22]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d91c      	bls.n	8008720 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f043 0220 	orr.w	r2, r3, #32
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80086f2:	e015      	b.n	8008720 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	3303      	adds	r3, #3
 80086fa:	089b      	lsrs	r3, r3, #2
 80086fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80086fe:	8afa      	ldrh	r2, [r7, #22]
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	b29b      	uxth	r3, r3
 800870a:	429a      	cmp	r2, r3
 800870c:	d90a      	bls.n	8008724 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	619a      	str	r2, [r3, #24]
        }
        break;
 800871a:	e003      	b.n	8008724 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800871c:	bf00      	nop
 800871e:	e002      	b.n	8008726 <USB_HC_StartXfer+0x25e>
        break;
 8008720:	bf00      	nop
 8008722:	e000      	b.n	8008726 <USB_HC_StartXfer+0x25e>
        break;
 8008724:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	68d9      	ldr	r1, [r3, #12]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	785a      	ldrb	r2, [r3, #1]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	b298      	uxth	r0, r3
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff fb84 	bl	8007e48 <USB_WritePacket>
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	1ff80000 	.word	0x1ff80000
 8008750:	2000013c 	.word	0x2000013c

08008754 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	b29b      	uxth	r3, r3
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	0c9b      	lsrs	r3, r3, #18
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <USB_HC_Halt+0x3a>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d16c      	bne.n	800888a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ce:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d143      	bne.n	8008864 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4413      	add	r3, r2
 8008804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	440a      	add	r2, r1
 8008812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800881a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008836:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800883a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	3301      	adds	r3, #1
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008848:	d81d      	bhi.n	8008886 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4413      	add	r3, r2
 8008852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800885c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008860:	d0ec      	beq.n	800883c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008862:	e080      	b.n	8008966 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4413      	add	r3, r2
 800886c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	440a      	add	r2, r1
 800887a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800887e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008882:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008884:	e06f      	b.n	8008966 <USB_HC_Halt+0x1f0>
          break;
 8008886:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008888:	e06d      	b.n	8008966 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d143      	bne.n	8008942 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	440a      	add	r2, r1
 8008910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008918:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	3301      	adds	r3, #1
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008926:	d81d      	bhi.n	8008964 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800893a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893e:	d0ec      	beq.n	800891a <USB_HC_Halt+0x1a4>
 8008940:	e011      	b.n	8008966 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	440a      	add	r2, r1
 8008958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	e000      	b.n	8008966 <USB_HC_Halt+0x1f0>
          break;
 8008964:	bf00      	nop
    }
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008988:	2301      	movs	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	04da      	lsls	r2, r3, #19
 8008990:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <USB_DoPing+0x74>)
 8008992:	4013      	ands	r3, r2
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	440a      	add	r2, r1
 800899c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d2:	461a      	mov	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	1ff80000 	.word	0x1ff80000

080089ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f9a0 	bl	8007d42 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008a02:	2110      	movs	r1, #16
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff f9d7 	bl	8007db8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff f9fa 	bl	8007e04 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	e01f      	b.n	8008a56 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3301      	adds	r3, #1
 8008a54:	613b      	str	r3, [r7, #16]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b0f      	cmp	r3, #15
 8008a5a:	d9dc      	bls.n	8008a16 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	e034      	b.n	8008acc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a78:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a88:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	461a      	mov	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aa8:	d80c      	bhi.n	8008ac4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac0:	d0ec      	beq.n	8008a9c <USB_StopHost+0xb0>
 8008ac2:	e000      	b.n	8008ac6 <USB_StopHost+0xda>
        break;
 8008ac4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d9c7      	bls.n	8008a62 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff f919 	bl	8007d20 <USB_EnableGlobalInt>

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008afc:	4904      	ldr	r1, [pc, #16]	; (8008b10 <MX_FATFS_Init+0x18>)
 8008afe:	4805      	ldr	r0, [pc, #20]	; (8008b14 <MX_FATFS_Init+0x1c>)
 8008b00:	f005 f8da 	bl	800dcb8 <FATFS_LinkDriver>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <MX_FATFS_Init+0x20>)
 8008b0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b0c:	bf00      	nop
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20001610 	.word	0x20001610
 8008b14:	080265a8 	.word	0x080265a8
 8008b18:	20002478 	.word	0x20002478

08008b1c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	4619      	mov	r1, r3
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBH_status+0x34>)
 8008b48:	f000 fe11 	bl	800976e <USBH_MSC_UnitIsReady>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <USBH_status+0x24>
  {
    res = RES_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e001      	b.n	8008b5c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	2000247c 	.word	0x2000247c

08008b6c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b094      	sub	sp, #80	; 0x50
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008b82:	7bf9      	ldrb	r1, [r7, #15]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	4812      	ldr	r0, [pc, #72]	; (8008bd8 <USBH_read+0x6c>)
 8008b8e:	f000 fe38 	bl	8009802 <USBH_MSC_Read>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <USBH_read+0x34>
  {
    res = RES_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b9e:	e015      	b.n	8008bcc <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008ba0:	f107 0210 	add.w	r2, r7, #16
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	480b      	ldr	r0, [pc, #44]	; (8008bd8 <USBH_read+0x6c>)
 8008baa:	f000 fe06 	bl	80097ba <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008bae:	7f7b      	ldrb	r3, [r7, #29]
 8008bb0:	2b28      	cmp	r3, #40	; 0x28
 8008bb2:	d003      	beq.n	8008bbc <USBH_read+0x50>
 8008bb4:	2b3a      	cmp	r3, #58	; 0x3a
 8008bb6:	d001      	beq.n	8008bbc <USBH_read+0x50>
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d103      	bne.n	8008bc4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bc2:	e003      	b.n	8008bcc <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bca:	bf00      	nop
    }
  }

  return res;
 8008bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3748      	adds	r7, #72	; 0x48
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	2000247c 	.word	0x2000247c

08008bdc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b094      	sub	sp, #80	; 0x50
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008bf2:	7bf9      	ldrb	r1, [r7, #15]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4817      	ldr	r0, [pc, #92]	; (8008c5c <USBH_write+0x80>)
 8008bfe:	f000 fe69 	bl	80098d4 <USBH_MSC_Write>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <USBH_write+0x34>
  {
    res = RES_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c0e:	e01f      	b.n	8008c50 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008c10:	f107 0210 	add.w	r2, r7, #16
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4619      	mov	r1, r3
 8008c18:	4810      	ldr	r0, [pc, #64]	; (8008c5c <USBH_write+0x80>)
 8008c1a:	f000 fdce 	bl	80097ba <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008c1e:	7f7b      	ldrb	r3, [r7, #29]
 8008c20:	2b27      	cmp	r3, #39	; 0x27
 8008c22:	d009      	beq.n	8008c38 <USBH_write+0x5c>
 8008c24:	2b27      	cmp	r3, #39	; 0x27
 8008c26:	dc02      	bgt.n	8008c2e <USBH_write+0x52>
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d009      	beq.n	8008c40 <USBH_write+0x64>
 8008c2c:	e00c      	b.n	8008c48 <USBH_write+0x6c>
 8008c2e:	2b28      	cmp	r3, #40	; 0x28
 8008c30:	d006      	beq.n	8008c40 <USBH_write+0x64>
 8008c32:	2b3a      	cmp	r3, #58	; 0x3a
 8008c34:	d004      	beq.n	8008c40 <USBH_write+0x64>
 8008c36:	e007      	b.n	8008c48 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c3e:	e007      	b.n	8008c50 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008c40:	2303      	movs	r3, #3
 8008c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c46:	e003      	b.n	8008c50 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c4e:	bf00      	nop
    }
  }

  return res;
 8008c50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3748      	adds	r7, #72	; 0x48
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	2000247c 	.word	0x2000247c

08008c60 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b090      	sub	sp, #64	; 0x40
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	603a      	str	r2, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008c76:	79bb      	ldrb	r3, [r7, #6]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d852      	bhi.n	8008d22 <USBH_ioctl+0xc2>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBH_ioctl+0x24>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008c9d 	.word	0x08008c9d
 8008c8c:	08008cc7 	.word	0x08008cc7
 8008c90:	08008cf3 	.word	0x08008cf3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c9a:	e045      	b.n	8008d28 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c9c:	f107 0208 	add.w	r2, r7, #8
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4823      	ldr	r0, [pc, #140]	; (8008d34 <USBH_ioctl+0xd4>)
 8008ca6:	f000 fd88 	bl	80097ba <USBH_MSC_GetLUNInfo>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008cbc:	e034      	b.n	8008d28 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008cc4:	e030      	b.n	8008d28 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4819      	ldr	r0, [pc, #100]	; (8008d34 <USBH_ioctl+0xd4>)
 8008cd0:	f000 fd73 	bl	80097ba <USBH_MSC_GetLUNInfo>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d107      	bne.n	8008cea <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008cda:	8a3b      	ldrh	r3, [r7, #16]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ce8:	e01e      	b.n	8008d28 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008cf0:	e01a      	b.n	8008d28 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008cf2:	f107 0208 	add.w	r2, r7, #8
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	480e      	ldr	r0, [pc, #56]	; (8008d34 <USBH_ioctl+0xd4>)
 8008cfc:	f000 fd5d 	bl	80097ba <USBH_MSC_GetLUNInfo>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008d06:	8a3b      	ldrh	r3, [r7, #16]
 8008d08:	0a5b      	lsrs	r3, r3, #9
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008d18:	e006      	b.n	8008d28 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008d20:	e002      	b.n	8008d28 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008d22:	2304      	movs	r3, #4
 8008d24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008d28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3740      	adds	r7, #64	; 0x40
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	2000247c 	.word	0x2000247c

08008d38 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d38:	b590      	push	{r4, r7, lr}
 8008d3a:	b089      	sub	sp, #36	; 0x24
 8008d3c:	af04      	add	r7, sp, #16
 8008d3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d46:	7919      	ldrb	r1, [r3, #4]
 8008d48:	2350      	movs	r3, #80	; 0x50
 8008d4a:	2206      	movs	r2, #6
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fc4f 	bl	800a5f0 <USBH_FindInterface>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	2bff      	cmp	r3, #255	; 0xff
 8008d5a:	d002      	beq.n	8008d62 <USBH_MSC_InterfaceInit+0x2a>
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d901      	bls.n	8008d66 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d62:	2302      	movs	r3, #2
 8008d64:	e0ef      	b.n	8008f46 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fc24 	bl	800a5b8 <USBH_SelectInterface>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e0e3      	b.n	8008f46 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d88:	f01c f88a 	bl	8024ea0 <malloc>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0d0      	b.n	8008f46 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008da8:	2100      	movs	r1, #0
 8008daa:	68b8      	ldr	r0, [r7, #8]
 8008dac:	f01c f893 	bl	8024ed6 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	211a      	movs	r1, #26
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	4413      	add	r3, r2
 8008dbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b25b      	sxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da16      	bge.n	8008df6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	211a      	movs	r1, #26
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	211a      	movs	r1, #26
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008dee:	881a      	ldrh	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	815a      	strh	r2, [r3, #10]
 8008df4:	e015      	b.n	8008e22 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	211a      	movs	r1, #26
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e06:	781a      	ldrb	r2, [r3, #0]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	211a      	movs	r1, #26
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	211a      	movs	r1, #26
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da16      	bge.n	8008e68 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	211a      	movs	r1, #26
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	211a      	movs	r1, #26
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e60:	881a      	ldrh	r2, [r3, #0]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	815a      	strh	r2, [r3, #10]
 8008e66:	e015      	b.n	8008e94 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	211a      	movs	r1, #26
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	211a      	movs	r1, #26
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e8e:	881a      	ldrh	r2, [r3, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2200      	movs	r2, #0
 8008e98:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	799b      	ldrb	r3, [r3, #6]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f002 fdc2 	bl	800ba36 <USBH_AllocPipe>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	79db      	ldrb	r3, [r3, #7]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f002 fdb8 	bl	800ba36 <USBH_AllocPipe>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	461a      	mov	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fda4 	bl	8009a1c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	7959      	ldrb	r1, [r3, #5]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	7998      	ldrb	r0, [r3, #6]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	8912      	ldrh	r2, [r2, #8]
 8008eec:	9202      	str	r2, [sp, #8]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	9201      	str	r2, [sp, #4]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f002 fd6d 	bl	800b9d8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	7919      	ldrb	r1, [r3, #4]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	79d8      	ldrb	r0, [r3, #7]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	8952      	ldrh	r2, [r2, #10]
 8008f16:	9202      	str	r2, [sp, #8]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	9201      	str	r2, [sp, #4]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	4623      	mov	r3, r4
 8008f20:	4602      	mov	r2, r0
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f002 fd58 	bl	800b9d8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	791b      	ldrb	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f00b f96f 	bl	8014214 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	795b      	ldrb	r3, [r3, #5]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f00b f968 	bl	8014214 <USBH_LL_SetToggle>

  return USBH_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}

08008f4e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	795b      	ldrb	r3, [r3, #5]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00e      	beq.n	8008f86 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	795b      	ldrb	r3, [r3, #5]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f002 fd51 	bl	800ba16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	795b      	ldrb	r3, [r3, #5]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f002 fd7c 	bl	800ba78 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	791b      	ldrb	r3, [r3, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00e      	beq.n	8008fac <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	791b      	ldrb	r3, [r3, #4]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f002 fd3e 	bl	800ba16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	791b      	ldrb	r3, [r3, #4]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 fd69 	bl	800ba78 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f01b ff75 	bl	8024eb0 <free>
    phost->pActiveClass->pData = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fcc:	2200      	movs	r2, #0
 8008fce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	7b9b      	ldrb	r3, [r3, #14]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d004      	beq.n	8009002 <USBH_MSC_ClassRequest+0x28>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d03e      	beq.n	800907a <USBH_MSC_ClassRequest+0xa0>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d000      	beq.n	8009002 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8009000:	e04a      	b.n	8009098 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fcea 	bl	80099e0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d104      	bne.n	8009020 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d135      	bne.n	8009092 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d804      	bhi.n	8009038 <USBH_MSC_ClassRequest+0x5e>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	b2da      	uxtb	r2, r3
 8009036:	e000      	b.n	800903a <USBH_MSC_ClassRequest+0x60>
 8009038:	2202      	movs	r2, #2
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]
 8009042:	e014      	b.n	800906e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	2134      	movs	r1, #52	; 0x34
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	4413      	add	r3, r2
 8009050:	3392      	adds	r3, #146	; 0x92
 8009052:	2202      	movs	r2, #2
 8009054:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	2134      	movs	r1, #52	; 0x34
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	4413      	add	r3, r2
 8009062:	33c1      	adds	r3, #193	; 0xc1
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	3301      	adds	r3, #1
 800906c:	73bb      	strb	r3, [r7, #14]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	7bba      	ldrb	r2, [r7, #14]
 8009074:	429a      	cmp	r2, r3
 8009076:	d3e5      	bcc.n	8009044 <USBH_MSC_ClassRequest+0x6a>
      break;
 8009078:	e00b      	b.n	8009092 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 f878 	bl	800b172 <USBH_ClrFeature>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	7bda      	ldrb	r2, [r3, #15]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	739a      	strb	r2, [r3, #14]
      break;
 8009090:	e001      	b.n	8009096 <USBH_MSC_ClassRequest+0xbc>
      break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <USBH_MSC_ClassRequest+0xbe>
      break;
 8009096:	bf00      	nop
  }

  return status;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80090be:	2301      	movs	r3, #1
 80090c0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	7b1b      	ldrb	r3, [r3, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <USBH_MSC_Process+0x2e>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	f000 8271 	beq.w	80095b2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80090d0:	e272      	b.n	80095b8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	429a      	cmp	r2, r3
 80090e0:	f080 824f 	bcs.w	8009582 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ea:	4619      	mov	r1, r3
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	2334      	movs	r3, #52	; 0x34
 80090f0:	fb03 f301 	mul.w	r3, r3, r1
 80090f4:	4413      	add	r3, r2
 80090f6:	3391      	adds	r3, #145	; 0x91
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009102:	4619      	mov	r1, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	2334      	movs	r3, #52	; 0x34
 8009108:	fb03 f301 	mul.w	r3, r3, r1
 800910c:	4413      	add	r3, r2
 800910e:	3390      	adds	r3, #144	; 0x90
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b08      	cmp	r3, #8
 8009114:	f200 8243 	bhi.w	800959e <USBH_MSC_Process+0x4fa>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBH_MSC_Process+0x7c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009145 	.word	0x08009145
 8009124:	0800959f 	.word	0x0800959f
 8009128:	0800920d 	.word	0x0800920d
 800912c:	08009391 	.word	0x08009391
 8009130:	0800916b 	.word	0x0800916b
 8009134:	0800945d 	.word	0x0800945d
 8009138:	0800959f 	.word	0x0800959f
 800913c:	0800959f 	.word	0x0800959f
 8009140:	08009571 	.word	0x08009571
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914a:	4619      	mov	r1, r3
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	2334      	movs	r3, #52	; 0x34
 8009150:	fb03 f301 	mul.w	r3, r3, r1
 8009154:	4413      	add	r3, r2
 8009156:	3390      	adds	r3, #144	; 0x90
 8009158:	2204      	movs	r2, #4
 800915a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009168:	e222      	b.n	80095b0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009170:	b2d9      	uxtb	r1, r3
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009178:	461a      	mov	r2, r3
 800917a:	2334      	movs	r3, #52	; 0x34
 800917c:	fb03 f302 	mul.w	r3, r3, r2
 8009180:	3398      	adds	r3, #152	; 0x98
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	3307      	adds	r3, #7
 8009188:	461a      	mov	r2, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 ff68 	bl	800a060 <USBH_MSC_SCSI_Inquiry>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a0:	4619      	mov	r1, r3
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	2334      	movs	r3, #52	; 0x34
 80091a6:	fb03 f301 	mul.w	r3, r3, r1
 80091aa:	4413      	add	r3, r2
 80091ac:	3390      	adds	r3, #144	; 0x90
 80091ae:	2202      	movs	r2, #2
 80091b0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d10c      	bne.n	80091d2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091be:	4619      	mov	r1, r3
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	2334      	movs	r3, #52	; 0x34
 80091c4:	fb03 f301 	mul.w	r3, r3, r1
 80091c8:	4413      	add	r3, r2
 80091ca:	3390      	adds	r3, #144	; 0x90
 80091cc:	2205      	movs	r2, #5
 80091ce:	701a      	strb	r2, [r3, #0]
            break;
 80091d0:	e1e7      	b.n	80095a2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	f040 81e4 	bne.w	80095a2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e0:	4619      	mov	r1, r3
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	2334      	movs	r3, #52	; 0x34
 80091e6:	fb03 f301 	mul.w	r3, r3, r1
 80091ea:	4413      	add	r3, r2
 80091ec:	3390      	adds	r3, #144	; 0x90
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f8:	4619      	mov	r1, r3
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	2334      	movs	r3, #52	; 0x34
 80091fe:	fb03 f301 	mul.w	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	3391      	adds	r3, #145	; 0x91
 8009206:	2202      	movs	r2, #2
 8009208:	701a      	strb	r2, [r3, #0]
            break;
 800920a:	e1ca      	b.n	80095a2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fe64 	bl	8009ee4 <USBH_MSC_SCSI_TestUnitReady>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d149      	bne.n	80092ba <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922c:	4619      	mov	r1, r3
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	2334      	movs	r3, #52	; 0x34
 8009232:	fb03 f301 	mul.w	r3, r3, r1
 8009236:	4413      	add	r3, r2
 8009238:	3392      	adds	r3, #146	; 0x92
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00c      	beq.n	800925a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009246:	4619      	mov	r1, r3
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	2334      	movs	r3, #52	; 0x34
 800924c:	fb03 f301 	mul.w	r3, r3, r1
 8009250:	4413      	add	r3, r2
 8009252:	33c1      	adds	r3, #193	; 0xc1
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	e00b      	b.n	8009272 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009260:	4619      	mov	r1, r3
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	2334      	movs	r3, #52	; 0x34
 8009266:	fb03 f301 	mul.w	r3, r3, r1
 800926a:	4413      	add	r3, r2
 800926c:	33c1      	adds	r3, #193	; 0xc1
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009278:	4619      	mov	r1, r3
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	2334      	movs	r3, #52	; 0x34
 800927e:	fb03 f301 	mul.w	r3, r3, r1
 8009282:	4413      	add	r3, r2
 8009284:	3390      	adds	r3, #144	; 0x90
 8009286:	2203      	movs	r2, #3
 8009288:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009290:	4619      	mov	r1, r3
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	2334      	movs	r3, #52	; 0x34
 8009296:	fb03 f301 	mul.w	r3, r3, r1
 800929a:	4413      	add	r3, r2
 800929c:	3391      	adds	r3, #145	; 0x91
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a8:	4619      	mov	r1, r3
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	2334      	movs	r3, #52	; 0x34
 80092ae:	fb03 f301 	mul.w	r3, r3, r1
 80092b2:	4413      	add	r3, r2
 80092b4:	3392      	adds	r3, #146	; 0x92
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d14a      	bne.n	8009356 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c6:	4619      	mov	r1, r3
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	2334      	movs	r3, #52	; 0x34
 80092cc:	fb03 f301 	mul.w	r3, r3, r1
 80092d0:	4413      	add	r3, r2
 80092d2:	3392      	adds	r3, #146	; 0x92
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d00c      	beq.n	80092f4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e0:	4619      	mov	r1, r3
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	2334      	movs	r3, #52	; 0x34
 80092e6:	fb03 f301 	mul.w	r3, r3, r1
 80092ea:	4413      	add	r3, r2
 80092ec:	33c1      	adds	r3, #193	; 0xc1
 80092ee:	2201      	movs	r2, #1
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	e00b      	b.n	800930c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092fa:	4619      	mov	r1, r3
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	2334      	movs	r3, #52	; 0x34
 8009300:	fb03 f301 	mul.w	r3, r3, r1
 8009304:	4413      	add	r3, r2
 8009306:	33c1      	adds	r3, #193	; 0xc1
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009312:	4619      	mov	r1, r3
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	2334      	movs	r3, #52	; 0x34
 8009318:	fb03 f301 	mul.w	r3, r3, r1
 800931c:	4413      	add	r3, r2
 800931e:	3390      	adds	r3, #144	; 0x90
 8009320:	2205      	movs	r2, #5
 8009322:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800932a:	4619      	mov	r1, r3
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	2334      	movs	r3, #52	; 0x34
 8009330:	fb03 f301 	mul.w	r3, r3, r1
 8009334:	4413      	add	r3, r2
 8009336:	3391      	adds	r3, #145	; 0x91
 8009338:	2201      	movs	r2, #1
 800933a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009342:	4619      	mov	r1, r3
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	2334      	movs	r3, #52	; 0x34
 8009348:	fb03 f301 	mul.w	r3, r3, r1
 800934c:	4413      	add	r3, r2
 800934e:	3392      	adds	r3, #146	; 0x92
 8009350:	2202      	movs	r2, #2
 8009352:	701a      	strb	r2, [r3, #0]
            break;
 8009354:	e127      	b.n	80095a6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	2b04      	cmp	r3, #4
 800935a:	f040 8124 	bne.w	80095a6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009364:	4619      	mov	r1, r3
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	2334      	movs	r3, #52	; 0x34
 800936a:	fb03 f301 	mul.w	r3, r3, r1
 800936e:	4413      	add	r3, r2
 8009370:	3390      	adds	r3, #144	; 0x90
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800937c:	4619      	mov	r1, r3
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	2334      	movs	r3, #52	; 0x34
 8009382:	fb03 f301 	mul.w	r3, r3, r1
 8009386:	4413      	add	r3, r2
 8009388:	3391      	adds	r3, #145	; 0x91
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
            break;
 800938e:	e10a      	b.n	80095a6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009396:	b2d9      	uxtb	r1, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	461a      	mov	r2, r3
 80093a0:	2334      	movs	r3, #52	; 0x34
 80093a2:	fb03 f302 	mul.w	r3, r3, r2
 80093a6:	3390      	adds	r3, #144	; 0x90
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	3304      	adds	r3, #4
 80093ae:	461a      	mov	r2, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fdda 	bl	8009f6a <USBH_MSC_SCSI_ReadCapacity>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d120      	bne.n	8009402 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c6:	4619      	mov	r1, r3
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	2334      	movs	r3, #52	; 0x34
 80093cc:	fb03 f301 	mul.w	r3, r3, r1
 80093d0:	4413      	add	r3, r2
 80093d2:	3390      	adds	r3, #144	; 0x90
 80093d4:	2201      	movs	r2, #1
 80093d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093de:	4619      	mov	r1, r3
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	2334      	movs	r3, #52	; 0x34
 80093e4:	fb03 f301 	mul.w	r3, r3, r1
 80093e8:	4413      	add	r3, r2
 80093ea:	3391      	adds	r3, #145	; 0x91
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093f6:	3301      	adds	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009400:	e0d3      	b.n	80095aa <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d10c      	bne.n	8009422 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800940e:	4619      	mov	r1, r3
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	2334      	movs	r3, #52	; 0x34
 8009414:	fb03 f301 	mul.w	r3, r3, r1
 8009418:	4413      	add	r3, r2
 800941a:	3390      	adds	r3, #144	; 0x90
 800941c:	2205      	movs	r2, #5
 800941e:	701a      	strb	r2, [r3, #0]
            break;
 8009420:	e0c3      	b.n	80095aa <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	2b04      	cmp	r3, #4
 8009426:	f040 80c0 	bne.w	80095aa <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009430:	4619      	mov	r1, r3
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	2334      	movs	r3, #52	; 0x34
 8009436:	fb03 f301 	mul.w	r3, r3, r1
 800943a:	4413      	add	r3, r2
 800943c:	3390      	adds	r3, #144	; 0x90
 800943e:	2201      	movs	r2, #1
 8009440:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009448:	4619      	mov	r1, r3
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	2334      	movs	r3, #52	; 0x34
 800944e:	fb03 f301 	mul.w	r3, r3, r1
 8009452:	4413      	add	r3, r2
 8009454:	3391      	adds	r3, #145	; 0x91
 8009456:	2202      	movs	r2, #2
 8009458:	701a      	strb	r2, [r3, #0]
            break;
 800945a:	e0a6      	b.n	80095aa <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009462:	b2d9      	uxtb	r1, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946a:	461a      	mov	r2, r3
 800946c:	2334      	movs	r3, #52	; 0x34
 800946e:	fb03 f302 	mul.w	r3, r3, r2
 8009472:	3398      	adds	r3, #152	; 0x98
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	3304      	adds	r3, #4
 800947a:	461a      	mov	r2, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fe94 	bl	800a1aa <USBH_MSC_SCSI_RequestSense>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d145      	bne.n	8009518 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009492:	4619      	mov	r1, r3
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	2334      	movs	r3, #52	; 0x34
 8009498:	fb03 f301 	mul.w	r3, r3, r1
 800949c:	4413      	add	r3, r2
 800949e:	339c      	adds	r3, #156	; 0x9c
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b06      	cmp	r3, #6
 80094a4:	d00c      	beq.n	80094c0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ac:	4619      	mov	r1, r3
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	2334      	movs	r3, #52	; 0x34
 80094b2:	fb03 f301 	mul.w	r3, r3, r1
 80094b6:	4413      	add	r3, r2
 80094b8:	339c      	adds	r3, #156	; 0x9c
 80094ba:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d117      	bne.n	80094f0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d80c      	bhi.n	80094f0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094dc:	4619      	mov	r1, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	2334      	movs	r3, #52	; 0x34
 80094e2:	fb03 f301 	mul.w	r3, r3, r1
 80094e6:	4413      	add	r3, r2
 80094e8:	3390      	adds	r3, #144	; 0x90
 80094ea:	2202      	movs	r2, #2
 80094ec:	701a      	strb	r2, [r3, #0]
                  break;
 80094ee:	e05f      	b.n	80095b0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094f6:	4619      	mov	r1, r3
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	2334      	movs	r3, #52	; 0x34
 80094fc:	fb03 f301 	mul.w	r3, r3, r1
 8009500:	4413      	add	r3, r2
 8009502:	3390      	adds	r3, #144	; 0x90
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800950e:	3301      	adds	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d10c      	bne.n	8009538 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009524:	4619      	mov	r1, r3
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	2334      	movs	r3, #52	; 0x34
 800952a:	fb03 f301 	mul.w	r3, r3, r1
 800952e:	4413      	add	r3, r2
 8009530:	3390      	adds	r3, #144	; 0x90
 8009532:	2208      	movs	r2, #8
 8009534:	701a      	strb	r2, [r3, #0]
            break;
 8009536:	e03a      	b.n	80095ae <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	2b04      	cmp	r3, #4
 800953c:	d137      	bne.n	80095ae <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009544:	4619      	mov	r1, r3
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	2334      	movs	r3, #52	; 0x34
 800954a:	fb03 f301 	mul.w	r3, r3, r1
 800954e:	4413      	add	r3, r2
 8009550:	3390      	adds	r3, #144	; 0x90
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800955c:	4619      	mov	r1, r3
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	2334      	movs	r3, #52	; 0x34
 8009562:	fb03 f301 	mul.w	r3, r3, r1
 8009566:	4413      	add	r3, r2
 8009568:	3391      	adds	r3, #145	; 0x91
 800956a:	2202      	movs	r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
            break;
 800956e:	e01e      	b.n	80095ae <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009576:	3301      	adds	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009580:	e016      	b.n	80095b0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2200      	movs	r2, #0
 8009586:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2201      	movs	r2, #1
 800958e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009596:	2102      	movs	r1, #2
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
      break;
 800959c:	e00c      	b.n	80095b8 <USBH_MSC_Process+0x514>
            break;
 800959e:	bf00      	nop
 80095a0:	e00a      	b.n	80095b8 <USBH_MSC_Process+0x514>
            break;
 80095a2:	bf00      	nop
 80095a4:	e008      	b.n	80095b8 <USBH_MSC_Process+0x514>
            break;
 80095a6:	bf00      	nop
 80095a8:	e006      	b.n	80095b8 <USBH_MSC_Process+0x514>
            break;
 80095aa:	bf00      	nop
 80095ac:	e004      	b.n	80095b8 <USBH_MSC_Process+0x514>
            break;
 80095ae:	bf00      	nop
      break;
 80095b0:	e002      	b.n	80095b8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	75fb      	strb	r3, [r7, #23]
      break;
 80095b6:	bf00      	nop
  }
  return error;
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop

080095c4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b088      	sub	sp, #32
 80095de:	af02      	add	r7, sp, #8
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80095f4:	2301      	movs	r3, #1
 80095f6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	2134      	movs	r1, #52	; 0x34
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	4413      	add	r3, r2
 8009604:	3390      	adds	r3, #144	; 0x90
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b06      	cmp	r3, #6
 800960a:	d004      	beq.n	8009616 <USBH_MSC_RdWrProcess+0x3c>
 800960c:	2b07      	cmp	r3, #7
 800960e:	d037      	beq.n	8009680 <USBH_MSC_RdWrProcess+0xa6>
 8009610:	2b05      	cmp	r3, #5
 8009612:	d06a      	beq.n	80096ea <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8009614:	e0a6      	b.n	8009764 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009616:	78f9      	ldrb	r1, [r7, #3]
 8009618:	2300      	movs	r3, #0
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fea6 	bl	800a372 <USBH_MSC_SCSI_Read>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	2134      	movs	r1, #52	; 0x34
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	4413      	add	r3, r2
 800963c:	3390      	adds	r3, #144	; 0x90
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]
      break;
 8009646:	e088      	b.n	800975a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d109      	bne.n	8009662 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	2134      	movs	r1, #52	; 0x34
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	4413      	add	r3, r2
 800965a:	3390      	adds	r3, #144	; 0x90
 800965c:	2205      	movs	r2, #5
 800965e:	701a      	strb	r2, [r3, #0]
      break;
 8009660:	e07b      	b.n	800975a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b04      	cmp	r3, #4
 8009666:	d178      	bne.n	800975a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	2134      	movs	r1, #52	; 0x34
 800966e:	fb01 f303 	mul.w	r3, r1, r3
 8009672:	4413      	add	r3, r2
 8009674:	3390      	adds	r3, #144	; 0x90
 8009676:	2208      	movs	r2, #8
 8009678:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800967a:	2302      	movs	r3, #2
 800967c:	75fb      	strb	r3, [r7, #23]
      break;
 800967e:	e06c      	b.n	800975a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009680:	78f9      	ldrb	r1, [r7, #3]
 8009682:	2300      	movs	r3, #0
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	2200      	movs	r2, #0
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fe06 	bl	800a29c <USBH_MSC_SCSI_Write>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	2134      	movs	r1, #52	; 0x34
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	4413      	add	r3, r2
 80096a6:	3390      	adds	r3, #144	; 0x90
 80096a8:	2201      	movs	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	75fb      	strb	r3, [r7, #23]
      break;
 80096b0:	e055      	b.n	800975e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d109      	bne.n	80096cc <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	2134      	movs	r1, #52	; 0x34
 80096be:	fb01 f303 	mul.w	r3, r1, r3
 80096c2:	4413      	add	r3, r2
 80096c4:	3390      	adds	r3, #144	; 0x90
 80096c6:	2205      	movs	r2, #5
 80096c8:	701a      	strb	r2, [r3, #0]
      break;
 80096ca:	e048      	b.n	800975e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d145      	bne.n	800975e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	2134      	movs	r1, #52	; 0x34
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3390      	adds	r3, #144	; 0x90
 80096e0:	2208      	movs	r2, #8
 80096e2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096e4:	2302      	movs	r3, #2
 80096e6:	75fb      	strb	r3, [r7, #23]
      break;
 80096e8:	e039      	b.n	800975e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	2234      	movs	r2, #52	; 0x34
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	3398      	adds	r3, #152	; 0x98
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fd53 	bl	800a1aa <USBH_MSC_SCSI_RequestSense>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d113      	bne.n	8009736 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	2134      	movs	r1, #52	; 0x34
 8009714:	fb01 f303 	mul.w	r3, r1, r3
 8009718:	4413      	add	r3, r2
 800971a:	3390      	adds	r3, #144	; 0x90
 800971c:	2201      	movs	r2, #1
 800971e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	2134      	movs	r1, #52	; 0x34
 8009726:	fb01 f303 	mul.w	r3, r1, r3
 800972a:	4413      	add	r3, r2
 800972c:	3391      	adds	r3, #145	; 0x91
 800972e:	2202      	movs	r2, #2
 8009730:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8009732:	2302      	movs	r3, #2
 8009734:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d012      	beq.n	8009762 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	2b04      	cmp	r3, #4
 8009740:	d10f      	bne.n	8009762 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	2134      	movs	r1, #52	; 0x34
 8009748:	fb01 f303 	mul.w	r3, r1, r3
 800974c:	4413      	add	r3, r2
 800974e:	3390      	adds	r3, #144	; 0x90
 8009750:	2208      	movs	r2, #8
 8009752:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009754:	2302      	movs	r3, #2
 8009756:	75fb      	strb	r3, [r7, #23]
      break;
 8009758:	e003      	b.n	8009762 <USBH_MSC_RdWrProcess+0x188>
      break;
 800975a:	bf00      	nop
 800975c:	e002      	b.n	8009764 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800975e:	bf00      	nop
 8009760:	e000      	b.n	8009764 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009762:	bf00      	nop

  }
  return error;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b0b      	cmp	r3, #11
 800978c:	d10c      	bne.n	80097a8 <USBH_MSC_UnitIsReady+0x3a>
 800978e:	78fb      	ldrb	r3, [r7, #3]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	2134      	movs	r1, #52	; 0x34
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	4413      	add	r3, r2
 800979a:	3391      	adds	r3, #145	; 0x91
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80097a2:	2301      	movs	r3, #1
 80097a4:	73fb      	strb	r3, [r7, #15]
 80097a6:	e001      	b.n	80097ac <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	460b      	mov	r3, r1
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b0b      	cmp	r3, #11
 80097da:	d10d      	bne.n	80097f8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	2234      	movs	r2, #52	; 0x34
 80097e0:	fb02 f303 	mul.w	r3, r2, r3
 80097e4:	3390      	adds	r3, #144	; 0x90
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	2234      	movs	r2, #52	; 0x34
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f01b fb66 	bl	8024ec0 <memcpy>
    return USBH_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e000      	b.n	80097fa <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80097f8:	2302      	movs	r3, #2
  }
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b088      	sub	sp, #32
 8009806:	af02      	add	r7, sp, #8
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
 800980e:	460b      	mov	r3, r1
 8009810:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00e      	beq.n	8009846 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800982e:	2b0b      	cmp	r3, #11
 8009830:	d109      	bne.n	8009846 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	2134      	movs	r1, #52	; 0x34
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	4413      	add	r3, r2
 800983e:	3390      	adds	r3, #144	; 0x90
 8009840:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	e040      	b.n	80098cc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2206      	movs	r2, #6
 800984e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	2134      	movs	r1, #52	; 0x34
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	4413      	add	r3, r2
 800985c:	3390      	adds	r3, #144	; 0x90
 800985e:	2206      	movs	r2, #6
 8009860:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	b29a      	uxth	r2, r3
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800986c:	7af9      	ldrb	r1, [r7, #11]
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fd7b 	bl	800a372 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009882:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009884:	e016      	b.n	80098b4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	f242 7110 	movw	r1, #10000	; 0x2710
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	429a      	cmp	r2, r3
 800989c:	d805      	bhi.n	80098aa <USBH_MSC_Read+0xa8>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2201      	movs	r2, #1
 80098ae:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80098b0:	2302      	movs	r3, #2
 80098b2:	e00b      	b.n	80098cc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	4619      	mov	r1, r3
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fe8e 	bl	80095da <USBH_MSC_RdWrProcess>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d0e0      	beq.n	8009886 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2201      	movs	r2, #1
 80098c8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af02      	add	r7, sp, #8
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	460b      	mov	r3, r1
 80098e2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00e      	beq.n	8009918 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009900:	2b0b      	cmp	r3, #11
 8009902:	d109      	bne.n	8009918 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	2134      	movs	r1, #52	; 0x34
 800990a:	fb01 f303 	mul.w	r3, r1, r3
 800990e:	4413      	add	r3, r2
 8009910:	3390      	adds	r3, #144	; 0x90
 8009912:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009914:	2b01      	cmp	r3, #1
 8009916:	d001      	beq.n	800991c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009918:	2302      	movs	r3, #2
 800991a:	e040      	b.n	800999e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2207      	movs	r2, #7
 8009920:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009922:	7afb      	ldrb	r3, [r7, #11]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	2134      	movs	r1, #52	; 0x34
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	3390      	adds	r3, #144	; 0x90
 8009930:	2207      	movs	r2, #7
 8009932:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	b29a      	uxth	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800993e:	7af9      	ldrb	r1, [r7, #11]
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fca7 	bl	800a29c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009954:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009956:	e016      	b.n	8009986 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	1ad2      	subs	r2, r2, r3
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	f242 7110 	movw	r1, #10000	; 0x2710
 8009968:	fb01 f303 	mul.w	r3, r1, r3
 800996c:	429a      	cmp	r2, r3
 800996e:	d805      	bhi.n	800997c <USBH_MSC_Write+0xa8>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2201      	movs	r2, #1
 8009980:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009982:	2302      	movs	r3, #2
 8009984:	e00b      	b.n	800999e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	4619      	mov	r1, r3
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fe25 	bl	80095da <USBH_MSC_RdWrProcess>
 8009990:	4603      	mov	r3, r0
 8009992:	2b01      	cmp	r3, #1
 8009994:	d0e0      	beq.n	8009958 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2201      	movs	r2, #1
 800999a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2221      	movs	r2, #33	; 0x21
 80099b2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	22ff      	movs	r2, #255	; 0xff
 80099b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fdae 	bl	800b532 <USBH_CtlReq>
 80099d6:	4603      	mov	r3, r0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	22a1      	movs	r2, #161	; 0xa1
 80099ee:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	22fe      	movs	r2, #254	; 0xfe
 80099f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009a08:	2201      	movs	r2, #1
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 fd90 	bl	800b532 <USBH_CtlReq>
 8009a12:	4603      	mov	r3, r0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a2a:	69db      	ldr	r3, [r3, #28]
 8009a2c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <USBH_MSC_BOT_Init+0x3c>)
 8009a32:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a09      	ldr	r2, [pc, #36]	; (8009a5c <USBH_MSC_BOT_Init+0x40>)
 8009a38:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	43425355 	.word	0x43425355
 8009a5c:	20304050 	.word	0x20304050

08009a60 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009a70:	2301      	movs	r3, #1
 8009a72:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009a74:	2301      	movs	r3, #1
 8009a76:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a90:	3b01      	subs	r3, #1
 8009a92:	2b0a      	cmp	r3, #10
 8009a94:	f200 81a1 	bhi.w	8009dda <USBH_MSC_BOT_Process+0x37a>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <USBH_MSC_BOT_Process+0x40>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	08009af7 	.word	0x08009af7
 8009aa8:	08009b61 	.word	0x08009b61
 8009aac:	08009b7f 	.word	0x08009b7f
 8009ab0:	08009c03 	.word	0x08009c03
 8009ab4:	08009c27 	.word	0x08009c27
 8009ab8:	08009cc1 	.word	0x08009cc1
 8009abc:	08009cdd 	.word	0x08009cdd
 8009ac0:	08009d2f 	.word	0x08009d2f
 8009ac4:	08009d5f 	.word	0x08009d5f
 8009ac8:	08009dc1 	.word	0x08009dc1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	795a      	ldrb	r2, [r3, #5]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	4613      	mov	r3, r2
 8009aec:	221f      	movs	r2, #31
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 ff2f 	bl	800b952 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009af4:	e180      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	795b      	ldrb	r3, [r3, #5]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f00a fb5f 	bl	80141c0 <USBH_LL_GetURBState>
 8009b02:	4603      	mov	r3, r0
 8009b04:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b06:	7d3b      	ldrb	r3, [r7, #20]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d118      	bne.n	8009b3e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00f      	beq.n	8009b34 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b1a:	b25b      	sxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	da04      	bge.n	8009b2a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2203      	movs	r2, #3
 8009b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b28:	e159      	b.n	8009dde <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2205      	movs	r2, #5
 8009b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b32:	e154      	b.n	8009dde <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2207      	movs	r2, #7
 8009b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b3c:	e14f      	b.n	8009dde <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b3e:	7d3b      	ldrb	r3, [r7, #20]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d104      	bne.n	8009b4e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b4c:	e147      	b.n	8009dde <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009b4e:	7d3b      	ldrb	r3, [r7, #20]
 8009b50:	2b05      	cmp	r3, #5
 8009b52:	f040 8144 	bne.w	8009dde <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	220a      	movs	r2, #10
 8009b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b5e:	e13e      	b.n	8009dde <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	895a      	ldrh	r2, [r3, #10]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 ff14 	bl	800b99c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2204      	movs	r2, #4
 8009b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009b7c:	e13c      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f00a fb1b 	bl	80141c0 <USBH_LL_GetURBState>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b8e:	7d3b      	ldrb	r3, [r7, #20]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d12d      	bne.n	8009bf0 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	8952      	ldrh	r2, [r2, #10]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d910      	bls.n	8009bc2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	8952      	ldrh	r2, [r2, #10]
 8009baa:	441a      	add	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	8952      	ldrh	r2, [r2, #10]
 8009bba:	1a9a      	subs	r2, r3, r2
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bc0:	e002      	b.n	8009bc8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	895a      	ldrh	r2, [r3, #10]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fedc 	bl	800b99c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009be4:	e0fd      	b.n	8009de2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2207      	movs	r2, #7
 8009bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bee:	e0f8      	b.n	8009de2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8009bf0:	7d3b      	ldrb	r3, [r7, #20]
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	f040 80f5 	bne.w	8009de2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2209      	movs	r2, #9
 8009bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c00:	e0ef      	b.n	8009de2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	891a      	ldrh	r2, [r3, #8]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	7958      	ldrb	r0, [r3, #5]
 8009c10:	2301      	movs	r3, #1
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	4603      	mov	r3, r0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fe9b 	bl	800b952 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2206      	movs	r2, #6
 8009c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c24:	e0e8      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	795b      	ldrb	r3, [r3, #5]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f00a fac7 	bl	80141c0 <USBH_LL_GetURBState>
 8009c32:	4603      	mov	r3, r0
 8009c34:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c36:	7d3b      	ldrb	r3, [r7, #20]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d130      	bne.n	8009c9e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	8912      	ldrh	r2, [r2, #8]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d910      	bls.n	8009c6a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	8912      	ldrh	r2, [r2, #8]
 8009c52:	441a      	add	r2, r3
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	8912      	ldrh	r2, [r2, #8]
 8009c62:	1a9a      	subs	r2, r3, r2
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c68:	e002      	b.n	8009c70 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00d      	beq.n	8009c94 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	891a      	ldrh	r2, [r3, #8]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	7958      	ldrb	r0, [r3, #5]
 8009c86:	2301      	movs	r3, #1
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fe60 	bl	800b952 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009c92:	e0a8      	b.n	8009de6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2207      	movs	r2, #7
 8009c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c9c:	e0a3      	b.n	8009de6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c9e:	7d3b      	ldrb	r3, [r7, #20]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d104      	bne.n	8009cae <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2205      	movs	r2, #5
 8009ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cac:	e09b      	b.n	8009de6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009cae:	7d3b      	ldrb	r3, [r7, #20]
 8009cb0:	2b05      	cmp	r3, #5
 8009cb2:	f040 8098 	bne.w	8009de6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	220a      	movs	r2, #10
 8009cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cbe:	e092      	b.n	8009de6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	220d      	movs	r2, #13
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fe65 	bl	800b99c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cda:	e08d      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	791b      	ldrb	r3, [r3, #4]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f00a fa6c 	bl	80141c0 <USBH_LL_GetURBState>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009cec:	7d3b      	ldrb	r3, [r7, #20]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d115      	bne.n	8009d1e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f8aa 	bl	8009e5c <USBH_MSC_DecodeCSW>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009d0c:	7d7b      	ldrb	r3, [r7, #21]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009d16:	e068      	b.n	8009dea <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1c:	e065      	b.n	8009dea <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009d1e:	7d3b      	ldrb	r3, [r7, #20]
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	d162      	bne.n	8009dea <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2209      	movs	r2, #9
 8009d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d2c:	e05d      	b.n	8009dea <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	2200      	movs	r2, #0
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f865 	bl	8009e04 <USBH_MSC_BOT_Abort>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d3e:	7dbb      	ldrb	r3, [r7, #22]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d104      	bne.n	8009d4e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2207      	movs	r2, #7
 8009d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009d4c:	e04f      	b.n	8009dee <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009d4e:	7dbb      	ldrb	r3, [r7, #22]
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d14c      	bne.n	8009dee <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	220b      	movs	r2, #11
 8009d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d5c:	e047      	b.n	8009dee <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	2201      	movs	r2, #1
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f84d 	bl	8009e04 <USBH_MSC_BOT_Abort>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d6e:	7dbb      	ldrb	r3, [r7, #22]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d11d      	bne.n	8009db0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	795b      	ldrb	r3, [r3, #5]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f00a fa7d 	bl	801427a <USBH_LL_GetToggle>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	7959      	ldrb	r1, [r3, #5]
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	f1c3 0301 	rsb	r3, r3, #1
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f00a fa3e 	bl	8014214 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	791b      	ldrb	r3, [r3, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f00a fa37 	bl	8014214 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2209      	movs	r2, #9
 8009daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009dae:	e020      	b.n	8009df2 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009db0:	7dbb      	ldrb	r3, [r7, #22]
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d11d      	bne.n	8009df2 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	220b      	movs	r2, #11
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dbe:	e018      	b.n	8009df2 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff fdf0 	bl	80099a6 <USBH_MSC_BOT_REQ_Reset>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d112      	bne.n	8009df6 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009dd8:	e00d      	b.n	8009df6 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009dda:	bf00      	nop
 8009ddc:	e00c      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009dde:	bf00      	nop
 8009de0:	e00a      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009de2:	bf00      	nop
 8009de4:	e008      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009de6:	bf00      	nop
 8009de8:	e006      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009dea:	bf00      	nop
 8009dec:	e004      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009dee:	bf00      	nop
 8009df0:	e002      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009df2:	bf00      	nop
 8009df4:	e000      	b.n	8009df8 <USBH_MSC_BOT_Process+0x398>
      break;
 8009df6:	bf00      	nop
  }
  return status;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop

08009e04 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
 8009e10:	4613      	mov	r3, r2
 8009e12:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009e14:	2302      	movs	r3, #2
 8009e16:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009e22:	78bb      	ldrb	r3, [r7, #2]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <USBH_MSC_BOT_Abort+0x2a>
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d009      	beq.n	8009e40 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009e2c:	e011      	b.n	8009e52 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	79db      	ldrb	r3, [r3, #7]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f99c 	bl	800b172 <USBH_ClrFeature>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3e:	e008      	b.n	8009e52 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	799b      	ldrb	r3, [r3, #6]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 f993 	bl	800b172 <USBH_ClrFeature>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e50:	bf00      	nop
  }
  return status;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	791b      	ldrb	r3, [r3, #4]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f00a f90f 	bl	801409c <USBH_LL_GetLastXferSize>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b0d      	cmp	r3, #13
 8009e82:	d002      	beq.n	8009e8a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009e84:	2302      	movs	r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
 8009e88:	e024      	b.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e8e:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <USBH_MSC_DecodeCSW+0x84>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d11d      	bne.n	8009ed0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d119      	bne.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]
 8009eae:	e011      	b.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d102      	bne.n	8009ec0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	73fb      	strb	r3, [r7, #15]
 8009ebe:	e009      	b.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d104      	bne.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	73fb      	strb	r3, [r7, #15]
 8009ece:	e001      	b.n	8009ed4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	53425355 	.word	0x53425355

08009ee4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d002      	beq.n	8009f0e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d021      	beq.n	8009f50 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009f0c:	e028      	b.n	8009f60 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	220a      	movs	r2, #10
 8009f20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	3363      	adds	r3, #99	; 0x63
 8009f28:	2210      	movs	r2, #16
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f01a ffd2 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2202      	movs	r2, #2
 8009f46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4e:	e007      	b.n	8009f60 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff fd83 	bl	8009a60 <USBH_MSC_BOT_Process>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5e:	bf00      	nop
  }

  return error;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	460b      	mov	r3, r1
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d002      	beq.n	8009f96 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d027      	beq.n	8009fe4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009f94:	e05f      	b.n	800a056 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2280      	movs	r2, #128	; 0x80
 8009fa0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	220a      	movs	r2, #10
 8009fa8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	3363      	adds	r3, #99	; 0x63
 8009fb0:	2210      	movs	r2, #16
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f01a ff8e 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2225      	movs	r2, #37	; 0x25
 8009fbe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f103 0210 	add.w	r2, r3, #16
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe2:	e038      	b.n	800a056 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff fd39 	bl	8009a60 <USBH_MSC_BOT_Process>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d12d      	bne.n	800a054 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ffe:	3303      	adds	r3, #3
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00a:	3302      	adds	r3, #2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a018:	3301      	adds	r3, #1
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a01e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a036:	3307      	adds	r3, #7
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a042:	3306      	adds	r3, #6
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b29b      	uxth	r3, r3
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	809a      	strh	r2, [r3, #4]
      break;
 800a054:	bf00      	nop
  }

  return error;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	460b      	mov	r3, r1
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a06e:	2302      	movs	r3, #2
 800a070:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a082:	2b01      	cmp	r3, #1
 800a084:	d002      	beq.n	800a08c <USBH_MSC_SCSI_Inquiry+0x2c>
 800a086:	2b02      	cmp	r3, #2
 800a088:	d03d      	beq.n	800a106 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a08a:	e089      	b.n	800a1a0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2224      	movs	r2, #36	; 0x24
 800a090:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2280      	movs	r2, #128	; 0x80
 800a096:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	220a      	movs	r2, #10
 800a09e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	3363      	adds	r3, #99	; 0x63
 800a0a6:	220a      	movs	r2, #10
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f01a ff13 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2212      	movs	r2, #18
 800a0b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	015b      	lsls	r3, r3, #5
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2224      	movs	r2, #36	; 0x24
 800a0d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f103 0210 	add.w	r2, r3, #16
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a100:	2301      	movs	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
      break;
 800a104:	e04c      	b.n	800a1a0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	4619      	mov	r1, r3
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fca8 	bl	8009a60 <USBH_MSC_BOT_Process>
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d141      	bne.n	800a19e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a11a:	2222      	movs	r2, #34	; 0x22
 800a11c:	2100      	movs	r1, #0
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f01a fed9 	bl	8024ed6 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 031f 	and.w	r3, r3, #31
 800a130:	b2da      	uxtb	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	095b      	lsrs	r3, r3, #5
 800a140:	b2da      	uxtb	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14c:	3301      	adds	r3, #1
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b25b      	sxtb	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	da03      	bge.n	800a15e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	709a      	strb	r2, [r3, #2]
 800a15c:	e002      	b.n	800a164 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	1cd8      	adds	r0, r3, #3
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a16e:	3308      	adds	r3, #8
 800a170:	2208      	movs	r2, #8
 800a172:	4619      	mov	r1, r3
 800a174:	f01a fea4 	bl	8024ec0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f103 000c 	add.w	r0, r3, #12
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a184:	3310      	adds	r3, #16
 800a186:	2210      	movs	r2, #16
 800a188:	4619      	mov	r1, r3
 800a18a:	f01a fe99 	bl	8024ec0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	331d      	adds	r3, #29
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a198:	3220      	adds	r2, #32
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	601a      	str	r2, [r3, #0]
      break;
 800a19e:	bf00      	nop
  }

  return error;
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b086      	sub	sp, #24
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d002      	beq.n	800a1d6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d03d      	beq.n	800a250 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a1d4:	e05d      	b.n	800a292 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	220e      	movs	r2, #14
 800a1da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2280      	movs	r2, #128	; 0x80
 800a1e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	220a      	movs	r2, #10
 800a1e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	3363      	adds	r3, #99	; 0x63
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f01a fe6e 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	015b      	lsls	r3, r3, #5
 800a206:	b2da      	uxtb	r2, r3
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	220e      	movs	r2, #14
 800a222:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2202      	movs	r2, #2
 800a23a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f103 0210 	add.w	r2, r3, #16
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a24a:	2301      	movs	r3, #1
 800a24c:	75fb      	strb	r3, [r7, #23]
      break;
 800a24e:	e020      	b.n	800a292 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fc03 	bl	8009a60 <USBH_MSC_BOT_Process>
 800a25a:	4603      	mov	r3, r0
 800a25c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d115      	bne.n	800a290 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26a:	3302      	adds	r3, #2
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	b2da      	uxtb	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27e:	7b1a      	ldrb	r2, [r3, #12]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a28a:	7b5a      	ldrb	r2, [r3, #13]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	709a      	strb	r2, [r3, #2]
      break;
 800a290:	bf00      	nop
  }

  return error;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d002      	beq.n	800a2ca <USBH_MSC_SCSI_Write+0x2e>
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d047      	beq.n	800a358 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a2c8:	e04e      	b.n	800a368 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	fb03 f202 	mul.w	r2, r3, r2
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	220a      	movs	r2, #10
 800a2e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	3363      	adds	r3, #99	; 0x63
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f01a fdee 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	222a      	movs	r2, #42	; 0x2a
 800a2fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a302:	79fa      	ldrb	r2, [r7, #7]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a30a:	79ba      	ldrb	r2, [r7, #6]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a312:	797a      	ldrb	r2, [r7, #5]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a31a:	1d3b      	adds	r3, r7, #4
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a324:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a32e:	f107 0320 	add.w	r3, r7, #32
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2202      	movs	r2, #2
 800a346:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
      break;
 800a356:	e007      	b.n	800a368 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a358:	7afb      	ldrb	r3, [r7, #11]
 800a35a:	4619      	mov	r1, r3
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fb7f 	bl	8009a60 <USBH_MSC_BOT_Process>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]
      break;
 800a366:	bf00      	nop
  }

  return error;
 800a368:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	460b      	mov	r3, r1
 800a380:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a382:	2302      	movs	r3, #2
 800a384:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a396:	2b01      	cmp	r3, #1
 800a398:	d002      	beq.n	800a3a0 <USBH_MSC_SCSI_Read+0x2e>
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d047      	beq.n	800a42e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a39e:	e04e      	b.n	800a43e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	fb03 f202 	mul.w	r2, r3, r2
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2280      	movs	r2, #128	; 0x80
 800a3b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	220a      	movs	r2, #10
 800a3be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3363      	adds	r3, #99	; 0x63
 800a3c6:	2210      	movs	r2, #16
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f01a fd83 	bl	8024ed6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	2228      	movs	r2, #40	; 0x28
 800a3d4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a3d8:	79fa      	ldrb	r2, [r7, #7]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a3e0:	79ba      	ldrb	r2, [r7, #6]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a3e8:	797a      	ldrb	r2, [r7, #5]
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a3f0:	1d3b      	adds	r3, r7, #4
 800a3f2:	781a      	ldrb	r2, [r3, #0]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a3fa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a404:	f107 0320 	add.w	r3, r7, #32
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a428:	2301      	movs	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
      break;
 800a42c:	e007      	b.n	800a43e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	4619      	mov	r1, r3
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f7ff fb14 	bl	8009a60 <USBH_MSC_BOT_Process>
 800a438:	4603      	mov	r3, r0
 800a43a:	75fb      	strb	r3, [r7, #23]
      break;
 800a43c:	bf00      	nop
  }

  return error;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	e029      	b.n	800a4b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	79fa      	ldrb	r2, [r7, #7]
 800a464:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f81f 	bl	800a4bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f009 fd39 	bl	8013f24 <USBH_LL_Init>

  return USBH_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e009      	b.n	800a4e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	33e0      	adds	r3, #224	; 0xe0
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b0e      	cmp	r3, #14
 800a4e6:	d9f2      	bls.n	800a4ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	e009      	b.n	800a502 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a508:	d3f1      	bcc.n	800a4ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2240      	movs	r2, #64	; 0x40
 800a52e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d016      	beq.n	800a5a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10e      	bne.n	800a5a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a588:	1c59      	adds	r1, r3, #1
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	33de      	adds	r3, #222	; 0xde
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
 800a59e:	e004      	b.n	800a5aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e001      	b.n	800a5aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d204      	bcs.n	800a5de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a5dc:	e001      	b.n	800a5e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4603      	mov	r3, r0
 800a600:	70fb      	strb	r3, [r7, #3]
 800a602:	460b      	mov	r3, r1
 800a604:	70bb      	strb	r3, [r7, #2]
 800a606:	4613      	mov	r3, r2
 800a608:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a618:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a61a:	e025      	b.n	800a668 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	221a      	movs	r2, #26
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	3308      	adds	r3, #8
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	3302      	adds	r3, #2
 800a62c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	795b      	ldrb	r3, [r3, #5]
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	429a      	cmp	r2, r3
 800a636:	d002      	beq.n	800a63e <USBH_FindInterface+0x4e>
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	2bff      	cmp	r3, #255	; 0xff
 800a63c:	d111      	bne.n	800a662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a642:	78ba      	ldrb	r2, [r7, #2]
 800a644:	429a      	cmp	r2, r3
 800a646:	d002      	beq.n	800a64e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a648:	78bb      	ldrb	r3, [r7, #2]
 800a64a:	2bff      	cmp	r3, #255	; 0xff
 800a64c:	d109      	bne.n	800a662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a652:	787a      	ldrb	r2, [r7, #1]
 800a654:	429a      	cmp	r2, r3
 800a656:	d002      	beq.n	800a65e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a658:	787b      	ldrb	r3, [r7, #1]
 800a65a:	2bff      	cmp	r3, #255	; 0xff
 800a65c:	d101      	bne.n	800a662 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	e006      	b.n	800a670 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	3301      	adds	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d9d6      	bls.n	800a61c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a66e:	23ff      	movs	r3, #255	; 0xff
}
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f009 fc93 	bl	8013fb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a68a:	2101      	movs	r1, #1
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f009 fdaa 	bl	80141e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d102      	bne.n	800a6be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b0b      	cmp	r3, #11
 800a6c6:	f200 81b3 	bhi.w	800aa30 <USBH_Process+0x394>
 800a6ca:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <USBH_Process+0x34>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a701 	.word	0x0800a701
 800a6d4:	0800a733 	.word	0x0800a733
 800a6d8:	0800a79b 	.word	0x0800a79b
 800a6dc:	0800a9cb 	.word	0x0800a9cb
 800a6e0:	0800aa31 	.word	0x0800aa31
 800a6e4:	0800a83f 	.word	0x0800a83f
 800a6e8:	0800a971 	.word	0x0800a971
 800a6ec:	0800a875 	.word	0x0800a875
 800a6f0:	0800a895 	.word	0x0800a895
 800a6f4:	0800a8b5 	.word	0x0800a8b5
 800a6f8:	0800a8e3 	.word	0x0800a8e3
 800a6fc:	0800a9b3 	.word	0x0800a9b3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8193 	beq.w	800aa34 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a714:	20c8      	movs	r0, #200	; 0xc8
 800a716:	f009 fde3 	bl	80142e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f009 fca3 	bl	8014066 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a730:	e180      	b.n	800aa34 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d107      	bne.n	800a74c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a74a:	e182      	b.n	800aa52 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a756:	d914      	bls.n	800a782 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a75e:	3301      	adds	r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d903      	bls.n	800a77a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e16b      	b.n	800aa52 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
      break;
 800a780:	e167      	b.n	800aa52 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a788:	f103 020a 	add.w	r2, r3, #10
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a792:	200a      	movs	r0, #10
 800a794:	f009 fda4 	bl	80142e0 <USBH_Delay>
      break;
 800a798:	e15b      	b.n	800aa52 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7aa:	2104      	movs	r1, #4
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7b0:	2064      	movs	r0, #100	; 0x64
 800a7b2:	f009 fd95 	bl	80142e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f009 fc30 	bl	801401c <USBH_LL_GetSpeed>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2205      	movs	r2, #5
 800a7ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 f931 	bl	800ba36 <USBH_AllocPipe>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a7dc:	2180      	movs	r1, #128	; 0x80
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 f929 	bl	800ba36 <USBH_AllocPipe>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	7919      	ldrb	r1, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a800:	b292      	uxth	r2, r2
 800a802:	9202      	str	r2, [sp, #8]
 800a804:	2200      	movs	r2, #0
 800a806:	9201      	str	r2, [sp, #4]
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4603      	mov	r3, r0
 800a80c:	2280      	movs	r2, #128	; 0x80
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 f8e2 	bl	800b9d8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	7959      	ldrb	r1, [r3, #5]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a828:	b292      	uxth	r2, r2
 800a82a:	9202      	str	r2, [sp, #8]
 800a82c:	2200      	movs	r2, #0
 800a82e:	9201      	str	r2, [sp, #4]
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	4603      	mov	r3, r0
 800a834:	2200      	movs	r2, #0
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 f8ce 	bl	800b9d8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a83c:	e109      	b.n	800aa52 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f90c 	bl	800aa5c <USBH_HandleEnum>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f040 80f3 	bne.w	800aa38 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a860:	2b01      	cmp	r3, #1
 800a862:	d103      	bne.n	800a86c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2208      	movs	r2, #8
 800a868:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a86a:	e0e5      	b.n	800aa38 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2207      	movs	r2, #7
 800a870:	701a      	strb	r2, [r3, #0]
      break;
 800a872:	e0e1      	b.n	800aa38 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80de 	beq.w	800aa3c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a886:	2101      	movs	r1, #1
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2208      	movs	r2, #8
 800a890:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a892:	e0d3      	b.n	800aa3c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fc20 	bl	800b0e4 <USBH_SetCfg>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f040 80ca 	bne.w	800aa40 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2209      	movs	r2, #9
 800a8b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8b2:	e0c5      	b.n	800aa40 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fc30 	bl	800b12a <USBH_SetFeature>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f040 80b9 	bne.w	800aa44 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8d8:	e0b4      	b.n	800aa44 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	220a      	movs	r2, #10
 800a8de:	701a      	strb	r2, [r3, #0]
      break;
 800a8e0:	e0b0      	b.n	800aa44 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80ad 	beq.w	800aa48 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]
 800a8fa:	e016      	b.n	800a92a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a8fc:	7bfa      	ldrb	r2, [r7, #15]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	32de      	adds	r2, #222	; 0xde
 800a902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a906:	791a      	ldrb	r2, [r3, #4]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a90e:	429a      	cmp	r2, r3
 800a910:	d108      	bne.n	800a924 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a912:	7bfa      	ldrb	r2, [r7, #15]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	32de      	adds	r2, #222	; 0xde
 800a918:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a922:	e005      	b.n	800a930 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	3301      	adds	r3, #1
 800a928:	73fb      	strb	r3, [r7, #15]
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0e5      	beq.n	800a8fc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d016      	beq.n	800a968 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d109      	bne.n	800a960 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2206      	movs	r2, #6
 800a950:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a958:	2103      	movs	r1, #3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a95e:	e073      	b.n	800aa48 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	220d      	movs	r2, #13
 800a964:	701a      	strb	r2, [r3, #0]
      break;
 800a966:	e06f      	b.n	800aa48 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	220d      	movs	r2, #13
 800a96c:	701a      	strb	r2, [r3, #0]
      break;
 800a96e:	e06b      	b.n	800aa48 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d017      	beq.n	800a9aa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
 800a986:	4603      	mov	r3, r0
 800a988:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a98a:	7bbb      	ldrb	r3, [r7, #14]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	220b      	movs	r2, #11
 800a996:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a998:	e058      	b.n	800aa4c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d154      	bne.n	800aa4c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	220d      	movs	r2, #13
 800a9a6:	701a      	strb	r2, [r3, #0]
      break;
 800a9a8:	e050      	b.n	800aa4c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	220d      	movs	r2, #13
 800a9ae:	701a      	strb	r2, [r3, #0]
      break;
 800a9b0:	e04c      	b.n	800aa4c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d049      	beq.n	800aa50 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	4798      	blx	r3
      }
      break;
 800a9c8:	e042      	b.n	800aa50 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff fd72 	bl	800a4bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa06:	2105      	movs	r1, #5
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d107      	bne.n	800aa28 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fe2b 	bl	800a67c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa26:	e014      	b.n	800aa52 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f009 fac1 	bl	8013fb0 <USBH_LL_Start>
      break;
 800aa2e:	e010      	b.n	800aa52 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa30:	bf00      	nop
 800aa32:	e00e      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa34:	bf00      	nop
 800aa36:	e00c      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e00a      	b.n	800aa52 <USBH_Process+0x3b6>
    break;
 800aa3c:	bf00      	nop
 800aa3e:	e008      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa40:	bf00      	nop
 800aa42:	e006      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa44:	bf00      	nop
 800aa46:	e004      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa48:	bf00      	nop
 800aa4a:	e002      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa4c:	bf00      	nop
 800aa4e:	e000      	b.n	800aa52 <USBH_Process+0x3b6>
      break;
 800aa50:	bf00      	nop
  }
  return USBH_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af04      	add	r7, sp, #16
 800aa62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	f200 81c1 	bhi.w	800adf8 <USBH_HandleEnum+0x39c>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <USBH_HandleEnum+0x20>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aa9d 	.word	0x0800aa9d
 800aa80:	0800ab5b 	.word	0x0800ab5b
 800aa84:	0800abc5 	.word	0x0800abc5
 800aa88:	0800ac53 	.word	0x0800ac53
 800aa8c:	0800acbd 	.word	0x0800acbd
 800aa90:	0800ad2d 	.word	0x0800ad2d
 800aa94:	0800ad73 	.word	0x0800ad73
 800aa98:	0800adb9 	.word	0x0800adb9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aa9c:	2108      	movs	r1, #8
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa50 	bl	800af44 <USBH_Get_DevDesc>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d130      	bne.n	800ab10 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7919      	ldrb	r1, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aad2:	b292      	uxth	r2, r2
 800aad4:	9202      	str	r2, [sp, #8]
 800aad6:	2200      	movs	r2, #0
 800aad8:	9201      	str	r2, [sp, #4]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4603      	mov	r3, r0
 800aade:	2280      	movs	r2, #128	; 0x80
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 ff79 	bl	800b9d8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7959      	ldrb	r1, [r3, #5]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aafa:	b292      	uxth	r2, r2
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	9201      	str	r2, [sp, #4]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4603      	mov	r3, r0
 800ab06:	2200      	movs	r2, #0
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 ff65 	bl	800b9d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab0e:	e175      	b.n	800adfc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	f040 8172 	bne.w	800adfc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab1e:	3301      	adds	r3, #1
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d903      	bls.n	800ab3a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	220d      	movs	r2, #13
 800ab36:	701a      	strb	r2, [r3, #0]
      break;
 800ab38:	e160      	b.n	800adfc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	795b      	ldrb	r3, [r3, #5]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 ff99 	bl	800ba78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	791b      	ldrb	r3, [r3, #4]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 ff93 	bl	800ba78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
      break;
 800ab58:	e150      	b.n	800adfc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab5a:	2112      	movs	r1, #18
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f9f1 	bl	800af44 <USBH_Get_DevDesc>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab66:	7bbb      	ldrb	r3, [r7, #14]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab72:	e145      	b.n	800ae00 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	f040 8142 	bne.w	800ae00 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab82:	3301      	adds	r3, #1
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d903      	bls.n	800ab9e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	220d      	movs	r2, #13
 800ab9a:	701a      	strb	r2, [r3, #0]
      break;
 800ab9c:	e130      	b.n	800ae00 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	795b      	ldrb	r3, [r3, #5]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 ff67 	bl	800ba78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 ff61 	bl	800ba78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
      break;
 800abc2:	e11d      	b.n	800ae00 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800abc4:	2101      	movs	r1, #1
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fa68 	bl	800b09c <USBH_SetAddress>
 800abcc:	4603      	mov	r3, r0
 800abce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d132      	bne.n	800ac3c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800abd6:	2002      	movs	r0, #2
 800abd8:	f009 fb82 	bl	80142e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2203      	movs	r2, #3
 800abe8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	7919      	ldrb	r1, [r3, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abfe:	b292      	uxth	r2, r2
 800ac00:	9202      	str	r2, [sp, #8]
 800ac02:	2200      	movs	r2, #0
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2280      	movs	r2, #128	; 0x80
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fee3 	bl	800b9d8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7959      	ldrb	r1, [r3, #5]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac26:	b292      	uxth	r2, r2
 800ac28:	9202      	str	r2, [sp, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	9201      	str	r2, [sp, #4]
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4603      	mov	r3, r0
 800ac32:	2200      	movs	r2, #0
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fecf 	bl	800b9d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac3a:	e0e3      	b.n	800ae04 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	f040 80e0 	bne.w	800ae04 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	220d      	movs	r2, #13
 800ac48:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	705a      	strb	r2, [r3, #1]
      break;
 800ac50:	e0d8      	b.n	800ae04 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac52:	2109      	movs	r1, #9
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f99d 	bl	800af94 <USBH_Get_CfgDesc>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2204      	movs	r2, #4
 800ac68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac6a:	e0cd      	b.n	800ae08 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	f040 80ca 	bne.w	800ae08 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d903      	bls.n	800ac96 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	220d      	movs	r2, #13
 800ac92:	701a      	strb	r2, [r3, #0]
      break;
 800ac94:	e0b8      	b.n	800ae08 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	795b      	ldrb	r3, [r3, #5]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 feeb 	bl	800ba78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	791b      	ldrb	r3, [r3, #4]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fee5 	bl	800ba78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
      break;
 800acba:	e0a5      	b.n	800ae08 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f965 	bl	800af94 <USBH_Get_CfgDesc>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d103      	bne.n	800acdc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2205      	movs	r2, #5
 800acd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acda:	e097      	b.n	800ae0c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	2b03      	cmp	r3, #3
 800ace0:	f040 8094 	bne.w	800ae0c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acea:	3301      	adds	r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d903      	bls.n	800ad06 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	220d      	movs	r2, #13
 800ad02:	701a      	strb	r2, [r3, #0]
      break;
 800ad04:	e082      	b.n	800ae0c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	795b      	ldrb	r3, [r3, #5]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 feb3 	bl	800ba78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	791b      	ldrb	r3, [r3, #4]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fead 	bl	800ba78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	e06f      	b.n	800ae0c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d019      	beq.n	800ad6a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad42:	23ff      	movs	r3, #255	; 0xff
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f949 	bl	800afdc <USBH_Get_StringDesc>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2206      	movs	r2, #6
 800ad58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad5a:	e059      	b.n	800ae10 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d156      	bne.n	800ae10 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2206      	movs	r2, #6
 800ad66:	705a      	strb	r2, [r3, #1]
      break;
 800ad68:	e052      	b.n	800ae10 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2206      	movs	r2, #6
 800ad6e:	705a      	strb	r2, [r3, #1]
      break;
 800ad70:	e04e      	b.n	800ae10 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d019      	beq.n	800adb0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad88:	23ff      	movs	r3, #255	; 0xff
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f926 	bl	800afdc <USBH_Get_StringDesc>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d103      	bne.n	800ada2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2207      	movs	r2, #7
 800ad9e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ada0:	e038      	b.n	800ae14 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d135      	bne.n	800ae14 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2207      	movs	r2, #7
 800adac:	705a      	strb	r2, [r3, #1]
      break;
 800adae:	e031      	b.n	800ae14 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2207      	movs	r2, #7
 800adb4:	705a      	strb	r2, [r3, #1]
      break;
 800adb6:	e02d      	b.n	800ae14 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800adce:	23ff      	movs	r3, #255	; 0xff
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f903 	bl	800afdc <USBH_Get_StringDesc>
 800add6:	4603      	mov	r3, r0
 800add8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ade4:	e018      	b.n	800ae18 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d115      	bne.n	800ae18 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e012      	b.n	800ae18 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
      break;
 800adf6:	e00f      	b.n	800ae18 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800adf8:	bf00      	nop
 800adfa:	e00e      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800adfc:	bf00      	nop
 800adfe:	e00c      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae00:	bf00      	nop
 800ae02:	e00a      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae04:	bf00      	nop
 800ae06:	e008      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae08:	bf00      	nop
 800ae0a:	e006      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e004      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae10:	bf00      	nop
 800ae12:	e002      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae14:	bf00      	nop
 800ae16:	e000      	b.n	800ae1a <USBH_HandleEnum+0x3be>
      break;
 800ae18:	bf00      	nop
  }
  return Status;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f804 	bl	800ae66 <USBH_HandleSof>
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b0b      	cmp	r3, #11
 800ae76:	d10a      	bne.n	800ae8e <USBH_HandleSof+0x28>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d005      	beq.n	800ae8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
  }
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aea6:	bf00      	nop
}
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aec2:	bf00      	nop
}
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f009 f862 	bl	8013fe6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fda5 	bl	800ba78 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	795b      	ldrb	r3, [r3, #5]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fd9f 	bl	800ba78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af02      	add	r7, sp, #8
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	4613      	mov	r3, r2
 800af5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af62:	2100      	movs	r1, #0
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f864 	bl	800b032 <USBH_GetDescriptor>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af80:	78fa      	ldrb	r2, [r7, #3]
 800af82:	b292      	uxth	r2, r2
 800af84:	4619      	mov	r1, r3
 800af86:	f000 f918 	bl	800b1ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af02      	add	r7, sp, #8
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	331c      	adds	r3, #28
 800afa4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afa6:	887b      	ldrh	r3, [r7, #2]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afb0:	2100      	movs	r1, #0
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f83d 	bl	800b032 <USBH_GetDescriptor>
 800afb8:	4603      	mov	r3, r0
 800afba:	72fb      	strb	r3, [r7, #11]
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d107      	bne.n	800afd2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800afc8:	887a      	ldrh	r2, [r7, #2]
 800afca:	68f9      	ldr	r1, [r7, #12]
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 f964 	bl	800b29a <USBH_ParseCfgDesc>
  }

  return status;
 800afd2:	7afb      	ldrb	r3, [r7, #11]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	461a      	mov	r2, r3
 800afe8:	460b      	mov	r3, r1
 800afea:	72fb      	strb	r3, [r7, #11]
 800afec:	4613      	mov	r3, r2
 800afee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800aff0:	7afb      	ldrb	r3, [r7, #11]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aff8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b000:	893b      	ldrh	r3, [r7, #8]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	460b      	mov	r3, r1
 800b006:	2100      	movs	r1, #0
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f812 	bl	800b032 <USBH_GetDescriptor>
 800b00e:	4603      	mov	r3, r0
 800b010:	75fb      	strb	r3, [r7, #23]
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d107      	bne.n	800b028 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b01e:	893a      	ldrh	r2, [r7, #8]
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fa37 	bl	800b496 <USBH_ParseStringDesc>
  }

  return status;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	607b      	str	r3, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	72fb      	strb	r3, [r7, #11]
 800b040:	4613      	mov	r3, r2
 800b042:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	789b      	ldrb	r3, [r3, #2]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d11c      	bne.n	800b086 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b04c:	7afb      	ldrb	r3, [r7, #11]
 800b04e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b052:	b2da      	uxtb	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2206      	movs	r2, #6
 800b05c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	893a      	ldrh	r2, [r7, #8]
 800b062:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b064:	893b      	ldrh	r3, [r7, #8]
 800b066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b06e:	d104      	bne.n	800b07a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f240 4209 	movw	r2, #1033	; 0x409
 800b076:	829a      	strh	r2, [r3, #20]
 800b078:	e002      	b.n	800b080 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8b3a      	ldrh	r2, [r7, #24]
 800b084:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b086:	8b3b      	ldrh	r3, [r7, #24]
 800b088:	461a      	mov	r2, r3
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fa50 	bl	800b532 <USBH_CtlReq>
 800b092:	4603      	mov	r3, r0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	789b      	ldrb	r3, [r3, #2]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d10f      	bne.n	800b0d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2205      	movs	r2, #5
 800b0ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa2c 	bl	800b532 <USBH_CtlReq>
 800b0da:	4603      	mov	r3, r0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	789b      	ldrb	r3, [r3, #2]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d10e      	bne.n	800b116 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2209      	movs	r2, #9
 800b102:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	887a      	ldrh	r2, [r7, #2]
 800b108:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa09 	bl	800b532 <USBH_CtlReq>
 800b120:	4603      	mov	r3, r0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	789b      	ldrb	r3, [r3, #2]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d10f      	bne.n	800b15e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2203      	movs	r2, #3
 800b148:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f9e5 	bl	800b532 <USBH_CtlReq>
 800b168:	4603      	mov	r3, r0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	789b      	ldrb	r3, [r3, #2]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d10f      	bne.n	800b1a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b198:	78fb      	ldrb	r3, [r7, #3]
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9c1 	bl	800b532 <USBH_CtlReq>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	785a      	ldrb	r2, [r3, #1]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	3302      	adds	r3, #2
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	3303      	adds	r3, #3
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	791a      	ldrb	r2, [r3, #4]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	795a      	ldrb	r2, [r3, #5]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	799a      	ldrb	r2, [r3, #6]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	79da      	ldrb	r2, [r3, #7]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	2b08      	cmp	r3, #8
 800b218:	d939      	bls.n	800b28e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	3308      	adds	r3, #8
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b29a      	uxth	r2, r3
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3309      	adds	r3, #9
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	4313      	orrs	r3, r2
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	330a      	adds	r3, #10
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	330b      	adds	r3, #11
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	b29b      	uxth	r3, r3
 800b246:	021b      	lsls	r3, r3, #8
 800b248:	b29b      	uxth	r3, r3
 800b24a:	4313      	orrs	r3, r2
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	330c      	adds	r3, #12
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	b29a      	uxth	r2, r3
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	330d      	adds	r3, #13
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b29b      	uxth	r3, r3
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	7b9a      	ldrb	r2, [r3, #14]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	7bda      	ldrb	r2, [r3, #15]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	7c1a      	ldrb	r2, [r3, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	7c5a      	ldrb	r2, [r3, #17]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	745a      	strb	r2, [r3, #17]
  }
}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b08a      	sub	sp, #40	; 0x28
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	781a      	ldrb	r2, [r3, #0]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	785a      	ldrb	r2, [r3, #1]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3303      	adds	r3, #3
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	791a      	ldrb	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	795a      	ldrb	r2, [r3, #5]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	799a      	ldrb	r2, [r3, #6]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	79da      	ldrb	r2, [r3, #7]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	7a1a      	ldrb	r2, [r3, #8]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b310:	88fb      	ldrh	r3, [r7, #6]
 800b312:	2b09      	cmp	r3, #9
 800b314:	d95f      	bls.n	800b3d6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b316:	2309      	movs	r3, #9
 800b318:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b31e:	e051      	b.n	800b3c4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b320:	f107 0316 	add.w	r3, r7, #22
 800b324:	4619      	mov	r1, r3
 800b326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b328:	f000 f8e8 	bl	800b4fc <USBH_GetNextDesc>
 800b32c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	2b04      	cmp	r3, #4
 800b334:	d146      	bne.n	800b3c4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b33a:	221a      	movs	r2, #26
 800b33c:	fb02 f303 	mul.w	r3, r2, r3
 800b340:	3308      	adds	r3, #8
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	3302      	adds	r3, #2
 800b348:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b34c:	69f8      	ldr	r0, [r7, #28]
 800b34e:	f000 f846 	bl	800b3de <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b358:	2300      	movs	r3, #0
 800b35a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b35c:	e022      	b.n	800b3a4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b35e:	f107 0316 	add.w	r3, r7, #22
 800b362:	4619      	mov	r1, r3
 800b364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b366:	f000 f8c9 	bl	800b4fc <USBH_GetNextDesc>
 800b36a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	2b05      	cmp	r3, #5
 800b372:	d117      	bne.n	800b3a4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b378:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b37c:	3201      	adds	r2, #1
 800b37e:	00d2      	lsls	r2, r2, #3
 800b380:	211a      	movs	r1, #26
 800b382:	fb01 f303 	mul.w	r3, r1, r3
 800b386:	4413      	add	r3, r2
 800b388:	3308      	adds	r3, #8
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4413      	add	r3, r2
 800b38e:	3304      	adds	r3, #4
 800b390:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b394:	69b8      	ldr	r0, [r7, #24]
 800b396:	f000 f851 	bl	800b43c <USBH_ParseEPDesc>
            ep_ix++;
 800b39a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	791b      	ldrb	r3, [r3, #4]
 800b3a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d204      	bcs.n	800b3ba <USBH_ParseCfgDesc+0x120>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	885a      	ldrh	r2, [r3, #2]
 800b3b4:	8afb      	ldrh	r3, [r7, #22]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d8d1      	bhi.n	800b35e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b3ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3be:	3301      	adds	r3, #1
 800b3c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b3c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d804      	bhi.n	800b3d6 <USBH_ParseCfgDesc+0x13c>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	885a      	ldrh	r2, [r3, #2]
 800b3d0:	8afb      	ldrh	r3, [r7, #22]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d8a4      	bhi.n	800b320 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	3728      	adds	r7, #40	; 0x28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	781a      	ldrb	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	785a      	ldrb	r2, [r3, #1]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	789a      	ldrb	r2, [r3, #2]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	78da      	ldrb	r2, [r3, #3]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	791a      	ldrb	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	795a      	ldrb	r2, [r3, #5]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	799a      	ldrb	r2, [r3, #6]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	79da      	ldrb	r2, [r3, #7]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	7a1a      	ldrb	r2, [r3, #8]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	721a      	strb	r2, [r3, #8]
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781a      	ldrb	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	785a      	ldrb	r2, [r3, #1]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	789a      	ldrb	r2, [r3, #2]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	78da      	ldrb	r2, [r3, #3]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	3304      	adds	r3, #4
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	3305      	adds	r3, #5
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	b29b      	uxth	r3, r3
 800b476:	021b      	lsls	r3, r3, #8
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4313      	orrs	r3, r2
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	799a      	ldrb	r2, [r3, #6]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	719a      	strb	r2, [r3, #6]
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b496:	b480      	push	{r7}
 800b498:	b087      	sub	sp, #28
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d120      	bne.n	800b4f0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	1e9a      	subs	r2, r3, #2
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	bf28      	it	cs
 800b4ba:	4613      	movcs	r3, r2
 800b4bc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	82fb      	strh	r3, [r7, #22]
 800b4c8:	e00b      	b.n	800b4e2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b4ca:	8afb      	ldrh	r3, [r7, #22]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4dc:	8afb      	ldrh	r3, [r7, #22]
 800b4de:	3302      	adds	r3, #2
 800b4e0:	82fb      	strh	r3, [r7, #22]
 800b4e2:	8afa      	ldrh	r2, [r7, #22]
 800b4e4:	8abb      	ldrh	r3, [r7, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d3ef      	bcc.n	800b4ca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	701a      	strb	r2, [r3, #0]
  }
}
 800b4f0:	bf00      	nop
 800b4f2:	371c      	adds	r7, #28
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	881a      	ldrh	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	4413      	add	r3, r2
 800b512:	b29a      	uxth	r2, r3
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4413      	add	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b086      	sub	sp, #24
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	4613      	mov	r3, r2
 800b53e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b540:	2301      	movs	r3, #1
 800b542:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	789b      	ldrb	r3, [r3, #2]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d002      	beq.n	800b552 <USBH_CtlReq+0x20>
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d00f      	beq.n	800b570 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b550:	e027      	b.n	800b5a2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	88fa      	ldrh	r2, [r7, #6]
 800b55c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2201      	movs	r2, #1
 800b562:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2202      	movs	r2, #2
 800b568:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b56a:	2301      	movs	r3, #1
 800b56c:	75fb      	strb	r3, [r7, #23]
      break;
 800b56e:	e018      	b.n	800b5a2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f81b 	bl	800b5ac <USBH_HandleControl>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <USBH_CtlReq+0x54>
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	2b03      	cmp	r3, #3
 800b584:	d106      	bne.n	800b594 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2201      	movs	r2, #1
 800b58a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	761a      	strb	r2, [r3, #24]
      break;
 800b592:	e005      	b.n	800b5a0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d102      	bne.n	800b5a0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	709a      	strb	r2, [r3, #2]
      break;
 800b5a0:	bf00      	nop
  }
  return status;
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7e1b      	ldrb	r3, [r3, #24]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	2b0a      	cmp	r3, #10
 800b5c4:	f200 8158 	bhi.w	800b878 <USBH_HandleControl+0x2cc>
 800b5c8:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <USBH_HandleControl+0x24>)
 800b5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ce:	bf00      	nop
 800b5d0:	0800b5fd 	.word	0x0800b5fd
 800b5d4:	0800b617 	.word	0x0800b617
 800b5d8:	0800b681 	.word	0x0800b681
 800b5dc:	0800b6a7 	.word	0x0800b6a7
 800b5e0:	0800b6df 	.word	0x0800b6df
 800b5e4:	0800b70b 	.word	0x0800b70b
 800b5e8:	0800b75d 	.word	0x0800b75d
 800b5ec:	0800b77f 	.word	0x0800b77f
 800b5f0:	0800b7bb 	.word	0x0800b7bb
 800b5f4:	0800b7e3 	.word	0x0800b7e3
 800b5f8:	0800b821 	.word	0x0800b821
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f103 0110 	add.w	r1, r3, #16
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	795b      	ldrb	r3, [r3, #5]
 800b606:	461a      	mov	r2, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f945 	bl	800b898 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2202      	movs	r2, #2
 800b612:	761a      	strb	r2, [r3, #24]
      break;
 800b614:	e13b      	b.n	800b88e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	795b      	ldrb	r3, [r3, #5]
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f008 fdcf 	bl	80141c0 <USBH_LL_GetURBState>
 800b622:	4603      	mov	r3, r0
 800b624:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d11e      	bne.n	800b66a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	7c1b      	ldrb	r3, [r3, #16]
 800b630:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b634:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	8adb      	ldrh	r3, [r3, #22]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b63e:	7b7b      	ldrb	r3, [r7, #13]
 800b640:	2b80      	cmp	r3, #128	; 0x80
 800b642:	d103      	bne.n	800b64c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2203      	movs	r2, #3
 800b648:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b64a:	e117      	b.n	800b87c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2205      	movs	r2, #5
 800b650:	761a      	strb	r2, [r3, #24]
      break;
 800b652:	e113      	b.n	800b87c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b654:	7b7b      	ldrb	r3, [r7, #13]
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d103      	bne.n	800b662 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2209      	movs	r2, #9
 800b65e:	761a      	strb	r2, [r3, #24]
      break;
 800b660:	e10c      	b.n	800b87c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2207      	movs	r2, #7
 800b666:	761a      	strb	r2, [r3, #24]
      break;
 800b668:	e108      	b.n	800b87c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d003      	beq.n	800b678 <USBH_HandleControl+0xcc>
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b02      	cmp	r3, #2
 800b674:	f040 8102 	bne.w	800b87c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	220b      	movs	r2, #11
 800b67c:	761a      	strb	r2, [r3, #24]
      break;
 800b67e:	e0fd      	b.n	800b87c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6899      	ldr	r1, [r3, #8]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	899a      	ldrh	r2, [r3, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	791b      	ldrb	r3, [r3, #4]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f93c 	bl	800b916 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2204      	movs	r2, #4
 800b6a2:	761a      	strb	r2, [r3, #24]
      break;
 800b6a4:	e0f3      	b.n	800b88e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	791b      	ldrb	r3, [r3, #4]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f008 fd87 	bl	80141c0 <USBH_LL_GetURBState>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d102      	bne.n	800b6c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2209      	movs	r2, #9
 800b6c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b6c2:	7bbb      	ldrb	r3, [r7, #14]
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	d102      	bne.n	800b6ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6cc:	e0d8      	b.n	800b880 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	f040 80d5 	bne.w	800b880 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	220b      	movs	r2, #11
 800b6da:	761a      	strb	r2, [r3, #24]
      break;
 800b6dc:	e0d0      	b.n	800b880 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6899      	ldr	r1, [r3, #8]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	899a      	ldrh	r2, [r3, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	7958      	ldrb	r0, [r3, #5]
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f8eb 	bl	800b8cc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2206      	movs	r2, #6
 800b706:	761a      	strb	r2, [r3, #24]
      break;
 800b708:	e0c1      	b.n	800b88e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	795b      	ldrb	r3, [r3, #5]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f008 fd55 	bl	80141c0 <USBH_LL_GetURBState>
 800b716:	4603      	mov	r3, r0
 800b718:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d103      	bne.n	800b728 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2207      	movs	r2, #7
 800b724:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b726:	e0ad      	b.n	800b884 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	2b05      	cmp	r3, #5
 800b72c:	d105      	bne.n	800b73a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	220c      	movs	r2, #12
 800b732:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b734:	2303      	movs	r3, #3
 800b736:	73fb      	strb	r3, [r7, #15]
      break;
 800b738:	e0a4      	b.n	800b884 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d103      	bne.n	800b748 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2205      	movs	r2, #5
 800b744:	761a      	strb	r2, [r3, #24]
      break;
 800b746:	e09d      	b.n	800b884 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	f040 809a 	bne.w	800b884 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	220b      	movs	r2, #11
 800b754:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b756:	2302      	movs	r3, #2
 800b758:	73fb      	strb	r3, [r7, #15]
      break;
 800b75a:	e093      	b.n	800b884 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	791b      	ldrb	r3, [r3, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	2100      	movs	r1, #0
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f8d6 	bl	800b916 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2208      	movs	r2, #8
 800b77a:	761a      	strb	r2, [r3, #24]

      break;
 800b77c:	e087      	b.n	800b88e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	791b      	ldrb	r3, [r3, #4]
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f008 fd1b 	bl	80141c0 <USBH_LL_GetURBState>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d105      	bne.n	800b7a0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	220d      	movs	r2, #13
 800b798:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b79e:	e073      	b.n	800b888 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d103      	bne.n	800b7ae <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	220b      	movs	r2, #11
 800b7aa:	761a      	strb	r2, [r3, #24]
      break;
 800b7ac:	e06c      	b.n	800b888 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
 800b7b0:	2b05      	cmp	r3, #5
 800b7b2:	d169      	bne.n	800b888 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b8:	e066      	b.n	800b888 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	795a      	ldrb	r2, [r3, #5]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f87f 	bl	800b8cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	220a      	movs	r2, #10
 800b7de:	761a      	strb	r2, [r3, #24]
      break;
 800b7e0:	e055      	b.n	800b88e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	795b      	ldrb	r3, [r3, #5]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f008 fce9 	bl	80141c0 <USBH_LL_GetURBState>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d105      	bne.n	800b804 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	220d      	movs	r2, #13
 800b800:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b802:	e043      	b.n	800b88c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b804:	7bbb      	ldrb	r3, [r7, #14]
 800b806:	2b02      	cmp	r3, #2
 800b808:	d103      	bne.n	800b812 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2209      	movs	r2, #9
 800b80e:	761a      	strb	r2, [r3, #24]
      break;
 800b810:	e03c      	b.n	800b88c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b04      	cmp	r3, #4
 800b816:	d139      	bne.n	800b88c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	220b      	movs	r2, #11
 800b81c:	761a      	strb	r2, [r3, #24]
      break;
 800b81e:	e035      	b.n	800b88c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7e5b      	ldrb	r3, [r3, #25]
 800b824:	3301      	adds	r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	765a      	strb	r2, [r3, #25]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	7e5b      	ldrb	r3, [r3, #25]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d806      	bhi.n	800b842 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b840:	e025      	b.n	800b88e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b848:	2106      	movs	r1, #6
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	795b      	ldrb	r3, [r3, #5]
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f90c 	bl	800ba78 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	791b      	ldrb	r3, [r3, #4]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f906 	bl	800ba78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b872:	2302      	movs	r3, #2
 800b874:	73fb      	strb	r3, [r7, #15]
      break;
 800b876:	e00a      	b.n	800b88e <USBH_HandleControl+0x2e2>

    default:
      break;
 800b878:	bf00      	nop
 800b87a:	e008      	b.n	800b88e <USBH_HandleControl+0x2e2>
      break;
 800b87c:	bf00      	nop
 800b87e:	e006      	b.n	800b88e <USBH_HandleControl+0x2e2>
      break;
 800b880:	bf00      	nop
 800b882:	e004      	b.n	800b88e <USBH_HandleControl+0x2e2>
      break;
 800b884:	bf00      	nop
 800b886:	e002      	b.n	800b88e <USBH_HandleControl+0x2e2>
      break;
 800b888:	bf00      	nop
 800b88a:	e000      	b.n	800b88e <USBH_HandleControl+0x2e2>
      break;
 800b88c:	bf00      	nop
  }

  return status;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af04      	add	r7, sp, #16
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8a6:	79f9      	ldrb	r1, [r7, #7]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	2308      	movs	r3, #8
 800b8ae:	9302      	str	r3, [sp, #8]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f008 fc4e 	bl	801415e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	460b      	mov	r3, r1
 800b8dc:	80fb      	strh	r3, [r7, #6]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8f0:	7979      	ldrb	r1, [r7, #5]
 800b8f2:	7e3b      	ldrb	r3, [r7, #24]
 800b8f4:	9303      	str	r3, [sp, #12]
 800b8f6:	88fb      	ldrh	r3, [r7, #6]
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	2301      	movs	r3, #1
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	2300      	movs	r3, #0
 800b904:	2200      	movs	r2, #0
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f008 fc29 	bl	801415e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b088      	sub	sp, #32
 800b91a:	af04      	add	r7, sp, #16
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	4611      	mov	r1, r2
 800b922:	461a      	mov	r2, r3
 800b924:	460b      	mov	r3, r1
 800b926:	80fb      	strh	r3, [r7, #6]
 800b928:	4613      	mov	r3, r2
 800b92a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b92c:	7979      	ldrb	r1, [r7, #5]
 800b92e:	2300      	movs	r3, #0
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	2301      	movs	r3, #1
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	2300      	movs	r3, #0
 800b940:	2201      	movs	r2, #1
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f008 fc0b 	bl	801415e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b948:	2300      	movs	r3, #0

}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b088      	sub	sp, #32
 800b956:	af04      	add	r7, sp, #16
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	4611      	mov	r1, r2
 800b95e:	461a      	mov	r2, r3
 800b960:	460b      	mov	r3, r1
 800b962:	80fb      	strh	r3, [r7, #6]
 800b964:	4613      	mov	r3, r2
 800b966:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b976:	7979      	ldrb	r1, [r7, #5]
 800b978:	7e3b      	ldrb	r3, [r7, #24]
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	2301      	movs	r3, #1
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	2302      	movs	r3, #2
 800b98a:	2200      	movs	r2, #0
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f008 fbe6 	bl	801415e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af04      	add	r7, sp, #16
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	80fb      	strh	r3, [r7, #6]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9b2:	7979      	ldrb	r1, [r7, #5]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f008 fbc8 	bl	801415e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af04      	add	r7, sp, #16
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	70fb      	strb	r3, [r7, #3]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70bb      	strb	r3, [r7, #2]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9f2:	7878      	ldrb	r0, [r7, #1]
 800b9f4:	78ba      	ldrb	r2, [r7, #2]
 800b9f6:	78f9      	ldrb	r1, [r7, #3]
 800b9f8:	8b3b      	ldrh	r3, [r7, #24]
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	7d3b      	ldrb	r3, [r7, #20]
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	7c3b      	ldrb	r3, [r7, #16]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4603      	mov	r3, r0
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f008 fb5b 	bl	80140c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b082      	sub	sp, #8
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ba22:	78fb      	ldrb	r3, [r7, #3]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f008 fb7a 	bl	8014120 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f836 	bl	800bab4 <USBH_GetFreePipe>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
 800ba4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d00a      	beq.n	800ba6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	89fb      	ldrh	r3, [r7, #14]
 800ba5a:	f003 030f 	and.w	r3, r3, #15
 800ba5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	33e0      	adds	r3, #224	; 0xe0
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	440b      	add	r3, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba6c:	89fb      	ldrh	r3, [r7, #14]
 800ba6e:	b2db      	uxtb	r3, r3
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ba84:	78fb      	ldrb	r3, [r7, #3]
 800ba86:	2b0a      	cmp	r3, #10
 800ba88:	d80d      	bhi.n	800baa6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	33e0      	adds	r3, #224	; 0xe0
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba9c:	6879      	ldr	r1, [r7, #4]
 800ba9e:	33e0      	adds	r3, #224	; 0xe0
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	440b      	add	r3, r1
 800baa4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
 800bac4:	e00f      	b.n	800bae6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	33e0      	adds	r3, #224	; 0xe0
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d102      	bne.n	800bae0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	b29b      	uxth	r3, r3
 800bade:	e007      	b.n	800baf0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	3301      	adds	r3, #1
 800bae4:	73fb      	strb	r3, [r7, #15]
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	2b0a      	cmp	r3, #10
 800baea:	d9ec      	bls.n	800bac6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800baec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb06:	79fb      	ldrb	r3, [r7, #7]
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <disk_status+0x30>)
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	79fa      	ldrb	r2, [r7, #7]
 800bb14:	4905      	ldr	r1, [pc, #20]	; (800bb2c <disk_status+0x30>)
 800bb16:	440a      	add	r2, r1
 800bb18:	7a12      	ldrb	r2, [r2, #8]
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	4798      	blx	r3
 800bb1e:	4603      	mov	r3, r0
 800bb20:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20000168 	.word	0x20000168

0800bb30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	4a0d      	ldr	r2, [pc, #52]	; (800bb78 <disk_initialize+0x48>)
 800bb42:	5cd3      	ldrb	r3, [r2, r3]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d111      	bne.n	800bb6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	4a0b      	ldr	r2, [pc, #44]	; (800bb78 <disk_initialize+0x48>)
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	4a09      	ldr	r2, [pc, #36]	; (800bb78 <disk_initialize+0x48>)
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	79fa      	ldrb	r2, [r7, #7]
 800bb5e:	4906      	ldr	r1, [pc, #24]	; (800bb78 <disk_initialize+0x48>)
 800bb60:	440a      	add	r2, r1
 800bb62:	7a12      	ldrb	r2, [r2, #8]
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000168 	.word	0x20000168

0800bb7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb7c:	b590      	push	{r4, r7, lr}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	607a      	str	r2, [r7, #4]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <disk_read+0x3c>)
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	689c      	ldr	r4, [r3, #8]
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	4a07      	ldr	r2, [pc, #28]	; (800bbb8 <disk_read+0x3c>)
 800bb9c:	4413      	add	r3, r2
 800bb9e:	7a18      	ldrb	r0, [r3, #8]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	47a0      	blx	r4
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd90      	pop	{r4, r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000168 	.word	0x20000168

0800bbbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	607a      	str	r2, [r7, #4]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	4a0a      	ldr	r2, [pc, #40]	; (800bbf8 <disk_write+0x3c>)
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	68dc      	ldr	r4, [r3, #12]
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4a07      	ldr	r2, [pc, #28]	; (800bbf8 <disk_write+0x3c>)
 800bbdc:	4413      	add	r3, r2
 800bbde:	7a18      	ldrb	r0, [r3, #8]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	68b9      	ldr	r1, [r7, #8]
 800bbe6:	47a0      	blx	r4
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	371c      	adds	r7, #28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd90      	pop	{r4, r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000168 	.word	0x20000168

0800bbfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3301      	adds	r3, #1
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc0c:	89fb      	ldrh	r3, [r7, #14]
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	b21a      	sxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	b21b      	sxth	r3, r3
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	b21b      	sxth	r3, r3
 800bc1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc1e:	89fb      	ldrh	r3, [r7, #14]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3303      	adds	r3, #3
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	3202      	adds	r2, #2
 800bc44:	7812      	ldrb	r2, [r2, #0]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	3201      	adds	r2, #1
 800bc52:	7812      	ldrb	r2, [r2, #0]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	7812      	ldrb	r2, [r2, #0]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc64:	68fb      	ldr	r3, [r7, #12]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	887a      	ldrh	r2, [r7, #2]
 800bc86:	b2d2      	uxtb	r2, r2
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	887b      	ldrh	r3, [r7, #2]
 800bc8c:	0a1b      	lsrs	r3, r3, #8
 800bc8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	887a      	ldrh	r2, [r7, #2]
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	1c5a      	adds	r2, r3, #1
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	b2d2      	uxtb	r2, r2
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	0a1b      	lsrs	r3, r3, #8
 800bcd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	607a      	str	r2, [r7, #4]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	701a      	strb	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	617a      	str	r2, [r7, #20]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	b2d2      	uxtb	r2, r2
 800bd1a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	607b      	str	r3, [r7, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1f3      	bne.n	800bd10 <mem_set+0x10>
}
 800bd28:	bf00      	nop
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd34:	b480      	push	{r7}
 800bd36:	b089      	sub	sp, #36	; 0x24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	61fb      	str	r3, [r7, #28]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	61fa      	str	r2, [r7, #28]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	61ba      	str	r2, [r7, #24]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	1acb      	subs	r3, r1, r3
 800bd60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	607b      	str	r3, [r7, #4]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <mem_cmp+0x40>
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d0eb      	beq.n	800bd4c <mem_cmp+0x18>

	return r;
 800bd74:	697b      	ldr	r3, [r7, #20]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3724      	adds	r7, #36	; 0x24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd8c:	e002      	b.n	800bd94 <chk_chr+0x12>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3301      	adds	r3, #1
 800bd92:	607b      	str	r3, [r7, #4]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <chk_chr+0x26>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d1f2      	bne.n	800bd8e <chk_chr+0xc>
	return *str;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	e01f      	b.n	800be08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bdc8:	4a41      	ldr	r2, [pc, #260]	; (800bed0 <inc_lock+0x118>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	4413      	add	r3, r2
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d113      	bne.n	800be02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bdda:	4a3d      	ldr	r2, [pc, #244]	; (800bed0 <inc_lock+0x118>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	4413      	add	r3, r2
 800bde2:	3304      	adds	r3, #4
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d109      	bne.n	800be02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bdee:	4a38      	ldr	r2, [pc, #224]	; (800bed0 <inc_lock+0x118>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d006      	beq.n	800be10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d9dc      	bls.n	800bdc8 <inc_lock+0x10>
 800be0e:	e000      	b.n	800be12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800be10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d132      	bne.n	800be7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e002      	b.n	800be24 <inc_lock+0x6c>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3301      	adds	r3, #1
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d806      	bhi.n	800be38 <inc_lock+0x80>
 800be2a:	4a29      	ldr	r2, [pc, #164]	; (800bed0 <inc_lock+0x118>)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	4413      	add	r3, r2
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f2      	bne.n	800be1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d101      	bne.n	800be42 <inc_lock+0x8a>
 800be3e:	2300      	movs	r3, #0
 800be40:	e040      	b.n	800bec4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	4922      	ldr	r1, [pc, #136]	; (800bed0 <inc_lock+0x118>)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	440b      	add	r3, r1
 800be4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	689a      	ldr	r2, [r3, #8]
 800be54:	491e      	ldr	r1, [pc, #120]	; (800bed0 <inc_lock+0x118>)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	011b      	lsls	r3, r3, #4
 800be5a:	440b      	add	r3, r1
 800be5c:	3304      	adds	r3, #4
 800be5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	695a      	ldr	r2, [r3, #20]
 800be64:	491a      	ldr	r1, [pc, #104]	; (800bed0 <inc_lock+0x118>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	440b      	add	r3, r1
 800be6c:	3308      	adds	r3, #8
 800be6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800be70:	4a17      	ldr	r2, [pc, #92]	; (800bed0 <inc_lock+0x118>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	011b      	lsls	r3, r3, #4
 800be76:	4413      	add	r3, r2
 800be78:	330c      	adds	r3, #12
 800be7a:	2200      	movs	r2, #0
 800be7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <inc_lock+0xe0>
 800be84:	4a12      	ldr	r2, [pc, #72]	; (800bed0 <inc_lock+0x118>)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	4413      	add	r3, r2
 800be8c:	330c      	adds	r3, #12
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <inc_lock+0xe0>
 800be94:	2300      	movs	r3, #0
 800be96:	e015      	b.n	800bec4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d108      	bne.n	800beb0 <inc_lock+0xf8>
 800be9e:	4a0c      	ldr	r2, [pc, #48]	; (800bed0 <inc_lock+0x118>)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	4413      	add	r3, r2
 800bea6:	330c      	adds	r3, #12
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	3301      	adds	r3, #1
 800beac:	b29a      	uxth	r2, r3
 800beae:	e001      	b.n	800beb4 <inc_lock+0xfc>
 800beb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800beb4:	4906      	ldr	r1, [pc, #24]	; (800bed0 <inc_lock+0x118>)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	011b      	lsls	r3, r3, #4
 800beba:	440b      	add	r3, r1
 800bebc:	330c      	adds	r3, #12
 800bebe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3301      	adds	r3, #1
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	20000148 	.word	0x20000148

0800bed4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3b01      	subs	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d825      	bhi.n	800bf34 <dec_lock+0x60>
		n = Files[i].ctr;
 800bee8:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <dec_lock+0x74>)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	011b      	lsls	r3, r3, #4
 800beee:	4413      	add	r3, r2
 800bef0:	330c      	adds	r3, #12
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bef6:	89fb      	ldrh	r3, [r7, #14]
 800bef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800befc:	d101      	bne.n	800bf02 <dec_lock+0x2e>
 800befe:	2300      	movs	r3, #0
 800bf00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf02:	89fb      	ldrh	r3, [r7, #14]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <dec_lock+0x3a>
 800bf08:	89fb      	ldrh	r3, [r7, #14]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf0e:	4a0e      	ldr	r2, [pc, #56]	; (800bf48 <dec_lock+0x74>)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	011b      	lsls	r3, r3, #4
 800bf14:	4413      	add	r3, r2
 800bf16:	330c      	adds	r3, #12
 800bf18:	89fa      	ldrh	r2, [r7, #14]
 800bf1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf1c:	89fb      	ldrh	r3, [r7, #14]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d105      	bne.n	800bf2e <dec_lock+0x5a>
 800bf22:	4a09      	ldr	r2, [pc, #36]	; (800bf48 <dec_lock+0x74>)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	4413      	add	r3, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	737b      	strb	r3, [r7, #13]
 800bf32:	e001      	b.n	800bf38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf34:	2302      	movs	r3, #2
 800bf36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bf38:	7b7b      	ldrb	r3, [r7, #13]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20000148 	.word	0x20000148

0800bf4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	e010      	b.n	800bf7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf5a:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <clear_lock+0x44>)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	4413      	add	r3, r2
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d105      	bne.n	800bf76 <clear_lock+0x2a>
 800bf6a:	4a09      	ldr	r2, [pc, #36]	; (800bf90 <clear_lock+0x44>)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	4413      	add	r3, r2
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d9eb      	bls.n	800bf5a <clear_lock+0xe>
	}
}
 800bf82:	bf00      	nop
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	20000148 	.word	0x20000148

0800bf94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	78db      	ldrb	r3, [r3, #3]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d034      	beq.n	800c012 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7858      	ldrb	r0, [r3, #1]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bfb8:	2301      	movs	r3, #1
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	f7ff fdfe 	bl	800bbbc <disk_write>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <sync_window+0x38>
			res = FR_DISK_ERR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	73fb      	strb	r3, [r7, #15]
 800bfca:	e022      	b.n	800c012 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	1ad2      	subs	r2, r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d217      	bcs.n	800c012 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	789b      	ldrb	r3, [r3, #2]
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	e010      	b.n	800c00c <sync_window+0x78>
					wsect += fs->fsize;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	4413      	add	r3, r2
 800bff2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7858      	ldrb	r0, [r3, #1]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bffe:	2301      	movs	r3, #1
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	f7ff fddb 	bl	800bbbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3b01      	subs	r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d8eb      	bhi.n	800bfea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c012:	7bfb      	ldrb	r3, [r7, #15]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d01b      	beq.n	800c06c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffad 	bl	800bf94 <sync_window>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d113      	bne.n	800c06c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7858      	ldrb	r0, [r3, #1]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c04e:	2301      	movs	r3, #1
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	f7ff fd93 	bl	800bb7c <disk_read>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c05c:	f04f 33ff 	mov.w	r3, #4294967295
 800c060:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c062:	2301      	movs	r3, #1
 800c064:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	3b02      	subs	r3, #2
 800c084:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	3b02      	subs	r3, #2
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d301      	bcc.n	800c096 <clust2sect+0x20>
 800c092:	2300      	movs	r3, #0
 800c094:	e008      	b.n	800c0a8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	895b      	ldrh	r3, [r3, #10]
 800c09a:	461a      	mov	r2, r3
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	fb03 f202 	mul.w	r2, r3, r2
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4413      	add	r3, r2
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d904      	bls.n	800c0d4 <get_fat+0x20>
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d302      	bcc.n	800c0da <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e08c      	b.n	800c1f4 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0da:	f04f 33ff 	mov.w	r3, #4294967295
 800c0de:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d045      	beq.n	800c174 <get_fat+0xc0>
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d05d      	beq.n	800c1a8 <get_fat+0xf4>
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d177      	bne.n	800c1e0 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	085b      	lsrs	r3, r3, #1
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	0a5b      	lsrs	r3, r3, #9
 800c106:	4413      	add	r3, r2
 800c108:	4619      	mov	r1, r3
 800c10a:	6938      	ldr	r0, [r7, #16]
 800c10c:	f7ff ff86 	bl	800c01c <move_window>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d167      	bne.n	800c1e6 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	60fa      	str	r2, [r7, #12]
 800c11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	4413      	add	r3, r2
 800c124:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c128:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	0a5b      	lsrs	r3, r3, #9
 800c132:	4413      	add	r3, r2
 800c134:	4619      	mov	r1, r3
 800c136:	6938      	ldr	r0, [r7, #16]
 800c138:	f7ff ff70 	bl	800c01c <move_window>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d153      	bne.n	800c1ea <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4413      	add	r3, r2
 800c14c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c150:	021b      	lsls	r3, r3, #8
 800c152:	461a      	mov	r2, r3
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4313      	orrs	r3, r2
 800c158:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <get_fat+0xb6>
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	091b      	lsrs	r3, r3, #4
 800c168:	e002      	b.n	800c170 <get_fat+0xbc>
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c170:	617b      	str	r3, [r7, #20]
			break;
 800c172:	e03f      	b.n	800c1f4 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	0a1b      	lsrs	r3, r3, #8
 800c17c:	4413      	add	r3, r2
 800c17e:	4619      	mov	r1, r3
 800c180:	6938      	ldr	r0, [r7, #16]
 800c182:	f7ff ff4b 	bl	800c01c <move_window>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d130      	bne.n	800c1ee <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c19a:	4413      	add	r3, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff fd2d 	bl	800bbfc <ld_word>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	617b      	str	r3, [r7, #20]
			break;
 800c1a6:	e025      	b.n	800c1f4 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	09db      	lsrs	r3, r3, #7
 800c1b0:	4413      	add	r3, r2
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6938      	ldr	r0, [r7, #16]
 800c1b6:	f7ff ff31 	bl	800c01c <move_window>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d118      	bne.n	800c1f2 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1ce:	4413      	add	r3, r2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff fd2b 	bl	800bc2c <ld_dword>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1dc:	617b      	str	r3, [r7, #20]
			break;
 800c1de:	e009      	b.n	800c1f4 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	e006      	b.n	800c1f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1e6:	bf00      	nop
 800c1e8:	e004      	b.n	800c1f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1ea:	bf00      	nop
 800c1ec:	e002      	b.n	800c1f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1ee:	bf00      	nop
 800c1f0:	e000      	b.n	800c1f4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1f2:	bf00      	nop
		}
	}

	return val;
 800c1f4:	697b      	ldr	r3, [r7, #20]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c1fe:	b590      	push	{r4, r7, lr}
 800c200:	b089      	sub	sp, #36	; 0x24
 800c202:	af00      	add	r7, sp, #0
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	60b9      	str	r1, [r7, #8]
 800c208:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c20a:	2302      	movs	r3, #2
 800c20c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2b01      	cmp	r3, #1
 800c212:	f240 80d6 	bls.w	800c3c2 <put_fat+0x1c4>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	f080 80d0 	bcs.w	800c3c2 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d073      	beq.n	800c312 <put_fat+0x114>
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	f000 8091 	beq.w	800c352 <put_fat+0x154>
 800c230:	2b01      	cmp	r3, #1
 800c232:	f040 80c6 	bne.w	800c3c2 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	61bb      	str	r3, [r7, #24]
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	085b      	lsrs	r3, r3, #1
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	4413      	add	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	0a5b      	lsrs	r3, r3, #9
 800c24c:	4413      	add	r3, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f7ff fee3 	bl	800c01c <move_window>
 800c256:	4603      	mov	r3, r0
 800c258:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c25a:	7ffb      	ldrb	r3, [r7, #31]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f040 80a9 	bne.w	800c3b4 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	1c59      	adds	r1, r3, #1
 800c26c:	61b9      	str	r1, [r7, #24]
 800c26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c272:	4413      	add	r3, r2
 800c274:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00d      	beq.n	800c29c <put_fat+0x9e>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	b25b      	sxtb	r3, r3
 800c286:	f003 030f 	and.w	r3, r3, #15
 800c28a:	b25a      	sxtb	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	011b      	lsls	r3, r3, #4
 800c292:	b25b      	sxtb	r3, r3
 800c294:	4313      	orrs	r3, r2
 800c296:	b25b      	sxtb	r3, r3
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	e001      	b.n	800c2a0 <put_fat+0xa2>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	0a5b      	lsrs	r3, r3, #9
 800c2b2:	4413      	add	r3, r2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff feb0 	bl	800c01c <move_window>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2c0:	7ffb      	ldrb	r3, [r7, #31]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d178      	bne.n	800c3b8 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d2:	4413      	add	r3, r2
 800c2d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <put_fat+0xea>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	091b      	lsrs	r3, r3, #4
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	e00e      	b.n	800c306 <put_fat+0x108>
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b25b      	sxtb	r3, r3
 800c2ee:	f023 030f 	bic.w	r3, r3, #15
 800c2f2:	b25a      	sxtb	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	0a1b      	lsrs	r3, r3, #8
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	b25b      	sxtb	r3, r3
 800c300:	4313      	orrs	r3, r2
 800c302:	b25b      	sxtb	r3, r3
 800c304:	b2db      	uxtb	r3, r3
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	70da      	strb	r2, [r3, #3]
			break;
 800c310:	e057      	b.n	800c3c2 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	4413      	add	r3, r2
 800c31c:	4619      	mov	r1, r3
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fe7c 	bl	800c01c <move_window>
 800c324:	4603      	mov	r3, r0
 800c326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c328:	7ffb      	ldrb	r3, [r7, #31]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d146      	bne.n	800c3bc <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c33c:	4413      	add	r3, r2
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	b292      	uxth	r2, r2
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f7ff fc94 	bl	800bc72 <st_word>
			fs->wflag = 1;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	70da      	strb	r2, [r3, #3]
			break;
 800c350:	e037      	b.n	800c3c2 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	09db      	lsrs	r3, r3, #7
 800c35a:	4413      	add	r3, r2
 800c35c:	4619      	mov	r1, r3
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff fe5c 	bl	800c01c <move_window>
 800c364:	4603      	mov	r3, r0
 800c366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c368:	7ffb      	ldrb	r3, [r7, #31]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d128      	bne.n	800c3c0 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c382:	4413      	add	r3, r2
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fc51 	bl	800bc2c <ld_dword>
 800c38a:	4603      	mov	r3, r0
 800c38c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c390:	4323      	orrs	r3, r4
 800c392:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3a2:	4413      	add	r3, r2
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fc7e 	bl	800bca8 <st_dword>
			fs->wflag = 1;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	70da      	strb	r2, [r3, #3]
			break;
 800c3b2:	e006      	b.n	800c3c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3b4:	bf00      	nop
 800c3b6:	e004      	b.n	800c3c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3b8:	bf00      	nop
 800c3ba:	e002      	b.n	800c3c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3bc:	bf00      	nop
 800c3be:	e000      	b.n	800c3c2 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3c0:	bf00      	nop
		}
	}
	return res;
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3724      	adds	r7, #36	; 0x24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd90      	pop	{r4, r7, pc}

0800c3cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10d      	bne.n	800c3fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d004      	beq.n	800c3f8 <create_chain+0x2c>
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	69ba      	ldr	r2, [r7, #24]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d31b      	bcc.n	800c430 <create_chain+0x64>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	61bb      	str	r3, [r7, #24]
 800c3fc:	e018      	b.n	800c430 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff fe57 	bl	800c0b4 <get_fat>
 800c406:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d801      	bhi.n	800c412 <create_chain+0x46>
 800c40e:	2301      	movs	r3, #1
 800c410:	e070      	b.n	800c4f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c418:	d101      	bne.n	800c41e <create_chain+0x52>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	e06a      	b.n	800c4f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	429a      	cmp	r2, r3
 800c426:	d201      	bcs.n	800c42c <create_chain+0x60>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	e063      	b.n	800c4f4 <create_chain+0x128>
		scl = clst;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	3301      	adds	r3, #1
 800c438:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	429a      	cmp	r2, r3
 800c442:	d307      	bcc.n	800c454 <create_chain+0x88>
				ncl = 2;
 800c444:	2302      	movs	r3, #2
 800c446:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d901      	bls.n	800c454 <create_chain+0x88>
 800c450:	2300      	movs	r3, #0
 800c452:	e04f      	b.n	800c4f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c454:	69f9      	ldr	r1, [r7, #28]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff fe2c 	bl	800c0b4 <get_fat>
 800c45c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00e      	beq.n	800c482 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d003      	beq.n	800c472 <create_chain+0xa6>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c470:	d101      	bne.n	800c476 <create_chain+0xaa>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	e03e      	b.n	800c4f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c476:	69fa      	ldr	r2, [r7, #28]
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d1da      	bne.n	800c434 <create_chain+0x68>
 800c47e:	2300      	movs	r3, #0
 800c480:	e038      	b.n	800c4f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c482:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c484:	f04f 32ff 	mov.w	r2, #4294967295
 800c488:	69f9      	ldr	r1, [r7, #28]
 800c48a:	6938      	ldr	r0, [r7, #16]
 800c48c:	f7ff feb7 	bl	800c1fe <put_fat>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <create_chain+0xe2>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d006      	beq.n	800c4ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4a0:	69fa      	ldr	r2, [r7, #28]
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6938      	ldr	r0, [r7, #16]
 800c4a6:	f7ff feaa 	bl	800c1fe <put_fat>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d116      	bne.n	800c4e2 <create_chain+0x116>
		fs->last_clst = ncl;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	69fa      	ldr	r2, [r7, #28]
 800c4b8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	695a      	ldr	r2, [r3, #20]
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	3b02      	subs	r3, #2
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d804      	bhi.n	800c4d2 <create_chain+0x106>
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	1e5a      	subs	r2, r3, #1
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	791b      	ldrb	r3, [r3, #4]
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	711a      	strb	r2, [r3, #4]
 800c4e0:	e007      	b.n	800c4f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d102      	bne.n	800c4ee <create_chain+0x122>
 800c4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ec:	e000      	b.n	800c4f0 <create_chain+0x124>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4f2:	69fb      	ldr	r3, [r7, #28]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3720      	adds	r7, #32
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c512:	d204      	bcs.n	800c51e <dir_sdi+0x22>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	f003 031f 	and.w	r3, r3, #31
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c51e:	2302      	movs	r3, #2
 800c520:	e063      	b.n	800c5ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d106      	bne.n	800c542 <dir_sdi+0x46>
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d902      	bls.n	800c542 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10c      	bne.n	800c562 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	095b      	lsrs	r3, r3, #5
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	8912      	ldrh	r2, [r2, #8]
 800c550:	4293      	cmp	r3, r2
 800c552:	d301      	bcc.n	800c558 <dir_sdi+0x5c>
 800c554:	2302      	movs	r3, #2
 800c556:	e048      	b.n	800c5ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	61da      	str	r2, [r3, #28]
 800c560:	e029      	b.n	800c5b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	895b      	ldrh	r3, [r3, #10]
 800c566:	025b      	lsls	r3, r3, #9
 800c568:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c56a:	e019      	b.n	800c5a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6979      	ldr	r1, [r7, #20]
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff fd9f 	bl	800c0b4 <get_fat>
 800c576:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57e:	d101      	bne.n	800c584 <dir_sdi+0x88>
 800c580:	2301      	movs	r3, #1
 800c582:	e032      	b.n	800c5ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d904      	bls.n	800c594 <dir_sdi+0x98>
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	429a      	cmp	r2, r3
 800c592:	d301      	bcc.n	800c598 <dir_sdi+0x9c>
 800c594:	2302      	movs	r3, #2
 800c596:	e028      	b.n	800c5ea <dir_sdi+0xee>
			ofs -= csz;
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d2e1      	bcs.n	800c56c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c5a8:	6979      	ldr	r1, [r7, #20]
 800c5aa:	6938      	ldr	r0, [r7, #16]
 800c5ac:	f7ff fd63 	bl	800c076 <clust2sect>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <dir_sdi+0xcc>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	e010      	b.n	800c5ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	69da      	ldr	r2, [r3, #28]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	0a5b      	lsrs	r3, r3, #9
 800c5d0:	441a      	add	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e2:	441a      	add	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b086      	sub	sp, #24
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	3320      	adds	r3, #32
 800c608:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	69db      	ldr	r3, [r3, #28]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <dir_next+0x28>
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c618:	d301      	bcc.n	800c61e <dir_next+0x2c>
 800c61a:	2304      	movs	r3, #4
 800c61c:	e0aa      	b.n	800c774 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 8098 	bne.w	800c75a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10b      	bne.n	800c654 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	095b      	lsrs	r3, r3, #5
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	8912      	ldrh	r2, [r2, #8]
 800c644:	4293      	cmp	r3, r2
 800c646:	f0c0 8088 	bcc.w	800c75a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	61da      	str	r2, [r3, #28]
 800c650:	2304      	movs	r3, #4
 800c652:	e08f      	b.n	800c774 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	0a5b      	lsrs	r3, r3, #9
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	8952      	ldrh	r2, [r2, #10]
 800c65c:	3a01      	subs	r2, #1
 800c65e:	4013      	ands	r3, r2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d17a      	bne.n	800c75a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7ff fd21 	bl	800c0b4 <get_fat>
 800c672:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d801      	bhi.n	800c67e <dir_next+0x8c>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e07a      	b.n	800c774 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c684:	d101      	bne.n	800c68a <dir_next+0x98>
 800c686:	2301      	movs	r3, #1
 800c688:	e074      	b.n	800c774 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	429a      	cmp	r2, r3
 800c692:	d358      	bcc.n	800c746 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d104      	bne.n	800c6a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	61da      	str	r2, [r3, #28]
 800c6a0:	2304      	movs	r3, #4
 800c6a2:	e067      	b.n	800c774 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	f7ff fe8d 	bl	800c3cc <create_chain>
 800c6b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <dir_next+0xcc>
 800c6ba:	2307      	movs	r3, #7
 800c6bc:	e05a      	b.n	800c774 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d101      	bne.n	800c6c8 <dir_next+0xd6>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e055      	b.n	800c774 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ce:	d101      	bne.n	800c6d4 <dir_next+0xe2>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e04f      	b.n	800c774 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f7ff fc5d 	bl	800bf94 <sync_window>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <dir_next+0xf2>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e047      	b.n	800c774 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3334      	adds	r3, #52	; 0x34
 800c6e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff fb06 	bl	800bd00 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	613b      	str	r3, [r7, #16]
 800c6f8:	6979      	ldr	r1, [r7, #20]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff fcbb 	bl	800c076 <clust2sect>
 800c700:	4602      	mov	r2, r0
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	631a      	str	r2, [r3, #48]	; 0x30
 800c706:	e012      	b.n	800c72e <dir_next+0x13c>
						fs->wflag = 1;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7ff fc40 	bl	800bf94 <sync_window>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <dir_next+0x12c>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e02a      	b.n	800c774 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	3301      	adds	r3, #1
 800c722:	613b      	str	r3, [r7, #16]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	631a      	str	r2, [r3, #48]	; 0x30
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	895b      	ldrh	r3, [r3, #10]
 800c732:	461a      	mov	r2, r3
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	4293      	cmp	r3, r2
 800c738:	d3e6      	bcc.n	800c708 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad2      	subs	r2, r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c74c:	6979      	ldr	r1, [r7, #20]
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f7ff fc91 	bl	800c076 <clust2sect>
 800c754:	4602      	mov	r2, r0
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	331a      	adds	r3, #26
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff fa36 	bl	800bbfc <ld_word>
 800c790:	4603      	mov	r3, r0
 800c792:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d109      	bne.n	800c7b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	3314      	adds	r3, #20
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fa2b 	bl	800bbfc <ld_word>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	041b      	lsls	r3, r3, #16
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	331a      	adds	r3, #26
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff fa16 	bl	800bbfc <ld_word>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <cmp_lfn+0x1e>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e059      	b.n	800c88e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e2:	1e5a      	subs	r2, r3, #1
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	81fb      	strh	r3, [r7, #14]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	613b      	str	r3, [r7, #16]
 800c7f8:	e033      	b.n	800c862 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c7fa:	4a27      	ldr	r2, [pc, #156]	; (800c898 <cmp_lfn+0xdc>)
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	4413      	add	r3, r2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	4413      	add	r3, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff f9f7 	bl	800bbfc <ld_word>
 800c80e:	4603      	mov	r3, r0
 800c810:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c812:	89fb      	ldrh	r3, [r7, #14]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01a      	beq.n	800c84e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2bfe      	cmp	r3, #254	; 0xfe
 800c81c:	d812      	bhi.n	800c844 <cmp_lfn+0x88>
 800c81e:	89bb      	ldrh	r3, [r7, #12]
 800c820:	4618      	mov	r0, r3
 800c822:	f001 fab9 	bl	800dd98 <ff_wtoupper>
 800c826:	4603      	mov	r3, r0
 800c828:	461c      	mov	r4, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	617a      	str	r2, [r7, #20]
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	4413      	add	r3, r2
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 faad 	bl	800dd98 <ff_wtoupper>
 800c83e:	4603      	mov	r3, r0
 800c840:	429c      	cmp	r4, r3
 800c842:	d001      	beq.n	800c848 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c844:	2300      	movs	r3, #0
 800c846:	e022      	b.n	800c88e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c848:	89bb      	ldrh	r3, [r7, #12]
 800c84a:	81fb      	strh	r3, [r7, #14]
 800c84c:	e006      	b.n	800c85c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c84e:	89bb      	ldrh	r3, [r7, #12]
 800c850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c854:	4293      	cmp	r3, r2
 800c856:	d001      	beq.n	800c85c <cmp_lfn+0xa0>
 800c858:	2300      	movs	r3, #0
 800c85a:	e018      	b.n	800c88e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3301      	adds	r3, #1
 800c860:	613b      	str	r3, [r7, #16]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2b0c      	cmp	r3, #12
 800c866:	d9c8      	bls.n	800c7fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <cmp_lfn+0xd0>
 800c874:	89fb      	ldrh	r3, [r7, #14]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d008      	beq.n	800c88c <cmp_lfn+0xd0>
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <cmp_lfn+0xd0>
 800c888:	2300      	movs	r3, #0
 800c88a:	e000      	b.n	800c88e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c88c:	2301      	movs	r3, #1
}
 800c88e:	4618      	mov	r0, r3
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	bd90      	pop	{r4, r7, pc}
 800c896:	bf00      	nop
 800c898:	080265bc 	.word	0x080265bc

0800c89c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	331a      	adds	r3, #26
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7ff f9a6 	bl	800bbfc <ld_word>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <pick_lfn+0x1e>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e04d      	b.n	800c956 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8c2:	1e5a      	subs	r2, r3, #1
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	81fb      	strh	r3, [r7, #14]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	e028      	b.n	800c92c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c8da:	4a21      	ldr	r2, [pc, #132]	; (800c960 <pick_lfn+0xc4>)
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	4413      	add	r3, r2
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff f987 	bl	800bbfc <ld_word>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c8f2:	89fb      	ldrh	r3, [r7, #14]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00f      	beq.n	800c918 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2bfe      	cmp	r3, #254	; 0xfe
 800c8fc:	d901      	bls.n	800c902 <pick_lfn+0x66>
 800c8fe:	2300      	movs	r3, #0
 800c900:	e029      	b.n	800c956 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c902:	89bb      	ldrh	r3, [r7, #12]
 800c904:	81fb      	strh	r3, [r7, #14]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	617a      	str	r2, [r7, #20]
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4413      	add	r3, r2
 800c912:	89fa      	ldrh	r2, [r7, #14]
 800c914:	801a      	strh	r2, [r3, #0]
 800c916:	e006      	b.n	800c926 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c918:	89bb      	ldrh	r3, [r7, #12]
 800c91a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c91e:	4293      	cmp	r3, r2
 800c920:	d001      	beq.n	800c926 <pick_lfn+0x8a>
 800c922:	2300      	movs	r3, #0
 800c924:	e017      	b.n	800c956 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3301      	adds	r3, #1
 800c92a:	613b      	str	r3, [r7, #16]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2b0c      	cmp	r3, #12
 800c930:	d9d3      	bls.n	800c8da <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2bfe      	cmp	r3, #254	; 0xfe
 800c942:	d901      	bls.n	800c948 <pick_lfn+0xac>
 800c944:	2300      	movs	r3, #0
 800c946:	e006      	b.n	800c956 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4413      	add	r3, r2
 800c950:	2200      	movs	r2, #0
 800c952:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c954:	2301      	movs	r3, #1
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	080265bc 	.word	0x080265bc

0800c964 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c970:	230b      	movs	r3, #11
 800c972:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	b2da      	uxtb	r2, r3
 800c978:	0852      	lsrs	r2, r2, #1
 800c97a:	01db      	lsls	r3, r3, #7
 800c97c:	4313      	orrs	r3, r2
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	6079      	str	r1, [r7, #4]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	4413      	add	r3, r2
 800c98a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3b01      	subs	r3, #1
 800c990:	60bb      	str	r3, [r7, #8]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1ed      	bne.n	800c974 <sum_sfn+0x10>
	return sum;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b086      	sub	sp, #24
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9ba:	23ff      	movs	r3, #255	; 0xff
 800c9bc:	757b      	strb	r3, [r7, #21]
 800c9be:	23ff      	movs	r3, #255	; 0xff
 800c9c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c9c2:	e081      	b.n	800cac8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f7ff fb26 	bl	800c01c <move_window>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d17c      	bne.n	800cad4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c9e2:	7dbb      	ldrb	r3, [r7, #22]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d102      	bne.n	800c9ee <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	75fb      	strb	r3, [r7, #23]
 800c9ec:	e077      	b.n	800cade <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	330b      	adds	r3, #11
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9fa:	73fb      	strb	r3, [r7, #15]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7bfa      	ldrb	r2, [r7, #15]
 800ca00:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	2be5      	cmp	r3, #229	; 0xe5
 800ca06:	d00e      	beq.n	800ca26 <dir_read+0x80>
 800ca08:	7dbb      	ldrb	r3, [r7, #22]
 800ca0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca0c:	d00b      	beq.n	800ca26 <dir_read+0x80>
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	f023 0320 	bic.w	r3, r3, #32
 800ca14:	2b08      	cmp	r3, #8
 800ca16:	bf0c      	ite	eq
 800ca18:	2301      	moveq	r3, #1
 800ca1a:	2300      	movne	r3, #0
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	461a      	mov	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d002      	beq.n	800ca2c <dir_read+0x86>
				ord = 0xFF;
 800ca26:	23ff      	movs	r3, #255	; 0xff
 800ca28:	757b      	strb	r3, [r7, #21]
 800ca2a:	e044      	b.n	800cab6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	2b0f      	cmp	r3, #15
 800ca30:	d12f      	bne.n	800ca92 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca32:	7dbb      	ldrb	r3, [r7, #22]
 800ca34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00d      	beq.n	800ca58 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	7b5b      	ldrb	r3, [r3, #13]
 800ca42:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca44:	7dbb      	ldrb	r3, [r7, #22]
 800ca46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca4a:	75bb      	strb	r3, [r7, #22]
 800ca4c:	7dbb      	ldrb	r3, [r7, #22]
 800ca4e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	695a      	ldr	r2, [r3, #20]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca58:	7dba      	ldrb	r2, [r7, #22]
 800ca5a:	7d7b      	ldrb	r3, [r7, #21]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d115      	bne.n	800ca8c <dir_read+0xe6>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	330d      	adds	r3, #13
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	7d3a      	ldrb	r2, [r7, #20]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d10e      	bne.n	800ca8c <dir_read+0xe6>
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	4619      	mov	r1, r3
 800ca78:	4610      	mov	r0, r2
 800ca7a:	f7ff ff0f 	bl	800c89c <pick_lfn>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <dir_read+0xe6>
 800ca84:	7d7b      	ldrb	r3, [r7, #21]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	e000      	b.n	800ca8e <dir_read+0xe8>
 800ca8c:	23ff      	movs	r3, #255	; 0xff
 800ca8e:	757b      	strb	r3, [r7, #21]
 800ca90:	e011      	b.n	800cab6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca92:	7d7b      	ldrb	r3, [r7, #21]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d109      	bne.n	800caac <dir_read+0x106>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff ff61 	bl	800c964 <sum_sfn>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	7d3b      	ldrb	r3, [r7, #20]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d015      	beq.n	800cad8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f04f 32ff 	mov.w	r2, #4294967295
 800cab2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cab4:	e010      	b.n	800cad8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cab6:	2100      	movs	r1, #0
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff fd9a 	bl	800c5f2 <dir_next>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d109      	bne.n	800cadc <dir_read+0x136>
	while (dp->sect) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f47f af79 	bne.w	800c9c4 <dir_read+0x1e>
 800cad2:	e004      	b.n	800cade <dir_read+0x138>
		if (res != FR_OK) break;
 800cad4:	bf00      	nop
 800cad6:	e002      	b.n	800cade <dir_read+0x138>
					break;
 800cad8:	bf00      	nop
 800cada:	e000      	b.n	800cade <dir_read+0x138>
		if (res != FR_OK) break;
 800cadc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cade:	7dfb      	ldrb	r3, [r7, #23]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <dir_read+0x144>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	61da      	str	r2, [r3, #28]
	return res;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb02:	2100      	movs	r1, #0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff fcf9 	bl	800c4fc <dir_sdi>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <dir_find+0x24>
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
 800cb16:	e0a9      	b.n	800cc6c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb18:	23ff      	movs	r3, #255	; 0xff
 800cb1a:	753b      	strb	r3, [r7, #20]
 800cb1c:	7d3b      	ldrb	r3, [r7, #20]
 800cb1e:	757b      	strb	r3, [r7, #21]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f04f 32ff 	mov.w	r2, #4294967295
 800cb26:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	69db      	ldr	r3, [r3, #28]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6938      	ldr	r0, [r7, #16]
 800cb30:	f7ff fa74 	bl	800c01c <move_window>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f040 8090 	bne.w	800cc60 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb48:	7dbb      	ldrb	r3, [r7, #22]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d102      	bne.n	800cb54 <dir_find+0x60>
 800cb4e:	2304      	movs	r3, #4
 800cb50:	75fb      	strb	r3, [r7, #23]
 800cb52:	e08a      	b.n	800cc6a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	330b      	adds	r3, #11
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb60:	73fb      	strb	r3, [r7, #15]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7bfa      	ldrb	r2, [r7, #15]
 800cb66:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb68:	7dbb      	ldrb	r3, [r7, #22]
 800cb6a:	2be5      	cmp	r3, #229	; 0xe5
 800cb6c:	d007      	beq.n	800cb7e <dir_find+0x8a>
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	f003 0308 	and.w	r3, r3, #8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <dir_find+0x98>
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	2b0f      	cmp	r3, #15
 800cb7c:	d006      	beq.n	800cb8c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb7e:	23ff      	movs	r3, #255	; 0xff
 800cb80:	757b      	strb	r3, [r7, #21]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295
 800cb88:	631a      	str	r2, [r3, #48]	; 0x30
 800cb8a:	e05e      	b.n	800cc4a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	2b0f      	cmp	r3, #15
 800cb90:	d136      	bne.n	800cc00 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d154      	bne.n	800cc4a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cba0:	7dbb      	ldrb	r3, [r7, #22]
 800cba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00d      	beq.n	800cbc6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	7b5b      	ldrb	r3, [r3, #13]
 800cbb0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbb2:	7dbb      	ldrb	r3, [r7, #22]
 800cbb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbb8:	75bb      	strb	r3, [r7, #22]
 800cbba:	7dbb      	ldrb	r3, [r7, #22]
 800cbbc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	695a      	ldr	r2, [r3, #20]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbc6:	7dba      	ldrb	r2, [r7, #22]
 800cbc8:	7d7b      	ldrb	r3, [r7, #21]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d115      	bne.n	800cbfa <dir_find+0x106>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	330d      	adds	r3, #13
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	7d3a      	ldrb	r2, [r7, #20]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d10e      	bne.n	800cbfa <dir_find+0x106>
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	68da      	ldr	r2, [r3, #12]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	f7ff fde8 	bl	800c7bc <cmp_lfn>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <dir_find+0x106>
 800cbf2:	7d7b      	ldrb	r3, [r7, #21]
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	e000      	b.n	800cbfc <dir_find+0x108>
 800cbfa:	23ff      	movs	r3, #255	; 0xff
 800cbfc:	757b      	strb	r3, [r7, #21]
 800cbfe:	e024      	b.n	800cc4a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc00:	7d7b      	ldrb	r3, [r7, #21]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d109      	bne.n	800cc1a <dir_find+0x126>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff feaa 	bl	800c964 <sum_sfn>
 800cc10:	4603      	mov	r3, r0
 800cc12:	461a      	mov	r2, r3
 800cc14:	7d3b      	ldrb	r3, [r7, #20]
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d024      	beq.n	800cc64 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc20:	f003 0301 	and.w	r3, r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <dir_find+0x14a>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a18      	ldr	r0, [r3, #32]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3324      	adds	r3, #36	; 0x24
 800cc30:	220b      	movs	r2, #11
 800cc32:	4619      	mov	r1, r3
 800cc34:	f7ff f87e 	bl	800bd34 <mem_cmp>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d014      	beq.n	800cc68 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc3e:	23ff      	movs	r3, #255	; 0xff
 800cc40:	757b      	strb	r3, [r7, #21]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295
 800cc48:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff fcd0 	bl	800c5f2 <dir_next>
 800cc52:	4603      	mov	r3, r0
 800cc54:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f43f af65 	beq.w	800cb28 <dir_find+0x34>
 800cc5e:	e004      	b.n	800cc6a <dir_find+0x176>
		if (res != FR_OK) break;
 800cc60:	bf00      	nop
 800cc62:	e002      	b.n	800cc6a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc64:	bf00      	nop
 800cc66:	e000      	b.n	800cc6a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc68:	bf00      	nop

	return res;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	2200      	movs	r2, #0
 800cc88:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80d7 	beq.w	800ce42 <get_fileinfo+0x1ce>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d040      	beq.n	800cd20 <get_fileinfo+0xac>
			i = j = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cca6:	e029      	b.n	800ccfc <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cca8:	89fb      	ldrh	r3, [r7, #14]
 800ccaa:	2100      	movs	r1, #0
 800ccac:	4618      	mov	r0, r3
 800ccae:	f001 f813 	bl	800dcd8 <ff_convert>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ccb6:	89fb      	ldrh	r3, [r7, #14]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <get_fileinfo+0x4e>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
 800ccc0:	e028      	b.n	800cd14 <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800ccc2:	89fb      	ldrh	r3, [r7, #14]
 800ccc4:	2bff      	cmp	r3, #255	; 0xff
 800ccc6:	d90a      	bls.n	800ccde <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 800ccc8:	89fb      	ldrh	r3, [r7, #14]
 800ccca:	0a1b      	lsrs	r3, r3, #8
 800cccc:	b299      	uxth	r1, r3
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	61fa      	str	r2, [r7, #28]
 800ccd4:	b2c9      	uxtb	r1, r1
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	4413      	add	r3, r2
 800ccda:	460a      	mov	r2, r1
 800ccdc:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	2bfe      	cmp	r3, #254	; 0xfe
 800cce2:	d902      	bls.n	800ccea <get_fileinfo+0x76>
 800cce4:	2300      	movs	r3, #0
 800cce6:	61fb      	str	r3, [r7, #28]
 800cce8:	e014      	b.n	800cd14 <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	61fa      	str	r2, [r7, #28]
 800ccf0:	89fa      	ldrh	r2, [r7, #14]
 800ccf2:	b2d1      	uxtb	r1, r2
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	460a      	mov	r2, r1
 800ccfa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	68da      	ldr	r2, [r3, #12]
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	1c59      	adds	r1, r3, #1
 800cd04:	61b9      	str	r1, [r7, #24]
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	4413      	add	r3, r2
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	81fb      	strh	r3, [r7, #14]
 800cd0e:	89fb      	ldrh	r3, [r7, #14]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1c9      	bne.n	800cca8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	4413      	add	r3, r2
 800cd1a:	3316      	adds	r3, #22
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	3316      	adds	r3, #22
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cd34:	e04c      	b.n	800cdd0 <get_fileinfo+0x15c>
		c = (TCHAR)dp->dir[i++];
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a1a      	ldr	r2, [r3, #32]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	1c59      	adds	r1, r3, #1
 800cd3e:	61f9      	str	r1, [r7, #28]
 800cd40:	4413      	add	r3, r2
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d100      	bne.n	800cd4e <get_fileinfo+0xda>
 800cd4c:	e040      	b.n	800cdd0 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	2b05      	cmp	r3, #5
 800cd52:	d101      	bne.n	800cd58 <get_fileinfo+0xe4>
 800cd54:	23e5      	movs	r3, #229	; 0xe5
 800cd56:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	2b09      	cmp	r3, #9
 800cd5c:	d10f      	bne.n	800cd7e <get_fileinfo+0x10a>
			if (!lfv) fno->fname[j] = '.';
 800cd5e:	89bb      	ldrh	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d105      	bne.n	800cd70 <get_fileinfo+0xfc>
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	4413      	add	r3, r2
 800cd6a:	3316      	adds	r3, #22
 800cd6c:	222e      	movs	r2, #46	; 0x2e
 800cd6e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	61ba      	str	r2, [r7, #24]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	4413      	add	r3, r2
 800cd7a:	222e      	movs	r2, #46	; 0x2e
 800cd7c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	4413      	add	r3, r2
 800cd84:	3309      	adds	r3, #9
 800cd86:	7dfa      	ldrb	r2, [r7, #23]
 800cd88:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cd8a:	89bb      	ldrh	r3, [r7, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d11c      	bne.n	800cdca <get_fileinfo+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
 800cd92:	2b40      	cmp	r3, #64	; 0x40
 800cd94:	d913      	bls.n	800cdbe <get_fileinfo+0x14a>
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
 800cd98:	2b5a      	cmp	r3, #90	; 0x5a
 800cd9a:	d810      	bhi.n	800cdbe <get_fileinfo+0x14a>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	330c      	adds	r3, #12
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	2b08      	cmp	r3, #8
 800cdaa:	d901      	bls.n	800cdb0 <get_fileinfo+0x13c>
 800cdac:	2310      	movs	r3, #16
 800cdae:	e000      	b.n	800cdb2 <get_fileinfo+0x13e>
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <get_fileinfo+0x14a>
				c += 0x20;			/* To lower */
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	3320      	adds	r3, #32
 800cdbc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	3316      	adds	r3, #22
 800cdc6:	7dfa      	ldrb	r2, [r7, #23]
 800cdc8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b0a      	cmp	r3, #10
 800cdd4:	d9af      	bls.n	800cd36 <get_fileinfo+0xc2>
	}
	if (!lfv) {
 800cdd6:	89bb      	ldrh	r3, [r7, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10d      	bne.n	800cdf8 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	4413      	add	r3, r2
 800cde2:	3316      	adds	r3, #22
 800cde4:	2200      	movs	r2, #0
 800cde6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	330c      	adds	r3, #12
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d101      	bne.n	800cdf8 <get_fileinfo+0x184>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	3309      	adds	r3, #9
 800ce00:	2200      	movs	r2, #0
 800ce02:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	7ada      	ldrb	r2, [r3, #11]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	331c      	adds	r3, #28
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe ff09 	bl	800bc2c <ld_dword>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a1b      	ldr	r3, [r3, #32]
 800ce24:	3316      	adds	r3, #22
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe ff00 	bl	800bc2c <ld_dword>
 800ce2c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	80da      	strh	r2, [r3, #6]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	0c1b      	lsrs	r3, r3, #16
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	809a      	strh	r2, [r3, #4]
 800ce40:	e000      	b.n	800ce44 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce42:	bf00      	nop
}
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	613b      	str	r3, [r7, #16]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	2300      	movs	r3, #0
 800ce66:	617b      	str	r3, [r7, #20]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	61ba      	str	r2, [r7, #24]
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	4413      	add	r3, r2
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ce7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce7c:	2b1f      	cmp	r3, #31
 800ce7e:	d96a      	bls.n	800cf56 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ce80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce82:	2b2f      	cmp	r3, #47	; 0x2f
 800ce84:	d006      	beq.n	800ce94 <create_name+0x48>
 800ce86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce88:	2b5c      	cmp	r3, #92	; 0x5c
 800ce8a:	d110      	bne.n	800ceae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce8c:	e002      	b.n	800ce94 <create_name+0x48>
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	3301      	adds	r3, #1
 800ce92:	61bb      	str	r3, [r7, #24]
 800ce94:	693a      	ldr	r2, [r7, #16]
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	4413      	add	r3, r2
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce9e:	d0f6      	beq.n	800ce8e <create_name+0x42>
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	4413      	add	r3, r2
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b5c      	cmp	r3, #92	; 0x5c
 800ceaa:	d0f0      	beq.n	800ce8e <create_name+0x42>
			break;
 800ceac:	e054      	b.n	800cf58 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2bfe      	cmp	r3, #254	; 0xfe
 800ceb2:	d901      	bls.n	800ceb8 <create_name+0x6c>
 800ceb4:	2306      	movs	r3, #6
 800ceb6:	e1bf      	b.n	800d238 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ceb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800cebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b80      	cmp	r3, #128	; 0x80
 800cec4:	d925      	bls.n	800cf12 <create_name+0xc6>
 800cec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2bff      	cmp	r3, #255	; 0xff
 800cecc:	d021      	beq.n	800cf12 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	61ba      	str	r2, [r7, #24]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	4413      	add	r3, r2
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800cede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee0:	021b      	lsls	r3, r3, #8
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4413      	add	r3, r2
 800ceec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800ceee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef2:	2b3f      	cmp	r3, #63	; 0x3f
 800cef4:	d903      	bls.n	800cefe <create_name+0xb2>
 800cef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cefa:	2b7e      	cmp	r3, #126	; 0x7e
 800cefc:	d909      	bls.n	800cf12 <create_name+0xc6>
 800cefe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	da03      	bge.n	800cf0e <create_name+0xc2>
 800cf06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf0a:	2bff      	cmp	r3, #255	; 0xff
 800cf0c:	d101      	bne.n	800cf12 <create_name+0xc6>
 800cf0e:	2306      	movs	r3, #6
 800cf10:	e192      	b.n	800d238 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cf12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf14:	2101      	movs	r1, #1
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 fede 	bl	800dcd8 <ff_convert>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cf20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <create_name+0xde>
 800cf26:	2306      	movs	r3, #6
 800cf28:	e186      	b.n	800d238 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf2e:	d809      	bhi.n	800cf44 <create_name+0xf8>
 800cf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf32:	4619      	mov	r1, r3
 800cf34:	489a      	ldr	r0, [pc, #616]	; (800d1a0 <create_name+0x354>)
 800cf36:	f7fe ff24 	bl	800bd82 <chk_chr>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <create_name+0xf8>
 800cf40:	2306      	movs	r3, #6
 800cf42:	e179      	b.n	800d238 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	1c5a      	adds	r2, r3, #1
 800cf48:	617a      	str	r2, [r7, #20]
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cf54:	e78a      	b.n	800ce6c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cf56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cf58:	693a      	ldr	r2, [r7, #16]
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	441a      	add	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cf62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf64:	2b1f      	cmp	r3, #31
 800cf66:	d801      	bhi.n	800cf6c <create_name+0x120>
 800cf68:	2304      	movs	r3, #4
 800cf6a:	e000      	b.n	800cf6e <create_name+0x122>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cf72:	e011      	b.n	800cf98 <create_name+0x14c>
		w = lfn[di - 1];
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4413      	add	r3, r2
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cf86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf88:	2b20      	cmp	r3, #32
 800cf8a:	d002      	beq.n	800cf92 <create_name+0x146>
 800cf8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf8e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf90:	d106      	bne.n	800cfa0 <create_name+0x154>
		di--;
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1ea      	bne.n	800cf74 <create_name+0x128>
 800cf9e:	e000      	b.n	800cfa2 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800cfa0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	2200      	movs	r2, #0
 800cfac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <create_name+0x16c>
 800cfb4:	2306      	movs	r3, #6
 800cfb6:	e13f      	b.n	800d238 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3324      	adds	r3, #36	; 0x24
 800cfbc:	220b      	movs	r2, #11
 800cfbe:	2120      	movs	r1, #32
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fe9d 	bl	800bd00 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	e002      	b.n	800cfd2 <create_name+0x186>
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	61bb      	str	r3, [r7, #24]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	2b20      	cmp	r3, #32
 800cfde:	d0f5      	beq.n	800cfcc <create_name+0x180>
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	2b2e      	cmp	r3, #46	; 0x2e
 800cfec:	d0ee      	beq.n	800cfcc <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d009      	beq.n	800d008 <create_name+0x1bc>
 800cff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cff8:	f043 0303 	orr.w	r3, r3, #3
 800cffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d000:	e002      	b.n	800d008 <create_name+0x1bc>
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	3b01      	subs	r3, #1
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <create_name+0x1d6>
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d014:	3b01      	subs	r3, #1
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4413      	add	r3, r2
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	2b2e      	cmp	r3, #46	; 0x2e
 800d020:	d1ef      	bne.n	800d002 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d028:	2300      	movs	r3, #0
 800d02a:	623b      	str	r3, [r7, #32]
 800d02c:	2308      	movs	r3, #8
 800d02e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	61ba      	str	r2, [r7, #24]
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4413      	add	r3, r2
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 80aa 	beq.w	800d19c <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d04a:	2b20      	cmp	r3, #32
 800d04c:	d006      	beq.n	800d05c <create_name+0x210>
 800d04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d050:	2b2e      	cmp	r3, #46	; 0x2e
 800d052:	d10a      	bne.n	800d06a <create_name+0x21e>
 800d054:	69ba      	ldr	r2, [r7, #24]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d006      	beq.n	800d06a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d05c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d060:	f043 0303 	orr.w	r3, r3, #3
 800d064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d068:	e097      	b.n	800d19a <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d06a:	6a3a      	ldr	r2, [r7, #32]
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d203      	bcs.n	800d07a <create_name+0x22e>
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	429a      	cmp	r2, r3
 800d078:	d123      	bne.n	800d0c2 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	2b0b      	cmp	r3, #11
 800d07e:	d106      	bne.n	800d08e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d084:	f043 0303 	orr.w	r3, r3, #3
 800d088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d08c:	e08d      	b.n	800d1aa <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d08e:	69ba      	ldr	r2, [r7, #24]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	429a      	cmp	r2, r3
 800d094:	d005      	beq.n	800d0a2 <create_name+0x256>
 800d096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d09a:	f043 0303 	orr.w	r3, r3, #3
 800d09e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d0a2:	69ba      	ldr	r2, [r7, #24]
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d87e      	bhi.n	800d1a8 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	2308      	movs	r3, #8
 800d0b0:	623b      	str	r3, [r7, #32]
 800d0b2:	230b      	movs	r3, #11
 800d0b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0c0:	e06b      	b.n	800d19a <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c6:	d910      	bls.n	800d0ea <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800d0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 fe64 	bl	800dd98 <ff_wtoupper>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 fdff 	bl	800dcd8 <ff_convert>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d0de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0e2:	f043 0302 	orr.w	r3, r3, #2
 800d0e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800d0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ec:	2bff      	cmp	r3, #255	; 0xff
 800d0ee:	d91a      	bls.n	800d126 <create_name+0x2da>
			if (i >= ni - 1) {
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	6a3a      	ldr	r2, [r7, #32]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d308      	bcc.n	800d10c <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800d0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0fe:	f043 0303 	orr.w	r3, r3, #3
 800d102:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	623b      	str	r3, [r7, #32]
 800d10a:	e046      	b.n	800d19a <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800d10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	b299      	uxth	r1, r3
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	623a      	str	r2, [r7, #32]
 800d118:	b2c9      	uxtb	r1, r1
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	460a      	mov	r2, r1
 800d120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d124:	e02f      	b.n	800d186 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d007      	beq.n	800d13c <create_name+0x2f0>
 800d12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d12e:	4619      	mov	r1, r3
 800d130:	481c      	ldr	r0, [pc, #112]	; (800d1a4 <create_name+0x358>)
 800d132:	f7fe fe26 	bl	800bd82 <chk_chr>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d008      	beq.n	800d14e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d13c:	235f      	movs	r3, #95	; 0x5f
 800d13e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d144:	f043 0303 	orr.w	r3, r3, #3
 800d148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d14c:	e01b      	b.n	800d186 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d150:	2b40      	cmp	r3, #64	; 0x40
 800d152:	d909      	bls.n	800d168 <create_name+0x31c>
 800d154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d156:	2b5a      	cmp	r3, #90	; 0x5a
 800d158:	d806      	bhi.n	800d168 <create_name+0x31c>
					b |= 2;
 800d15a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d15e:	f043 0302 	orr.w	r3, r3, #2
 800d162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d166:	e00e      	b.n	800d186 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d16a:	2b60      	cmp	r3, #96	; 0x60
 800d16c:	d90b      	bls.n	800d186 <create_name+0x33a>
 800d16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d170:	2b7a      	cmp	r3, #122	; 0x7a
 800d172:	d808      	bhi.n	800d186 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800d174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d178:	f043 0301 	orr.w	r3, r3, #1
 800d17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d182:	3b20      	subs	r3, #32
 800d184:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	1c5a      	adds	r2, r3, #1
 800d18a:	623a      	str	r2, [r7, #32]
 800d18c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d18e:	b2d1      	uxtb	r1, r2
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4413      	add	r3, r2
 800d194:	460a      	mov	r2, r1
 800d196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d19a:	e749      	b.n	800d030 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800d19c:	bf00      	nop
 800d19e:	e004      	b.n	800d1aa <create_name+0x35e>
 800d1a0:	08026038 	.word	0x08026038
 800d1a4:	08026044 	.word	0x08026044
			if (si > di) break;			/* No extension */
 800d1a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d1b0:	2be5      	cmp	r3, #229	; 0xe5
 800d1b2:	d103      	bne.n	800d1bc <create_name+0x370>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2205      	movs	r2, #5
 800d1b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b08      	cmp	r3, #8
 800d1c0:	d104      	bne.n	800d1cc <create_name+0x380>
 800d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d0:	f003 030c 	and.w	r3, r3, #12
 800d1d4:	2b0c      	cmp	r3, #12
 800d1d6:	d005      	beq.n	800d1e4 <create_name+0x398>
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1dc:	f003 0303 	and.w	r3, r3, #3
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d105      	bne.n	800d1f0 <create_name+0x3a4>
 800d1e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1e8:	f043 0302 	orr.w	r3, r3, #2
 800d1ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1f4:	f003 0302 	and.w	r3, r3, #2
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d117      	bne.n	800d22c <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d200:	f003 0303 	and.w	r3, r3, #3
 800d204:	2b01      	cmp	r3, #1
 800d206:	d105      	bne.n	800d214 <create_name+0x3c8>
 800d208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d20c:	f043 0310 	orr.w	r3, r3, #16
 800d210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d218:	f003 030c 	and.w	r3, r3, #12
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	d105      	bne.n	800d22c <create_name+0x3e0>
 800d220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d224:	f043 0308 	orr.w	r3, r3, #8
 800d228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d236:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3728      	adds	r7, #40	; 0x28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d254:	e002      	b.n	800d25c <follow_path+0x1c>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	603b      	str	r3, [r7, #0]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2b2f      	cmp	r3, #47	; 0x2f
 800d262:	d0f8      	beq.n	800d256 <follow_path+0x16>
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b5c      	cmp	r3, #92	; 0x5c
 800d26a:	d0f4      	beq.n	800d256 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2200      	movs	r2, #0
 800d270:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b1f      	cmp	r3, #31
 800d278:	d80a      	bhi.n	800d290 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2280      	movs	r2, #128	; 0x80
 800d27e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d282:	2100      	movs	r1, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff f939 	bl	800c4fc <dir_sdi>
 800d28a:	4603      	mov	r3, r0
 800d28c:	75fb      	strb	r3, [r7, #23]
 800d28e:	e043      	b.n	800d318 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d290:	463b      	mov	r3, r7
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff fdd9 	bl	800ce4c <create_name>
 800d29a:	4603      	mov	r3, r0
 800d29c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d29e:	7dfb      	ldrb	r3, [r7, #23]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d134      	bne.n	800d30e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff fc25 	bl	800caf4 <dir_find>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d2bc:	7dfb      	ldrb	r3, [r7, #23]
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d127      	bne.n	800d312 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	f003 0304 	and.w	r3, r3, #4
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d122      	bne.n	800d312 <follow_path+0xd2>
 800d2cc:	2305      	movs	r3, #5
 800d2ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d2d0:	e01f      	b.n	800d312 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2d2:	7afb      	ldrb	r3, [r7, #11]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d11c      	bne.n	800d316 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	799b      	ldrb	r3, [r3, #6]
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d2e8:	2305      	movs	r3, #5
 800d2ea:	75fb      	strb	r3, [r7, #23]
 800d2ec:	e014      	b.n	800d318 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fc:	4413      	add	r3, r2
 800d2fe:	4619      	mov	r1, r3
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f7ff fa3b 	bl	800c77c <ld_clust>
 800d306:	4602      	mov	r2, r0
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d30c:	e7c0      	b.n	800d290 <follow_path+0x50>
			if (res != FR_OK) break;
 800d30e:	bf00      	nop
 800d310:	e002      	b.n	800d318 <follow_path+0xd8>
				break;
 800d312:	bf00      	nop
 800d314:	e000      	b.n	800d318 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d316:	bf00      	nop
			}
		}
	}

	return res;
 800d318:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d322:	b480      	push	{r7}
 800d324:	b087      	sub	sp, #28
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d32a:	f04f 33ff 	mov.w	r3, #4294967295
 800d32e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d031      	beq.n	800d39c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	617b      	str	r3, [r7, #20]
 800d33e:	e002      	b.n	800d346 <get_ldnumber+0x24>
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	3301      	adds	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b1f      	cmp	r3, #31
 800d34c:	d903      	bls.n	800d356 <get_ldnumber+0x34>
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2b3a      	cmp	r3, #58	; 0x3a
 800d354:	d1f4      	bne.n	800d340 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b3a      	cmp	r3, #58	; 0x3a
 800d35c:	d11c      	bne.n	800d398 <get_ldnumber+0x76>
			tp = *path;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	60fa      	str	r2, [r7, #12]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	3b30      	subs	r3, #48	; 0x30
 800d36e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b09      	cmp	r3, #9
 800d374:	d80e      	bhi.n	800d394 <get_ldnumber+0x72>
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d10a      	bne.n	800d394 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d107      	bne.n	800d394 <get_ldnumber+0x72>
					vol = (int)i;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	3301      	adds	r3, #1
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	e002      	b.n	800d39e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d398:	2300      	movs	r3, #0
 800d39a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d39c:	693b      	ldr	r3, [r7, #16]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	371c      	adds	r7, #28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
	...

0800d3ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	70da      	strb	r2, [r3, #3]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d3c4:	6839      	ldr	r1, [r7, #0]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7fe fe28 	bl	800c01c <move_window>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <check_fs+0x2a>
 800d3d2:	2304      	movs	r3, #4
 800d3d4:	e038      	b.n	800d448 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3334      	adds	r3, #52	; 0x34
 800d3da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fc0c 	bl	800bbfc <ld_word>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d001      	beq.n	800d3f4 <check_fs+0x48>
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	e029      	b.n	800d448 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3fa:	2be9      	cmp	r3, #233	; 0xe9
 800d3fc:	d009      	beq.n	800d412 <check_fs+0x66>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d404:	2beb      	cmp	r3, #235	; 0xeb
 800d406:	d11e      	bne.n	800d446 <check_fs+0x9a>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d40e:	2b90      	cmp	r3, #144	; 0x90
 800d410:	d119      	bne.n	800d446 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3334      	adds	r3, #52	; 0x34
 800d416:	3336      	adds	r3, #54	; 0x36
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fc07 	bl	800bc2c <ld_dword>
 800d41e:	4603      	mov	r3, r0
 800d420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d424:	4a0a      	ldr	r2, [pc, #40]	; (800d450 <check_fs+0xa4>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d101      	bne.n	800d42e <check_fs+0x82>
 800d42a:	2300      	movs	r3, #0
 800d42c:	e00c      	b.n	800d448 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3334      	adds	r3, #52	; 0x34
 800d432:	3352      	adds	r3, #82	; 0x52
 800d434:	4618      	mov	r0, r3
 800d436:	f7fe fbf9 	bl	800bc2c <ld_dword>
 800d43a:	4602      	mov	r2, r0
 800d43c:	4b05      	ldr	r3, [pc, #20]	; (800d454 <check_fs+0xa8>)
 800d43e:	429a      	cmp	r2, r3
 800d440:	d101      	bne.n	800d446 <check_fs+0x9a>
 800d442:	2300      	movs	r3, #0
 800d444:	e000      	b.n	800d448 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d446:	2302      	movs	r3, #2
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	00544146 	.word	0x00544146
 800d454:	33544146 	.word	0x33544146

0800d458 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b096      	sub	sp, #88	; 0x58
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	4613      	mov	r3, r2
 800d464:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2200      	movs	r2, #0
 800d46a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f7ff ff58 	bl	800d322 <get_ldnumber>
 800d472:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d476:	2b00      	cmp	r3, #0
 800d478:	da01      	bge.n	800d47e <find_volume+0x26>
 800d47a:	230b      	movs	r3, #11
 800d47c:	e22e      	b.n	800d8dc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d47e:	4aa8      	ldr	r2, [pc, #672]	; (800d720 <find_volume+0x2c8>)
 800d480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d486:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <find_volume+0x3a>
 800d48e:	230c      	movs	r3, #12
 800d490:	e224      	b.n	800d8dc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d496:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d498:	79fb      	ldrb	r3, [r7, #7]
 800d49a:	f023 0301 	bic.w	r3, r3, #1
 800d49e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d01a      	beq.n	800d4de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	785b      	ldrb	r3, [r3, #1]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fb25 	bl	800bafc <disk_status>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d4b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10c      	bne.n	800d4de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <find_volume+0x82>
 800d4ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4ce:	f003 0304 	and.w	r3, r3, #4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d4d6:	230a      	movs	r3, #10
 800d4d8:	e200      	b.n	800d8dc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e1fe      	b.n	800d8dc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ee:	785b      	ldrb	r3, [r3, #1]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fe fb1d 	bl	800bb30 <disk_initialize>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d4fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d508:	2303      	movs	r3, #3
 800d50a:	e1e7      	b.n	800d8dc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d007      	beq.n	800d522 <find_volume+0xca>
 800d512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d001      	beq.n	800d522 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d51e:	230a      	movs	r3, #10
 800d520:	e1dc      	b.n	800d8dc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d52a:	f7ff ff3f 	bl	800d3ac <check_fs>
 800d52e:	4603      	mov	r3, r0
 800d530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d14b      	bne.n	800d5d4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d53c:	2300      	movs	r3, #0
 800d53e:	643b      	str	r3, [r7, #64]	; 0x40
 800d540:	e01f      	b.n	800d582 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d550:	4413      	add	r3, r2
 800d552:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d556:	3304      	adds	r3, #4
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d006      	beq.n	800d56c <find_volume+0x114>
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	3308      	adds	r3, #8
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe fb62 	bl	800bc2c <ld_dword>
 800d568:	4602      	mov	r2, r0
 800d56a:	e000      	b.n	800d56e <find_volume+0x116>
 800d56c:	2200      	movs	r2, #0
 800d56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d576:	440b      	add	r3, r1
 800d578:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57e:	3301      	adds	r3, #1
 800d580:	643b      	str	r3, [r7, #64]	; 0x40
 800d582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d584:	2b03      	cmp	r3, #3
 800d586:	d9dc      	bls.n	800d542 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d588:	2300      	movs	r3, #0
 800d58a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d002      	beq.n	800d598 <find_volume+0x140>
 800d592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d594:	3b01      	subs	r3, #1
 800d596:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d5a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <find_volume+0x162>
 800d5ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5b2:	f7ff fefb 	bl	800d3ac <check_fs>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	e000      	b.n	800d5bc <find_volume+0x164>
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d5c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d905      	bls.n	800d5d4 <find_volume+0x17c>
 800d5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	643b      	str	r3, [r7, #64]	; 0x40
 800d5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d9e1      	bls.n	800d598 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d101      	bne.n	800d5e0 <find_volume+0x188>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e17d      	b.n	800d8dc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d901      	bls.n	800d5ec <find_volume+0x194>
 800d5e8:	230d      	movs	r3, #13
 800d5ea:	e177      	b.n	800d8dc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	3334      	adds	r3, #52	; 0x34
 800d5f0:	330b      	adds	r3, #11
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fe fb02 	bl	800bbfc <ld_word>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5fe:	d001      	beq.n	800d604 <find_volume+0x1ac>
 800d600:	230d      	movs	r3, #13
 800d602:	e16b      	b.n	800d8dc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	3334      	adds	r3, #52	; 0x34
 800d608:	3316      	adds	r3, #22
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe faf6 	bl	800bbfc <ld_word>
 800d610:	4603      	mov	r3, r0
 800d612:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <find_volume+0x1d0>
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	3334      	adds	r3, #52	; 0x34
 800d61e:	3324      	adds	r3, #36	; 0x24
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fb03 	bl	800bc2c <ld_dword>
 800d626:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d62c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	789b      	ldrb	r3, [r3, #2]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d005      	beq.n	800d64c <find_volume+0x1f4>
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	789b      	ldrb	r3, [r3, #2]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d001      	beq.n	800d64c <find_volume+0x1f4>
 800d648:	230d      	movs	r3, #13
 800d64a:	e147      	b.n	800d8dc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	461a      	mov	r2, r3
 800d652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d654:	fb02 f303 	mul.w	r3, r2, r3
 800d658:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d660:	b29a      	uxth	r2, r3
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	895b      	ldrh	r3, [r3, #10]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d008      	beq.n	800d680 <find_volume+0x228>
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	895b      	ldrh	r3, [r3, #10]
 800d672:	461a      	mov	r2, r3
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	895b      	ldrh	r3, [r3, #10]
 800d678:	3b01      	subs	r3, #1
 800d67a:	4013      	ands	r3, r2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <find_volume+0x22c>
 800d680:	230d      	movs	r3, #13
 800d682:	e12b      	b.n	800d8dc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d686:	3334      	adds	r3, #52	; 0x34
 800d688:	3311      	adds	r3, #17
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fe fab6 	bl	800bbfc <ld_word>
 800d690:	4603      	mov	r3, r0
 800d692:	461a      	mov	r2, r3
 800d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d696:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	891b      	ldrh	r3, [r3, #8]
 800d69c:	f003 030f 	and.w	r3, r3, #15
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <find_volume+0x252>
 800d6a6:	230d      	movs	r3, #13
 800d6a8:	e118      	b.n	800d8dc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	3334      	adds	r3, #52	; 0x34
 800d6ae:	3313      	adds	r3, #19
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe faa3 	bl	800bbfc <ld_word>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <find_volume+0x276>
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	3334      	adds	r3, #52	; 0x34
 800d6c4:	3320      	adds	r3, #32
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fab0 	bl	800bc2c <ld_dword>
 800d6cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d0:	3334      	adds	r3, #52	; 0x34
 800d6d2:	330e      	adds	r3, #14
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe fa91 	bl	800bbfc <ld_word>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d6de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <find_volume+0x290>
 800d6e4:	230d      	movs	r3, #13
 800d6e6:	e0f9      	b.n	800d8dc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d6e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ec:	4413      	add	r3, r2
 800d6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6f0:	8912      	ldrh	r2, [r2, #8]
 800d6f2:	0912      	lsrs	r2, r2, #4
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d6fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d201      	bcs.n	800d706 <find_volume+0x2ae>
 800d702:	230d      	movs	r3, #13
 800d704:	e0ea      	b.n	800d8dc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d70e:	8952      	ldrh	r2, [r2, #10]
 800d710:	fbb3 f3f2 	udiv	r3, r3, r2
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d103      	bne.n	800d724 <find_volume+0x2cc>
 800d71c:	230d      	movs	r3, #13
 800d71e:	e0dd      	b.n	800d8dc <find_volume+0x484>
 800d720:	20000140 	.word	0x20000140
		fmt = FS_FAT32;
 800d724:	2303      	movs	r3, #3
 800d726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d730:	4293      	cmp	r3, r2
 800d732:	d802      	bhi.n	800d73a <find_volume+0x2e2>
 800d734:	2302      	movs	r3, #2
 800d736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d740:	4293      	cmp	r3, r2
 800d742:	d802      	bhi.n	800d74a <find_volume+0x2f2>
 800d744:	2301      	movs	r3, #1
 800d746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	1c9a      	adds	r2, r3, #2
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d756:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d758:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d75c:	441a      	add	r2, r3
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d762:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d766:	441a      	add	r2, r3
 800d768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d76c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d770:	2b03      	cmp	r3, #3
 800d772:	d11e      	bne.n	800d7b2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	3334      	adds	r3, #52	; 0x34
 800d778:	332a      	adds	r3, #42	; 0x2a
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fa3e 	bl	800bbfc <ld_word>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <find_volume+0x332>
 800d786:	230d      	movs	r3, #13
 800d788:	e0a8      	b.n	800d8dc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78c:	891b      	ldrh	r3, [r3, #8]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <find_volume+0x33e>
 800d792:	230d      	movs	r3, #13
 800d794:	e0a2      	b.n	800d8dc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	3334      	adds	r3, #52	; 0x34
 800d79a:	332c      	adds	r3, #44	; 0x2c
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe fa45 	bl	800bc2c <ld_dword>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d7b0:	e01f      	b.n	800d7f2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <find_volume+0x366>
 800d7ba:	230d      	movs	r3, #13
 800d7bc:	e08e      	b.n	800d8dc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c4:	441a      	add	r2, r3
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d103      	bne.n	800d7da <find_volume+0x382>
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	005b      	lsls	r3, r3, #1
 800d7d8:	e00a      	b.n	800d7f0 <find_volume+0x398>
 800d7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	085a      	lsrs	r2, r3, #1
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d7f0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f4:	69da      	ldr	r2, [r3, #28]
 800d7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d7fc:	0a5b      	lsrs	r3, r3, #9
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d201      	bcs.n	800d806 <find_volume+0x3ae>
 800d802:	230d      	movs	r3, #13
 800d804:	e06a      	b.n	800d8dc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	f04f 32ff 	mov.w	r2, #4294967295
 800d80c:	615a      	str	r2, [r3, #20]
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	695a      	ldr	r2, [r3, #20]
 800d812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d814:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	2280      	movs	r2, #128	; 0x80
 800d81a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d81c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d820:	2b03      	cmp	r3, #3
 800d822:	d149      	bne.n	800d8b8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	3334      	adds	r3, #52	; 0x34
 800d828:	3330      	adds	r3, #48	; 0x30
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe f9e6 	bl	800bbfc <ld_word>
 800d830:	4603      	mov	r3, r0
 800d832:	2b01      	cmp	r3, #1
 800d834:	d140      	bne.n	800d8b8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d838:	3301      	adds	r3, #1
 800d83a:	4619      	mov	r1, r3
 800d83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d83e:	f7fe fbed 	bl	800c01c <move_window>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d137      	bne.n	800d8b8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	2200      	movs	r2, #0
 800d84c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	3334      	adds	r3, #52	; 0x34
 800d852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe f9d0 	bl	800bbfc <ld_word>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d864:	429a      	cmp	r2, r3
 800d866:	d127      	bne.n	800d8b8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	3334      	adds	r3, #52	; 0x34
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe f9dd 	bl	800bc2c <ld_dword>
 800d872:	4602      	mov	r2, r0
 800d874:	4b1b      	ldr	r3, [pc, #108]	; (800d8e4 <find_volume+0x48c>)
 800d876:	429a      	cmp	r2, r3
 800d878:	d11e      	bne.n	800d8b8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87c:	3334      	adds	r3, #52	; 0x34
 800d87e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe f9d2 	bl	800bc2c <ld_dword>
 800d888:	4602      	mov	r2, r0
 800d88a:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <find_volume+0x490>)
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d113      	bne.n	800d8b8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	3334      	adds	r3, #52	; 0x34
 800d894:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe f9c7 	bl	800bc2c <ld_dword>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a6:	3334      	adds	r3, #52	; 0x34
 800d8a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe f9bd 	bl	800bc2c <ld_dword>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d8be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <find_volume+0x494>)
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	4b08      	ldr	r3, [pc, #32]	; (800d8ec <find_volume+0x494>)
 800d8ca:	801a      	strh	r2, [r3, #0]
 800d8cc:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <find_volume+0x494>)
 800d8ce:	881a      	ldrh	r2, [r3, #0]
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d8d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8d6:	f7fe fb39 	bl	800bf4c <clear_lock>
#endif
	return FR_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3758      	adds	r7, #88	; 0x58
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	41615252 	.word	0x41615252
 800d8e8:	61417272 	.word	0x61417272
 800d8ec:	20000144 	.word	0x20000144

0800d8f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d8fa:	2309      	movs	r3, #9
 800d8fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d01c      	beq.n	800d93e <validate+0x4e>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d018      	beq.n	800d93e <validate+0x4e>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d013      	beq.n	800d93e <validate+0x4e>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	889a      	ldrh	r2, [r3, #4]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	88db      	ldrh	r3, [r3, #6]
 800d920:	429a      	cmp	r2, r3
 800d922:	d10c      	bne.n	800d93e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	785b      	ldrb	r3, [r3, #1]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe f8e6 	bl	800bafc <disk_status>
 800d930:	4603      	mov	r3, r0
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <validate+0x4e>
			res = FR_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d102      	bne.n	800d94a <validate+0x5a>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	e000      	b.n	800d94c <validate+0x5c>
 800d94a:	2300      	movs	r3, #0
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	6013      	str	r3, [r2, #0]
	return res;
 800d950:	7bfb      	ldrb	r3, [r7, #15]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
	...

0800d95c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	4613      	mov	r3, r2
 800d968:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d96e:	f107 0310 	add.w	r3, r7, #16
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fcd5 	bl	800d322 <get_ldnumber>
 800d978:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	da01      	bge.n	800d984 <f_mount+0x28>
 800d980:	230b      	movs	r3, #11
 800d982:	e02b      	b.n	800d9dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d984:	4a17      	ldr	r2, [pc, #92]	; (800d9e4 <f_mount+0x88>)
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d98c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d005      	beq.n	800d9a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d994:	69b8      	ldr	r0, [r7, #24]
 800d996:	f7fe fad9 	bl	800bf4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	490d      	ldr	r1, [pc, #52]	; (800d9e4 <f_mount+0x88>)
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <f_mount+0x66>
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d001      	beq.n	800d9c6 <f_mount+0x6a>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e00a      	b.n	800d9dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d9c6:	f107 010c 	add.w	r1, r7, #12
 800d9ca:	f107 0308 	add.w	r3, r7, #8
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fd41 	bl	800d458 <find_volume>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3720      	adds	r7, #32
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20000140 	.word	0x20000140

0800d9e8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	1d3b      	adds	r3, r7, #4
 800d9f2:	6018      	str	r0, [r3, #0]
 800d9f4:	463b      	mov	r3, r7
 800d9f6:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d9f8:	1d3b      	adds	r3, r7, #4
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <f_opendir+0x1c>
 800da00:	2309      	movs	r3, #9
 800da02:	e08a      	b.n	800db1a <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 800da04:	1d3b      	adds	r3, r7, #4
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800da0c:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800da10:	463b      	mov	r3, r7
 800da12:	2200      	movs	r2, #0
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff fd1f 	bl	800d458 <find_volume>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800da20:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800da24:	2b00      	cmp	r3, #0
 800da26:	d16e      	bne.n	800db06 <f_opendir+0x11e>
		obj->fs = fs;
 800da28:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800da2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800da30:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800da32:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800da36:	f107 020c 	add.w	r2, r7, #12
 800da3a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800da3c:	463b      	mov	r3, r7
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	1d3b      	adds	r3, r7, #4
 800da42:	4611      	mov	r1, r2
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	f7ff fbfb 	bl	800d240 <follow_path>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800da50:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800da54:	2b00      	cmp	r3, #0
 800da56:	d14f      	bne.n	800daf8 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800da58:	1d3b      	adds	r3, r7, #4
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da60:	b25b      	sxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	db17      	blt.n	800da96 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800da66:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800da6a:	799b      	ldrb	r3, [r3, #6]
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00d      	beq.n	800da90 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800da74:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800da78:	1d3b      	adds	r3, r7, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	4619      	mov	r1, r3
 800da80:	4610      	mov	r0, r2
 800da82:	f7fe fe7b 	bl	800c77c <ld_clust>
 800da86:	4602      	mov	r2, r0
 800da88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800da8c:	609a      	str	r2, [r3, #8]
 800da8e:	e002      	b.n	800da96 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800da90:	2305      	movs	r3, #5
 800da92:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800da96:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d12c      	bne.n	800daf8 <f_opendir+0x110>
				obj->id = fs->id;
 800da9e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800daa2:	88da      	ldrh	r2, [r3, #6]
 800daa4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800daa8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800daaa:	1d3b      	adds	r3, r7, #4
 800daac:	2100      	movs	r1, #0
 800daae:	6818      	ldr	r0, [r3, #0]
 800dab0:	f7fe fd24 	bl	800c4fc <dir_sdi>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800daba:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d11a      	bne.n	800daf8 <f_opendir+0x110>
					if (obj->sclust) {
 800dac2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d011      	beq.n	800daf0 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800dacc:	1d3b      	adds	r3, r7, #4
 800dace:	2100      	movs	r1, #0
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	f7fe f971 	bl	800bdb8 <inc_lock>
 800dad6:	4602      	mov	r2, r0
 800dad8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800dadc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800dade:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d107      	bne.n	800daf8 <f_opendir+0x110>
 800dae8:	2312      	movs	r3, #18
 800daea:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800daee:	e003      	b.n	800daf8 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800daf0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800daf4:	2200      	movs	r2, #0
 800daf6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800daf8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dafc:	2b04      	cmp	r3, #4
 800dafe:	d102      	bne.n	800db06 <f_opendir+0x11e>
 800db00:	2305      	movs	r3, #5
 800db02:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800db06:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d003      	beq.n	800db16 <f_opendir+0x12e>
 800db0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db16:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f107 0208 	add.w	r2, r7, #8
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fedb 	bl	800d8f0 <validate>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d110      	bne.n	800db66 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d006      	beq.n	800db5a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe f9bf 	bl	800bed4 <dec_lock>
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800db76:	af00      	add	r7, sp, #0
 800db78:	1d3b      	adds	r3, r7, #4
 800db7a:	6018      	str	r0, [r3, #0]
 800db7c:	463b      	mov	r3, r7
 800db7e:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800db80:	1d3b      	adds	r3, r7, #4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800db88:	4611      	mov	r1, r2
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff feb0 	bl	800d8f0 <validate>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800db96:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d139      	bne.n	800dc12 <f_readdir+0xa2>
		if (!fno) {
 800db9e:	463b      	mov	r3, r7
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d108      	bne.n	800dbb8 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dba6:	1d3b      	adds	r3, r7, #4
 800dba8:	2100      	movs	r1, #0
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	f7fe fca6 	bl	800c4fc <dir_sdi>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800dbb6:	e02c      	b.n	800dc12 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 800dbb8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800dbbc:	f107 0208 	add.w	r2, r7, #8
 800dbc0:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800dbc2:	1d3b      	adds	r3, r7, #4
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	6818      	ldr	r0, [r3, #0]
 800dbc8:	f7fe feed 	bl	800c9a6 <dir_read>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800dbd2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	d102      	bne.n	800dbe0 <f_readdir+0x70>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800dbe0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d114      	bne.n	800dc12 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800dbe8:	463a      	mov	r2, r7
 800dbea:	1d3b      	adds	r3, r7, #4
 800dbec:	6811      	ldr	r1, [r2, #0]
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	f7ff f840 	bl	800cc74 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dbf4:	1d3b      	adds	r3, r7, #4
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	6818      	ldr	r0, [r3, #0]
 800dbfa:	f7fe fcfa 	bl	800c5f2 <dir_next>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800dc04:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dc08:	2b04      	cmp	r3, #4
 800dc0a:	d102      	bne.n	800dc12 <f_readdir+0xa2>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800dc12:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc36:	4b1f      	ldr	r3, [pc, #124]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc38:	7a5b      	ldrb	r3, [r3, #9]
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d131      	bne.n	800dca4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc40:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc42:	7a5b      	ldrb	r3, [r3, #9]
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	461a      	mov	r2, r3
 800dc48:	4b1a      	ldr	r3, [pc, #104]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc4e:	4b19      	ldr	r3, [pc, #100]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc50:	7a5b      	ldrb	r3, [r3, #9]
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	4a17      	ldr	r2, [pc, #92]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc5e:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc60:	7a5b      	ldrb	r3, [r3, #9]
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	461a      	mov	r2, r3
 800dc66:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc68:	4413      	add	r3, r2
 800dc6a:	79fa      	ldrb	r2, [r7, #7]
 800dc6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc6e:	4b11      	ldr	r3, [pc, #68]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc70:	7a5b      	ldrb	r3, [r3, #9]
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	1c5a      	adds	r2, r3, #1
 800dc76:	b2d1      	uxtb	r1, r2
 800dc78:	4a0e      	ldr	r2, [pc, #56]	; (800dcb4 <FATFS_LinkDriverEx+0x94>)
 800dc7a:	7251      	strb	r1, [r2, #9]
 800dc7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc7e:	7dbb      	ldrb	r3, [r7, #22]
 800dc80:	3330      	adds	r3, #48	; 0x30
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	223a      	movs	r2, #58	; 0x3a
 800dc8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	3302      	adds	r3, #2
 800dc94:	222f      	movs	r2, #47	; 0x2f
 800dc96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	3303      	adds	r3, #3
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dca0:	2300      	movs	r3, #0
 800dca2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20000168 	.word	0x20000168

0800dcb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff ffaa 	bl	800dc20 <FATFS_LinkDriverEx>
 800dccc:	4603      	mov	r3, r0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b089      	sub	sp, #36	; 0x24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800dce4:	88fb      	ldrh	r3, [r7, #6]
 800dce6:	2b7f      	cmp	r3, #127	; 0x7f
 800dce8:	d802      	bhi.n	800dcf0 <ff_convert+0x18>
		c = chr;
 800dcea:	88fb      	ldrh	r3, [r7, #6]
 800dcec:	837b      	strh	r3, [r7, #26]
 800dcee:	e047      	b.n	800dd80 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <ff_convert+0x2a>
			p = oem2uni;
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <ff_convert+0xb8>)
 800dcf8:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800dcfa:	f245 5320 	movw	r3, #21792	; 0x5520
 800dcfe:	60bb      	str	r3, [r7, #8]
 800dd00:	e004      	b.n	800dd0c <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800dd02:	4b24      	ldr	r3, [pc, #144]	; (800dd94 <ff_convert+0xbc>)
 800dd04:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800dd06:	f245 5320 	movw	r3, #21792	; 0x5520
 800dd0a:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800dd10:	2310      	movs	r3, #16
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	e023      	b.n	800dd5e <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	0fda      	lsrs	r2, r3, #31
 800dd1e:	4413      	add	r3, r2
 800dd20:	105b      	asrs	r3, r3, #1
 800dd22:	461a      	mov	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	4413      	add	r3, r2
 800dd28:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	461a      	mov	r2, r3
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	4413      	add	r3, r2
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	88fa      	ldrh	r2, [r7, #6]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d014      	beq.n	800dd66 <ff_convert+0x8e>
			if (chr > p[i * 2])
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	461a      	mov	r2, r3
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	4413      	add	r3, r2
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	88fa      	ldrh	r2, [r7, #6]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d902      	bls.n	800dd54 <ff_convert+0x7c>
				li = i;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	e001      	b.n	800dd58 <ff_convert+0x80>
			else
				hi = i;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	613b      	str	r3, [r7, #16]
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1d8      	bne.n	800dd16 <ff_convert+0x3e>
 800dd64:	e000      	b.n	800dd68 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800dd66:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d006      	beq.n	800dd7c <ff_convert+0xa4>
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	3302      	adds	r3, #2
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	4413      	add	r3, r2
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	e000      	b.n	800dd7e <ff_convert+0xa6>
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800dd80:	8b7b      	ldrh	r3, [r7, #26]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3724      	adds	r7, #36	; 0x24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	0803ba50 	.word	0x0803ba50
 800dd94:	080265cc 	.word	0x080265cc

0800dd98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dda8:	d201      	bcs.n	800ddae <ff_wtoupper+0x16>
 800ddaa:	4b3e      	ldr	r3, [pc, #248]	; (800dea4 <ff_wtoupper+0x10c>)
 800ddac:	e000      	b.n	800ddb0 <ff_wtoupper+0x18>
 800ddae:	4b3e      	ldr	r3, [pc, #248]	; (800dea8 <ff_wtoupper+0x110>)
 800ddb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	1c9a      	adds	r2, r3, #2
 800ddb6:	617a      	str	r2, [r7, #20]
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ddbc:	8a7b      	ldrh	r3, [r7, #18]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d068      	beq.n	800de94 <ff_wtoupper+0xfc>
 800ddc2:	88fa      	ldrh	r2, [r7, #6]
 800ddc4:	8a7b      	ldrh	r3, [r7, #18]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d364      	bcc.n	800de94 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	1c9a      	adds	r2, r3, #2
 800ddce:	617a      	str	r2, [r7, #20]
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	823b      	strh	r3, [r7, #16]
 800ddd4:	8a3b      	ldrh	r3, [r7, #16]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	81fb      	strh	r3, [r7, #14]
 800ddda:	8a3b      	ldrh	r3, [r7, #16]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dde0:	88fa      	ldrh	r2, [r7, #6]
 800dde2:	8a79      	ldrh	r1, [r7, #18]
 800dde4:	8a3b      	ldrh	r3, [r7, #16]
 800dde6:	440b      	add	r3, r1
 800dde8:	429a      	cmp	r2, r3
 800ddea:	da49      	bge.n	800de80 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ddec:	89fb      	ldrh	r3, [r7, #14]
 800ddee:	2b08      	cmp	r3, #8
 800ddf0:	d84f      	bhi.n	800de92 <ff_wtoupper+0xfa>
 800ddf2:	a201      	add	r2, pc, #4	; (adr r2, 800ddf8 <ff_wtoupper+0x60>)
 800ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf8:	0800de1d 	.word	0x0800de1d
 800ddfc:	0800de2f 	.word	0x0800de2f
 800de00:	0800de45 	.word	0x0800de45
 800de04:	0800de4d 	.word	0x0800de4d
 800de08:	0800de55 	.word	0x0800de55
 800de0c:	0800de5d 	.word	0x0800de5d
 800de10:	0800de65 	.word	0x0800de65
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de75 	.word	0x0800de75
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de1c:	88fa      	ldrh	r2, [r7, #6]
 800de1e:	8a7b      	ldrh	r3, [r7, #18]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	005b      	lsls	r3, r3, #1
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	4413      	add	r3, r2
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	80fb      	strh	r3, [r7, #6]
 800de2c:	e027      	b.n	800de7e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de2e:	88fa      	ldrh	r2, [r7, #6]
 800de30:	8a7b      	ldrh	r3, [r7, #18]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	b29b      	uxth	r3, r3
 800de36:	f003 0301 	and.w	r3, r3, #1
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	88fa      	ldrh	r2, [r7, #6]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	80fb      	strh	r3, [r7, #6]
 800de42:	e01c      	b.n	800de7e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800de44:	88fb      	ldrh	r3, [r7, #6]
 800de46:	3b10      	subs	r3, #16
 800de48:	80fb      	strh	r3, [r7, #6]
 800de4a:	e018      	b.n	800de7e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800de4c:	88fb      	ldrh	r3, [r7, #6]
 800de4e:	3b20      	subs	r3, #32
 800de50:	80fb      	strh	r3, [r7, #6]
 800de52:	e014      	b.n	800de7e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800de54:	88fb      	ldrh	r3, [r7, #6]
 800de56:	3b30      	subs	r3, #48	; 0x30
 800de58:	80fb      	strh	r3, [r7, #6]
 800de5a:	e010      	b.n	800de7e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800de5c:	88fb      	ldrh	r3, [r7, #6]
 800de5e:	3b1a      	subs	r3, #26
 800de60:	80fb      	strh	r3, [r7, #6]
 800de62:	e00c      	b.n	800de7e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800de64:	88fb      	ldrh	r3, [r7, #6]
 800de66:	3308      	adds	r3, #8
 800de68:	80fb      	strh	r3, [r7, #6]
 800de6a:	e008      	b.n	800de7e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800de6c:	88fb      	ldrh	r3, [r7, #6]
 800de6e:	3b50      	subs	r3, #80	; 0x50
 800de70:	80fb      	strh	r3, [r7, #6]
 800de72:	e004      	b.n	800de7e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800de74:	88fb      	ldrh	r3, [r7, #6]
 800de76:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800de7a:	80fb      	strh	r3, [r7, #6]
 800de7c:	bf00      	nop
			}
			break;
 800de7e:	e008      	b.n	800de92 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800de80:	89fb      	ldrh	r3, [r7, #14]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d195      	bne.n	800ddb2 <ff_wtoupper+0x1a>
 800de86:	8a3b      	ldrh	r3, [r7, #16]
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	4413      	add	r3, r2
 800de8e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800de90:	e78f      	b.n	800ddb2 <ff_wtoupper+0x1a>
			break;
 800de92:	bf00      	nop
	}

	return chr;
 800de94:	88fb      	ldrh	r3, [r7, #6]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	08050ed4 	.word	0x08050ed4
 800dea8:	080510c8 	.word	0x080510c8

0800deac <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800deb0:	f005 fb04 	bl	80134bc <touchgfx_init>
}
 800deb4:	bf00      	nop
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800debc:	f005 fb28 	bl	8013510 <touchgfx_taskEntry>
}
 800dec0:	bf00      	nop
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    {
 800decc:	4a04      	ldr	r2, [pc, #16]	; (800dee0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	601a      	str	r2, [r3, #0]
    }
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	080511a0 	.word	0x080511a0

0800dee4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
    }
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ffe9 	bl	800dec4 <_ZN8touchgfx12FontProviderD1Ev>
 800def2:	2104      	movs	r1, #4
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f016 ff39 	bl	8024d6c <_ZdlPvj>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800df10:	887b      	ldrh	r3, [r7, #2]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d81e      	bhi.n	800df54 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800df16:	a201      	add	r2, pc, #4	; (adr r2, 800df1c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800df18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1c:	0800df2d 	.word	0x0800df2d
 800df20:	0800df37 	.word	0x0800df37
 800df24:	0800df41 	.word	0x0800df41
 800df28:	0800df4b 	.word	0x0800df4b
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800df2c:	f003 fda8 	bl	8011a80 <_ZN17TypedTextDatabase8getFontsEv>
 800df30:	4603      	mov	r3, r0
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	e00f      	b.n	800df56 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800df36:	f003 fda3 	bl	8011a80 <_ZN17TypedTextDatabase8getFontsEv>
 800df3a:	4603      	mov	r3, r0
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	e00a      	b.n	800df56 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800df40:	f003 fd9e 	bl	8011a80 <_ZN17TypedTextDatabase8getFontsEv>
 800df44:	4603      	mov	r3, r0
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	e005      	b.n	800df56 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::TYPOGRAPHY_00:
        // SIMYOU_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800df4a:	f003 fd99 	bl	8011a80 <_ZN17TypedTextDatabase8getFontsEv>
 800df4e:	4603      	mov	r3, r0
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	e000      	b.n	800df56 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800df54:	2300      	movs	r3, #0
    }
}
 800df56:	4618      	mov	r0, r3
 800df58:	3708      	adds	r7, #8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop

0800df60 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // SIMYOU_TTF_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	4a05      	ldr	r2, [pc, #20]	; (800df80 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4618      	mov	r0, r3
 800df72:	f7ff ffa7 	bl	800dec4 <_ZN8touchgfx12FontProviderD1Ev>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	0805118c 	.word	0x0805118c

0800df84 <_ZN23ApplicationFontProviderD0Ev>:
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ffe7 	bl	800df60 <_ZN23ApplicationFontProviderD1Ev>
 800df92:	2104      	movs	r1, #4
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f016 fee9 	bl	8024d6c <_ZdlPvj>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    {
 800dfac:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	601a      	str	r2, [r3, #0]
    }
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	08051acc 	.word	0x08051acc

0800dfc4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
    }
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff ffe9 	bl	800dfa4 <_ZN8touchgfx4FontD1Ev>
 800dfd2:	2110      	movs	r1, #16
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f016 fec9 	bl	8024d6c <_ZdlPvj>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dfe4:	b590      	push	{r4, r7, lr}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800dff0:	887b      	ldrh	r3, [r7, #2]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	e010      	b.n	800e01c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3308      	adds	r3, #8
 800e008:	681c      	ldr	r4, [r3, #0]
 800e00a:	f107 030f 	add.w	r3, r7, #15
 800e00e:	f107 0210 	add.w	r2, r7, #16
 800e012:	8879      	ldrh	r1, [r7, #2]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	47a0      	blx	r4
 800e018:	6178      	str	r0, [r7, #20]
        return glyph;
 800e01a:	697b      	ldr	r3, [r7, #20]
    }
 800e01c:	4618      	mov	r0, r3
 800e01e:	371c      	adds	r7, #28
 800e020:	46bd      	mov	sp, r7
 800e022:	bd90      	pop	{r4, r7, pc}

0800e024 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	895b      	ldrh	r3, [r3, #10]
    }
 800e030:	4618      	mov	r0, r3
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	899b      	ldrh	r3, [r3, #12]
    }
 800e048:	4618      	mov	r0, r3
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	889b      	ldrh	r3, [r3, #4]
    }
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	889a      	ldrh	r2, [r3, #4]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	799b      	ldrb	r3, [r3, #6]
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	4413      	add	r3, r2
 800e080:	b29b      	uxth	r3, r3
    }
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	79db      	ldrb	r3, [r3, #7]
 800e09a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e09e:	b2db      	uxtb	r3, r3
    }
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	79db      	ldrb	r3, [r3, #7]
 800e0b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e0bc:	b2db      	uxtb	r3, r3
    }
 800e0be:	4618      	mov	r0, r3
 800e0c0:	370c      	adds	r7, #12
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
	...

0800e0cc <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	4a05      	ldr	r2, [pc, #20]	; (800e0ec <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff ff61 	bl	800dfa4 <_ZN8touchgfx4FontD1Ev>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	08053880 	.word	0x08053880

0800e0f0 <_ZN8touchgfx9ConstFontD0Ev>:
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff ffe7 	bl	800e0cc <_ZN8touchgfx9ConstFontD1Ev>
 800e0fe:	2118      	movs	r1, #24
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f016 fe33 	bl	8024d6c <_ZdlPvj>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	4a05      	ldr	r2, [pc, #20]	; (800e130 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff ffd3 	bl	800e0cc <_ZN8touchgfx9ConstFontD1Ev>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	080511c4 	.word	0x080511c4

0800e134 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff ffe7 	bl	800e110 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e142:	2124      	movs	r1, #36	; 0x24
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f016 fe11 	bl	8024d6c <_ZdlPvj>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
    {
 800e15c:	4a04      	ldr	r2, [pc, #16]	; (800e170 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
    }
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	4618      	mov	r0, r3
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	080511b4 	.word	0x080511b4

0800e174 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
    }
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ffe9 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>
 800e182:	2108      	movs	r1, #8
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f016 fdf1 	bl	8024d6c <_ZdlPvj>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a1b      	ldr	r3, [r3, #32]
    }
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08c      	sub	sp, #48	; 0x30
 800e1b0:	af08      	add	r7, sp, #32
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	80fb      	strh	r3, [r7, #6]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	88b9      	ldrh	r1, [r7, #4]
 800e1c6:	88fa      	ldrh	r2, [r7, #6]
 800e1c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e1d4:	9304      	str	r3, [sp, #16]
 800e1d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1da:	9303      	str	r3, [sp, #12]
 800e1dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1e0:	9302      	str	r3, [sp, #8]
 800e1e2:	7f3b      	ldrb	r3, [r7, #28]
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	7e3b      	ldrb	r3, [r7, #24]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	68b9      	ldr	r1, [r7, #8]
 800e1ee:	f009 fed1 	bl	8017f94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e1f2:	4a08      	ldr	r2, [pc, #32]	; (800e214 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	601a      	str	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1fc:	619a      	str	r2, [r3, #24]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e202:	61da      	str	r2, [r3, #28]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e208:	621a      	str	r2, [r3, #32]
{
}
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	080511c4 	.word	0x080511c4

0800e218 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	889b      	ldrh	r3, [r3, #4]
 800e22c:	0adb      	lsrs	r3, r3, #11
 800e22e:	b29b      	uxth	r3, r3
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4413      	add	r3, r2
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4413      	add	r3, r2
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e24a:	b480      	push	{r7}
 800e24c:	b089      	sub	sp, #36	; 0x24
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	460b      	mov	r3, r1
 800e254:	607a      	str	r2, [r7, #4]
 800e256:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d003      	beq.n	800e266 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	7b1b      	ldrb	r3, [r3, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e266:	2300      	movs	r3, #0
 800e268:	e030      	b.n	800e2cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	69da      	ldr	r2, [r3, #28]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	7b5b      	ldrb	r3, [r3, #13]
 800e276:	021b      	lsls	r3, r3, #8
 800e278:	b21b      	sxth	r3, r3
 800e27a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e27e:	b219      	sxth	r1, r3
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	7adb      	ldrb	r3, [r3, #11]
 800e284:	b21b      	sxth	r3, r3
 800e286:	430b      	orrs	r3, r1
 800e288:	b21b      	sxth	r3, r3
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7b1b      	ldrb	r3, [r3, #12]
 800e296:	837b      	strh	r3, [r7, #26]
 800e298:	8b7b      	ldrh	r3, [r7, #26]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d015      	beq.n	800e2ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	897a      	ldrh	r2, [r7, #10]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d103      	bne.n	800e2b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e2ae:	e00d      	b.n	800e2cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	897a      	ldrh	r2, [r7, #10]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d306      	bcc.n	800e2c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e2ba:	8b7b      	ldrh	r3, [r7, #26]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	837b      	strh	r3, [r7, #26]
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	e7e7      	b.n	800e298 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e2c8:	bf00      	nop
        }
    }
    return 0;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3724      	adds	r7, #36	; 0x24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_SIMYOU_TTF_14_4bpp();

touchgfx::GeneratedFont& getFont_SIMYOU_TTF_14_4bpp()
{
    static touchgfx::GeneratedFont SIMYOU_TTF_14_4bpp(glyphs_SIMYOU_TTF_14_4bpp, 23, 14, 3, 4, 1, 0, 0, unicodes_SIMYOU_TTF_14_4bpp, kerning_SIMYOU_TTF_14_4bpp, 63, 0, 0);
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	4801      	ldr	r0, [pc, #4]	; (800e2e4 <__tcf_0+0xc>)
 800e2de:	f7ff ff17 	bl	800e110 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000174 	.word	0x20000174

0800e2e8 <_Z26getFont_SIMYOU_TTF_14_4bppv>:
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08a      	sub	sp, #40	; 0x28
 800e2ec:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont SIMYOU_TTF_14_4bpp(glyphs_SIMYOU_TTF_14_4bpp, 23, 14, 3, 4, 1, 0, 0, unicodes_SIMYOU_TTF_14_4bpp, kerning_SIMYOU_TTF_14_4bpp, 63, 0, 0);
 800e2ee:	4b1e      	ldr	r3, [pc, #120]	; (800e368 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	f3bf 8f5b 	dmb	ish
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bf0c      	ite	eq
 800e300:	2301      	moveq	r3, #1
 800e302:	2300      	movne	r3, #0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d02a      	beq.n	800e360 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x78>
 800e30a:	4817      	ldr	r0, [pc, #92]	; (800e368 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e30c:	f016 fd30 	bl	8024d70 <__cxa_guard_acquire>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	bf14      	ite	ne
 800e316:	2301      	movne	r3, #1
 800e318:	2300      	moveq	r3, #0
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01f      	beq.n	800e360 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x78>
 800e320:	2300      	movs	r3, #0
 800e322:	9309      	str	r3, [sp, #36]	; 0x24
 800e324:	2300      	movs	r3, #0
 800e326:	9308      	str	r3, [sp, #32]
 800e328:	233f      	movs	r3, #63	; 0x3f
 800e32a:	9307      	str	r3, [sp, #28]
 800e32c:	4b0f      	ldr	r3, [pc, #60]	; (800e36c <_Z26getFont_SIMYOU_TTF_14_4bppv+0x84>)
 800e32e:	9306      	str	r3, [sp, #24]
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x88>)
 800e332:	9305      	str	r3, [sp, #20]
 800e334:	2300      	movs	r3, #0
 800e336:	9304      	str	r3, [sp, #16]
 800e338:	2300      	movs	r3, #0
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	2301      	movs	r3, #1
 800e33e:	9302      	str	r3, [sp, #8]
 800e340:	2304      	movs	r3, #4
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	2303      	movs	r3, #3
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	230e      	movs	r3, #14
 800e34a:	2217      	movs	r2, #23
 800e34c:	4909      	ldr	r1, [pc, #36]	; (800e374 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x8c>)
 800e34e:	480a      	ldr	r0, [pc, #40]	; (800e378 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x90>)
 800e350:	f7ff ff2c 	bl	800e1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e354:	4804      	ldr	r0, [pc, #16]	; (800e368 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e356:	f016 fd17 	bl	8024d88 <__cxa_guard_release>
 800e35a:	4808      	ldr	r0, [pc, #32]	; (800e37c <_Z26getFont_SIMYOU_TTF_14_4bppv+0x94>)
 800e35c:	f016 fd50 	bl	8024e00 <atexit>
    return SIMYOU_TTF_14_4bpp;
 800e360:	4b05      	ldr	r3, [pc, #20]	; (800e378 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x90>)
}
 800e362:	4618      	mov	r0, r3
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000198 	.word	0x20000198
 800e36c:	08055b7c 	.word	0x08055b7c
 800e370:	08051210 	.word	0x08051210
 800e374:	08055944 	.word	0x08055944
 800e378:	20000174 	.word	0x20000174
 800e37c:	0800e2d9 	.word	0x0800e2d9

0800e380 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
 800e384:	4801      	ldr	r0, [pc, #4]	; (800e38c <__tcf_0+0xc>)
 800e386:	f7ff fec3 	bl	800e110 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	2000019c 	.word	0x2000019c

0800e390 <_Z23getFont_verdana_10_4bppv>:
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08a      	sub	sp, #40	; 0x28
 800e394:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e396:	4b1e      	ldr	r3, [pc, #120]	; (800e410 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	f3bf 8f5b 	dmb	ish
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	bf0c      	ite	eq
 800e3a8:	2301      	moveq	r3, #1
 800e3aa:	2300      	movne	r3, #0
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d02a      	beq.n	800e408 <_Z23getFont_verdana_10_4bppv+0x78>
 800e3b2:	4817      	ldr	r0, [pc, #92]	; (800e410 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e3b4:	f016 fcdc 	bl	8024d70 <__cxa_guard_acquire>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bf14      	ite	ne
 800e3be:	2301      	movne	r3, #1
 800e3c0:	2300      	moveq	r3, #0
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d01f      	beq.n	800e408 <_Z23getFont_verdana_10_4bppv+0x78>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9308      	str	r3, [sp, #32]
 800e3d0:	233f      	movs	r3, #63	; 0x3f
 800e3d2:	9307      	str	r3, [sp, #28]
 800e3d4:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e3d6:	9306      	str	r3, [sp, #24]
 800e3d8:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e3da:	9305      	str	r3, [sp, #20]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	9304      	str	r3, [sp, #16]
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9303      	str	r3, [sp, #12]
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	9302      	str	r3, [sp, #8]
 800e3e8:	2304      	movs	r3, #4
 800e3ea:	9301      	str	r3, [sp, #4]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	230a      	movs	r3, #10
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	4909      	ldr	r1, [pc, #36]	; (800e41c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e3f6:	480a      	ldr	r0, [pc, #40]	; (800e420 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e3f8:	f7ff fed8 	bl	800e1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e3fc:	4804      	ldr	r0, [pc, #16]	; (800e410 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e3fe:	f016 fcc3 	bl	8024d88 <__cxa_guard_release>
 800e402:	4808      	ldr	r0, [pc, #32]	; (800e424 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e404:	f016 fcfc 	bl	8024e00 <atexit>
    return verdana_10_4bpp;
 800e408:	4b05      	ldr	r3, [pc, #20]	; (800e420 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	200001c0 	.word	0x200001c0
 800e414:	08055b80 	.word	0x08055b80
 800e418:	08051260 	.word	0x08051260
 800e41c:	08055a88 	.word	0x08055a88
 800e420:	2000019c 	.word	0x2000019c
 800e424:	0800e381 	.word	0x0800e381

0800e428 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	4801      	ldr	r0, [pc, #4]	; (800e434 <__tcf_0+0xc>)
 800e42e:	f7ff fe6f 	bl	800e110 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e432:	bd80      	pop	{r7, pc}
 800e434:	200001c4 	.word	0x200001c4

0800e438 <_Z23getFont_verdana_20_4bppv>:
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08a      	sub	sp, #40	; 0x28
 800e43c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e43e:	4b1e      	ldr	r3, [pc, #120]	; (800e4b8 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f3bf 8f5b 	dmb	ish
 800e446:	b2db      	uxtb	r3, r3
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	bf0c      	ite	eq
 800e450:	2301      	moveq	r3, #1
 800e452:	2300      	movne	r3, #0
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b00      	cmp	r3, #0
 800e458:	d02a      	beq.n	800e4b0 <_Z23getFont_verdana_20_4bppv+0x78>
 800e45a:	4817      	ldr	r0, [pc, #92]	; (800e4b8 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e45c:	f016 fc88 	bl	8024d70 <__cxa_guard_acquire>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	bf14      	ite	ne
 800e466:	2301      	movne	r3, #1
 800e468:	2300      	moveq	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01f      	beq.n	800e4b0 <_Z23getFont_verdana_20_4bppv+0x78>
 800e470:	2300      	movs	r3, #0
 800e472:	9309      	str	r3, [sp, #36]	; 0x24
 800e474:	2300      	movs	r3, #0
 800e476:	9308      	str	r3, [sp, #32]
 800e478:	233f      	movs	r3, #63	; 0x3f
 800e47a:	9307      	str	r3, [sp, #28]
 800e47c:	4b0f      	ldr	r3, [pc, #60]	; (800e4bc <_Z23getFont_verdana_20_4bppv+0x84>)
 800e47e:	9306      	str	r3, [sp, #24]
 800e480:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e482:	9305      	str	r3, [sp, #20]
 800e484:	2300      	movs	r3, #0
 800e486:	9304      	str	r3, [sp, #16]
 800e488:	2300      	movs	r3, #0
 800e48a:	9303      	str	r3, [sp, #12]
 800e48c:	2301      	movs	r3, #1
 800e48e:	9302      	str	r3, [sp, #8]
 800e490:	2304      	movs	r3, #4
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	2304      	movs	r3, #4
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	2314      	movs	r3, #20
 800e49a:	2209      	movs	r2, #9
 800e49c:	4909      	ldr	r1, [pc, #36]	; (800e4c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e49e:	480a      	ldr	r0, [pc, #40]	; (800e4c8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e4a0:	f7ff fe84 	bl	800e1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e4a4:	4804      	ldr	r0, [pc, #16]	; (800e4b8 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e4a6:	f016 fc6f 	bl	8024d88 <__cxa_guard_release>
 800e4aa:	4808      	ldr	r0, [pc, #32]	; (800e4cc <_Z23getFont_verdana_20_4bppv+0x94>)
 800e4ac:	f016 fca8 	bl	8024e00 <atexit>
    return verdana_20_4bpp;
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	200001e8 	.word	0x200001e8
 800e4bc:	08055b84 	.word	0x08055b84
 800e4c0:	08051264 	.word	0x08051264
 800e4c4:	08055a98 	.word	0x08055a98
 800e4c8:	200001c4 	.word	0x200001c4
 800e4cc:	0800e429 	.word	0x0800e429

0800e4d0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__tcf_0+0xc>)
 800e4d6:	f7ff fe1b 	bl	800e110 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	200001ec 	.word	0x200001ec

0800e4e0 <_Z23getFont_verdana_40_4bppv>:
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08a      	sub	sp, #40	; 0x28
 800e4e4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e4e6:	4b1e      	ldr	r3, [pc, #120]	; (800e560 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f3bf 8f5b 	dmb	ish
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bf0c      	ite	eq
 800e4f8:	2301      	moveq	r3, #1
 800e4fa:	2300      	movne	r3, #0
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d02a      	beq.n	800e558 <_Z23getFont_verdana_40_4bppv+0x78>
 800e502:	4817      	ldr	r0, [pc, #92]	; (800e560 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e504:	f016 fc34 	bl	8024d70 <__cxa_guard_acquire>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	bf14      	ite	ne
 800e50e:	2301      	movne	r3, #1
 800e510:	2300      	moveq	r3, #0
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01f      	beq.n	800e558 <_Z23getFont_verdana_40_4bppv+0x78>
 800e518:	2300      	movs	r3, #0
 800e51a:	9309      	str	r3, [sp, #36]	; 0x24
 800e51c:	2300      	movs	r3, #0
 800e51e:	9308      	str	r3, [sp, #32]
 800e520:	233f      	movs	r3, #63	; 0x3f
 800e522:	9307      	str	r3, [sp, #28]
 800e524:	4b0f      	ldr	r3, [pc, #60]	; (800e564 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e526:	9306      	str	r3, [sp, #24]
 800e528:	4b0f      	ldr	r3, [pc, #60]	; (800e568 <_Z23getFont_verdana_40_4bppv+0x88>)
 800e52a:	9305      	str	r3, [sp, #20]
 800e52c:	2300      	movs	r3, #0
 800e52e:	9304      	str	r3, [sp, #16]
 800e530:	2300      	movs	r3, #0
 800e532:	9303      	str	r3, [sp, #12]
 800e534:	2301      	movs	r3, #1
 800e536:	9302      	str	r3, [sp, #8]
 800e538:	2304      	movs	r3, #4
 800e53a:	9301      	str	r3, [sp, #4]
 800e53c:	2308      	movs	r3, #8
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	2328      	movs	r3, #40	; 0x28
 800e542:	2207      	movs	r2, #7
 800e544:	4909      	ldr	r1, [pc, #36]	; (800e56c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e546:	480a      	ldr	r0, [pc, #40]	; (800e570 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e548:	f7ff fe30 	bl	800e1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e54c:	4804      	ldr	r0, [pc, #16]	; (800e560 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e54e:	f016 fc1b 	bl	8024d88 <__cxa_guard_release>
 800e552:	4808      	ldr	r0, [pc, #32]	; (800e574 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e554:	f016 fc54 	bl	8024e00 <atexit>
    return verdana_40_4bpp;
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	20000210 	.word	0x20000210
 800e564:	08055b88 	.word	0x08055b88
 800e568:	08051268 	.word	0x08051268
 800e56c:	08055b18 	.word	0x08055b18
 800e570:	200001ec 	.word	0x200001ec
 800e574:	0800e4d1 	.word	0x0800e4d1

0800e578 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	80da      	strh	r2, [r3, #6]
    }
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e5be:	b480      	push	{r7}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	60f8      	str	r0, [r7, #12]
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	817b      	strh	r3, [r7, #10]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	813b      	strh	r3, [r7, #8]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	897a      	ldrh	r2, [r7, #10]
 800e5dc:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	893a      	ldrh	r2, [r7, #8]
 800e5e2:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	88fa      	ldrh	r2, [r7, #6]
 800e5e8:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	8b3a      	ldrh	r2, [r7, #24]
 800e5ee:	80da      	strh	r2, [r3, #6]
    }
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	6039      	str	r1, [r7, #0]
    {
    }
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
    {
    }
 800e61e:	bf00      	nop
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e62a:	b480      	push	{r7}
 800e62c:	b083      	sub	sp, #12
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	6039      	str	r1, [r7, #0]
    {
    }
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
    {
    }
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
    {
    }
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
    {
 800e688:	4a04      	ldr	r2, [pc, #16]	; (800e69c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	601a      	str	r2, [r3, #0]
    }
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	0805152c 	.word	0x0805152c

0800e6a0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    }
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7ff ffe9 	bl	800e680 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e6ae:	2104      	movs	r1, #4
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f016 fb5b 	bl	8024d6c <_ZdlPvj>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e6cc:	bf00      	nop
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e6ea:	6810      	ldr	r0, [r2, #0]
 800e6ec:	6851      	ldr	r1, [r2, #4]
 800e6ee:	c303      	stmia	r3!, {r0, r1}
    };
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
    {
 800e704:	4a04      	ldr	r2, [pc, #16]	; (800e718 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	601a      	str	r2, [r3, #0]
    }
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	08051514 	.word	0x08051514

0800e71c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
    }
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff ffe9 	bl	800e6fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e72a:	2104      	movs	r1, #4
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f016 fb1d 	bl	8024d6c <_ZdlPvj>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af02      	add	r7, sp, #8
 800e742:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800e744:	4a13      	ldr	r2, [pc, #76]	; (800e794 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	1d18      	adds	r0, r3, #4
 800e74e:	2300      	movs	r3, #0
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	2300      	movs	r3, #0
 800e754:	2200      	movs	r2, #0
 800e756:	2100      	movs	r1, #0
 800e758:	f7ff ff31 	bl	800e5be <_ZN8touchgfx4RectC1Essss>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	330c      	adds	r3, #12
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff ff15 	bl	800e590 <_ZN8touchgfx4RectC1Ev>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	615a      	str	r2, [r3, #20]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	619a      	str	r2, [r3, #24]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	61da      	str	r2, [r3, #28]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	08053818 	.word	0x08053818

0800e798 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
    {
 800e7a0:	4a04      	ldr	r2, [pc, #16]	; (800e7b4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	601a      	str	r2, [r3, #0]
    }
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr
 800e7b4:	08053818 	.word	0x08053818

0800e7b8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
    }
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ffe9 	bl	800e798 <_ZN8touchgfx8DrawableD1Ev>
 800e7c6:	2128      	movs	r1, #40	; 0x28
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f016 facf 	bl	8024d6c <_ZdlPvj>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3304      	adds	r3, #4
    }
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4603      	mov	r3, r0
 800e800:	817b      	strh	r3, [r7, #10]
 800e802:	460b      	mov	r3, r1
 800e804:	813b      	strh	r3, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3334      	adds	r3, #52	; 0x34
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e816:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	4798      	blx	r3
        setWidth(width);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3338      	adds	r3, #56	; 0x38
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e82a:	4611      	mov	r1, r2
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	4798      	blx	r3
        setHeight(height);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	333c      	adds	r3, #60	; 0x3c
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e83c:	4611      	mov	r1, r2
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	4798      	blx	r3
    }
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e84a:	b480      	push	{r7}
 800e84c:	b083      	sub	sp, #12
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e858:	4618      	mov	r0, r3
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	887a      	ldrh	r2, [r7, #2]
 800e874:	809a      	strh	r2, [r3, #4]
    }
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	460b      	mov	r3, r1
 800e88c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	887a      	ldrh	r2, [r7, #2]
 800e892:	80da      	strh	r2, [r3, #6]
    }
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	807b      	strh	r3, [r7, #2]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	332c      	adds	r3, #44	; 0x2c
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e8bc:	4611      	mov	r1, r2
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	4798      	blx	r3
        setY(y);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3330      	adds	r3, #48	; 0x30
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
    }
 800e8d4:	bf00      	nop
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	887a      	ldrh	r2, [r7, #2]
 800e8ec:	811a      	strh	r2, [r3, #8]
    }
 800e8ee:	bf00      	nop
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e8fa:	b480      	push	{r7}
 800e8fc:	b083      	sub	sp, #12
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	460b      	mov	r3, r1
 800e904:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	887a      	ldrh	r2, [r7, #2]
 800e90a:	815a      	strh	r2, [r3, #10]
    }
 800e90c:	bf00      	nop
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
    {
    }
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
    {
    }
 800e936:	bf00      	nop
 800e938:	370c      	adds	r7, #12
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800e942:	b480      	push	{r7}
 800e944:	b083      	sub	sp, #12
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	6039      	str	r1, [r7, #0]
    {
    }
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
    {
    }
 800e962:	bf00      	nop
 800e964:	370c      	adds	r7, #12
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e96e:	b480      	push	{r7}
 800e970:	b083      	sub	sp, #12
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
    {
    }
 800e976:	bf00      	nop
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	807b      	strh	r3, [r7, #2]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3354      	adds	r3, #84	; 0x54
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	8879      	ldrh	r1, [r7, #2]
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e9d6:	b292      	uxth	r2, r2
 800e9d8:	1a8a      	subs	r2, r1, r2
 800e9da:	b292      	uxth	r2, r2
 800e9dc:	b210      	sxth	r0, r2
 800e9de:	8839      	ldrh	r1, [r7, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e9e6:	b292      	uxth	r2, r2
 800e9e8:	1a8a      	subs	r2, r1, r2
 800e9ea:	b292      	uxth	r2, r2
 800e9ec:	b212      	sxth	r2, r2
 800e9ee:	4601      	mov	r1, r0
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	4798      	blx	r3
    }
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea0a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea12:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea1a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f7ff ffe1 	bl	800e9fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	601a      	str	r2, [r3, #0]
    }
 800ea48:	bf00      	nop
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0
    {
        return instance;
 800ea54:	4b03      	ldr	r3, [pc, #12]	; (800ea64 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ea56:	681b      	ldr	r3, [r3, #0]
    }
 800ea58:	4618      	mov	r0, r3
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20001354 	.word	0x20001354

0800ea68 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ea68:	b480      	push	{r7}
 800ea6a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d008      	beq.n	800ea8a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ea78:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ea82:	4b06      	ldr	r3, [pc, #24]	; (800ea9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea88:	e002      	b.n	800ea90 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800ea8a:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800ea90:	4618      	mov	r0, r3
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20001354 	.word	0x20001354

0800eaa0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800eaa8:	4a07      	ldr	r2, [pc, #28]	; (800eac8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	605a      	str	r2, [r3, #4]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	721a      	strb	r2, [r3, #8]
    {
    }
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	080514f0 	.word	0x080514f0

0800eacc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    {
 800ead4:	4a04      	ldr	r2, [pc, #16]	; (800eae8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	601a      	str	r2, [r3, #0]
    }
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	080514f0 	.word	0x080514f0

0800eaec <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
    }
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ffe9 	bl	800eacc <_ZN8touchgfx10TransitionD1Ev>
 800eafa:	210c      	movs	r1, #12
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f016 f935 	bl	8024d6c <_ZdlPvj>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
    {
    }
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
    {
    }
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
    {
    }
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800eb50:	f008 fc96 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 800eb54:	4602      	mov	r2, r0
 800eb56:	6813      	ldr	r3, [r2, #0]
 800eb58:	3330      	adds	r3, #48	; 0x30
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	4798      	blx	r3
    }
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	605a      	str	r2, [r3, #4]
    }
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	4a05      	ldr	r2, [pc, #20]	; (800eba4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff fd73 	bl	800e680 <_ZN8touchgfx15UIEventListenerD1Ev>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	08053728 	.word	0x08053728

0800eba8 <_ZN8touchgfx11ApplicationD0Ev>:
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff ffe7 	bl	800eb84 <_ZN8touchgfx11ApplicationD1Ev>
 800ebb6:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f016 f8d6 	bl	8024d6c <_ZdlPvj>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f008 fc72 	bl	80174c0 <_ZN8touchgfx11ApplicationC1Ev>
 800ebdc:	4a09      	ldr	r2, [pc, #36]	; (800ec04 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a04      	ldr	r2, [pc, #16]	; (800ec08 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ebf6:	6013      	str	r3, [r2, #0]
    }
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	080514ac 	.word	0x080514ac
 800ec08:	200013c0 	.word	0x200013c0

0800ec0c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f804 	bl	800ec22 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00f      	beq.n	800ec54 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	330c      	adds	r3, #12
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4610      	mov	r0, r2
 800ec48:	4798      	blx	r3
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ec50:	2301      	movs	r3, #1
 800ec52:	e000      	b.n	800ec56 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ec54:	2300      	movs	r3, #0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00e      	beq.n	800ec78 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	601a      	str	r2, [r3, #0]
    }
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	4a05      	ldr	r2, [pc, #20]	; (800ecbc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7ff ff69 	bl	800eb84 <_ZN8touchgfx11ApplicationD1Ev>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	080514ac 	.word	0x080514ac

0800ecc0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7ff ffe7 	bl	800ec9c <_ZN8touchgfx14MVPApplicationD1Ev>
 800ecce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f016 f84a 	bl	8024d6c <_ZdlPvj>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
	...

0800ece4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	4a08      	ldr	r2, [pc, #32]	; (800ed10 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f001 f883 	bl	800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7ff ffcb 	bl	800ec9c <_ZN8touchgfx14MVPApplicationD1Ev>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	08051450 	.word	0x08051450

0800ed14 <_ZN23FrontendApplicationBaseD0Ev>:
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7ff ffe1 	bl	800ece4 <_ZN23FrontendApplicationBaseD1Ev>
 800ed22:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f016 f820 	bl	8024d6c <_ZdlPvj>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2201      	movs	r2, #1
 800ed42:	721a      	strb	r2, [r3, #8]
    }
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	607b      	str	r3, [r7, #4]
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	817b      	strh	r3, [r7, #10]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff fe0c 	bl	800e982 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d008      	beq.n	800ed82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff fe12 	bl	800e99c <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d001      	beq.n	800ed82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e000      	b.n	800ed84 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ed82:	2300      	movs	r3, #0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]
        }
    }
 800ed8e:	bf00      	nop
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ed96:	b480      	push	{r7}
 800ed98:	b083      	sub	sp, #12
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	605a      	str	r2, [r3, #4]
    }
 800eda6:	bf00      	nop
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fcbc 	bl	800e73c <_ZN8touchgfx8DrawableC1Ev>
 800edc4:	4a03      	ldr	r2, [pc, #12]	; (800edd4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4618      	mov	r0, r3
 800edce:	3708      	adds	r7, #8
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	080513c4 	.word	0x080513c4

0800edd8 <_ZN8touchgfx6WidgetD1Ev>:
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	4a05      	ldr	r2, [pc, #20]	; (800edf8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fcd5 	bl	800e798 <_ZN8touchgfx8DrawableD1Ev>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	080513c4 	.word	0x080513c4

0800edfc <_ZN8touchgfx6WidgetD0Ev>:
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff ffe7 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 800ee0a:	2128      	movs	r1, #40	; 0x28
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f015 ffad 	bl	8024d6c <_ZdlPvj>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff fece 	bl	800ebcc <_ZN8touchgfx14MVPApplicationC1Ev>
 800ee30:	4a13      	ldr	r2, [pc, #76]	; (800ee80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 f92b 	bl	800f098 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	68ba      	ldr	r2, [r7, #8]
 800ee4e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ee52:	f7ff fdfd 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 800ee56:	4602      	mov	r2, r0
 800ee58:	6813      	ldr	r3, [r2, #0]
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2100      	movs	r1, #0
 800ee60:	4610      	mov	r0, r2
 800ee62:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ee64:	2000      	movs	r0, #0
 800ee66:	f002 fd93 	bl	8011990 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ee6a:	f7ff fdfd 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	4618      	mov	r0, r3
 800ee72:	f00e ff1e 	bl	801dcb2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	08051450 	.word	0x08051450

0800ee84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4618      	mov	r0, r3
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff ffe9 	bl	800ee84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	685a      	ldr	r2, [r3, #4]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	605a      	str	r2, [r3, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	3208      	adds	r2, #8
 800eec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eec6:	e883 0003 	stmia.w	r3, {r0, r1}
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4618      	mov	r0, r3
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b089      	sub	sp, #36	; 0x24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800eee2:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800eee4:	61bb      	str	r3, [r7, #24]
 800eee6:	2300      	movs	r3, #0
 800eee8:	61fb      	str	r3, [r7, #28]
 800eeea:	f107 0008 	add.w	r0, r7, #8
 800eeee:	f107 0318 	add.w	r3, r7, #24
 800eef2:	cb0c      	ldmia	r3, {r2, r3}
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	f000 f8eb 	bl	800f0d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800eefa:	f107 0308 	add.w	r3, r7, #8
 800eefe:	4619      	mov	r1, r3
 800ef00:	4620      	mov	r0, r4
 800ef02:	f7ff ffcb 	bl	800ee9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ef06:	f107 0308 	add.w	r3, r7, #8
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 ff7a 	bl	800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ef1c:	bf00      	nop
 800ef1e:	3724      	adds	r7, #36	; 0x24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd90      	pop	{r4, r7, pc}
 800ef24:	0800ef29 	.word	0x0800ef29

0800ef28 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	4b04      	ldr	r3, [pc, #16]	; (800ef58 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800ef48:	4804      	ldr	r0, [pc, #16]	; (800ef5c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800ef4a:	f000 f8f3 	bl	800f134 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ef4e:	bf00      	nop
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	200013b4 	.word	0x200013b4
 800ef5c:	200013b0 	.word	0x200013b0

0800ef60 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800ef60:	b590      	push	{r4, r7, lr}
 800ef62:	b089      	sub	sp, #36	; 0x24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ef6e:	4b10      	ldr	r3, [pc, #64]	; (800efb0 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	2300      	movs	r3, #0
 800ef74:	61fb      	str	r3, [r7, #28]
 800ef76:	f107 0008 	add.w	r0, r7, #8
 800ef7a:	f107 0318 	add.w	r3, r7, #24
 800ef7e:	cb0c      	ldmia	r3, {r2, r3}
 800ef80:	6879      	ldr	r1, [r7, #4]
 800ef82:	f000 f8a5 	bl	800f0d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ef86:	f107 0308 	add.w	r3, r7, #8
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f7ff ff85 	bl	800ee9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ef92:	f107 0308 	add.w	r3, r7, #8
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 ff34 	bl	800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800efa8:	bf00      	nop
 800efaa:	3724      	adds	r7, #36	; 0x24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd90      	pop	{r4, r7, pc}
 800efb0:	0800efb5 	.word	0x0800efb5

0800efb4 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af02      	add	r7, sp, #8
 800efba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800efc8:	461a      	mov	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800efd4:	4804      	ldr	r0, [pc, #16]	; (800efe8 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800efd6:	f000 f9d7 	bl	800f388 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800efda:	bf00      	nop
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	200013b4 	.word	0x200013b4
 800efe8:	200013b0 	.word	0x200013b0

0800efec <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWest()
{
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b089      	sub	sp, #36	; 0x24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenWipeTransitionWestImpl);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800effa:	4b10      	ldr	r3, [pc, #64]	; (800f03c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv+0x50>)
 800effc:	61bb      	str	r3, [r7, #24]
 800effe:	2300      	movs	r3, #0
 800f000:	61fb      	str	r3, [r7, #28]
 800f002:	f107 0008 	add.w	r0, r7, #8
 800f006:	f107 0318 	add.w	r3, r7, #24
 800f00a:	cb0c      	ldmia	r3, {r2, r3}
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	f000 f85f 	bl	800f0d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f012:	f107 0308 	add.w	r3, r7, #8
 800f016:	4619      	mov	r1, r3
 800f018:	4620      	mov	r0, r4
 800f01a:	f7ff ff3f 	bl	800ee9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f01e:	f107 0308 	add.w	r3, r7, #8
 800f022:	4618      	mov	r0, r3
 800f024:	f000 feee 	bl	800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800f034:	bf00      	nop
 800f036:	3724      	adds	r7, #36	; 0x24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd90      	pop	{r4, r7, pc}
 800f03c:	0800f041 	.word	0x0800f041

0800f040 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWestImpl()
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af02      	add	r7, sp, #8
 800f046:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800f054:	461a      	mov	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	4b04      	ldr	r3, [pc, #16]	; (800f070 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x30>)
 800f060:	4804      	ldr	r0, [pc, #16]	; (800f074 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x34>)
 800f062:	f000 fabb 	bl	800f5dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	200013b4 	.word	0x200013b4
 800f074:	200013b0 	.word	0x200013b0

0800f078 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	4a04      	ldr	r2, [pc, #16]	; (800f094 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	08051514 	.word	0x08051514

0800f098 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff ffe8 	bl	800f078 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f0a8:	4a08      	ldr	r2, [pc, #32]	; (800f0cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	605a      	str	r2, [r3, #4]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	609a      	str	r2, [r3, #8]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	60da      	str	r2, [r3, #12]
    {
    }
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3708      	adds	r7, #8
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	08051494 	.word	0x08051494

0800f0d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	4639      	mov	r1, r7
 800f0dc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff ffc8 	bl	800f078 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f0e8:	4a08      	ldr	r2, [pc, #32]	; (800f10c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3308      	adds	r3, #8
 800f0f8:	463a      	mov	r2, r7
 800f0fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	08051494 	.word	0x08051494

0800f110 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fcc0 	bl	800eaa0 <_ZN8touchgfx10TransitionC1Ev>
 800f120:	4a03      	ldr	r2, [pc, #12]	; (800f130 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	0805142c 	.word	0x0805142c

0800f134 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f134:	b590      	push	{r4, r7, lr}
 800f136:	b08f      	sub	sp, #60	; 0x3c
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	689a      	ldr	r2, [r3, #8]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	3320      	adds	r3, #32
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4610      	mov	r0, r2
 800f152:	4798      	blx	r3
 800f154:	4603      	mov	r3, r0
 800f156:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800f15a:	d205      	bcs.n	800f168 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f15c:	4b85      	ldr	r3, [pc, #532]	; (800f374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f15e:	4a86      	ldr	r2, [pc, #536]	; (800f378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f160:	21a7      	movs	r1, #167	; 0xa7
 800f162:	4886      	ldr	r0, [pc, #536]	; (800f37c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f164:	f015 fe2e 	bl	8024dc4 <__assert_func>
 800f168:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3320      	adds	r3, #32
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4610      	mov	r0, r2
 800f17a:	4798      	blx	r3
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b0f      	cmp	r3, #15
 800f180:	d805      	bhi.n	800f18e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f182:	4b7f      	ldr	r3, [pc, #508]	; (800f380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f184:	4a7c      	ldr	r2, [pc, #496]	; (800f378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f186:	21a8      	movs	r1, #168	; 0xa8
 800f188:	487c      	ldr	r0, [pc, #496]	; (800f37c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f18a:	f015 fe1b 	bl	8024dc4 <__assert_func>
 800f18e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	68da      	ldr	r2, [r3, #12]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3320      	adds	r3, #32
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4610      	mov	r0, r2
 800f1a0:	4798      	blx	r3
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b0b      	cmp	r3, #11
 800f1a6:	d805      	bhi.n	800f1b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f1a8:	4b76      	ldr	r3, [pc, #472]	; (800f384 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f1aa:	4a73      	ldr	r2, [pc, #460]	; (800f378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f1ac:	21a9      	movs	r1, #169	; 0xa9
 800f1ae:	4873      	ldr	r0, [pc, #460]	; (800f37c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f1b0:	f015 fe08 	bl	8024dc4 <__assert_func>
 800f1b4:	bf00      	nop
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f1c2:	f008 f95d 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f008 f95f 	bl	801748c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d008      	beq.n	800f1e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	330c      	adds	r3, #12
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	4798      	blx	r3
    if (*currentTrans)
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d007      	beq.n	800f200 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	6a3b      	ldr	r3, [r7, #32]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4798      	blx	r3
    if (*currentScreen)
 800f200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d008      	beq.n	800f21a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3314      	adds	r3, #20
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4610      	mov	r0, r2
 800f218:	4798      	blx	r3
    if (*currentPresenter)
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d008      	beq.n	800f234 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3304      	adds	r3, #4
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4610      	mov	r0, r2
 800f232:	4798      	blx	r3
    if (*currentScreen)
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d007      	beq.n	800f24c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4610      	mov	r0, r2
 800f24a:	4798      	blx	r3
    if (*currentPresenter)
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d008      	beq.n	800f266 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3308      	adds	r3, #8
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4610      	mov	r0, r2
 800f264:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	2100      	movs	r1, #0
 800f26c:	4618      	mov	r0, r3
 800f26e:	f000 fadf 	bl	800f830 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f272:	4603      	mov	r3, r0
 800f274:	4619      	mov	r1, r3
 800f276:	200c      	movs	r0, #12
 800f278:	f7ff f97e 	bl	800e578 <_ZnwjPv>
 800f27c:	4604      	mov	r4, r0
 800f27e:	2c00      	cmp	r4, #0
 800f280:	d004      	beq.n	800f28c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800f282:	4620      	mov	r0, r4
 800f284:	f7ff ff44 	bl	800f110 <_ZN8touchgfx12NoTransitionC1Ev>
 800f288:	4623      	mov	r3, r4
 800f28a:	e000      	b.n	800f28e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f28c:	4623      	mov	r3, r4
 800f28e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	2100      	movs	r1, #0
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fadd 	bl	800f856 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800f29c:	4603      	mov	r3, r0
 800f29e:	4619      	mov	r1, r3
 800f2a0:	f44f 709e 	mov.w	r0, #316	; 0x13c
 800f2a4:	f7ff f968 	bl	800e578 <_ZnwjPv>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	2c00      	cmp	r4, #0
 800f2ac:	d004      	beq.n	800f2b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f002 fe3e 	bl	8011f30 <_ZN10screenViewC1Ev>
 800f2b4:	4623      	mov	r3, r4
 800f2b6:	e000      	b.n	800f2ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 fada 	bl	800f87c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	2010      	movs	r0, #16
 800f2ce:	f7ff f953 	bl	800e578 <_ZnwjPv>
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	2c00      	cmp	r4, #0
 800f2d6:	d005      	beq.n	800f2e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800f2d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f002 fdd0 	bl	8011e80 <_ZN15screenPresenterC1ER10screenView>
 800f2e0:	4623      	mov	r3, r4
 800f2e2:	e000      	b.n	800f2e6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f2e4:	4623      	mov	r3, r4
 800f2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2ec:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2f8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800f300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f302:	3304      	adds	r3, #4
 800f304:	e000      	b.n	800f308 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f306:	2300      	movs	r3, #0
 800f308:	4619      	mov	r1, r3
 800f30a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f30c:	f7ff fcb8 	bl	800ec80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	3304      	adds	r3, #4
 800f314:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fd3d 	bl	800ed96 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f320:	4618      	mov	r0, r3
 800f322:	f000 fabe 	bl	800f8a2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800f326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f328:	61fb      	str	r3, [r7, #28]
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	61bb      	str	r3, [r7, #24]
 800f32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f330:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	330c      	adds	r3, #12
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	69f8      	ldr	r0, [r7, #28]
 800f33c:	4798      	blx	r3
    newPresenter->activate();
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	69b8      	ldr	r0, [r7, #24]
 800f346:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f348:	6979      	ldr	r1, [r7, #20]
 800f34a:	69f8      	ldr	r0, [r7, #28]
 800f34c:	f009 fa16 	bl	801877c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3310      	adds	r3, #16
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6978      	ldr	r0, [r7, #20]
 800f35a:	4798      	blx	r3
    newTransition->invalidate();
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3314      	adds	r3, #20
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6978      	ldr	r0, [r7, #20]
 800f366:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	373c      	adds	r7, #60	; 0x3c
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd90      	pop	{r4, r7, pc}
 800f372:	bf00      	nop
 800f374:	08026080 	.word	0x08026080
 800f378:	0805154c 	.word	0x0805154c
 800f37c:	08026110 	.word	0x08026110
 800f380:	08026154 	.word	0x08026154
 800f384:	080261f8 	.word	0x080261f8

0800f388 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f388:	b590      	push	{r4, r7, lr}
 800f38a:	b08f      	sub	sp, #60	; 0x3c
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3320      	adds	r3, #32
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	4798      	blx	r3
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800f3ae:	d205      	bcs.n	800f3bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f3b0:	4b85      	ldr	r3, [pc, #532]	; (800f5c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f3b2:	4a86      	ldr	r2, [pc, #536]	; (800f5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f3b4:	21a7      	movs	r1, #167	; 0xa7
 800f3b6:	4886      	ldr	r0, [pc, #536]	; (800f5d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f3b8:	f015 fd04 	bl	8024dc4 <__assert_func>
 800f3bc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3320      	adds	r3, #32
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b0f      	cmp	r3, #15
 800f3d4:	d805      	bhi.n	800f3e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f3d6:	4b7f      	ldr	r3, [pc, #508]	; (800f5d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f3d8:	4a7c      	ldr	r2, [pc, #496]	; (800f5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f3da:	21a8      	movs	r1, #168	; 0xa8
 800f3dc:	487c      	ldr	r0, [pc, #496]	; (800f5d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f3de:	f015 fcf1 	bl	8024dc4 <__assert_func>
 800f3e2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	68da      	ldr	r2, [r3, #12]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3320      	adds	r3, #32
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	4798      	blx	r3
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b4f      	cmp	r3, #79	; 0x4f
 800f3fa:	d805      	bhi.n	800f408 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f3fc:	4b76      	ldr	r3, [pc, #472]	; (800f5d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f3fe:	4a73      	ldr	r2, [pc, #460]	; (800f5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f400:	21a9      	movs	r1, #169	; 0xa9
 800f402:	4873      	ldr	r0, [pc, #460]	; (800f5d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f404:	f015 fcde 	bl	8024dc4 <__assert_func>
 800f408:	bf00      	nop
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	627b      	str	r3, [r7, #36]	; 0x24
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f416:	f008 f833 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 800f41a:	4603      	mov	r3, r0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f008 f835 	bl	801748c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d008      	beq.n	800f43c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	6a3b      	ldr	r3, [r7, #32]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	330c      	adds	r3, #12
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4610      	mov	r0, r2
 800f43a:	4798      	blx	r3
    if (*currentTrans)
 800f43c:	6a3b      	ldr	r3, [r7, #32]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d007      	beq.n	800f454 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4610      	mov	r0, r2
 800f452:	4798      	blx	r3
    if (*currentScreen)
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d008      	beq.n	800f46e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3314      	adds	r3, #20
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4610      	mov	r0, r2
 800f46c:	4798      	blx	r3
    if (*currentPresenter)
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d008      	beq.n	800f488 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3304      	adds	r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4610      	mov	r0, r2
 800f486:	4798      	blx	r3
    if (*currentScreen)
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d007      	beq.n	800f4a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4610      	mov	r0, r2
 800f49e:	4798      	blx	r3
    if (*currentPresenter)
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d008      	beq.n	800f4ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	2100      	movs	r1, #0
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f9fc 	bl	800f8be <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	2050      	movs	r0, #80	; 0x50
 800f4cc:	f7ff f854 	bl	800e578 <_ZnwjPv>
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d005      	beq.n	800f4e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f4d6:	2114      	movs	r1, #20
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fa59 	bl	800f990 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800f4de:	4623      	mov	r3, r4
 800f4e0:	e000      	b.n	800f4e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800f4e2:	4623      	mov	r3, r4
 800f4e4:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f9b2 	bl	800f856 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	f44f 709e 	mov.w	r0, #316	; 0x13c
 800f4fa:	f7ff f83d 	bl	800e578 <_ZnwjPv>
 800f4fe:	4604      	mov	r4, r0
 800f500:	2c00      	cmp	r4, #0
 800f502:	d004      	beq.n	800f50e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f504:	4620      	mov	r0, r4
 800f506:	f002 fd13 	bl	8011f30 <_ZN10screenViewC1Ev>
 800f50a:	4623      	mov	r3, r4
 800f50c:	e000      	b.n	800f510 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800f50e:	4623      	mov	r3, r4
 800f510:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	2100      	movs	r1, #0
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 f9af 	bl	800f87c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800f51e:	4603      	mov	r3, r0
 800f520:	4619      	mov	r1, r3
 800f522:	2010      	movs	r0, #16
 800f524:	f7ff f828 	bl	800e578 <_ZnwjPv>
 800f528:	4604      	mov	r4, r0
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	d005      	beq.n	800f53a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f52e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f530:	4620      	mov	r0, r4
 800f532:	f002 fca5 	bl	8011e80 <_ZN15screenPresenterC1ER10screenView>
 800f536:	4623      	mov	r3, r4
 800f538:	e000      	b.n	800f53c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800f53a:	4623      	mov	r3, r4
 800f53c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f542:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f548:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f54e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f558:	3304      	adds	r3, #4
 800f55a:	e000      	b.n	800f55e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800f55c:	2300      	movs	r3, #0
 800f55e:	4619      	mov	r1, r3
 800f560:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f562:	f7ff fb8d 	bl	800ec80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f568:	3304      	adds	r3, #4
 800f56a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff fc12 	bl	800ed96 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f576:	4618      	mov	r0, r3
 800f578:	f000 f993 	bl	800f8a2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	61fb      	str	r3, [r7, #28]
 800f580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f586:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	330c      	adds	r3, #12
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	69f8      	ldr	r0, [r7, #28]
 800f592:	4798      	blx	r3
    newPresenter->activate();
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	69b8      	ldr	r0, [r7, #24]
 800f59c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f59e:	6979      	ldr	r1, [r7, #20]
 800f5a0:	69f8      	ldr	r0, [r7, #28]
 800f5a2:	f009 f8eb 	bl	801877c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	3310      	adds	r3, #16
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	4798      	blx	r3
    newTransition->invalidate();
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3314      	adds	r3, #20
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	4798      	blx	r3
    return newPresenter;
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	373c      	adds	r7, #60	; 0x3c
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd90      	pop	{r4, r7, pc}
 800f5c8:	08026080 	.word	0x08026080
 800f5cc:	08051650 	.word	0x08051650
 800f5d0:	08026110 	.word	0x08026110
 800f5d4:	08026154 	.word	0x08026154
 800f5d8:	080261f8 	.word	0x080261f8

0800f5dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f5dc:	b590      	push	{r4, r7, lr}
 800f5de:	b08f      	sub	sp, #60	; 0x3c
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	689a      	ldr	r2, [r3, #8]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3320      	adds	r3, #32
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	4798      	blx	r3
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f602:	d205      	bcs.n	800f610 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f604:	4b85      	ldr	r3, [pc, #532]	; (800f81c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f606:	4a86      	ldr	r2, [pc, #536]	; (800f820 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f608:	21a7      	movs	r1, #167	; 0xa7
 800f60a:	4886      	ldr	r0, [pc, #536]	; (800f824 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f60c:	f015 fbda 	bl	8024dc4 <__assert_func>
 800f610:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3320      	adds	r3, #32
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
 800f624:	4603      	mov	r3, r0
 800f626:	2b0f      	cmp	r3, #15
 800f628:	d805      	bhi.n	800f636 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f62a:	4b7f      	ldr	r3, [pc, #508]	; (800f828 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f62c:	4a7c      	ldr	r2, [pc, #496]	; (800f820 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f62e:	21a8      	movs	r1, #168	; 0xa8
 800f630:	487c      	ldr	r0, [pc, #496]	; (800f824 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f632:	f015 fbc7 	bl	8024dc4 <__assert_func>
 800f636:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	68da      	ldr	r2, [r3, #12]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	3320      	adds	r3, #32
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4610      	mov	r0, r2
 800f648:	4798      	blx	r3
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b37      	cmp	r3, #55	; 0x37
 800f64e:	d805      	bhi.n	800f65c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f650:	4b76      	ldr	r3, [pc, #472]	; (800f82c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f652:	4a73      	ldr	r2, [pc, #460]	; (800f820 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f654:	21a9      	movs	r1, #169	; 0xa9
 800f656:	4873      	ldr	r0, [pc, #460]	; (800f824 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f658:	f015 fbb4 	bl	8024dc4 <__assert_func>
 800f65c:	bf00      	nop
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	62bb      	str	r3, [r7, #40]	; 0x28
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f66a:	f007 ff09 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 800f66e:	4603      	mov	r3, r0
 800f670:	4618      	mov	r0, r3
 800f672:	f007 ff0b 	bl	801748c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d008      	beq.n	800f690 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	330c      	adds	r3, #12
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
    if (*currentTrans)
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d007      	beq.n	800f6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f698:	6a3b      	ldr	r3, [r7, #32]
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	6a3b      	ldr	r3, [r7, #32]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	4798      	blx	r3
    if (*currentScreen)
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d008      	beq.n	800f6c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3314      	adds	r3, #20
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4610      	mov	r0, r2
 800f6c0:	4798      	blx	r3
    if (*currentPresenter)
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d008      	beq.n	800f6dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4610      	mov	r0, r2
 800f6da:	4798      	blx	r3
    if (*currentScreen)
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d007      	beq.n	800f6f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4610      	mov	r0, r2
 800f6f2:	4798      	blx	r3
    if (*currentPresenter)
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d008      	beq.n	800f70e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	3308      	adds	r3, #8
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4610      	mov	r0, r2
 800f70c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	2100      	movs	r1, #0
 800f714:	4618      	mov	r0, r3
 800f716:	f000 f9bf 	bl	800fa98 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 800f71a:	4603      	mov	r3, r0
 800f71c:	4619      	mov	r1, r3
 800f71e:	2038      	movs	r0, #56	; 0x38
 800f720:	f7fe ff2a 	bl	800e578 <_ZnwjPv>
 800f724:	4604      	mov	r4, r0
 800f726:	2c00      	cmp	r4, #0
 800f728:	d005      	beq.n	800f736 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f72a:	2114      	movs	r1, #20
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 f9fb 	bl	800fb28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 800f732:	4623      	mov	r3, r4
 800f734:	e000      	b.n	800f738 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800f736:	4623      	mov	r3, r4
 800f738:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fa33 	bl	800fbac <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800f746:	4603      	mov	r3, r0
 800f748:	4619      	mov	r1, r3
 800f74a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f74e:	f7fe ff13 	bl	800e578 <_ZnwjPv>
 800f752:	4604      	mov	r4, r0
 800f754:	2c00      	cmp	r4, #0
 800f756:	d004      	beq.n	800f762 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f758:	4620      	mov	r0, r4
 800f75a:	f002 fb33 	bl	8011dc4 <_ZN11Screen1ViewC1Ev>
 800f75e:	4623      	mov	r3, r4
 800f760:	e000      	b.n	800f764 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800f762:	4623      	mov	r3, r4
 800f764:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	2100      	movs	r1, #0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 fa30 	bl	800fbd2 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f772:	4603      	mov	r3, r0
 800f774:	4619      	mov	r1, r3
 800f776:	2010      	movs	r0, #16
 800f778:	f7fe fefe 	bl	800e578 <_ZnwjPv>
 800f77c:	4604      	mov	r4, r0
 800f77e:	2c00      	cmp	r4, #0
 800f780:	d005      	beq.n	800f78e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f784:	4620      	mov	r0, r4
 800f786:	f002 fac5 	bl	8011d14 <_ZN16Screen1PresenterC1ER11Screen1View>
 800f78a:	4623      	mov	r3, r4
 800f78c:	e000      	b.n	800f790 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800f78e:	4623      	mov	r3, r4
 800f790:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f796:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f79c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	e000      	b.n	800f7b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f7b6:	f7ff fa63 	bl	800ec80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	3304      	adds	r3, #4
 800f7be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7ff fae8 	bl	800ed96 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 fa14 	bl	800fbf8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	61bb      	str	r3, [r7, #24]
 800f7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7da:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	330c      	adds	r3, #12
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	69f8      	ldr	r0, [r7, #28]
 800f7e6:	4798      	blx	r3
    newPresenter->activate();
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	69b8      	ldr	r0, [r7, #24]
 800f7f0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f7f2:	6979      	ldr	r1, [r7, #20]
 800f7f4:	69f8      	ldr	r0, [r7, #28]
 800f7f6:	f008 ffc1 	bl	801877c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	3310      	adds	r3, #16
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6978      	ldr	r0, [r7, #20]
 800f804:	4798      	blx	r3
    newTransition->invalidate();
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3314      	adds	r3, #20
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6978      	ldr	r0, [r7, #20]
 800f810:	4798      	blx	r3
    return newPresenter;
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f814:	4618      	mov	r0, r3
 800f816:	373c      	adds	r7, #60	; 0x3c
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd90      	pop	{r4, r7, pc}
 800f81c:	08026080 	.word	0x08026080
 800f820:	08051770 	.word	0x08051770
 800f824:	08026110 	.word	0x08026110
 800f828:	08026154 	.word	0x08026154
 800f82c:	080261f8 	.word	0x080261f8

0800f830 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	460b      	mov	r3, r1
 800f83a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3324      	adds	r3, #36	; 0x24
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	887a      	ldrh	r2, [r7, #2]
 800f846:	4611      	mov	r1, r2
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
 800f84c:	4603      	mov	r3, r0
    }
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	460b      	mov	r3, r1
 800f860:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3324      	adds	r3, #36	; 0x24
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	887a      	ldrh	r2, [r7, #2]
 800f86c:	4611      	mov	r1, r2
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	4798      	blx	r3
 800f872:	4603      	mov	r3, r0
    }
 800f874:	4618      	mov	r0, r3
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	460b      	mov	r3, r1
 800f886:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3324      	adds	r3, #36	; 0x24
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	887a      	ldrh	r2, [r7, #2]
 800f892:	4611      	mov	r1, r2
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	4798      	blx	r3
 800f898:	4603      	mov	r3, r0
    }
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f8a2:	b480      	push	{r7}
 800f8a4:	b083      	sub	sp, #12
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f8b2:	bf00      	nop
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3324      	adds	r3, #36	; 0x24
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	887a      	ldrh	r2, [r7, #2]
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	4798      	blx	r3
 800f8da:	4603      	mov	r3, r0
    }
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	4a05      	ldr	r2, [pc, #20]	; (800f904 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 f9ef 	bl	800fcd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	08051308 	.word	0x08051308

0800f908 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff ffe7 	bl	800f8e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800f916:	2110      	movs	r1, #16
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f015 fa27 	bl	8024d6c <_ZdlPvj>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff fa3e 	bl	800edb4 <_ZN8touchgfx6WidgetC1Ev>
 800f938:	4a03      	ldr	r2, [pc, #12]	; (800f948 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	601a      	str	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	080512a0 	.word	0x080512a0

0800f94c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	4a05      	ldr	r2, [pc, #20]	; (800f96c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7ff fa3b 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4618      	mov	r0, r3
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	080512a0 	.word	0x080512a0

0800f970 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7ff ffe7 	bl	800f94c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f97e:	2128      	movs	r1, #40	; 0x28
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f015 f9f3 	bl	8024d6c <_ZdlPvj>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800f990:	b590      	push	{r4, r7, lr}
 800f992:	b087      	sub	sp, #28
 800f994:	af02      	add	r7, sp, #8
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff f87e 	bl	800eaa0 <_ZN8touchgfx10TransitionC1Ev>
 800f9a4:	4a38      	ldr	r2, [pc, #224]	; (800fa88 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	601a      	str	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f103 040c 	add.w	r4, r3, #12
 800f9b0:	4a36      	ldr	r2, [pc, #216]	; (800fa8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800f9b2:	f107 0308 	add.w	r3, r7, #8
 800f9b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9be:	f107 0308 	add.w	r3, r7, #8
 800f9c2:	cb0c      	ldmia	r3, {r2, r3}
 800f9c4:	6879      	ldr	r1, [r7, #4]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f000 f966 	bl	800fc98 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	771a      	strb	r2, [r3, #28]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	78fa      	ldrb	r2, [r7, #3]
 800f9d6:	775a      	strb	r2, [r3, #29]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	779a      	strb	r2, [r3, #30]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	845a      	strh	r2, [r3, #34]	; 0x22
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	849a      	strh	r2, [r3, #36]	; 0x24
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	3328      	adds	r3, #40	; 0x28
 800f9ee:	2228      	movs	r2, #40	; 0x28
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f015 fa6f 	bl	8024ed6 <memset>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3328      	adds	r3, #40	; 0x28
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7ff ff93 	bl	800f928 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	7f1b      	ldrb	r3, [r3, #28]
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d826      	bhi.n	800fa58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800fa0a:	a201      	add	r2, pc, #4	; (adr r2, 800fa10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa10:	0800fa3d 	.word	0x0800fa3d
 800fa14:	0800fa49 	.word	0x0800fa49
 800fa18:	0800fa21 	.word	0x0800fa21
 800fa1c:	0800fa31 	.word	0x0800fa31
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800fa20:	4b1b      	ldr	r3, [pc, #108]	; (800fa90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fa22:	881b      	ldrh	r3, [r3, #0]
 800fa24:	425b      	negs	r3, r3
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	b21a      	sxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	841a      	strh	r2, [r3, #32]
            break;
 800fa2e:	e017      	b.n	800fa60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800fa30:	4b17      	ldr	r3, [pc, #92]	; (800fa90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	b21a      	sxth	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	841a      	strh	r2, [r3, #32]
            break;
 800fa3a:	e011      	b.n	800fa60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800fa3c:	4b15      	ldr	r3, [pc, #84]	; (800fa94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	b21a      	sxth	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	841a      	strh	r2, [r3, #32]
            break;
 800fa46:	e00b      	b.n	800fa60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800fa48:	4b12      	ldr	r3, [pc, #72]	; (800fa94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	425b      	negs	r3, r3
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	b21a      	sxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	841a      	strh	r2, [r3, #32]
            break;
 800fa56:	e003      	b.n	800fa60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800fa5e:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800fa66:	4b0a      	ldr	r3, [pc, #40]	; (800fa90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	b21a      	sxth	r2, r3
 800fa6c:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	b21b      	sxth	r3, r3
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4613      	mov	r3, r2
 800fa76:	2200      	movs	r2, #0
 800fa78:	2100      	movs	r1, #0
 800fa7a:	f7fe feb9 	bl	800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd90      	pop	{r4, r7, pc}
 800fa88:	08051274 	.word	0x08051274
 800fa8c:	0802629c 	.word	0x0802629c
 800fa90:	20001346 	.word	0x20001346
 800fa94:	20001348 	.word	0x20001348

0800fa98 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3324      	adds	r3, #36	; 0x24
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	887a      	ldrh	r2, [r7, #2]
 800faae:	4611      	mov	r1, r2
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	4798      	blx	r3
 800fab4:	4603      	mov	r3, r0
    }
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff f972 	bl	800edb4 <_ZN8touchgfx6WidgetC1Ev>
 800fad0:	4a03      	ldr	r2, [pc, #12]	; (800fae0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev+0x20>)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	601a      	str	r2, [r3, #0]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	0805135c 	.word	0x0805135c

0800fae4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>:
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	4a05      	ldr	r2, [pc, #20]	; (800fb04 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev+0x20>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff f96f 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	0805135c 	.word	0x0805135c

0800fb08 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD0Ev>:
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff ffe7 	bl	800fae4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 800fb16:	2128      	movs	r1, #40	; 0x28
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f015 f927 	bl	8024d6c <_ZdlPvj>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	460b      	mov	r3, r1
 800fb32:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe ffb2 	bl	800eaa0 <_ZN8touchgfx10TransitionC1Ev>
 800fb3c:	4a18      	ldr	r2, [pc, #96]	; (800fba0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	78fa      	ldrb	r2, [r7, #3]
 800fb46:	725a      	strb	r2, [r3, #9]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	729a      	strb	r2, [r3, #10]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	81da      	strh	r2, [r3, #14]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3310      	adds	r3, #16
 800fb58:	2228      	movs	r2, #40	; 0x28
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f015 f9ba 	bl	8024ed6 <memset>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	3310      	adds	r3, #16
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff ffaa 	bl	800fac0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800fb6c:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	b21a      	sxth	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	819a      	strh	r2, [r3, #12]
            break;
 800fb76:	bf00      	nop
            // Nothing to do here
            break;
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f103 0010 	add.w	r0, r3, #16
 800fb7e:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	b21a      	sxth	r2, r3
 800fb84:	4b08      	ldr	r3, [pc, #32]	; (800fba8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 800fb86:	881b      	ldrh	r3, [r3, #0]
 800fb88:	b21b      	sxth	r3, r3
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2100      	movs	r1, #0
 800fb92:	f7fe fe2d 	bl	800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	08051338 	.word	0x08051338
 800fba4:	20001346 	.word	0x20001346
 800fba8:	20001348 	.word	0x20001348

0800fbac <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	3324      	adds	r3, #36	; 0x24
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	887a      	ldrh	r2, [r7, #2]
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	4798      	blx	r3
 800fbc8:	4603      	mov	r3, r0
    }
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	460b      	mov	r3, r1
 800fbdc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	3324      	adds	r3, #36	; 0x24
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	887a      	ldrh	r2, [r7, #2]
 800fbe8:	4611      	mov	r1, r2
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	4798      	blx	r3
 800fbee:	4603      	mov	r3, r0
    }
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	7f1b      	ldrb	r3, [r3, #28]
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d820      	bhi.n	800fc68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800fc26:	a201      	add	r2, pc, #4	; (adr r2, 800fc2c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	0800fc53 	.word	0x0800fc53
 800fc30:	0800fc53 	.word	0x0800fc53
 800fc34:	0800fc3d 	.word	0x0800fc3d
 800fc38:	0800fc3d 	.word	0x0800fc3d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3354      	adds	r3, #84	; 0x54
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	6838      	ldr	r0, [r7, #0]
 800fc4e:	4798      	blx	r3
            break;
 800fc50:	e00e      	b.n	800fc70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3354      	adds	r3, #84	; 0x54
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800fc60:	2100      	movs	r1, #0
 800fc62:	6838      	ldr	r0, [r7, #0]
 800fc64:	4798      	blx	r3
            break;
 800fc66:	e003      	b.n	800fc70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	721a      	strb	r2, [r3, #8]
            break;
 800fc6e:	bf00      	nop
        }
    }
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	4a04      	ldr	r2, [pc, #16]	; (800fc94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	08051320 	.word	0x08051320

0800fc98 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	4639      	mov	r1, r7
 800fca4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7ff ffe4 	bl	800fc78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800fcb0:	4a08      	ldr	r2, [pc, #32]	; (800fcd4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	463a      	mov	r2, r7
 800fcc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcc6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	08051308 	.word	0x08051308

0800fcd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
    }
 800fce0:	4a04      	ldr	r2, [pc, #16]	; (800fcf4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4618      	mov	r0, r3
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	08051320 	.word	0x08051320

0800fcf8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
    }
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff ffe9 	bl	800fcd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800fd06:	2104      	movs	r1, #4
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f015 f82f 	bl	8024d6c <_ZdlPvj>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	4a0a      	ldr	r2, [pc, #40]	; (800fd4c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	3328      	adds	r3, #40	; 0x28
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff fe0e 	bl	800f94c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	330c      	adds	r3, #12
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff fdd5 	bl	800f8e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fe fec5 	bl	800eacc <_ZN8touchgfx10TransitionD1Ev>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	08051274 	.word	0x08051274

0800fd50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff ffdd 	bl	800fd18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800fd5e:	2150      	movs	r1, #80	; 0x50
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f015 f803 	bl	8024d6c <_ZdlPvj>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
class WipeTransition : public Transition
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	4a08      	ldr	r2, [pc, #32]	; (800fd9c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	3310      	adds	r3, #16
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7ff feae 	bl	800fae4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fe fe9e 	bl	800eacc <_ZN8touchgfx10TransitionD1Ev>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	08051338 	.word	0x08051338

0800fda0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe1 	bl	800fd70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 800fdae:	2138      	movs	r1, #56	; 0x38
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f014 ffdb 	bl	8024d6c <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fe7b 	bl	800eacc <_ZN8touchgfx10TransitionD1Ev>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	0805142c 	.word	0x0805142c

0800fde4 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff ffe7 	bl	800fdc0 <_ZN8touchgfx12NoTransitionD1Ev>
 800fdf2:	210c      	movs	r1, #12
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f014 ffb9 	bl	8024d6c <_ZdlPvj>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	4a05      	ldr	r2, [pc, #20]	; (800fe24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fe fc71 	bl	800e6fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	08051494 	.word	0x08051494

0800fe28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7ff ffe7 	bl	800fe04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fe36:	2110      	movs	r1, #16
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f014 ff97 	bl	8024d6c <_ZdlPvj>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b08b      	sub	sp, #44	; 0x2c
 800fe4c:	af02      	add	r7, sp, #8
 800fe4e:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe fe5a 	bl	800eb0c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	7f9b      	ldrb	r3, [r3, #30]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	b2da      	uxtb	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7f9a      	ldrb	r2, [r3, #30]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7f5b      	ldrb	r3, [r3, #29]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d82b      	bhi.n	800fec8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	7f9b      	ldrb	r3, [r3, #30]
 800fe74:	b298      	uxth	r0, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	7f5b      	ldrb	r3, [r3, #29]
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	2100      	movs	r1, #0
 800fe84:	f008 fc80 	bl	8018788 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d019      	beq.n	800fed6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800feb0:	2a00      	cmp	r2, #0
 800feb2:	dd01      	ble.n	800feb8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800feb4:	2201      	movs	r2, #1
 800feb6:	e001      	b.n	800febc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800feb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800febc:	4413      	add	r3, r2
 800febe:	b29b      	uxth	r3, r3
 800fec0:	b21a      	sxth	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	845a      	strh	r2, [r3, #34]	; 0x22
 800fec6:	e006      	b.n	800fed6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	779a      	strb	r2, [r3, #30]
            return;
 800fed4:	e0c0      	b.n	8010058 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fedc:	b29a      	uxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29b      	uxth	r3, r3
 800feea:	b21a      	sxth	r2, r3
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4413      	add	r3, r2
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	b21a      	sxth	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	7f9b      	ldrb	r3, [r3, #30]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	f040 8097 	bne.w	8010042 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800ff14:	4b52      	ldr	r3, [pc, #328]	; (8010060 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 8092 	beq.w	8010042 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800ff1e:	f107 0314 	add.w	r3, r7, #20
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fe fb34 	bl	800e590 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	7f1b      	ldrb	r3, [r3, #28]
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d85b      	bhi.n	800ffe8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800ff30:	a201      	add	r2, pc, #4	; (adr r2, 800ff38 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800ff32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff36:	bf00      	nop
 800ff38:	0800ff99 	.word	0x0800ff99
 800ff3c:	0800ffc3 	.word	0x0800ffc3
 800ff40:	0800ff49 	.word	0x0800ff49
 800ff44:	0800ff6f 	.word	0x0800ff6f
                rect.x = 0;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b42      	ldr	r3, [pc, #264]	; (8010064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	b21b      	sxth	r3, r3
 800ff62:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800ff64:	4b40      	ldr	r3, [pc, #256]	; (8010068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	b21b      	sxth	r3, r3
 800ff6a:	837b      	strh	r3, [r7, #26]
                break;
 800ff6c:	e03d      	b.n	800ffea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff74:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800ff7a:	4b3a      	ldr	r3, [pc, #232]	; (8010064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ff7c:	881a      	ldrh	r2, [r3, #0]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	b21b      	sxth	r3, r3
 800ff8c:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800ff8e:	4b36      	ldr	r3, [pc, #216]	; (8010068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	b21b      	sxth	r3, r3
 800ff94:	837b      	strh	r3, [r7, #26]
                break;
 800ff96:	e028      	b.n	800ffea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffa2:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800ffa4:	4b2f      	ldr	r3, [pc, #188]	; (8010064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	b21b      	sxth	r3, r3
 800ffaa:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800ffac:	4b2e      	ldr	r3, [pc, #184]	; (8010068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ffae:	881a      	ldrh	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	b21b      	sxth	r3, r3
 800ffbe:	837b      	strh	r3, [r7, #26]
                break;
 800ffc0:	e013      	b.n	800ffea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800ffca:	4b26      	ldr	r3, [pc, #152]	; (8010064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	b21b      	sxth	r3, r3
 800ffd0:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	4b23      	ldr	r3, [pc, #140]	; (8010068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ffdc:	881b      	ldrh	r3, [r3, #0]
 800ffde:	4413      	add	r3, r2
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	b21b      	sxth	r3, r3
 800ffe4:	837b      	strh	r3, [r7, #26]
                break;
 800ffe6:	e000      	b.n	800ffea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 800ffe8:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800ffea:	f7fe fd31 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 800ffee:	4602      	mov	r2, r0
 800fff0:	6813      	ldr	r3, [r2, #0]
 800fff2:	3328      	adds	r3, #40	; 0x28
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4610      	mov	r0, r2
 800fff8:	4798      	blx	r3
 800fffa:	61f8      	str	r0, [r7, #28]
            Rect source;
 800fffc:	f107 030c 	add.w	r3, r7, #12
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fac5 	bl	800e590 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8010006:	2300      	movs	r3, #0
 8010008:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 801000e:	4b15      	ldr	r3, [pc, #84]	; (8010064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	b21b      	sxth	r3, r3
 8010014:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 8010016:	4b14      	ldr	r3, [pc, #80]	; (8010068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	b21b      	sxth	r3, r3
 801001c:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 801001e:	f7fe fd17 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8010022:	f7fe fd21 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8010026:	6803      	ldr	r3, [r0, #0]
 8010028:	330c      	adds	r3, #12
 801002a:	681c      	ldr	r4, [r3, #0]
 801002c:	f107 0114 	add.w	r1, r7, #20
 8010030:	f107 020c 	add.w	r2, r7, #12
 8010034:	2300      	movs	r3, #0
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	23ff      	movs	r3, #255	; 0xff
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	460b      	mov	r3, r1
 801003e:	69f9      	ldr	r1, [r7, #28]
 8010040:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6858      	ldr	r0, [r3, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	3378      	adds	r3, #120	; 0x78
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	320c      	adds	r2, #12
 8010054:	4611      	mov	r1, r2
 8010056:	4798      	blx	r3
    }
 8010058:	3724      	adds	r7, #36	; 0x24
 801005a:	46bd      	mov	sp, r7
 801005c:	bd90      	pop	{r4, r7, pc}
 801005e:	bf00      	nop
 8010060:	20001350 	.word	0x20001350
 8010064:	20001346 	.word	0x20001346
 8010068:	20001348 	.word	0x20001348

0801006c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6858      	ldr	r0, [r3, #4]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3364      	adds	r3, #100	; 0x64
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	3228      	adds	r2, #40	; 0x28
 8010086:	4611      	mov	r1, r2
 8010088:	4798      	blx	r3
    }
 801008a:	bf00      	nop
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
	...

08010094 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
        Transition::init();
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fd48 	bl	800eb34 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80100a4:	4a16      	ldr	r2, [pc, #88]	; (8010100 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 80100a6:	f107 0318 	add.w	r3, r7, #24
 80100aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80100b2:	f107 0008 	add.w	r0, r7, #8
 80100b6:	f107 0318 	add.w	r3, r7, #24
 80100ba:	cb0c      	ldmia	r3, {r2, r3}
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	f7ff fdeb 	bl	800fc98 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	3378      	adds	r3, #120	; 0x78
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f107 0108 	add.w	r1, r7, #8
 80100d4:	4610      	mov	r0, r2
 80100d6:	4798      	blx	r3
        screenContainer->add(solid);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6858      	ldr	r0, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3360      	adds	r3, #96	; 0x60
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	3228      	adds	r2, #40	; 0x28
 80100ea:	4611      	mov	r1, r2
 80100ec:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80100ee:	f107 0308 	add.w	r3, r7, #8
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff fbf6 	bl	800f8e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 80100f8:	bf00      	nop
 80100fa:	3720      	adds	r7, #32
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	080262a4 	.word	0x080262a4

08010104 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
        switch (direction)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7f1b      	ldrb	r3, [r3, #28]
 8010112:	2b03      	cmp	r3, #3
 8010114:	d83a      	bhi.n	801018c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 8010116:	a201      	add	r2, pc, #4	; (adr r2, 801011c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	0801015d 	.word	0x0801015d
 8010120:	08010177 	.word	0x08010177
 8010124:	0801012d 	.word	0x0801012d
 8010128:	08010143 	.word	0x08010143
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3354      	adds	r3, #84	; 0x54
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a18      	ldr	r2, [pc, #96]	; (8010198 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8010136:	8812      	ldrh	r2, [r2, #0]
 8010138:	b211      	sxth	r1, r2
 801013a:	2200      	movs	r2, #0
 801013c:	6838      	ldr	r0, [r7, #0]
 801013e:	4798      	blx	r3
            break;
 8010140:	e025      	b.n	801018e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	3354      	adds	r3, #84	; 0x54
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a13      	ldr	r2, [pc, #76]	; (8010198 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 801014c:	8812      	ldrh	r2, [r2, #0]
 801014e:	4252      	negs	r2, r2
 8010150:	b292      	uxth	r2, r2
 8010152:	b211      	sxth	r1, r2
 8010154:	2200      	movs	r2, #0
 8010156:	6838      	ldr	r0, [r7, #0]
 8010158:	4798      	blx	r3
            break;
 801015a:	e018      	b.n	801018e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3354      	adds	r3, #84	; 0x54
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a0d      	ldr	r2, [pc, #52]	; (801019c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8010166:	8812      	ldrh	r2, [r2, #0]
 8010168:	4252      	negs	r2, r2
 801016a:	b292      	uxth	r2, r2
 801016c:	b212      	sxth	r2, r2
 801016e:	2100      	movs	r1, #0
 8010170:	6838      	ldr	r0, [r7, #0]
 8010172:	4798      	blx	r3
            break;
 8010174:	e00b      	b.n	801018e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3354      	adds	r3, #84	; 0x54
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a07      	ldr	r2, [pc, #28]	; (801019c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8010180:	8812      	ldrh	r2, [r2, #0]
 8010182:	b212      	sxth	r2, r2
 8010184:	2100      	movs	r1, #0
 8010186:	6838      	ldr	r0, [r7, #0]
 8010188:	4798      	blx	r3
            break;
 801018a:	e000      	b.n	801018e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 801018c:	bf00      	nop
    }
 801018e:	bf00      	nop
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	20001346 	.word	0x20001346
 801019c:	20001348 	.word	0x20001348

080101a0 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
        }
 80101aa:	bf00      	nop
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
	...

080101b8 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af02      	add	r7, sp, #8
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80101c2:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	b21a      	sxth	r2, r3
 80101c8:	4b07      	ldr	r3, [pc, #28]	; (80101e8 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	b21b      	sxth	r3, r3
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4613      	mov	r3, r2
 80101d2:	2200      	movs	r2, #0
 80101d4:	2100      	movs	r1, #0
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7fe f9f1 	bl	800e5be <_ZN8touchgfx4RectC1Essss>
        }
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	20001346 	.word	0x20001346
 80101e8:	20001348 	.word	0x20001348

080101ec <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	68d2      	ldr	r2, [r2, #12]
 80101fe:	1052      	asrs	r2, r2, #1
 8010200:	1898      	adds	r0, r3, r2
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	f003 0301 	and.w	r3, r3, #1
 801020a:	2b00      	cmp	r3, #0
 801020c:	d102      	bne.n	8010214 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	e00a      	b.n	801022a <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	68d2      	ldr	r2, [r2, #12]
 801021c:	1052      	asrs	r2, r2, #1
 801021e:	4413      	add	r3, r2
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	6892      	ldr	r2, [r2, #8]
 8010226:	4413      	add	r3, r2
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6839      	ldr	r1, [r7, #0]
 801022c:	4798      	blx	r3
    }
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8010236:	b480      	push	{r7}
 8010238:	b083      	sub	sp, #12
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d010      	beq.n	8010268 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d107      	bne.n	801025e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	f003 0301 	and.w	r3, r3, #1
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801025e:	2300      	movs	r3, #0
 8010260:	2b01      	cmp	r3, #1
 8010262:	d001      	beq.n	8010268 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8010268:	2300      	movs	r3, #0
    }
 801026a:	4618      	mov	r0, r3
 801026c:	370c      	adds	r7, #12
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
	...

08010278 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b093      	sub	sp, #76	; 0x4c
 801027c:	af02      	add	r7, sp, #8
 801027e:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7fe fc42 	bl	800eb0c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	7a9b      	ldrb	r3, [r3, #10]
 801028c:	3301      	adds	r3, #1
 801028e:	b2da      	uxtb	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7a9a      	ldrb	r2, [r3, #10]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	7a5b      	ldrb	r3, [r3, #9]
 801029c:	429a      	cmp	r2, r3
 801029e:	d82b      	bhi.n	80102f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	7a9b      	ldrb	r3, [r3, #10]
 80102a4:	b298      	uxth	r0, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	7a5b      	ldrb	r3, [r3, #9]
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	2100      	movs	r1, #0
 80102b4:	f008 fa68 	bl	8018788 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80102b8:	4603      	mov	r3, r0
 80102ba:	461a      	mov	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	f003 0301 	and.w	r3, r3, #1
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d019      	beq.n	8010306 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80102d8:	b29b      	uxth	r3, r3
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80102e0:	2a00      	cmp	r2, #0
 80102e2:	dd01      	ble.n	80102e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x70>
 80102e4:	2201      	movs	r2, #1
 80102e6:	e001      	b.n	80102ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
 80102e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ec:	4413      	add	r3, r2
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	b21a      	sxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	81da      	strh	r2, [r3, #14]
 80102f6:	e006      	b.n	8010306 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	729a      	strb	r2, [r3, #10]
            return;
 8010304:	e080      	b.n	8010408 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
                break;
            }
        case WEST:
            {
                //cover must have width of remaining part and start after uncovered
                const uint16_t prevSolidPos = solid.getX();
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	3310      	adds	r3, #16
 801030a:	4618      	mov	r0, r3
 801030c:	f7fe fa9d 	bl	800e84a <_ZNK8touchgfx8Drawable4getXEv>
 8010310:	4603      	mov	r3, r0
 8010312:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f103 0010 	add.w	r0, r3, #16
 801031a:	4b3d      	ldr	r3, [pc, #244]	; (8010410 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 801031c:	881a      	ldrh	r2, [r3, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010324:	b29b      	uxth	r3, r3
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	b29b      	uxth	r3, r3
 801032a:	b21b      	sxth	r3, r3
 801032c:	4619      	mov	r1, r3
 801032e:	f7fe fad5 	bl	800e8dc <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f103 0210 	add.w	r2, r3, #16
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801033e:	4619      	mov	r1, r3
 8010340:	4610      	mov	r0, r2
 8010342:	f7fe fa8f 	bl	800e864 <_ZN8touchgfx8Drawable4setXEs>

                //invalidate the uncovered part
                const uint16_t delta = calculatedValue - prevSolidPos;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801034c:	b29a      	uxth	r2, r3
 801034e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 8010354:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8010358:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801035c:	4b2d      	ldr	r3, [pc, #180]	; (8010414 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x19c>)
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	b21b      	sxth	r3, r3
 8010362:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010366:	9300      	str	r3, [sp, #0]
 8010368:	4613      	mov	r3, r2
 801036a:	2200      	movs	r2, #0
 801036c:	f7fe f927 	bl	800e5be <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3310      	adds	r3, #16
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010384:	4611      	mov	r1, r2
 8010386:	4798      	blx	r3
                break;
 8010388:	bf00      	nop
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        //
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	7a9b      	ldrb	r3, [r3, #10]
 801038e:	2b01      	cmp	r3, #1
 8010390:	d13a      	bne.n	8010408 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
 8010392:	4b21      	ldr	r3, [pc, #132]	; (8010418 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a0>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d036      	beq.n	8010408 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
        {
            Rect rect = solid.getRect(); //part to copy between buffers
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	3310      	adds	r3, #16
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe fa1a 	bl	800e7d8 <_ZNK8touchgfx8Drawable7getRectEv>
 80103a4:	4602      	mov	r2, r0
 80103a6:	f107 0310 	add.w	r3, r7, #16
 80103aa:	6810      	ldr	r0, [r2, #0]
 80103ac:	6851      	ldr	r1, [r2, #4]
 80103ae:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80103b0:	f7fe fb4e 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 80103b4:	4602      	mov	r2, r0
 80103b6:	6813      	ldr	r3, [r2, #0]
 80103b8:	3328      	adds	r3, #40	; 0x28
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4610      	mov	r0, r2
 80103be:	4798      	blx	r3
 80103c0:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 80103c2:	f107 0308 	add.w	r3, r7, #8
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fe f8e2 	bl	800e590 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80103cc:	2300      	movs	r3, #0
 80103ce:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80103d0:	2300      	movs	r3, #0
 80103d2:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80103d4:	4b0e      	ldr	r3, [pc, #56]	; (8010410 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b21b      	sxth	r3, r3
 80103da:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80103dc:	4b0d      	ldr	r3, [pc, #52]	; (8010414 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x19c>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	b21b      	sxth	r3, r3
 80103e2:	81fb      	strh	r3, [r7, #14]

            //Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80103e4:	f7fe fb34 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 80103e8:	f7fe fb3e 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 80103ec:	6803      	ldr	r3, [r0, #0]
 80103ee:	330c      	adds	r3, #12
 80103f0:	681c      	ldr	r4, [r3, #0]
 80103f2:	f107 0110 	add.w	r1, r7, #16
 80103f6:	f107 0208 	add.w	r2, r7, #8
 80103fa:	2300      	movs	r3, #0
 80103fc:	9301      	str	r3, [sp, #4]
 80103fe:	23ff      	movs	r3, #255	; 0xff
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	460b      	mov	r3, r1
 8010404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010406:	47a0      	blx	r4
        }
    }
 8010408:	3744      	adds	r7, #68	; 0x44
 801040a:	46bd      	mov	sp, r7
 801040c:	bd90      	pop	{r4, r7, pc}
 801040e:	bf00      	nop
 8010410:	20001346 	.word	0x20001346
 8010414:	20001348 	.word	0x20001348
 8010418:	20001350 	.word	0x20001350

0801041c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6858      	ldr	r0, [r3, #4]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3364      	adds	r3, #100	; 0x64
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	3210      	adds	r2, #16
 8010436:	4611      	mov	r1, r2
 8010438:	4798      	blx	r3
    }
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 8010442:	b580      	push	{r7, lr}
 8010444:	b082      	sub	sp, #8
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4618      	mov	r0, r3
 801044e:	f7fe fb71 	bl	800eb34 <_ZN8touchgfx10Transition4initEv>
        //add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6858      	ldr	r0, [r3, #4]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3360      	adds	r3, #96	; 0x60
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	3210      	adds	r2, #16
 8010464:	4611      	mov	r1, r2
 8010466:	4798      	blx	r3
    }
 8010468:	bf00      	nop
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    {
        //nop
    }
 8010478:	bf00      	nop
 801047a:	370c      	adds	r7, #12
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
        }
 801048e:	bf00      	nop
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr

0801049a <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 801049a:	b580      	push	{r7, lr}
 801049c:	b084      	sub	sp, #16
 801049e:	af02      	add	r7, sp, #8
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4613      	mov	r3, r2
 80104b4:	2200      	movs	r2, #0
 80104b6:	2100      	movs	r1, #0
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7fe f880 	bl	800e5be <_ZN8touchgfx4RectC1Essss>
        }
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	68d2      	ldr	r2, [r2, #12]
 80104d6:	1052      	asrs	r2, r2, #1
 80104d8:	1899      	adds	r1, r3, r2
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d102      	bne.n	80104ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	e00a      	b.n	8010502 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	68d2      	ldr	r2, [r2, #12]
 80104f4:	1052      	asrs	r2, r2, #1
 80104f6:	4413      	add	r3, r2
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	6892      	ldr	r2, [r2, #8]
 80104fe:	4413      	add	r3, r2
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4608      	mov	r0, r1
 8010504:	4798      	blx	r3
    }
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d010      	beq.n	8010540 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d107      	bne.n	8010536 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d101      	bne.n	8010536 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010532:	2301      	movs	r3, #1
 8010534:	e000      	b.n	8010538 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010536:	2300      	movs	r3, #0
 8010538:	2b01      	cmp	r3, #1
 801053a:	d001      	beq.n	8010540 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801053c:	2301      	movs	r3, #1
 801053e:	e000      	b.n	8010542 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010540:	2300      	movs	r3, #0
    }
 8010542:	4618      	mov	r0, r3
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr

0801054e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 801054e:	b480      	push	{r7}
 8010550:	b083      	sub	sp, #12
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	6039      	str	r1, [r7, #0]
        color = col;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	601a      	str	r2, [r3, #0]
    }
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	887a      	ldrh	r2, [r7, #2]
 801057c:	801a      	strh	r2, [r3, #0]
    {
    }
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
    {
 8010594:	4a06      	ldr	r2, [pc, #24]	; (80105b0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	3304      	adds	r3, #4
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 fc5c 	bl	8010e5c <_ZN8touchgfx9ContainerD1Ev>
    }
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	08053910 	.word	0x08053910

080105b4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
    }
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f7ff ffe5 	bl	801058c <_ZN8touchgfx6ScreenD1Ev>
 80105c2:	213c      	movs	r1, #60	; 0x3c
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f014 fbd1 	bl	8024d6c <_ZdlPvj>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4618      	mov	r0, r3
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    {
    }
 80105dc:	bf00      	nop
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
    {
    }
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
    {
    }
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
    {
    }
 8010618:	bf00      	nop
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr

08010624 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010624:	b480      	push	{r7}
 8010626:	b083      	sub	sp, #12
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	460b      	mov	r3, r1
 801062e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3304      	adds	r3, #4
 801064a:	6839      	ldr	r1, [r7, #0]
 801064c:	4618      	mov	r0, r3
 801064e:	f003 ffc1 	bl	80145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801065a:	b480      	push	{r7}
 801065c:	b083      	sub	sp, #12
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801066a:	bf00      	nop
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
	...

08010678 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	4a05      	ldr	r2, [pc, #20]	; (8010698 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4618      	mov	r0, r3
 801068a:	f7fe fba5 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	0805318c 	.word	0x0805318c

0801069c <_ZN8touchgfx14AbstractButtonD0Ev>:
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff ffe7 	bl	8010678 <_ZN8touchgfx14AbstractButtonD1Ev>
 80106aa:	2130      	movs	r1, #48	; 0x30
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f014 fb5d 	bl	8024d6c <_ZdlPvj>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4618      	mov	r0, r3
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4618      	mov	r0, r3
 80106c8:	2326      	movs	r3, #38	; 0x26
 80106ca:	461a      	mov	r2, r3
 80106cc:	2100      	movs	r1, #0
 80106ce:	f014 fc02 	bl	8024ed6 <memset>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fe fb6d 	bl	800edb4 <_ZN8touchgfx6WidgetC1Ev>
 80106da:	4a0b      	ldr	r2, [pc, #44]	; (8010708 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	601a      	str	r2, [r3, #0]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	22ff      	movs	r2, #255	; 0xff
 80106e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3328      	adds	r3, #40	; 0x28
 80106ec:	2100      	movs	r1, #0
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7ff ff2d 	bl	801054e <_ZN8touchgfx9colortypeC1Em>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	4618      	mov	r0, r3
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	080533d4 	.word	0x080533d4

0801070c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801071c:	bf00      	nop
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	460b      	mov	r3, r1
 8010732:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010734:	4a06      	ldr	r2, [pc, #24]	; (8010750 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	887a      	ldrh	r2, [r7, #2]
 801073e:	809a      	strh	r2, [r3, #4]
    }
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4618      	mov	r0, r3
 8010744:	370c      	adds	r7, #12
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	080511b4 	.word	0x080511b4

08010754 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4618      	mov	r0, r3
 8010760:	2326      	movs	r3, #38	; 0x26
 8010762:	461a      	mov	r2, r3
 8010764:	2100      	movs	r1, #0
 8010766:	f014 fbb6 	bl	8024ed6 <memset>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f7fe fb21 	bl	800edb4 <_ZN8touchgfx6WidgetC1Ev>
 8010772:	4a14      	ldr	r2, [pc, #80]	; (80107c4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	3328      	adds	r3, #40	; 0x28
 801077c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff ffd1 	bl	8010728 <_ZN8touchgfx9TypedTextC1Et>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3330      	adds	r3, #48	; 0x30
 801078a:	2100      	movs	r1, #0
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fede 	bl	801054e <_ZN8touchgfx9colortypeC1Em>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	869a      	strh	r2, [r3, #52]	; 0x34
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	22ff      	movs	r2, #255	; 0xff
 801079c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4618      	mov	r0, r3
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	08053328 	.word	0x08053328

080107c8 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	889a      	ldrh	r2, [r3, #4]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	809a      	strh	r2, [r3, #4]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	3334      	adds	r3, #52	; 0x34
 80107f6:	6839      	ldr	r1, [r7, #0]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ff ffe5 	bl	80107c8 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 f820 	bl	8010844 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8010804:	bf00      	nop
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	683a      	ldr	r2, [r7, #0]
 801081a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801081c:	bf00      	nop
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	683a      	ldr	r2, [r7, #0]
 8010836:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8010844:	b590      	push	{r4, r7, lr}
 8010846:	b08b      	sub	sp, #44	; 0x2c
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	3334      	adds	r3, #52	; 0x34
 8010850:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	889b      	ldrh	r3, [r3, #4]
 8010856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801085a:	4293      	cmp	r3, r2
 801085c:	bf14      	ite	ne
 801085e:	2301      	movne	r3, #1
 8010860:	2300      	moveq	r3, #0
 8010862:	b2db      	uxtb	r3, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	d06f      	beq.n	8010948 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3334      	adds	r3, #52	; 0x34
 801086c:	613b      	str	r3, [r7, #16]
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010872:	4b39      	ldr	r3, [pc, #228]	; (8010958 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d105      	bne.n	8010886 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 801087a:	4b38      	ldr	r3, [pc, #224]	; (801095c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 801087c:	4a38      	ldr	r2, [pc, #224]	; (8010960 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 801087e:	21b1      	movs	r1, #177	; 0xb1
 8010880:	4838      	ldr	r0, [pc, #224]	; (8010964 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010882:	f014 fa9f 	bl	8024dc4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	889a      	ldrh	r2, [r3, #4]
 801088a:	4b37      	ldr	r3, [pc, #220]	; (8010968 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	429a      	cmp	r2, r3
 8010890:	d305      	bcc.n	801089e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8010892:	4b36      	ldr	r3, [pc, #216]	; (801096c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8010894:	4a32      	ldr	r2, [pc, #200]	; (8010960 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010896:	21b2      	movs	r1, #178	; 0xb2
 8010898:	4832      	ldr	r0, [pc, #200]	; (8010964 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801089a:	f014 fa93 	bl	8024dc4 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 801089e:	4b34      	ldr	r3, [pc, #208]	; (8010970 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b2d      	ldr	r3, [pc, #180]	; (8010958 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80108a4:	6819      	ldr	r1, [r3, #0]
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	889b      	ldrh	r3, [r3, #4]
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	440b      	add	r3, r1
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	4413      	add	r3, r2
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	3334      	adds	r3, #52	; 0x34
 80108bc:	61bb      	str	r3, [r7, #24]
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80108c2:	4b25      	ldr	r3, [pc, #148]	; (8010958 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d105      	bne.n	80108d6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 80108ca:	4b24      	ldr	r3, [pc, #144]	; (801095c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80108cc:	4a24      	ldr	r2, [pc, #144]	; (8010960 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80108ce:	21b1      	movs	r1, #177	; 0xb1
 80108d0:	4824      	ldr	r0, [pc, #144]	; (8010964 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80108d2:	f014 fa77 	bl	8024dc4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	889a      	ldrh	r2, [r3, #4]
 80108da:	4b23      	ldr	r3, [pc, #140]	; (8010968 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d305      	bcc.n	80108ee <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 80108e2:	4b22      	ldr	r3, [pc, #136]	; (801096c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80108e4:	4a1e      	ldr	r2, [pc, #120]	; (8010960 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80108e6:	21b2      	movs	r1, #178	; 0xb2
 80108e8:	481e      	ldr	r0, [pc, #120]	; (8010964 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80108ea:	f014 fa6b 	bl	8024dc4 <__assert_func>
        return texts->getText(typedTextId);
 80108ee:	4b21      	ldr	r3, [pc, #132]	; (8010974 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	889b      	ldrh	r3, [r3, #4]
 80108f6:	4619      	mov	r1, r3
 80108f8:	4610      	mov	r0, r2
 80108fa:	f001 f89f 	bl	8011a3c <_ZNK8touchgfx5Texts7getTextEt>
 80108fe:	4603      	mov	r3, r0
 8010900:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3328      	adds	r3, #40	; 0x28
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6a39      	ldr	r1, [r7, #32]
 801090c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801090e:	4798      	blx	r3
 8010910:	4603      	mov	r3, r0
 8010912:	b2dc      	uxtb	r4, r3
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	3340      	adds	r3, #64	; 0x40
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	6a39      	ldr	r1, [r7, #32]
 801091e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010920:	4798      	blx	r3
 8010922:	4603      	mov	r3, r0
 8010924:	b2db      	uxtb	r3, r3
 8010926:	fb14 f303 	smulbb	r3, r4, r3
 801092a:	b2dc      	uxtb	r4, r3
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	3324      	adds	r3, #36	; 0x24
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6a39      	ldr	r1, [r7, #32]
 8010936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010938:	4798      	blx	r3
 801093a:	4603      	mov	r3, r0
 801093c:	4423      	add	r3, r4
 801093e:	b2da      	uxtb	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8010946:	e003      	b.n	8010950 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8010950:	bf00      	nop
 8010952:	372c      	adds	r7, #44	; 0x2c
 8010954:	46bd      	mov	sp, r7
 8010956:	bd90      	pop	{r4, r7, pc}
 8010958:	200013c4 	.word	0x200013c4
 801095c:	080262ac 	.word	0x080262ac
 8010960:	08051928 	.word	0x08051928
 8010964:	080262f0 	.word	0x080262f0
 8010968:	200013c8 	.word	0x200013c8
 801096c:	08026334 	.word	0x08026334
 8010970:	200013cc 	.word	0x200013cc
 8010974:	200013d0 	.word	0x200013d0

08010978 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	4a05      	ldr	r2, [pc, #20]	; (8010998 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fdff 	bl	801058c <_ZN8touchgfx6ScreenD1Ev>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	080518e4 	.word	0x080518e4

0801099c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7ff ffe7 	bl	8010978 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80109aa:	2140      	movs	r1, #64	; 0x40
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f014 f9dd 	bl	8024d6c <_ZdlPvj>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	4a12      	ldr	r2, [pc, #72]	; (8010a10 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 fa21 	bl	8010e18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	33f4      	adds	r3, #244	; 0xf4
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fb16 	bl	801100c <_ZN8touchgfx6SliderD1Ev>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	33ac      	adds	r3, #172	; 0xac
 80109e4:	4618      	mov	r0, r3
 80109e6:	f000 fac7 	bl	8010f78 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3370      	adds	r3, #112	; 0x70
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 fa78 	bl	8010ee4 <_ZN8touchgfx8TextAreaD1Ev>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	3340      	adds	r3, #64	; 0x40
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 fa51 	bl	8010ea0 <_ZN8touchgfx3BoxD1Ev>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff ffb9 	bl	8010978 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	08051898 	.word	0x08051898

08010a14 <_ZN15Screen1ViewBaseD0Ev>:
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff ffcd 	bl	80109bc <_ZN15Screen1ViewBaseD1Ev>
 8010a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f014 f9a0 	bl	8024d6c <_ZdlPvj>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b082      	sub	sp, #8
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010a3e:	f006 fd1f 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8010a42:	4603      	mov	r3, r0
    }
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010a4c:	b590      	push	{r4, r7, lr}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	4603      	mov	r3, r0
 8010a54:	71fb      	strb	r3, [r7, #7]
 8010a56:	460b      	mov	r3, r1
 8010a58:	71bb      	strb	r3, [r7, #6]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010a5e:	f7fd fff7 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d105      	bne.n	8010a74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010a68:	4b0a      	ldr	r3, [pc, #40]	; (8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010a6a:	4a0b      	ldr	r2, [pc, #44]	; (8010a98 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010a6c:	2135      	movs	r1, #53	; 0x35
 8010a6e:	480b      	ldr	r0, [pc, #44]	; (8010a9c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010a70:	f014 f9a8 	bl	8024dc4 <__assert_func>
 8010a74:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010a76:	f7fd fff7 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	3328      	adds	r3, #40	; 0x28
 8010a7e:	681c      	ldr	r4, [r3, #0]
 8010a80:	797b      	ldrb	r3, [r7, #5]
 8010a82:	79ba      	ldrb	r2, [r7, #6]
 8010a84:	79f9      	ldrb	r1, [r7, #7]
 8010a86:	47a0      	blx	r4
 8010a88:	4603      	mov	r3, r0
    }
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	370c      	adds	r7, #12
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	08026388 	.word	0x08026388
 8010a98:	08051958 	.word	0x08051958
 8010a9c:	080263cc 	.word	0x080263cc

08010aa0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase() :
 8010aa0:	b590      	push	{r4, r7, lr}
 8010aa2:	b095      	sub	sp, #84	; 0x54
 8010aa4:	af02      	add	r7, sp, #8
 8010aa6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 f94e 	bl	8010d4c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8010ab0:	4a94      	ldr	r2, [pc, #592]	; (8010d04 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3340      	adds	r3, #64	; 0x40
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff fdfe 	bl	80106bc <_ZN8touchgfx3BoxC1Ev>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3370      	adds	r3, #112	; 0x70
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7ff fe45 	bl	8010754 <_ZN8touchgfx8TextAreaC1Ev>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	33ac      	adds	r3, #172	; 0xac
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f005 fccc 	bl	801646c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	33f4      	adds	r3, #244	; 0xf4
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f004 f92d 	bl	8014d38 <_ZN8touchgfx6SliderC1Ev>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8010ae4:	4b88      	ldr	r3, [pc, #544]	; (8010d08 <_ZN15Screen1ViewBaseC1Ev+0x268>)
 8010ae6:	613b      	str	r3, [r7, #16]
 8010ae8:	2300      	movs	r3, #0
 8010aea:	617b      	str	r3, [r7, #20]
 8010aec:	f107 0310 	add.w	r3, r7, #16
 8010af0:	cb0c      	ldmia	r3, {r2, r3}
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	f000 f950 	bl	8010d98 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010afe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010b02:	9300      	str	r3, [sp, #0]
 8010b04:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010b08:	2200      	movs	r2, #0
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	f7fd fe70 	bl	800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010b16:	2200      	movs	r2, #0
 8010b18:	2100      	movs	r1, #0
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	f7ff ff96 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b20:	4603      	mov	r3, r0
 8010b22:	4619      	mov	r1, r3
 8010b24:	4620      	mov	r0, r4
 8010b26:	f7ff fdf1 	bl	801070c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(247, 94);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	3370      	adds	r3, #112	; 0x70
 8010b2e:	225e      	movs	r2, #94	; 0x5e
 8010b30:	21f7      	movs	r1, #247	; 0xf7
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fd feb4 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(242, 12, 12));
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010b3e:	220c      	movs	r2, #12
 8010b40:	210c      	movs	r1, #12
 8010b42:	20f2      	movs	r0, #242	; 0xf2
 8010b44:	f7ff ff82 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	63fc      	str	r4, [r7, #60]	; 0x3c
 8010b4c:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8010b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3370      	adds	r3, #112	; 0x70
 8010b58:	647b      	str	r3, [r7, #68]	; 0x44
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8010b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b66:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010b6e:	f107 0318 	add.w	r3, r7, #24
 8010b72:	2102      	movs	r1, #2
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7ff fdd7 	bl	8010728 <_ZN8touchgfx9TypedTextC1Et>
 8010b7a:	f107 0318 	add.w	r3, r7, #24
 8010b7e:	4619      	mov	r1, r3
 8010b80:	4620      	mov	r0, r4
 8010b82:	f005 fa49 	bl	8016018 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010b86:	f107 0318 	add.w	r3, r7, #24
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fd fae2 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>

    btnHome.setXY(630, 420);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	33ac      	adds	r3, #172	; 0xac
 8010b94:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8010b98:	f240 2176 	movw	r1, #630	; 0x276
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fd fe7f 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    btnHome.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010ba8:	f107 0320 	add.w	r3, r7, #32
 8010bac:	2100      	movs	r1, #0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff fcdc 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8010bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb8:	2101      	movs	r1, #1
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fcd6 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8010bc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010bc4:	f107 0320 	add.w	r3, r7, #32
 8010bc8:	4619      	mov	r1, r3
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f005 fa5e 	bl	801608c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnHome.setLabelText(touchgfx::TypedText(T_SINGLEUSEID6));
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bda:	2103      	movs	r1, #3
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff fda3 	bl	8010728 <_ZN8touchgfx9TypedTextC1Et>
 8010be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010be6:	4619      	mov	r1, r3
 8010be8:	4620      	mov	r0, r4
 8010bea:	f7ff fdfd 	bl	80107e8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fd faae 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>
    btnHome.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010bfe:	22ff      	movs	r2, #255	; 0xff
 8010c00:	21ff      	movs	r1, #255	; 0xff
 8010c02:	20ff      	movs	r0, #255	; 0xff
 8010c04:	f7ff ff22 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f7ff fdfd 	bl	801080c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    btnHome.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010c18:	22ff      	movs	r2, #255	; 0xff
 8010c1a:	21ff      	movs	r1, #255	; 0xff
 8010c1c:	20ff      	movs	r0, #255	; 0xff
 8010c1e:	f7ff ff15 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c22:	4603      	mov	r3, r0
 8010c24:	4619      	mov	r1, r3
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7ff fdfe 	bl	8010828 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    btnHome.setAction(buttonCallback);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8010c38:	4619      	mov	r1, r3
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	f7ff fd0d 	bl	801065a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    slider1.setXY(71, 305);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	33f4      	adds	r3, #244	; 0xf4
 8010c44:	f240 1231 	movw	r2, #305	; 0x131
 8010c48:	2147      	movs	r1, #71	; 0x47
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fd fe28 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8010c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c5a:	2103      	movs	r1, #3
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fc85 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8010c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c66:	2104      	movs	r1, #4
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff fc7f 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8010c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010c72:	2102      	movs	r1, #2
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fc79 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8010c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010c7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010c82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010c86:	4620      	mov	r0, r4
 8010c88:	f004 f8aa 	bl	8014de0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(2, 22, 0, 0, 621);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8010c92:	f240 236d 	movw	r3, #621	; 0x26d
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	2300      	movs	r3, #0
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	2216      	movs	r2, #22
 8010ca0:	2102      	movs	r1, #2
 8010ca2:	f003 fedf 	bl	8014a64 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 100);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	33f4      	adds	r3, #244	; 0xf4
 8010caa:	2264      	movs	r2, #100	; 0x64
 8010cac:	2100      	movs	r1, #0
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f003 fe43 	bl	801493a <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	33f4      	adds	r3, #244	; 0xf4
 8010cb8:	2100      	movs	r1, #0
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f003 fdc9 	bl	8014852 <_ZN8touchgfx6Slider8setValueEi>

    add(__background);
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	3340      	adds	r3, #64	; 0x40
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	4610      	mov	r0, r2
 8010cca:	f7ff fcb7 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3370      	adds	r3, #112	; 0x70
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	f7ff fcb0 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnHome);
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	33ac      	adds	r3, #172	; 0xac
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	f7ff fca9 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider1);
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	33f4      	adds	r3, #244	; 0xf4
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	4610      	mov	r0, r2
 8010cf4:	f7ff fca2 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	374c      	adds	r7, #76	; 0x4c
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd90      	pop	{r4, r7, pc}
 8010d02:	bf00      	nop
 8010d04:	08051898 	.word	0x08051898
 8010d08:	08010d21 	.word	0x08010d21

08010d0c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]

}
 8010d14:	bf00      	nop
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
    if (&src == &btnHome)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	33ac      	adds	r3, #172	; 0xac
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d106      	bne.n	8010d42 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When btnHome clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff fe7e 	bl	8010a36 <_ZN15Screen1ViewBase11applicationEv>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fe f90f 	bl	800ef60 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f007 fb94 	bl	8018484 <_ZN8touchgfx6ScreenC1Ev>
 8010d5c:	4a05      	ldr	r2, [pc, #20]	; (8010d74 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	080518e4 	.word	0x080518e4

08010d78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	4a04      	ldr	r2, [pc, #16]	; (8010d94 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	08051918 	.word	0x08051918

08010d98 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	4639      	mov	r1, r7
 8010da4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff ffe4 	bl	8010d78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010db0:	4a08      	ldr	r2, [pc, #32]	; (8010dd4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	3308      	adds	r3, #8
 8010dc0:	463a      	mov	r2, r7
 8010dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dc6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	080518cc 	.word	0x080518cc

08010dd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
    }
 8010de0:	4a04      	ldr	r2, [pc, #16]	; (8010df4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr
 8010df4:	08051918 	.word	0x08051918

08010df8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
    }
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7ff ffe9 	bl	8010dd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010e06:	2104      	movs	r1, #4
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f013 ffaf 	bl	8024d6c <_ZdlPvj>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	4a05      	ldr	r2, [pc, #20]	; (8010e38 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff ffd5 	bl	8010dd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4618      	mov	r0, r3
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	080518cc 	.word	0x080518cc

08010e3c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7ff ffe7 	bl	8010e18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010e4a:	2110      	movs	r1, #16
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f013 ff8d 	bl	8024d6c <_ZdlPvj>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4618      	mov	r0, r3
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	4a05      	ldr	r2, [pc, #20]	; (8010e7c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fd fc93 	bl	800e798 <_ZN8touchgfx8DrawableD1Ev>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	080524f0 	.word	0x080524f0

08010e80 <_ZN8touchgfx9ContainerD0Ev>:
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7ff ffe7 	bl	8010e5c <_ZN8touchgfx9ContainerD1Ev>
 8010e8e:	212c      	movs	r1, #44	; 0x2c
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f013 ff6b 	bl	8024d6c <_ZdlPvj>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3708      	adds	r7, #8
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	4a05      	ldr	r2, [pc, #20]	; (8010ec0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fd ff91 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	080533d4 	.word	0x080533d4

08010ec4 <_ZN8touchgfx3BoxD0Ev>:
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff ffe7 	bl	8010ea0 <_ZN8touchgfx3BoxD1Ev>
 8010ed2:	2130      	movs	r1, #48	; 0x30
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f013 ff49 	bl	8024d6c <_ZdlPvj>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	4a08      	ldr	r2, [pc, #32]	; (8010f10 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	3328      	adds	r3, #40	; 0x28
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fd f92c 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fd ff6a 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	08053328 	.word	0x08053328

08010f14 <_ZN8touchgfx8TextAreaD0Ev>:
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff ffe1 	bl	8010ee4 <_ZN8touchgfx8TextAreaD1Ev>
 8010f22:	213c      	movs	r1, #60	; 0x3c
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f013 ff21 	bl	8024d6c <_ZdlPvj>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	4a05      	ldr	r2, [pc, #20]	; (8010f54 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	601a      	str	r2, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fb97 	bl	8010678 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}
 8010f54:	080534a0 	.word	0x080534a0

08010f58 <_ZN8touchgfx6ButtonD0Ev>:
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7ff ffe7 	bl	8010f34 <_ZN8touchgfx6ButtonD1Ev>
 8010f66:	2134      	movs	r1, #52	; 0x34
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f013 feff 	bl	8024d6c <_ZdlPvj>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	4a08      	ldr	r2, [pc, #32]	; (8010fa4 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3334      	adds	r3, #52	; 0x34
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fd f8e2 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff ffce 	bl	8010f34 <_ZN8touchgfx6ButtonD1Ev>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	080535b0 	.word	0x080535b0

08010fa8 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7ff ffe1 	bl	8010f78 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010fb6:	2148      	movs	r1, #72	; 0x48
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f013 fed7 	bl	8024d6c <_ZdlPvj>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	4a05      	ldr	r2, [pc, #20]	; (8010fe8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	601a      	str	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fd fefd 	bl	800edd8 <_ZN8touchgfx6WidgetD1Ev>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	08053544 	.word	0x08053544

08010fec <_ZN8touchgfx5ImageD0Ev>:
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff ffe7 	bl	8010fc8 <_ZN8touchgfx5ImageD1Ev>
 8010ffa:	212c      	movs	r1, #44	; 0x2c
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f013 feb5 	bl	8024d6c <_ZdlPvj>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZN8touchgfx6SliderD1Ev>:
 * indicator. The other is used on the other side. They can be used in indicating the
 * part of the slider value range that is currently selected.
 *
 * The slider operates on an integer value range that can be set by the user.
 */
class Slider : public Container
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	4a0f      	ldr	r2, [pc, #60]	; (8011054 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	33c0      	adds	r3, #192	; 0xc0
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff ff1c 	bl	8010e5c <_ZN8touchgfx9ContainerD1Ev>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3394      	adds	r3, #148	; 0x94
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff ffcd 	bl	8010fc8 <_ZN8touchgfx5ImageD1Ev>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	3368      	adds	r3, #104	; 0x68
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff ffc8 	bl	8010fc8 <_ZN8touchgfx5ImageD1Ev>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	333c      	adds	r3, #60	; 0x3c
 801103c:	4618      	mov	r0, r3
 801103e:	f7ff ffc3 	bl	8010fc8 <_ZN8touchgfx5ImageD1Ev>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff ff09 	bl	8010e5c <_ZN8touchgfx9ContainerD1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	08052804 	.word	0x08052804

08011058 <_ZN8touchgfx6SliderD0Ev>:
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f7ff ffd3 	bl	801100c <_ZN8touchgfx6SliderD1Ev>
 8011066:	21fc      	movs	r1, #252	; 0xfc
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f013 fe7f 	bl	8024d6c <_ZdlPvj>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	68d2      	ldr	r2, [r2, #12]
 801108a:	1052      	asrs	r2, r2, #1
 801108c:	1898      	adds	r0, r3, r2
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	f003 0301 	and.w	r3, r3, #1
 8011096:	2b00      	cmp	r3, #0
 8011098:	d102      	bne.n	80110a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	e00a      	b.n	80110b6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	68d2      	ldr	r2, [r2, #12]
 80110a8:	1052      	asrs	r2, r2, #1
 80110aa:	4413      	add	r3, r2
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	6892      	ldr	r2, [r2, #8]
 80110b2:	4413      	add	r3, r2
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	6839      	ldr	r1, [r7, #0]
 80110b8:	4798      	blx	r3
    }
 80110ba:	bf00      	nop
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80110c2:	b480      	push	{r7}
 80110c4:	b083      	sub	sp, #12
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d010      	beq.n	80110f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d107      	bne.n	80110ea <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d101      	bne.n	80110ea <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80110e6:	2301      	movs	r3, #1
 80110e8:	e000      	b.n	80110ec <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80110ea:	2300      	movs	r3, #0
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d001      	beq.n	80110f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80110f0:	2301      	movs	r3, #1
 80110f2:	e000      	b.n	80110f6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80110f4:	2300      	movs	r3, #0
    }
 80110f6:	4618      	mov	r0, r3
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr

08011102 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8011102:	b480      	push	{r7}
 8011104:	b083      	sub	sp, #12
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
 801110a:	460b      	mov	r3, r1
 801110c:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	78fa      	ldrb	r2, [r7, #3]
 8011112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8011116:	bf00      	nop
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
	...

08011124 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4618      	mov	r0, r3
 8011130:	2326      	movs	r3, #38	; 0x26
 8011132:	461a      	mov	r2, r3
 8011134:	2100      	movs	r1, #0
 8011136:	f013 fece 	bl	8024ed6 <memset>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	f7fd fe39 	bl	800edb4 <_ZN8touchgfx6WidgetC1Ev>
 8011142:	4a0a      	ldr	r2, [pc, #40]	; (801116c <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	629a      	str	r2, [r3, #40]	; 0x28
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2101      	movs	r1, #1
 801115a:	4618      	mov	r0, r3
 801115c:	f7ff ffd1 	bl	8011102 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	3708      	adds	r7, #8
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	0805318c 	.word	0x0805318c

08011170 <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7ff ffd2 	bl	8011124 <_ZN8touchgfx14AbstractButtonC1Ev>
 8011180:	4a0c      	ldr	r2, [pc, #48]	; (80111b4 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	332e      	adds	r3, #46	; 0x2e
 801118a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff f9ec 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3330      	adds	r3, #48	; 0x30
 8011198:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801119c:	4618      	mov	r0, r3
 801119e:	f7ff f9e5 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	22ff      	movs	r2, #255	; 0xff
 80111a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	080534a0 	.word	0x080534a0

080111b8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	8812      	ldrh	r2, [r2, #0]
 80111ca:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	68b9      	ldr	r1, [r7, #8]
 80111d2:	4618      	mov	r0, r3
 80111d4:	f004 ff5a 	bl	801608c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 80111d8:	bf00      	nop
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	4a05      	ldr	r2, [pc, #20]	; (8011200 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	601a      	str	r2, [r3, #0]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7ff f9cb 	bl	801058c <_ZN8touchgfx6ScreenD1Ev>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	08051a0c 	.word	0x08051a0c

08011204 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ffe7 	bl	80111e0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8011212:	2140      	movs	r1, #64	; 0x40
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f013 fda9 	bl	8024d6c <_ZdlPvj>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	4a12      	ldr	r2, [pc, #72]	; (8011278 <_ZN14screenViewBaseD1Ev+0x54>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	601a      	str	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011238:	4618      	mov	r0, r3
 801123a:	f000 f9dd 	bl	80115f8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	33f0      	adds	r3, #240	; 0xf0
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fe4e 	bl	8010ee4 <_ZN8touchgfx8TextAreaD1Ev>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	33a8      	adds	r3, #168	; 0xa8
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fe93 	bl	8010f78 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3370      	adds	r3, #112	; 0x70
 8011256:	4618      	mov	r0, r3
 8011258:	f000 f9f0 	bl	801163c <_ZN8touchgfx12ToggleButtonD1Ev>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	3340      	adds	r3, #64	; 0x40
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff fe1d 	bl	8010ea0 <_ZN8touchgfx3BoxD1Ev>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff ffb9 	bl	80111e0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	080519bc 	.word	0x080519bc

0801127c <_ZN14screenViewBaseD0Ev>:
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff ffcd 	bl	8011224 <_ZN14screenViewBaseD1Ev>
 801128a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f013 fd6c 	bl	8024d6c <_ZdlPvj>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4618      	mov	r0, r3
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <_ZN14screenViewBase11clickBtnTogEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void clickBtnTog()
 801129e:	b480      	push	{r7}
 80112a0:	b083      	sub	sp, #12
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr

080112b2 <_ZN14screenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80112ba:	f006 f8e1 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 80112be:	4603      	mov	r3, r0
    }
 80112c0:	4618      	mov	r0, r3
 80112c2:	3708      	adds	r7, #8
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff ff4c 	bl	8011170 <_ZN8touchgfx6ButtonC1Ev>
 80112d8:	4a07      	ldr	r2, [pc, #28]	; (80112f8 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	3334      	adds	r3, #52	; 0x34
 80112e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7ff f940 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4618      	mov	r0, r3
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	080531f8 	.word	0x080531f8

080112fc <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80112fc:	b590      	push	{r4, r7, lr}
 80112fe:	b093      	sub	sp, #76	; 0x4c
 8011300:	af02      	add	r7, sp, #8
 8011302:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4618      	mov	r0, r3
 8011308:	f000 f940 	bl	801158c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 801130c:	4a87      	ldr	r2, [pc, #540]	; (801152c <_ZN14screenViewBaseC1Ev+0x230>)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	3340      	adds	r3, #64	; 0x40
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff f9d0 	bl	80106bc <_ZN8touchgfx3BoxC1Ev>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	3370      	adds	r3, #112	; 0x70
 8011320:	4618      	mov	r0, r3
 8011322:	f7ff ffd1 	bl	80112c8 <_ZN8touchgfx12ToggleButtonC1Ev>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	33a8      	adds	r3, #168	; 0xa8
 801132a:	4618      	mov	r0, r3
 801132c:	f005 f89e 	bl	801646c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	33f0      	adds	r3, #240	; 0xf0
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fa0d 	bl	8010754 <_ZN8touchgfx8TextAreaC1Ev>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8011340:	4b7b      	ldr	r3, [pc, #492]	; (8011530 <_ZN14screenViewBaseC1Ev+0x234>)
 8011342:	60fb      	str	r3, [r7, #12]
 8011344:	2300      	movs	r3, #0
 8011346:	613b      	str	r3, [r7, #16]
 8011348:	f107 030c 	add.w	r3, r7, #12
 801134c:	cb0c      	ldmia	r3, {r2, r3}
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	f000 f932 	bl	80115b8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801135a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011364:	2200      	movs	r2, #0
 8011366:	2100      	movs	r1, #0
 8011368:	f7fd fa42 	bl	800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011372:	2200      	movs	r2, #0
 8011374:	2100      	movs	r1, #0
 8011376:	2000      	movs	r0, #0
 8011378:	f7ff fb68 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801137c:	4603      	mov	r3, r0
 801137e:	4619      	mov	r1, r3
 8011380:	4620      	mov	r0, r4
 8011382:	f7ff f9c3 	bl	801070c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    btnTog.setXY(580, 118);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3370      	adds	r3, #112	; 0x70
 801138a:	2276      	movs	r2, #118	; 0x76
 801138c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8011390:	4618      	mov	r0, r3
 8011392:	f7fd fa85 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    btnTog.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_ON_ID));
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801139c:	f107 0314 	add.w	r3, r7, #20
 80113a0:	2105      	movs	r1, #5
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff f8e2 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 80113a8:	f107 0318 	add.w	r3, r7, #24
 80113ac:	2106      	movs	r1, #6
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff f8dc 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 80113b4:	f107 0218 	add.w	r2, r7, #24
 80113b8:	f107 0314 	add.w	r3, r7, #20
 80113bc:	4619      	mov	r1, r3
 80113be:	4620      	mov	r0, r4
 80113c0:	f7ff fefa 	bl	80111b8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    btnTog.setAction(buttonCallback);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80113d0:	4619      	mov	r1, r3
 80113d2:	4610      	mov	r0, r2
 80113d4:	f7ff f941 	bl	801065a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    btnPage2.setXY(630, 420);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	33a8      	adds	r3, #168	; 0xa8
 80113dc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80113e0:	f240 2176 	movw	r1, #630	; 0x276
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fd fa5b 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    btnPage2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80113f0:	f107 031c 	add.w	r3, r7, #28
 80113f4:	2100      	movs	r1, #0
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7ff f8b8 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 80113fc:	f107 0320 	add.w	r3, r7, #32
 8011400:	2101      	movs	r1, #1
 8011402:	4618      	mov	r0, r3
 8011404:	f7ff f8b2 	bl	801056c <_ZN8touchgfx6BitmapC1Et>
 8011408:	f107 0220 	add.w	r2, r7, #32
 801140c:	f107 031c 	add.w	r3, r7, #28
 8011410:	4619      	mov	r1, r3
 8011412:	4620      	mov	r0, r4
 8011414:	f004 fe3a 	bl	801608c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnPage2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 801141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011422:	2100      	movs	r1, #0
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff f97f 	bl	8010728 <_ZN8touchgfx9TypedTextC1Et>
 801142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801142e:	4619      	mov	r1, r3
 8011430:	4620      	mov	r0, r4
 8011432:	f7ff f9d9 	bl	80107e8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8011436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801143a:	4618      	mov	r0, r3
 801143c:	f7fc fe8a 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>
    btnPage2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(219, 219, 219));
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8011446:	22db      	movs	r2, #219	; 0xdb
 8011448:	21db      	movs	r1, #219	; 0xdb
 801144a:	20db      	movs	r0, #219	; 0xdb
 801144c:	f7ff fafe 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011450:	4603      	mov	r3, r0
 8011452:	4619      	mov	r1, r3
 8011454:	4620      	mov	r0, r4
 8011456:	f7ff f9d9 	bl	801080c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    btnPage2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8011460:	22ff      	movs	r2, #255	; 0xff
 8011462:	21ff      	movs	r1, #255	; 0xff
 8011464:	20ff      	movs	r0, #255	; 0xff
 8011466:	f7ff faf1 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801146a:	4603      	mov	r3, r0
 801146c:	4619      	mov	r1, r3
 801146e:	4620      	mov	r0, r4
 8011470:	f7ff f9da 	bl	8010828 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    btnPage2.setAction(buttonCallback);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011480:	4619      	mov	r1, r3
 8011482:	4610      	mov	r0, r2
 8011484:	f7ff f8e9 	bl	801065a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(229, 26);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	33f0      	adds	r3, #240	; 0xf0
 801148c:	221a      	movs	r2, #26
 801148e:	21e5      	movs	r1, #229	; 0xe5
 8011490:	4618      	mov	r0, r3
 8011492:	f7fd fa05 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(245, 245, 245));
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 801149c:	22f5      	movs	r2, #245	; 0xf5
 801149e:	21f5      	movs	r1, #245	; 0xf5
 80114a0:	20f5      	movs	r0, #245	; 0xf5
 80114a2:	f7ff fad3 	bl	8010a4c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114a6:	4603      	mov	r3, r0
 80114a8:	637c      	str	r4, [r7, #52]	; 0x34
 80114aa:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80114ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	33f0      	adds	r3, #240	; 0xf0
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114b8:	2300      	movs	r3, #0
 80114ba:	877b      	strh	r3, [r7, #58]	; 0x3a
        linespace = space;
 80114bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80114c0:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80114c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114cc:	2101      	movs	r1, #1
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7ff f92a 	bl	8010728 <_ZN8touchgfx9TypedTextC1Et>
 80114d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114d8:	4619      	mov	r1, r3
 80114da:	4620      	mov	r0, r4
 80114dc:	f004 fd9c 	bl	8016018 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80114e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fc fe35 	bl	800e154 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	3340      	adds	r3, #64	; 0x40
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7ff f8a2 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnTog);
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	3370      	adds	r3, #112	; 0x70
 80114fe:	4619      	mov	r1, r3
 8011500:	4610      	mov	r0, r2
 8011502:	f7ff f89b 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnPage2);
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	33a8      	adds	r3, #168	; 0xa8
 801150c:	4619      	mov	r1, r3
 801150e:	4610      	mov	r0, r2
 8011510:	f7ff f894 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	33f0      	adds	r3, #240	; 0xf0
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f7ff f88d 	bl	801063c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4618      	mov	r0, r3
 8011526:	3744      	adds	r7, #68	; 0x44
 8011528:	46bd      	mov	sp, r7
 801152a:	bd90      	pop	{r4, r7, pc}
 801152c:	080519bc 	.word	0x080519bc
 8011530:	08011549 	.word	0x08011549

08011534 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]

}
 801153c:	bf00      	nop
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
    if (&src == &btnTog)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	3370      	adds	r3, #112	; 0x70
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	429a      	cmp	r2, r3
 801155a:	d106      	bne.n	801156a <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When btnTog clicked call virtual function
        //Call clickBtnTog
        clickBtnTog();
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	332c      	adds	r3, #44	; 0x2c
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	4798      	blx	r3
        //Interaction1
        //When btnPage2 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenWipeTransitionWest();
    }
}
 8011568:	e00b      	b.n	8011582 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    else if (&src == &btnPage2)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	33a8      	adds	r3, #168	; 0xa8
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	d106      	bne.n	8011582 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        application().gotoScreen1ScreenWipeTransitionWest();
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7ff fe9c 	bl	80112b2 <_ZN14screenViewBase11applicationEv>
 801157a:	4603      	mov	r3, r0
 801157c:	4618      	mov	r0, r3
 801157e:	f7fd fd35 	bl	800efec <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>
}
 8011582:	bf00      	nop
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
	...

0801158c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	f006 ff74 	bl	8018484 <_ZN8touchgfx6ScreenC1Ev>
 801159c:	4a05      	ldr	r2, [pc, #20]	; (80115b4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	601a      	str	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	08051a0c 	.word	0x08051a0c

080115b8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	4639      	mov	r1, r7
 80115c4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff fbd4 	bl	8010d78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80115d0:	4a08      	ldr	r2, [pc, #32]	; (80115f4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	68ba      	ldr	r2, [r7, #8]
 80115da:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	3308      	adds	r3, #8
 80115e0:	463a      	mov	r2, r7
 80115e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	4618      	mov	r0, r3
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	080519f4 	.word	0x080519f4

080115f8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	4a05      	ldr	r2, [pc, #20]	; (8011618 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff fbe5 	bl	8010dd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	080519f4 	.word	0x080519f4

0801161c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff ffe7 	bl	80115f8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801162a:	2110      	movs	r1, #16
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f013 fb9d 	bl	8024d6c <_ZdlPvj>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4618      	mov	r0, r3
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <_ZN8touchgfx12ToggleButtonD1Ev>:
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	4a05      	ldr	r2, [pc, #20]	; (801165c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	601a      	str	r2, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4618      	mov	r0, r3
 801164e:	f7ff fc71 	bl	8010f34 <_ZN8touchgfx6ButtonD1Ev>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	080531f8 	.word	0x080531f8

08011660 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7ff ffe7 	bl	801163c <_ZN8touchgfx12ToggleButtonD1Ev>
 801166e:	2138      	movs	r1, #56	; 0x38
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f013 fb7b 	bl	8024d6c <_ZdlPvj>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	68d2      	ldr	r2, [r2, #12]
 8011692:	1052      	asrs	r2, r2, #1
 8011694:	1898      	adds	r0, r3, r2
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	f003 0301 	and.w	r3, r3, #1
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d102      	bne.n	80116a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	e00a      	b.n	80116be <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	68d2      	ldr	r2, [r2, #12]
 80116b0:	1052      	asrs	r2, r2, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	6892      	ldr	r2, [r2, #8]
 80116ba:	4413      	add	r3, r2
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	6839      	ldr	r1, [r7, #0]
 80116c0:	4798      	blx	r3
    }
 80116c2:	bf00      	nop
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80116ca:	b480      	push	{r7}
 80116cc:	b083      	sub	sp, #12
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d010      	beq.n	80116fc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	f003 0301 	and.w	r3, r3, #1
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d101      	bne.n	80116f2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80116ee:	2301      	movs	r3, #1
 80116f0:	e000      	b.n	80116f4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80116f2:	2300      	movs	r3, #0
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d001      	beq.n	80116fc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80116f8:	2301      	movs	r3, #1
 80116fa:	e000      	b.n	80116fe <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80116fc:	2300      	movs	r3, #0
    }
 80116fe:	4618      	mov	r0, r3
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
	...

0801170c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801170c:	b480      	push	{r7}
 801170e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011710:	4b02      	ldr	r3, [pc, #8]	; (801171c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011712:	4618      	mov	r0, r3
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	08051a38 	.word	0x08051a38

08011720 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011720:	b480      	push	{r7}
 8011722:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011724:	2307      	movs	r3, #7
}
 8011726:	4618      	mov	r0, r3
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	460b      	mov	r3, r1
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801173e:	2300      	movs	r3, #0
    }
 8011740:	4618      	mov	r0, r3
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011754:	2300      	movs	r3, #0
    }
 8011756:	4618      	mov	r0, r3
 8011758:	370c      	adds	r7, #12
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
	...

08011764 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	4613      	mov	r3, r2
 8011770:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8011772:	4a07      	ldr	r2, [pc, #28]	; (8011790 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011778:	4a06      	ldr	r2, [pc, #24]	; (8011794 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801177e:	4a06      	ldr	r2, [pc, #24]	; (8011798 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011780:	88fb      	ldrh	r3, [r7, #6]
 8011782:	8013      	strh	r3, [r2, #0]
    }
 8011784:	bf00      	nop
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	200013c4 	.word	0x200013c4
 8011794:	200013cc 	.word	0x200013cc
 8011798:	200013c8 	.word	0x200013c8

0801179c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801179c:	b40e      	push	{r1, r2, r3}
 801179e:	b580      	push	{r7, lr}
 80117a0:	b085      	sub	sp, #20
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80117a6:	f107 0320 	add.w	r3, r7, #32
 80117aa:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	2100      	movs	r1, #0
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f006 fa2a 	bl	8017c0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80117b8:	4603      	mov	r3, r0
 80117ba:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80117bc:	89fb      	ldrh	r3, [r7, #14]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3714      	adds	r7, #20
 80117c2:	46bd      	mov	sp, r7
 80117c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80117c8:	b003      	add	sp, #12
 80117ca:	4770      	bx	lr

080117cc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80117cc:	b40c      	push	{r2, r3}
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b084      	sub	sp, #16
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
 80117d6:	460b      	mov	r3, r1
 80117d8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80117da:	f107 031c 	add.w	r3, r7, #28
 80117de:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80117e0:	78f9      	ldrb	r1, [r7, #3]
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	69ba      	ldr	r2, [r7, #24]
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f006 fa10 	bl	8017c0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80117ec:	4603      	mov	r3, r0
 80117ee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80117f0:	89fb      	ldrh	r3, [r7, #14]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80117fc:	b002      	add	sp, #8
 80117fe:	4770      	bx	lr

08011800 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b08a      	sub	sp, #40	; 0x28
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	460b      	mov	r3, r1
 801180a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011810:	2b00      	cmp	r3, #0
 8011812:	d016      	beq.n	8011842 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	331a      	adds	r3, #26
 8011818:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181c:	8adb      	ldrh	r3, [r3, #22]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d105      	bne.n	801182e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011822:	4b42      	ldr	r3, [pc, #264]	; (801192c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8011824:	4a42      	ldr	r2, [pc, #264]	; (8011930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011826:	21c0      	movs	r1, #192	; 0xc0
 8011828:	4842      	ldr	r0, [pc, #264]	; (8011934 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801182a:	f013 facb 	bl	8024dc4 <__assert_func>
            return buffer[pos];
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	8a9b      	ldrh	r3, [r3, #20]
 8011832:	461a      	mov	r2, r3
 8011834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011836:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801183e:	2301      	movs	r3, #1
 8011840:	e000      	b.n	8011844 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011842:	2300      	movs	r3, #0
 8011844:	2b00      	cmp	r3, #0
 8011846:	d068      	beq.n	801191a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f007 fd25 	bl	8019298 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	331a      	adds	r3, #26
 8011852:	623b      	str	r3, [r7, #32]
 8011854:	2301      	movs	r3, #1
 8011856:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	8adb      	ldrh	r3, [r3, #22]
 801185c:	8bfa      	ldrh	r2, [r7, #30]
 801185e:	429a      	cmp	r2, r3
 8011860:	d305      	bcc.n	801186e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011862:	4b35      	ldr	r3, [pc, #212]	; (8011938 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011864:	4a35      	ldr	r2, [pc, #212]	; (801193c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011866:	21c5      	movs	r1, #197	; 0xc5
 8011868:	4832      	ldr	r0, [pc, #200]	; (8011934 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801186a:	f013 faab 	bl	8024dc4 <__assert_func>
            const uint16_t index = pos + offset;
 801186e:	6a3b      	ldr	r3, [r7, #32]
 8011870:	8a9a      	ldrh	r2, [r3, #20]
 8011872:	8bfb      	ldrh	r3, [r7, #30]
 8011874:	4413      	add	r3, r2
 8011876:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011878:	8bbb      	ldrh	r3, [r7, #28]
 801187a:	2b09      	cmp	r3, #9
 801187c:	d801      	bhi.n	8011882 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801187e:	8bbb      	ldrh	r3, [r7, #28]
 8011880:	e001      	b.n	8011886 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011882:	8bbb      	ldrh	r3, [r7, #28]
 8011884:	3b0a      	subs	r3, #10
 8011886:	6a3a      	ldr	r2, [r7, #32]
 8011888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801188c:	f640 123f 	movw	r2, #2367	; 0x93f
 8011890:	4293      	cmp	r3, r2
 8011892:	bf0c      	ite	eq
 8011894:	2301      	moveq	r3, #1
 8011896:	2300      	movne	r3, #0
 8011898:	b2db      	uxtb	r3, r3
 801189a:	2b00      	cmp	r3, #0
 801189c:	d03d      	beq.n	801191a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	331a      	adds	r3, #26
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	321a      	adds	r2, #26
 80118a6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80118a8:	68ba      	ldr	r2, [r7, #8]
 80118aa:	8ad2      	ldrh	r2, [r2, #22]
 80118ac:	2a00      	cmp	r2, #0
 80118ae:	d105      	bne.n	80118bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80118b0:	4b1e      	ldr	r3, [pc, #120]	; (801192c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80118b2:	4a1f      	ldr	r2, [pc, #124]	; (8011930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80118b4:	21c0      	movs	r1, #192	; 0xc0
 80118b6:	481f      	ldr	r0, [pc, #124]	; (8011934 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80118b8:	f013 fa84 	bl	8024dc4 <__assert_func>
            return buffer[pos];
 80118bc:	68ba      	ldr	r2, [r7, #8]
 80118be:	8a92      	ldrh	r2, [r2, #20]
 80118c0:	4611      	mov	r1, r2
 80118c2:	68ba      	ldr	r2, [r7, #8]
 80118c4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80118c8:	613b      	str	r3, [r7, #16]
 80118ca:	4613      	mov	r3, r2
 80118cc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	8adb      	ldrh	r3, [r3, #22]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d806      	bhi.n	80118e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80118d6:	4b1a      	ldr	r3, [pc, #104]	; (8011940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80118d8:	4a1a      	ldr	r2, [pc, #104]	; (8011944 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80118da:	f240 110d 	movw	r1, #269	; 0x10d
 80118de:	4815      	ldr	r0, [pc, #84]	; (8011934 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80118e0:	f013 fa70 	bl	8024dc4 <__assert_func>
            const uint16_t index = pos + 1;
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	8a9b      	ldrh	r3, [r3, #20]
 80118e8:	3301      	adds	r3, #1
 80118ea:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80118ec:	89bb      	ldrh	r3, [r7, #12]
 80118ee:	2b09      	cmp	r3, #9
 80118f0:	d801      	bhi.n	80118f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80118f2:	89bb      	ldrh	r3, [r7, #12]
 80118f4:	e000      	b.n	80118f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80118f6:	2300      	movs	r3, #0
 80118f8:	693a      	ldr	r2, [r7, #16]
 80118fa:	89f9      	ldrh	r1, [r7, #14]
 80118fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	331a      	adds	r3, #26
 8011904:	61bb      	str	r3, [r7, #24]
 8011906:	f640 133f 	movw	r3, #2367	; 0x93f
 801190a:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	8a9b      	ldrh	r3, [r3, #20]
 8011910:	4619      	mov	r1, r3
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	8afa      	ldrh	r2, [r7, #22]
 8011916:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f007 fba0 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011920:	4603      	mov	r3, r0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3728      	adds	r7, #40	; 0x28
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	0802640c 	.word	0x0802640c
 8011930:	08051be8 	.word	0x08051be8
 8011934:	08026418 	.word	0x08026418
 8011938:	08026460 	.word	0x08026460
 801193c:	08051b14 	.word	0x08051b14
 8011940:	08026470 	.word	0x08026470
 8011944:	08051c94 	.word	0x08051c94

08011948 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f007 fb3f 	bl	8018fd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b088      	sub	sp, #32
 8011962:	af02      	add	r7, sp, #8
 8011964:	60f8      	str	r0, [r7, #12]
 8011966:	1d38      	adds	r0, r7, #4
 8011968:	e880 0006 	stmia.w	r0, {r1, r2}
 801196c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011972:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011974:	1d39      	adds	r1, r7, #4
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f005 f995 	bl	8016cb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011988:	bf00      	nop
 801198a:	3718      	adds	r7, #24
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011990:	b590      	push	{r4, r7, lr}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	4603      	mov	r3, r0
 8011998:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801199a:	2300      	movs	r3, #0
 801199c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801199e:	88fb      	ldrh	r3, [r7, #6]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d127      	bne.n	80119f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80119a4:	88fb      	ldrh	r3, [r7, #6]
 80119a6:	4a1e      	ldr	r2, [pc, #120]	; (8011a20 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d016      	beq.n	80119de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80119b0:	88fb      	ldrh	r3, [r7, #6]
 80119b2:	4a1b      	ldr	r2, [pc, #108]	; (8011a20 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	68ba      	ldr	r2, [r7, #8]
 80119c0:	4413      	add	r3, r2
 80119c2:	4a18      	ldr	r2, [pc, #96]	; (8011a24 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80119c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	68ba      	ldr	r2, [r7, #8]
 80119cc:	4413      	add	r3, r2
 80119ce:	4a16      	ldr	r2, [pc, #88]	; (8011a28 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80119d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	4413      	add	r3, r2
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e00a      	b.n	80119f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80119de:	4b11      	ldr	r3, [pc, #68]	; (8011a24 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80119e0:	4a12      	ldr	r2, [pc, #72]	; (8011a2c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80119e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80119e4:	4a12      	ldr	r2, [pc, #72]	; (8011a30 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80119e6:	4b10      	ldr	r3, [pc, #64]	; (8011a28 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80119e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80119ea:	88fb      	ldrh	r3, [r7, #6]
 80119ec:	4a11      	ldr	r2, [pc, #68]	; (8011a34 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80119ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00d      	beq.n	8011a16 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80119fa:	4a0f      	ldr	r2, [pc, #60]	; (8011a38 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011a00:	f000 f83e 	bl	8011a80 <_ZN17TypedTextDatabase8getFontsEv>
 8011a04:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011a06:	f000 f833 	bl	8011a70 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	4621      	mov	r1, r4
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f7ff fea7 	bl	8011764 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011a16:	bf00      	nop
 8011a18:	3714      	adds	r7, #20
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd90      	pop	{r4, r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	20000214 	.word	0x20000214
 8011a24:	2000021c 	.word	0x2000021c
 8011a28:	20000220 	.word	0x20000220
 8011a2c:	0808a1f0 	.word	0x0808a1f0
 8011a30:	0808a1e0 	.word	0x0808a1e0
 8011a34:	0808a23c 	.word	0x0808a23c
 8011a38:	20000218 	.word	0x20000218

08011a3c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b083      	sub	sp, #12
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	460b      	mov	r3, r1
 8011a46:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011a48:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011a4e:	6819      	ldr	r1, [r3, #0]
 8011a50:	887b      	ldrh	r3, [r7, #2]
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	440b      	add	r3, r1
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	370c      	adds	r7, #12
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr
 8011a68:	2000021c 	.word	0x2000021c
 8011a6c:	20000220 	.word	0x20000220

08011a70 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011a70:	b480      	push	{r7}
 8011a72:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011a74:	2304      	movs	r3, #4
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr

08011a80 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011a80:	b480      	push	{r7}
 8011a82:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011a84:	4b02      	ldr	r3, [pc, #8]	; (8011a90 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	20000224 	.word	0x20000224

08011a94 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_SIMYOU_TTF_14_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d118      	bne.n	8011ad6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d113      	bne.n	8011ad6 <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8011aae:	f7fc fcc3 	bl	800e438 <_Z23getFont_verdana_20_4bppv>
 8011ab2:	4602      	mov	r2, r0
};
 8011ab4:	4b0a      	ldr	r3, [pc, #40]	; (8011ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011ab6:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8011ab8:	f7fc fd12 	bl	800e4e0 <_Z23getFont_verdana_40_4bppv>
 8011abc:	4602      	mov	r2, r0
};
 8011abe:	4b08      	ldr	r3, [pc, #32]	; (8011ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011ac0:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp()),
 8011ac2:	f7fc fc65 	bl	800e390 <_Z23getFont_verdana_10_4bppv>
 8011ac6:	4602      	mov	r2, r0
};
 8011ac8:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011aca:	609a      	str	r2, [r3, #8]
    &(getFont_SIMYOU_TTF_14_4bpp())
 8011acc:	f7fc fc0c 	bl	800e2e8 <_Z26getFont_SIMYOU_TTF_14_4bppv>
 8011ad0:	4602      	mov	r2, r0
};
 8011ad2:	4b03      	ldr	r3, [pc, #12]	; (8011ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011ad4:	60da      	str	r2, [r3, #12]
}  // namespace TypedTextDatabase
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	20000224 	.word	0x20000224

08011ae4 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011aec:	2001      	movs	r0, #1
 8011aee:	f7ff ffd1 	bl	8011a94 <_Z41__static_initialization_and_destruction_0ii>
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	4a05      	ldr	r2, [pc, #20]	; (8011b14 <_ZN19FrontendApplicationD1Ev+0x20>)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fd f8ed 	bl	800ece4 <_ZN23FrontendApplicationBaseD1Ev>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	08051d50 	.word	0x08051d50

08011b18 <_ZN19FrontendApplicationD0Ev>:
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff ffe7 	bl	8011af4 <_ZN19FrontendApplicationD1Ev>
 8011b26:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f013 f91e 	bl	8024d6c <_ZdlPvj>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4618      	mov	r0, r3
 8011b34:	3708      	adds	r7, #8
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b082      	sub	sp, #8
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f000 f82d 	bl	8011ba8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f005 fb77 	bl	8017244 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011b56:	bf00      	nop
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
	...

08011b60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	68b9      	ldr	r1, [r7, #8]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fd f952 	bl	800ee1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011b78:	4a03      	ldr	r2, [pc, #12]	; (8011b88 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	601a      	str	r2, [r3, #0]
{

}
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	08051d50 	.word	0x08051d50

08011b8c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	601a      	str	r2, [r3, #0]
{

}
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]

}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
    {
    }
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
    {
    }
 8011bd8:	bf00      	nop
 8011bda:	370c      	adds	r7, #12
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011be4:	b480      	push	{r7}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
    {
 8011bec:	4a04      	ldr	r2, [pc, #16]	; (8011c00 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	601a      	str	r2, [r3, #0]
    }
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	08051dcc 	.word	0x08051dcc

08011c04 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
    }
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7ff ffe9 	bl	8011be4 <_ZN8touchgfx9PresenterD1Ev>
 8011c12:	2104      	movs	r1, #4
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f013 f8a9 	bl	8024d6c <_ZdlPvj>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
    {
 8011c2c:	4a04      	ldr	r2, [pc, #16]	; (8011c40 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	601a      	str	r2, [r3, #0]
    }
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4618      	mov	r0, r3
 8011c36:	370c      	adds	r7, #12
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr
 8011c40:	08051dcc 	.word	0x08051dcc

08011c44 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	4a06      	ldr	r2, [pc, #24]	; (8011c68 <_ZN13ModelListenerC1Ev+0x24>)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	601a      	str	r2, [r3, #0]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	605a      	str	r2, [r3, #4]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	370c      	adds	r7, #12
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	08051dbc 	.word	0x08051dbc

08011c6c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	4a04      	ldr	r2, [pc, #16]	; (8011c88 <_ZN13ModelListenerD1Ev+0x1c>)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr
 8011c88:	08051dbc 	.word	0x08051dbc

08011c8c <_ZN13ModelListenerD0Ev>:
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff ffe9 	bl	8011c6c <_ZN13ModelListenerD1Ev>
 8011c9a:	2108      	movs	r1, #8
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f013 f865 	bl	8024d6c <_ZdlPvj>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	4a09      	ldr	r2, [pc, #36]	; (8011cdc <_ZN16Screen1PresenterD1Ev+0x30>)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	601a      	str	r2, [r3, #0]
 8011cba:	4a09      	ldr	r2, [pc, #36]	; (8011ce0 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	605a      	str	r2, [r3, #4]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff ffd1 	bl	8011c6c <_ZN13ModelListenerD1Ev>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ff ff89 	bl	8011be4 <_ZN8touchgfx9PresenterD1Ev>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	08051d94 	.word	0x08051d94
 8011ce0:	08051dac 	.word	0x08051dac

08011ce4 <_ZThn4_N16Screen1PresenterD1Ev>:
 8011ce4:	f1a0 0004 	sub.w	r0, r0, #4
 8011ce8:	e7e0      	b.n	8011cac <_ZN16Screen1PresenterD1Ev>
 8011cea:	bf00      	nop

08011cec <_ZN16Screen1PresenterD0Ev>:
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ffd9 	bl	8011cac <_ZN16Screen1PresenterD1Ev>
 8011cfa:	2110      	movs	r1, #16
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f013 f835 	bl	8024d6c <_ZdlPvj>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <_ZThn4_N16Screen1PresenterD0Ev>:
 8011d0c:	f1a0 0004 	sub.w	r0, r0, #4
 8011d10:	e7ec      	b.n	8011cec <_ZN16Screen1PresenterD0Ev>
	...

08011d14 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
    : view(v)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff ff7f 	bl	8011c24 <_ZN8touchgfx9PresenterC1Ev>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	3304      	adds	r3, #4
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7ff ff8a 	bl	8011c44 <_ZN13ModelListenerC1Ev>
 8011d30:	4a06      	ldr	r2, [pc, #24]	; (8011d4c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	601a      	str	r2, [r3, #0]
 8011d36:	4a06      	ldr	r2, [pc, #24]	; (8011d50 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	605a      	str	r2, [r3, #4]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	60da      	str	r2, [r3, #12]
{

}
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	08051d94 	.word	0x08051d94
 8011d50:	08051dac 	.word	0x08051dac

08011d54 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]

}
 8011d5c:	bf00      	nop
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]

}
 8011d70:	bf00      	nop
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr

08011d7c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	4a05      	ldr	r2, [pc, #20]	; (8011d9c <_ZN11Screen1ViewD1Ev+0x20>)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	601a      	str	r2, [r3, #0]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe fe15 	bl	80109bc <_ZN15Screen1ViewBaseD1Ev>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	08051de4 	.word	0x08051de4

08011da0 <_ZN11Screen1ViewD0Ev>:
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ffe7 	bl	8011d7c <_ZN11Screen1ViewD1Ev>
 8011dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f012 ffda 	bl	8024d6c <_ZdlPvj>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3708      	adds	r7, #8
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe fe66 	bl	8010aa0 <_ZN15Screen1ViewBaseC1Ev>
 8011dd4:	4a03      	ldr	r2, [pc, #12]	; (8011de4 <_ZN11Screen1ViewC1Ev+0x20>)
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	601a      	str	r2, [r3, #0]
{

}
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	08051de4 	.word	0x08051de4

08011de8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fe ff8a 	bl	8010d0c <_ZN15Screen1ViewBase11setupScreenEv>
}
 8011df8:	bf00      	nop
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7fe fbf6 	bl	80105fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011e10:	bf00      	nop
 8011e12:	3708      	adds	r7, #8
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	4a09      	ldr	r2, [pc, #36]	; (8011e48 <_ZN15screenPresenterD1Ev+0x30>)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	601a      	str	r2, [r3, #0]
 8011e26:	4a09      	ldr	r2, [pc, #36]	; (8011e4c <_ZN15screenPresenterD1Ev+0x34>)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	605a      	str	r2, [r3, #4]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff ff1b 	bl	8011c6c <_ZN13ModelListenerD1Ev>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff fed3 	bl	8011be4 <_ZN8touchgfx9PresenterD1Ev>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	08051e18 	.word	0x08051e18
 8011e4c:	08051e30 	.word	0x08051e30

08011e50 <_ZThn4_N15screenPresenterD1Ev>:
 8011e50:	f1a0 0004 	sub.w	r0, r0, #4
 8011e54:	e7e0      	b.n	8011e18 <_ZN15screenPresenterD1Ev>
 8011e56:	bf00      	nop

08011e58 <_ZN15screenPresenterD0Ev>:
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff ffd9 	bl	8011e18 <_ZN15screenPresenterD1Ev>
 8011e66:	2110      	movs	r1, #16
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f012 ff7f 	bl	8024d6c <_ZdlPvj>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <_ZThn4_N15screenPresenterD0Ev>:
 8011e78:	f1a0 0004 	sub.w	r0, r0, #4
 8011e7c:	e7ec      	b.n	8011e58 <_ZN15screenPresenterD0Ev>
	...

08011e80 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
    : view(v)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff fec9 	bl	8011c24 <_ZN8touchgfx9PresenterC1Ev>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	3304      	adds	r3, #4
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7ff fed4 	bl	8011c44 <_ZN13ModelListenerC1Ev>
 8011e9c:	4a06      	ldr	r2, [pc, #24]	; (8011eb8 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	4a06      	ldr	r2, [pc, #24]	; (8011ebc <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	605a      	str	r2, [r3, #4]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	683a      	ldr	r2, [r7, #0]
 8011eac:	60da      	str	r2, [r3, #12]
{

}
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	08051e18 	.word	0x08051e18
 8011ebc:	08051e30 	.word	0x08051e30

08011ec0 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]

}
 8011ec8:	bf00      	nop
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]

}
 8011edc:	bf00      	nop
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr

08011ee8 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	4a05      	ldr	r2, [pc, #20]	; (8011f08 <_ZN10screenViewD1Ev+0x20>)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	601a      	str	r2, [r3, #0]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ff f993 	bl	8011224 <_ZN14screenViewBaseD1Ev>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	08051e40 	.word	0x08051e40

08011f0c <_ZN10screenViewD0Ev>:
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7ff ffe7 	bl	8011ee8 <_ZN10screenViewD1Ev>
 8011f1a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f012 ff24 	bl	8024d6c <_ZdlPvj>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
	...

08011f30 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff f9de 	bl	80112fc <_ZN14screenViewBaseC1Ev>
 8011f40:	4a03      	ldr	r2, [pc, #12]	; (8011f50 <_ZN10screenViewC1Ev+0x20>)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	601a      	str	r2, [r3, #0]
{

}
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	08051e40 	.word	0x08051e40

08011f54 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff fae8 	bl	8011534 <_ZN14screenViewBase11setupScreenEv>
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fe fb40 	bl	80105fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011f7c:	bf00      	nop
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
    {
 8011f8c:	4a04      	ldr	r2, [pc, #16]	; (8011fa0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	601a      	str	r2, [r3, #0]
    }
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4618      	mov	r0, r3
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr
 8011fa0:	08051e90 	.word	0x08051e90

08011fa4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
    }
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff ffe9 	bl	8011f84 <_ZN8touchgfx15TouchControllerD1Ev>
 8011fb2:	2104      	movs	r1, #4
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f012 fed9 	bl	8024d6c <_ZdlPvj>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "touch_800x480.h"

void STM32TouchController::init()
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011fcc:	bf00      	nop
 8011fce:	370c      	adds	r7, #12
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr

08011fd8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b085      	sub	sp, #20
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if(touchInfo.flag == 1) {
 8011fe4:	4b0b      	ldr	r3, [pc, #44]	; (8012014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d10b      	bne.n	8012004 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>
		x = touchInfo.x[0];
 8011fec:	4b09      	ldr	r3, [pc, #36]	; (8012014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 8011fee:	885b      	ldrh	r3, [r3, #2]
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	601a      	str	r2, [r3, #0]
		y = touchInfo.y[0];
 8011ff6:	4b07      	ldr	r3, [pc, #28]	; (8012014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 8011ff8:	899b      	ldrh	r3, [r3, #12]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	601a      	str	r2, [r3, #0]
		return true;
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2e>
	}

    return false;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	20001fb8 	.word	0x20001fb8

08012018 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	4a05      	ldr	r2, [pc, #20]	; (8012038 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff ffab 	bl	8011f84 <_ZN8touchgfx15TouchControllerD1Ev>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	08051e78 	.word	0x08051e78

0801203c <_ZN20STM32TouchControllerD0Ev>:
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ffe7 	bl	8012018 <_ZN20STM32TouchControllerD1Ev>
 801204a:	2104      	movs	r1, #4
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f012 fe8d 	bl	8024d6c <_ZdlPvj>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4618      	mov	r0, r3
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	4603      	mov	r3, r0
 8012064:	71fb      	strb	r3, [r7, #7]

}
 8012066:	bf00      	nop
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012072:	b480      	push	{r7}
 8012074:	b083      	sub	sp, #12
 8012076:	af00      	add	r7, sp, #0
 8012078:	4603      	mov	r3, r0
 801207a:	71fb      	strb	r3, [r7, #7]

}
 801207c:	bf00      	nop
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	4603      	mov	r3, r0
 8012090:	71fb      	strb	r3, [r7, #7]

}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
	...

080120a0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    {
 80120a8:	4a04      	ldr	r2, [pc, #16]	; (80120bc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	601a      	str	r2, [r3, #0]
    }
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4618      	mov	r0, r3
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr
 80120bc:	08052c20 	.word	0x08052c20

080120c0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
    }
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7ff ffe9 	bl	80120a0 <_ZN8touchgfx3HALD1Ev>
 80120ce:	2178      	movs	r1, #120	; 0x78
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f012 fe4b 	bl	8024d6c <_ZdlPvj>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	4618      	mov	r0, r3
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	460b      	mov	r3, r1
 80120ea:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	78fa      	ldrb	r2, [r7, #3]
 80120f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2201      	movs	r2, #1
 80120f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012116:	2b00      	cmp	r3, #0
 8012118:	d009      	beq.n	801212e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	685a      	ldr	r2, [r3, #4]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4610      	mov	r0, r2
 8012128:	4798      	blx	r3
 801212a:	4603      	mov	r3, r0
 801212c:	e000      	b.n	8012130 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 801212e:	2300      	movs	r3, #0
        }
    }
 8012130:	4618      	mov	r0, r3
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f003 fc17 	bl	8015974 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3394      	adds	r3, #148	; 0x94
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	4798      	blx	r3
    }
 8012152:	bf00      	nop
 8012154:	3708      	adds	r7, #8
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801215a:	b480      	push	{r7}
 801215c:	b083      	sub	sp, #12
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
 8012162:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012164:	2300      	movs	r3, #0
    }
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
	...

08012174 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 8012174:	b590      	push	{r4, r7, lr}
 8012176:	b08b      	sub	sp, #44	; 0x2c
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	4611      	mov	r1, r2
 8012180:	461a      	mov	r2, r3
 8012182:	460b      	mov	r3, r1
 8012184:	80fb      	strh	r3, [r7, #6]
 8012186:	4613      	mov	r3, r2
 8012188:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 801218a:	f7fc fc6d 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 801218e:	4602      	mov	r2, r0
 8012190:	6813      	ldr	r3, [r2, #0]
 8012192:	3324      	adds	r3, #36	; 0x24
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4610      	mov	r0, r2
 8012198:	4798      	blx	r3
 801219a:	4603      	mov	r3, r0
 801219c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801219e:	8b7b      	ldrh	r3, [r7, #26]
 80121a0:	4a3d      	ldr	r2, [pc, #244]	; (8012298 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80121a2:	8812      	ldrh	r2, [r2, #0]
 80121a4:	fb02 f303 	mul.w	r3, r2, r3
 80121a8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80121ae:	2300      	movs	r3, #0
 80121b0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80121b6:	797b      	ldrb	r3, [r7, #5]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d005      	beq.n	80121c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80121bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	4413      	add	r3, r2
 80121c2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80121c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d005      	beq.n	80121dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80121d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	4413      	add	r3, r2
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80121dc:	88fb      	ldrh	r3, [r7, #6]
 80121de:	3b01      	subs	r3, #1
 80121e0:	2b1f      	cmp	r3, #31
 80121e2:	d84d      	bhi.n	8012280 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80121e4:	a201      	add	r2, pc, #4	; (adr r2, 80121ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80121e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ea:	bf00      	nop
 80121ec:	0801226d 	.word	0x0801226d
 80121f0:	0801226d 	.word	0x0801226d
 80121f4:	08012281 	.word	0x08012281
 80121f8:	0801226d 	.word	0x0801226d
 80121fc:	08012281 	.word	0x08012281
 8012200:	08012281 	.word	0x08012281
 8012204:	08012281 	.word	0x08012281
 8012208:	0801226d 	.word	0x0801226d
 801220c:	08012281 	.word	0x08012281
 8012210:	08012281 	.word	0x08012281
 8012214:	08012281 	.word	0x08012281
 8012218:	08012281 	.word	0x08012281
 801221c:	08012281 	.word	0x08012281
 8012220:	08012281 	.word	0x08012281
 8012224:	08012281 	.word	0x08012281
 8012228:	0801226d 	.word	0x0801226d
 801222c:	08012281 	.word	0x08012281
 8012230:	08012281 	.word	0x08012281
 8012234:	08012281 	.word	0x08012281
 8012238:	08012281 	.word	0x08012281
 801223c:	08012281 	.word	0x08012281
 8012240:	08012281 	.word	0x08012281
 8012244:	08012281 	.word	0x08012281
 8012248:	0801226d 	.word	0x0801226d
 801224c:	08012281 	.word	0x08012281
 8012250:	08012281 	.word	0x08012281
 8012254:	08012281 	.word	0x08012281
 8012258:	08012281 	.word	0x08012281
 801225c:	08012281 	.word	0x08012281
 8012260:	08012281 	.word	0x08012281
 8012264:	08012281 	.word	0x08012281
 8012268:	0801226d 	.word	0x0801226d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	3374      	adds	r3, #116	; 0x74
 8012272:	681c      	ldr	r4, [r3, #0]
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	6a3a      	ldr	r2, [r7, #32]
 8012278:	68b9      	ldr	r1, [r7, #8]
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	47a0      	blx	r4
            break;
 801227e:	e006      	b.n	801228e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8012280:	4b06      	ldr	r3, [pc, #24]	; (801229c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8012282:	4a07      	ldr	r2, [pc, #28]	; (80122a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8012284:	f240 2189 	movw	r1, #649	; 0x289
 8012288:	4806      	ldr	r0, [pc, #24]	; (80122a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801228a:	f012 fd9b 	bl	8024dc4 <__assert_func>
            break;
        }
    }
 801228e:	bf00      	nop
 8012290:	372c      	adds	r7, #44	; 0x2c
 8012292:	46bd      	mov	sp, r7
 8012294:	bd90      	pop	{r4, r7, pc}
 8012296:	bf00      	nop
 8012298:	2000134e 	.word	0x2000134e
 801229c:	0802647c 	.word	0x0802647c
 80122a0:	08051fa8 	.word	0x08051fa8
 80122a4:	0802649c 	.word	0x0802649c

080122a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80122bc:	4b11      	ldr	r3, [pc, #68]	; (8012304 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80122be:	4a12      	ldr	r2, [pc, #72]	; (8012308 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80122c0:	f44f 7127 	mov.w	r1, #668	; 0x29c
 80122c4:	4811      	ldr	r0, [pc, #68]	; (801230c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80122c6:	f012 fd7d 	bl	8024dc4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	683a      	ldr	r2, [r7, #0]
 80122da:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	bf14      	ite	ne
 80122e2:	2301      	movne	r3, #1
 80122e4:	2300      	moveq	r3, #0
 80122e6:	b2da      	uxtb	r2, r3
 80122e8:	4b09      	ldr	r3, [pc, #36]	; (8012310 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80122ea:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	bf14      	ite	ne
 80122f2:	2301      	movne	r3, #1
 80122f4:	2300      	moveq	r3, #0
 80122f6:	b2da      	uxtb	r2, r3
 80122f8:	4b06      	ldr	r3, [pc, #24]	; (8012314 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80122fa:	701a      	strb	r2, [r3, #0]
    }
 80122fc:	bf00      	nop
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	080264e0 	.word	0x080264e0
 8012308:	08051f58 	.word	0x08051f58
 801230c:	0802649c 	.word	0x0802649c
 8012310:	20001350 	.word	0x20001350
 8012314:	20001351 	.word	0x20001351

08012318 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012320:	2300      	movs	r3, #0
    }
 8012322:	4618      	mov	r0, r3
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801232e:	b580      	push	{r7, lr}
 8012330:	b082      	sub	sp, #8
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	460b      	mov	r3, r1
 8012338:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d004      	beq.n	801234c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012346:	887a      	ldrh	r2, [r7, #2]
 8012348:	4610      	mov	r0, r2
 801234a:	4798      	blx	r3
        }
    }
 801234c:	bf00      	nop
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	685a      	ldr	r2, [r3, #4]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	3318      	adds	r3, #24
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4610      	mov	r0, r2
 801236c:	4798      	blx	r3
 801236e:	4603      	mov	r3, r0
    }
 8012370:	4618      	mov	r0, r3
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801238c:	429a      	cmp	r2, r3
 801238e:	d017      	beq.n	80123c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012390:	4b1a      	ldr	r3, [pc, #104]	; (80123fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d12a      	bne.n	80123ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8012398:	4b19      	ldr	r3, [pc, #100]	; (8012400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801239a:	881a      	ldrh	r2, [r3, #0]
 801239c:	4b19      	ldr	r3, [pc, #100]	; (8012404 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801239e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80123a0:	4b19      	ldr	r3, [pc, #100]	; (8012408 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123a2:	881a      	ldrh	r2, [r3, #0]
 80123a4:	4b19      	ldr	r3, [pc, #100]	; (801240c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123a6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80123a8:	4b16      	ldr	r3, [pc, #88]	; (8012404 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80123aa:	881a      	ldrh	r2, [r3, #0]
 80123ac:	4b16      	ldr	r3, [pc, #88]	; (8012408 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123ae:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80123b0:	4b16      	ldr	r3, [pc, #88]	; (801240c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123b2:	881a      	ldrh	r2, [r3, #0]
 80123b4:	4b12      	ldr	r3, [pc, #72]	; (8012400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80123b6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80123b8:	4b10      	ldr	r3, [pc, #64]	; (80123fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80123ba:	2201      	movs	r2, #1
 80123bc:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80123be:	e016      	b.n	80123ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80123c0:	4b0e      	ldr	r3, [pc, #56]	; (80123fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d012      	beq.n	80123ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80123c8:	4b0f      	ldr	r3, [pc, #60]	; (8012408 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123ca:	881a      	ldrh	r2, [r3, #0]
 80123cc:	4b0d      	ldr	r3, [pc, #52]	; (8012404 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80123ce:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80123d0:	4b0b      	ldr	r3, [pc, #44]	; (8012400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80123d2:	881a      	ldrh	r2, [r3, #0]
 80123d4:	4b0d      	ldr	r3, [pc, #52]	; (801240c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123d6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80123d8:	4b0c      	ldr	r3, [pc, #48]	; (801240c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123da:	881a      	ldrh	r2, [r3, #0]
 80123dc:	4b0a      	ldr	r3, [pc, #40]	; (8012408 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123de:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80123e0:	4b08      	ldr	r3, [pc, #32]	; (8012404 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80123e2:	881a      	ldrh	r2, [r3, #0]
 80123e4:	4b06      	ldr	r3, [pc, #24]	; (8012400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80123e6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80123e8:	4b04      	ldr	r3, [pc, #16]	; (80123fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	701a      	strb	r2, [r3, #0]
    }
 80123ee:	bf00      	nop
 80123f0:	370c      	adds	r7, #12
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop
 80123fc:	2000134a 	.word	0x2000134a
 8012400:	20001346 	.word	0x20001346
 8012404:	2000134c 	.word	0x2000134c
 8012408:	20001348 	.word	0x20001348
 801240c:	2000134e 	.word	0x2000134e

08012410 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	f002 fd2c 	bl	8014e78 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	4a05      	ldr	r2, [pc, #20]	; (8012448 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff fe31 	bl	80120a0 <_ZN8touchgfx3HALD1Ev>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	08052180 	.word	0x08052180

0801244c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff ffe7 	bl	8012428 <_ZN20TouchGFXGeneratedHALD1Ev>
 801245a:	2178      	movs	r1, #120	; 0x78
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f012 fc85 	bl	8024d6c <_ZdlPvj>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff ffca 	bl	8012410 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f001 fb08 	bl	8013aa4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012494:	bf00      	nop
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f001 fb94 	bl	8013bd4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80124ac:	4603      	mov	r3, r0
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f001 fb93 	bl	8013bf0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80124ca:	bf00      	nop
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b082      	sub	sp, #8
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
 80124da:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f001 fb9b 	bl	8013c1c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80124e6:	bf00      	nop
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b084      	sub	sp, #16
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	60f8      	str	r0, [r7, #12]
 80124f6:	60b9      	str	r1, [r7, #8]
 80124f8:	607a      	str	r2, [r7, #4]
 80124fa:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	687a      	ldr	r2, [r7, #4]
 8012502:	68b9      	ldr	r1, [r7, #8]
 8012504:	f001 fb98 	bl	8013c38 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012508:	4603      	mov	r3, r0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3710      	adds	r7, #16
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}

08012512 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012512:	b580      	push	{r7, lr}
 8012514:	b082      	sub	sp, #8
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	f001 faff 	bl	8013b20 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012522:	bf00      	nop
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b082      	sub	sp, #8
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4618      	mov	r0, r3
 8012536:	f001 fb03 	bl	8013b40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801253a:	bf00      	nop
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b082      	sub	sp, #8
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	f001 fb05 	bl	8013b5c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012552:	bf00      	nop
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b082      	sub	sp, #8
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	f001 fb07 	bl	8013b78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
	...

08012574 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	4a05      	ldr	r2, [pc, #20]	; (8012594 <_ZN11TouchGFXHALD1Ev+0x20>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f7ff ff4f 	bl	8012428 <_ZN20TouchGFXGeneratedHALD1Ev>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	08051ea8 	.word	0x08051ea8

08012598 <_ZN11TouchGFXHALD0Ev>:
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff ffe7 	bl	8012574 <_ZN11TouchGFXHALD1Ev>
 80125a6:	2178      	movs	r1, #120	; 0x78
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f012 fbdf 	bl	8024d6c <_ZdlPvj>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80125b8:	b480      	push	{r7}
 80125ba:	af00      	add	r7, sp, #0
  fb_sem = 0;
 80125bc:	4b05      	ldr	r3, [pc, #20]	; (80125d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 80125be:	2200      	movs	r2, #0
 80125c0:	601a      	str	r2, [r3, #0]
  vsync_sem = 0;
 80125c2:	4b05      	ldr	r3, [pc, #20]	; (80125d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 80125c4:	2200      	movs	r2, #0
 80125c6:	601a      	str	r2, [r3, #0]
}
 80125c8:	bf00      	nop
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop
 80125d4:	20000234 	.word	0x20000234
 80125d8:	20000238 	.word	0x20000238

080125dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80125dc:	b480      	push	{r7}
 80125de:	af00      	add	r7, sp, #0
  while(fb_sem);
 80125e0:	4b08      	ldr	r3, [pc, #32]	; (8012604 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	bf14      	ite	ne
 80125e8:	2301      	movne	r3, #1
 80125ea:	2300      	moveq	r3, #0
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d000      	beq.n	80125f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 80125f2:	e7f5      	b.n	80125e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
  fb_sem = 1;
 80125f4:	4b03      	ldr	r3, [pc, #12]	; (8012604 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 80125f6:	2201      	movs	r2, #1
 80125f8:	601a      	str	r2, [r3, #0]
}
 80125fa:	bf00      	nop
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	20000234 	.word	0x20000234

08012608 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
  fb_sem = 0;
 801260c:	4b03      	ldr	r3, [pc, #12]	; (801261c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801260e:	2200      	movs	r2, #0
 8012610:	601a      	str	r2, [r3, #0]
}
 8012612:	bf00      	nop
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr
 801261c:	20000234 	.word	0x20000234

08012620 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012620:	b480      	push	{r7}
 8012622:	af00      	add	r7, sp, #0
  fb_sem = 1;
 8012624:	4b03      	ldr	r3, [pc, #12]	; (8012634 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012626:	2201      	movs	r2, #1
 8012628:	601a      	str	r2, [r3, #0]
}
 801262a:	bf00      	nop
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr
 8012634:	20000234 	.word	0x20000234

08012638 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
  fb_sem = 0;
 801263c:	4b03      	ldr	r3, [pc, #12]	; (801264c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801263e:	2200      	movs	r2, #0
 8012640:	601a      	str	r2, [r3, #0]
}
 8012642:	bf00      	nop
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	20000234 	.word	0x20000234

08012650 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012650:	b480      	push	{r7}
 8012652:	af00      	add	r7, sp, #0
  vsync_sem = 1;
 8012654:	4b03      	ldr	r3, [pc, #12]	; (8012664 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8012656:	2201      	movs	r2, #1
 8012658:	601a      	str	r2, [r3, #0]
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	20000238 	.word	0x20000238

08012668 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 8012668:	b480      	push	{r7}
 801266a:	af00      	add	r7, sp, #0
  return vsync_sem;
 801266c:	4b05      	ldr	r3, [pc, #20]	; (8012684 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	bf14      	ite	ne
 8012674:	2301      	movne	r3, #1
 8012676:	2300      	moveq	r3, #0
 8012678:	b2db      	uxtb	r3, r3
}
 801267a:	4618      	mov	r0, r3
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr
 8012684:	20000238 	.word	0x20000238

08012688 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8012688:	b580      	push	{r7, lr}
 801268a:	af00      	add	r7, sp, #0
  if(vsync_sem)
 801268c:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	bf14      	ite	ne
 8012694:	2301      	movne	r3, #1
 8012696:	2300      	moveq	r3, #0
 8012698:	b2db      	uxtb	r3, r3
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00a      	beq.n	80126b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
  {
    vsync_sem = 0;
 801269e:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	601a      	str	r2, [r3, #0]
    HAL::getInstance()->backPorchExited();
 80126a4:	f7fc f9d4 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 80126a8:	4602      	mov	r2, r0
 80126aa:	6813      	ldr	r3, [r2, #0]
 80126ac:	3358      	adds	r3, #88	; 0x58
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3
  }
}
 80126b4:	bf00      	nop
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20000238 	.word	0x20000238

080126bc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	4603      	mov	r3, r0
 80126c4:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 80126c6:	88fb      	ldrh	r3, [r7, #6]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f0 f8db 	bl	8002884 <HAL_Delay>
}
 80126ce:	bf00      	nop
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
	...

080126d8 <__NVIC_EnableIRQ>:
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	4603      	mov	r3, r0
 80126e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	db0d      	blt.n	8012706 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	f003 021f 	and.w	r2, r3, #31
 80126f4:	4907      	ldr	r1, [pc, #28]	; (8012714 <__NVIC_EnableIRQ+0x3c>)
 80126f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126fa:	095b      	lsrs	r3, r3, #5
 80126fc:	2001      	movs	r0, #1
 80126fe:	fa00 f202 	lsl.w	r2, r0, r2
 8012702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012706:	bf00      	nop
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop
 8012714:	e000e100 	.word	0xe000e100

08012718 <__NVIC_DisableIRQ>:
{
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
 801271e:	4603      	mov	r3, r0
 8012720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012726:	2b00      	cmp	r3, #0
 8012728:	db12      	blt.n	8012750 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f003 021f 	and.w	r2, r3, #31
 8012734:	4909      	ldr	r1, [pc, #36]	; (801275c <__NVIC_DisableIRQ+0x44>)
 8012736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801273a:	095b      	lsrs	r3, r3, #5
 801273c:	2001      	movs	r0, #1
 801273e:	fa00 f202 	lsl.w	r2, r0, r2
 8012742:	3320      	adds	r3, #32
 8012744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801274c:	f3bf 8f6f 	isb	sy
}
 8012750:	bf00      	nop
 8012752:	370c      	adds	r7, #12
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	e000e100 	.word	0xe000e100

08012760 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
        : color(0)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	601a      	str	r2, [r3, #0]
    }
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
        return color;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
    }
 8012788:	4618      	mov	r0, r3
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
    {
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]
    }
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr
 80127b0:	08052054 	.word	0x08052054

080127b4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
    }
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ffe9 	bl	8012794 <_ZN8touchgfx9DMA_QueueD1Ev>
 80127c2:	2104      	movs	r1, #4
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f012 fad1 	bl	8024d6c <_ZdlPvj>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	3344      	adds	r3, #68	; 0x44
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	4798      	blx	r3
    }
 80127e8:	bf00      	nop
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80127f0:	b480      	push	{r7}
 80127f2:	b083      	sub	sp, #12
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80127f8:	2300      	movs	r3, #0
    }
 80127fa:	4618      	mov	r0, r3
 80127fc:	370c      	adds	r7, #12
 80127fe:	46bd      	mov	sp, r7
 8012800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012804:	4770      	bx	lr
	...

08012808 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
    {
 8012810:	4a04      	ldr	r2, [pc, #16]	; (8012824 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
    }
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr
 8012824:	08053068 	.word	0x08053068

08012828 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
    }
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff ffe9 	bl	8012808 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012836:	210c      	movs	r1, #12
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f012 fa97 	bl	8024d6c <_ZdlPvj>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012852:	4a09      	ldr	r2, [pc, #36]	; (8012878 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	601a      	str	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	605a      	str	r2, [r3, #4]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2200      	movs	r2, #0
 8012862:	721a      	strb	r2, [r3, #8]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2200      	movs	r2, #0
 8012868:	725a      	strb	r2, [r3, #9]
    {
    }
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr
 8012878:	08053068 	.word	0x08053068

0801287c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	685a      	ldr	r2, [r3, #4]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	3314      	adds	r3, #20
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4610      	mov	r0, r2
 8012894:	4798      	blx	r3
    }
 8012896:	bf00      	nop
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801289e:	b580      	push	{r7, lr}
 80128a0:	b082      	sub	sp, #8
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	3328      	adds	r3, #40	; 0x28
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4610      	mov	r0, r2
 80128b2:	4798      	blx	r3
    }
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80128bc:	b480      	push	{r7}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
 80128c8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80128d4:	68ba      	ldr	r2, [r7, #8]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	430a      	orrs	r2, r1
 80128dc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e4:	f023 0107 	bic.w	r1, r3, #7
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	430a      	orrs	r2, r1
 80128f0:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80128fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012900:	6839      	ldr	r1, [r7, #0]
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	6812      	ldr	r2, [r2, #0]
 8012906:	430b      	orrs	r3, r1
 8012908:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	3714      	adds	r7, #20
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012920:	f7fc f896 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8012924:	4603      	mov	r3, r0
 8012926:	4618      	mov	r0, r3
 8012928:	f7ff ffa8 	bl	801287c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
    assert(0);
 801293c:	4b02      	ldr	r3, [pc, #8]	; (8012948 <DMA2D_XferErrorCallback+0x14>)
 801293e:	4a03      	ldr	r2, [pc, #12]	; (801294c <DMA2D_XferErrorCallback+0x18>)
 8012940:	2136      	movs	r1, #54	; 0x36
 8012942:	4803      	ldr	r0, [pc, #12]	; (8012950 <DMA2D_XferErrorCallback+0x1c>)
 8012944:	f012 fa3e 	bl	8024dc4 <__assert_func>
 8012948:	08026518 	.word	0x08026518
 801294c:	08052070 	.word	0x08052070
 8012950:	0802651c 	.word	0x0802651c

08012954 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3318      	adds	r3, #24
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff fefd 	bl	8012760 <_ZN8touchgfx9colortypeC1Ev>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	330c      	adds	r3, #12
 801297e:	4619      	mov	r1, r3
 8012980:	4610      	mov	r0, r2
 8012982:	f7ff ff61 	bl	8012848 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012986:	4a0e      	ldr	r2, [pc, #56]	; (80129c0 <_ZN10STM32F4DMAC1Ev+0x50>)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f103 000c 	add.w	r0, r3, #12
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	3320      	adds	r3, #32
 8012996:	2260      	movs	r2, #96	; 0x60
 8012998:	4619      	mov	r1, r3
 801299a:	f003 f911 	bl	8015bc0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3320      	adds	r3, #32
 80129a2:	245f      	movs	r4, #95	; 0x5f
 80129a4:	461d      	mov	r5, r3
 80129a6:	2c00      	cmp	r4, #0
 80129a8:	db05      	blt.n	80129b6 <_ZN10STM32F4DMAC1Ev+0x46>
 80129aa:	4628      	mov	r0, r5
 80129ac:	f7ff ffd2 	bl	8012954 <_ZN8touchgfx6BlitOpC1Ev>
 80129b0:	3520      	adds	r5, #32
 80129b2:	3c01      	subs	r4, #1
 80129b4:	e7f7      	b.n	80129a6 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	4618      	mov	r0, r3
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bdb0      	pop	{r4, r5, r7, pc}
 80129c0:	08052004 	.word	0x08052004

080129c4 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	4a0b      	ldr	r2, [pc, #44]	; (80129fc <_ZN10STM32F4DMAD1Ev+0x38>)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80129d2:	480b      	ldr	r0, [pc, #44]	; (8012a00 <_ZN10STM32F4DMAD1Ev+0x3c>)
 80129d4:	f7f0 f940 	bl	8002c58 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80129d8:	205a      	movs	r0, #90	; 0x5a
 80129da:	f7ff fe9d 	bl	8012718 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	330c      	adds	r3, #12
 80129e2:	4618      	mov	r0, r3
 80129e4:	f000 faa4 	bl	8012f30 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7ff ff0c 	bl	8012808 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	3708      	adds	r7, #8
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	08052004 	.word	0x08052004
 8012a00:	20001e58 	.word	0x20001e58

08012a04 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
}
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff ffd9 	bl	80129c4 <_ZN10STM32F4DMAD1Ev>
 8012a12:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f012 f9a8 	bl	8024d6c <_ZdlPvj>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
	...

08012a28 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8012a30:	4b09      	ldr	r3, [pc, #36]	; (8012a58 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a32:	4a0a      	ldr	r2, [pc, #40]	; (8012a5c <_ZN10STM32F4DMA10initializeEv+0x34>)
 8012a34:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8012a36:	4808      	ldr	r0, [pc, #32]	; (8012a58 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a38:	f7f0 f8c5 	bl	8002bc6 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012a3c:	4b06      	ldr	r3, [pc, #24]	; (8012a58 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a3e:	4a08      	ldr	r2, [pc, #32]	; (8012a60 <_ZN10STM32F4DMA10initializeEv+0x38>)
 8012a40:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012a42:	4b05      	ldr	r3, [pc, #20]	; (8012a58 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a44:	4a07      	ldr	r2, [pc, #28]	; (8012a64 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8012a46:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8012a48:	205a      	movs	r0, #90	; 0x5a
 8012a4a:	f7ff fe45 	bl	80126d8 <__NVIC_EnableIRQ>
}
 8012a4e:	bf00      	nop
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	20001e58 	.word	0x20001e58
 8012a5c:	4002b000 	.word	0x4002b000
 8012a60:	08012919 	.word	0x08012919
 8012a64:	08012935 	.word	0x08012935

08012a68 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8012a70:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8012a74:	4618      	mov	r0, r3
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012a80:	b590      	push	{r4, r7, lr}
 8012a82:	b08d      	sub	sp, #52	; 0x34
 8012a84:	af02      	add	r7, sp, #8
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8012a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a8e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012a98:	2b20      	cmp	r3, #32
 8012a9a:	d007      	beq.n	8012aac <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	2b40      	cmp	r3, #64	; 0x40
 8012aa2:	d003      	beq.n	8012aac <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2b04      	cmp	r3, #4
 8012aaa:	d101      	bne.n	8012ab0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8012ab0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012ab2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8012ab8:	2b80      	cmp	r3, #128	; 0x80
 8012aba:	d004      	beq.n	8012ac6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ac4:	d101      	bne.n	8012aca <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	e000      	b.n	8012acc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8012aca:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012acc:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012ace:	f7fb ffcb 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	6813      	ldr	r3, [r2, #0]
 8012ad6:	331c      	adds	r3, #28
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4610      	mov	r0, r2
 8012adc:	4798      	blx	r3
 8012ade:	4603      	mov	r3, r0
 8012ae0:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b40      	cmp	r3, #64	; 0x40
 8012ae8:	d01d      	beq.n	8012b26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012aea:	2b40      	cmp	r3, #64	; 0x40
 8012aec:	d804      	bhi.n	8012af8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8012aee:	2b04      	cmp	r3, #4
 8012af0:	d00e      	beq.n	8012b10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8012af2:	2b20      	cmp	r3, #32
 8012af4:	d017      	beq.n	8012b26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012af6:	e019      	b.n	8012b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8012af8:	2b80      	cmp	r3, #128	; 0x80
 8012afa:	d003      	beq.n	8012b04 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8012afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b00:	d003      	beq.n	8012b0a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8012b02:	e013      	b.n	8012b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8012b04:	230a      	movs	r3, #10
 8012b06:	623b      	str	r3, [r7, #32]
        break;
 8012b08:	e01a      	b.n	8012b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8012b0a:	2309      	movs	r3, #9
 8012b0c:	623b      	str	r3, [r7, #32]
        break;
 8012b0e:	e017      	b.n	8012b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b14:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012b16:	7f7b      	ldrb	r3, [r7, #29]
 8012b18:	2b10      	cmp	r3, #16
 8012b1a:	d101      	bne.n	8012b20 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8012b1c:	2302      	movs	r3, #2
 8012b1e:	e000      	b.n	8012b22 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8012b20:	2301      	movs	r3, #1
 8012b22:	623b      	str	r3, [r7, #32]
        break;
 8012b24:	e00c      	b.n	8012b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8012b26:	2300      	movs	r3, #0
 8012b28:	623b      	str	r3, [r7, #32]
        break;
 8012b2a:	e009      	b.n	8012b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012b30:	7f7b      	ldrb	r3, [r7, #29]
 8012b32:	2b10      	cmp	r3, #16
 8012b34:	d101      	bne.n	8012b3a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8012b36:	2302      	movs	r3, #2
 8012b38:	e000      	b.n	8012b3c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	623b      	str	r3, [r7, #32]
        break;
 8012b3e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012b40:	4a75      	ldr	r2, [pc, #468]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b44:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012b46:	7f7b      	ldrb	r3, [r7, #29]
 8012b48:	2b10      	cmp	r3, #16
 8012b4a:	d101      	bne.n	8012b50 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8012b4c:	2302      	movs	r3, #2
 8012b4e:	e000      	b.n	8012b52 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8012b50:	2301      	movs	r3, #1
 8012b52:	4a71      	ldr	r2, [pc, #452]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b54:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	8adb      	ldrh	r3, [r3, #22]
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	8a1b      	ldrh	r3, [r3, #16]
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	461a      	mov	r2, r3
 8012b64:	4b6c      	ldr	r3, [pc, #432]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b66:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012b68:	7f7b      	ldrb	r3, [r7, #29]
 8012b6a:	2b10      	cmp	r3, #16
 8012b6c:	d101      	bne.n	8012b72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8012b6e:	2202      	movs	r2, #2
 8012b70:	e000      	b.n	8012b74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8012b72:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	8adb      	ldrh	r3, [r3, #22]
 8012b78:	4619      	mov	r1, r3
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	8a1b      	ldrh	r3, [r3, #16]
 8012b7e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b82:	4865      	ldr	r0, [pc, #404]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b84:	f7ff fe9a 	bl	80128bc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012b88:	4a63      	ldr	r2, [pc, #396]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b8a:	6a3b      	ldr	r3, [r7, #32]
 8012b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	8a9b      	ldrh	r3, [r3, #20]
 8012b92:	461a      	mov	r2, r3
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	8a1b      	ldrh	r3, [r3, #16]
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	4b5e      	ldr	r3, [pc, #376]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b9e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8012ba0:	7ffb      	ldrb	r3, [r7, #31]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d103      	bne.n	8012bae <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8012ba6:	7fbb      	ldrb	r3, [r7, #30]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 8081 	beq.w	8012cb0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	7f1b      	ldrb	r3, [r3, #28]
 8012bb2:	2bff      	cmp	r3, #255	; 0xff
 8012bb4:	d008      	beq.n	8012bc8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8012bb6:	4b58      	ldr	r3, [pc, #352]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bb8:	2202      	movs	r2, #2
 8012bba:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	7f1b      	ldrb	r3, [r3, #28]
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	4b55      	ldr	r3, [pc, #340]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8012bc6:	e002      	b.n	8012bce <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012bc8:	4b53      	ldr	r3, [pc, #332]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8012bce:	7fbb      	ldrb	r3, [r7, #30]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d058      	beq.n	8012c86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8012bd4:	7f7b      	ldrb	r3, [r7, #29]
 8012bd6:	2b10      	cmp	r3, #16
 8012bd8:	d14a      	bne.n	8012c70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	3318      	adds	r3, #24
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff fdcc 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012be4:	4603      	mov	r3, r0
 8012be6:	0adb      	lsrs	r3, r3, #11
 8012be8:	f003 021f 	and.w	r2, r3, #31
 8012bec:	4613      	mov	r3, r2
 8012bee:	021b      	lsls	r3, r3, #8
 8012bf0:	1a9a      	subs	r2, r3, r2
 8012bf2:	4b4a      	ldr	r3, [pc, #296]	; (8012d1c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8012bf8:	1ad2      	subs	r2, r2, r3
 8012bfa:	0852      	lsrs	r2, r2, #1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	091b      	lsrs	r3, r3, #4
 8012c00:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	3318      	adds	r3, #24
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7ff fdb8 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	095b      	lsrs	r3, r3, #5
 8012c10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012c14:	4613      	mov	r3, r2
 8012c16:	021b      	lsls	r3, r3, #8
 8012c18:	1a9a      	subs	r2, r3, r2
 8012c1a:	4b41      	ldr	r3, [pc, #260]	; (8012d20 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8012c20:	1ad2      	subs	r2, r2, r3
 8012c22:	0852      	lsrs	r2, r2, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	095b      	lsrs	r3, r3, #5
 8012c28:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	3318      	adds	r3, #24
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff fda4 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012c34:	4603      	mov	r3, r0
 8012c36:	f003 021f 	and.w	r2, r3, #31
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	021b      	lsls	r3, r3, #8
 8012c3e:	1a9a      	subs	r2, r3, r2
 8012c40:	4b36      	ldr	r3, [pc, #216]	; (8012d1c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c42:	fba3 1302 	umull	r1, r3, r3, r2
 8012c46:	1ad2      	subs	r2, r2, r3
 8012c48:	0852      	lsrs	r2, r2, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	091b      	lsrs	r3, r3, #4
 8012c4e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	7f1b      	ldrb	r3, [r3, #28]
 8012c54:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	061a      	lsls	r2, r3, #24
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	041b      	lsls	r3, r3, #16
 8012c5e:	431a      	orrs	r2, r3
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	021b      	lsls	r3, r3, #8
 8012c64:	431a      	orrs	r2, r3
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	4a2b      	ldr	r2, [pc, #172]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c6c:	6353      	str	r3, [r2, #52]	; 0x34
 8012c6e:	e00a      	b.n	8012c86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	3318      	adds	r3, #24
 8012c74:	60bb      	str	r3, [r7, #8]
        return color;
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	683a      	ldr	r2, [r7, #0]
 8012c7c:	7f12      	ldrb	r2, [r2, #28]
 8012c7e:	0612      	lsls	r2, r2, #24
 8012c80:	4313      	orrs	r3, r2
 8012c82:	4a25      	ldr	r2, [pc, #148]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c84:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	8adb      	ldrh	r3, [r3, #22]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	8a1b      	ldrh	r3, [r3, #16]
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	461a      	mov	r2, r3
 8012c94:	4b20      	ldr	r3, [pc, #128]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c96:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012c98:	7f7b      	ldrb	r3, [r7, #29]
 8012c9a:	2b10      	cmp	r3, #16
 8012c9c:	d101      	bne.n	8012ca2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	e000      	b.n	8012ca4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	4a1c      	ldr	r2, [pc, #112]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012ca6:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012ca8:	2100      	movs	r1, #0
 8012caa:	481b      	ldr	r0, [pc, #108]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cac:	f7f0 fa54 	bl	8003158 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012cb0:	2101      	movs	r1, #1
 8012cb2:	4819      	ldr	r0, [pc, #100]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cb4:	f7f0 fa50 	bl	8003158 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8012cb8:	7ffb      	ldrb	r3, [r7, #31]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012cbe:	7fbb      	ldrb	r3, [r7, #30]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d015      	beq.n	8012cf0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012cc8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012cce:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012cd4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012cda:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012ce0:	9301      	str	r3, [sp, #4]
 8012ce2:	9200      	str	r2, [sp, #0]
 8012ce4:	4623      	mov	r3, r4
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	480b      	ldr	r0, [pc, #44]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cea:	f7f0 f858 	bl	8002d9e <HAL_DMA2D_BlendingStart_IT>
 8012cee:	e00f      	b.n	8012d10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012cf4:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012cfa:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d00:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	4603      	mov	r3, r0
 8012d0a:	4803      	ldr	r0, [pc, #12]	; (8012d18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d0c:	f7f0 f814 	bl	8002d38 <HAL_DMA2D_Start_IT>
    }
}
 8012d10:	bf00      	nop
 8012d12:	372c      	adds	r7, #44	; 0x2c
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd90      	pop	{r4, r7, pc}
 8012d18:	20001e58 	.word	0x20001e58
 8012d1c:	08421085 	.word	0x08421085
 8012d20:	04104105 	.word	0x04104105

08012d24 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8012d24:	b590      	push	{r4, r7, lr}
 8012d26:	b08f      	sub	sp, #60	; 0x3c
 8012d28:	af02      	add	r7, sp, #8
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012d2e:	f7fb fe9b 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8012d32:	4602      	mov	r2, r0
 8012d34:	6813      	ldr	r3, [r2, #0]
 8012d36:	331c      	adds	r3, #28
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	4798      	blx	r3
 8012d3e:	4603      	mov	r3, r0
 8012d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d48:	2b10      	cmp	r3, #16
 8012d4a:	d101      	bne.n	8012d50 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	e000      	b.n	8012d52 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8012d50:	2301      	movs	r3, #1
 8012d52:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8012d54:	2300      	movs	r3, #0
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8012d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d5c:	2b10      	cmp	r3, #16
 8012d5e:	d149      	bne.n	8012df4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	3318      	adds	r3, #24
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ff fd09 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	0adb      	lsrs	r3, r3, #11
 8012d6e:	f003 021f 	and.w	r2, r3, #31
 8012d72:	4613      	mov	r3, r2
 8012d74:	021b      	lsls	r3, r3, #8
 8012d76:	1a9a      	subs	r2, r3, r2
 8012d78:	4b6a      	ldr	r3, [pc, #424]	; (8012f24 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8012d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8012d7e:	1ad2      	subs	r2, r2, r3
 8012d80:	0852      	lsrs	r2, r2, #1
 8012d82:	4413      	add	r3, r2
 8012d84:	091b      	lsrs	r3, r3, #4
 8012d86:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	3318      	adds	r3, #24
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7ff fcf5 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012d92:	4603      	mov	r3, r0
 8012d94:	095b      	lsrs	r3, r3, #5
 8012d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	021b      	lsls	r3, r3, #8
 8012d9e:	1a9a      	subs	r2, r3, r2
 8012da0:	4b61      	ldr	r3, [pc, #388]	; (8012f28 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 8012da2:	fba3 1302 	umull	r1, r3, r3, r2
 8012da6:	1ad2      	subs	r2, r2, r3
 8012da8:	0852      	lsrs	r2, r2, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	095b      	lsrs	r3, r3, #5
 8012dae:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	3318      	adds	r3, #24
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fce1 	bl	801277c <_ZNK8touchgfx9colortypecvmEv>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	f003 021f 	and.w	r2, r3, #31
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	021b      	lsls	r3, r3, #8
 8012dc4:	1a9a      	subs	r2, r3, r2
 8012dc6:	4b57      	ldr	r3, [pc, #348]	; (8012f24 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8012dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8012dcc:	1ad2      	subs	r2, r2, r3
 8012dce:	0852      	lsrs	r2, r2, #1
 8012dd0:	4413      	add	r3, r2
 8012dd2:	091b      	lsrs	r3, r3, #4
 8012dd4:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	7f1b      	ldrb	r3, [r3, #28]
 8012dda:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	061a      	lsls	r2, r3, #24
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	041b      	lsls	r3, r3, #16
 8012de4:	431a      	orrs	r2, r3
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	021b      	lsls	r3, r3, #8
 8012dea:	4313      	orrs	r3, r2
 8012dec:	697a      	ldr	r2, [r7, #20]
 8012dee:	4313      	orrs	r3, r2
 8012df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012df2:	e00a      	b.n	8012e0a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	7f1b      	ldrb	r3, [r3, #28]
 8012df8:	061b      	lsls	r3, r3, #24
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	3318      	adds	r3, #24
 8012e00:	60fb      	str	r3, [r7, #12]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b08      	cmp	r3, #8
 8012e10:	d103      	bne.n	8012e1a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e18:	e003      	b.n	8012e22 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8012e1a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8012e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e20:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012e22:	4a42      	ldr	r2, [pc, #264]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e2c:	2b10      	cmp	r3, #16
 8012e2e:	d101      	bne.n	8012e34 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8012e30:	2302      	movs	r3, #2
 8012e32:	e000      	b.n	8012e36 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8012e34:	2301      	movs	r3, #1
 8012e36:	4a3d      	ldr	r2, [pc, #244]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e38:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	8adb      	ldrh	r3, [r3, #22]
 8012e3e:	461a      	mov	r2, r3
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	8a1b      	ldrh	r3, [r3, #16]
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	461a      	mov	r2, r3
 8012e48:	4b38      	ldr	r3, [pc, #224]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e4a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e50:	2b10      	cmp	r3, #16
 8012e52:	d101      	bne.n	8012e58 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8012e54:	2202      	movs	r2, #2
 8012e56:	e000      	b.n	8012e5a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8012e58:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	8adb      	ldrh	r3, [r3, #22]
 8012e5e:	4619      	mov	r1, r3
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	8a1b      	ldrh	r3, [r3, #16]
 8012e64:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e68:	4830      	ldr	r0, [pc, #192]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e6a:	f7ff fd27 	bl	80128bc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8012e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012e74:	d11f      	bne.n	8012eb6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8012e76:	4b2d      	ldr	r3, [pc, #180]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e78:	2201      	movs	r2, #1
 8012e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8012e7c:	4a2b      	ldr	r2, [pc, #172]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e80:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8012e82:	4b2a      	ldr	r3, [pc, #168]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e84:	2209      	movs	r2, #9
 8012e86:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	8adb      	ldrh	r3, [r3, #22]
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	8a1b      	ldrh	r3, [r3, #16]
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	461a      	mov	r2, r3
 8012e96:	4b25      	ldr	r3, [pc, #148]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e98:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e9e:	2b10      	cmp	r3, #16
 8012ea0:	d101      	bne.n	8012ea6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8012ea2:	2302      	movs	r3, #2
 8012ea4:	e000      	b.n	8012ea8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	4a20      	ldr	r2, [pc, #128]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012eaa:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012eac:	2100      	movs	r1, #0
 8012eae:	481f      	ldr	r0, [pc, #124]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012eb0:	f7f0 f952 	bl	8003158 <HAL_DMA2D_ConfigLayer>
 8012eb4:	e005      	b.n	8012ec2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012eb6:	4a1d      	ldr	r2, [pc, #116]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012eb8:	6a3b      	ldr	r3, [r7, #32]
 8012eba:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8012ebc:	4b1b      	ldr	r3, [pc, #108]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012ec2:	2101      	movs	r1, #1
 8012ec4:	4819      	ldr	r0, [pc, #100]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ec6:	f7f0 f947 	bl	8003158 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8012eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012ed0:	d115      	bne.n	8012efe <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012ed6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012edc:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012ee2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012ee8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012eee:	9301      	str	r3, [sp, #4]
 8012ef0:	9200      	str	r2, [sp, #0]
 8012ef2:	4623      	mov	r3, r4
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	480d      	ldr	r0, [pc, #52]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ef8:	f7ef ff51 	bl	8002d9e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8012efc:	e00d      	b.n	8012f1a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012f08:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	460b      	mov	r3, r1
 8012f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f14:	4805      	ldr	r0, [pc, #20]	; (8012f2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f16:	f7ef ff0f 	bl	8002d38 <HAL_DMA2D_Start_IT>
}
 8012f1a:	bf00      	nop
 8012f1c:	3734      	adds	r7, #52	; 0x34
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd90      	pop	{r4, r7, pc}
 8012f22:	bf00      	nop
 8012f24:	08421085 	.word	0x08421085
 8012f28:	04104105 	.word	0x04104105
 8012f2c:	20001e58 	.word	0x20001e58

08012f30 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	4a05      	ldr	r2, [pc, #20]	; (8012f50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	601a      	str	r2, [r3, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff fc27 	bl	8012794 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	080530b8 	.word	0x080530b8

08012f54 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff ffe7 	bl	8012f30 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012f62:	2114      	movs	r1, #20
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f011 ff01 	bl	8024d6c <_ZdlPvj>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3708      	adds	r7, #8
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
        texts = t;
 8012f7c:	4a04      	ldr	r2, [pc, #16]	; (8012f90 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6013      	str	r3, [r2, #0]
    }
 8012f82:	bf00      	nop
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	200013d0 	.word	0x200013d0

08012f94 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	60f8      	str	r0, [r7, #12]
 8012f9c:	60b9      	str	r1, [r7, #8]
 8012f9e:	607a      	str	r2, [r7, #4]
 8012fa0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012fa2:	4a0b      	ldr	r2, [pc, #44]	; (8012fd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	601a      	str	r2, [r3, #0]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	605a      	str	r2, [r3, #4]
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	609a      	str	r2, [r3, #8]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	683a      	ldr	r2, [r7, #0]
 8012fb8:	60da      	str	r2, [r3, #12]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	69ba      	ldr	r2, [r7, #24]
 8012fbe:	611a      	str	r2, [r3, #16]
    {
    }
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3714      	adds	r7, #20
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr
 8012fce:	bf00      	nop
 8012fd0:	08052170 	.word	0x08052170

08012fd4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
    {
 8012fdc:	4a04      	ldr	r2, [pc, #16]	; (8012ff0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	601a      	str	r2, [r3, #0]
    }
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	370c      	adds	r7, #12
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr
 8012ff0:	08052170 	.word	0x08052170

08012ff4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
    }
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f7ff ffe9 	bl	8012fd4 <_ZN8touchgfx7MVPHeapD1Ev>
 8013002:	2114      	movs	r1, #20
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f011 feb1 	bl	8024d6c <_ZdlPvj>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	4618      	mov	r0, r3
 801300e:	3708      	adds	r7, #8
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
    {
 801301c:	4a04      	ldr	r2, [pc, #16]	; (8013030 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	601a      	str	r2, [r3, #0]
    }
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	4618      	mov	r0, r3
 8013026:	370c      	adds	r7, #12
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr
 8013030:	08053650 	.word	0x08053650

08013034 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
    }
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff ffe9 	bl	8013014 <_ZN8touchgfx3LCDD1Ev>
 8013042:	2108      	movs	r1, #8
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f011 fe91 	bl	8024d6c <_ZdlPvj>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4618      	mov	r0, r3
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013054:	b480      	push	{r7}
 8013056:	b083      	sub	sp, #12
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	801a      	strh	r2, [r3, #0]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2200      	movs	r2, #0
 8013066:	805a      	strh	r2, [r3, #2]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	809a      	strh	r2, [r3, #4]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	80da      	strh	r2, [r3, #6]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2200      	movs	r2, #0
 8013078:	811a      	strh	r2, [r3, #8]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2200      	movs	r2, #0
 801307e:	815a      	strh	r2, [r3, #10]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	819a      	strh	r2, [r3, #12]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	739a      	strb	r2, [r3, #14]
        {
        }
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr

0801309a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff ffd5 	bl	8013054 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	611a      	str	r2, [r3, #16]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	829a      	strh	r2, [r3, #20]
    {
    }
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	603b      	str	r3, [r7, #0]
          useDMAAcceleration(true)
 80130ce:	4a48      	ldr	r2, [pc, #288]	; (80131f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	68ba      	ldr	r2, [r7, #8]
 80130d8:	605a      	str	r2, [r3, #4]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	609a      	str	r2, [r3, #8]
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	60da      	str	r2, [r3, #12]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2200      	movs	r2, #0
 80130ea:	611a      	str	r2, [r3, #16]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	615a      	str	r2, [r3, #20]
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2200      	movs	r2, #0
 80130f6:	619a      	str	r2, [r3, #24]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	331c      	adds	r3, #28
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff ffcc 	bl	801309a <_ZN8touchgfx8GesturesC1Ev>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	639a      	str	r2, [r3, #56]	; 0x38
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2200      	movs	r2, #0
 801310c:	63da      	str	r2, [r3, #60]	; 0x3c
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2200      	movs	r2, #0
 8013112:	641a      	str	r2, [r3, #64]	; 0x40
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2200      	movs	r2, #0
 8013118:	645a      	str	r2, [r3, #68]	; 0x44
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2201      	movs	r2, #1
 8013126:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2200      	movs	r2, #0
 801312e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2200      	movs	r2, #0
 8013136:	64da      	str	r2, [r3, #76]	; 0x4c
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	3350      	adds	r3, #80	; 0x50
 801313c:	4618      	mov	r0, r3
 801313e:	f7fb fa27 	bl	800e590 <_ZN8touchgfx4RectC1Ev>
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2201      	movs	r2, #1
 8013146:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2200      	movs	r2, #0
 801314e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2200      	movs	r2, #0
 8013156:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	2201      	movs	r2, #1
 801315e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2200      	movs	r2, #0
 801316e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2200      	movs	r2, #0
 8013176:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2200      	movs	r2, #0
 801317e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2200      	movs	r2, #0
 8013186:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2200      	movs	r2, #0
 801318e:	671a      	str	r2, [r3, #112]	; 0x70
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2200      	movs	r2, #0
 801319c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2201      	movs	r2, #1
 80131a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        instance = this;
 80131a8:	4a12      	ldr	r2, [pc, #72]	; (80131f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80131ae:	4a12      	ldr	r2, [pc, #72]	; (80131f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80131b0:	8b3b      	ldrh	r3, [r7, #24]
 80131b2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80131b4:	4a11      	ldr	r2, [pc, #68]	; (80131fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80131b6:	8bbb      	ldrh	r3, [r7, #28]
 80131b8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80131ba:	4b11      	ldr	r3, [pc, #68]	; (8013200 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80131bc:	2200      	movs	r2, #0
 80131be:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80131c0:	4b0d      	ldr	r3, [pc, #52]	; (80131f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80131c2:	881a      	ldrh	r2, [r3, #0]
 80131c4:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80131c6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80131c8:	4b0c      	ldr	r3, [pc, #48]	; (80131fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80131ca:	881a      	ldrh	r2, [r3, #0]
 80131cc:	4b0e      	ldr	r3, [pc, #56]	; (8013208 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 80131ce:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80131d0:	8b3a      	ldrh	r2, [r7, #24]
 80131d2:	8bbb      	ldrh	r3, [r7, #28]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d301      	bcc.n	80131dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>
 80131d8:	2200      	movs	r2, #0
 80131da:	e000      	b.n	80131de <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11e>
 80131dc:	2201      	movs	r2, #1
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	08052c20 	.word	0x08052c20
 80131f4:	20001354 	.word	0x20001354
 80131f8:	20001346 	.word	0x20001346
 80131fc:	20001348 	.word	0x20001348
 8013200:	2000134a 	.word	0x2000134a
 8013204:	2000134c 	.word	0x2000134c
 8013208:	2000134e 	.word	0x2000134e

0801320c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	4618      	mov	r0, r3
 801321a:	f7fb fe5b 	bl	800eed4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801321e:	bf00      	nop
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
	...

08013228 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013228:	b580      	push	{r7, lr}
 801322a:	b086      	sub	sp, #24
 801322c:	af02      	add	r7, sp, #8
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	607a      	str	r2, [r7, #4]
 8013234:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013236:	68f8      	ldr	r0, [r7, #12]
 8013238:	69bb      	ldr	r3, [r7, #24]
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	68b9      	ldr	r1, [r7, #8]
 8013242:	f7ff fea7 	bl	8012f94 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013246:	4a04      	ldr	r2, [pc, #16]	; (8013258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	601a      	str	r2, [r3, #0]
    {

    }
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	4618      	mov	r0, r3
 8013250:	3710      	adds	r7, #16
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	0805215c 	.word	0x0805215c

0801325c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801325c:	b580      	push	{r7, lr}
 801325e:	af00      	add	r7, sp, #0
 8013260:	4801      	ldr	r0, [pc, #4]	; (8013268 <__tcf_0+0xc>)
 8013262:	f000 f963 	bl	801352c <_ZN12FrontendHeapD1Ev>
 8013266:	bd80      	pop	{r7, pc}
 8013268:	2000023c 	.word	0x2000023c

0801326c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801326c:	b580      	push	{r7, lr}
 801326e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013270:	4b12      	ldr	r3, [pc, #72]	; (80132bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f3bf 8f5b 	dmb	ish
 8013278:	b2db      	uxtb	r3, r3
 801327a:	f003 0301 	and.w	r3, r3, #1
 801327e:	2b00      	cmp	r3, #0
 8013280:	bf0c      	ite	eq
 8013282:	2301      	moveq	r3, #1
 8013284:	2300      	movne	r3, #0
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b00      	cmp	r3, #0
 801328a:	d013      	beq.n	80132b4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801328c:	480b      	ldr	r0, [pc, #44]	; (80132bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801328e:	f011 fd6f 	bl	8024d70 <__cxa_guard_acquire>
 8013292:	4603      	mov	r3, r0
 8013294:	2b00      	cmp	r3, #0
 8013296:	bf14      	ite	ne
 8013298:	2301      	movne	r3, #1
 801329a:	2300      	moveq	r3, #0
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d008      	beq.n	80132b4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80132a2:	4807      	ldr	r0, [pc, #28]	; (80132c0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80132a4:	f000 f868 	bl	8013378 <_ZN12FrontendHeapC1Ev>
 80132a8:	4804      	ldr	r0, [pc, #16]	; (80132bc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80132aa:	f011 fd6d 	bl	8024d88 <__cxa_guard_release>
 80132ae:	4805      	ldr	r0, [pc, #20]	; (80132c4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80132b0:	f011 fda6 	bl	8024e00 <atexit>
        return instance;
 80132b4:	4b02      	ldr	r3, [pc, #8]	; (80132c0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80132b6:	4618      	mov	r0, r3
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20000624 	.word	0x20000624
 80132c0:	2000023c 	.word	0x2000023c
 80132c4:	0801325d 	.word	0x0801325d

080132c8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	4a05      	ldr	r2, [pc, #20]	; (80132e8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	601a      	str	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff fe7b 	bl	8012fd4 <_ZN8touchgfx7MVPHeapD1Ev>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4618      	mov	r0, r3
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	0805215c 	.word	0x0805215c

080132ec <_ZN16FrontendHeapBaseD0Ev>:
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7ff ffe7 	bl	80132c8 <_ZN16FrontendHeapBaseD1Ev>
 80132fa:	2114      	movs	r1, #20
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f011 fd35 	bl	8024d6c <_ZdlPvj>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	4618      	mov	r0, r3
 8013318:	f001 f8bc 	bl	8014494 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801331c:	4a03      	ldr	r2, [pc, #12]	; (801332c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	601a      	str	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	4618      	mov	r0, r3
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	08052128 	.word	0x08052128

08013330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4618      	mov	r0, r3
 801333c:	f001 f8aa 	bl	8014494 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013340:	4a03      	ldr	r2, [pc, #12]	; (8013350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	601a      	str	r2, [r3, #0]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	4618      	mov	r0, r3
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	080520f4 	.word	0x080520f4

08013354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	f001 f898 	bl	8014494 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013364:	4a03      	ldr	r2, [pc, #12]	; (8013374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	080520c0 	.word	0x080520c0

08013378 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013378:	b590      	push	{r4, r7, lr}
 801337a:	b085      	sub	sp, #20
 801337c:	af02      	add	r7, sp, #8
 801337e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f103 0114 	add.w	r1, r3, #20
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 740d 	add.w	r4, r3, #564	; 0x234
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	4623      	mov	r3, r4
 801339e:	f7ff ff43 	bl	8013228 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80133a2:	4a18      	ldr	r2, [pc, #96]	; (8013404 <_ZN12FrontendHeapC1Ev+0x8c>)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3314      	adds	r3, #20
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff ffad 	bl	801330c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	332c      	adds	r3, #44	; 0x2c
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff ffba 	bl	8013330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff ffc6 	bl	8013354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fbdc 	bl	8011b8c <_ZN5ModelC1Ev>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f503 7024 	add.w	r0, r3, #656	; 0x290
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	4619      	mov	r1, r3
 80133e4:	f7fe fbbc 	bl	8011b60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80133f0:	4619      	mov	r1, r3
 80133f2:	4610      	mov	r0, r2
 80133f4:	f7ff ff0a 	bl	801320c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	370c      	adds	r7, #12
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd90      	pop	{r4, r7, pc}
 8013402:	bf00      	nop
 8013404:	080520ac 	.word	0x080520ac

08013408 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af02      	add	r7, sp, #8
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	607a      	str	r2, [r7, #4]
 8013414:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	8bbb      	ldrh	r3, [r7, #28]
 801341a:	9301      	str	r3, [sp, #4]
 801341c:	8b3b      	ldrh	r3, [r7, #24]
 801341e:	9300      	str	r3, [sp, #0]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	f7ff fe4b 	bl	80130c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801342a:	4a04      	ldr	r2, [pc, #16]	; (801343c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	601a      	str	r2, [r3, #0]
    }
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	4618      	mov	r0, r3
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	08052180 	.word	0x08052180

08013440 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af02      	add	r7, sp, #8
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	607a      	str	r2, [r7, #4]
 801344c:	603b      	str	r3, [r7, #0]
 801344e:	68f8      	ldr	r0, [r7, #12]
 8013450:	8bbb      	ldrh	r3, [r7, #28]
 8013452:	9301      	str	r3, [sp, #4]
 8013454:	8b3b      	ldrh	r3, [r7, #24]
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	68b9      	ldr	r1, [r7, #8]
 801345e:	f7ff ffd3 	bl	8013408 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013462:	4a04      	ldr	r2, [pc, #16]	; (8013474 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	601a      	str	r2, [r3, #0]
    }
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	08051ea8 	.word	0x08051ea8

08013478 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	4a04      	ldr	r2, [pc, #16]	; (8013494 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	4618      	mov	r0, r3
 801348a:	370c      	adds	r7, #12
 801348c:	46bd      	mov	sp, r7
 801348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013492:	4770      	bx	lr
 8013494:	08051e90 	.word	0x08051e90

08013498 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff ffe8 	bl	8013478 <_ZN8touchgfx15TouchControllerC1Ev>
 80134a8:	4a03      	ldr	r2, [pc, #12]	; (80134b8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	601a      	str	r2, [r3, #0]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	08051e78 	.word	0x08051e78

080134bc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80134bc:	b590      	push	{r4, r7, lr}
 80134be:	b085      	sub	sp, #20
 80134c0:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80134c2:	f7fe f923 	bl	801170c <_ZN14BitmapDatabase11getInstanceEv>
 80134c6:	4604      	mov	r4, r0
 80134c8:	f7fe f92a 	bl	8011720 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80134cc:	4603      	mov	r3, r0
 80134ce:	4619      	mov	r1, r3
 80134d0:	2300      	movs	r3, #0
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	2300      	movs	r3, #0
 80134d6:	2200      	movs	r2, #0
 80134d8:	4620      	mov	r0, r4
 80134da:	f005 ffc1 	bl	8019460 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80134de:	4809      	ldr	r0, [pc, #36]	; (8013504 <touchgfx_init+0x48>)
 80134e0:	f7ff fd48 	bl	8012f74 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80134e4:	2000      	movs	r0, #0
 80134e6:	f7fe fa53 	bl	8011990 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80134ea:	4807      	ldr	r0, [pc, #28]	; (8013508 <touchgfx_init+0x4c>)
 80134ec:	f005 ff02 	bl	80192f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80134f0:	f7ff febc 	bl	801326c <_ZN12FrontendHeap11getInstanceEv>
 80134f4:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80134f6:	4805      	ldr	r0, [pc, #20]	; (801350c <touchgfx_init+0x50>)
 80134f8:	f7fe ffc4 	bl	8012484 <_ZN11TouchGFXHAL10initializeEv>
}
 80134fc:	bf00      	nop
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	bd90      	pop	{r4, r7, pc}
 8013504:	200012c4 	.word	0x200012c4
 8013508:	20000030 	.word	0x20000030
 801350c:	200012c8 	.word	0x200012c8

08013510 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013510:	b580      	push	{r7, lr}
 8013512:	af00      	add	r7, sp, #0
 /*
  * Main event loop will check for VSYNC signal, and then process next frame.
  *
  * Note This function returns immediately if there is no VSYNC signal.
  */
  if (OSWrappers::isVSyncAvailable())
 8013514:	f7ff f8a8 	bl	8012668 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d002      	beq.n	8013524 <touchgfx_taskEntry+0x14>
  {
    hal.backPorchExited();
 801351e:	4802      	ldr	r0, [pc, #8]	; (8013528 <touchgfx_taskEntry+0x18>)
 8013520:	f7fe fe0a 	bl	8012138 <_ZN8touchgfx3HAL15backPorchExitedEv>
  }
}
 8013524:	bf00      	nop
 8013526:	bd80      	pop	{r7, pc}
 8013528:	200012c8 	.word	0x200012c8

0801352c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	4a10      	ldr	r2, [pc, #64]	; (8013578 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	601a      	str	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013540:	4618      	mov	r0, r3
 8013542:	f7fe fad7 	bl	8011af4 <_ZN19FrontendApplicationD1Ev>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f503 730d 	add.w	r3, r3, #564	; 0x234
 801354c:	4618      	mov	r0, r3
 801354e:	f000 f827 	bl	80135a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	332c      	adds	r3, #44	; 0x2c
 8013556:	4618      	mov	r0, r3
 8013558:	f000 f844 	bl	80135e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	3314      	adds	r3, #20
 8013560:	4618      	mov	r0, r3
 8013562:	f000 f863 	bl	801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff fead 	bl	80132c8 <_ZN16FrontendHeapBaseD1Ev>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	080520ac 	.word	0x080520ac

0801357c <_ZN12FrontendHeapD0Ev>:
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff ffd1 	bl	801352c <_ZN12FrontendHeapD1Ev>
 801358a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f011 fbec 	bl	8024d6c <_ZdlPvj>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
	...

080135a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	4a05      	ldr	r2, [pc, #20]	; (80135c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f000 ff6d 	bl	8014490 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	080520c0 	.word	0x080520c0

080135c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff ffe7 	bl	80135a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80135d2:	2158      	movs	r1, #88	; 0x58
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f011 fbc9 	bl	8024d6c <_ZdlPvj>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4618      	mov	r0, r3
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	4a05      	ldr	r2, [pc, #20]	; (8013604 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	601a      	str	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4618      	mov	r0, r3
 80135f6:	f000 ff4b 	bl	8014490 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4618      	mov	r0, r3
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	080520f4 	.word	0x080520f4

08013608 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013608:	b580      	push	{r7, lr}
 801360a:	b082      	sub	sp, #8
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7ff ffe7 	bl	80135e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013616:	f44f 7102 	mov.w	r1, #520	; 0x208
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f011 fba6 	bl	8024d6c <_ZdlPvj>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	4a05      	ldr	r2, [pc, #20]	; (801364c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	f000 ff27 	bl	8014490 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	08052128 	.word	0x08052128

08013650 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7ff ffe7 	bl	801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801365e:	2118      	movs	r1, #24
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f011 fb83 	bl	8024d6c <_ZdlPvj>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4618      	mov	r0, r3
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8013670:	b580      	push	{r7, lr}
 8013672:	b082      	sub	sp, #8
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	4a05      	ldr	r2, [pc, #20]	; (8013690 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	601a      	str	r2, [r3, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff fcc7 	bl	8013014 <_ZN8touchgfx3LCDD1Ev>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4618      	mov	r0, r3
 801368a:	3708      	adds	r7, #8
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	08054710 	.word	0x08054710

08013694 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7ff ffe7 	bl	8013670 <_ZN8touchgfx8LCD16bppD1Ev>
 80136a2:	2178      	movs	r1, #120	; 0x78
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f011 fb61 	bl	8024d6c <_ZdlPvj>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4618      	mov	r0, r3
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <_Z41__static_initialization_and_destruction_0ii>:
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af02      	add	r7, sp, #8
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d119      	bne.n	80136f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d114      	bne.n	80136f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80136ce:	4818      	ldr	r0, [pc, #96]	; (8013730 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80136d0:	f7ff fee2 	bl	8013498 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 80136d4:	4817      	ldr	r0, [pc, #92]	; (8013734 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80136d6:	f7ff f94b 	bl	8012970 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 80136da:	4817      	ldr	r0, [pc, #92]	; (8013738 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80136dc:	f008 feb0 	bl	801c440 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80136e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80136e4:	9301      	str	r3, [sp, #4]
 80136e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80136ea:	9300      	str	r3, [sp, #0]
 80136ec:	4b10      	ldr	r3, [pc, #64]	; (8013730 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80136ee:	4a12      	ldr	r2, [pc, #72]	; (8013738 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80136f0:	4910      	ldr	r1, [pc, #64]	; (8013734 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80136f2:	4812      	ldr	r0, [pc, #72]	; (801373c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80136f4:	f7ff fea4 	bl	8013440 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d113      	bne.n	8013726 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013704:	4293      	cmp	r3, r2
 8013706:	d10e      	bne.n	8013726 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013708:	480c      	ldr	r0, [pc, #48]	; (801373c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801370a:	f7fe ff33 	bl	8012574 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801370e:	480c      	ldr	r0, [pc, #48]	; (8013740 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013710:	f7fa fc26 	bl	800df60 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8013714:	4808      	ldr	r0, [pc, #32]	; (8013738 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013716:	f7ff ffab 	bl	8013670 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 801371a:	4806      	ldr	r0, [pc, #24]	; (8013734 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801371c:	f7ff f952 	bl	80129c4 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8013720:	4803      	ldr	r0, [pc, #12]	; (8013730 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013722:	f7fe fc79 	bl	8012018 <_ZN20STM32TouchControllerD1Ev>
}
 8013726:	bf00      	nop
 8013728:	3708      	adds	r7, #8
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	20000628 	.word	0x20000628
 8013734:	2000062c 	.word	0x2000062c
 8013738:	2000124c 	.word	0x2000124c
 801373c:	200012c8 	.word	0x200012c8
 8013740:	20000030 	.word	0x20000030

08013744 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801374c:	2301      	movs	r3, #1
    }
 801374e:	4618      	mov	r0, r3
 8013750:	370c      	adds	r7, #12
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr

0801375a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 801375a:	b480      	push	{r7}
 801375c:	b083      	sub	sp, #12
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013762:	2350      	movs	r3, #80	; 0x50
    }
 8013764:	4618      	mov	r0, r3
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	460b      	mov	r3, r1
 801377a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801377c:	887a      	ldrh	r2, [r7, #2]
 801377e:	4613      	mov	r3, r2
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	4413      	add	r3, r2
 8013784:	011b      	lsls	r3, r3, #4
 8013786:	3308      	adds	r3, #8
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	4413      	add	r3, r2
    }
 801378c:	4618      	mov	r0, r3
 801378e:	370c      	adds	r7, #12
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr

08013798 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	460b      	mov	r3, r1
 80137a2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80137a4:	887a      	ldrh	r2, [r7, #2]
 80137a6:	4613      	mov	r3, r2
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	4413      	add	r3, r2
 80137ac:	011b      	lsls	r3, r3, #4
 80137ae:	3308      	adds	r3, #8
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	4413      	add	r3, r2
    }
 80137b4:	4618      	mov	r0, r3
 80137b6:	370c      	adds	r7, #12
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr

080137c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80137c0:	b480      	push	{r7}
 80137c2:	b083      	sub	sp, #12
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80137c8:	2301      	movs	r3, #1
    }
 80137ca:	4618      	mov	r0, r3
 80137cc:	370c      	adds	r7, #12
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr

080137d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80137d6:	b480      	push	{r7}
 80137d8:	b083      	sub	sp, #12
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80137de:	f44f 7300 	mov.w	r3, #512	; 0x200
    }
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	460b      	mov	r3, r1
 80137f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80137fa:	887b      	ldrh	r3, [r7, #2]
 80137fc:	025b      	lsls	r3, r3, #9
 80137fe:	3308      	adds	r3, #8
 8013800:	687a      	ldr	r2, [r7, #4]
 8013802:	4413      	add	r3, r2
    }
 8013804:	4618      	mov	r0, r3
 8013806:	370c      	adds	r7, #12
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr

08013810 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	460b      	mov	r3, r1
 801381a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801381c:	887b      	ldrh	r3, [r7, #2]
 801381e:	025b      	lsls	r3, r3, #9
 8013820:	3308      	adds	r3, #8
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4413      	add	r3, r2
    }
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013832:	b480      	push	{r7}
 8013834:	b083      	sub	sp, #12
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801383a:	2301      	movs	r3, #1
    }
 801383c:	4618      	mov	r0, r3
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013850:	2310      	movs	r3, #16
    }
 8013852:	4618      	mov	r0, r3
 8013854:	370c      	adds	r7, #12
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr

0801385e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801385e:	b480      	push	{r7}
 8013860:	b083      	sub	sp, #12
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
 8013866:	460b      	mov	r3, r1
 8013868:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801386a:	887b      	ldrh	r3, [r7, #2]
 801386c:	011b      	lsls	r3, r3, #4
 801386e:	3308      	adds	r3, #8
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	4413      	add	r3, r2
    }
 8013874:	4618      	mov	r0, r3
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013880:	b480      	push	{r7}
 8013882:	b083      	sub	sp, #12
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	460b      	mov	r3, r1
 801388a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801388c:	887b      	ldrh	r3, [r7, #2]
 801388e:	011b      	lsls	r3, r3, #4
 8013890:	3308      	adds	r3, #8
 8013892:	687a      	ldr	r2, [r7, #4]
 8013894:	4413      	add	r3, r2
    }
 8013896:	4618      	mov	r0, r3
 8013898:	370c      	adds	r7, #12
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr

080138a2 <_GLOBAL__sub_I_touchgfx_init>:
 80138a2:	b580      	push	{r7, lr}
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80138aa:	2001      	movs	r0, #1
 80138ac:	f7ff ff02 	bl	80136b4 <_Z41__static_initialization_and_destruction_0ii>
 80138b0:	bd80      	pop	{r7, pc}

080138b2 <_GLOBAL__sub_D_touchgfx_init>:
 80138b2:	b580      	push	{r7, lr}
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7ff fefa 	bl	80136b4 <_Z41__static_initialization_and_destruction_0ii>
 80138c0:	bd80      	pop	{r7, pc}

080138c2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b082      	sub	sp, #8
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	3318      	adds	r3, #24
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	4798      	blx	r3
    }
 80138d6:	bf00      	nop
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80138de:	b480      	push	{r7}
 80138e0:	b083      	sub	sp, #12
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	460b      	mov	r3, r1
 80138e8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	78fa      	ldrb	r2, [r7, #3]
 80138ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80138f2:	bf00      	nop
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80138fe:	b480      	push	{r7}
 8013900:	b083      	sub	sp, #12
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801390c:	3301      	adds	r3, #1
 801390e:	b2da      	uxtb	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8013916:	bf00      	nop
 8013918:	370c      	adds	r7, #12
 801391a:	46bd      	mov	sp, r7
 801391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013920:	4770      	bx	lr
	...

08013924 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	460b      	mov	r3, r1
 801392e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013930:	78fb      	ldrb	r3, [r7, #3]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d002      	beq.n	801393c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013936:	78fb      	ldrb	r3, [r7, #3]
 8013938:	2b02      	cmp	r3, #2
 801393a:	d105      	bne.n	8013948 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	78fa      	ldrb	r2, [r7, #3]
 8013940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8013944:	2301      	movs	r3, #1
 8013946:	e027      	b.n	8013998 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013948:	78fb      	ldrb	r3, [r7, #3]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d123      	bne.n	8013996 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013952:	2b00      	cmp	r3, #0
 8013954:	d014      	beq.n	8013980 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	3384      	adds	r3, #132	; 0x84
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	4798      	blx	r3
 8013962:	4603      	mov	r3, r0
 8013964:	461a      	mov	r2, r3
 8013966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801396a:	429a      	cmp	r2, r3
 801396c:	d008      	beq.n	8013980 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801396e:	4b0c      	ldr	r3, [pc, #48]	; (80139a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	f083 0301 	eor.w	r3, r3, #1
 8013976:	b2db      	uxtb	r3, r3
 8013978:	2b00      	cmp	r3, #0
 801397a:	d001      	beq.n	8013980 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801397c:	2301      	movs	r3, #1
 801397e:	e000      	b.n	8013982 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013980:	2300      	movs	r3, #0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d005      	beq.n	8013992 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	78fa      	ldrb	r2, [r7, #3]
 801398a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801398e:	2301      	movs	r3, #1
 8013990:	e002      	b.n	8013998 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013992:	2300      	movs	r3, #0
 8013994:	e000      	b.n	8013998 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013996:	2300      	movs	r3, #0
    }
 8013998:	4618      	mov	r0, r3
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	20001350 	.word	0x20001350

080139a4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80139b4:	bf00      	nop
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr

080139c0 <__NVIC_EnableIRQ>:
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	4603      	mov	r3, r0
 80139c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	db0d      	blt.n	80139ee <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80139d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	f003 021f 	and.w	r2, r3, #31
 80139dc:	4907      	ldr	r1, [pc, #28]	; (80139fc <__NVIC_EnableIRQ+0x3c>)
 80139de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139e2:	095b      	lsrs	r3, r3, #5
 80139e4:	2001      	movs	r0, #1
 80139e6:	fa00 f202 	lsl.w	r2, r0, r2
 80139ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80139ee:	bf00      	nop
 80139f0:	370c      	adds	r7, #12
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	e000e100 	.word	0xe000e100

08013a00 <__NVIC_DisableIRQ>:
{
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	4603      	mov	r3, r0
 8013a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	db12      	blt.n	8013a38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	f003 021f 	and.w	r2, r3, #31
 8013a1c:	4909      	ldr	r1, [pc, #36]	; (8013a44 <__NVIC_DisableIRQ+0x44>)
 8013a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a22:	095b      	lsrs	r3, r3, #5
 8013a24:	2001      	movs	r0, #1
 8013a26:	fa00 f202 	lsl.w	r2, r0, r2
 8013a2a:	3320      	adds	r3, #32
 8013a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a34:	f3bf 8f6f 	isb	sy
}
 8013a38:	bf00      	nop
 8013a3a:	370c      	adds	r7, #12
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a42:	4770      	bx	lr
 8013a44:	e000e100 	.word	0xe000e100

08013a48 <__NVIC_SetPriority>:
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	4603      	mov	r3, r0
 8013a50:	6039      	str	r1, [r7, #0]
 8013a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	db0c      	blt.n	8013a76 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	4a0e      	ldr	r2, [pc, #56]	; (8013a9c <__NVIC_SetPriority+0x54>)
 8013a62:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8013a66:	4608      	mov	r0, r1
 8013a68:	011b      	lsls	r3, r3, #4
 8013a6a:	b2d9      	uxtb	r1, r3
 8013a6c:	1813      	adds	r3, r2, r0
 8013a6e:	460a      	mov	r2, r1
 8013a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013a74:	e00c      	b.n	8013a90 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	4909      	ldr	r1, [pc, #36]	; (8013aa0 <__NVIC_SetPriority+0x58>)
 8013a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	f003 030f 	and.w	r3, r3, #15
 8013a86:	3b04      	subs	r3, #4
 8013a88:	0112      	lsls	r2, r2, #4
 8013a8a:	b2d2      	uxtb	r2, r2
 8013a8c:	440b      	add	r3, r1
 8013a8e:	761a      	strb	r2, [r3, #24]
}
 8013a90:	bf00      	nop
 8013a92:	370c      	adds	r7, #12
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr
 8013a9c:	e000e100 	.word	0xe000e100
 8013aa0:	e000ed00 	.word	0xe000ed00

08013aa4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013aa4:	b5b0      	push	{r4, r5, r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f001 fcd8 	bl	8015464 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8013ab4:	687d      	ldr	r5, [r7, #4]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	334c      	adds	r3, #76	; 0x4c
 8013abc:	681c      	ldr	r4, [r3, #0]
 8013abe:	f003 fcdf 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	4913      	ldr	r1, [pc, #76]	; (8013b1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7ff ff68 	bl	80139a4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff ff23 	bl	8013924 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    enableLCDControllerInterrupt();
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	3368      	adds	r3, #104	; 0x68
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	4798      	blx	r3
    enableInterrupts();
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	3360      	adds	r3, #96	; 0x60
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	4798      	blx	r3
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	3374      	adds	r3, #116	; 0x74
 8013afe:	681c      	ldr	r4, [r3, #0]
 8013b00:	2300      	movs	r3, #0
 8013b02:	2200      	movs	r2, #0
 8013b04:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8013b08:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2101      	movs	r1, #1
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ff fee5 	bl	80138de <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8013b14:	bf00      	nop
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b1c:	080126bd 	.word	0x080126bd

08013b20 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013b28:	2109      	movs	r1, #9
 8013b2a:	205a      	movs	r0, #90	; 0x5a
 8013b2c:	f7ff ff8c 	bl	8013a48 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013b30:	2109      	movs	r1, #9
 8013b32:	2058      	movs	r0, #88	; 0x58
 8013b34:	f7ff ff88 	bl	8013a48 <__NVIC_SetPriority>
}
 8013b38:	bf00      	nop
 8013b3a:	3708      	adds	r7, #8
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013b48:	205a      	movs	r0, #90	; 0x5a
 8013b4a:	f7ff ff39 	bl	80139c0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013b4e:	2058      	movs	r0, #88	; 0x58
 8013b50:	f7ff ff36 	bl	80139c0 <__NVIC_EnableIRQ>
}
 8013b54:	bf00      	nop
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013b64:	205a      	movs	r0, #90	; 0x5a
 8013b66:	f7ff ff4b 	bl	8013a00 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013b6a:	2058      	movs	r0, #88	; 0x58
 8013b6c:	f7ff ff48 	bl	8013a00 <__NVIC_DisableIRQ>
}
 8013b70:	bf00      	nop
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013b80:	4b11      	ldr	r3, [pc, #68]	; (8013bc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	3b01      	subs	r3, #1
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	4b0e      	ldr	r3, [pc, #56]	; (8013bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013b92:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013b94:	4b0c      	ldr	r3, [pc, #48]	; (8013bc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013b96:	691b      	ldr	r3, [r3, #16]
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	4b0a      	ldr	r3, [pc, #40]	; (8013bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013ba6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013ba8:	4b08      	ldr	r3, [pc, #32]	; (8013bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013baa:	881a      	ldrh	r2, [r3, #0]
 8013bac:	4b06      	ldr	r3, [pc, #24]	; (8013bc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013bb0:	4b05      	ldr	r3, [pc, #20]	; (8013bc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bb4:	4a04      	ldr	r2, [pc, #16]	; (8013bc8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bb6:	f043 0301 	orr.w	r3, r3, #1
 8013bba:	6353      	str	r3, [r2, #52]	; 0x34
}
 8013bbc:	bf00      	nop
 8013bbe:	370c      	adds	r7, #12
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc6:	4770      	bx	lr
 8013bc8:	40016800 	.word	0x40016800
 8013bcc:	20001340 	.word	0x20001340
 8013bd0:	20001342 	.word	0x20001342

08013bd4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013bdc:	4b03      	ldr	r3, [pc, #12]	; (8013bec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	370c      	adds	r7, #12
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr
 8013bec:	40016884 	.word	0x40016884

08013bf0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013bfa:	4a06      	ldr	r2, [pc, #24]	; (8013c14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013c00:	4b05      	ldr	r3, [pc, #20]	; (8013c18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013c02:	2201      	movs	r2, #1
 8013c04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013c06:	bf00      	nop
 8013c08:	370c      	adds	r7, #12
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop
 8013c14:	40016884 	.word	0x40016884
 8013c18:	40016800 	.word	0x40016800

08013c1c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6839      	ldr	r1, [r7, #0]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f001 f92a 	bl	8014e84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
 8013c44:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	68b9      	ldr	r1, [r7, #8]
 8013c4e:	f001 fa4e 	bl	80150ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013c52:	4603      	mov	r3, r0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013c64:	4b0d      	ldr	r3, [pc, #52]	; (8013c9c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c68:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013c6a:	4b0c      	ldr	r3, [pc, #48]	; (8013c9c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	3301      	adds	r3, #1
 8013c78:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8013c7a:	89fa      	ldrh	r2, [r7, #14]
 8013c7c:	89bb      	ldrh	r3, [r7, #12]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d304      	bcc.n	8013c8c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8013c82:	89fa      	ldrh	r2, [r7, #14]
 8013c84:	89bb      	ldrh	r3, [r7, #12]
 8013c86:	1ad3      	subs	r3, r2, r3
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	e000      	b.n	8013c8e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8013c8c:	2300      	movs	r3, #0
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3714      	adds	r7, #20
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
 8013c9a:	bf00      	nop
 8013c9c:	40016800 	.word	0x40016800

08013ca0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8013ca8:	4b1a      	ldr	r3, [pc, #104]	; (8013d14 <HAL_LTDC_LineEventCallback+0x74>)
 8013caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cac:	4a1a      	ldr	r2, [pc, #104]	; (8013d18 <HAL_LTDC_LineEventCallback+0x78>)
 8013cae:	8812      	ldrh	r2, [r2, #0]
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	bf0c      	ite	eq
 8013cb4:	2301      	moveq	r3, #1
 8013cb6:	2300      	movne	r3, #0
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d017      	beq.n	8013cee <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8013cbe:	4b17      	ldr	r3, [pc, #92]	; (8013d1c <HAL_LTDC_LineEventCallback+0x7c>)
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7f1 fc07 	bl	80054d8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8013cca:	f7fa fec1 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7ff fe14 	bl	80138fe <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8013cd6:	f7fe fcbb 	bl	8012650 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8013cda:	f7fa feb9 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f001 fe47 	bl	8015974 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	f7fe f9b8 	bl	801205c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8013cec:	e00e      	b.n	8013d0c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8013cee:	4b0a      	ldr	r3, [pc, #40]	; (8013d18 <HAL_LTDC_LineEventCallback+0x78>)
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7f1 fbef 	bl	80054d8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	f7fe f9b9 	bl	8012072 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8013d00:	f7fa fea6 	bl	800ea50 <_ZN8touchgfx3HAL11getInstanceEv>
 8013d04:	4603      	mov	r3, r0
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7ff fddb 	bl	80138c2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8013d0c:	bf00      	nop
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	40016800 	.word	0x40016800
 8013d18:	20001340 	.word	0x20001340
 8013d1c:	20001342 	.word	0x20001342

08013d20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8013d24:	2200      	movs	r2, #0
 8013d26:	490e      	ldr	r1, [pc, #56]	; (8013d60 <MX_USB_HOST_Init+0x40>)
 8013d28:	480e      	ldr	r0, [pc, #56]	; (8013d64 <MX_USB_HOST_Init+0x44>)
 8013d2a:	f7f6 fb8d 	bl	800a448 <USBH_Init>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d001      	beq.n	8013d38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013d34:	f7ed fdac 	bl	8001890 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8013d38:	490b      	ldr	r1, [pc, #44]	; (8013d68 <MX_USB_HOST_Init+0x48>)
 8013d3a:	480a      	ldr	r0, [pc, #40]	; (8013d64 <MX_USB_HOST_Init+0x44>)
 8013d3c:	f7f6 fc12 	bl	800a564 <USBH_RegisterClass>
 8013d40:	4603      	mov	r3, r0
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d001      	beq.n	8013d4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013d46:	f7ed fda3 	bl	8001890 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8013d4a:	4806      	ldr	r0, [pc, #24]	; (8013d64 <MX_USB_HOST_Init+0x44>)
 8013d4c:	f7f6 fc96 	bl	800a67c <USBH_Start>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d001      	beq.n	8013d5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013d56:	f7ed fd9b 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013d5a:	bf00      	nop
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	08013d81 	.word	0x08013d81
 8013d64:	2000247c 	.word	0x2000247c
 8013d68:	20000010 	.word	0x20000010

08013d6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8013d70:	4802      	ldr	r0, [pc, #8]	; (8013d7c <MX_USB_HOST_Process+0x10>)
 8013d72:	f7f6 fc93 	bl	800a69c <USBH_Process>
}
 8013d76:	bf00      	nop
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	2000247c 	.word	0x2000247c

08013d80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	460b      	mov	r3, r1
 8013d8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013d8c:	78fb      	ldrb	r3, [r7, #3]
 8013d8e:	3b01      	subs	r3, #1
 8013d90:	2b04      	cmp	r3, #4
 8013d92:	d819      	bhi.n	8013dc8 <USBH_UserProcess+0x48>
 8013d94:	a201      	add	r2, pc, #4	; (adr r2, 8013d9c <USBH_UserProcess+0x1c>)
 8013d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9a:	bf00      	nop
 8013d9c:	08013dc9 	.word	0x08013dc9
 8013da0:	08013db9 	.word	0x08013db9
 8013da4:	08013dc9 	.word	0x08013dc9
 8013da8:	08013dc1 	.word	0x08013dc1
 8013dac:	08013db1 	.word	0x08013db1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013db0:	4b09      	ldr	r3, [pc, #36]	; (8013dd8 <USBH_UserProcess+0x58>)
 8013db2:	2203      	movs	r2, #3
 8013db4:	701a      	strb	r2, [r3, #0]
  break;
 8013db6:	e008      	b.n	8013dca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013db8:	4b07      	ldr	r3, [pc, #28]	; (8013dd8 <USBH_UserProcess+0x58>)
 8013dba:	2202      	movs	r2, #2
 8013dbc:	701a      	strb	r2, [r3, #0]
  break;
 8013dbe:	e004      	b.n	8013dca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013dc0:	4b05      	ldr	r3, [pc, #20]	; (8013dd8 <USBH_UserProcess+0x58>)
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	701a      	strb	r2, [r3, #0]
  break;
 8013dc6:	e000      	b.n	8013dca <USBH_UserProcess+0x4a>

  default:
  break;
 8013dc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013dca:	bf00      	nop
 8013dcc:	370c      	adds	r7, #12
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	20001344 	.word	0x20001344

08013ddc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b08a      	sub	sp, #40	; 0x28
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013de4:	f107 0314 	add.w	r3, r7, #20
 8013de8:	2200      	movs	r2, #0
 8013dea:	601a      	str	r2, [r3, #0]
 8013dec:	605a      	str	r2, [r3, #4]
 8013dee:	609a      	str	r2, [r3, #8]
 8013df0:	60da      	str	r2, [r3, #12]
 8013df2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4a1d      	ldr	r2, [pc, #116]	; (8013e70 <HAL_HCD_MspInit+0x94>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d134      	bne.n	8013e68 <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013dfe:	2300      	movs	r3, #0
 8013e00:	613b      	str	r3, [r7, #16]
 8013e02:	4b1c      	ldr	r3, [pc, #112]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e06:	4a1b      	ldr	r2, [pc, #108]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e08:	f043 0302 	orr.w	r3, r3, #2
 8013e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e0e:	4b19      	ldr	r3, [pc, #100]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e12:	f003 0302 	and.w	r3, r3, #2
 8013e16:	613b      	str	r3, [r7, #16]
 8013e18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8013e1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8013e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e20:	2302      	movs	r3, #2
 8013e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e24:	2300      	movs	r3, #0
 8013e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e28:	2303      	movs	r3, #3
 8013e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8013e2c:	230c      	movs	r3, #12
 8013e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013e30:	f107 0314 	add.w	r3, r7, #20
 8013e34:	4619      	mov	r1, r3
 8013e36:	4810      	ldr	r0, [pc, #64]	; (8013e78 <HAL_HCD_MspInit+0x9c>)
 8013e38:	f7ef fabc 	bl	80033b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	4b0c      	ldr	r3, [pc, #48]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e44:	4a0b      	ldr	r2, [pc, #44]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8013e4c:	4b09      	ldr	r3, [pc, #36]	; (8013e74 <HAL_HCD_MspInit+0x98>)
 8013e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013e54:	60fb      	str	r3, [r7, #12]
 8013e56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013e58:	2200      	movs	r2, #0
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	204d      	movs	r0, #77	; 0x4d
 8013e5e:	f7ee fe30 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013e62:	204d      	movs	r0, #77	; 0x4d
 8013e64:	f7ee fe49 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013e68:	bf00      	nop
 8013e6a:	3728      	adds	r7, #40	; 0x28
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	40040000 	.word	0x40040000
 8013e74:	40023800 	.word	0x40023800
 8013e78:	40020400 	.word	0x40020400

08013e7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7f6 ffd9 	bl	800ae42 <USBH_LL_IncTimer>
}
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f7 f811 	bl	800aece <USBH_LL_Connect>
}
 8013eac:	bf00      	nop
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7f7 f81a 	bl	800aefc <USBH_LL_Disconnect>
}
 8013ec8:	bf00      	nop
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	460b      	mov	r3, r1
 8013eda:	70fb      	strb	r3, [r7, #3]
 8013edc:	4613      	mov	r3, r2
 8013ede:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8013ee0:	bf00      	nop
 8013ee2:	370c      	adds	r7, #12
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7f6 ffcb 	bl	800ae96 <USBH_LL_PortEnabled>
}
 8013f00:	bf00      	nop
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7f6 ffcb 	bl	800aeb2 <USBH_LL_PortDisabled>
}
 8013f1c:	bf00      	nop
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d132      	bne.n	8013f9c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8013f36:	4a1c      	ldr	r2, [pc, #112]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	4a19      	ldr	r2, [pc, #100]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f42:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013f46:	4b18      	ldr	r3, [pc, #96]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f48:	4a18      	ldr	r2, [pc, #96]	; (8013fac <USBH_LL_Init+0x88>)
 8013f4a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8013f4c:	4b16      	ldr	r3, [pc, #88]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f4e:	220c      	movs	r2, #12
 8013f50:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8013f52:	4b15      	ldr	r3, [pc, #84]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f54:	2201      	movs	r2, #1
 8013f56:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013f58:	4b13      	ldr	r3, [pc, #76]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013f5e:	4b12      	ldr	r3, [pc, #72]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f60:	2202      	movs	r2, #2
 8013f62:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013f64:	4b10      	ldr	r3, [pc, #64]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f66:	2200      	movs	r2, #0
 8013f68:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013f6a:	4b0f      	ldr	r3, [pc, #60]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8013f70:	4b0d      	ldr	r3, [pc, #52]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f72:	2200      	movs	r2, #0
 8013f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013f76:	4b0c      	ldr	r3, [pc, #48]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8013f7c:	480a      	ldr	r0, [pc, #40]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f7e:	f7ef fbf4 	bl	800376a <HAL_HCD_Init>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d001      	beq.n	8013f8c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8013f88:	f7ed fc82 	bl	8001890 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8013f8c:	4806      	ldr	r0, [pc, #24]	; (8013fa8 <USBH_LL_Init+0x84>)
 8013f8e:	f7ef fff7 	bl	8003f80 <HAL_HCD_GetCurrentFrame>
 8013f92:	4603      	mov	r3, r0
 8013f94:	4619      	mov	r1, r3
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7f6 ff44 	bl	800ae24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013f9c:	2300      	movs	r3, #0
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3708      	adds	r7, #8
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	20002854 	.word	0x20002854
 8013fac:	40040000 	.word	0x40040000

08013fb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7ef ff62 	bl	8003e90 <HAL_HCD_Start>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013fd0:	7bfb      	ldrb	r3, [r7, #15]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f000 f990 	bl	80142f8 <USBH_Get_USB_Status>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}

08013fe6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	b084      	sub	sp, #16
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7ef ff6a 	bl	8003ed6 <HAL_HCD_Stop>
 8014002:	4603      	mov	r3, r0
 8014004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014006:	7bfb      	ldrb	r3, [r7, #15]
 8014008:	4618      	mov	r0, r3
 801400a:	f000 f975 	bl	80142f8 <USBH_Get_USB_Status>
 801400e:	4603      	mov	r3, r0
 8014010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014012:	7bbb      	ldrb	r3, [r7, #14]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3710      	adds	r7, #16
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b084      	sub	sp, #16
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014024:	2301      	movs	r3, #1
 8014026:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801402e:	4618      	mov	r0, r3
 8014030:	f7ef ffb4 	bl	8003f9c <HAL_HCD_GetCurrentSpeed>
 8014034:	4603      	mov	r3, r0
 8014036:	2b01      	cmp	r3, #1
 8014038:	d007      	beq.n	801404a <USBH_LL_GetSpeed+0x2e>
 801403a:	2b01      	cmp	r3, #1
 801403c:	d302      	bcc.n	8014044 <USBH_LL_GetSpeed+0x28>
 801403e:	2b02      	cmp	r3, #2
 8014040:	d006      	beq.n	8014050 <USBH_LL_GetSpeed+0x34>
 8014042:	e008      	b.n	8014056 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014044:	2300      	movs	r3, #0
 8014046:	73fb      	strb	r3, [r7, #15]
    break;
 8014048:	e008      	b.n	801405c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801404a:	2301      	movs	r3, #1
 801404c:	73fb      	strb	r3, [r7, #15]
    break;
 801404e:	e005      	b.n	801405c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014050:	2302      	movs	r3, #2
 8014052:	73fb      	strb	r3, [r7, #15]
    break;
 8014054:	e002      	b.n	801405c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8014056:	2301      	movs	r3, #1
 8014058:	73fb      	strb	r3, [r7, #15]
    break;
 801405a:	bf00      	nop
  }
  return  speed;
 801405c:	7bfb      	ldrb	r3, [r7, #15]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3710      	adds	r7, #16
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}

08014066 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014066:	b580      	push	{r7, lr}
 8014068:	b084      	sub	sp, #16
 801406a:	af00      	add	r7, sp, #0
 801406c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801406e:	2300      	movs	r3, #0
 8014070:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014072:	2300      	movs	r3, #0
 8014074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801407c:	4618      	mov	r0, r3
 801407e:	f7ef ff47 	bl	8003f10 <HAL_HCD_ResetPort>
 8014082:	4603      	mov	r3, r0
 8014084:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014086:	7bfb      	ldrb	r3, [r7, #15]
 8014088:	4618      	mov	r0, r3
 801408a:	f000 f935 	bl	80142f8 <USBH_Get_USB_Status>
 801408e:	4603      	mov	r3, r0
 8014090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014092:	7bbb      	ldrb	r3, [r7, #14]
}
 8014094:	4618      	mov	r0, r3
 8014096:	3710      	adds	r7, #16
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	460b      	mov	r3, r1
 80140a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80140ae:	78fa      	ldrb	r2, [r7, #3]
 80140b0:	4611      	mov	r1, r2
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7ef ff4f 	bl	8003f56 <HAL_HCD_HC_GetXferCount>
 80140b8:	4603      	mov	r3, r0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80140c2:	b590      	push	{r4, r7, lr}
 80140c4:	b089      	sub	sp, #36	; 0x24
 80140c6:	af04      	add	r7, sp, #16
 80140c8:	6078      	str	r0, [r7, #4]
 80140ca:	4608      	mov	r0, r1
 80140cc:	4611      	mov	r1, r2
 80140ce:	461a      	mov	r2, r3
 80140d0:	4603      	mov	r3, r0
 80140d2:	70fb      	strb	r3, [r7, #3]
 80140d4:	460b      	mov	r3, r1
 80140d6:	70bb      	strb	r3, [r7, #2]
 80140d8:	4613      	mov	r3, r2
 80140da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80140e0:	2300      	movs	r3, #0
 80140e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80140ea:	787c      	ldrb	r4, [r7, #1]
 80140ec:	78ba      	ldrb	r2, [r7, #2]
 80140ee:	78f9      	ldrb	r1, [r7, #3]
 80140f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80140f2:	9302      	str	r3, [sp, #8]
 80140f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80140f8:	9301      	str	r3, [sp, #4]
 80140fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	4623      	mov	r3, r4
 8014102:	f7ef fb94 	bl	800382e <HAL_HCD_HC_Init>
 8014106:	4603      	mov	r3, r0
 8014108:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801410a:	7bfb      	ldrb	r3, [r7, #15]
 801410c:	4618      	mov	r0, r3
 801410e:	f000 f8f3 	bl	80142f8 <USBH_Get_USB_Status>
 8014112:	4603      	mov	r3, r0
 8014114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014116:	7bbb      	ldrb	r3, [r7, #14]
}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	bd90      	pop	{r4, r7, pc}

08014120 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	460b      	mov	r3, r1
 801412a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801412c:	2300      	movs	r3, #0
 801412e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014130:	2300      	movs	r3, #0
 8014132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801413a:	78fa      	ldrb	r2, [r7, #3]
 801413c:	4611      	mov	r1, r2
 801413e:	4618      	mov	r0, r3
 8014140:	f7ef fc0d 	bl	800395e <HAL_HCD_HC_Halt>
 8014144:	4603      	mov	r3, r0
 8014146:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014148:	7bfb      	ldrb	r3, [r7, #15]
 801414a:	4618      	mov	r0, r3
 801414c:	f000 f8d4 	bl	80142f8 <USBH_Get_USB_Status>
 8014150:	4603      	mov	r3, r0
 8014152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014154:	7bbb      	ldrb	r3, [r7, #14]
}
 8014156:	4618      	mov	r0, r3
 8014158:	3710      	adds	r7, #16
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}

0801415e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801415e:	b590      	push	{r4, r7, lr}
 8014160:	b089      	sub	sp, #36	; 0x24
 8014162:	af04      	add	r7, sp, #16
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	4608      	mov	r0, r1
 8014168:	4611      	mov	r1, r2
 801416a:	461a      	mov	r2, r3
 801416c:	4603      	mov	r3, r0
 801416e:	70fb      	strb	r3, [r7, #3]
 8014170:	460b      	mov	r3, r1
 8014172:	70bb      	strb	r3, [r7, #2]
 8014174:	4613      	mov	r3, r2
 8014176:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801417c:	2300      	movs	r3, #0
 801417e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014186:	787c      	ldrb	r4, [r7, #1]
 8014188:	78ba      	ldrb	r2, [r7, #2]
 801418a:	78f9      	ldrb	r1, [r7, #3]
 801418c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014190:	9303      	str	r3, [sp, #12]
 8014192:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014194:	9302      	str	r3, [sp, #8]
 8014196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014198:	9301      	str	r3, [sp, #4]
 801419a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	4623      	mov	r3, r4
 80141a2:	f7ef fbff 	bl	80039a4 <HAL_HCD_HC_SubmitRequest>
 80141a6:	4603      	mov	r3, r0
 80141a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80141aa:	7bfb      	ldrb	r3, [r7, #15]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f000 f8a3 	bl	80142f8 <USBH_Get_USB_Status>
 80141b2:	4603      	mov	r3, r0
 80141b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3714      	adds	r7, #20
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd90      	pop	{r4, r7, pc}

080141c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80141d2:	78fa      	ldrb	r2, [r7, #3]
 80141d4:	4611      	mov	r1, r2
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ef fea8 	bl	8003f2c <HAL_HCD_HC_GetURBState>
 80141dc:	4603      	mov	r3, r0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b082      	sub	sp, #8
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
 80141ee:	460b      	mov	r3, r1
 80141f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d103      	bne.n	8014204 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80141fc:	78fb      	ldrb	r3, [r7, #3]
 80141fe:	4618      	mov	r0, r3
 8014200:	f000 f8a6 	bl	8014350 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014204:	20c8      	movs	r0, #200	; 0xc8
 8014206:	f7ee fb3d 	bl	8002884 <HAL_Delay>
  return USBH_OK;
 801420a:	2300      	movs	r3, #0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014214:	b480      	push	{r7}
 8014216:	b085      	sub	sp, #20
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	460b      	mov	r3, r1
 801421e:	70fb      	strb	r3, [r7, #3]
 8014220:	4613      	mov	r3, r2
 8014222:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801422a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801422c:	78fa      	ldrb	r2, [r7, #3]
 801422e:	68f9      	ldr	r1, [r7, #12]
 8014230:	4613      	mov	r3, r2
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	4413      	add	r3, r2
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	440b      	add	r3, r1
 801423a:	333b      	adds	r3, #59	; 0x3b
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d00a      	beq.n	8014258 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014242:	78fa      	ldrb	r2, [r7, #3]
 8014244:	68f9      	ldr	r1, [r7, #12]
 8014246:	4613      	mov	r3, r2
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	3350      	adds	r3, #80	; 0x50
 8014252:	78ba      	ldrb	r2, [r7, #2]
 8014254:	701a      	strb	r2, [r3, #0]
 8014256:	e009      	b.n	801426c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014258:	78fa      	ldrb	r2, [r7, #3]
 801425a:	68f9      	ldr	r1, [r7, #12]
 801425c:	4613      	mov	r3, r2
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4413      	add	r3, r2
 8014262:	00db      	lsls	r3, r3, #3
 8014264:	440b      	add	r3, r1
 8014266:	3351      	adds	r3, #81	; 0x51
 8014268:	78ba      	ldrb	r2, [r7, #2]
 801426a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801426c:	2300      	movs	r3, #0
}
 801426e:	4618      	mov	r0, r3
 8014270:	3714      	adds	r7, #20
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr

0801427a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801427a:	b480      	push	{r7}
 801427c:	b085      	sub	sp, #20
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
 8014282:	460b      	mov	r3, r1
 8014284:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8014286:	2300      	movs	r3, #0
 8014288:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014290:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8014292:	78fa      	ldrb	r2, [r7, #3]
 8014294:	68b9      	ldr	r1, [r7, #8]
 8014296:	4613      	mov	r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	4413      	add	r3, r2
 801429c:	00db      	lsls	r3, r3, #3
 801429e:	440b      	add	r3, r1
 80142a0:	333b      	adds	r3, #59	; 0x3b
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00a      	beq.n	80142be <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80142a8:	78fa      	ldrb	r2, [r7, #3]
 80142aa:	68b9      	ldr	r1, [r7, #8]
 80142ac:	4613      	mov	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	4413      	add	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	440b      	add	r3, r1
 80142b6:	3350      	adds	r3, #80	; 0x50
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	73fb      	strb	r3, [r7, #15]
 80142bc:	e009      	b.n	80142d2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80142be:	78fa      	ldrb	r2, [r7, #3]
 80142c0:	68b9      	ldr	r1, [r7, #8]
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	00db      	lsls	r3, r3, #3
 80142ca:	440b      	add	r3, r1
 80142cc:	3351      	adds	r3, #81	; 0x51
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80142d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3714      	adds	r7, #20
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ee facb 	bl	8002884 <HAL_Delay>
}
 80142ee:	bf00      	nop
 80142f0:	3708      	adds	r7, #8
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
	...

080142f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b085      	sub	sp, #20
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	4603      	mov	r3, r0
 8014300:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014302:	2300      	movs	r3, #0
 8014304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014306:	79fb      	ldrb	r3, [r7, #7]
 8014308:	2b03      	cmp	r3, #3
 801430a:	d817      	bhi.n	801433c <USBH_Get_USB_Status+0x44>
 801430c:	a201      	add	r2, pc, #4	; (adr r2, 8014314 <USBH_Get_USB_Status+0x1c>)
 801430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014312:	bf00      	nop
 8014314:	08014325 	.word	0x08014325
 8014318:	0801432b 	.word	0x0801432b
 801431c:	08014331 	.word	0x08014331
 8014320:	08014337 	.word	0x08014337
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014324:	2300      	movs	r3, #0
 8014326:	73fb      	strb	r3, [r7, #15]
    break;
 8014328:	e00b      	b.n	8014342 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801432a:	2302      	movs	r3, #2
 801432c:	73fb      	strb	r3, [r7, #15]
    break;
 801432e:	e008      	b.n	8014342 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014330:	2301      	movs	r3, #1
 8014332:	73fb      	strb	r3, [r7, #15]
    break;
 8014334:	e005      	b.n	8014342 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014336:	2302      	movs	r3, #2
 8014338:	73fb      	strb	r3, [r7, #15]
    break;
 801433a:	e002      	b.n	8014342 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801433c:	2302      	movs	r3, #2
 801433e:	73fb      	strb	r3, [r7, #15]
    break;
 8014340:	bf00      	nop
  }
  return usb_status;
 8014342:	7bfb      	ldrb	r3, [r7, #15]
}
 8014344:	4618      	mov	r0, r3
 8014346:	3714      	adds	r7, #20
 8014348:	46bd      	mov	sp, r7
 801434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434e:	4770      	bx	lr

08014350 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	4603      	mov	r3, r0
 8014358:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801435a:	79fb      	ldrb	r3, [r7, #7]
 801435c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801435e:	79fb      	ldrb	r3, [r7, #7]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d102      	bne.n	801436a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014364:	2301      	movs	r3, #1
 8014366:	73fb      	strb	r3, [r7, #15]
 8014368:	e001      	b.n	801436e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801436a:	2300      	movs	r3, #0
 801436c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_3,(GPIO_PinState)data);
 801436e:	7bfb      	ldrb	r3, [r7, #15]
 8014370:	461a      	mov	r2, r3
 8014372:	2108      	movs	r1, #8
 8014374:	4803      	ldr	r0, [pc, #12]	; (8014384 <MX_DriverVbusHS+0x34>)
 8014376:	f7ef f9df 	bl	8003738 <HAL_GPIO_WritePin>
}
 801437a:	bf00      	nop
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	40022000 	.word	0x40022000

08014388 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014388:	8880      	ldrh	r0, [r0, #4]
 801438a:	4770      	bx	lr

0801438c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801438c:	2300      	movs	r3, #0
 801438e:	8083      	strh	r3, [r0, #4]
 8014390:	4770      	bx	lr
	...

08014394 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014396:	6803      	ldr	r3, [r0, #0]
 8014398:	4605      	mov	r5, r0
 801439a:	460e      	mov	r6, r1
 801439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439e:	2100      	movs	r1, #0
 80143a0:	4798      	blx	r3
 80143a2:	682b      	ldr	r3, [r5, #0]
 80143a4:	4604      	mov	r4, r0
 80143a6:	6a1b      	ldr	r3, [r3, #32]
 80143a8:	4628      	mov	r0, r5
 80143aa:	4798      	blx	r3
 80143ac:	88ab      	ldrh	r3, [r5, #4]
 80143ae:	1b34      	subs	r4, r6, r4
 80143b0:	b2a4      	uxth	r4, r4
 80143b2:	fbb4 f4f0 	udiv	r4, r4, r0
 80143b6:	42a3      	cmp	r3, r4
 80143b8:	d805      	bhi.n	80143c6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80143ba:	4b0e      	ldr	r3, [pc, #56]	; (80143f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80143bc:	4a0e      	ldr	r2, [pc, #56]	; (80143f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80143be:	2120      	movs	r1, #32
 80143c0:	480e      	ldr	r0, [pc, #56]	; (80143fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80143c2:	f010 fcff 	bl	8024dc4 <__assert_func>
 80143c6:	682b      	ldr	r3, [r5, #0]
 80143c8:	2100      	movs	r1, #0
 80143ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143cc:	4628      	mov	r0, r5
 80143ce:	4798      	blx	r3
 80143d0:	682b      	ldr	r3, [r5, #0]
 80143d2:	4607      	mov	r7, r0
 80143d4:	6a1b      	ldr	r3, [r3, #32]
 80143d6:	4628      	mov	r0, r5
 80143d8:	4798      	blx	r3
 80143da:	1bf3      	subs	r3, r6, r7
 80143dc:	b29b      	uxth	r3, r3
 80143de:	fbb3 f2f0 	udiv	r2, r3, r0
 80143e2:	fb02 3010 	mls	r0, r2, r0, r3
 80143e6:	b118      	cbz	r0, 80143f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80143e8:	4b05      	ldr	r3, [pc, #20]	; (8014400 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80143ea:	4a03      	ldr	r2, [pc, #12]	; (80143f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80143ec:	2121      	movs	r1, #33	; 0x21
 80143ee:	e7e7      	b.n	80143c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80143f0:	4620      	mov	r0, r4
 80143f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143f4:	08052230 	.word	0x08052230
 80143f8:	0805239e 	.word	0x0805239e
 80143fc:	08052245 	.word	0x08052245
 8014400:	08052273 	.word	0x08052273

08014404 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014404:	b538      	push	{r3, r4, r5, lr}
 8014406:	6803      	ldr	r3, [r0, #0]
 8014408:	6a1b      	ldr	r3, [r3, #32]
 801440a:	460d      	mov	r5, r1
 801440c:	4604      	mov	r4, r0
 801440e:	4798      	blx	r3
 8014410:	4285      	cmp	r5, r0
 8014412:	d905      	bls.n	8014420 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014414:	4b0c      	ldr	r3, [pc, #48]	; (8014448 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014416:	4a0d      	ldr	r2, [pc, #52]	; (801444c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014418:	2132      	movs	r1, #50	; 0x32
 801441a:	480d      	ldr	r0, [pc, #52]	; (8014450 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801441c:	f010 fcd2 	bl	8024dc4 <__assert_func>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	88a5      	ldrh	r5, [r4, #4]
 8014424:	69db      	ldr	r3, [r3, #28]
 8014426:	4620      	mov	r0, r4
 8014428:	4798      	blx	r3
 801442a:	4285      	cmp	r5, r0
 801442c:	d303      	bcc.n	8014436 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801442e:	4b09      	ldr	r3, [pc, #36]	; (8014454 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014430:	4a06      	ldr	r2, [pc, #24]	; (801444c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014432:	2133      	movs	r1, #51	; 0x33
 8014434:	e7f1      	b.n	801441a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	88a1      	ldrh	r1, [r4, #4]
 801443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443c:	4620      	mov	r0, r4
 801443e:	4798      	blx	r3
 8014440:	88a3      	ldrh	r3, [r4, #4]
 8014442:	3301      	adds	r3, #1
 8014444:	80a3      	strh	r3, [r4, #4]
 8014446:	bd38      	pop	{r3, r4, r5, pc}
 8014448:	080522ed 	.word	0x080522ed
 801444c:	080523e1 	.word	0x080523e1
 8014450:	08052245 	.word	0x08052245
 8014454:	08052304 	.word	0x08052304

08014458 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014458:	b570      	push	{r4, r5, r6, lr}
 801445a:	6803      	ldr	r3, [r0, #0]
 801445c:	6a1b      	ldr	r3, [r3, #32]
 801445e:	4616      	mov	r6, r2
 8014460:	4604      	mov	r4, r0
 8014462:	460d      	mov	r5, r1
 8014464:	4798      	blx	r3
 8014466:	4286      	cmp	r6, r0
 8014468:	d905      	bls.n	8014476 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801446a:	4b06      	ldr	r3, [pc, #24]	; (8014484 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801446c:	4a06      	ldr	r2, [pc, #24]	; (8014488 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801446e:	4807      	ldr	r0, [pc, #28]	; (801448c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014470:	213c      	movs	r1, #60	; 0x3c
 8014472:	f010 fca7 	bl	8024dc4 <__assert_func>
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	4629      	mov	r1, r5
 801447a:	4620      	mov	r0, r4
 801447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014482:	4718      	bx	r3
 8014484:	080522ed 	.word	0x080522ed
 8014488:	08052354 	.word	0x08052354
 801448c:	08052245 	.word	0x08052245

08014490 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014490:	4770      	bx	lr
	...

08014494 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014494:	4a02      	ldr	r2, [pc, #8]	; (80144a0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014496:	6002      	str	r2, [r0, #0]
 8014498:	2200      	movs	r2, #0
 801449a:	8082      	strh	r2, [r0, #4]
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop
 80144a0:	08052328 	.word	0x08052328

080144a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80144a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80144a6:	2000      	movs	r0, #0
 80144a8:	b12b      	cbz	r3, 80144b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80144aa:	b920      	cbnz	r0, 80144b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80144ac:	1a5a      	subs	r2, r3, r1
 80144ae:	4250      	negs	r0, r2
 80144b0:	4150      	adcs	r0, r2
 80144b2:	699b      	ldr	r3, [r3, #24]
 80144b4:	e7f8      	b.n	80144a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80144b6:	4770      	bx	lr

080144b8 <_ZN8touchgfx9Container9removeAllEv>:
 80144b8:	2200      	movs	r2, #0
 80144ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80144bc:	b123      	cbz	r3, 80144c8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80144be:	6999      	ldr	r1, [r3, #24]
 80144c0:	6281      	str	r1, [r0, #40]	; 0x28
 80144c2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80144c6:	e7f8      	b.n	80144ba <_ZN8touchgfx9Container9removeAllEv+0x2>
 80144c8:	4770      	bx	lr

080144ca <_ZN8touchgfx9Container6unlinkEv>:
 80144ca:	2300      	movs	r3, #0
 80144cc:	6283      	str	r3, [r0, #40]	; 0x28
 80144ce:	4770      	bx	lr

080144d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80144d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d4:	461f      	mov	r7, r3
 80144d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80144da:	460d      	mov	r5, r1
 80144dc:	4616      	mov	r6, r2
 80144de:	b103      	cbz	r3, 80144e2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80144e0:	6038      	str	r0, [r7, #0]
 80144e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80144e4:	b314      	cbz	r4, 801452c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80144e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80144ea:	b1eb      	cbz	r3, 8014528 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80144ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80144f0:	428d      	cmp	r5, r1
 80144f2:	db19      	blt.n	8014528 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80144f4:	8923      	ldrh	r3, [r4, #8]
 80144f6:	b289      	uxth	r1, r1
 80144f8:	440b      	add	r3, r1
 80144fa:	b21b      	sxth	r3, r3
 80144fc:	429d      	cmp	r5, r3
 80144fe:	da13      	bge.n	8014528 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014500:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014504:	4296      	cmp	r6, r2
 8014506:	db0f      	blt.n	8014528 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014508:	8963      	ldrh	r3, [r4, #10]
 801450a:	b292      	uxth	r2, r2
 801450c:	4413      	add	r3, r2
 801450e:	b21b      	sxth	r3, r3
 8014510:	429e      	cmp	r6, r3
 8014512:	da09      	bge.n	8014528 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	1ab2      	subs	r2, r6, r2
 8014518:	1a69      	subs	r1, r5, r1
 801451a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801451e:	b212      	sxth	r2, r2
 8014520:	463b      	mov	r3, r7
 8014522:	b209      	sxth	r1, r1
 8014524:	4620      	mov	r0, r4
 8014526:	47c0      	blx	r8
 8014528:	69a4      	ldr	r4, [r4, #24]
 801452a:	e7db      	b.n	80144e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014530 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014530:	2200      	movs	r2, #0
 8014532:	8002      	strh	r2, [r0, #0]
 8014534:	8042      	strh	r2, [r0, #2]
 8014536:	8082      	strh	r2, [r0, #4]
 8014538:	80c2      	strh	r2, [r0, #6]
 801453a:	4770      	bx	lr

0801453c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801453c:	b570      	push	{r4, r5, r6, lr}
 801453e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014540:	460d      	mov	r5, r1
 8014542:	4616      	mov	r6, r2
 8014544:	b13c      	cbz	r4, 8014556 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	4620      	mov	r0, r4
 801454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801454c:	4632      	mov	r2, r6
 801454e:	4629      	mov	r1, r5
 8014550:	4798      	blx	r3
 8014552:	69a4      	ldr	r4, [r4, #24]
 8014554:	e7f6      	b.n	8014544 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014556:	bd70      	pop	{r4, r5, r6, pc}

08014558 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801455c:	460d      	mov	r5, r1
 801455e:	b134      	cbz	r4, 801456e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014560:	682b      	ldr	r3, [r5, #0]
 8014562:	4621      	mov	r1, r4
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	4628      	mov	r0, r5
 8014568:	4798      	blx	r3
 801456a:	69a4      	ldr	r4, [r4, #24]
 801456c:	e7f7      	b.n	801455e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801456e:	bd38      	pop	{r3, r4, r5, pc}

08014570 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014572:	b19b      	cbz	r3, 801459c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014574:	428b      	cmp	r3, r1
 8014576:	d109      	bne.n	801458c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014578:	699a      	ldr	r2, [r3, #24]
 801457a:	2100      	movs	r1, #0
 801457c:	6159      	str	r1, [r3, #20]
 801457e:	6282      	str	r2, [r0, #40]	; 0x28
 8014580:	b902      	cbnz	r2, 8014584 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014582:	4770      	bx	lr
 8014584:	6199      	str	r1, [r3, #24]
 8014586:	4770      	bx	lr
 8014588:	4613      	mov	r3, r2
 801458a:	b13a      	cbz	r2, 801459c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801458c:	699a      	ldr	r2, [r3, #24]
 801458e:	428a      	cmp	r2, r1
 8014590:	d1fa      	bne.n	8014588 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014592:	698a      	ldr	r2, [r1, #24]
 8014594:	619a      	str	r2, [r3, #24]
 8014596:	2300      	movs	r3, #0
 8014598:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801459c:	4770      	bx	lr

0801459e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801459e:	b410      	push	{r4}
 80145a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80145a2:	4604      	mov	r4, r0
 80145a4:	b92b      	cbnz	r3, 80145b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80145a6:	6803      	ldr	r3, [r0, #0]
 80145a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80145ae:	4611      	mov	r1, r2
 80145b0:	4718      	bx	r3
 80145b2:	b941      	cbnz	r1, 80145c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80145b4:	6193      	str	r3, [r2, #24]
 80145b6:	6282      	str	r2, [r0, #40]	; 0x28
 80145b8:	6154      	str	r4, [r2, #20]
 80145ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145be:	4770      	bx	lr
 80145c0:	4603      	mov	r3, r0
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d0f9      	beq.n	80145ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80145c6:	4299      	cmp	r1, r3
 80145c8:	6998      	ldr	r0, [r3, #24]
 80145ca:	d1f9      	bne.n	80145c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80145cc:	6190      	str	r0, [r2, #24]
 80145ce:	618a      	str	r2, [r1, #24]
 80145d0:	e7f2      	b.n	80145b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80145d4:	4288      	cmp	r0, r1
 80145d6:	b508      	push	{r3, lr}
 80145d8:	d105      	bne.n	80145e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80145da:	4b11      	ldr	r3, [pc, #68]	; (8014620 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80145dc:	4a11      	ldr	r2, [pc, #68]	; (8014624 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80145de:	2123      	movs	r1, #35	; 0x23
 80145e0:	4811      	ldr	r0, [pc, #68]	; (8014628 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80145e2:	f010 fbef 	bl	8024dc4 <__assert_func>
 80145e6:	694b      	ldr	r3, [r1, #20]
 80145e8:	b11b      	cbz	r3, 80145f2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80145ea:	4b10      	ldr	r3, [pc, #64]	; (801462c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80145ec:	4a0d      	ldr	r2, [pc, #52]	; (8014624 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80145ee:	2124      	movs	r1, #36	; 0x24
 80145f0:	e7f6      	b.n	80145e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80145f2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80145f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80145f8:	b913      	cbnz	r3, 8014600 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80145fa:	6281      	str	r1, [r0, #40]	; 0x28
 80145fc:	bd08      	pop	{r3, pc}
 80145fe:	4613      	mov	r3, r2
 8014600:	699a      	ldr	r2, [r3, #24]
 8014602:	b12a      	cbz	r2, 8014610 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014604:	428b      	cmp	r3, r1
 8014606:	d1fa      	bne.n	80145fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014608:	4b09      	ldr	r3, [pc, #36]	; (8014630 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801460a:	4a06      	ldr	r2, [pc, #24]	; (8014624 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801460c:	2135      	movs	r1, #53	; 0x35
 801460e:	e7e7      	b.n	80145e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014610:	428b      	cmp	r3, r1
 8014612:	d103      	bne.n	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014614:	4b06      	ldr	r3, [pc, #24]	; (8014630 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014616:	4a03      	ldr	r2, [pc, #12]	; (8014624 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014618:	2138      	movs	r1, #56	; 0x38
 801461a:	e7e1      	b.n	80145e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801461c:	6199      	str	r1, [r3, #24]
 801461e:	e7ed      	b.n	80145fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014620:	0805241f 	.word	0x0805241f
 8014624:	08052574 	.word	0x08052574
 8014628:	0805244b 	.word	0x0805244b
 801462c:	0805247e 	.word	0x0805247e
 8014630:	080524b4 	.word	0x080524b4

08014634 <_ZN8touchgfx4RectaNERKS0_>:
 8014634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014638:	f9b1 7000 	ldrsh.w	r7, [r1]
 801463c:	888c      	ldrh	r4, [r1, #4]
 801463e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014642:	443c      	add	r4, r7
 8014644:	b2a4      	uxth	r4, r4
 8014646:	fa0f f884 	sxth.w	r8, r4
 801464a:	45c1      	cmp	r9, r8
 801464c:	da2f      	bge.n	80146ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801464e:	8882      	ldrh	r2, [r0, #4]
 8014650:	444a      	add	r2, r9
 8014652:	b292      	uxth	r2, r2
 8014654:	fa0f fe82 	sxth.w	lr, r2
 8014658:	4577      	cmp	r7, lr
 801465a:	da28      	bge.n	80146ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801465c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014660:	88cb      	ldrh	r3, [r1, #6]
 8014662:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014666:	442b      	add	r3, r5
 8014668:	b21b      	sxth	r3, r3
 801466a:	429e      	cmp	r6, r3
 801466c:	da1f      	bge.n	80146ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801466e:	88c3      	ldrh	r3, [r0, #6]
 8014670:	4433      	add	r3, r6
 8014672:	b29b      	uxth	r3, r3
 8014674:	fa0f fc83 	sxth.w	ip, r3
 8014678:	4565      	cmp	r5, ip
 801467a:	da18      	bge.n	80146ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801467c:	454f      	cmp	r7, r9
 801467e:	bfb8      	it	lt
 8014680:	464f      	movlt	r7, r9
 8014682:	42b5      	cmp	r5, r6
 8014684:	bfb8      	it	lt
 8014686:	4635      	movlt	r5, r6
 8014688:	45f0      	cmp	r8, lr
 801468a:	bfd8      	it	le
 801468c:	4622      	movle	r2, r4
 801468e:	1bd2      	subs	r2, r2, r7
 8014690:	8082      	strh	r2, [r0, #4]
 8014692:	884a      	ldrh	r2, [r1, #2]
 8014694:	88c9      	ldrh	r1, [r1, #6]
 8014696:	8007      	strh	r7, [r0, #0]
 8014698:	440a      	add	r2, r1
 801469a:	b292      	uxth	r2, r2
 801469c:	b211      	sxth	r1, r2
 801469e:	458c      	cmp	ip, r1
 80146a0:	bfa8      	it	ge
 80146a2:	4613      	movge	r3, r2
 80146a4:	1b5b      	subs	r3, r3, r5
 80146a6:	80c3      	strh	r3, [r0, #6]
 80146a8:	8045      	strh	r5, [r0, #2]
 80146aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146ae:	2300      	movs	r3, #0
 80146b0:	8003      	strh	r3, [r0, #0]
 80146b2:	8043      	strh	r3, [r0, #2]
 80146b4:	8083      	strh	r3, [r0, #4]
 80146b6:	80c3      	strh	r3, [r0, #6]
 80146b8:	e7f7      	b.n	80146aa <_ZN8touchgfx4RectaNERKS0_+0x76>

080146ba <_ZNK8touchgfx4Rect7isEmptyEv>:
 80146ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	dd06      	ble.n	80146d0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80146c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80146c6:	2800      	cmp	r0, #0
 80146c8:	bfcc      	ite	gt
 80146ca:	2000      	movgt	r0, #0
 80146cc:	2001      	movle	r0, #1
 80146ce:	4770      	bx	lr
 80146d0:	2001      	movs	r0, #1
 80146d2:	4770      	bx	lr

080146d4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80146d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d8:	2300      	movs	r3, #0
 80146da:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80146dc:	8003      	strh	r3, [r0, #0]
 80146de:	4604      	mov	r4, r0
 80146e0:	8043      	strh	r3, [r0, #2]
 80146e2:	8083      	strh	r3, [r0, #4]
 80146e4:	80c3      	strh	r3, [r0, #6]
 80146e6:	2d00      	cmp	r5, #0
 80146e8:	d040      	beq.n	801476c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80146ea:	1d28      	adds	r0, r5, #4
 80146ec:	f7ff ffe5 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80146f0:	b988      	cbnz	r0, 8014716 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80146f2:	4620      	mov	r0, r4
 80146f4:	f7ff ffe1 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80146f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80146fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014700:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014704:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014708:	b138      	cbz	r0, 801471a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801470a:	8022      	strh	r2, [r4, #0]
 801470c:	8063      	strh	r3, [r4, #2]
 801470e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014712:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014716:	69ad      	ldr	r5, [r5, #24]
 8014718:	e7e5      	b.n	80146e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801471a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801471e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014722:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014726:	4290      	cmp	r0, r2
 8014728:	4607      	mov	r7, r0
 801472a:	bfa8      	it	ge
 801472c:	4617      	movge	r7, r2
 801472e:	4472      	add	r2, lr
 8014730:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014734:	8027      	strh	r7, [r4, #0]
 8014736:	4299      	cmp	r1, r3
 8014738:	460e      	mov	r6, r1
 801473a:	4440      	add	r0, r8
 801473c:	bfa8      	it	ge
 801473e:	461e      	movge	r6, r3
 8014740:	4471      	add	r1, lr
 8014742:	4463      	add	r3, ip
 8014744:	b200      	sxth	r0, r0
 8014746:	b212      	sxth	r2, r2
 8014748:	b209      	sxth	r1, r1
 801474a:	b21b      	sxth	r3, r3
 801474c:	4290      	cmp	r0, r2
 801474e:	bfac      	ite	ge
 8014750:	ebc7 0200 	rsbge	r2, r7, r0
 8014754:	ebc7 0202 	rsblt	r2, r7, r2
 8014758:	4299      	cmp	r1, r3
 801475a:	bfac      	ite	ge
 801475c:	ebc6 0301 	rsbge	r3, r6, r1
 8014760:	ebc6 0303 	rsblt	r3, r6, r3
 8014764:	8066      	strh	r6, [r4, #2]
 8014766:	80a2      	strh	r2, [r4, #4]
 8014768:	80e3      	strh	r3, [r4, #6]
 801476a:	e7d4      	b.n	8014716 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801476c:	4620      	mov	r0, r4
 801476e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014772 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014772:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014776:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801477a:	b383      	cbz	r3, 80147de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801477c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801477e:	b374      	cbz	r4, 80147de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014780:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014784:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014788:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801478c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014790:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014794:	b303      	cbz	r3, 80147d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014796:	4668      	mov	r0, sp
 8014798:	1d21      	adds	r1, r4, #4
 801479a:	f8ad 5000 	strh.w	r5, [sp]
 801479e:	f8ad 6002 	strh.w	r6, [sp, #2]
 80147a2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80147a6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80147aa:	f7ff ff43 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 80147ae:	4668      	mov	r0, sp
 80147b0:	f7ff ff83 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80147b4:	b980      	cbnz	r0, 80147d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80147b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80147ba:	88a2      	ldrh	r2, [r4, #4]
 80147bc:	1a9b      	subs	r3, r3, r2
 80147be:	f8ad 3000 	strh.w	r3, [sp]
 80147c2:	88e2      	ldrh	r2, [r4, #6]
 80147c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80147c8:	1a9b      	subs	r3, r3, r2
 80147ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80147ce:	6823      	ldr	r3, [r4, #0]
 80147d0:	4669      	mov	r1, sp
 80147d2:	689b      	ldr	r3, [r3, #8]
 80147d4:	4620      	mov	r0, r4
 80147d6:	4798      	blx	r3
 80147d8:	69a4      	ldr	r4, [r4, #24]
 80147da:	2c00      	cmp	r4, #0
 80147dc:	d1d8      	bne.n	8014790 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80147de:	b002      	add	sp, #8
 80147e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80147e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80147e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80147ea:	460d      	mov	r5, r1
 80147ec:	4616      	mov	r6, r2
 80147ee:	b323      	cbz	r3, 801483a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80147f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80147f2:	b314      	cbz	r4, 801483a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80147f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80147f8:	b1eb      	cbz	r3, 8014836 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80147fa:	6828      	ldr	r0, [r5, #0]
 80147fc:	6869      	ldr	r1, [r5, #4]
 80147fe:	466b      	mov	r3, sp
 8014800:	c303      	stmia	r3!, {r0, r1}
 8014802:	4668      	mov	r0, sp
 8014804:	1d21      	adds	r1, r4, #4
 8014806:	f7ff ff15 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 801480a:	4668      	mov	r0, sp
 801480c:	f7ff ff55 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8014810:	b988      	cbnz	r0, 8014836 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014812:	f8bd 3000 	ldrh.w	r3, [sp]
 8014816:	88a2      	ldrh	r2, [r4, #4]
 8014818:	1a9b      	subs	r3, r3, r2
 801481a:	f8ad 3000 	strh.w	r3, [sp]
 801481e:	88e2      	ldrh	r2, [r4, #6]
 8014820:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014824:	1a9b      	subs	r3, r3, r2
 8014826:	f8ad 3002 	strh.w	r3, [sp, #2]
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	4632      	mov	r2, r6
 801482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014830:	4669      	mov	r1, sp
 8014832:	4620      	mov	r0, r4
 8014834:	4798      	blx	r3
 8014836:	69a4      	ldr	r4, [r4, #24]
 8014838:	e7db      	b.n	80147f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801483a:	b002      	add	sp, #8
 801483c:	bd70      	pop	{r4, r5, r6, pc}

0801483e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801483e:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8014842:	4770      	bx	lr

08014844 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8014844:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8014848:	4770      	bx	lr

0801484a <_ZNK8touchgfx6Slider11getMinValueEv>:
 801484a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801484c:	4770      	bx	lr

0801484e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801484e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8014850:	4770      	bx	lr

08014852 <_ZN8touchgfx6Slider8setValueEi>:
 8014852:	b570      	push	{r4, r5, r6, lr}
 8014854:	6803      	ldr	r3, [r0, #0]
 8014856:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801485a:	4604      	mov	r4, r0
 801485c:	4798      	blx	r3
 801485e:	462b      	mov	r3, r5
 8014860:	4601      	mov	r1, r0
 8014862:	4620      	mov	r0, r4
 8014864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014868:	4718      	bx	r3

0801486a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801486a:	b538      	push	{r3, r4, r5, lr}
 801486c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8014870:	428c      	cmp	r4, r1
 8014872:	bfa8      	it	ge
 8014874:	460c      	movge	r4, r1
 8014876:	429c      	cmp	r4, r3
 8014878:	bfac      	ite	ge
 801487a:	ebc3 0404 	rsbge	r4, r3, r4
 801487e:	ebc3 0403 	rsblt	r4, r3, r3
 8014882:	6803      	ldr	r3, [r0, #0]
 8014884:	4605      	mov	r5, r0
 8014886:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801488a:	4798      	blx	r3
 801488c:	682b      	ldr	r3, [r5, #0]
 801488e:	fb00 4404 	mla	r4, r0, r4, r4
 8014892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014896:	4628      	mov	r0, r5
 8014898:	4798      	blx	r3
 801489a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801489e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 80148a2:	fb94 f0f0 	sdiv	r0, r4, r0
 80148a6:	2a01      	cmp	r2, #1
 80148a8:	bf08      	it	eq
 80148aa:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 80148ae:	4418      	add	r0, r3
 80148b0:	bf04      	itt	eq
 80148b2:	1a10      	subeq	r0, r2, r0
 80148b4:	18c0      	addeq	r0, r0, r3
 80148b6:	b200      	sxth	r0, r0
 80148b8:	bd38      	pop	{r3, r4, r5, pc}

080148ba <_ZNK8touchgfx6Slider15positionToValueEs>:
 80148ba:	b570      	push	{r4, r5, r6, lr}
 80148bc:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 80148c0:	428b      	cmp	r3, r1
 80148c2:	4605      	mov	r5, r0
 80148c4:	460c      	mov	r4, r1
 80148c6:	d109      	bne.n	80148dc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 80148c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80148ca:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80148ce:	2b01      	cmp	r3, #1
 80148d0:	bf01      	itttt	eq
 80148d2:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 80148d4:	1a18      	subeq	r0, r3, r0
 80148d6:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 80148d8:	18c0      	addeq	r0, r0, r3
 80148da:	bd70      	pop	{r4, r5, r6, pc}
 80148dc:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 80148e0:	428b      	cmp	r3, r1
 80148e2:	d101      	bne.n	80148e8 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 80148e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80148e6:	e7f0      	b.n	80148ca <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 80148e8:	6803      	ldr	r3, [r0, #0]
 80148ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80148ee:	4798      	blx	r3
 80148f0:	682b      	ldr	r3, [r5, #0]
 80148f2:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 80148f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80148fa:	4606      	mov	r6, r0
 80148fc:	4628      	mov	r0, r5
 80148fe:	1a64      	subs	r4, r4, r1
 8014900:	4798      	blx	r3
 8014902:	682b      	ldr	r3, [r5, #0]
 8014904:	2102      	movs	r1, #2
 8014906:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801490a:	fb96 f6f1 	sdiv	r6, r6, r1
 801490e:	fb00 6404 	mla	r4, r0, r4, r6
 8014912:	4628      	mov	r0, r5
 8014914:	4798      	blx	r3
 8014916:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014918:	fb94 f0f0 	sdiv	r0, r4, r0
 801491c:	4418      	add	r0, r3
 801491e:	e7d4      	b.n	80148ca <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08014920 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8014920:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8014924:	2302      	movs	r3, #2
 8014926:	b92a      	cbnz	r2, 8014934 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8014928:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801492c:	fb90 f0f3 	sdiv	r0, r0, r3
 8014930:	b280      	uxth	r0, r0
 8014932:	4770      	bx	lr
 8014934:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8014938:	e7f8      	b.n	801492c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801493a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801493a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801493c:	428b      	cmp	r3, r1
 801493e:	b410      	push	{r4}
 8014940:	db09      	blt.n	8014956 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8014942:	4293      	cmp	r3, r2
 8014944:	bfa8      	it	ge
 8014946:	4613      	movge	r3, r2
 8014948:	6804      	ldr	r4, [r0, #0]
 801494a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801494e:	46a4      	mov	ip, r4
 8014950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014954:	4760      	bx	ip
 8014956:	460b      	mov	r3, r1
 8014958:	e7f6      	b.n	8014948 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801495a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801495a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801495e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8014962:	1a10      	subs	r0, r2, r0
 8014964:	4770      	bx	lr

08014966 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8014966:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801496a:	1a10      	subs	r0, r2, r0
 801496c:	4770      	bx	lr

0801496e <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801496e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014972:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 8014976:	428e      	cmp	r6, r1
 8014978:	4604      	mov	r4, r0
 801497a:	bfb8      	it	lt
 801497c:	460e      	movlt	r6, r1
 801497e:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
 8014982:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014986:	428e      	cmp	r6, r1
 8014988:	bfa8      	it	ge
 801498a:	460e      	movge	r6, r1
 801498c:	3094      	adds	r0, #148	; 0x94
 801498e:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 8014992:	fa1f f886 	uxth.w	r8, r6
 8014996:	2b00      	cmp	r3, #0
 8014998:	d132      	bne.n	8014a00 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 801499a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801499e:	4631      	mov	r1, r6
 80149a0:	f7fa f809 	bl	800e9b6 <_ZN8touchgfx8Drawable6moveToEss>
 80149a4:	4638      	mov	r0, r7
 80149a6:	f003 fa3a 	bl	8017e1e <_ZNK8touchgfx8Drawable10invalidateEv>
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80149b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80149b4:	4620      	mov	r0, r4
 80149b6:	eba8 0802 	sub.w	r8, r8, r2
 80149ba:	4798      	blx	r3
 80149bc:	fa1f f888 	uxth.w	r8, r8
 80149c0:	4480      	add	r8, r0
 80149c2:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 80149c6:	4638      	mov	r0, r7
 80149c8:	f003 fa29 	bl	8017e1e <_ZNK8touchgfx8Drawable10invalidateEv>
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	4631      	mov	r1, r6
 80149d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80149d4:	4620      	mov	r0, r4
 80149d6:	4798      	blx	r3
 80149d8:	6320      	str	r0, [r4, #48]	; 0x30
 80149da:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80149de:	2800      	cmp	r0, #0
 80149e0:	d03c      	beq.n	8014a5c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 80149e2:	6803      	ldr	r3, [r0, #0]
 80149e4:	68db      	ldr	r3, [r3, #12]
 80149e6:	4798      	blx	r3
 80149e8:	2800      	cmp	r0, #0
 80149ea:	d037      	beq.n	8014a5c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 80149ec:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80149f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80149f2:	6803      	ldr	r3, [r0, #0]
 80149f4:	689b      	ldr	r3, [r3, #8]
 80149f6:	4621      	mov	r1, r4
 80149f8:	b003      	add	sp, #12
 80149fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149fe:	4718      	bx	r3
 8014a00:	4632      	mov	r2, r6
 8014a02:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8014a06:	f7f9 ffd6 	bl	800e9b6 <_ZN8touchgfx8Drawable6moveToEss>
 8014a0a:	4638      	mov	r0, r7
 8014a0c:	f003 fa07 	bl	8017e1e <_ZNK8touchgfx8Drawable10invalidateEv>
 8014a10:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8014a14:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8014a18:	6823      	ldr	r3, [r4, #0]
 8014a1a:	4405      	add	r5, r0
 8014a1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a20:	4620      	mov	r0, r4
 8014a22:	4798      	blx	r3
 8014a24:	b2ad      	uxth	r5, r5
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 8014a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a30:	eba5 0508 	sub.w	r5, r5, r8
 8014a34:	1a2d      	subs	r5, r5, r0
 8014a36:	4620      	mov	r0, r4
 8014a38:	4798      	blx	r3
 8014a3a:	b2ad      	uxth	r5, r5
 8014a3c:	b22a      	sxth	r2, r5
 8014a3e:	4440      	add	r0, r8
 8014a40:	9200      	str	r2, [sp, #0]
 8014a42:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 8014a46:	b202      	sxth	r2, r0
 8014a48:	4649      	mov	r1, r9
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f7f9 fed0 	bl	800e7f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a50:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8014a54:	1a2d      	subs	r5, r5, r0
 8014a56:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8014a5a:	e7b4      	b.n	80149c6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 8014a5c:	b003      	add	sp, #12
 8014a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014a64 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8014a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014a6c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8014a70:	45b8      	cmp	r8, r7
 8014a72:	4604      	mov	r4, r0
 8014a74:	4689      	mov	r9, r1
 8014a76:	4616      	mov	r6, r2
 8014a78:	461d      	mov	r5, r3
 8014a7a:	d305      	bcc.n	8014a88 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8014a7c:	4b28      	ldr	r3, [pc, #160]	; (8014b20 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8014a7e:	4a29      	ldr	r2, [pc, #164]	; (8014b24 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 8014a80:	4829      	ldr	r0, [pc, #164]	; (8014b28 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 8014a82:	2143      	movs	r1, #67	; 0x43
 8014a84:	f010 f99e 	bl	8024dc4 <__assert_func>
 8014a88:	f04f 0a00 	mov.w	sl, #0
 8014a8c:	b213      	sxth	r3, r2
 8014a8e:	fa0f fb81 	sxth.w	fp, r1
 8014a92:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 8014a96:	461a      	mov	r2, r3
 8014a98:	4659      	mov	r1, fp
 8014a9a:	303c      	adds	r0, #60	; 0x3c
 8014a9c:	9301      	str	r3, [sp, #4]
 8014a9e:	f7f9 feff 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 8014aa2:	9b01      	ldr	r3, [sp, #4]
 8014aa4:	4659      	mov	r1, fp
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8014aac:	f7f9 fef8 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 8014ab0:	4652      	mov	r2, sl
 8014ab2:	4651      	mov	r1, sl
 8014ab4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014ab8:	f7f9 fef2 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 8014abc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8014ac0:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8014ac4:	4449      	add	r1, r9
 8014ac6:	b28b      	uxth	r3, r1
 8014ac8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8014acc:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 8014ad0:	4439      	add	r1, r7
 8014ad2:	b289      	uxth	r1, r1
 8014ad4:	428b      	cmp	r3, r1
 8014ad6:	bf88      	it	hi
 8014ad8:	b219      	sxthhi	r1, r3
 8014ada:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8014ade:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 8014ae2:	441e      	add	r6, r3
 8014ae4:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8014ae8:	441d      	add	r5, r3
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	b2ad      	uxth	r5, r5
 8014aee:	b2b6      	uxth	r6, r6
 8014af0:	bf98      	it	ls
 8014af2:	b209      	sxthls	r1, r1
 8014af4:	4620      	mov	r0, r4
 8014af6:	42ae      	cmp	r6, r5
 8014af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014afa:	bf8c      	ite	hi
 8014afc:	b235      	sxthhi	r5, r6
 8014afe:	b22d      	sxthls	r5, r5
 8014b00:	4798      	blx	r3
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	4629      	mov	r1, r5
 8014b06:	4620      	mov	r0, r4
 8014b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b0a:	4798      	blx	r3
 8014b0c:	6823      	ldr	r3, [r4, #0]
 8014b0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014b14:	4620      	mov	r0, r4
 8014b16:	b003      	add	sp, #12
 8014b18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1c:	4718      	bx	r3
 8014b1e:	bf00      	nop
 8014b20:	08052758 	.word	0x08052758
 8014b24:	080529d2 	.word	0x080529d2
 8014b28:	080527cc 	.word	0x080527cc

08014b2c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8014b2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8014b34:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8014b38:	42b7      	cmp	r7, r6
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	4689      	mov	r9, r1
 8014b3e:	4690      	mov	r8, r2
 8014b40:	461d      	mov	r5, r3
 8014b42:	d305      	bcc.n	8014b50 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8014b44:	4b25      	ldr	r3, [pc, #148]	; (8014bdc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 8014b46:	4a26      	ldr	r2, [pc, #152]	; (8014be0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 8014b48:	4826      	ldr	r0, [pc, #152]	; (8014be4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 8014b4a:	215f      	movs	r1, #95	; 0x5f
 8014b4c:	f010 f93a 	bl	8024dc4 <__assert_func>
 8014b50:	2301      	movs	r3, #1
 8014b52:	fa0f fa81 	sxth.w	sl, r1
 8014b56:	fa0f fb82 	sxth.w	fp, r2
 8014b5a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8014b5e:	465a      	mov	r2, fp
 8014b60:	4651      	mov	r1, sl
 8014b62:	303c      	adds	r0, #60	; 0x3c
 8014b64:	f7f9 fe9c 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 8014b68:	465a      	mov	r2, fp
 8014b6a:	4651      	mov	r1, sl
 8014b6c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8014b70:	f7f9 fe96 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 8014b74:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8014b78:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8014b7c:	4489      	add	r9, r1
 8014b7e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8014b82:	6823      	ldr	r3, [r4, #0]
 8014b84:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8014b88:	4429      	add	r1, r5
 8014b8a:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8014b8e:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 8014b92:	44a8      	add	r8, r5
 8014b94:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 8014b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b9a:	b289      	uxth	r1, r1
 8014b9c:	fa1f f989 	uxth.w	r9, r9
 8014ba0:	4435      	add	r5, r6
 8014ba2:	4589      	cmp	r9, r1
 8014ba4:	b2ad      	uxth	r5, r5
 8014ba6:	fa1f f888 	uxth.w	r8, r8
 8014baa:	bf8c      	ite	hi
 8014bac:	fa0f f189 	sxthhi.w	r1, r9
 8014bb0:	b209      	sxthls	r1, r1
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	45a8      	cmp	r8, r5
 8014bb6:	bf8c      	ite	hi
 8014bb8:	fa0f f588 	sxthhi.w	r5, r8
 8014bbc:	b22d      	sxthls	r5, r5
 8014bbe:	4798      	blx	r3
 8014bc0:	6823      	ldr	r3, [r4, #0]
 8014bc2:	4629      	mov	r1, r5
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bc8:	4798      	blx	r3
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	b001      	add	sp, #4
 8014bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bda:	4718      	bx	r3
 8014bdc:	080526e6 	.word	0x080526e6
 8014be0:	0805296d 	.word	0x0805296d
 8014be4:	080527cc 	.word	0x080527cc

08014be8 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8014be8:	4291      	cmp	r1, r2
 8014bea:	b510      	push	{r4, lr}
 8014bec:	db06      	blt.n	8014bfc <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8014bee:	4b08      	ldr	r3, [pc, #32]	; (8014c10 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8014bf0:	4a08      	ldr	r2, [pc, #32]	; (8014c14 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8014bf2:	4809      	ldr	r0, [pc, #36]	; (8014c18 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8014bf4:	f240 1107 	movw	r1, #263	; 0x107
 8014bf8:	f010 f8e4 	bl	8024dc4 <__assert_func>
 8014bfc:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8014c00:	6802      	ldr	r2, [r0, #0]
 8014c02:	4619      	mov	r1, r3
 8014c04:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8014c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c0c:	4710      	bx	r2
 8014c0e:	bf00      	nop
 8014c10:	0805268e 	.word	0x0805268e
 8014c14:	08052931 	.word	0x08052931
 8014c18:	080527cc 	.word	0x080527cc

08014c1c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8014c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c20:	790b      	ldrb	r3, [r1, #4]
 8014c22:	4604      	mov	r4, r0
 8014c24:	460d      	mov	r5, r1
 8014c26:	b323      	cbz	r3, 8014c72 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d135      	bne.n	8014c98 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c2c:	6823      	ldr	r3, [r4, #0]
 8014c2e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014c32:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8014c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	d12a      	bne.n	8014c94 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8014c3e:	88ee      	ldrh	r6, [r5, #6]
 8014c40:	4620      	mov	r0, r4
 8014c42:	4798      	blx	r3
 8014c44:	1a31      	subs	r1, r6, r0
 8014c46:	b209      	sxth	r1, r1
 8014c48:	4620      	mov	r0, r4
 8014c4a:	47b8      	blx	r7
 8014c4c:	792b      	ldrb	r3, [r5, #4]
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d122      	bne.n	8014c98 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c52:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8014c56:	b1f8      	cbz	r0, 8014c98 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c58:	6803      	ldr	r3, [r0, #0]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	4798      	blx	r3
 8014c5e:	b1d8      	cbz	r0, 8014c98 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c60:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8014c64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014c66:	6803      	ldr	r3, [r0, #0]
 8014c68:	4621      	mov	r1, r4
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c70:	4718      	bx	r3
 8014c72:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8014c76:	2800      	cmp	r0, #0
 8014c78:	d0d8      	beq.n	8014c2c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014c7a:	6803      	ldr	r3, [r0, #0]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	4798      	blx	r3
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d0d3      	beq.n	8014c2c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014c84:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8014c88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014c8a:	6803      	ldr	r3, [r0, #0]
 8014c8c:	4621      	mov	r1, r4
 8014c8e:	689b      	ldr	r3, [r3, #8]
 8014c90:	4798      	blx	r3
 8014c92:	e7cb      	b.n	8014c2c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014c94:	892e      	ldrh	r6, [r5, #8]
 8014c96:	e7d3      	b.n	8014c40 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8014c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c9c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8014c9c:	b570      	push	{r4, r5, r6, lr}
 8014c9e:	6803      	ldr	r3, [r0, #0]
 8014ca0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8014ca4:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8014ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014cac:	4604      	mov	r4, r0
 8014cae:	b942      	cbnz	r2, 8014cc2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8014cb0:	894d      	ldrh	r5, [r1, #10]
 8014cb2:	4798      	blx	r3
 8014cb4:	1a29      	subs	r1, r5, r0
 8014cb6:	4633      	mov	r3, r6
 8014cb8:	4620      	mov	r0, r4
 8014cba:	b209      	sxth	r1, r1
 8014cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cc0:	4718      	bx	r3
 8014cc2:	898d      	ldrh	r5, [r1, #12]
 8014cc4:	e7f5      	b.n	8014cb2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08014cc8 <_ZN8touchgfx9ContainerC1Ev>:
 8014cc8:	2101      	movs	r1, #1
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014cd0:	4908      	ldr	r1, [pc, #32]	; (8014cf4 <_ZN8touchgfx9ContainerC1Ev+0x2c>)
 8014cd2:	8082      	strh	r2, [r0, #4]
 8014cd4:	80c2      	strh	r2, [r0, #6]
 8014cd6:	8102      	strh	r2, [r0, #8]
 8014cd8:	8142      	strh	r2, [r0, #10]
 8014cda:	8182      	strh	r2, [r0, #12]
 8014cdc:	81c2      	strh	r2, [r0, #14]
 8014cde:	8202      	strh	r2, [r0, #16]
 8014ce0:	8242      	strh	r2, [r0, #18]
 8014ce2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014ce6:	61c2      	str	r2, [r0, #28]
 8014ce8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014cec:	6001      	str	r1, [r0, #0]
 8014cee:	6282      	str	r2, [r0, #40]	; 0x28
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	080524f0 	.word	0x080524f0

08014cf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8014cf8:	b510      	push	{r4, lr}
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	8083      	strh	r3, [r0, #4]
 8014cfe:	80c3      	strh	r3, [r0, #6]
 8014d00:	8103      	strh	r3, [r0, #8]
 8014d02:	8143      	strh	r3, [r0, #10]
 8014d04:	8183      	strh	r3, [r0, #12]
 8014d06:	81c3      	strh	r3, [r0, #14]
 8014d08:	8203      	strh	r3, [r0, #16]
 8014d0a:	8243      	strh	r3, [r0, #18]
 8014d0c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014d10:	61c3      	str	r3, [r0, #28]
 8014d12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8014d16:	2301      	movs	r3, #1
 8014d18:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8014d1c:	4b05      	ldr	r3, [pc, #20]	; (8014d34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x3c>)
 8014d1e:	6003      	str	r3, [r0, #0]
 8014d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d24:	4604      	mov	r4, r0
 8014d26:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014d28:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014d2c:	f001 fa64 	bl	80161f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014d30:	4620      	mov	r0, r4
 8014d32:	bd10      	pop	{r4, pc}
 8014d34:	08053544 	.word	0x08053544

08014d38 <_ZN8touchgfx6SliderC1Ev>:
 8014d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	ae02      	add	r6, sp, #8
 8014d3e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014d42:	4604      	mov	r4, r0
 8014d44:	f7ff ffc0 	bl	8014cc8 <_ZN8touchgfx9ContainerC1Ev>
 8014d48:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8014d4c:	4b23      	ldr	r3, [pc, #140]	; (8014ddc <_ZN8touchgfx6SliderC1Ev+0xa4>)
 8014d4e:	6023      	str	r3, [r4, #0]
 8014d50:	2500      	movs	r5, #0
 8014d52:	f04f 0b01 	mov.w	fp, #1
 8014d56:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8014d5a:	4631      	mov	r1, r6
 8014d5c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8014d60:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8014d64:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8014d68:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8014d6c:	4648      	mov	r0, r9
 8014d6e:	f7ff ffc3 	bl	8014cf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014d72:	f104 0894 	add.w	r8, r4, #148	; 0x94
 8014d76:	4631      	mov	r1, r6
 8014d78:	4650      	mov	r0, sl
 8014d7a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014d7e:	f7ff ffbb 	bl	8014cf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014d82:	4631      	mov	r1, r6
 8014d84:	4640      	mov	r0, r8
 8014d86:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8014d8a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014d8e:	f7ff ffb3 	bl	8014cf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014d92:	4630      	mov	r0, r6
 8014d94:	f7ff ff98 	bl	8014cc8 <_ZN8touchgfx9ContainerC1Ev>
 8014d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014d9c:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8014da0:	4651      	mov	r1, sl
 8014da2:	4630      	mov	r0, r6
 8014da4:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8014da8:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8014dac:	f7ff fc12 	bl	80145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014db0:	4649      	mov	r1, r9
 8014db2:	4620      	mov	r0, r4
 8014db4:	f7ff fc0e 	bl	80145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014db8:	4631      	mov	r1, r6
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f7ff fc0a 	bl	80145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014dc0:	4641      	mov	r1, r8
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f7ff fc06 	bl	80145d4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014dc8:	4620      	mov	r0, r4
 8014dca:	2264      	movs	r2, #100	; 0x64
 8014dcc:	4629      	mov	r1, r5
 8014dce:	f7ff fdb4 	bl	801493a <_ZN8touchgfx6Slider13setValueRangeEii>
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	b003      	add	sp, #12
 8014dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dda:	bf00      	nop
 8014ddc:	08052804 	.word	0x08052804

08014de0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8014de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de4:	4604      	mov	r4, r0
 8014de6:	4608      	mov	r0, r1
 8014de8:	4615      	mov	r5, r2
 8014dea:	460e      	mov	r6, r1
 8014dec:	461f      	mov	r7, r3
 8014dee:	f004 fb4b 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014df2:	4680      	mov	r8, r0
 8014df4:	4628      	mov	r0, r5
 8014df6:	f004 fb47 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014dfa:	4580      	cmp	r8, r0
 8014dfc:	d005      	beq.n	8014e0a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8014dfe:	4b14      	ldr	r3, [pc, #80]	; (8014e50 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8014e00:	4a14      	ldr	r2, [pc, #80]	; (8014e54 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 8014e02:	4815      	ldr	r0, [pc, #84]	; (8014e58 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 8014e04:	2133      	movs	r1, #51	; 0x33
 8014e06:	f00f ffdd 	bl	8024dc4 <__assert_func>
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	f004 fb76 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e10:	4680      	mov	r8, r0
 8014e12:	4628      	mov	r0, r5
 8014e14:	f004 fb72 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e18:	4580      	cmp	r8, r0
 8014e1a:	d1f0      	bne.n	8014dfe <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8014e22:	f001 f9e9 	bl	80161f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e26:	4629      	mov	r1, r5
 8014e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014e2c:	f001 f9e4 	bl	80161f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e30:	4639      	mov	r1, r7
 8014e32:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8014e36:	f001 f9df 	bl	80161f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e3a:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8014e3e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8014e42:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8014e46:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 8014e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e4e:	bf00      	nop
 8014e50:	080525af 	.word	0x080525af
 8014e54:	080528c4 	.word	0x080528c4
 8014e58:	080527cc 	.word	0x080527cc

08014e5c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014e5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014e60:	4770      	bx	lr

08014e62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014e62:	b513      	push	{r0, r1, r4, lr}
 8014e64:	6803      	ldr	r3, [r0, #0]
 8014e66:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	e9cd 3300 	strd	r3, r3, [sp]
 8014e70:	466b      	mov	r3, sp
 8014e72:	47a0      	blx	r4
 8014e74:	b002      	add	sp, #8
 8014e76:	bd10      	pop	{r4, pc}

08014e78 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014e78:	2301      	movs	r3, #1
 8014e7a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014e7e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014e82:	4770      	bx	lr

08014e84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014e84:	2301      	movs	r3, #1
 8014e86:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014e8a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014e8e:	4770      	bx	lr

08014e90 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014e90:	6843      	ldr	r3, [r0, #4]
 8014e92:	2201      	movs	r2, #1
 8014e94:	725a      	strb	r2, [r3, #9]
 8014e96:	6840      	ldr	r0, [r0, #4]
 8014e98:	6803      	ldr	r3, [r0, #0]
 8014e9a:	691b      	ldr	r3, [r3, #16]
 8014e9c:	4718      	bx	r3

08014e9e <_ZN8touchgfx3HAL8flushDMAEv>:
 8014e9e:	6840      	ldr	r0, [r0, #4]
 8014ea0:	6803      	ldr	r3, [r0, #0]
 8014ea2:	689b      	ldr	r3, [r3, #8]
 8014ea4:	4718      	bx	r3
	...

08014ea8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014ea8:	4b04      	ldr	r3, [pc, #16]	; (8014ebc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	b123      	cbz	r3, 8014eb8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014eae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014eb2:	f080 0001 	eor.w	r0, r0, #1
 8014eb6:	4770      	bx	lr
 8014eb8:	2001      	movs	r0, #1
 8014eba:	4770      	bx	lr
 8014ebc:	20001350 	.word	0x20001350

08014ec0 <_ZN8touchgfx3HAL8endFrameEv>:
 8014ec0:	b510      	push	{r4, lr}
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	6840      	ldr	r0, [r0, #4]
 8014ec6:	6803      	ldr	r3, [r0, #0]
 8014ec8:	689b      	ldr	r3, [r3, #8]
 8014eca:	4798      	blx	r3
 8014ecc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014ed0:	b113      	cbz	r3, 8014ed8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014ed8:	bd10      	pop	{r4, pc}

08014eda <_ZN8touchgfx3HAL9taskEntryEv>:
 8014eda:	b508      	push	{r3, lr}
 8014edc:	6803      	ldr	r3, [r0, #0]
 8014ede:	4604      	mov	r4, r0
 8014ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ee2:	4798      	blx	r3
 8014ee4:	6823      	ldr	r3, [r4, #0]
 8014ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014ee8:	4620      	mov	r0, r4
 8014eea:	4798      	blx	r3
 8014eec:	f7fd fbcc 	bl	8012688 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014ef0:	6823      	ldr	r3, [r4, #0]
 8014ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ef4:	e7f8      	b.n	8014ee8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014ef8 <_ZN8touchgfx3HAL4tickEv>:
 8014ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014efa:	6803      	ldr	r3, [r0, #0]
 8014efc:	4d5c      	ldr	r5, [pc, #368]	; (8015070 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f02:	4604      	mov	r4, r0
 8014f04:	4798      	blx	r3
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f000 8097 	beq.w	801503a <_ZN8touchgfx3HAL4tickEv+0x142>
 8014f0c:	2001      	movs	r0, #1
 8014f0e:	f7fd f8a5 	bl	801205c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014f12:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014f16:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014f1a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014f1e:	2600      	movs	r6, #0
 8014f20:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014f24:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014f28:	b133      	cbz	r3, 8014f38 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014f32:	4798      	blx	r3
 8014f34:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014f38:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014f3c:	6862      	ldr	r2, [r4, #4]
 8014f3e:	f083 0301 	eor.w	r3, r3, #1
 8014f42:	7253      	strb	r3, [r2, #9]
 8014f44:	2601      	movs	r6, #1
 8014f46:	702e      	strb	r6, [r5, #0]
 8014f48:	f002 fa9a 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8014f4c:	6803      	ldr	r3, [r0, #0]
 8014f4e:	4631      	mov	r1, r6
 8014f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f52:	4798      	blx	r3
 8014f54:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014f58:	b90b      	cbnz	r3, 8014f5e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014f5a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014f5e:	f002 fa8f 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8014f62:	6803      	ldr	r3, [r0, #0]
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	4798      	blx	r3
 8014f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f6a:	6803      	ldr	r3, [r0, #0]
 8014f6c:	691b      	ldr	r3, [r3, #16]
 8014f6e:	4798      	blx	r3
 8014f70:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014f74:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014f80:	b10a      	cbz	r2, 8014f86 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1eb      	bne.n	8014f5e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014f86:	4a3b      	ldr	r2, [pc, #236]	; (8015074 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014f88:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014f8c:	7813      	ldrb	r3, [r2, #0]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	b25b      	sxtb	r3, r3
 8014f92:	4299      	cmp	r1, r3
 8014f94:	7013      	strb	r3, [r2, #0]
 8014f96:	dc10      	bgt.n	8014fba <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014f98:	68e0      	ldr	r0, [r4, #12]
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	7013      	strb	r3, [r2, #0]
 8014f9e:	6803      	ldr	r3, [r0, #0]
 8014fa0:	aa03      	add	r2, sp, #12
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	a902      	add	r1, sp, #8
 8014fa6:	4798      	blx	r3
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d051      	beq.n	8015052 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014fb2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	4798      	blx	r3
 8014fba:	6960      	ldr	r0, [r4, #20]
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	f88d 3007 	strb.w	r3, [sp, #7]
 8014fc2:	b158      	cbz	r0, 8014fdc <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014fc4:	6803      	ldr	r3, [r0, #0]
 8014fc6:	f10d 0107 	add.w	r1, sp, #7
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	4798      	blx	r3
 8014fce:	b128      	cbz	r0, 8014fdc <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	68db      	ldr	r3, [r3, #12]
 8014fda:	4798      	blx	r3
 8014fdc:	f104 001c 	add.w	r0, r4, #28
 8014fe0:	f00f fe08 	bl	8024bf4 <_ZN8touchgfx8Gestures4tickEv>
 8014fe4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014fe8:	b30b      	cbz	r3, 801502e <_ZN8touchgfx3HAL4tickEv+0x136>
 8014fea:	6920      	ldr	r0, [r4, #16]
 8014fec:	6803      	ldr	r3, [r0, #0]
 8014fee:	691b      	ldr	r3, [r3, #16]
 8014ff0:	4798      	blx	r3
 8014ff2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014ff4:	4606      	mov	r6, r0
 8014ff6:	b903      	cbnz	r3, 8014ffa <_ZN8touchgfx3HAL4tickEv+0x102>
 8014ff8:	6720      	str	r0, [r4, #112]	; 0x70
 8014ffa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014ffc:	4a1e      	ldr	r2, [pc, #120]	; (8015078 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8014ffe:	1af3      	subs	r3, r6, r3
 8015000:	4293      	cmp	r3, r2
 8015002:	d914      	bls.n	801502e <_ZN8touchgfx3HAL4tickEv+0x136>
 8015004:	6920      	ldr	r0, [r4, #16]
 8015006:	6803      	ldr	r3, [r0, #0]
 8015008:	699b      	ldr	r3, [r3, #24]
 801500a:	4798      	blx	r3
 801500c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801500e:	2264      	movs	r2, #100	; 0x64
 8015010:	1af3      	subs	r3, r6, r3
 8015012:	fbb3 f3f2 	udiv	r3, r3, r2
 8015016:	fbb0 f0f3 	udiv	r0, r0, r3
 801501a:	2800      	cmp	r0, #0
 801501c:	dc1e      	bgt.n	801505c <_ZN8touchgfx3HAL4tickEv+0x164>
 801501e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015022:	6920      	ldr	r0, [r4, #16]
 8015024:	6803      	ldr	r3, [r0, #0]
 8015026:	2100      	movs	r1, #0
 8015028:	69db      	ldr	r3, [r3, #28]
 801502a:	4798      	blx	r3
 801502c:	6726      	str	r6, [r4, #112]	; 0x70
 801502e:	f002 fa27 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8015032:	6803      	ldr	r3, [r0, #0]
 8015034:	2100      	movs	r1, #0
 8015036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015038:	4798      	blx	r3
 801503a:	6823      	ldr	r3, [r4, #0]
 801503c:	4620      	mov	r0, r4
 801503e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015042:	4798      	blx	r3
 8015044:	2001      	movs	r0, #1
 8015046:	f7fd f814 	bl	8012072 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801504a:	2300      	movs	r3, #0
 801504c:	702b      	strb	r3, [r5, #0]
 801504e:	b004      	add	sp, #16
 8015050:	bd70      	pop	{r4, r5, r6, pc}
 8015052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015056:	4620      	mov	r0, r4
 8015058:	4798      	blx	r3
 801505a:	e7ae      	b.n	8014fba <_ZN8touchgfx3HAL4tickEv+0xc2>
 801505c:	2863      	cmp	r0, #99	; 0x63
 801505e:	bfcb      	itete	gt
 8015060:	2300      	movgt	r3, #0
 8015062:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015066:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801506a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801506e:	e7d8      	b.n	8015022 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015070:	20001358 	.word	0x20001358
 8015074:	20001359 	.word	0x20001359
 8015078:	05f5e100 	.word	0x05f5e100

0801507c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801507c:	f7fd bac4 	b.w	8012608 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015080 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015080:	6581      	str	r1, [r0, #88]	; 0x58
 8015082:	301c      	adds	r0, #28
 8015084:	f00f bdb4 	b.w	8024bf0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015088 <_ZN8touchgfx3HAL5touchEll>:
 8015088:	b530      	push	{r4, r5, lr}
 801508a:	b087      	sub	sp, #28
 801508c:	4604      	mov	r4, r0
 801508e:	a804      	add	r0, sp, #16
 8015090:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015094:	f001 ffae 	bl	8016ff4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015098:	9b04      	ldr	r3, [sp, #16]
 801509a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801509e:	a906      	add	r1, sp, #24
 80150a0:	9b05      	ldr	r3, [sp, #20]
 80150a2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80150a6:	a803      	add	r0, sp, #12
 80150a8:	f001 fff2 	bl	8017090 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80150ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80150b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80150b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80150b8:	f104 001c 	add.w	r0, r4, #28
 80150bc:	b189      	cbz	r1, 80150e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80150be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80150c2:	9300      	str	r3, [sp, #0]
 80150c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80150c8:	4613      	mov	r3, r2
 80150ca:	462a      	mov	r2, r5
 80150cc:	f00f fda0 	bl	8024c10 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80150d0:	b128      	cbz	r0, 80150de <_ZN8touchgfx3HAL5touchEll+0x56>
 80150d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80150d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80150d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80150dc:	6623      	str	r3, [r4, #96]	; 0x60
 80150de:	b007      	add	sp, #28
 80150e0:	bd30      	pop	{r4, r5, pc}
 80150e2:	f00f fdd9 	bl	8024c98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80150e6:	2301      	movs	r3, #1
 80150e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80150ec:	e7f1      	b.n	80150d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080150ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80150ee:	b570      	push	{r4, r5, r6, lr}
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d050      	beq.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80150f4:	ea81 0002 	eor.w	r0, r1, r2
 80150f8:	07c6      	lsls	r6, r0, #31
 80150fa:	d508      	bpl.n	801510e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80150fc:	3a01      	subs	r2, #1
 80150fe:	18cc      	adds	r4, r1, r3
 8015100:	42a1      	cmp	r1, r4
 8015102:	d048      	beq.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015104:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015108:	f801 0b01 	strb.w	r0, [r1], #1
 801510c:	e7f8      	b.n	8015100 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801510e:	07d5      	lsls	r5, r2, #31
 8015110:	bf42      	ittt	mi
 8015112:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015116:	f801 0b01 	strbmi.w	r0, [r1], #1
 801511a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801511e:	2b01      	cmp	r3, #1
 8015120:	d915      	bls.n	801514e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015122:	ea82 0001 	eor.w	r0, r2, r1
 8015126:	0784      	lsls	r4, r0, #30
 8015128:	d02d      	beq.n	8015186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801512a:	1e94      	subs	r4, r2, #2
 801512c:	4608      	mov	r0, r1
 801512e:	18ce      	adds	r6, r1, r3
 8015130:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015134:	f820 5b02 	strh.w	r5, [r0], #2
 8015138:	1a35      	subs	r5, r6, r0
 801513a:	2d01      	cmp	r5, #1
 801513c:	d8f8      	bhi.n	8015130 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801513e:	1e98      	subs	r0, r3, #2
 8015140:	f020 0001 	bic.w	r0, r0, #1
 8015144:	3002      	adds	r0, #2
 8015146:	4401      	add	r1, r0
 8015148:	4402      	add	r2, r0
 801514a:	f003 0301 	and.w	r3, r3, #1
 801514e:	1f14      	subs	r4, r2, #4
 8015150:	4608      	mov	r0, r1
 8015152:	18ce      	adds	r6, r1, r3
 8015154:	1a35      	subs	r5, r6, r0
 8015156:	2d03      	cmp	r5, #3
 8015158:	d810      	bhi.n	801517c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801515a:	089c      	lsrs	r4, r3, #2
 801515c:	00a0      	lsls	r0, r4, #2
 801515e:	4401      	add	r1, r0
 8015160:	3801      	subs	r0, #1
 8015162:	4402      	add	r2, r0
 8015164:	f06f 0003 	mvn.w	r0, #3
 8015168:	fb00 3404 	mla	r4, r0, r4, r3
 801516c:	440c      	add	r4, r1
 801516e:	42a1      	cmp	r1, r4
 8015170:	d011      	beq.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015172:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015176:	f801 3b01 	strb.w	r3, [r1], #1
 801517a:	e7f8      	b.n	801516e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801517c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015180:	f840 5b04 	str.w	r5, [r0], #4
 8015184:	e7e6      	b.n	8015154 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015186:	0790      	lsls	r0, r2, #30
 8015188:	d0e1      	beq.n	801514e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801518a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801518e:	f821 0b02 	strh.w	r0, [r1], #2
 8015192:	3b02      	subs	r3, #2
 8015194:	e7db      	b.n	801514e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015196:	2001      	movs	r0, #1
 8015198:	bd70      	pop	{r4, r5, r6, pc}

0801519a <_ZN8touchgfx3HAL7noTouchEv>:
 801519a:	b510      	push	{r4, lr}
 801519c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80151a0:	4604      	mov	r4, r0
 80151a2:	b153      	cbz	r3, 80151ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80151a4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80151a8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80151ac:	2101      	movs	r1, #1
 80151ae:	301c      	adds	r0, #28
 80151b0:	f00f fd72 	bl	8024c98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80151b4:	2300      	movs	r3, #0
 80151b6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80151ba:	bd10      	pop	{r4, pc}

080151bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80151bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151c0:	4605      	mov	r5, r0
 80151c2:	6980      	ldr	r0, [r0, #24]
 80151c4:	b085      	sub	sp, #20
 80151c6:	460f      	mov	r7, r1
 80151c8:	4690      	mov	r8, r2
 80151ca:	4699      	mov	r9, r3
 80151cc:	b930      	cbnz	r0, 80151dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80151ce:	4b1f      	ldr	r3, [pc, #124]	; (801524c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80151d0:	4a1f      	ldr	r2, [pc, #124]	; (8015250 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80151d2:	f240 112f 	movw	r1, #303	; 0x12f
 80151d6:	481f      	ldr	r0, [pc, #124]	; (8015254 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80151d8:	f00f fdf4 	bl	8024dc4 <__assert_func>
 80151dc:	ac04      	add	r4, sp, #16
 80151de:	2600      	movs	r6, #0
 80151e0:	f844 6d04 	str.w	r6, [r4, #-4]!
 80151e4:	6806      	ldr	r6, [r0, #0]
 80151e6:	9401      	str	r4, [sp, #4]
 80151e8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80151ec:	9400      	str	r4, [sp, #0]
 80151ee:	6834      	ldr	r4, [r6, #0]
 80151f0:	47a0      	blx	r4
 80151f2:	4c19      	ldr	r4, [pc, #100]	; (8015258 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80151f4:	4606      	mov	r6, r0
 80151f6:	f8a4 9000 	strh.w	r9, [r4]
 80151fa:	f7f9 fc35 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 80151fe:	6803      	ldr	r3, [r0, #0]
 8015200:	6a1b      	ldr	r3, [r3, #32]
 8015202:	4798      	blx	r3
 8015204:	280c      	cmp	r0, #12
 8015206:	d80f      	bhi.n	8015228 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015208:	e8df f000 	tbb	[pc, r0]
 801520c:	1b1b1207 	.word	0x1b1b1207
 8015210:	1b1b1b1b 	.word	0x1b1b1b1b
 8015214:	1b1b1b1b 	.word	0x1b1b1b1b
 8015218:	1b          	.byte	0x1b
 8015219:	00          	.byte	0x00
 801521a:	8823      	ldrh	r3, [r4, #0]
 801521c:	fb08 7203 	mla	r2, r8, r3, r7
 8015220:	9b03      	ldr	r3, [sp, #12]
 8015222:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015226:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015228:	4630      	mov	r0, r6
 801522a:	b005      	add	sp, #20
 801522c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015230:	8822      	ldrh	r2, [r4, #0]
 8015232:	9b03      	ldr	r3, [sp, #12]
 8015234:	fb08 7202 	mla	r2, r8, r2, r7
 8015238:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801523c:	1a9a      	subs	r2, r3, r2
 801523e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015240:	e7f2      	b.n	8015228 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015242:	4b06      	ldr	r3, [pc, #24]	; (801525c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015244:	4a02      	ldr	r2, [pc, #8]	; (8015250 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015246:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 801524a:	e7c4      	b.n	80151d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801524c:	08052aa7 	.word	0x08052aa7
 8015250:	08052dba 	.word	0x08052dba
 8015254:	08052aec 	.word	0x08052aec
 8015258:	2000134c 	.word	0x2000134c
 801525c:	08052b12 	.word	0x08052b12

08015260 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015264:	4698      	mov	r8, r3
 8015266:	6803      	ldr	r3, [r0, #0]
 8015268:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801526a:	4b0f      	ldr	r3, [pc, #60]	; (80152a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801526c:	b087      	sub	sp, #28
 801526e:	f8b3 9000 	ldrh.w	r9, [r3]
 8015272:	460e      	mov	r6, r1
 8015274:	4617      	mov	r7, r2
 8015276:	4604      	mov	r4, r0
 8015278:	f7f9 fbf6 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 801527c:	6803      	ldr	r3, [r0, #0]
 801527e:	6a1b      	ldr	r3, [r3, #32]
 8015280:	4798      	blx	r3
 8015282:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015286:	9302      	str	r3, [sp, #8]
 8015288:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801528c:	9301      	str	r3, [sp, #4]
 801528e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015298:	4643      	mov	r3, r8
 801529a:	463a      	mov	r2, r7
 801529c:	4631      	mov	r1, r6
 801529e:	4620      	mov	r0, r4
 80152a0:	47a8      	blx	r5
 80152a2:	b007      	add	sp, #28
 80152a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152a8:	2000134c 	.word	0x2000134c

080152ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80152ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b0:	4606      	mov	r6, r0
 80152b2:	b089      	sub	sp, #36	; 0x24
 80152b4:	4610      	mov	r0, r2
 80152b6:	460c      	mov	r4, r1
 80152b8:	4691      	mov	r9, r2
 80152ba:	4698      	mov	r8, r3
 80152bc:	f004 f820 	bl	8019300 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	f000 8093 	beq.w	80153ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80152c6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80152ca:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8015408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80152ce:	f8da 0000 	ldr.w	r0, [sl]
 80152d2:	4f4b      	ldr	r7, [pc, #300]	; (8015400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80152d4:	6802      	ldr	r2, [r0, #0]
 80152d6:	6a12      	ldr	r2, [r2, #32]
 80152d8:	4790      	blx	r2
 80152da:	f8da 0000 	ldr.w	r0, [sl]
 80152de:	6802      	ldr	r2, [r0, #0]
 80152e0:	ad08      	add	r5, sp, #32
 80152e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80152e4:	4790      	blx	r2
 80152e6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80152ea:	f8bb 3000 	ldrh.w	r3, [fp]
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	4628      	mov	r0, r5
 80152f2:	883b      	ldrh	r3, [r7, #0]
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	f004 f8c7 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80152fa:	f8ab 0000 	strh.w	r0, [fp]
 80152fe:	4628      	mov	r0, r5
 8015300:	f004 f8fc 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015304:	f8da b000 	ldr.w	fp, [sl]
 8015308:	8038      	strh	r0, [r7, #0]
 801530a:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801530e:	9302      	str	r3, [sp, #8]
 8015310:	4648      	mov	r0, r9
 8015312:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015316:	f003 fff3 	bl	8019300 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801531a:	f8da 2000 	ldr.w	r2, [sl]
 801531e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015322:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015324:	6822      	ldr	r2, [r4, #0]
 8015326:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801532a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801532c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015330:	2200      	movs	r2, #0
 8015332:	4611      	mov	r1, r2
 8015334:	4620      	mov	r0, r4
 8015336:	4798      	blx	r3
 8015338:	2201      	movs	r2, #1
 801533a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801533e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015342:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015346:	2a00      	cmp	r2, #0
 8015348:	f104 0204 	add.w	r2, r4, #4
 801534c:	dd51      	ble.n	80153f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801534e:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015352:	2900      	cmp	r1, #0
 8015354:	dd4d      	ble.n	80153f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8015356:	6810      	ldr	r0, [r2, #0]
 8015358:	6851      	ldr	r1, [r2, #4]
 801535a:	f10d 0c18 	add.w	ip, sp, #24
 801535e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015362:	4641      	mov	r1, r8
 8015364:	a806      	add	r0, sp, #24
 8015366:	f7ff f965 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 801536a:	4628      	mov	r0, r5
 801536c:	f004 fa18 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015370:	4680      	mov	r8, r0
 8015372:	f7f9 fb79 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8015376:	6802      	ldr	r2, [r0, #0]
 8015378:	6a12      	ldr	r2, [r2, #32]
 801537a:	4790      	blx	r2
 801537c:	4580      	cmp	r8, r0
 801537e:	d03d      	beq.n	80153fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8015380:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015382:	b150      	cbz	r0, 801539a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8015384:	4628      	mov	r0, r5
 8015386:	f004 fa0b 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801538a:	4605      	mov	r5, r0
 801538c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801538e:	6803      	ldr	r3, [r0, #0]
 8015390:	6a1b      	ldr	r3, [r3, #32]
 8015392:	4798      	blx	r3
 8015394:	1a2b      	subs	r3, r5, r0
 8015396:	4258      	negs	r0, r3
 8015398:	4158      	adcs	r0, r3
 801539a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801539e:	6822      	ldr	r2, [r4, #0]
 80153a0:	6963      	ldr	r3, [r4, #20]
 80153a2:	9303      	str	r3, [sp, #12]
 80153a4:	2500      	movs	r5, #0
 80153a6:	6165      	str	r5, [r4, #20]
 80153a8:	4620      	mov	r0, r4
 80153aa:	6892      	ldr	r2, [r2, #8]
 80153ac:	a906      	add	r1, sp, #24
 80153ae:	4790      	blx	r2
 80153b0:	9b03      	ldr	r3, [sp, #12]
 80153b2:	6163      	str	r3, [r4, #20]
 80153b4:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80153b8:	6823      	ldr	r3, [r4, #0]
 80153ba:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80153be:	4620      	mov	r0, r4
 80153c0:	4c10      	ldr	r4, [pc, #64]	; (8015404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80153c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153c4:	4652      	mov	r2, sl
 80153c6:	4649      	mov	r1, r9
 80153c8:	4798      	blx	r3
 80153ca:	6820      	ldr	r0, [r4, #0]
 80153cc:	9b02      	ldr	r3, [sp, #8]
 80153ce:	9a00      	ldr	r2, [sp, #0]
 80153d0:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80153d4:	4b0c      	ldr	r3, [pc, #48]	; (8015408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80153d6:	801a      	strh	r2, [r3, #0]
 80153d8:	4b09      	ldr	r3, [pc, #36]	; (8015400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80153da:	9a01      	ldr	r2, [sp, #4]
 80153dc:	801a      	strh	r2, [r3, #0]
 80153de:	6803      	ldr	r3, [r0, #0]
 80153e0:	6a1b      	ldr	r3, [r3, #32]
 80153e2:	4798      	blx	r3
 80153e4:	6820      	ldr	r0, [r4, #0]
 80153e6:	6803      	ldr	r3, [r0, #0]
 80153e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ea:	4798      	blx	r3
 80153ec:	b009      	add	sp, #36	; 0x24
 80153ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f2:	6810      	ldr	r0, [r2, #0]
 80153f4:	6851      	ldr	r1, [r2, #4]
 80153f6:	ab06      	add	r3, sp, #24
 80153f8:	c303      	stmia	r3!, {r0, r1}
 80153fa:	e7b6      	b.n	801536a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 80153fc:	2000      	movs	r0, #0
 80153fe:	e7cc      	b.n	801539a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8015400:	2000134e 	.word	0x2000134e
 8015404:	20001354 	.word	0x20001354
 8015408:	2000134c 	.word	0x2000134c

0801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801540c:	b510      	push	{r4, lr}
 801540e:	4b07      	ldr	r3, [pc, #28]	; (801542c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015410:	781b      	ldrb	r3, [r3, #0]
 8015412:	4604      	mov	r4, r0
 8015414:	b13b      	cbz	r3, 8015426 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801541a:	4798      	blx	r3
 801541c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801541e:	4283      	cmp	r3, r0
 8015420:	d101      	bne.n	8015426 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015422:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015424:	bd10      	pop	{r4, pc}
 8015426:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015428:	e7fc      	b.n	8015424 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801542a:	bf00      	nop
 801542c:	20001350 	.word	0x20001350

08015430 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015430:	b510      	push	{r4, lr}
 8015432:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	4604      	mov	r4, r0
 8015438:	b95b      	cbnz	r3, 8015452 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801543a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801543e:	2b02      	cmp	r3, #2
 8015440:	d007      	beq.n	8015452 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015442:	6840      	ldr	r0, [r0, #4]
 8015444:	f000 fbc8 	bl	8015bd8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015448:	b118      	cbz	r0, 8015452 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801544a:	6862      	ldr	r2, [r4, #4]
 801544c:	7a53      	ldrb	r3, [r2, #9]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d0fc      	beq.n	801544c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015452:	f7fd f8c3 	bl	80125dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015456:	4620      	mov	r0, r4
 8015458:	f7ff ffd8 	bl	801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801545c:	bd10      	pop	{r4, pc}
 801545e:	bf00      	nop
 8015460:	20001350 	.word	0x20001350

08015464 <_ZN8touchgfx3HAL10initializeEv>:
 8015464:	b510      	push	{r4, lr}
 8015466:	4604      	mov	r4, r0
 8015468:	f7fd f8a6 	bl	80125b8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801546c:	6860      	ldr	r0, [r4, #4]
 801546e:	6803      	ldr	r3, [r0, #0]
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	4798      	blx	r3
 8015474:	68e0      	ldr	r0, [r4, #12]
 8015476:	6803      	ldr	r3, [r0, #0]
 8015478:	689b      	ldr	r3, [r3, #8]
 801547a:	4798      	blx	r3
 801547c:	6823      	ldr	r3, [r4, #0]
 801547e:	4620      	mov	r0, r4
 8015480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015486:	4718      	bx	r3

08015488 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015488:	b508      	push	{r3, lr}
 801548a:	290c      	cmp	r1, #12
 801548c:	d817      	bhi.n	80154be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801548e:	e8df f001 	tbb	[pc, r1]
 8015492:	090b      	.short	0x090b
 8015494:	0d0d0d07 	.word	0x0d0d0d07
 8015498:	1414140d 	.word	0x1414140d
 801549c:	1414      	.short	0x1414
 801549e:	0d          	.byte	0x0d
 801549f:	00          	.byte	0x00
 80154a0:	2020      	movs	r0, #32
 80154a2:	bd08      	pop	{r3, pc}
 80154a4:	2018      	movs	r0, #24
 80154a6:	e7fc      	b.n	80154a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154a8:	2010      	movs	r0, #16
 80154aa:	e7fa      	b.n	80154a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154ac:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80154ae:	4a06      	ldr	r2, [pc, #24]	; (80154c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80154b0:	4806      	ldr	r0, [pc, #24]	; (80154cc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80154b2:	f240 212f 	movw	r1, #559	; 0x22f
 80154b6:	f00f fc85 	bl	8024dc4 <__assert_func>
 80154ba:	2008      	movs	r0, #8
 80154bc:	e7f1      	b.n	80154a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154be:	2000      	movs	r0, #0
 80154c0:	e7ef      	b.n	80154a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154c2:	bf00      	nop
 80154c4:	08052be5 	.word	0x08052be5
 80154c8:	08052f7c 	.word	0x08052f7c
 80154cc:	08052aec 	.word	0x08052aec

080154d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80154d0:	b570      	push	{r4, r5, r6, lr}
 80154d2:	460d      	mov	r5, r1
 80154d4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80154d8:	4616      	mov	r6, r2
 80154da:	461c      	mov	r4, r3
 80154dc:	f7ff ffd4 	bl	8015488 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80154e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80154e4:	10c0      	asrs	r0, r0, #3
 80154e6:	fb06 5101 	mla	r1, r6, r1, r5
 80154ea:	fb00 4001 	mla	r0, r0, r1, r4
 80154ee:	bd70      	pop	{r4, r5, r6, pc}

080154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80154f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154f4:	b08a      	sub	sp, #40	; 0x28
 80154f6:	f04f 0c00 	mov.w	ip, #0
 80154fa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80154fe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015502:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015506:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801550a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801550e:	f8cd c020 	str.w	ip, [sp, #32]
 8015512:	f1b8 0f02 	cmp.w	r8, #2
 8015516:	4604      	mov	r4, r0
 8015518:	469a      	mov	sl, r3
 801551a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801551e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015522:	d030      	beq.n	8015586 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015524:	2bff      	cmp	r3, #255	; 0xff
 8015526:	d12c      	bne.n	8015582 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015528:	4560      	cmp	r0, ip
 801552a:	bf14      	ite	ne
 801552c:	2004      	movne	r0, #4
 801552e:	2001      	moveq	r0, #1
 8015530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015534:	9204      	str	r2, [sp, #16]
 8015536:	4620      	mov	r0, r4
 8015538:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801553c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015540:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015544:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015548:	f8ad 501a 	strh.w	r5, [sp, #26]
 801554c:	f7ff ff5e 	bl	801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015550:	e9cd 9700 	strd	r9, r7, [sp]
 8015554:	4603      	mov	r3, r0
 8015556:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801555a:	4651      	mov	r1, sl
 801555c:	4620      	mov	r0, r4
 801555e:	f7ff ffb7 	bl	80154d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015562:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015566:	9005      	str	r0, [sp, #20]
 8015568:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801556c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015570:	b106      	cbz	r6, 8015574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015572:	b98d      	cbnz	r5, 8015598 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015574:	4b12      	ldr	r3, [pc, #72]	; (80155c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015576:	4a13      	ldr	r2, [pc, #76]	; (80155c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015578:	f240 11af 	movw	r1, #431	; 0x1af
 801557c:	4812      	ldr	r0, [pc, #72]	; (80155c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801557e:	f00f fc21 	bl	8024dc4 <__assert_func>
 8015582:	2004      	movs	r0, #4
 8015584:	e7d4      	b.n	8015530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015586:	2bff      	cmp	r3, #255	; 0xff
 8015588:	d104      	bne.n	8015594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801558a:	2800      	cmp	r0, #0
 801558c:	bf14      	ite	ne
 801558e:	2040      	movne	r0, #64	; 0x40
 8015590:	2020      	moveq	r0, #32
 8015592:	e7cd      	b.n	8015530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015594:	2040      	movs	r0, #64	; 0x40
 8015596:	e7cb      	b.n	8015530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	9d02      	ldr	r5, [sp, #8]
 801559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801559e:	4620      	mov	r0, r4
 80155a0:	4798      	blx	r3
 80155a2:	4228      	tst	r0, r5
 80155a4:	d104      	bne.n	80155b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80155a6:	4b09      	ldr	r3, [pc, #36]	; (80155cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80155a8:	4a06      	ldr	r2, [pc, #24]	; (80155c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80155aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80155ae:	e7e5      	b.n	801557c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80155b0:	6860      	ldr	r0, [r4, #4]
 80155b2:	6803      	ldr	r3, [r0, #0]
 80155b4:	a902      	add	r1, sp, #8
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	4798      	blx	r3
 80155ba:	b00a      	add	sp, #40	; 0x28
 80155bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c0:	08052b68 	.word	0x08052b68
 80155c4:	08052e1e 	.word	0x08052e1e
 80155c8:	08052aec 	.word	0x08052aec
 80155cc:	08052ba0 	.word	0x08052ba0

080155d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80155d0:	b510      	push	{r4, lr}
 80155d2:	b08a      	sub	sp, #40	; 0x28
 80155d4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80155d8:	9408      	str	r4, [sp, #32]
 80155da:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80155de:	9407      	str	r4, [sp, #28]
 80155e0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80155e4:	9406      	str	r4, [sp, #24]
 80155e6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80155ea:	9405      	str	r4, [sp, #20]
 80155ec:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80155f0:	9404      	str	r4, [sp, #16]
 80155f2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80155f6:	9403      	str	r4, [sp, #12]
 80155f8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80155fc:	9402      	str	r4, [sp, #8]
 80155fe:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015602:	e9cd 3400 	strd	r3, r4, [sp]
 8015606:	4613      	mov	r3, r2
 8015608:	2200      	movs	r2, #0
 801560a:	f7ff ff71 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801560e:	b00a      	add	sp, #40	; 0x28
 8015610:	bd10      	pop	{r4, pc}
	...

08015614 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015616:	b08b      	sub	sp, #44	; 0x2c
 8015618:	4616      	mov	r6, r2
 801561a:	460d      	mov	r5, r1
 801561c:	461f      	mov	r7, r3
 801561e:	4604      	mov	r4, r0
 8015620:	f7f9 fa22 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8015624:	6803      	ldr	r3, [r0, #0]
 8015626:	6a1b      	ldr	r3, [r3, #32]
 8015628:	4798      	blx	r3
 801562a:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801562e:	4b0d      	ldr	r3, [pc, #52]	; (8015664 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	9306      	str	r3, [sp, #24]
 8015634:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015638:	9305      	str	r3, [sp, #20]
 801563a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801563e:	9304      	str	r3, [sp, #16]
 8015640:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015644:	9303      	str	r3, [sp, #12]
 8015646:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801564a:	9302      	str	r3, [sp, #8]
 801564c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015650:	2200      	movs	r2, #0
 8015652:	e9cd 7300 	strd	r7, r3, [sp]
 8015656:	4629      	mov	r1, r5
 8015658:	4633      	mov	r3, r6
 801565a:	4620      	mov	r0, r4
 801565c:	f7ff ff48 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015660:	b00b      	add	sp, #44	; 0x2c
 8015662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015664:	2000134c 	.word	0x2000134c

08015668 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801566c:	461f      	mov	r7, r3
 801566e:	4b14      	ldr	r3, [pc, #80]	; (80156c0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015670:	b08a      	sub	sp, #40	; 0x28
 8015672:	4616      	mov	r6, r2
 8015674:	f8b3 8000 	ldrh.w	r8, [r3]
 8015678:	460d      	mov	r5, r1
 801567a:	4604      	mov	r4, r0
 801567c:	f7f9 f9f4 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 8015680:	6803      	ldr	r3, [r0, #0]
 8015682:	6a1b      	ldr	r3, [r3, #32]
 8015684:	4798      	blx	r3
 8015686:	2302      	movs	r3, #2
 8015688:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801568c:	2301      	movs	r3, #1
 801568e:	9305      	str	r3, [sp, #20]
 8015690:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015694:	9304      	str	r3, [sp, #16]
 8015696:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801569a:	9303      	str	r3, [sp, #12]
 801569c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80156a0:	9302      	str	r3, [sp, #8]
 80156a2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80156a6:	9008      	str	r0, [sp, #32]
 80156a8:	e9cd 7300 	strd	r7, r3, [sp]
 80156ac:	2200      	movs	r2, #0
 80156ae:	4633      	mov	r3, r6
 80156b0:	4629      	mov	r1, r5
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7ff ff1c 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80156b8:	b00a      	add	sp, #40	; 0x28
 80156ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156be:	bf00      	nop
 80156c0:	2000134c 	.word	0x2000134c

080156c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80156c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c8:	b08b      	sub	sp, #44	; 0x2c
 80156ca:	469b      	mov	fp, r3
 80156cc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80156d0:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80156d4:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80156d8:	2fff      	cmp	r7, #255	; 0xff
 80156da:	bf14      	ite	ne
 80156dc:	2308      	movne	r3, #8
 80156de:	2302      	moveq	r3, #2
 80156e0:	2600      	movs	r6, #0
 80156e2:	4604      	mov	r4, r0
 80156e4:	4689      	mov	r9, r1
 80156e6:	4692      	mov	sl, r2
 80156e8:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80156ec:	9608      	str	r6, [sp, #32]
 80156ee:	f7ff fe8d 	bl	801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80156f2:	e9cd 8500 	strd	r8, r5, [sp]
 80156f6:	4603      	mov	r3, r0
 80156f8:	465a      	mov	r2, fp
 80156fa:	4651      	mov	r1, sl
 80156fc:	4620      	mov	r0, r4
 80156fe:	f7ff fee7 	bl	80154d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015702:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015706:	f8ad 3018 	strh.w	r3, [sp, #24]
 801570a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801570e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015712:	6823      	ldr	r3, [r4, #0]
 8015714:	9005      	str	r0, [sp, #20]
 8015716:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801571a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801571e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015722:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015726:	f8cd 9020 	str.w	r9, [sp, #32]
 801572a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015730:	9d02      	ldr	r5, [sp, #8]
 8015732:	4620      	mov	r0, r4
 8015734:	4798      	blx	r3
 8015736:	4228      	tst	r0, r5
 8015738:	d106      	bne.n	8015748 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801573a:	4b07      	ldr	r3, [pc, #28]	; (8015758 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801573c:	4a07      	ldr	r2, [pc, #28]	; (801575c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801573e:	4808      	ldr	r0, [pc, #32]	; (8015760 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015740:	f240 11e7 	movw	r1, #487	; 0x1e7
 8015744:	f00f fb3e 	bl	8024dc4 <__assert_func>
 8015748:	6860      	ldr	r0, [r4, #4]
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	a902      	add	r1, sp, #8
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	4798      	blx	r3
 8015752:	b00b      	add	sp, #44	; 0x2c
 8015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015758:	08052ba0 	.word	0x08052ba0
 801575c:	08052ee7 	.word	0x08052ee7
 8015760:	08052aec 	.word	0x08052aec

08015764 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015768:	461f      	mov	r7, r3
 801576a:	4b0b      	ldr	r3, [pc, #44]	; (8015798 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801576c:	460d      	mov	r5, r1
 801576e:	f8b3 8000 	ldrh.w	r8, [r3]
 8015772:	4616      	mov	r6, r2
 8015774:	4604      	mov	r4, r0
 8015776:	f7f9 f977 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 801577a:	6803      	ldr	r3, [r0, #0]
 801577c:	6a1b      	ldr	r3, [r3, #32]
 801577e:	4798      	blx	r3
 8015780:	463b      	mov	r3, r7
 8015782:	e9cd 8000 	strd	r8, r0, [sp]
 8015786:	4632      	mov	r2, r6
 8015788:	4629      	mov	r1, r5
 801578a:	4620      	mov	r0, r4
 801578c:	f7ff fea0 	bl	80154d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015790:	b002      	add	sp, #8
 8015792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015796:	bf00      	nop
 8015798:	2000134c 	.word	0x2000134c

0801579c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a0:	b088      	sub	sp, #32
 80157a2:	4698      	mov	r8, r3
 80157a4:	2300      	movs	r3, #0
 80157a6:	9306      	str	r3, [sp, #24]
 80157a8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80157ac:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80157b0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80157b4:	f8ad 6010 	strh.w	r6, [sp, #16]
 80157b8:	e9cd 3100 	strd	r3, r1, [sp]
 80157bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80157c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80157c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80157c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80157cc:	4617      	mov	r7, r2
 80157ce:	4604      	mov	r4, r0
 80157d0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80157d4:	f7ff fe1a 	bl	801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80157d8:	4642      	mov	r2, r8
 80157da:	4603      	mov	r3, r0
 80157dc:	4639      	mov	r1, r7
 80157de:	4620      	mov	r0, r4
 80157e0:	f7ff ffc0 	bl	8015764 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80157e4:	4b16      	ldr	r3, [pc, #88]	; (8015840 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80157e6:	9003      	str	r0, [sp, #12]
 80157e8:	881b      	ldrh	r3, [r3, #0]
 80157ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80157ee:	f7f9 f93b 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 80157f2:	6803      	ldr	r3, [r0, #0]
 80157f4:	6a1b      	ldr	r3, [r3, #32]
 80157f6:	4798      	blx	r3
 80157f8:	f88d 001e 	strb.w	r0, [sp, #30]
 80157fc:	f88d 001d 	strb.w	r0, [sp, #29]
 8015800:	b106      	cbz	r6, 8015804 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015802:	b935      	cbnz	r5, 8015812 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015804:	4b0f      	ldr	r3, [pc, #60]	; (8015844 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015806:	4a10      	ldr	r2, [pc, #64]	; (8015848 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015808:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 801580c:	480f      	ldr	r0, [pc, #60]	; (801584c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801580e:	f00f fad9 	bl	8024dc4 <__assert_func>
 8015812:	6823      	ldr	r3, [r4, #0]
 8015814:	9d00      	ldr	r5, [sp, #0]
 8015816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015818:	4620      	mov	r0, r4
 801581a:	4798      	blx	r3
 801581c:	4228      	tst	r0, r5
 801581e:	d104      	bne.n	801582a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015820:	4b0b      	ldr	r3, [pc, #44]	; (8015850 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015822:	4a09      	ldr	r2, [pc, #36]	; (8015848 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015824:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015828:	e7f0      	b.n	801580c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801582a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801582c:	6860      	ldr	r0, [r4, #4]
 801582e:	9306      	str	r3, [sp, #24]
 8015830:	6803      	ldr	r3, [r0, #0]
 8015832:	4669      	mov	r1, sp
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	4798      	blx	r3
 8015838:	b008      	add	sp, #32
 801583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801583e:	bf00      	nop
 8015840:	2000134c 	.word	0x2000134c
 8015844:	08052b68 	.word	0x08052b68
 8015848:	08052cd0 	.word	0x08052cd0
 801584c:	08052aec 	.word	0x08052aec
 8015850:	08052ba0 	.word	0x08052ba0

08015854 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015854:	b570      	push	{r4, r5, r6, lr}
 8015856:	b08a      	sub	sp, #40	; 0x28
 8015858:	466b      	mov	r3, sp
 801585a:	e883 0006 	stmia.w	r3, {r1, r2}
 801585e:	4b20      	ldr	r3, [pc, #128]	; (80158e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	4604      	mov	r4, r0
 8015864:	b933      	cbnz	r3, 8015874 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015866:	4b1f      	ldr	r3, [pc, #124]	; (80158e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015868:	4a1f      	ldr	r2, [pc, #124]	; (80158e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801586a:	4820      	ldr	r0, [pc, #128]	; (80158ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801586c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8015870:	f00f faa8 	bl	8024dc4 <__assert_func>
 8015874:	2300      	movs	r3, #0
 8015876:	9308      	str	r3, [sp, #32]
 8015878:	2301      	movs	r3, #1
 801587a:	9302      	str	r3, [sp, #8]
 801587c:	6803      	ldr	r3, [r0, #0]
 801587e:	f8bd 5000 	ldrh.w	r5, [sp]
 8015882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015884:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015888:	4798      	blx	r3
 801588a:	4632      	mov	r2, r6
 801588c:	4629      	mov	r1, r5
 801588e:	4603      	mov	r3, r0
 8015890:	4620      	mov	r0, r4
 8015892:	f7ff ff67 	bl	8015764 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015896:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015898:	9305      	str	r3, [sp, #20]
 801589a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801589e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80158a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80158a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80158aa:	4b11      	ldr	r3, [pc, #68]	; (80158f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80158ac:	9003      	str	r0, [sp, #12]
 80158ae:	881b      	ldrh	r3, [r3, #0]
 80158b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80158b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80158b8:	f7f9 f8d6 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 80158bc:	6803      	ldr	r3, [r0, #0]
 80158be:	6a1b      	ldr	r3, [r3, #32]
 80158c0:	4798      	blx	r3
 80158c2:	23ff      	movs	r3, #255	; 0xff
 80158c4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80158c8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80158cc:	6860      	ldr	r0, [r4, #4]
 80158ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80158d2:	6803      	ldr	r3, [r0, #0]
 80158d4:	a902      	add	r1, sp, #8
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	4798      	blx	r3
 80158da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80158dc:	b00a      	add	sp, #40	; 0x28
 80158de:	bd70      	pop	{r4, r5, r6, pc}
 80158e0:	20001351 	.word	0x20001351
 80158e4:	08052a39 	.word	0x08052a39
 80158e8:	08052d74 	.word	0x08052d74
 80158ec:	08052aec 	.word	0x08052aec
 80158f0:	2000134c 	.word	0x2000134c

080158f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80158f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f6:	b08b      	sub	sp, #44	; 0x2c
 80158f8:	466d      	mov	r5, sp
 80158fa:	e885 0006 	stmia.w	r5, {r1, r2}
 80158fe:	461d      	mov	r5, r3
 8015900:	2300      	movs	r3, #0
 8015902:	9308      	str	r3, [sp, #32]
 8015904:	2301      	movs	r3, #1
 8015906:	9302      	str	r3, [sp, #8]
 8015908:	6803      	ldr	r3, [r0, #0]
 801590a:	f8bd 6000 	ldrh.w	r6, [sp]
 801590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015910:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015914:	4604      	mov	r4, r0
 8015916:	4798      	blx	r3
 8015918:	463a      	mov	r2, r7
 801591a:	4631      	mov	r1, r6
 801591c:	4603      	mov	r3, r0
 801591e:	4620      	mov	r0, r4
 8015920:	f7ff ff20 	bl	8015764 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015924:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015928:	f8ad 3018 	strh.w	r3, [sp, #24]
 801592c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015930:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015934:	4b0e      	ldr	r3, [pc, #56]	; (8015970 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015936:	9003      	str	r0, [sp, #12]
 8015938:	881b      	ldrh	r3, [r3, #0]
 801593a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801593e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015940:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015944:	9505      	str	r5, [sp, #20]
 8015946:	f7f9 f88f 	bl	800ea68 <_ZN8touchgfx3HAL3lcdEv>
 801594a:	6803      	ldr	r3, [r0, #0]
 801594c:	6a1b      	ldr	r3, [r3, #32]
 801594e:	4798      	blx	r3
 8015950:	23ff      	movs	r3, #255	; 0xff
 8015952:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015956:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801595a:	6860      	ldr	r0, [r4, #4]
 801595c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015960:	6803      	ldr	r3, [r0, #0]
 8015962:	a902      	add	r1, sp, #8
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	4798      	blx	r3
 8015968:	4628      	mov	r0, r5
 801596a:	b00b      	add	sp, #44	; 0x2c
 801596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801596e:	bf00      	nop
 8015970:	2000134c 	.word	0x2000134c

08015974 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015974:	b570      	push	{r4, r5, r6, lr}
 8015976:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801597a:	4604      	mov	r4, r0
 801597c:	b19b      	cbz	r3, 80159a6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801597e:	2002      	movs	r0, #2
 8015980:	f7fc fb82 	bl	8012088 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015984:	2300      	movs	r3, #0
 8015986:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801598a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	4620      	mov	r0, r4
 8015992:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8015996:	f7ff fd39 	bl	801540c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801599a:	462b      	mov	r3, r5
 801599c:	4601      	mov	r1, r0
 801599e:	4620      	mov	r0, r4
 80159a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159a4:	4718      	bx	r3
 80159a6:	bd70      	pop	{r4, r5, r6, pc}

080159a8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80159a8:	4770      	bx	lr

080159aa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80159aa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80159ae:	1a13      	subs	r3, r2, r0
 80159b0:	4258      	negs	r0, r3
 80159b2:	4158      	adcs	r0, r3
 80159b4:	4770      	bx	lr

080159b6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80159b6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80159ba:	1a9b      	subs	r3, r3, r2
 80159bc:	2b00      	cmp	r3, #0
 80159be:	bfdc      	itt	le
 80159c0:	6882      	ldrle	r2, [r0, #8]
 80159c2:	189b      	addle	r3, r3, r2
 80159c4:	2b01      	cmp	r3, #1
 80159c6:	bfcc      	ite	gt
 80159c8:	2000      	movgt	r0, #0
 80159ca:	2001      	movle	r0, #1
 80159cc:	4770      	bx	lr

080159ce <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80159ce:	6902      	ldr	r2, [r0, #16]
 80159d0:	6840      	ldr	r0, [r0, #4]
 80159d2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80159d6:	4770      	bx	lr

080159d8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80159d8:	6803      	ldr	r3, [r0, #0]
 80159da:	691b      	ldr	r3, [r3, #16]
 80159dc:	4718      	bx	r3

080159de <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80159de:	4770      	bx	lr

080159e0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80159e0:	4770      	bx	lr
	...

080159e4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	2301      	movs	r3, #1
 80159e8:	7203      	strb	r3, [r0, #8]
 80159ea:	4604      	mov	r4, r0
 80159ec:	6840      	ldr	r0, [r0, #4]
 80159ee:	6803      	ldr	r3, [r0, #0]
 80159f0:	699b      	ldr	r3, [r3, #24]
 80159f2:	4798      	blx	r3
 80159f4:	6803      	ldr	r3, [r0, #0]
 80159f6:	2b08      	cmp	r3, #8
 80159f8:	4605      	mov	r5, r0
 80159fa:	d01e      	beq.n	8015a3a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80159fc:	d80b      	bhi.n	8015a16 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80159fe:	2b02      	cmp	r3, #2
 8015a00:	d027      	beq.n	8015a52 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015a02:	2b04      	cmp	r3, #4
 8015a04:	d011      	beq.n	8015a2a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015a06:	2b01      	cmp	r3, #1
 8015a08:	d028      	beq.n	8015a5c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a0a:	4b17      	ldr	r3, [pc, #92]	; (8015a68 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8015a0c:	4a17      	ldr	r2, [pc, #92]	; (8015a6c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015a0e:	4818      	ldr	r0, [pc, #96]	; (8015a70 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015a10:	218b      	movs	r1, #139	; 0x8b
 8015a12:	f00f f9d7 	bl	8024dc4 <__assert_func>
 8015a16:	2b40      	cmp	r3, #64	; 0x40
 8015a18:	d020      	beq.n	8015a5c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a1a:	d801      	bhi.n	8015a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015a1c:	2b20      	cmp	r3, #32
 8015a1e:	e7f3      	b.n	8015a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015a20:	2b80      	cmp	r3, #128	; 0x80
 8015a22:	d01b      	beq.n	8015a5c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a28:	e7ee      	b.n	8015a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015a2a:	6823      	ldr	r3, [r4, #0]
 8015a2c:	7f01      	ldrb	r1, [r0, #28]
 8015a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a30:	4620      	mov	r0, r4
 8015a32:	4798      	blx	r3
 8015a34:	6823      	ldr	r3, [r4, #0]
 8015a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a38:	e006      	b.n	8015a48 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	7f01      	ldrb	r1, [r0, #28]
 8015a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a40:	4620      	mov	r0, r4
 8015a42:	4798      	blx	r3
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a50:	4718      	bx	r3
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	4620      	mov	r0, r4
 8015a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a58:	4798      	blx	r3
 8015a5a:	e7f3      	b.n	8015a44 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	4620      	mov	r0, r4
 8015a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a62:	4798      	blx	r3
 8015a64:	e7e6      	b.n	8015a34 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8015a66:	bf00      	nop
 8015a68:	08052fc5 	.word	0x08052fc5
 8015a6c:	080530d4 	.word	0x080530d4
 8015a70:	08052fea 	.word	0x08052fea

08015a74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	4604      	mov	r4, r0
 8015a78:	460e      	mov	r6, r1
 8015a7a:	6860      	ldr	r0, [r4, #4]
 8015a7c:	6803      	ldr	r3, [r0, #0]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	4798      	blx	r3
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d1f9      	bne.n	8015a7a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015a86:	4d0b      	ldr	r5, [pc, #44]	; (8015ab4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8015a88:	6828      	ldr	r0, [r5, #0]
 8015a8a:	6803      	ldr	r3, [r0, #0]
 8015a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a8e:	4798      	blx	r3
 8015a90:	f7fc fdc6 	bl	8012620 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015a94:	6860      	ldr	r0, [r4, #4]
 8015a96:	6803      	ldr	r3, [r0, #0]
 8015a98:	4631      	mov	r1, r6
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	4798      	blx	r3
 8015a9e:	6823      	ldr	r3, [r4, #0]
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa4:	4798      	blx	r3
 8015aa6:	6828      	ldr	r0, [r5, #0]
 8015aa8:	6803      	ldr	r3, [r0, #0]
 8015aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ab0:	4718      	bx	r3
 8015ab2:	bf00      	nop
 8015ab4:	20001354 	.word	0x20001354

08015ab8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015ab8:	b508      	push	{r3, lr}
 8015aba:	f7fc fd8f 	bl	80125dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015ac2:	f7fc bda1 	b.w	8012608 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015ac6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015ac6:	b510      	push	{r4, lr}
 8015ac8:	4604      	mov	r4, r0
 8015aca:	6840      	ldr	r0, [r0, #4]
 8015acc:	6803      	ldr	r3, [r0, #0]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	4798      	blx	r3
 8015ad2:	b948      	cbnz	r0, 8015ae8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015ad4:	7a63      	ldrb	r3, [r4, #9]
 8015ad6:	b13b      	cbz	r3, 8015ae8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015ad8:	7a23      	ldrb	r3, [r4, #8]
 8015ada:	b92b      	cbnz	r3, 8015ae8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015adc:	6823      	ldr	r3, [r4, #0]
 8015ade:	4620      	mov	r0, r4
 8015ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ae6:	4718      	bx	r3
 8015ae8:	bd10      	pop	{r4, pc}
	...

08015aec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015aec:	b510      	push	{r4, lr}
 8015aee:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8015af2:	1b12      	subs	r2, r2, r4
 8015af4:	2a00      	cmp	r2, #0
 8015af6:	bfdc      	itt	le
 8015af8:	6883      	ldrle	r3, [r0, #8]
 8015afa:	18d2      	addle	r2, r2, r3
 8015afc:	2a01      	cmp	r2, #1
 8015afe:	dd18      	ble.n	8015b32 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015b00:	6843      	ldr	r3, [r0, #4]
 8015b02:	f101 021c 	add.w	r2, r1, #28
 8015b06:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015b0a:	f851 4b04 	ldr.w	r4, [r1], #4
 8015b0e:	f843 4b04 	str.w	r4, [r3], #4
 8015b12:	4291      	cmp	r1, r2
 8015b14:	d1f9      	bne.n	8015b0a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8015b16:	880a      	ldrh	r2, [r1, #0]
 8015b18:	801a      	strh	r2, [r3, #0]
 8015b1a:	788a      	ldrb	r2, [r1, #2]
 8015b1c:	709a      	strb	r2, [r3, #2]
 8015b1e:	68c3      	ldr	r3, [r0, #12]
 8015b20:	6882      	ldr	r2, [r0, #8]
 8015b22:	f3bf 8f5b 	dmb	ish
 8015b26:	3301      	adds	r3, #1
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	bfd8      	it	le
 8015b2c:	1a9b      	suble	r3, r3, r2
 8015b2e:	60c3      	str	r3, [r0, #12]
 8015b30:	bd10      	pop	{r4, pc}
 8015b32:	4b03      	ldr	r3, [pc, #12]	; (8015b40 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015b34:	4a03      	ldr	r2, [pc, #12]	; (8015b44 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015b36:	4804      	ldr	r0, [pc, #16]	; (8015b48 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015b38:	2139      	movs	r1, #57	; 0x39
 8015b3a:	f00f f943 	bl	8024dc4 <__assert_func>
 8015b3e:	bf00      	nop
 8015b40:	08053010 	.word	0x08053010
 8015b44:	08053104 	.word	0x08053104
 8015b48:	08052fea 	.word	0x08052fea

08015b4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015b4c:	b510      	push	{r4, lr}
 8015b4e:	6803      	ldr	r3, [r0, #0]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4604      	mov	r4, r0
 8015b54:	4798      	blx	r3
 8015b56:	b128      	cbz	r0, 8015b64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015b58:	4b07      	ldr	r3, [pc, #28]	; (8015b78 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015b5a:	4a08      	ldr	r2, [pc, #32]	; (8015b7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015b5c:	4808      	ldr	r0, [pc, #32]	; (8015b80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015b5e:	213f      	movs	r1, #63	; 0x3f
 8015b60:	f00f f930 	bl	8024dc4 <__assert_func>
 8015b64:	6923      	ldr	r3, [r4, #16]
 8015b66:	68a2      	ldr	r2, [r4, #8]
 8015b68:	f3bf 8f5b 	dmb	ish
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	bfd8      	it	le
 8015b72:	1a9b      	suble	r3, r3, r2
 8015b74:	6123      	str	r3, [r4, #16]
 8015b76:	bd10      	pop	{r4, pc}
 8015b78:	08053033 	.word	0x08053033
 8015b7c:	08053152 	.word	0x08053152
 8015b80:	08052fea 	.word	0x08052fea

08015b84 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	4604      	mov	r4, r0
 8015b88:	6840      	ldr	r0, [r0, #4]
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4798      	blx	r3
 8015b90:	4605      	mov	r5, r0
 8015b92:	b930      	cbnz	r0, 8015ba2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015b94:	7a23      	ldrb	r3, [r4, #8]
 8015b96:	b123      	cbz	r3, 8015ba2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015b98:	6860      	ldr	r0, [r4, #4]
 8015b9a:	6803      	ldr	r3, [r0, #0]
 8015b9c:	695b      	ldr	r3, [r3, #20]
 8015b9e:	4798      	blx	r3
 8015ba0:	7225      	strb	r5, [r4, #8]
 8015ba2:	6860      	ldr	r0, [r4, #4]
 8015ba4:	6803      	ldr	r3, [r0, #0]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4798      	blx	r3
 8015baa:	b928      	cbnz	r0, 8015bb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015bac:	6823      	ldr	r3, [r4, #0]
 8015bae:	4620      	mov	r0, r4
 8015bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bb6:	4718      	bx	r3
 8015bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bbc:	f7fc bd3c 	b.w	8012638 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015bc0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015bc0:	b510      	push	{r4, lr}
 8015bc2:	4c04      	ldr	r4, [pc, #16]	; (8015bd4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015bc4:	6082      	str	r2, [r0, #8]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	e9c0 4100 	strd	r4, r1, [r0]
 8015bcc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015bd0:	bd10      	pop	{r4, pc}
 8015bd2:	bf00      	nop
 8015bd4:	080530b8 	.word	0x080530b8

08015bd8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015bd8:	6840      	ldr	r0, [r0, #4]
 8015bda:	6803      	ldr	r3, [r0, #0]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4718      	bx	r3

08015be0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8015be0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8015be4:	4770      	bx	lr

08015be6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8015be6:	b570      	push	{r4, r5, r6, lr}
 8015be8:	790b      	ldrb	r3, [r1, #4]
 8015bea:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	bf0c      	ite	eq
 8015bf2:	2301      	moveq	r3, #1
 8015bf4:	2300      	movne	r3, #0
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	460e      	mov	r6, r1
 8015bfa:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8015bfe:	d110      	bne.n	8015c22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015c00:	b185      	cbz	r5, 8015c24 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8015c02:	7933      	ldrb	r3, [r6, #4]
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d113      	bne.n	8015c30 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015c0a:	b188      	cbz	r0, 8015c30 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c0c:	6803      	ldr	r3, [r0, #0]
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	4798      	blx	r3
 8015c12:	b168      	cbz	r0, 8015c30 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015c16:	6803      	ldr	r3, [r0, #0]
 8015c18:	4621      	mov	r1, r4
 8015c1a:	689b      	ldr	r3, [r3, #8]
 8015c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c20:	4718      	bx	r3
 8015c22:	b12d      	cbz	r5, 8015c30 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c24:	6823      	ldr	r3, [r4, #0]
 8015c26:	4620      	mov	r0, r4
 8015c28:	695b      	ldr	r3, [r3, #20]
 8015c2a:	4798      	blx	r3
 8015c2c:	2d00      	cmp	r5, #0
 8015c2e:	d1e8      	bne.n	8015c02 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015c30:	bd70      	pop	{r4, r5, r6, pc}

08015c32 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8015c32:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015c36:	b133      	cbz	r3, 8015c46 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8015c38:	790b      	ldrb	r3, [r1, #4]
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	bf01      	itttt	eq
 8015c3e:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8015c40:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8015c42:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8015c44:	8603      	strheq	r3, [r0, #48]	; 0x30
 8015c46:	f7ff bfce 	b.w	8015be6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08015c4a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	8002      	strh	r2, [r0, #0]
 8015c4e:	8042      	strh	r2, [r0, #2]
 8015c50:	8082      	strh	r2, [r0, #4]
 8015c52:	80c2      	strh	r2, [r0, #6]
 8015c54:	4770      	bx	lr

08015c56 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015c56:	b570      	push	{r4, r5, r6, lr}
 8015c58:	6803      	ldr	r3, [r0, #0]
 8015c5a:	4604      	mov	r4, r0
 8015c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c5e:	4615      	mov	r5, r2
 8015c60:	4798      	blx	r3
 8015c62:	6823      	ldr	r3, [r4, #0]
 8015c64:	4629      	mov	r1, r5
 8015c66:	4620      	mov	r0, r4
 8015c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c6e:	4718      	bx	r3

08015c70 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c72:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c78:	4299      	cmp	r1, r3
 8015c7a:	d029      	beq.n	8015cd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8015c7c:	4b15      	ldr	r3, [pc, #84]	; (8015cd4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	b92b      	cbnz	r3, 8015c8e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015c82:	4b15      	ldr	r3, [pc, #84]	; (8015cd8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015c84:	4a15      	ldr	r2, [pc, #84]	; (8015cdc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015c86:	21b1      	movs	r1, #177	; 0xb1
 8015c88:	4815      	ldr	r0, [pc, #84]	; (8015ce0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015c8a:	f00f f89b 	bl	8024dc4 <__assert_func>
 8015c8e:	4a15      	ldr	r2, [pc, #84]	; (8015ce4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8015c90:	8812      	ldrh	r2, [r2, #0]
 8015c92:	428a      	cmp	r2, r1
 8015c94:	d803      	bhi.n	8015c9e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8015c96:	4b14      	ldr	r3, [pc, #80]	; (8015ce8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8015c98:	4a10      	ldr	r2, [pc, #64]	; (8015cdc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015c9a:	21b2      	movs	r1, #178	; 0xb2
 8015c9c:	e7f4      	b.n	8015c88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8015c9e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015ca2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015ca6:	4b11      	ldr	r3, [pc, #68]	; (8015cec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8015ca8:	7854      	ldrb	r4, [r2, #1]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8015cb0:	682b      	ldr	r3, [r5, #0]
 8015cb2:	69de      	ldr	r6, [r3, #28]
 8015cb4:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8015cb6:	6818      	ldr	r0, [r3, #0]
 8015cb8:	f7fb fec0 	bl	8011a3c <_ZNK8touchgfx5Texts7getTextEt>
 8015cbc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4628      	mov	r0, r5
 8015cca:	47b0      	blx	r6
 8015ccc:	b002      	add	sp, #8
 8015cce:	bd70      	pop	{r4, r5, r6, pc}
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	e7fb      	b.n	8015ccc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8015cd4:	200013c4 	.word	0x200013c4
 8015cd8:	08053260 	.word	0x08053260
 8015cdc:	0805339c 	.word	0x0805339c
 8015ce0:	080532a2 	.word	0x080532a2
 8015ce4:	200013c8 	.word	0x200013c8
 8015ce8:	080532cb 	.word	0x080532cb
 8015cec:	200013cc 	.word	0x200013cc
 8015cf0:	200013d0 	.word	0x200013d0

08015cf4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8015cf4:	b570      	push	{r4, r5, r6, lr}
 8015cf6:	6803      	ldr	r3, [r0, #0]
 8015cf8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015cfa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8015cfc:	4b11      	ldr	r3, [pc, #68]	; (8015d44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4604      	mov	r4, r0
 8015d02:	b28d      	uxth	r5, r1
 8015d04:	b92b      	cbnz	r3, 8015d12 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8015d06:	4b10      	ldr	r3, [pc, #64]	; (8015d48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8015d08:	4a10      	ldr	r2, [pc, #64]	; (8015d4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015d0a:	21b1      	movs	r1, #177	; 0xb1
 8015d0c:	4810      	ldr	r0, [pc, #64]	; (8015d50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8015d0e:	f00f f859 	bl	8024dc4 <__assert_func>
 8015d12:	4910      	ldr	r1, [pc, #64]	; (8015d54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015d14:	8809      	ldrh	r1, [r1, #0]
 8015d16:	4291      	cmp	r1, r2
 8015d18:	d803      	bhi.n	8015d22 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8015d1a:	4b0f      	ldr	r3, [pc, #60]	; (8015d58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8015d1c:	4a0b      	ldr	r2, [pc, #44]	; (8015d4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015d1e:	21b2      	movs	r1, #178	; 0xb2
 8015d20:	e7f4      	b.n	8015d0c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015d22:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015d26:	4b0d      	ldr	r3, [pc, #52]	; (8015d5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015d2e:	6803      	ldr	r3, [r0, #0]
 8015d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d32:	4798      	blx	r3
 8015d34:	1a29      	subs	r1, r5, r0
 8015d36:	4633      	mov	r3, r6
 8015d38:	4620      	mov	r0, r4
 8015d3a:	b209      	sxth	r1, r1
 8015d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d40:	4718      	bx	r3
 8015d42:	bf00      	nop
 8015d44:	200013c4 	.word	0x200013c4
 8015d48:	08053260 	.word	0x08053260
 8015d4c:	0805339c 	.word	0x0805339c
 8015d50:	080532a2 	.word	0x080532a2
 8015d54:	200013c8 	.word	0x200013c8
 8015d58:	080532cb 	.word	0x080532cb
 8015d5c:	200013cc 	.word	0x200013cc

08015d60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d64:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d6a:	4293      	cmp	r3, r2
 8015d6c:	b08c      	sub	sp, #48	; 0x30
 8015d6e:	4604      	mov	r4, r0
 8015d70:	4688      	mov	r8, r1
 8015d72:	d05f      	beq.n	8015e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015d74:	4e31      	ldr	r6, [pc, #196]	; (8015e3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8015d76:	6832      	ldr	r2, [r6, #0]
 8015d78:	b92a      	cbnz	r2, 8015d86 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8015d7a:	4b31      	ldr	r3, [pc, #196]	; (8015e40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8015d7c:	4a31      	ldr	r2, [pc, #196]	; (8015e44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015d7e:	21b1      	movs	r1, #177	; 0xb1
 8015d80:	4831      	ldr	r0, [pc, #196]	; (8015e48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015d82:	f00f f81f 	bl	8024dc4 <__assert_func>
 8015d86:	4d31      	ldr	r5, [pc, #196]	; (8015e4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8015d88:	8829      	ldrh	r1, [r5, #0]
 8015d8a:	4299      	cmp	r1, r3
 8015d8c:	d803      	bhi.n	8015d96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8015d8e:	4b30      	ldr	r3, [pc, #192]	; (8015e50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8015d90:	4a2c      	ldr	r2, [pc, #176]	; (8015e44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015d92:	21b2      	movs	r1, #178	; 0xb2
 8015d94:	e7f4      	b.n	8015d80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8015d96:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015d9a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015d9e:	4b2d      	ldr	r3, [pc, #180]	; (8015e54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015da6:	2a00      	cmp	r2, #0
 8015da8:	d044      	beq.n	8015e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015daa:	784b      	ldrb	r3, [r1, #1]
 8015dac:	9207      	str	r2, [sp, #28]
 8015dae:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8015db2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015db6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8015dba:	4b27      	ldr	r3, [pc, #156]	; (8015e58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8015dbc:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8015dc6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015dca:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8015dce:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8015dd2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8015dd6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015dd8:	9009      	str	r0, [sp, #36]	; 0x24
 8015dda:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8015dde:	f88d 9020 	strb.w	r9, [sp, #32]
 8015de2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8015de6:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015dea:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8015dee:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015df2:	b10a      	cbz	r2, 8015df8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8015df4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8015df6:	b907      	cbnz	r7, 8015dfa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8015df8:	689f      	ldr	r7, [r3, #8]
 8015dfa:	f10d 0914 	add.w	r9, sp, #20
 8015dfe:	4621      	mov	r1, r4
 8015e00:	4648      	mov	r0, r9
 8015e02:	f002 f8b5 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e06:	6833      	ldr	r3, [r6, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d0b6      	beq.n	8015d7a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8015e0c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015e0e:	882b      	ldrh	r3, [r5, #0]
 8015e10:	428b      	cmp	r3, r1
 8015e12:	d9bc      	bls.n	8015d8e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015e14:	4b11      	ldr	r3, [pc, #68]	; (8015e5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8015e16:	6818      	ldr	r0, [r3, #0]
 8015e18:	f7fb fe10 	bl	8011a3c <_ZNK8touchgfx5Texts7getTextEt>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015e22:	ab07      	add	r3, sp, #28
 8015e24:	9001      	str	r0, [sp, #4]
 8015e26:	9300      	str	r3, [sp, #0]
 8015e28:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015e2c:	4643      	mov	r3, r8
 8015e2e:	4638      	mov	r0, r7
 8015e30:	f7fb fd95 	bl	801195e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015e34:	b00c      	add	sp, #48	; 0x30
 8015e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e3a:	bf00      	nop
 8015e3c:	200013c4 	.word	0x200013c4
 8015e40:	08053260 	.word	0x08053260
 8015e44:	0805339c 	.word	0x0805339c
 8015e48:	080532a2 	.word	0x080532a2
 8015e4c:	200013c8 	.word	0x200013c8
 8015e50:	080532cb 	.word	0x080532cb
 8015e54:	200013cc 	.word	0x200013cc
 8015e58:	20001354 	.word	0x20001354
 8015e5c:	200013d0 	.word	0x200013d0

08015e60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015e60:	b40e      	push	{r1, r2, r3}
 8015e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e66:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	b09b      	sub	sp, #108	; 0x6c
 8015e70:	4604      	mov	r4, r0
 8015e72:	d061      	beq.n	8015f38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8015e74:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8015e78:	aa24      	add	r2, sp, #144	; 0x90
 8015e7a:	9203      	str	r2, [sp, #12]
 8015e7c:	f8da 2000 	ldr.w	r2, [sl]
 8015e80:	b92a      	cbnz	r2, 8015e8e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015e82:	4b2e      	ldr	r3, [pc, #184]	; (8015f3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8015e84:	4a2e      	ldr	r2, [pc, #184]	; (8015f40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015e86:	21b1      	movs	r1, #177	; 0xb1
 8015e88:	482e      	ldr	r0, [pc, #184]	; (8015f44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8015e8a:	f00e ff9b 	bl	8024dc4 <__assert_func>
 8015e8e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8015f50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8015e92:	f8b8 1000 	ldrh.w	r1, [r8]
 8015e96:	4299      	cmp	r1, r3
 8015e98:	d803      	bhi.n	8015ea2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8015e9a:	4b2b      	ldr	r3, [pc, #172]	; (8015f48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8015e9c:	4a28      	ldr	r2, [pc, #160]	; (8015f40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015e9e:	21b2      	movs	r1, #178	; 0xb2
 8015ea0:	e7f2      	b.n	8015e88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8015ea2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8015f54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8015ea6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8015eae:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	4638      	mov	r0, r7
 8015eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eb8:	4798      	blx	r3
 8015eba:	4606      	mov	r6, r0
 8015ebc:	b205      	sxth	r5, r0
 8015ebe:	a804      	add	r0, sp, #16
 8015ec0:	f002 fc97 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eca:	4798      	blx	r3
 8015ecc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015ece:	9a03      	ldr	r2, [sp, #12]
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	a804      	add	r0, sp, #16
 8015ed4:	f002 fcd2 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015ed8:	f8da 3000 	ldr.w	r3, [sl]
 8015edc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d0ce      	beq.n	8015e82 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8015ee4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015ee6:	f8b8 0000 	ldrh.w	r0, [r8]
 8015eea:	4290      	cmp	r0, r2
 8015eec:	d9d5      	bls.n	8015e9a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8015eee:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8015ef2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015ef6:	787a      	ldrb	r2, [r7, #1]
 8015ef8:	f8d9 3000 	ldr.w	r3, [r9]
 8015efc:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8015f00:	9700      	str	r7, [sp, #0]
 8015f02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f06:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015f0a:	a804      	add	r0, sp, #16
 8015f0c:	f000 feac 	bl	8016c68 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015f10:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015f14:	18a9      	adds	r1, r5, r2
 8015f16:	2900      	cmp	r1, #0
 8015f18:	b203      	sxth	r3, r0
 8015f1a:	dd0b      	ble.n	8015f34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8015f1c:	3b01      	subs	r3, #1
 8015f1e:	fb13 f302 	smulbb	r3, r3, r2
 8015f22:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015f26:	b21d      	sxth	r5, r3
 8015f28:	4628      	mov	r0, r5
 8015f2a:	b01b      	add	sp, #108	; 0x6c
 8015f2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f30:	b003      	add	sp, #12
 8015f32:	4770      	bx	lr
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	dcf7      	bgt.n	8015f28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015f38:	2500      	movs	r5, #0
 8015f3a:	e7f5      	b.n	8015f28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015f3c:	08053260 	.word	0x08053260
 8015f40:	0805339c 	.word	0x0805339c
 8015f44:	080532a2 	.word	0x080532a2
 8015f48:	080532cb 	.word	0x080532cb
 8015f4c:	200013c4 	.word	0x200013c4
 8015f50:	200013c8 	.word	0x200013c8
 8015f54:	200013cc 	.word	0x200013cc

08015f58 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015f58:	b570      	push	{r4, r5, r6, lr}
 8015f5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f60:	4299      	cmp	r1, r3
 8015f62:	4604      	mov	r4, r0
 8015f64:	d01e      	beq.n	8015fa4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8015f66:	6803      	ldr	r3, [r0, #0]
 8015f68:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8015f6a:	4b0f      	ldr	r3, [pc, #60]	; (8015fa8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	b92b      	cbnz	r3, 8015f7c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8015f70:	4b0e      	ldr	r3, [pc, #56]	; (8015fac <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8015f72:	4a0f      	ldr	r2, [pc, #60]	; (8015fb0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015f74:	21b1      	movs	r1, #177	; 0xb1
 8015f76:	480f      	ldr	r0, [pc, #60]	; (8015fb4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8015f78:	f00e ff24 	bl	8024dc4 <__assert_func>
 8015f7c:	4b0e      	ldr	r3, [pc, #56]	; (8015fb8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8015f7e:	881b      	ldrh	r3, [r3, #0]
 8015f80:	428b      	cmp	r3, r1
 8015f82:	d803      	bhi.n	8015f8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8015f84:	4b0d      	ldr	r3, [pc, #52]	; (8015fbc <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8015f86:	4a0a      	ldr	r2, [pc, #40]	; (8015fb0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015f88:	21b2      	movs	r1, #178	; 0xb2
 8015f8a:	e7f4      	b.n	8015f76 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8015f8c:	4b0c      	ldr	r3, [pc, #48]	; (8015fc0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8015f8e:	6818      	ldr	r0, [r3, #0]
 8015f90:	f7fb fd54 	bl	8011a3c <_ZNK8touchgfx5Texts7getTextEt>
 8015f94:	2300      	movs	r3, #0
 8015f96:	4601      	mov	r1, r0
 8015f98:	46ac      	mov	ip, r5
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fa2:	4760      	bx	ip
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	bd70      	pop	{r4, r5, r6, pc}
 8015fa8:	200013c4 	.word	0x200013c4
 8015fac:	08053260 	.word	0x08053260
 8015fb0:	0805339c 	.word	0x0805339c
 8015fb4:	080532a2 	.word	0x080532a2
 8015fb8:	200013c8 	.word	0x200013c8
 8015fbc:	080532cb 	.word	0x080532cb
 8015fc0:	200013d0 	.word	0x200013d0

08015fc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015fc4:	b570      	push	{r4, r5, r6, lr}
 8015fc6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	4604      	mov	r4, r0
 8015fd0:	d021      	beq.n	8016016 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8015fd2:	6803      	ldr	r3, [r0, #0]
 8015fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fd6:	4798      	blx	r3
 8015fd8:	6823      	ldr	r3, [r4, #0]
 8015fda:	4605      	mov	r5, r0
 8015fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fde:	4620      	mov	r0, r4
 8015fe0:	4798      	blx	r3
 8015fe2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015fe6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	4606      	mov	r6, r0
 8015fee:	b22d      	sxth	r5, r5
 8015ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ff2:	d109      	bne.n	8016008 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	4798      	blx	r3
 8015ffa:	6823      	ldr	r3, [r4, #0]
 8015ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ffe:	4631      	mov	r1, r6
 8016000:	4620      	mov	r0, r4
 8016002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016006:	4718      	bx	r3
 8016008:	4601      	mov	r1, r0
 801600a:	4620      	mov	r0, r4
 801600c:	4798      	blx	r3
 801600e:	6823      	ldr	r3, [r4, #0]
 8016010:	4629      	mov	r1, r5
 8016012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016014:	e7f4      	b.n	8016000 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8016016:	bd70      	pop	{r4, r5, r6, pc}

08016018 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016018:	888a      	ldrh	r2, [r1, #4]
 801601a:	8582      	strh	r2, [r0, #44]	; 0x2c
 801601c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016020:	b922      	cbnz	r2, 801602c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8016022:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016026:	b90b      	cbnz	r3, 801602c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8016028:	f7ff bfcc 	b.w	8015fc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801602c:	4770      	bx	lr

0801602e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801602e:	2300      	movs	r3, #0
 8016030:	8003      	strh	r3, [r0, #0]
 8016032:	8043      	strh	r3, [r0, #2]
 8016034:	8083      	strh	r3, [r0, #4]
 8016036:	80c3      	strh	r3, [r0, #6]
 8016038:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801603c:	b91b      	cbnz	r3, 8016046 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801603e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016042:	2bff      	cmp	r3, #255	; 0xff
 8016044:	d103      	bne.n	801604e <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016046:	890b      	ldrh	r3, [r1, #8]
 8016048:	8083      	strh	r3, [r0, #4]
 801604a:	894b      	ldrh	r3, [r1, #10]
 801604c:	80c3      	strh	r3, [r0, #6]
 801604e:	4770      	bx	lr

08016050 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016052:	4604      	mov	r4, r0
 8016054:	6808      	ldr	r0, [r1, #0]
 8016056:	6849      	ldr	r1, [r1, #4]
 8016058:	466b      	mov	r3, sp
 801605a:	c303      	stmia	r3!, {r0, r1}
 801605c:	6823      	ldr	r3, [r4, #0]
 801605e:	4669      	mov	r1, sp
 8016060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016062:	4620      	mov	r0, r4
 8016064:	4798      	blx	r3
 8016066:	4b08      	ldr	r3, [pc, #32]	; (8016088 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801606e:	b10a      	cbz	r2, 8016074 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016070:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016072:	b900      	cbnz	r0, 8016076 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016074:	6898      	ldr	r0, [r3, #8]
 8016076:	6803      	ldr	r3, [r0, #0]
 8016078:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801607a:	699d      	ldr	r5, [r3, #24]
 801607c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016080:	4669      	mov	r1, sp
 8016082:	47a8      	blx	r5
 8016084:	b003      	add	sp, #12
 8016086:	bd30      	pop	{r4, r5, pc}
 8016088:	20001354 	.word	0x20001354

0801608c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801608c:	b538      	push	{r3, r4, r5, lr}
 801608e:	880b      	ldrh	r3, [r1, #0]
 8016090:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8016092:	4605      	mov	r5, r0
 8016094:	8813      	ldrh	r3, [r2, #0]
 8016096:	f825 3f30 	strh.w	r3, [r5, #48]!
 801609a:	4604      	mov	r4, r0
 801609c:	4628      	mov	r0, r5
 801609e:	f003 f9f3 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160a2:	8120      	strh	r0, [r4, #8]
 80160a4:	4628      	mov	r0, r5
 80160a6:	f003 fa29 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160aa:	8160      	strh	r0, [r4, #10]
 80160ac:	bd38      	pop	{r3, r4, r5, pc}

080160ae <_ZNK8touchgfx6Button12getSolidRectEv>:
 80160ae:	b510      	push	{r4, lr}
 80160b0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80160b4:	2bff      	cmp	r3, #255	; 0xff
 80160b6:	4604      	mov	r4, r0
 80160b8:	d006      	beq.n	80160c8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80160ba:	2300      	movs	r3, #0
 80160bc:	8003      	strh	r3, [r0, #0]
 80160be:	8043      	strh	r3, [r0, #2]
 80160c0:	8083      	strh	r3, [r0, #4]
 80160c2:	80c3      	strh	r3, [r0, #6]
 80160c4:	4620      	mov	r0, r4
 80160c6:	bd10      	pop	{r4, pc}
 80160c8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80160cc:	b11b      	cbz	r3, 80160d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80160ce:	3130      	adds	r1, #48	; 0x30
 80160d0:	f003 fa4e 	bl	8019570 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80160d4:	e7f6      	b.n	80160c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80160d6:	312e      	adds	r1, #46	; 0x2e
 80160d8:	e7fa      	b.n	80160d0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080160dc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80160dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80160e4:	b08a      	sub	sp, #40	; 0x28
 80160e6:	4604      	mov	r4, r0
 80160e8:	4688      	mov	r8, r1
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d044      	beq.n	8016178 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 80160ee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80160f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80160f4:	a805      	add	r0, sp, #20
 80160f6:	f003 f9c7 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160fa:	4605      	mov	r5, r0
 80160fc:	b206      	sxth	r6, r0
 80160fe:	a805      	add	r0, sp, #20
 8016100:	f003 f9fc 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016104:	f9b8 2000 	ldrsh.w	r2, [r8]
 8016108:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801610c:	4417      	add	r7, r2
 801610e:	b2bf      	uxth	r7, r7
 8016110:	2300      	movs	r3, #0
 8016112:	fa0f fe87 	sxth.w	lr, r7
 8016116:	459e      	cmp	lr, r3
 8016118:	fa0f fc80 	sxth.w	ip, r0
 801611c:	9306      	str	r3, [sp, #24]
 801611e:	dd2d      	ble.n	801617c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016120:	4296      	cmp	r6, r2
 8016122:	dd2b      	ble.n	801617c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016124:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8016128:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801612c:	4419      	add	r1, r3
 801612e:	b289      	uxth	r1, r1
 8016130:	fa0f f881 	sxth.w	r8, r1
 8016134:	f1b8 0f00 	cmp.w	r8, #0
 8016138:	dd20      	ble.n	801617c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801613a:	459c      	cmp	ip, r3
 801613c:	dd1e      	ble.n	801617c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801613e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016142:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016146:	4576      	cmp	r6, lr
 8016148:	bfa8      	it	ge
 801614a:	463d      	movge	r5, r7
 801614c:	45c4      	cmp	ip, r8
 801614e:	bfa8      	it	ge
 8016150:	4608      	movge	r0, r1
 8016152:	1aad      	subs	r5, r5, r2
 8016154:	1ac0      	subs	r0, r0, r3
 8016156:	f8ad 501c 	strh.w	r5, [sp, #28]
 801615a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801615e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016162:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016166:	4b1f      	ldr	r3, [pc, #124]	; (80161e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	b953      	cbnz	r3, 8016182 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801616c:	4b1e      	ldr	r3, [pc, #120]	; (80161e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801616e:	4a1f      	ldr	r2, [pc, #124]	; (80161ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8016170:	481f      	ldr	r0, [pc, #124]	; (80161f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8016172:	2189      	movs	r1, #137	; 0x89
 8016174:	f00e fe26 	bl	8024dc4 <__assert_func>
 8016178:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801617a:	e7b9      	b.n	80160f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801617c:	2300      	movs	r3, #0
 801617e:	9307      	str	r3, [sp, #28]
 8016180:	e7f1      	b.n	8016166 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8016182:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801618a:	429a      	cmp	r2, r3
 801618c:	d026      	beq.n	80161dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801618e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016192:	2b00      	cmp	r3, #0
 8016194:	dd22      	ble.n	80161dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016196:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801619a:	2b00      	cmp	r3, #0
 801619c:	dd1e      	ble.n	80161dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801619e:	2300      	movs	r3, #0
 80161a0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80161a4:	6823      	ldr	r3, [r4, #0]
 80161a6:	a908      	add	r1, sp, #32
 80161a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161aa:	4620      	mov	r0, r4
 80161ac:	4798      	blx	r3
 80161ae:	4b11      	ldr	r3, [pc, #68]	; (80161f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80161b6:	b10a      	cbz	r2, 80161bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80161b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80161ba:	b900      	cbnz	r0, 80161be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80161bc:	6898      	ldr	r0, [r3, #8]
 80161be:	6801      	ldr	r1, [r0, #0]
 80161c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80161c4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80161c8:	2501      	movs	r5, #1
 80161ca:	9502      	str	r5, [sp, #8]
 80161cc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80161d0:	9401      	str	r4, [sp, #4]
 80161d2:	ac06      	add	r4, sp, #24
 80161d4:	9400      	str	r4, [sp, #0]
 80161d6:	688c      	ldr	r4, [r1, #8]
 80161d8:	a905      	add	r1, sp, #20
 80161da:	47a0      	blx	r4
 80161dc:	b00a      	add	sp, #40	; 0x28
 80161de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e2:	bf00      	nop
 80161e4:	200013fc 	.word	0x200013fc
 80161e8:	08053434 	.word	0x08053434
 80161ec:	08053508 	.word	0x08053508
 80161f0:	08053470 	.word	0x08053470
 80161f4:	20001354 	.word	0x20001354

080161f8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80161f8:	b570      	push	{r4, r5, r6, lr}
 80161fa:	4605      	mov	r5, r0
 80161fc:	880b      	ldrh	r3, [r1, #0]
 80161fe:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016200:	f855 3b26 	ldr.w	r3, [r5], #38
 8016204:	4604      	mov	r4, r0
 8016206:	4628      	mov	r0, r5
 8016208:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801620a:	f003 f93d 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801620e:	b201      	sxth	r1, r0
 8016210:	4620      	mov	r0, r4
 8016212:	47b0      	blx	r6
 8016214:	6823      	ldr	r3, [r4, #0]
 8016216:	4628      	mov	r0, r5
 8016218:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801621a:	f003 f96f 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801621e:	4633      	mov	r3, r6
 8016220:	b201      	sxth	r1, r0
 8016222:	4620      	mov	r0, r4
 8016224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016228:	4718      	bx	r3

0801622a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801622a:	b510      	push	{r4, lr}
 801622c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016230:	2bff      	cmp	r3, #255	; 0xff
 8016232:	4604      	mov	r4, r0
 8016234:	d006      	beq.n	8016244 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016236:	2300      	movs	r3, #0
 8016238:	8003      	strh	r3, [r0, #0]
 801623a:	8043      	strh	r3, [r0, #2]
 801623c:	8083      	strh	r3, [r0, #4]
 801623e:	80c3      	strh	r3, [r0, #6]
 8016240:	4620      	mov	r0, r4
 8016242:	bd10      	pop	{r4, pc}
 8016244:	3126      	adds	r1, #38	; 0x26
 8016246:	f003 f993 	bl	8019570 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801624a:	e7f9      	b.n	8016240 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801624c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016250:	4604      	mov	r4, r0
 8016252:	b088      	sub	sp, #32
 8016254:	f854 3b26 	ldr.w	r3, [r4], #38
 8016258:	2500      	movs	r5, #0
 801625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801625c:	460f      	mov	r7, r1
 801625e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016262:	a904      	add	r1, sp, #16
 8016264:	4606      	mov	r6, r0
 8016266:	4798      	blx	r3
 8016268:	4620      	mov	r0, r4
 801626a:	f003 f90d 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801626e:	4680      	mov	r8, r0
 8016270:	4620      	mov	r0, r4
 8016272:	f003 f943 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016276:	9506      	str	r5, [sp, #24]
 8016278:	ad06      	add	r5, sp, #24
 801627a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801627e:	4639      	mov	r1, r7
 8016280:	4628      	mov	r0, r5
 8016282:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016286:	f7fe f9d5 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 801628a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801628e:	2b00      	cmp	r3, #0
 8016290:	dd19      	ble.n	80162c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016292:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016296:	2b00      	cmp	r3, #0
 8016298:	dd15      	ble.n	80162c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801629a:	4b0c      	ldr	r3, [pc, #48]	; (80162cc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80162a2:	b10a      	cbz	r2, 80162a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80162a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80162a6:	b900      	cbnz	r0, 80162aa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80162a8:	6898      	ldr	r0, [r3, #8]
 80162aa:	6801      	ldr	r1, [r0, #0]
 80162ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80162b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80162b4:	2701      	movs	r7, #1
 80162b6:	9702      	str	r7, [sp, #8]
 80162b8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80162bc:	e9cd 5600 	strd	r5, r6, [sp]
 80162c0:	688d      	ldr	r5, [r1, #8]
 80162c2:	4621      	mov	r1, r4
 80162c4:	47a8      	blx	r5
 80162c6:	b008      	add	sp, #32
 80162c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162cc:	20001354 	.word	0x20001354

080162d0 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 80162d0:	b510      	push	{r4, lr}
 80162d2:	4604      	mov	r4, r0
 80162d4:	f7ff feeb 	bl	80160ae <_ZNK8touchgfx6Button12getSolidRectEv>
 80162d8:	4620      	mov	r0, r4
 80162da:	bd10      	pop	{r4, pc}

080162dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80162dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162e0:	4604      	mov	r4, r0
 80162e2:	b08c      	sub	sp, #48	; 0x30
 80162e4:	4688      	mov	r8, r1
 80162e6:	f7ff fef9 	bl	80160dc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80162ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80162ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162f0:	4293      	cmp	r3, r2
 80162f2:	f000 8099 	beq.w	8016428 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80162f6:	4e54      	ldr	r6, [pc, #336]	; (8016448 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80162f8:	6832      	ldr	r2, [r6, #0]
 80162fa:	b92a      	cbnz	r2, 8016308 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 80162fc:	4b53      	ldr	r3, [pc, #332]	; (801644c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80162fe:	4a54      	ldr	r2, [pc, #336]	; (8016450 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8016300:	21b1      	movs	r1, #177	; 0xb1
 8016302:	4854      	ldr	r0, [pc, #336]	; (8016454 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8016304:	f00e fd5e 	bl	8024dc4 <__assert_func>
 8016308:	4d53      	ldr	r5, [pc, #332]	; (8016458 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801630a:	8829      	ldrh	r1, [r5, #0]
 801630c:	4299      	cmp	r1, r3
 801630e:	d803      	bhi.n	8016318 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8016310:	4b52      	ldr	r3, [pc, #328]	; (801645c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8016312:	4a4f      	ldr	r2, [pc, #316]	; (8016450 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8016314:	21b2      	movs	r1, #178	; 0xb2
 8016316:	e7f4      	b.n	8016302 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8016318:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801631c:	4b50      	ldr	r3, [pc, #320]	; (8016460 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801631e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016328:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801632c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016330:	2300      	movs	r3, #0
 8016332:	f1be 0f01 	cmp.w	lr, #1
 8016336:	9303      	str	r3, [sp, #12]
 8016338:	b208      	sxth	r0, r1
 801633a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801633e:	f04f 0c02 	mov.w	ip, #2
 8016342:	d074      	beq.n	801642e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 8016344:	f1be 0f03 	cmp.w	lr, #3
 8016348:	d071      	beq.n	801642e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 801634a:	1a52      	subs	r2, r2, r1
 801634c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016350:	fb92 f2fc 	sdiv	r2, r2, ip
 8016354:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016358:	f8ad 200e 	strh.w	r2, [sp, #14]
 801635c:	f10d 090c 	add.w	r9, sp, #12
 8016360:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016364:	f10d 0a14 	add.w	sl, sp, #20
 8016368:	e88a 0003 	stmia.w	sl, {r0, r1}
 801636c:	4641      	mov	r1, r8
 801636e:	4650      	mov	r0, sl
 8016370:	f7fe f960 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 8016374:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016378:	2b00      	cmp	r3, #0
 801637a:	dd55      	ble.n	8016428 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 801637c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016380:	2b00      	cmp	r3, #0
 8016382:	dd51      	ble.n	8016428 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 8016384:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016388:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801638c:	1a9b      	subs	r3, r3, r2
 801638e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016392:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016396:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801639a:	1a9b      	subs	r3, r3, r2
 801639c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163a0:	6823      	ldr	r3, [r4, #0]
 80163a2:	4649      	mov	r1, r9
 80163a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a6:	4620      	mov	r0, r4
 80163a8:	4798      	blx	r3
 80163aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d047      	beq.n	8016442 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x166>
 80163b2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80163b6:	6833      	ldr	r3, [r6, #0]
 80163b8:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d09d      	beq.n	80162fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 80163c0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80163c2:	8828      	ldrh	r0, [r5, #0]
 80163c4:	4288      	cmp	r0, r1
 80163c6:	d9a3      	bls.n	8016310 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80163c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80163cc:	6812      	ldr	r2, [r2, #0]
 80163ce:	785b      	ldrb	r3, [r3, #1]
 80163d0:	9209      	str	r2, [sp, #36]	; 0x24
 80163d2:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80163d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80163da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80163de:	2300      	movs	r3, #0
 80163e0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80163e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80163e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80163ec:	4b1d      	ldr	r3, [pc, #116]	; (8016464 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 80163ee:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	9707      	str	r7, [sp, #28]
 80163f6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80163fa:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80163fe:	f88d 5020 	strb.w	r5, [sp, #32]
 8016402:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016406:	b10a      	cbz	r2, 801640c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x130>
 8016408:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801640a:	b904      	cbnz	r4, 801640e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801640c:	689c      	ldr	r4, [r3, #8]
 801640e:	4b16      	ldr	r3, [pc, #88]	; (8016468 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8016410:	6818      	ldr	r0, [r3, #0]
 8016412:	f7fb fb13 	bl	8011a3c <_ZNK8touchgfx5Texts7getTextEt>
 8016416:	ab07      	add	r3, sp, #28
 8016418:	9001      	str	r0, [sp, #4]
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016420:	4653      	mov	r3, sl
 8016422:	4620      	mov	r0, r4
 8016424:	f7fb fa9b 	bl	801195e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016428:	b00c      	add	sp, #48	; 0x30
 801642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801642e:	1a5b      	subs	r3, r3, r1
 8016430:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016434:	fb93 f3fc 	sdiv	r3, r3, ip
 8016438:	f8ad 2012 	strh.w	r2, [sp, #18]
 801643c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016440:	e78c      	b.n	801635c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x80>
 8016442:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8016446:	e7b6      	b.n	80163b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xda>
 8016448:	200013c4 	.word	0x200013c4
 801644c:	08053260 	.word	0x08053260
 8016450:	08053618 	.word	0x08053618
 8016454:	080532a2 	.word	0x080532a2
 8016458:	200013c8 	.word	0x200013c8
 801645c:	080532cb 	.word	0x080532cb
 8016460:	200013cc 	.word	0x200013cc
 8016464:	20001354 	.word	0x20001354
 8016468:	200013d0 	.word	0x200013d0

0801646c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801646c:	b510      	push	{r4, lr}
 801646e:	2101      	movs	r1, #1
 8016470:	4c12      	ldr	r4, [pc, #72]	; (80164bc <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 8016472:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016476:	2200      	movs	r2, #0
 8016478:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801647c:	6004      	str	r4, [r0, #0]
 801647e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016482:	4c0f      	ldr	r4, [pc, #60]	; (80164c0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8016484:	8082      	strh	r2, [r0, #4]
 8016486:	80c2      	strh	r2, [r0, #6]
 8016488:	8102      	strh	r2, [r0, #8]
 801648a:	8142      	strh	r2, [r0, #10]
 801648c:	8182      	strh	r2, [r0, #12]
 801648e:	81c2      	strh	r2, [r0, #14]
 8016490:	8202      	strh	r2, [r0, #16]
 8016492:	8242      	strh	r2, [r0, #18]
 8016494:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016498:	61c2      	str	r2, [r0, #28]
 801649a:	6282      	str	r2, [r0, #40]	; 0x28
 801649c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80164a0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80164a2:	8601      	strh	r1, [r0, #48]	; 0x30
 80164a4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80164a8:	6344      	str	r4, [r0, #52]	; 0x34
 80164aa:	8701      	strh	r1, [r0, #56]	; 0x38
 80164ac:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80164b0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80164b4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80164b8:	bd10      	pop	{r4, pc}
 80164ba:	bf00      	nop
 80164bc:	080535b0 	.word	0x080535b0
 80164c0:	080511b4 	.word	0x080511b4

080164c4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80164c4:	2000      	movs	r0, #0
 80164c6:	4770      	bx	lr

080164c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80164c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164cc:	b091      	sub	sp, #68	; 0x44
 80164ce:	4699      	mov	r9, r3
 80164d0:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 80164d4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80164d6:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 80164da:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80164de:	4680      	mov	r8, r0
 80164e0:	4617      	mov	r7, r2
 80164e2:	a80e      	add	r0, sp, #56	; 0x38
 80164e4:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 80164e8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80164ec:	2500      	movs	r5, #0
 80164ee:	910d      	str	r1, [sp, #52]	; 0x34
 80164f0:	950e      	str	r5, [sp, #56]	; 0x38
 80164f2:	f000 fe3b 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80164f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164f8:	f8d9 6000 	ldr.w	r6, [r9]
 80164fc:	6818      	ldr	r0, [r3, #0]
 80164fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016500:	f9b4 b000 	ldrsh.w	fp, [r4]
 8016504:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016508:	eb02 0c06 	add.w	ip, r2, r6
 801650c:	1b80      	subs	r0, r0, r6
 801650e:	ebab 0e0c 	sub.w	lr, fp, ip
 8016512:	4570      	cmp	r0, lr
 8016514:	f340 80bd 	ble.w	8016692 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8016518:	88a1      	ldrh	r1, [r4, #4]
 801651a:	4459      	add	r1, fp
 801651c:	b209      	sxth	r1, r1
 801651e:	458c      	cmp	ip, r1
 8016520:	f300 80b7 	bgt.w	8016692 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8016524:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8016528:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801652c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8016530:	edd9 6a07 	vldr	s13, [r9, #28]
 8016534:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8016538:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801653c:	4283      	cmp	r3, r0
 801653e:	bfa8      	it	ge
 8016540:	4603      	movge	r3, r0
 8016542:	ee07 3a90 	vmov	s15, r3
 8016546:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801654a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801654e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016552:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016556:	ee25 5a27 	vmul.f32	s10, s10, s15
 801655a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801655e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016562:	45e3      	cmp	fp, ip
 8016564:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016568:	ee32 1a05 	vadd.f32	s2, s4, s10
 801656c:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016570:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016574:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016578:	f340 808e 	ble.w	8016698 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 801657c:	fb9e f5f3 	sdiv	r5, lr, r3
 8016580:	ee07 5a10 	vmov	s14, r5
 8016584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016588:	2d00      	cmp	r5, #0
 801658a:	fb03 e415 	mls	r4, r3, r5, lr
 801658e:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016592:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016596:	eea7 1a05 	vfma.f32	s2, s14, s10
 801659a:	dd13      	ble.n	80165c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801659c:	ee70 6a44 	vsub.f32	s13, s0, s8
 80165a0:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80165a4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80165a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ac:	bf18      	it	ne
 80165ae:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80165b2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80165b6:	bf08      	it	eq
 80165b8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80165bc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80165c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80165c4:	fb05 f703 	mul.w	r7, r5, r3
 80165c8:	1bc0      	subs	r0, r0, r7
 80165ca:	443e      	add	r6, r7
 80165cc:	1997      	adds	r7, r2, r6
 80165ce:	4407      	add	r7, r0
 80165d0:	42b9      	cmp	r1, r7
 80165d2:	bfbc      	itt	lt
 80165d4:	1a88      	sublt	r0, r1, r2
 80165d6:	1b80      	sublt	r0, r0, r6
 80165d8:	2800      	cmp	r0, #0
 80165da:	dd5a      	ble.n	8016692 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 80165dc:	fb90 f1f3 	sdiv	r1, r0, r3
 80165e0:	fb03 0211 	mls	r2, r3, r1, r0
 80165e4:	b90a      	cbnz	r2, 80165ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 80165e6:	3901      	subs	r1, #1
 80165e8:	461a      	mov	r2, r3
 80165ea:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80165ee:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 80165f2:	44a4      	add	ip, r4
 80165f4:	fb03 c505 	mla	r5, r3, r5, ip
 80165f8:	2900      	cmp	r1, #0
 80165fa:	bfcc      	ite	gt
 80165fc:	469e      	movgt	lr, r3
 80165fe:	4696      	movle	lr, r2
 8016600:	eef0 6a42 	vmov.f32	s13, s4
 8016604:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016608:	ee21 3a23 	vmul.f32	s6, s2, s7
 801660c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016610:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016614:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016618:	eeb0 7a61 	vmov.f32	s14, s3
 801661c:	ee17 0a90 	vmov	r0, s15
 8016620:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016624:	fb90 f6f3 	sdiv	r6, r0, r3
 8016628:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801662c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016630:	ee17 0a90 	vmov	r0, s15
 8016634:	fb90 f7f3 	sdiv	r7, r0, r3
 8016638:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801663c:	900c      	str	r0, [sp, #48]	; 0x30
 801663e:	f8d0 8000 	ldr.w	r8, [r0]
 8016642:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016644:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016648:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801664c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016650:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8016654:	f8cd a020 	str.w	sl, [sp, #32]
 8016658:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801665c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801665e:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8016662:	9603      	str	r6, [sp, #12]
 8016664:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8016668:	ee16 0a90 	vmov	r0, s13
 801666c:	fb07 0704 	mla	r7, r7, r4, r0
 8016670:	ee17 0a10 	vmov	r0, s14
 8016674:	fb06 0604 	mla	r6, r6, r4, r0
 8016678:	e9cd 3600 	strd	r3, r6, [sp]
 801667c:	44ca      	add	sl, r9
 801667e:	f8cd a01c 	str.w	sl, [sp, #28]
 8016682:	9506      	str	r5, [sp, #24]
 8016684:	9702      	str	r7, [sp, #8]
 8016686:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801668a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801668c:	ebae 0304 	sub.w	r3, lr, r4
 8016690:	47a8      	blx	r5
 8016692:	b011      	add	sp, #68	; 0x44
 8016694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016698:	462c      	mov	r4, r5
 801669a:	e797      	b.n	80165cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0801669c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801669c:	b570      	push	{r4, r5, r6, lr}
 801669e:	4604      	mov	r4, r0
 80166a0:	2500      	movs	r5, #0
 80166a2:	7223      	strb	r3, [r4, #8]
 80166a4:	9804      	ldr	r0, [sp, #16]
 80166a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80166aa:	8025      	strh	r5, [r4, #0]
 80166ac:	6061      	str	r1, [r4, #4]
 80166ae:	7263      	strb	r3, [r4, #9]
 80166b0:	60e0      	str	r0, [r4, #12]
 80166b2:	8222      	strh	r2, [r4, #16]
 80166b4:	8265      	strh	r5, [r4, #18]
 80166b6:	82a5      	strh	r5, [r4, #20]
 80166b8:	82e5      	strh	r5, [r4, #22]
 80166ba:	8325      	strh	r5, [r4, #24]
 80166bc:	8365      	strh	r5, [r4, #26]
 80166be:	83a5      	strh	r5, [r4, #28]
 80166c0:	77a5      	strb	r5, [r4, #30]
 80166c2:	6803      	ldr	r3, [r0, #0]
 80166c4:	695b      	ldr	r3, [r3, #20]
 80166c6:	4798      	blx	r3
 80166c8:	4606      	mov	r6, r0
 80166ca:	b1f8      	cbz	r0, 801670c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80166cc:	68e0      	ldr	r0, [r4, #12]
 80166ce:	6803      	ldr	r3, [r0, #0]
 80166d0:	4631      	mov	r1, r6
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	4798      	blx	r3
 80166d6:	7b43      	ldrb	r3, [r0, #13]
 80166d8:	7a82      	ldrb	r2, [r0, #10]
 80166da:	005b      	lsls	r3, r3, #1
 80166dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166e0:	4313      	orrs	r3, r2
 80166e2:	83a3      	strh	r3, [r4, #28]
 80166e4:	7a63      	ldrb	r3, [r4, #9]
 80166e6:	2b04      	cmp	r3, #4
 80166e8:	4605      	mov	r5, r0
 80166ea:	d10f      	bne.n	801670c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80166ec:	68e0      	ldr	r0, [r4, #12]
 80166ee:	6803      	ldr	r3, [r0, #0]
 80166f0:	462a      	mov	r2, r5
 80166f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166f4:	4631      	mov	r1, r6
 80166f6:	4798      	blx	r3
 80166f8:	7b6b      	ldrb	r3, [r5, #13]
 80166fa:	005b      	lsls	r3, r3, #1
 80166fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016700:	7aab      	ldrb	r3, [r5, #10]
 8016702:	4313      	orrs	r3, r2
 8016704:	4418      	add	r0, r3
 8016706:	8ba3      	ldrh	r3, [r4, #28]
 8016708:	4418      	add	r0, r3
 801670a:	83a0      	strh	r0, [r4, #28]
 801670c:	4620      	mov	r0, r4
 801670e:	bd70      	pop	{r4, r5, r6, pc}

08016710 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016714:	2400      	movs	r4, #0
 8016716:	b085      	sub	sp, #20
 8016718:	4681      	mov	r9, r0
 801671a:	4688      	mov	r8, r1
 801671c:	4692      	mov	sl, r2
 801671e:	469b      	mov	fp, r3
 8016720:	4627      	mov	r7, r4
 8016722:	4625      	mov	r5, r4
 8016724:	4626      	mov	r6, r4
 8016726:	4554      	cmp	r4, sl
 8016728:	da2a      	bge.n	8016780 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801672a:	2300      	movs	r3, #0
 801672c:	9303      	str	r3, [sp, #12]
 801672e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016732:	429d      	cmp	r5, r3
 8016734:	d004      	beq.n	8016740 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016736:	f242 030b 	movw	r3, #8203	; 0x200b
 801673a:	429d      	cmp	r5, r3
 801673c:	bf18      	it	ne
 801673e:	462f      	movne	r7, r5
 8016740:	ab03      	add	r3, sp, #12
 8016742:	4642      	mov	r2, r8
 8016744:	4659      	mov	r1, fp
 8016746:	4648      	mov	r0, r9
 8016748:	f002 fb92 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801674c:	4605      	mov	r5, r0
 801674e:	b1b8      	cbz	r0, 8016780 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016750:	280a      	cmp	r0, #10
 8016752:	d015      	beq.n	8016780 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016754:	9a03      	ldr	r2, [sp, #12]
 8016756:	b18a      	cbz	r2, 801677c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016758:	7b50      	ldrb	r0, [r2, #13]
 801675a:	7a93      	ldrb	r3, [r2, #10]
 801675c:	8895      	ldrh	r5, [r2, #4]
 801675e:	0040      	lsls	r0, r0, #1
 8016760:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016764:	4303      	orrs	r3, r0
 8016766:	9301      	str	r3, [sp, #4]
 8016768:	f8d8 3000 	ldr.w	r3, [r8]
 801676c:	4639      	mov	r1, r7
 801676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016770:	4640      	mov	r0, r8
 8016772:	4798      	blx	r3
 8016774:	9b01      	ldr	r3, [sp, #4]
 8016776:	4418      	add	r0, r3
 8016778:	4406      	add	r6, r0
 801677a:	b2b6      	uxth	r6, r6
 801677c:	3401      	adds	r4, #1
 801677e:	e7d2      	b.n	8016726 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016780:	4630      	mov	r0, r6
 8016782:	b005      	add	sp, #20
 8016784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016788 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016788:	2a02      	cmp	r2, #2
 801678a:	b530      	push	{r4, r5, lr}
 801678c:	d011      	beq.n	80167b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801678e:	2a03      	cmp	r2, #3
 8016790:	d01c      	beq.n	80167cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016792:	2a01      	cmp	r2, #1
 8016794:	d10c      	bne.n	80167b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016796:	888b      	ldrh	r3, [r1, #4]
 8016798:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801679c:	8801      	ldrh	r1, [r0, #0]
 801679e:	8844      	ldrh	r4, [r0, #2]
 80167a0:	8004      	strh	r4, [r0, #0]
 80167a2:	1a9b      	subs	r3, r3, r2
 80167a4:	1a5b      	subs	r3, r3, r1
 80167a6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80167aa:	8043      	strh	r3, [r0, #2]
 80167ac:	8081      	strh	r1, [r0, #4]
 80167ae:	80c2      	strh	r2, [r0, #6]
 80167b0:	bd30      	pop	{r4, r5, pc}
 80167b2:	88cb      	ldrh	r3, [r1, #6]
 80167b4:	88c2      	ldrh	r2, [r0, #6]
 80167b6:	1a9b      	subs	r3, r3, r2
 80167b8:	8842      	ldrh	r2, [r0, #2]
 80167ba:	1a9b      	subs	r3, r3, r2
 80167bc:	888a      	ldrh	r2, [r1, #4]
 80167be:	8881      	ldrh	r1, [r0, #4]
 80167c0:	8043      	strh	r3, [r0, #2]
 80167c2:	1a52      	subs	r2, r2, r1
 80167c4:	8801      	ldrh	r1, [r0, #0]
 80167c6:	1a52      	subs	r2, r2, r1
 80167c8:	8002      	strh	r2, [r0, #0]
 80167ca:	e7f1      	b.n	80167b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80167cc:	88cb      	ldrh	r3, [r1, #6]
 80167ce:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80167d2:	8841      	ldrh	r1, [r0, #2]
 80167d4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80167d8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80167dc:	8045      	strh	r5, [r0, #2]
 80167de:	1a9b      	subs	r3, r3, r2
 80167e0:	1a5b      	subs	r3, r3, r1
 80167e2:	8003      	strh	r3, [r0, #0]
 80167e4:	8082      	strh	r2, [r0, #4]
 80167e6:	80c4      	strh	r4, [r0, #6]
 80167e8:	e7e2      	b.n	80167b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080167ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80167ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ee:	b09f      	sub	sp, #124	; 0x7c
 80167f0:	9116      	str	r1, [sp, #88]	; 0x58
 80167f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80167f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80167f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80167f8:	8809      	ldrh	r1, [r1, #0]
 80167fa:	889b      	ldrh	r3, [r3, #4]
 80167fc:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016800:	9212      	str	r2, [sp, #72]	; 0x48
 8016802:	440b      	add	r3, r1
 8016804:	b21b      	sxth	r3, r3
 8016806:	9310      	str	r3, [sp, #64]	; 0x40
 8016808:	f8d8 3000 	ldr.w	r3, [r8]
 801680c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8016810:	7a59      	ldrb	r1, [r3, #9]
 8016812:	7a1b      	ldrb	r3, [r3, #8]
 8016814:	9315      	str	r3, [sp, #84]	; 0x54
 8016816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016818:	9011      	str	r0, [sp, #68]	; 0x44
 801681a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801681e:	9114      	str	r1, [sp, #80]	; 0x50
 8016820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016824:	2a00      	cmp	r2, #0
 8016826:	d067      	beq.n	80168f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8016828:	f898 3010 	ldrb.w	r3, [r8, #16]
 801682c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801682e:	2b04      	cmp	r3, #4
 8016830:	bf14      	ite	ne
 8016832:	2301      	movne	r3, #1
 8016834:	2302      	moveq	r3, #2
 8016836:	4413      	add	r3, r2
 8016838:	f04f 0900 	mov.w	r9, #0
 801683c:	930f      	str	r3, [sp, #60]	; 0x3c
 801683e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016842:	464c      	mov	r4, r9
 8016844:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8016848:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801684c:	4293      	cmp	r3, r2
 801684e:	f280 808c 	bge.w	801696a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8016852:	2300      	movs	r3, #0
 8016854:	931c      	str	r3, [sp, #112]	; 0x70
 8016856:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801685a:	429c      	cmp	r4, r3
 801685c:	d006      	beq.n	801686c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801685e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016860:	f242 020b 	movw	r2, #8203	; 0x200b
 8016864:	4294      	cmp	r4, r2
 8016866:	bf18      	it	ne
 8016868:	4623      	movne	r3, r4
 801686a:	930d      	str	r3, [sp, #52]	; 0x34
 801686c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801686e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016870:	f8d8 2000 	ldr.w	r2, [r8]
 8016874:	428b      	cmp	r3, r1
 8016876:	db41      	blt.n	80168fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8016878:	6813      	ldr	r3, [r2, #0]
 801687a:	4610      	mov	r0, r2
 801687c:	695b      	ldr	r3, [r3, #20]
 801687e:	4798      	blx	r3
 8016880:	4604      	mov	r4, r0
 8016882:	f8d8 0000 	ldr.w	r0, [r8]
 8016886:	6803      	ldr	r3, [r0, #0]
 8016888:	aa1d      	add	r2, sp, #116	; 0x74
 801688a:	689e      	ldr	r6, [r3, #8]
 801688c:	4621      	mov	r1, r4
 801688e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016892:	47b0      	blx	r6
 8016894:	901c      	str	r0, [sp, #112]	; 0x70
 8016896:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801689a:	429c      	cmp	r4, r3
 801689c:	f000 80e9 	beq.w	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80168a0:	f242 030b 	movw	r3, #8203	; 0x200b
 80168a4:	429c      	cmp	r4, r3
 80168a6:	f000 80e4 	beq.w	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80168aa:	2c00      	cmp	r4, #0
 80168ac:	f000 80f6 	beq.w	8016a9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80168b0:	2c0a      	cmp	r4, #10
 80168b2:	d060      	beq.n	8016976 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80168b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80168b6:	b36a      	cbz	r2, 8016914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80168b8:	8894      	ldrh	r4, [r2, #4]
 80168ba:	f1bb 0f00 	cmp.w	fp, #0
 80168be:	d03b      	beq.n	8016938 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80168c0:	f892 900d 	ldrb.w	r9, [r2, #13]
 80168c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80168c8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80168cc:	f892 900a 	ldrb.w	r9, [r2, #10]
 80168d0:	f1bb 0f01 	cmp.w	fp, #1
 80168d4:	ea49 0903 	orr.w	r9, r9, r3
 80168d8:	d134      	bne.n	8016944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80168da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168dc:	eba5 0509 	sub.w	r5, r5, r9
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d14f      	bne.n	8016984 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80168e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80168e6:	eb09 0305 	add.w	r3, r9, r5
 80168ea:	4413      	add	r3, r2
 80168ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80168ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80168f2:	4293      	cmp	r3, r2
 80168f4:	da51      	bge.n	801699a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80168f6:	e038      	b.n	801696a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80168f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168fa:	e79d      	b.n	8016838 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 80168fc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	ab1d      	add	r3, sp, #116	; 0x74
 8016904:	9300      	str	r3, [sp, #0]
 8016906:	4659      	mov	r1, fp
 8016908:	ab1c      	add	r3, sp, #112	; 0x70
 801690a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801690c:	f002 fb08 	bl	8018f20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016910:	4604      	mov	r4, r0
 8016912:	e7c0      	b.n	8016896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8016914:	f8d8 0000 	ldr.w	r0, [r8]
 8016918:	6803      	ldr	r3, [r0, #0]
 801691a:	691b      	ldr	r3, [r3, #16]
 801691c:	4798      	blx	r3
 801691e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016922:	4298      	cmp	r0, r3
 8016924:	f000 80a5 	beq.w	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016928:	f242 030b 	movw	r3, #8203	; 0x200b
 801692c:	4298      	cmp	r0, r3
 801692e:	f000 80a0 	beq.w	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016932:	f1bb 0f00 	cmp.w	fp, #0
 8016936:	d100      	bne.n	801693a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016938:	444d      	add	r5, r9
 801693a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801693c:	2a00      	cmp	r2, #0
 801693e:	d1bf      	bne.n	80168c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8016940:	4691      	mov	r9, r2
 8016942:	e096      	b.n	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016946:	2b00      	cmp	r3, #0
 8016948:	f000 80aa 	beq.w	8016aa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801694c:	f1bb 0f00 	cmp.w	fp, #0
 8016950:	d118      	bne.n	8016984 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8016952:	f8d8 0000 	ldr.w	r0, [r8]
 8016956:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016958:	6803      	ldr	r3, [r0, #0]
 801695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801695c:	4798      	blx	r3
 801695e:	4405      	add	r5, r0
 8016960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016962:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016964:	1aeb      	subs	r3, r5, r3
 8016966:	4293      	cmp	r3, r2
 8016968:	dd17      	ble.n	801699a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801696a:	2c00      	cmp	r4, #0
 801696c:	f000 8096 	beq.w	8016a9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8016970:	2c0a      	cmp	r4, #10
 8016972:	f040 8084 	bne.w	8016a7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8016976:	240a      	movs	r4, #10
 8016978:	fab4 f084 	clz	r0, r4
 801697c:	0940      	lsrs	r0, r0, #5
 801697e:	b01f      	add	sp, #124	; 0x7c
 8016980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016984:	f8d8 0000 	ldr.w	r0, [r8]
 8016988:	990d      	ldr	r1, [sp, #52]	; 0x34
 801698a:	6803      	ldr	r3, [r0, #0]
 801698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801698e:	4798      	blx	r3
 8016990:	f1bb 0f01 	cmp.w	fp, #1
 8016994:	eba5 0500 	sub.w	r5, r5, r0
 8016998:	d0a4      	beq.n	80168e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801699a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801699c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801699e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80169a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80169a6:	7b43      	ldrb	r3, [r0, #13]
 80169a8:	015b      	lsls	r3, r3, #5
 80169aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80169ae:	7983      	ldrb	r3, [r0, #6]
 80169b0:	4429      	add	r1, r5
 80169b2:	4313      	orrs	r3, r2
 80169b4:	440b      	add	r3, r1
 80169b6:	42b3      	cmp	r3, r6
 80169b8:	db5b      	blt.n	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80169ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169bc:	4299      	cmp	r1, r3
 80169be:	da58      	bge.n	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80169c0:	f8d8 0000 	ldr.w	r0, [r8]
 80169c4:	6803      	ldr	r3, [r0, #0]
 80169c6:	42ae      	cmp	r6, r5
 80169c8:	bfc8      	it	gt
 80169ca:	1b76      	subgt	r6, r6, r5
 80169cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ce:	bfcc      	ite	gt
 80169d0:	b2b6      	uxthgt	r6, r6
 80169d2:	2600      	movle	r6, #0
 80169d4:	4798      	blx	r3
 80169d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80169d8:	7b5a      	ldrb	r2, [r3, #13]
 80169da:	00d1      	lsls	r1, r2, #3
 80169dc:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80169e0:	7a19      	ldrb	r1, [r3, #8]
 80169e2:	4339      	orrs	r1, r7
 80169e4:	0657      	lsls	r7, r2, #25
 80169e6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80169e8:	bf44      	itt	mi
 80169ea:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80169ee:	b209      	sxthmi	r1, r1
 80169f0:	19c7      	adds	r7, r0, r7
 80169f2:	1a7f      	subs	r7, r7, r1
 80169f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80169f6:	b2bf      	uxth	r7, r7
 80169f8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80169fc:	fa0f fa87 	sxth.w	sl, r7
 8016a00:	4551      	cmp	r1, sl
 8016a02:	dd3a      	ble.n	8016a7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016a04:	0112      	lsls	r2, r2, #4
 8016a06:	79d8      	ldrb	r0, [r3, #7]
 8016a08:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016a0c:	4302      	orrs	r2, r0
 8016a0e:	4492      	add	sl, r2
 8016a10:	4551      	cmp	r1, sl
 8016a12:	dc2e      	bgt.n	8016a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016a14:	1bcf      	subs	r7, r1, r7
 8016a16:	b2bf      	uxth	r7, r7
 8016a18:	468a      	mov	sl, r1
 8016a1a:	9319      	str	r3, [sp, #100]	; 0x64
 8016a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a1e:	f8d8 0000 	ldr.w	r0, [r8]
 8016a22:	681a      	ldr	r2, [r3, #0]
 8016a24:	6801      	ldr	r1, [r0, #0]
 8016a26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016a28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016a2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a2c:	9218      	str	r2, [sp, #96]	; 0x60
 8016a2e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016a30:	4788      	blx	r1
 8016a32:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016a36:	910b      	str	r1, [sp, #44]	; 0x2c
 8016a38:	f898 100e 	ldrb.w	r1, [r8, #14]
 8016a3c:	910a      	str	r1, [sp, #40]	; 0x28
 8016a3e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8016a42:	9109      	str	r1, [sp, #36]	; 0x24
 8016a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016a46:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016a4a:	9305      	str	r3, [sp, #20]
 8016a4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016a4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a50:	9206      	str	r2, [sp, #24]
 8016a52:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016a56:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016a5a:	e9cd a601 	strd	sl, r6, [sp, #4]
 8016a5e:	442e      	add	r6, r5
 8016a60:	b236      	sxth	r6, r6
 8016a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a64:	9600      	str	r6, [sp, #0]
 8016a66:	681a      	ldr	r2, [r3, #0]
 8016a68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016a6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016a70:	47b0      	blx	r6
 8016a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a74:	3301      	adds	r3, #1
 8016a76:	930e      	str	r3, [sp, #56]	; 0x38
 8016a78:	e6e6      	b.n	8016848 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8016a7a:	2700      	movs	r7, #0
 8016a7c:	e7cd      	b.n	8016a1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8016a7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016a80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a82:	3501      	adds	r5, #1
 8016a84:	429d      	cmp	r5, r3
 8016a86:	f6bf af77 	bge.w	8016978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016a8a:	4659      	mov	r1, fp
 8016a8c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016a8e:	f7fa feb7 	bl	8011800 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016a92:	4604      	mov	r4, r0
 8016a94:	b110      	cbz	r0, 8016a9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8016a96:	280a      	cmp	r0, #10
 8016a98:	d1f2      	bne.n	8016a80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8016a9a:	e76c      	b.n	8016976 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016a9c:	2400      	movs	r4, #0
 8016a9e:	e76b      	b.n	8016978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016aa0:	f1bb 0f00 	cmp.w	fp, #0
 8016aa4:	f43f af5c 	beq.w	8016960 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016aa8:	e777      	b.n	801699a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08016aaa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016aaa:	b530      	push	{r4, r5, lr}
 8016aac:	8a44      	ldrh	r4, [r0, #18]
 8016aae:	8ac5      	ldrh	r5, [r0, #22]
 8016ab0:	82c3      	strh	r3, [r0, #22]
 8016ab2:	442c      	add	r4, r5
 8016ab4:	1ae4      	subs	r4, r4, r3
 8016ab6:	8244      	strh	r4, [r0, #18]
 8016ab8:	8b03      	ldrh	r3, [r0, #24]
 8016aba:	8a84      	ldrh	r4, [r0, #20]
 8016abc:	4422      	add	r2, r4
 8016abe:	440c      	add	r4, r1
 8016ac0:	1a59      	subs	r1, r3, r1
 8016ac2:	8342      	strh	r2, [r0, #26]
 8016ac4:	8284      	strh	r4, [r0, #20]
 8016ac6:	8301      	strh	r1, [r0, #24]
 8016ac8:	bd30      	pop	{r4, r5, pc}

08016aca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ace:	7a43      	ldrb	r3, [r0, #9]
 8016ad0:	1eda      	subs	r2, r3, #3
 8016ad2:	b087      	sub	sp, #28
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	b2d2      	uxtb	r2, r2
 8016ad8:	460f      	mov	r7, r1
 8016ada:	2900      	cmp	r1, #0
 8016adc:	d036      	beq.n	8016b4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8016ade:	2a01      	cmp	r2, #1
 8016ae0:	d932      	bls.n	8016b48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8016ae2:	1e58      	subs	r0, r3, #1
 8016ae4:	f1d0 0b00 	rsbs	fp, r0, #0
 8016ae8:	eb4b 0b00 	adc.w	fp, fp, r0
 8016aec:	1e99      	subs	r1, r3, #2
 8016aee:	424b      	negs	r3, r1
 8016af0:	414b      	adcs	r3, r1
 8016af2:	9303      	str	r3, [sp, #12]
 8016af4:	2300      	movs	r3, #0
 8016af6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016afa:	2500      	movs	r5, #0
 8016afc:	8265      	strh	r5, [r4, #18]
 8016afe:	82a5      	strh	r5, [r4, #20]
 8016b00:	46a9      	mov	r9, r5
 8016b02:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8016b06:	2300      	movs	r3, #0
 8016b08:	9305      	str	r3, [sp, #20]
 8016b0a:	8823      	ldrh	r3, [r4, #0]
 8016b0c:	2b20      	cmp	r3, #32
 8016b0e:	d02b      	beq.n	8016b68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8016b10:	eba3 020a 	sub.w	r2, r3, sl
 8016b14:	4256      	negs	r6, r2
 8016b16:	4156      	adcs	r6, r2
 8016b18:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d004      	beq.n	8016b2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016b20:	4553      	cmp	r3, sl
 8016b22:	bf16      	itet	ne
 8016b24:	4699      	movne	r9, r3
 8016b26:	2601      	moveq	r6, #1
 8016b28:	2600      	movne	r6, #0
 8016b2a:	ab05      	add	r3, sp, #20
 8016b2c:	68e2      	ldr	r2, [r4, #12]
 8016b2e:	7a21      	ldrb	r1, [r4, #8]
 8016b30:	6860      	ldr	r0, [r4, #4]
 8016b32:	f002 f99d 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b36:	8020      	strh	r0, [r4, #0]
 8016b38:	b9c8      	cbnz	r0, 8016b6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8016b3a:	8b22      	ldrh	r2, [r4, #24]
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	4611      	mov	r1, r2
 8016b40:	4620      	mov	r0, r4
 8016b42:	f7ff ffb2 	bl	8016aaa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016b46:	e066      	b.n	8016c16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016b48:	468b      	mov	fp, r1
 8016b4a:	e7cf      	b.n	8016aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	2a01      	cmp	r2, #1
 8016b50:	bf8c      	ite	hi
 8016b52:	2200      	movhi	r2, #0
 8016b54:	2201      	movls	r2, #1
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	bf8c      	ite	hi
 8016b5a:	2300      	movhi	r3, #0
 8016b5c:	2301      	movls	r3, #1
 8016b5e:	9202      	str	r2, [sp, #8]
 8016b60:	9301      	str	r3, [sp, #4]
 8016b62:	9103      	str	r1, [sp, #12]
 8016b64:	468b      	mov	fp, r1
 8016b66:	e7c8      	b.n	8016afa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8016b68:	4699      	mov	r9, r3
 8016b6a:	2601      	movs	r6, #1
 8016b6c:	e7dd      	b.n	8016b2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016b6e:	8ae3      	ldrh	r3, [r4, #22]
 8016b70:	280a      	cmp	r0, #10
 8016b72:	f103 0301 	add.w	r3, r3, #1
 8016b76:	82e3      	strh	r3, [r4, #22]
 8016b78:	d0df      	beq.n	8016b3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8016b7a:	9a05      	ldr	r2, [sp, #20]
 8016b7c:	bb42      	cbnz	r2, 8016bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8016b7e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016b82:	4298      	cmp	r0, r3
 8016b84:	d001      	beq.n	8016b8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016b86:	4550      	cmp	r0, sl
 8016b88:	d1bd      	bne.n	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016b8a:	8823      	ldrh	r3, [r4, #0]
 8016b8c:	8b21      	ldrh	r1, [r4, #24]
 8016b8e:	2b20      	cmp	r3, #32
 8016b90:	d001      	beq.n	8016b96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8016b92:	4553      	cmp	r3, sl
 8016b94:	d131      	bne.n	8016bfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8016b96:	2e00      	cmp	r6, #0
 8016b98:	bf0a      	itet	eq
 8016b9a:	460d      	moveq	r5, r1
 8016b9c:	4630      	movne	r0, r6
 8016b9e:	2001      	moveq	r0, #1
 8016ba0:	440a      	add	r2, r1
 8016ba2:	8aa3      	ldrh	r3, [r4, #20]
 8016ba4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016ba8:	b292      	uxth	r2, r2
 8016baa:	8322      	strh	r2, [r4, #24]
 8016bac:	4413      	add	r3, r2
 8016bae:	2f00      	cmp	r7, #0
 8016bb0:	d03a      	beq.n	8016c28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8016bb2:	f1bb 0f00 	cmp.w	fp, #0
 8016bb6:	d102      	bne.n	8016bbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8016bb8:	9903      	ldr	r1, [sp, #12]
 8016bba:	b301      	cbz	r1, 8016bfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8016bbc:	b1f8      	cbz	r0, 8016bfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8016bbe:	8ba1      	ldrh	r1, [r4, #28]
 8016bc0:	4419      	add	r1, r3
 8016bc2:	458c      	cmp	ip, r1
 8016bc4:	da2a      	bge.n	8016c1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016bc6:	8a61      	ldrh	r1, [r4, #18]
 8016bc8:	b341      	cbz	r1, 8016c1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016bca:	4563      	cmp	r3, ip
 8016bcc:	dd9b      	ble.n	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016bce:	e01c      	b.n	8016c0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8016bd0:	8893      	ldrh	r3, [r2, #4]
 8016bd2:	8023      	strh	r3, [r4, #0]
 8016bd4:	f892 800d 	ldrb.w	r8, [r2, #13]
 8016bd8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016bdc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8016be0:	f892 800a 	ldrb.w	r8, [r2, #10]
 8016be4:	ea48 0800 	orr.w	r8, r8, r0
 8016be8:	68e0      	ldr	r0, [r4, #12]
 8016bea:	6803      	ldr	r3, [r0, #0]
 8016bec:	4649      	mov	r1, r9
 8016bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bf0:	4798      	blx	r3
 8016bf2:	eb08 0200 	add.w	r2, r8, r0
 8016bf6:	b292      	uxth	r2, r2
 8016bf8:	e7c7      	b.n	8016b8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	e7d0      	b.n	8016ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8016bfe:	4563      	cmp	r3, ip
 8016c00:	dd81      	ble.n	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c02:	8a63      	ldrh	r3, [r4, #18]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	f43f af7e 	beq.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	77a3      	strb	r3, [r4, #30]
 8016c0e:	8ba2      	ldrh	r2, [r4, #28]
 8016c10:	8b63      	ldrh	r3, [r4, #26]
 8016c12:	4413      	add	r3, r2
 8016c14:	8363      	strh	r3, [r4, #26]
 8016c16:	b007      	add	sp, #28
 8016c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	4611      	mov	r1, r2
 8016c20:	4620      	mov	r0, r4
 8016c22:	f7ff ff42 	bl	8016aaa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016c26:	e76e      	b.n	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c28:	4563      	cmp	r3, ip
 8016c2a:	dd14      	ble.n	8016c56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8016c2c:	9b02      	ldr	r3, [sp, #8]
 8016c2e:	b113      	cbz	r3, 8016c36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8016c30:	2301      	movs	r3, #1
 8016c32:	460a      	mov	r2, r1
 8016c34:	e783      	b.n	8016b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8016c36:	9b01      	ldr	r3, [sp, #4]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	f43f af64 	beq.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	f47f af61 	bne.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c44:	b116      	cbz	r6, 8016c4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8016c46:	2301      	movs	r3, #1
 8016c48:	462a      	mov	r2, r5
 8016c4a:	e779      	b.n	8016b40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8016c4c:	8a63      	ldrh	r3, [r4, #18]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	f43f af59 	beq.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c54:	e7df      	b.n	8016c16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	f47f af55 	bne.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c5c:	2e00      	cmp	r6, #0
 8016c5e:	f43f af52 	beq.w	8016b06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c62:	2301      	movs	r3, #1
 8016c64:	462a      	mov	r2, r5
 8016c66:	e7db      	b.n	8016c20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08016c68 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016c68:	b530      	push	{r4, r5, lr}
 8016c6a:	4605      	mov	r5, r0
 8016c6c:	b08b      	sub	sp, #44	; 0x2c
 8016c6e:	b191      	cbz	r1, 8016c96 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8016c70:	e9cd 3100 	strd	r3, r1, [sp]
 8016c74:	4613      	mov	r3, r2
 8016c76:	4601      	mov	r1, r0
 8016c78:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016c7c:	a802      	add	r0, sp, #8
 8016c7e:	f7ff fd0d 	bl	801669c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016c82:	2401      	movs	r4, #1
 8016c84:	2100      	movs	r1, #0
 8016c86:	a802      	add	r0, sp, #8
 8016c88:	f7ff ff1f 	bl	8016aca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016c8c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016c90:	b163      	cbz	r3, 8016cac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016c92:	3401      	adds	r4, #1
 8016c94:	e7f6      	b.n	8016c84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8016c96:	f002 f9e3 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016c9a:	2401      	movs	r4, #1
 8016c9c:	280a      	cmp	r0, #10
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	bf08      	it	eq
 8016ca2:	3401      	addeq	r4, #1
 8016ca4:	f002 f9dc 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	d1f7      	bne.n	8016c9c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016cac:	b2a0      	uxth	r0, r4
 8016cae:	b00b      	add	sp, #44	; 0x2c
 8016cb0:	bd30      	pop	{r4, r5, pc}

08016cb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb6:	b0db      	sub	sp, #364	; 0x16c
 8016cb8:	4689      	mov	r9, r1
 8016cba:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8016cbe:	900a      	str	r0, [sp, #40]	; 0x28
 8016cc0:	461c      	mov	r4, r3
 8016cc2:	f1ba 0f00 	cmp.w	sl, #0
 8016cc6:	f000 80a5 	beq.w	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f000 80a1 	beq.w	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016cd2:	7ba3      	ldrb	r3, [r4, #14]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f000 809d 	beq.w	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016cda:	6810      	ldr	r0, [r2, #0]
 8016cdc:	6851      	ldr	r1, [r2, #4]
 8016cde:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8016ce2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016ce6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016cea:	4643      	mov	r3, r8
 8016cec:	c303      	stmia	r3!, {r0, r1}
 8016cee:	2500      	movs	r5, #0
 8016cf0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8016cf4:	79a2      	ldrb	r2, [r4, #6]
 8016cf6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016cfa:	a90e      	add	r1, sp, #56	; 0x38
 8016cfc:	4640      	mov	r0, r8
 8016cfe:	950e      	str	r5, [sp, #56]	; 0x38
 8016d00:	f7ff fd42 	bl	8016788 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d04:	a90e      	add	r1, sp, #56	; 0x38
 8016d06:	4608      	mov	r0, r1
 8016d08:	79a2      	ldrb	r2, [r4, #6]
 8016d0a:	af18      	add	r7, sp, #96	; 0x60
 8016d0c:	f7ff fd3c 	bl	8016788 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d10:	4638      	mov	r0, r7
 8016d12:	f001 fd6e 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8016d16:	6820      	ldr	r0, [r4, #0]
 8016d18:	6803      	ldr	r3, [r0, #0]
 8016d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d1c:	4798      	blx	r3
 8016d1e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016d20:	4603      	mov	r3, r0
 8016d22:	4651      	mov	r1, sl
 8016d24:	4638      	mov	r0, r7
 8016d26:	f001 fda9 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016d2a:	6820      	ldr	r0, [r4, #0]
 8016d2c:	7923      	ldrb	r3, [r4, #4]
 8016d2e:	9308      	str	r3, [sp, #32]
 8016d30:	6803      	ldr	r3, [r0, #0]
 8016d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d34:	4798      	blx	r3
 8016d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d3a:	181e      	adds	r6, r3, r0
 8016d3c:	42ae      	cmp	r6, r5
 8016d3e:	dd06      	ble.n	8016d4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8016d40:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8016d44:	4282      	cmp	r2, r0
 8016d46:	bfa4      	itt	ge
 8016d48:	189d      	addge	r5, r3, r2
 8016d4a:	fb95 f5f6 	sdivge	r5, r5, r6
 8016d4e:	a82e      	add	r0, sp, #184	; 0xb8
 8016d50:	f001 fd4f 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8016d54:	7c23      	ldrb	r3, [r4, #16]
 8016d56:	b14b      	cbz	r3, 8016d6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8016d58:	6820      	ldr	r0, [r4, #0]
 8016d5a:	6803      	ldr	r3, [r0, #0]
 8016d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d5e:	4798      	blx	r3
 8016d60:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016d62:	4603      	mov	r3, r0
 8016d64:	4651      	mov	r1, sl
 8016d66:	a82e      	add	r0, sp, #184	; 0xb8
 8016d68:	f001 fd88 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016d6c:	7c21      	ldrb	r1, [r4, #16]
 8016d6e:	9101      	str	r1, [sp, #4]
 8016d70:	6821      	ldr	r1, [r4, #0]
 8016d72:	7963      	ldrb	r3, [r4, #5]
 8016d74:	9100      	str	r1, [sp, #0]
 8016d76:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016d7a:	a92e      	add	r1, sp, #184	; 0xb8
 8016d7c:	a810      	add	r0, sp, #64	; 0x40
 8016d7e:	f7ff fc8d 	bl	801669c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016d82:	7c23      	ldrb	r3, [r4, #16]
 8016d84:	b9bb      	cbnz	r3, 8016db6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8016d86:	fa1f fa86 	uxth.w	sl, r6
 8016d8a:	2d00      	cmp	r5, #0
 8016d8c:	dd45      	ble.n	8016e1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8016d8e:	4638      	mov	r0, r7
 8016d90:	f002 f966 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d03d      	beq.n	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016d98:	280a      	cmp	r0, #10
 8016d9a:	d1f6      	bne.n	8016d8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8016d9c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016da0:	4453      	add	r3, sl
 8016da2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016da6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016daa:	eba3 030a 	sub.w	r3, r3, sl
 8016dae:	3d01      	subs	r5, #1
 8016db0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016db4:	e7e9      	b.n	8016d8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8016db6:	0073      	lsls	r3, r6, #1
 8016db8:	9309      	str	r3, [sp, #36]	; 0x24
 8016dba:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016dbe:	fa1f fa86 	uxth.w	sl, r6
 8016dc2:	2d00      	cmp	r5, #0
 8016dc4:	dd29      	ble.n	8016e1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8016dc6:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dcc:	428b      	cmp	r3, r1
 8016dce:	bfd4      	ite	le
 8016dd0:	2100      	movle	r1, #0
 8016dd2:	2101      	movgt	r1, #1
 8016dd4:	a810      	add	r0, sp, #64	; 0x40
 8016dd6:	f7ff fe78 	bl	8016aca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016dda:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8016dde:	3b01      	subs	r3, #1
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	455b      	cmp	r3, fp
 8016de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016de6:	d005      	beq.n	8016df4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8016de8:	7961      	ldrb	r1, [r4, #5]
 8016dea:	4638      	mov	r0, r7
 8016dec:	f7fa fd08 	bl	8011800 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016df2:	e7f4      	b.n	8016dde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8016df4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016df8:	4453      	add	r3, sl
 8016dfa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016dfe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016e02:	eba3 030a 	sub.w	r3, r3, sl
 8016e06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016e0a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016e0e:	3d01      	subs	r5, #1
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d1d6      	bne.n	8016dc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8016e14:	b05b      	add	sp, #364	; 0x16c
 8016e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e1a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8016e1e:	ad44      	add	r5, sp, #272	; 0x110
 8016e20:	f04f 0b00 	mov.w	fp, #0
 8016e24:	7c23      	ldrb	r3, [r4, #16]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d067      	beq.n	8016efa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016e2a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016e2e:	458a      	cmp	sl, r1
 8016e30:	bfd4      	ite	le
 8016e32:	2100      	movle	r1, #0
 8016e34:	2101      	movgt	r1, #1
 8016e36:	a810      	add	r0, sp, #64	; 0x40
 8016e38:	f7ff fe47 	bl	8016aca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016e3c:	9b08      	ldr	r3, [sp, #32]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d056      	beq.n	8016ef0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016e42:	7c23      	ldrb	r3, [r4, #16]
 8016e44:	9309      	str	r3, [sp, #36]	; 0x24
 8016e46:	2258      	movs	r2, #88	; 0x58
 8016e48:	4639      	mov	r1, r7
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	f00e f838 	bl	8024ec0 <memcpy>
 8016e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d059      	beq.n	8016f0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8016e56:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8016e5a:	7922      	ldrb	r2, [r4, #4]
 8016e5c:	2a01      	cmp	r2, #1
 8016e5e:	d13d      	bne.n	8016edc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8016e60:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8016e64:	1ac0      	subs	r0, r0, r3
 8016e66:	2302      	movs	r3, #2
 8016e68:	fb90 f0f3 	sdiv	r0, r0, r3
 8016e6c:	b200      	sxth	r0, r0
 8016e6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016e72:	4418      	add	r0, r3
 8016e74:	7c23      	ldrb	r3, [r4, #16]
 8016e76:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d03a      	beq.n	8016ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8016e7e:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8016e82:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8016e86:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016e8a:	9500      	str	r5, [sp, #0]
 8016e8c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016e90:	e9cd b703 	strd	fp, r7, [sp, #12]
 8016e94:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8016e98:	464a      	mov	r2, r9
 8016e9a:	2100      	movs	r1, #0
 8016e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e9e:	f7ff fca4 	bl	80167ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d1b6      	bne.n	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016ea6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016eaa:	b2b2      	uxth	r2, r6
 8016eac:	4611      	mov	r1, r2
 8016eae:	4413      	add	r3, r2
 8016eb0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016eb4:	1a52      	subs	r2, r2, r1
 8016eb6:	7c21      	ldrb	r1, [r4, #16]
 8016eb8:	b21b      	sxth	r3, r3
 8016eba:	b212      	sxth	r2, r2
 8016ebc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016ec0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8016ec4:	b109      	cbz	r1, 8016eca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8016ec6:	42b2      	cmp	r2, r6
 8016ec8:	dba4      	blt.n	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016eca:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8016ece:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016ed2:	440a      	add	r2, r1
 8016ed4:	b212      	sxth	r2, r2
 8016ed6:	4293      	cmp	r3, r2
 8016ed8:	dda4      	ble.n	8016e24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8016eda:	e79b      	b.n	8016e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016edc:	2a02      	cmp	r2, #2
 8016ede:	d105      	bne.n	8016eec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8016ee0:	7be2      	ldrb	r2, [r4, #15]
 8016ee2:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016ee6:	1a80      	subs	r0, r0, r2
 8016ee8:	1ac0      	subs	r0, r0, r3
 8016eea:	e7bf      	b.n	8016e6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8016eec:	2000      	movs	r0, #0
 8016eee:	e7be      	b.n	8016e6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8016ef0:	7be0      	ldrb	r0, [r4, #15]
 8016ef2:	e7bc      	b.n	8016e6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8016ef4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016ef8:	e7c3      	b.n	8016e82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8016efa:	9b08      	ldr	r3, [sp, #32]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d0f7      	beq.n	8016ef0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016f00:	2258      	movs	r2, #88	; 0x58
 8016f02:	4639      	mov	r1, r7
 8016f04:	4628      	mov	r0, r5
 8016f06:	f00d ffdb 	bl	8024ec0 <memcpy>
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f10:	6821      	ldr	r1, [r4, #0]
 8016f12:	4628      	mov	r0, r5
 8016f14:	f7ff fbfc 	bl	8016710 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016f18:	b203      	sxth	r3, r0
 8016f1a:	e79e      	b.n	8016e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08016f1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016f1c:	b510      	push	{r4, lr}
 8016f1e:	2b02      	cmp	r3, #2
 8016f20:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f24:	d00b      	beq.n	8016f3e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016f26:	2b03      	cmp	r3, #3
 8016f28:	d00e      	beq.n	8016f48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d001      	beq.n	8016f32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016f2e:	1860      	adds	r0, r4, r1
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	8880      	ldrh	r0, [r0, #4]
 8016f34:	4420      	add	r0, r4
 8016f36:	b200      	sxth	r0, r0
 8016f38:	1a80      	subs	r0, r0, r2
 8016f3a:	3801      	subs	r0, #1
 8016f3c:	e7f8      	b.n	8016f30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016f3e:	8880      	ldrh	r0, [r0, #4]
 8016f40:	4420      	add	r0, r4
 8016f42:	b200      	sxth	r0, r0
 8016f44:	1a40      	subs	r0, r0, r1
 8016f46:	e7f8      	b.n	8016f3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016f48:	18a0      	adds	r0, r4, r2
 8016f4a:	e7f1      	b.n	8016f30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016f4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	2b02      	cmp	r3, #2
 8016f50:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016f54:	d006      	beq.n	8016f64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016f56:	2b03      	cmp	r3, #3
 8016f58:	d00a      	beq.n	8016f70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016f5a:	2b01      	cmp	r3, #1
 8016f5c:	bf14      	ite	ne
 8016f5e:	18a0      	addne	r0, r4, r2
 8016f60:	1860      	addeq	r0, r4, r1
 8016f62:	bd10      	pop	{r4, pc}
 8016f64:	88c0      	ldrh	r0, [r0, #6]
 8016f66:	4420      	add	r0, r4
 8016f68:	b200      	sxth	r0, r0
 8016f6a:	1a80      	subs	r0, r0, r2
 8016f6c:	3801      	subs	r0, #1
 8016f6e:	e7f8      	b.n	8016f62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016f70:	88c0      	ldrh	r0, [r0, #6]
 8016f72:	4420      	add	r0, r4
 8016f74:	b200      	sxth	r0, r0
 8016f76:	1a40      	subs	r0, r0, r1
 8016f78:	e7f8      	b.n	8016f6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016f7c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016f7c:	4b01      	ldr	r3, [pc, #4]	; (8016f84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016f7e:	2200      	movs	r2, #0
 8016f80:	601a      	str	r2, [r3, #0]
 8016f82:	4770      	bx	lr
 8016f84:	2000135c 	.word	0x2000135c

08016f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8016f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f8a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8016f8e:	1e05      	subs	r5, r0, #0
 8016f90:	bfba      	itte	lt
 8016f92:	f04f 37ff 	movlt.w	r7, #4294967295
 8016f96:	426d      	neglt	r5, r5
 8016f98:	2701      	movge	r7, #1
 8016f9a:	f1be 0f00 	cmp.w	lr, #0
 8016f9e:	bfb8      	it	lt
 8016fa0:	f1ce 0e00 	rsblt	lr, lr, #0
 8016fa4:	f04f 0601 	mov.w	r6, #1
 8016fa8:	fa4e f001 	asr.w	r0, lr, r1
 8016fac:	fa06 f101 	lsl.w	r1, r6, r1
 8016fb0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016fb4:	f101 31ff 	add.w	r1, r1, #4294967295
 8016fb8:	ea01 010e 	and.w	r1, r1, lr
 8016fbc:	bfb8      	it	lt
 8016fbe:	427f      	neglt	r7, r7
 8016fc0:	434d      	muls	r5, r1
 8016fc2:	2c00      	cmp	r4, #0
 8016fc4:	f8dc 1000 	ldr.w	r1, [ip]
 8016fc8:	bfb8      	it	lt
 8016fca:	4264      	neglt	r4, r4
 8016fcc:	fb03 1300 	mla	r3, r3, r0, r1
 8016fd0:	fb95 f1f4 	sdiv	r1, r5, r4
 8016fd4:	fb04 5511 	mls	r5, r4, r1, r5
 8016fd8:	441d      	add	r5, r3
 8016fda:	fb95 f3f4 	sdiv	r3, r5, r4
 8016fde:	fb04 5413 	mls	r4, r4, r3, r5
 8016fe2:	4419      	add	r1, r3
 8016fe4:	bfb8      	it	lt
 8016fe6:	427f      	neglt	r7, r7
 8016fe8:	fb02 1000 	mla	r0, r2, r0, r1
 8016fec:	f8cc 4000 	str.w	r4, [ip]
 8016ff0:	4378      	muls	r0, r7
 8016ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ff4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff8:	4c24      	ldr	r4, [pc, #144]	; (801708c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8016ffa:	6807      	ldr	r7, [r0, #0]
 8016ffc:	69a3      	ldr	r3, [r4, #24]
 8016ffe:	b086      	sub	sp, #24
 8017000:	4605      	mov	r5, r0
 8017002:	b92b      	cbnz	r3, 8017010 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8017004:	6840      	ldr	r0, [r0, #4]
 8017006:	e9c5 7000 	strd	r7, r0, [r5]
 801700a:	b006      	add	sp, #24
 801700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017010:	68a2      	ldr	r2, [r4, #8]
 8017012:	6820      	ldr	r0, [r4, #0]
 8017014:	ae06      	add	r6, sp, #24
 8017016:	f04f 0802 	mov.w	r8, #2
 801701a:	fb93 f1f8 	sdiv	r1, r3, r8
 801701e:	440a      	add	r2, r1
 8017020:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017024:	69e1      	ldr	r1, [r4, #28]
 8017026:	9700      	str	r7, [sp, #0]
 8017028:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801702c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801702e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017030:	f7ff ffaa 	bl	8016f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017034:	69a3      	ldr	r3, [r4, #24]
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	686b      	ldr	r3, [r5, #4]
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	4607      	mov	r7, r0
 801703e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017040:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017042:	6a21      	ldr	r1, [r4, #32]
 8017044:	9602      	str	r6, [sp, #8]
 8017046:	6860      	ldr	r0, [r4, #4]
 8017048:	f7ff ff9e 	bl	8016f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801704c:	6963      	ldr	r3, [r4, #20]
 801704e:	69a2      	ldr	r2, [r4, #24]
 8017050:	fb92 f8f8 	sdiv	r8, r2, r8
 8017054:	4443      	add	r3, r8
 8017056:	9305      	str	r3, [sp, #20]
 8017058:	682b      	ldr	r3, [r5, #0]
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8017060:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017062:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017064:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017066:	4407      	add	r7, r0
 8017068:	68e0      	ldr	r0, [r4, #12]
 801706a:	f7ff ff8d 	bl	8016f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801706e:	69a3      	ldr	r3, [r4, #24]
 8017070:	9301      	str	r3, [sp, #4]
 8017072:	686b      	ldr	r3, [r5, #4]
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	4680      	mov	r8, r0
 8017078:	9602      	str	r6, [sp, #8]
 801707a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801707c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801707e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017080:	6920      	ldr	r0, [r4, #16]
 8017082:	f7ff ff81 	bl	8016f88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017086:	4440      	add	r0, r8
 8017088:	e7bd      	b.n	8017006 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801708a:	bf00      	nop
 801708c:	20001360 	.word	0x20001360

08017090 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017090:	b510      	push	{r4, lr}
 8017092:	4b07      	ldr	r3, [pc, #28]	; (80170b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	2b01      	cmp	r3, #1
 8017098:	d108      	bne.n	80170ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801709a:	4b06      	ldr	r3, [pc, #24]	; (80170b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801709c:	880c      	ldrh	r4, [r1, #0]
 801709e:	881b      	ldrh	r3, [r3, #0]
 80170a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80170a4:	3b01      	subs	r3, #1
 80170a6:	1b1b      	subs	r3, r3, r4
 80170a8:	8003      	strh	r3, [r0, #0]
 80170aa:	800a      	strh	r2, [r1, #0]
 80170ac:	bd10      	pop	{r4, pc}
 80170ae:	bf00      	nop
 80170b0:	2000134a 	.word	0x2000134a
 80170b4:	2000134e 	.word	0x2000134e

080170b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80170b8:	b510      	push	{r4, lr}
 80170ba:	4b0a      	ldr	r3, [pc, #40]	; (80170e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	2b01      	cmp	r3, #1
 80170c0:	d10e      	bne.n	80170e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80170c2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80170c6:	8843      	ldrh	r3, [r0, #2]
 80170c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80170cc:	8044      	strh	r4, [r0, #2]
 80170ce:	18ca      	adds	r2, r1, r3
 80170d0:	4b05      	ldr	r3, [pc, #20]	; (80170e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80170d2:	881b      	ldrh	r3, [r3, #0]
 80170d4:	1a9b      	subs	r3, r3, r2
 80170d6:	8003      	strh	r3, [r0, #0]
 80170d8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80170dc:	80c3      	strh	r3, [r0, #6]
 80170de:	8081      	strh	r1, [r0, #4]
 80170e0:	bd10      	pop	{r4, pc}
 80170e2:	bf00      	nop
 80170e4:	2000134a 	.word	0x2000134a
 80170e8:	20001346 	.word	0x20001346

080170ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80170ec:	b510      	push	{r4, lr}
 80170ee:	4b07      	ldr	r3, [pc, #28]	; (801710c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	2b01      	cmp	r3, #1
 80170f4:	d108      	bne.n	8017108 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80170f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80170fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80170fe:	8003      	strh	r3, [r0, #0]
 8017100:	8893      	ldrh	r3, [r2, #4]
 8017102:	3b01      	subs	r3, #1
 8017104:	1b1b      	subs	r3, r3, r4
 8017106:	800b      	strh	r3, [r1, #0]
 8017108:	bd10      	pop	{r4, pc}
 801710a:	bf00      	nop
 801710c:	2000134a 	.word	0x2000134a

08017110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017110:	b513      	push	{r0, r1, r4, lr}
 8017112:	4b08      	ldr	r3, [pc, #32]	; (8017134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017114:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017118:	4b07      	ldr	r3, [pc, #28]	; (8017138 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801711a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801711e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017122:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017126:	2400      	movs	r4, #0
 8017128:	466a      	mov	r2, sp
 801712a:	9400      	str	r4, [sp, #0]
 801712c:	f7ff ffde 	bl	80170ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017130:	b002      	add	sp, #8
 8017132:	bd10      	pop	{r4, pc}
 8017134:	20001346 	.word	0x20001346
 8017138:	20001348 	.word	0x20001348

0801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801713c:	b510      	push	{r4, lr}
 801713e:	4b0a      	ldr	r3, [pc, #40]	; (8017168 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	2b01      	cmp	r3, #1
 8017144:	460a      	mov	r2, r1
 8017146:	d10d      	bne.n	8017164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017148:	8881      	ldrh	r1, [r0, #4]
 801714a:	8803      	ldrh	r3, [r0, #0]
 801714c:	440b      	add	r3, r1
 801714e:	4601      	mov	r1, r0
 8017150:	3b01      	subs	r3, #1
 8017152:	f821 3b02 	strh.w	r3, [r1], #2
 8017156:	f7ff ffc9 	bl	80170ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801715a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801715e:	88c2      	ldrh	r2, [r0, #6]
 8017160:	8082      	strh	r2, [r0, #4]
 8017162:	80c3      	strh	r3, [r0, #6]
 8017164:	bd10      	pop	{r4, pc}
 8017166:	bf00      	nop
 8017168:	2000134a 	.word	0x2000134a

0801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801716c:	b507      	push	{r0, r1, r2, lr}
 801716e:	4b09      	ldr	r3, [pc, #36]	; (8017194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017174:	4b08      	ldr	r3, [pc, #32]	; (8017198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017176:	f8ad 2004 	strh.w	r2, [sp, #4]
 801717a:	2100      	movs	r1, #0
 801717c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017180:	9100      	str	r1, [sp, #0]
 8017182:	4669      	mov	r1, sp
 8017184:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017188:	f7ff ffd8 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801718c:	b003      	add	sp, #12
 801718e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017192:	bf00      	nop
 8017194:	20001346 	.word	0x20001346
 8017198:	20001348 	.word	0x20001348

0801719c <_ZN8touchgfx11Application13requestRedrawEv>:
 801719c:	4b06      	ldr	r3, [pc, #24]	; (80171b8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801719e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171a2:	4b06      	ldr	r3, [pc, #24]	; (80171bc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80171a4:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80171a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ac:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80171b0:	2100      	movs	r1, #0
 80171b2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80171b6:	4770      	bx	lr
 80171b8:	20001346 	.word	0x20001346
 80171bc:	20001348 	.word	0x20001348

080171c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80171c0:	4b03      	ldr	r3, [pc, #12]	; (80171d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80171c2:	6818      	ldr	r0, [r3, #0]
 80171c4:	b110      	cbz	r0, 80171cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80171c6:	6803      	ldr	r3, [r0, #0]
 80171c8:	699b      	ldr	r3, [r3, #24]
 80171ca:	4718      	bx	r3
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop
 80171d0:	200013b0 	.word	0x200013b0

080171d4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80171d4:	4770      	bx	lr
	...

080171d8 <_ZN8touchgfx11Application4drawEv>:
 80171d8:	b507      	push	{r0, r1, r2, lr}
 80171da:	4b09      	ldr	r3, [pc, #36]	; (8017200 <_ZN8touchgfx11Application4drawEv+0x28>)
 80171dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171e0:	4b08      	ldr	r3, [pc, #32]	; (8017204 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80171e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80171e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80171ee:	6803      	ldr	r3, [r0, #0]
 80171f0:	2100      	movs	r1, #0
 80171f2:	9100      	str	r1, [sp, #0]
 80171f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171f6:	4669      	mov	r1, sp
 80171f8:	4798      	blx	r3
 80171fa:	b003      	add	sp, #12
 80171fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017200:	20001346 	.word	0x20001346
 8017204:	20001348 	.word	0x20001348

08017208 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017208:	4b03      	ldr	r3, [pc, #12]	; (8017218 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801720a:	6818      	ldr	r0, [r3, #0]
 801720c:	b110      	cbz	r0, 8017214 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801720e:	6803      	ldr	r3, [r0, #0]
 8017210:	69db      	ldr	r3, [r3, #28]
 8017212:	4718      	bx	r3
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	200013b0 	.word	0x200013b0

0801721c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801721c:	4b03      	ldr	r3, [pc, #12]	; (801722c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801721e:	6818      	ldr	r0, [r3, #0]
 8017220:	b110      	cbz	r0, 8017228 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017222:	6803      	ldr	r3, [r0, #0]
 8017224:	6a1b      	ldr	r3, [r3, #32]
 8017226:	4718      	bx	r3
 8017228:	4770      	bx	lr
 801722a:	bf00      	nop
 801722c:	200013b0 	.word	0x200013b0

08017230 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017230:	4b03      	ldr	r3, [pc, #12]	; (8017240 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017232:	6818      	ldr	r0, [r3, #0]
 8017234:	b110      	cbz	r0, 801723c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017236:	6803      	ldr	r3, [r0, #0]
 8017238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801723a:	4718      	bx	r3
 801723c:	4770      	bx	lr
 801723e:	bf00      	nop
 8017240:	200013b0 	.word	0x200013b0

08017244 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017244:	b570      	push	{r4, r5, r6, lr}
 8017246:	4d34      	ldr	r5, [pc, #208]	; (8017318 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8017248:	4604      	mov	r4, r0
 801724a:	6828      	ldr	r0, [r5, #0]
 801724c:	b140      	cbz	r0, 8017260 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801724e:	7a03      	ldrb	r3, [r0, #8]
 8017250:	b933      	cbnz	r3, 8017260 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017252:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	689b      	ldr	r3, [r3, #8]
 801725a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801725e:	4718      	bx	r3
 8017260:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8017264:	b97b      	cbnz	r3, 8017286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017266:	b170      	cbz	r0, 8017286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017268:	7a03      	ldrb	r3, [r0, #8]
 801726a:	b163      	cbz	r3, 8017286 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801726c:	4b2b      	ldr	r3, [pc, #172]	; (801731c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801726e:	6818      	ldr	r0, [r3, #0]
 8017270:	b110      	cbz	r0, 8017278 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017272:	6803      	ldr	r3, [r0, #0]
 8017274:	691b      	ldr	r3, [r3, #16]
 8017276:	4798      	blx	r3
 8017278:	6828      	ldr	r0, [r5, #0]
 801727a:	6803      	ldr	r3, [r0, #0]
 801727c:	68db      	ldr	r3, [r3, #12]
 801727e:	4798      	blx	r3
 8017280:	2301      	movs	r3, #1
 8017282:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017286:	2500      	movs	r5, #0
 8017288:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801728c:	42a8      	cmp	r0, r5
 801728e:	dd0c      	ble.n	80172aa <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017290:	1963      	adds	r3, r4, r5
 8017292:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017296:	b132      	cbz	r2, 80172a6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017298:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801729c:	4413      	add	r3, r2
 801729e:	6858      	ldr	r0, [r3, #4]
 80172a0:	6803      	ldr	r3, [r0, #0]
 80172a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172a4:	4798      	blx	r3
 80172a6:	3501      	adds	r5, #1
 80172a8:	e7ee      	b.n	8017288 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80172aa:	2300      	movs	r3, #0
 80172ac:	461a      	mov	r2, r3
 80172ae:	4298      	cmp	r0, r3
 80172b0:	d114      	bne.n	80172dc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80172b2:	1d25      	adds	r5, r4, #4
 80172b4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80172b8:	1e48      	subs	r0, r1, #1
 80172ba:	b280      	uxth	r0, r0
 80172bc:	4291      	cmp	r1, r2
 80172be:	dd24      	ble.n	801730a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80172c0:	4288      	cmp	r0, r1
 80172c2:	d2fb      	bcs.n	80172bc <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80172c4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80172c8:	3304      	adds	r3, #4
 80172ca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80172ce:	428b      	cmp	r3, r1
 80172d0:	d018      	beq.n	8017304 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80172d2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80172d6:	f843 6c04 	str.w	r6, [r3, #-4]
 80172da:	e7f8      	b.n	80172ce <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 80172dc:	18e1      	adds	r1, r4, r3
 80172de:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80172e2:	b16d      	cbz	r5, 8017300 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d00a      	beq.n	80172fe <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 80172e8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80172ec:	4431      	add	r1, r6
 80172ee:	684e      	ldr	r6, [r1, #4]
 80172f0:	b291      	uxth	r1, r2
 80172f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80172f6:	604e      	str	r6, [r1, #4]
 80172f8:	18a1      	adds	r1, r4, r2
 80172fa:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80172fe:	3201      	adds	r2, #1
 8017300:	3301      	adds	r3, #1
 8017302:	e7d4      	b.n	80172ae <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017304:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017308:	e7d4      	b.n	80172b4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801730a:	4b04      	ldr	r3, [pc, #16]	; (801731c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801730c:	6818      	ldr	r0, [r3, #0]
 801730e:	b110      	cbz	r0, 8017316 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8017310:	6803      	ldr	r3, [r0, #0]
 8017312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017314:	e7a1      	b.n	801725a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017316:	bd70      	pop	{r4, r5, r6, pc}
 8017318:	200013b4 	.word	0x200013b4
 801731c:	200013b0 	.word	0x200013b0

08017320 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017320:	b570      	push	{r4, r5, r6, lr}
 8017322:	4606      	mov	r6, r0
 8017324:	460c      	mov	r4, r1
 8017326:	b929      	cbnz	r1, 8017334 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017328:	4b0c      	ldr	r3, [pc, #48]	; (801735c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801732a:	4a0d      	ldr	r2, [pc, #52]	; (8017360 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801732c:	480d      	ldr	r0, [pc, #52]	; (8017364 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801732e:	2166      	movs	r1, #102	; 0x66
 8017330:	f00d fd48 	bl	8024dc4 <__assert_func>
 8017334:	4d0c      	ldr	r5, [pc, #48]	; (8017368 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017336:	2300      	movs	r3, #0
 8017338:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801733c:	6828      	ldr	r0, [r5, #0]
 801733e:	b110      	cbz	r0, 8017346 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017340:	6803      	ldr	r3, [r0, #0]
 8017342:	695b      	ldr	r3, [r3, #20]
 8017344:	4798      	blx	r3
 8017346:	602c      	str	r4, [r5, #0]
 8017348:	6823      	ldr	r3, [r4, #0]
 801734a:	4620      	mov	r0, r4
 801734c:	68db      	ldr	r3, [r3, #12]
 801734e:	4798      	blx	r3
 8017350:	6833      	ldr	r3, [r6, #0]
 8017352:	4630      	mov	r0, r6
 8017354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801735a:	4718      	bx	r3
 801735c:	08053694 	.word	0x08053694
 8017360:	08053764 	.word	0x08053764
 8017364:	0805369e 	.word	0x0805369e
 8017368:	200013b0 	.word	0x200013b0

0801736c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801736c:	b510      	push	{r4, lr}
 801736e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017372:	888a      	ldrh	r2, [r1, #4]
 8017374:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017378:	4422      	add	r2, r4
 801737a:	b212      	sxth	r2, r2
 801737c:	4293      	cmp	r3, r2
 801737e:	da15      	bge.n	80173ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017380:	8882      	ldrh	r2, [r0, #4]
 8017382:	4413      	add	r3, r2
 8017384:	b21b      	sxth	r3, r3
 8017386:	429c      	cmp	r4, r3
 8017388:	da10      	bge.n	80173ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801738a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801738e:	88c9      	ldrh	r1, [r1, #6]
 8017390:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017394:	4419      	add	r1, r3
 8017396:	b209      	sxth	r1, r1
 8017398:	428a      	cmp	r2, r1
 801739a:	da07      	bge.n	80173ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801739c:	88c0      	ldrh	r0, [r0, #6]
 801739e:	4410      	add	r0, r2
 80173a0:	b200      	sxth	r0, r0
 80173a2:	4283      	cmp	r3, r0
 80173a4:	bfac      	ite	ge
 80173a6:	2000      	movge	r0, #0
 80173a8:	2001      	movlt	r0, #1
 80173aa:	bd10      	pop	{r4, pc}
 80173ac:	2000      	movs	r0, #0
 80173ae:	e7fc      	b.n	80173aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080173b0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80173b0:	b570      	push	{r4, r5, r6, lr}
 80173b2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80173b6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80173ba:	42ac      	cmp	r4, r5
 80173bc:	db18      	blt.n	80173f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80173be:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80173c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	db12      	blt.n	80173f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80173ca:	8886      	ldrh	r6, [r0, #4]
 80173cc:	4435      	add	r5, r6
 80173ce:	888e      	ldrh	r6, [r1, #4]
 80173d0:	4434      	add	r4, r6
 80173d2:	b22d      	sxth	r5, r5
 80173d4:	b224      	sxth	r4, r4
 80173d6:	42a5      	cmp	r5, r4
 80173d8:	db0a      	blt.n	80173f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80173da:	88c0      	ldrh	r0, [r0, #6]
 80173dc:	4418      	add	r0, r3
 80173de:	88cb      	ldrh	r3, [r1, #6]
 80173e0:	441a      	add	r2, r3
 80173e2:	b200      	sxth	r0, r0
 80173e4:	b212      	sxth	r2, r2
 80173e6:	4290      	cmp	r0, r2
 80173e8:	bfb4      	ite	lt
 80173ea:	2000      	movlt	r0, #0
 80173ec:	2001      	movge	r0, #1
 80173ee:	bd70      	pop	{r4, r5, r6, pc}
 80173f0:	2000      	movs	r0, #0
 80173f2:	e7fc      	b.n	80173ee <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080173f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80173f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173f6:	4604      	mov	r4, r0
 80173f8:	4608      	mov	r0, r1
 80173fa:	460d      	mov	r5, r1
 80173fc:	f7fd f95d 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017400:	b978      	cbnz	r0, 8017422 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017402:	4620      	mov	r0, r4
 8017404:	f7fd f959 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017408:	f9b5 6000 	ldrsh.w	r6, [r5]
 801740c:	b150      	cbz	r0, 8017424 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801740e:	8026      	strh	r6, [r4, #0]
 8017410:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017414:	8063      	strh	r3, [r4, #2]
 8017416:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801741a:	80a3      	strh	r3, [r4, #4]
 801741c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017420:	80e3      	strh	r3, [r4, #6]
 8017422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017424:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017428:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801742c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017430:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017434:	88ed      	ldrh	r5, [r5, #6]
 8017436:	42b1      	cmp	r1, r6
 8017438:	460f      	mov	r7, r1
 801743a:	bfa8      	it	ge
 801743c:	4637      	movge	r7, r6
 801743e:	4293      	cmp	r3, r2
 8017440:	4618      	mov	r0, r3
 8017442:	4466      	add	r6, ip
 8017444:	bfa8      	it	ge
 8017446:	4610      	movge	r0, r2
 8017448:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801744c:	8027      	strh	r7, [r4, #0]
 801744e:	442a      	add	r2, r5
 8017450:	88e5      	ldrh	r5, [r4, #6]
 8017452:	8060      	strh	r0, [r4, #2]
 8017454:	4461      	add	r1, ip
 8017456:	442b      	add	r3, r5
 8017458:	b236      	sxth	r6, r6
 801745a:	b209      	sxth	r1, r1
 801745c:	b212      	sxth	r2, r2
 801745e:	b21b      	sxth	r3, r3
 8017460:	428e      	cmp	r6, r1
 8017462:	bfac      	ite	ge
 8017464:	ebc7 0106 	rsbge	r1, r7, r6
 8017468:	ebc7 0101 	rsblt	r1, r7, r1
 801746c:	429a      	cmp	r2, r3
 801746e:	bfac      	ite	ge
 8017470:	ebc0 0202 	rsbge	r2, r0, r2
 8017474:	ebc0 0203 	rsblt	r2, r0, r3
 8017478:	80a1      	strh	r1, [r4, #4]
 801747a:	80e2      	strh	r2, [r4, #6]
 801747c:	e7d1      	b.n	8017422 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017480 <_ZN8touchgfx11Application11getInstanceEv>:
 8017480:	4b01      	ldr	r3, [pc, #4]	; (8017488 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	200013c0 	.word	0x200013c0

0801748c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801748c:	2300      	movs	r3, #0
 801748e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017492:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017496:	30a8      	adds	r0, #168	; 0xa8
 8017498:	f802 3b01 	strb.w	r3, [r2], #1
 801749c:	4282      	cmp	r2, r0
 801749e:	d1fb      	bne.n	8017498 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80174a0:	4770      	bx	lr

080174a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80174a2:	4603      	mov	r3, r0
 80174a4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80174a8:	2200      	movs	r2, #0
 80174aa:	801a      	strh	r2, [r3, #0]
 80174ac:	805a      	strh	r2, [r3, #2]
 80174ae:	809a      	strh	r2, [r3, #4]
 80174b0:	80da      	strh	r2, [r3, #6]
 80174b2:	3308      	adds	r3, #8
 80174b4:	428b      	cmp	r3, r1
 80174b6:	d1f8      	bne.n	80174aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80174b8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80174bc:	4770      	bx	lr
	...

080174c0 <_ZN8touchgfx11ApplicationC1Ev>:
 80174c0:	b570      	push	{r4, r5, r6, lr}
 80174c2:	4b1a      	ldr	r3, [pc, #104]	; (801752c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80174c4:	6003      	str	r3, [r0, #0]
 80174c6:	2500      	movs	r5, #0
 80174c8:	4604      	mov	r4, r0
 80174ca:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80174ce:	30a8      	adds	r0, #168	; 0xa8
 80174d0:	f7ff ffe7 	bl	80174a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80174d4:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80174d8:	f7ff ffe3 	bl	80174a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80174dc:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80174e0:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80174e4:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80174e8:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80174ec:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80174f0:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80174f4:	490e      	ldr	r1, [pc, #56]	; (8017530 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80174f6:	480f      	ldr	r0, [pc, #60]	; (8017534 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80174f8:	4e0f      	ldr	r6, [pc, #60]	; (8017538 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80174fa:	f00d fb2d 	bl	8024b58 <CRC_Lock>
 80174fe:	4b0f      	ldr	r3, [pc, #60]	; (801753c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017500:	b158      	cbz	r0, 801751a <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 8017502:	801d      	strh	r5, [r3, #0]
 8017504:	4a0e      	ldr	r2, [pc, #56]	; (8017540 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017506:	2300      	movs	r3, #0
 8017508:	6013      	str	r3, [r2, #0]
 801750a:	4a0e      	ldr	r2, [pc, #56]	; (8017544 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801750c:	6033      	str	r3, [r6, #0]
 801750e:	4620      	mov	r0, r4
 8017510:	6013      	str	r3, [r2, #0]
 8017512:	f7ff ffbb 	bl	801748c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017516:	4620      	mov	r0, r4
 8017518:	bd70      	pop	{r4, r5, r6, pc}
 801751a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801751e:	2002      	movs	r0, #2
 8017520:	801a      	strh	r2, [r3, #0]
 8017522:	6030      	str	r0, [r6, #0]
 8017524:	f000 ffe8 	bl	80184f8 <_ZN8touchgfx6Screen4drawEv>
 8017528:	e7ec      	b.n	8017504 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801752a:	bf00      	nop
 801752c:	08053728 	.word	0x08053728
 8017530:	b5e8b5cd 	.word	0xb5e8b5cd
 8017534:	f407a5c2 	.word	0xf407a5c2
 8017538:	200013b0 	.word	0x200013b0
 801753c:	20000034 	.word	0x20000034
 8017540:	200013c0 	.word	0x200013c0
 8017544:	200013b4 	.word	0x200013b4

08017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017548:	2300      	movs	r3, #0
 801754a:	8003      	strh	r3, [r0, #0]
 801754c:	8043      	strh	r3, [r0, #2]
 801754e:	8083      	strh	r3, [r0, #4]
 8017550:	80c3      	strh	r3, [r0, #6]
 8017552:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8017556:	4293      	cmp	r3, r2
 8017558:	b530      	push	{r4, r5, lr}
 801755a:	d912      	bls.n	8017582 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801755c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017560:	3b01      	subs	r3, #1
 8017562:	6825      	ldr	r5, [r4, #0]
 8017564:	6005      	str	r5, [r0, #0]
 8017566:	b29b      	uxth	r3, r3
 8017568:	6865      	ldr	r5, [r4, #4]
 801756a:	6045      	str	r5, [r0, #4]
 801756c:	4293      	cmp	r3, r2
 801756e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8017572:	d906      	bls.n	8017582 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017574:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8017578:	681d      	ldr	r5, [r3, #0]
 801757a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801757e:	685d      	ldr	r5, [r3, #4]
 8017580:	6065      	str	r5, [r4, #4]
 8017582:	bd30      	pop	{r4, r5, pc}

08017584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017586:	466b      	mov	r3, sp
 8017588:	e883 0006 	stmia.w	r3, {r1, r2}
 801758c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017590:	2a07      	cmp	r2, #7
 8017592:	4604      	mov	r4, r0
 8017594:	d906      	bls.n	80175a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8017596:	4b09      	ldr	r3, [pc, #36]	; (80175bc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8017598:	4a09      	ldr	r2, [pc, #36]	; (80175c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801759a:	480a      	ldr	r0, [pc, #40]	; (80175c4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801759c:	f240 118f 	movw	r1, #399	; 0x18f
 80175a0:	f00d fc10 	bl	8024dc4 <__assert_func>
 80175a4:	1c51      	adds	r1, r2, #1
 80175a6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80175aa:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80175ae:	cb03      	ldmia	r3!, {r0, r1}
 80175b0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80175b4:	6069      	str	r1, [r5, #4]
 80175b6:	b003      	add	sp, #12
 80175b8:	bd30      	pop	{r4, r5, pc}
 80175ba:	bf00      	nop
 80175bc:	080536c8 	.word	0x080536c8
 80175c0:	080537a8 	.word	0x080537a8
 80175c4:	080536f7 	.word	0x080536f7

080175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80175c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175cc:	b089      	sub	sp, #36	; 0x24
 80175ce:	466c      	mov	r4, sp
 80175d0:	4606      	mov	r6, r0
 80175d2:	4620      	mov	r0, r4
 80175d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80175d8:	f7fd f86f 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80175dc:	bbb0      	cbnz	r0, 801764c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80175de:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80175e2:	b1fd      	cbz	r5, 8017624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80175e4:	3d01      	subs	r5, #1
 80175e6:	af04      	add	r7, sp, #16
 80175e8:	f04f 090a 	mov.w	r9, #10
 80175ec:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80175f0:	ab02      	add	r3, sp, #8
 80175f2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80175f6:	6851      	ldr	r1, [r2, #4]
 80175f8:	c303      	stmia	r3!, {r0, r1}
 80175fa:	4621      	mov	r1, r4
 80175fc:	a802      	add	r0, sp, #8
 80175fe:	fa1f f885 	uxth.w	r8, r5
 8017602:	f7ff fed5 	bl	80173b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017606:	bb08      	cbnz	r0, 801764c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8017608:	a902      	add	r1, sp, #8
 801760a:	4620      	mov	r0, r4
 801760c:	f7ff fed0 	bl	80173b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017610:	b1f8      	cbz	r0, 8017652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8017612:	4642      	mov	r2, r8
 8017614:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8017618:	a806      	add	r0, sp, #24
 801761a:	f7ff ff95 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801761e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8017622:	d2e3      	bcs.n	80175ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8017624:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8017628:	2b08      	cmp	r3, #8
 801762a:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801762e:	d108      	bne.n	8017642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017630:	4629      	mov	r1, r5
 8017632:	a806      	add	r0, sp, #24
 8017634:	2207      	movs	r2, #7
 8017636:	f7ff ff87 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801763a:	a906      	add	r1, sp, #24
 801763c:	4620      	mov	r0, r4
 801763e:	f7ff fed9 	bl	80173f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017642:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017646:	4628      	mov	r0, r5
 8017648:	f7ff ff9c 	bl	8017584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801764c:	b009      	add	sp, #36	; 0x24
 801764e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017652:	4621      	mov	r1, r4
 8017654:	a802      	add	r0, sp, #8
 8017656:	f7ff fe89 	bl	801736c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801765a:	b150      	cbz	r0, 8017672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801765c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8017660:	a806      	add	r0, sp, #24
 8017662:	4642      	mov	r2, r8
 8017664:	f7ff ff70 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017668:	a902      	add	r1, sp, #8
 801766a:	4620      	mov	r0, r4
 801766c:	f7ff fec2 	bl	80173f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017670:	e7d5      	b.n	801761e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017676:	e887 0003 	stmia.w	r7, {r0, r1}
 801767a:	a902      	add	r1, sp, #8
 801767c:	4638      	mov	r0, r7
 801767e:	f7ff feb9 	bl	80173f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017682:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017686:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801768a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801768e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017692:	fb13 f302 	smulbb	r3, r3, r2
 8017696:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801769a:	fb11 f102 	smulbb	r1, r1, r2
 801769e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80176a2:	fb12 1100 	smlabb	r1, r2, r0, r1
 80176a6:	220b      	movs	r2, #11
 80176a8:	fb09 f303 	mul.w	r3, r9, r3
 80176ac:	434a      	muls	r2, r1
 80176ae:	4293      	cmp	r3, r2
 80176b0:	dab5      	bge.n	801761e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80176b2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80176b6:	a806      	add	r0, sp, #24
 80176b8:	4642      	mov	r2, r8
 80176ba:	f7ff ff45 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80176be:	e897 0003 	ldmia.w	r7, {r0, r1}
 80176c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80176c6:	e7aa      	b.n	801761e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080176c8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80176c8:	b530      	push	{r4, r5, lr}
 80176ca:	4b1d      	ldr	r3, [pc, #116]	; (8017740 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80176cc:	b085      	sub	sp, #20
 80176ce:	460c      	mov	r4, r1
 80176d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80176d4:	4b1b      	ldr	r3, [pc, #108]	; (8017744 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80176d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80176da:	2100      	movs	r1, #0
 80176dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176e0:	9100      	str	r1, [sp, #0]
 80176e2:	4605      	mov	r5, r0
 80176e4:	6861      	ldr	r1, [r4, #4]
 80176e6:	6820      	ldr	r0, [r4, #0]
 80176e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80176ec:	ab02      	add	r3, sp, #8
 80176ee:	c303      	stmia	r3!, {r0, r1}
 80176f0:	4669      	mov	r1, sp
 80176f2:	a802      	add	r0, sp, #8
 80176f4:	f7fc ff9e 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 80176f8:	ab02      	add	r3, sp, #8
 80176fa:	cb03      	ldmia	r3!, {r0, r1}
 80176fc:	4b12      	ldr	r3, [pc, #72]	; (8017748 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80176fe:	6020      	str	r0, [r4, #0]
 8017700:	6818      	ldr	r0, [r3, #0]
 8017702:	6061      	str	r1, [r4, #4]
 8017704:	b138      	cbz	r0, 8017716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017706:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801770a:	b133      	cbz	r3, 801771a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801770c:	6821      	ldr	r1, [r4, #0]
 801770e:	6862      	ldr	r2, [r4, #4]
 8017710:	4628      	mov	r0, r5
 8017712:	f7ff ff59 	bl	80175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017716:	b005      	add	sp, #20
 8017718:	bd30      	pop	{r4, r5, pc}
 801771a:	6803      	ldr	r3, [r0, #0]
 801771c:	4621      	mov	r1, r4
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	4798      	blx	r3
 8017722:	4b0a      	ldr	r3, [pc, #40]	; (801774c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8017724:	6818      	ldr	r0, [r3, #0]
 8017726:	b118      	cbz	r0, 8017730 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8017728:	6803      	ldr	r3, [r0, #0]
 801772a:	4621      	mov	r1, r4
 801772c:	689b      	ldr	r3, [r3, #8]
 801772e:	4798      	blx	r3
 8017730:	4b07      	ldr	r3, [pc, #28]	; (8017750 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8017732:	6818      	ldr	r0, [r3, #0]
 8017734:	6803      	ldr	r3, [r0, #0]
 8017736:	4621      	mov	r1, r4
 8017738:	695b      	ldr	r3, [r3, #20]
 801773a:	4798      	blx	r3
 801773c:	e7eb      	b.n	8017716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801773e:	bf00      	nop
 8017740:	20001346 	.word	0x20001346
 8017744:	20001348 	.word	0x20001348
 8017748:	200013b0 	.word	0x200013b0
 801774c:	200013ac 	.word	0x200013ac
 8017750:	20001354 	.word	0x20001354

08017754 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8017754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017758:	4604      	mov	r4, r0
 801775a:	b09b      	sub	sp, #108	; 0x6c
 801775c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8017760:	b129      	cbz	r1, 801776e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8017762:	2300      	movs	r3, #0
 8017764:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017768:	b01b      	add	sp, #108	; 0x6c
 801776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801776e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8017772:	4630      	mov	r0, r6
 8017774:	f7fc ffa1 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017778:	4605      	mov	r5, r0
 801777a:	b940      	cbnz	r0, 801778e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801777c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017780:	4620      	mov	r0, r4
 8017782:	f7ff ff21 	bl	80175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017786:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801778a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801778e:	4b92      	ldr	r3, [pc, #584]	; (80179d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x284>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	b33b      	cbz	r3, 80177e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8017794:	4d91      	ldr	r5, [pc, #580]	; (80179dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x288>)
 8017796:	4628      	mov	r0, r5
 8017798:	f7fc ff8f 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801779c:	4606      	mov	r6, r0
 801779e:	bb08      	cbnz	r0, 80177e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80177a0:	4628      	mov	r0, r5
 80177a2:	f7ff fc89 	bl	80170b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80177a6:	6829      	ldr	r1, [r5, #0]
 80177a8:	686a      	ldr	r2, [r5, #4]
 80177aa:	4620      	mov	r0, r4
 80177ac:	f7ff ff0c 	bl	80175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80177b0:	802e      	strh	r6, [r5, #0]
 80177b2:	806e      	strh	r6, [r5, #2]
 80177b4:	80ae      	strh	r6, [r5, #4]
 80177b6:	80ee      	strh	r6, [r5, #6]
 80177b8:	4f89      	ldr	r7, [pc, #548]	; (80179e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x28c>)
 80177ba:	a809      	add	r0, sp, #36	; 0x24
 80177bc:	f7ff fe71 	bl	80174a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80177c0:	883d      	ldrh	r5, [r7, #0]
 80177c2:	462e      	mov	r6, r5
 80177c4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80177c8:	42b3      	cmp	r3, r6
 80177ca:	d910      	bls.n	80177ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80177cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80177d0:	a809      	add	r0, sp, #36	; 0x24
 80177d2:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80177d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80177da:	3601      	adds	r6, #1
 80177dc:	f7ff fed2 	bl	8017584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80177e0:	b2b6      	uxth	r6, r6
 80177e2:	e7ef      	b.n	80177c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80177e4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1e5      	bne.n	80177b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80177ec:	e7bc      	b.n	8017768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80177ee:	462e      	mov	r6, r5
 80177f0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80177f4:	42b3      	cmp	r3, r6
 80177f6:	d90b      	bls.n	8017810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80177f8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80177fc:	4620      	mov	r0, r4
 80177fe:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017802:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017806:	3601      	adds	r6, #1
 8017808:	f7ff fede 	bl	80175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801780c:	b2b6      	uxth	r6, r6
 801780e:	e7ef      	b.n	80177f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8017810:	4a74      	ldr	r2, [pc, #464]	; (80179e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x290>)
 8017812:	6813      	ldr	r3, [r2, #0]
 8017814:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017818:	2b01      	cmp	r3, #1
 801781a:	4690      	mov	r8, r2
 801781c:	f040 8094 	bne.w	8017948 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8017820:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017824:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8017828:	33aa      	adds	r3, #170	; 0xaa
 801782a:	f04f 0900 	mov.w	r9, #0
 801782e:	42a8      	cmp	r0, r5
 8017830:	f103 0308 	add.w	r3, r3, #8
 8017834:	dd0a      	ble.n	801784c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8017836:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801783a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801783e:	440a      	add	r2, r1
 8017840:	b212      	sxth	r2, r2
 8017842:	4591      	cmp	r9, r2
 8017844:	bfb8      	it	lt
 8017846:	4691      	movlt	r9, r2
 8017848:	3501      	adds	r5, #1
 801784a:	e7f0      	b.n	801782e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801784c:	4b66      	ldr	r3, [pc, #408]	; (80179e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x294>)
 801784e:	4e67      	ldr	r6, [pc, #412]	; (80179ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x298>)
 8017850:	881d      	ldrh	r5, [r3, #0]
 8017852:	2300      	movs	r3, #0
 8017854:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017858:	2d0f      	cmp	r5, #15
 801785a:	bf8c      	ite	hi
 801785c:	08ed      	lsrhi	r5, r5, #3
 801785e:	2501      	movls	r5, #1
 8017860:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017864:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8017868:	f8d8 0000 	ldr.w	r0, [r8]
 801786c:	440b      	add	r3, r1
 801786e:	b21b      	sxth	r3, r3
 8017870:	4599      	cmp	r9, r3
 8017872:	6802      	ldr	r2, [r0, #0]
 8017874:	dd4b      	ble.n	801790e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8017876:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801787a:	4798      	blx	r3
 801787c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017880:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017884:	4413      	add	r3, r2
 8017886:	b21b      	sxth	r3, r3
 8017888:	195a      	adds	r2, r3, r5
 801788a:	4290      	cmp	r0, r2
 801788c:	da07      	bge.n	801789e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801788e:	4581      	cmp	r9, r0
 8017890:	dd05      	ble.n	801789e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8017892:	4298      	cmp	r0, r3
 8017894:	da33      	bge.n	80178fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8017896:	2b00      	cmp	r3, #0
 8017898:	dd31      	ble.n	80178fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801789a:	4648      	mov	r0, r9
 801789c:	e004      	b.n	80178a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801789e:	4298      	cmp	r0, r3
 80178a0:	dbfb      	blt.n	801789a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80178a2:	4548      	cmp	r0, r9
 80178a4:	bfa8      	it	ge
 80178a6:	4648      	movge	r0, r9
 80178a8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80178ac:	f8b7 a000 	ldrh.w	sl, [r7]
 80178b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178b4:	2100      	movs	r1, #0
 80178b6:	1ac0      	subs	r0, r0, r3
 80178b8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80178bc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80178c0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80178c4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80178c8:	4553      	cmp	r3, sl
 80178ca:	d9c9      	bls.n	8017860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80178cc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80178d0:	ab07      	add	r3, sp, #28
 80178d2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80178d6:	6851      	ldr	r1, [r2, #4]
 80178d8:	c303      	stmia	r3!, {r0, r1}
 80178da:	a807      	add	r0, sp, #28
 80178dc:	a905      	add	r1, sp, #20
 80178de:	f7fc fea9 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 80178e2:	a807      	add	r0, sp, #28
 80178e4:	f7fc fee9 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80178e8:	b920      	cbnz	r0, 80178f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	a907      	add	r1, sp, #28
 80178ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f0:	4620      	mov	r0, r4
 80178f2:	4798      	blx	r3
 80178f4:	f10a 0a01 	add.w	sl, sl, #1
 80178f8:	fa1f fa8a 	uxth.w	sl, sl
 80178fc:	e7e2      	b.n	80178c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80178fe:	f8d8 0000 	ldr.w	r0, [r8]
 8017902:	6803      	ldr	r3, [r0, #0]
 8017904:	2101      	movs	r1, #1
 8017906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801790a:	4798      	blx	r3
 801790c:	e7a8      	b.n	8017860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801790e:	69d3      	ldr	r3, [r2, #28]
 8017910:	4798      	blx	r3
 8017912:	4b37      	ldr	r3, [pc, #220]	; (80179f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29c>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	f43f af26 	beq.w	8017768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801791c:	2300      	movs	r3, #0
 801791e:	883d      	ldrh	r5, [r7, #0]
 8017920:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8017924:	34ea      	adds	r4, #234	; 0xea
 8017926:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801792a:	42ab      	cmp	r3, r5
 801792c:	f67f af1c 	bls.w	8017768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017930:	ab1a      	add	r3, sp, #104	; 0x68
 8017932:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017936:	3b44      	subs	r3, #68	; 0x44
 8017938:	e893 0006 	ldmia.w	r3, {r1, r2}
 801793c:	4620      	mov	r0, r4
 801793e:	3501      	adds	r5, #1
 8017940:	f7ff fe20 	bl	8017584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017944:	b2ad      	uxth	r5, r5
 8017946:	e7ee      	b.n	8017926 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8017948:	2b02      	cmp	r3, #2
 801794a:	f040 813d 	bne.w	8017bc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801794e:	4b29      	ldr	r3, [pc, #164]	; (80179f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>)
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	2b01      	cmp	r3, #1
 8017954:	f000 809d 	beq.w	8017a92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 8017958:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801795c:	883a      	ldrh	r2, [r7, #0]
 801795e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8017962:	3201      	adds	r2, #1
 8017964:	b292      	uxth	r2, r2
 8017966:	2900      	cmp	r1, #0
 8017968:	d0d3      	beq.n	8017912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801796a:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801796e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8017972:	441d      	add	r5, r3
 8017974:	b22d      	sxth	r5, r5
 8017976:	4610      	mov	r0, r2
 8017978:	f04f 0a00 	mov.w	sl, #0
 801797c:	b283      	uxth	r3, r0
 801797e:	4299      	cmp	r1, r3
 8017980:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8017984:	f240 80c3 	bls.w	8017b0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ba>
 8017988:	4426      	add	r6, r4
 801798a:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801798e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8017992:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8017996:	4573      	cmp	r3, lr
 8017998:	4684      	mov	ip, r0
 801799a:	f340 80a5 	ble.w	8017ae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x394>
 801799e:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80179a2:	4475      	add	r5, lr
 80179a4:	b22d      	sxth	r5, r5
 80179a6:	429d      	cmp	r5, r3
 80179a8:	bfa8      	it	ge
 80179aa:	461d      	movge	r5, r3
 80179ac:	3001      	adds	r0, #1
 80179ae:	46e2      	mov	sl, ip
 80179b0:	e7e4      	b.n	801797c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80179b2:	d10b      	bne.n	80179cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x278>
 80179b4:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80179b8:	f9b9 10ae 	ldrsh.w	r1, [r9, #174]	; 0xae
 80179bc:	458c      	cmp	ip, r1
 80179be:	bfb4      	ite	lt
 80179c0:	469c      	movlt	ip, r3
 80179c2:	46b4      	movge	ip, r6
 80179c4:	4572      	cmp	r2, lr
 80179c6:	bfb8      	it	lt
 80179c8:	4672      	movlt	r2, lr
 80179ca:	e08a      	b.n	8017ae2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 80179cc:	428a      	cmp	r2, r1
 80179ce:	bfb8      	it	lt
 80179d0:	460a      	movlt	r2, r1
 80179d2:	46b4      	mov	ip, r6
 80179d4:	e085      	b.n	8017ae2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 80179d6:	bf00      	nop
 80179d8:	200013ac 	.word	0x200013ac
 80179dc:	200013b8 	.word	0x200013b8
 80179e0:	20000034 	.word	0x20000034
 80179e4:	20001354 	.word	0x20001354
 80179e8:	20001348 	.word	0x20001348
 80179ec:	20001346 	.word	0x20001346
 80179f0:	20001350 	.word	0x20001350
 80179f4:	2000134a 	.word	0x2000134a
 80179f8:	1961      	adds	r1, r4, r5
 80179fa:	ab05      	add	r3, sp, #20
 80179fc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8017a00:	6849      	ldr	r1, [r1, #4]
 8017a02:	c303      	stmia	r3!, {r0, r1}
 8017a04:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017a08:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017a0c:	2b13      	cmp	r3, #19
 8017a0e:	bfd8      	it	le
 8017a10:	f9bd 2014 	ldrshle.w	r2, [sp, #20]
 8017a14:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a18:	440b      	add	r3, r1
 8017a1a:	1a9b      	subs	r3, r3, r2
 8017a1c:	a805      	add	r0, sp, #20
 8017a1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017a22:	f7ff fba3 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a26:	a805      	add	r0, sp, #20
 8017a28:	f7fc fe47 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a2c:	bb88      	cbnz	r0, 8017a92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 8017a2e:	f9bd c01a 	ldrsh.w	ip, [sp, #26]
 8017a32:	f8d8 0000 	ldr.w	r0, [r8]
 8017a36:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017a3a:	f8d0 e000 	ldr.w	lr, [r0]
 8017a3e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017a42:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017a46:	f1bc 0f14 	cmp.w	ip, #20
 8017a4a:	bfa8      	it	ge
 8017a4c:	f04f 0c14 	movge.w	ip, #20
 8017a50:	fa1f fc8c 	uxth.w	ip, ip
 8017a54:	f8cd c000 	str.w	ip, [sp]
 8017a58:	f8de 9078 	ldr.w	r9, [lr, #120]	; 0x78
 8017a5c:	47c8      	blx	r9
 8017a5e:	4681      	mov	r9, r0
 8017a60:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017a64:	a805      	add	r0, sp, #20
 8017a66:	f7ff fb27 	bl	80170b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	4425      	add	r5, r4
 8017a6e:	4620      	mov	r0, r4
 8017a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a72:	a905      	add	r1, sp, #20
 8017a74:	4798      	blx	r3
 8017a76:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017a7a:	eba0 0009 	sub.w	r0, r0, r9
 8017a7e:	b200      	sxth	r0, r0
 8017a80:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017a84:	b928      	cbnz	r0, 8017a92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 8017a86:	b2b2      	uxth	r2, r6
 8017a88:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 8017a8c:	a807      	add	r0, sp, #28
 8017a8e:	f7ff fd5b 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a92:	f8b4 a0e8 	ldrh.w	sl, [r4, #232]	; 0xe8
 8017a96:	f1ba 0f00 	cmp.w	sl, #0
 8017a9a:	f43f af3a 	beq.w	8017912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017a9e:	883b      	ldrh	r3, [r7, #0]
 8017aa0:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	2600      	movs	r6, #0
 8017aaa:	b299      	uxth	r1, r3
 8017aac:	458a      	cmp	sl, r1
 8017aae:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 8017ab2:	d9a1      	bls.n	80179f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a4>
 8017ab4:	4425      	add	r5, r4
 8017ab6:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 8017aba:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8017abe:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8017ac2:	f9b9 e0a8 	ldrsh.w	lr, [r9, #168]	; 0xa8
 8017ac6:	4408      	add	r0, r1
 8017ac8:	f8b9 10ac 	ldrh.w	r1, [r9, #172]	; 0xac
 8017acc:	4471      	add	r1, lr
 8017ace:	b200      	sxth	r0, r0
 8017ad0:	b209      	sxth	r1, r1
 8017ad2:	4288      	cmp	r0, r1
 8017ad4:	469c      	mov	ip, r3
 8017ad6:	f6bf af6c 	bge.w	80179b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8017ada:	4586      	cmp	lr, r0
 8017adc:	4672      	mov	r2, lr
 8017ade:	bfb8      	it	lt
 8017ae0:	4602      	movlt	r2, r0
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	4666      	mov	r6, ip
 8017ae6:	e7e0      	b.n	8017aaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x356>
 8017ae8:	d10c      	bne.n	8017b04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b0>
 8017aea:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8017aee:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8017af2:	45b4      	cmp	ip, r6
 8017af4:	bfb4      	ite	lt
 8017af6:	4684      	movlt	ip, r0
 8017af8:	46d4      	movge	ip, sl
 8017afa:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8017afe:	4433      	add	r3, r6
 8017b00:	b21b      	sxth	r3, r3
 8017b02:	e750      	b.n	80179a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x252>
 8017b04:	4575      	cmp	r5, lr
 8017b06:	bfa8      	it	ge
 8017b08:	4675      	movge	r5, lr
 8017b0a:	46d4      	mov	ip, sl
 8017b0c:	e74e      	b.n	80179ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x258>
 8017b0e:	eb0b 0006 	add.w	r0, fp, r6
 8017b12:	4426      	add	r6, r4
 8017b14:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017b18:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8017b1c:	f1b9 0f13 	cmp.w	r9, #19
 8017b20:	bfde      	ittt	le
 8017b22:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8017b26:	444d      	addle	r5, r9
 8017b28:	b22d      	sxthle	r5, r5
 8017b2a:	f7fc fdc6 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b2e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017b32:	2800      	cmp	r0, #0
 8017b34:	f47f af17 	bne.w	8017966 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x212>
 8017b38:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8017b3c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017b40:	eba5 050c 	sub.w	r5, r5, ip
 8017b44:	fa1f f28c 	uxth.w	r2, ip
 8017b48:	fa1f f989 	uxth.w	r9, r9
 8017b4c:	eb02 0009 	add.w	r0, r2, r9
 8017b50:	2d14      	cmp	r5, #20
 8017b52:	bfa8      	it	ge
 8017b54:	2514      	movge	r5, #20
 8017b56:	b200      	sxth	r0, r0
 8017b58:	fa1f fe85 	uxth.w	lr, r5
 8017b5c:	eba0 000c 	sub.w	r0, r0, ip
 8017b60:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8017b64:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8017b68:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017b6c:	4586      	cmp	lr, r0
 8017b6e:	f8d8 0000 	ldr.w	r0, [r8]
 8017b72:	f8ad c016 	strh.w	ip, [sp, #22]
 8017b76:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017b7a:	bfb8      	it	lt
 8017b7c:	46f1      	movlt	r9, lr
 8017b7e:	6805      	ldr	r5, [r0, #0]
 8017b80:	f8cd 9000 	str.w	r9, [sp]
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	b289      	uxth	r1, r1
 8017b88:	6fad      	ldr	r5, [r5, #120]	; 0x78
 8017b8a:	47a8      	blx	r5
 8017b8c:	6823      	ldr	r3, [r4, #0]
 8017b8e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b94:	a905      	add	r1, sp, #20
 8017b96:	4620      	mov	r0, r4
 8017b98:	4798      	blx	r3
 8017b9a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8017b9e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8017ba2:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8017ba6:	1a5b      	subs	r3, r3, r1
 8017ba8:	440a      	add	r2, r1
 8017baa:	b21b      	sxth	r3, r3
 8017bac:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8017bb0:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	f47f aed1 	bne.w	801795c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 8017bba:	fa1f f28a 	uxth.w	r2, sl
 8017bbe:	4659      	mov	r1, fp
 8017bc0:	a807      	add	r0, sp, #28
 8017bc2:	f7ff fcc1 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017bc6:	e6c9      	b.n	801795c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 8017bc8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017bcc:	42ab      	cmp	r3, r5
 8017bce:	f67f aea0 	bls.w	8017912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017bd2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017bd6:	ab07      	add	r3, sp, #28
 8017bd8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017bdc:	6851      	ldr	r1, [r2, #4]
 8017bde:	c303      	stmia	r3!, {r0, r1}
 8017be0:	a807      	add	r0, sp, #28
 8017be2:	f7fc fd6a 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8017be6:	b920      	cbnz	r0, 8017bf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8017be8:	6823      	ldr	r3, [r4, #0]
 8017bea:	a907      	add	r1, sp, #28
 8017bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bee:	4620      	mov	r0, r4
 8017bf0:	4798      	blx	r3
 8017bf2:	3501      	adds	r5, #1
 8017bf4:	b2ad      	uxth	r5, r5
 8017bf6:	e7e7      	b.n	8017bc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08017bf8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017bf8:	4b03      	ldr	r3, [pc, #12]	; (8017c08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	801a      	strh	r2, [r3, #0]
 8017bfe:	805a      	strh	r2, [r3, #2]
 8017c00:	809a      	strh	r2, [r3, #4]
 8017c02:	80da      	strh	r2, [r3, #6]
 8017c04:	4770      	bx	lr
 8017c06:	bf00      	nop
 8017c08:	200013b8 	.word	0x200013b8

08017c0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c10:	4607      	mov	r7, r0
 8017c12:	b099      	sub	sp, #100	; 0x64
 8017c14:	a802      	add	r0, sp, #8
 8017c16:	4614      	mov	r4, r2
 8017c18:	461d      	mov	r5, r3
 8017c1a:	468a      	mov	sl, r1
 8017c1c:	f000 fde9 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	4638      	mov	r0, r7
 8017c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c26:	4798      	blx	r3
 8017c28:	462a      	mov	r2, r5
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	4621      	mov	r1, r4
 8017c2e:	a802      	add	r0, sp, #8
 8017c30:	f000 fe24 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017c34:	2500      	movs	r5, #0
 8017c36:	462c      	mov	r4, r5
 8017c38:	46a9      	mov	r9, r5
 8017c3a:	46a8      	mov	r8, r5
 8017c3c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017c40:	2300      	movs	r3, #0
 8017c42:	9301      	str	r3, [sp, #4]
 8017c44:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017c48:	429c      	cmp	r4, r3
 8017c4a:	d002      	beq.n	8017c52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8017c4c:	455c      	cmp	r4, fp
 8017c4e:	bf18      	it	ne
 8017c50:	4625      	movne	r5, r4
 8017c52:	ab01      	add	r3, sp, #4
 8017c54:	463a      	mov	r2, r7
 8017c56:	4651      	mov	r1, sl
 8017c58:	a802      	add	r0, sp, #8
 8017c5a:	f001 f909 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c5e:	4604      	mov	r4, r0
 8017c60:	b108      	cbz	r0, 8017c66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8017c62:	280a      	cmp	r0, #10
 8017c64:	d10a      	bne.n	8017c7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8017c66:	45c1      	cmp	r9, r8
 8017c68:	bf38      	it	cc
 8017c6a:	46c1      	movcc	r9, r8
 8017c6c:	f04f 0800 	mov.w	r8, #0
 8017c70:	2c00      	cmp	r4, #0
 8017c72:	d1e5      	bne.n	8017c40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8017c74:	4648      	mov	r0, r9
 8017c76:	b019      	add	sp, #100	; 0x64
 8017c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c7c:	9a01      	ldr	r2, [sp, #4]
 8017c7e:	2a00      	cmp	r2, #0
 8017c80:	d0de      	beq.n	8017c40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8017c82:	7b56      	ldrb	r6, [r2, #13]
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	8894      	ldrh	r4, [r2, #4]
 8017c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c8a:	0076      	lsls	r6, r6, #1
 8017c8c:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8017c90:	7a96      	ldrb	r6, [r2, #10]
 8017c92:	4629      	mov	r1, r5
 8017c94:	4306      	orrs	r6, r0
 8017c96:	4638      	mov	r0, r7
 8017c98:	4798      	blx	r3
 8017c9a:	4430      	add	r0, r6
 8017c9c:	4480      	add	r8, r0
 8017c9e:	fa1f f888 	uxth.w	r8, r8
 8017ca2:	e7e5      	b.n	8017c70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08017ca4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017ca4:	b508      	push	{r3, lr}
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	68db      	ldr	r3, [r3, #12]
 8017caa:	4798      	blx	r3
 8017cac:	b128      	cbz	r0, 8017cba <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017cae:	7b43      	ldrb	r3, [r0, #13]
 8017cb0:	7a80      	ldrb	r0, [r0, #10]
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cb8:	4318      	orrs	r0, r3
 8017cba:	bd08      	pop	{r3, pc}

08017cbc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017cbc:	b40e      	push	{r1, r2, r3}
 8017cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cc0:	b098      	sub	sp, #96	; 0x60
 8017cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	f853 4b04 	ldr.w	r4, [r3], #4
 8017cca:	9300      	str	r3, [sp, #0]
 8017ccc:	a802      	add	r0, sp, #8
 8017cce:	f000 fd90 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8017cd2:	682b      	ldr	r3, [r5, #0]
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd8:	4798      	blx	r3
 8017cda:	ae18      	add	r6, sp, #96	; 0x60
 8017cdc:	4603      	mov	r3, r0
 8017cde:	4621      	mov	r1, r4
 8017ce0:	9a00      	ldr	r2, [sp, #0]
 8017ce2:	2400      	movs	r4, #0
 8017ce4:	a802      	add	r0, sp, #8
 8017ce6:	f000 fdc9 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017cea:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8017cee:	462a      	mov	r2, r5
 8017cf0:	4633      	mov	r3, r6
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	a802      	add	r0, sp, #8
 8017cf6:	f001 f8bb 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cfa:	b1f0      	cbz	r0, 8017d3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8017cfc:	280a      	cmp	r0, #10
 8017cfe:	d018      	beq.n	8017d32 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017d00:	9f01      	ldr	r7, [sp, #4]
 8017d02:	b1b7      	cbz	r7, 8017d32 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017d04:	7b78      	ldrb	r0, [r7, #13]
 8017d06:	7a3b      	ldrb	r3, [r7, #8]
 8017d08:	88aa      	ldrh	r2, [r5, #4]
 8017d0a:	00c1      	lsls	r1, r0, #3
 8017d0c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017d10:	4319      	orrs	r1, r3
 8017d12:	0643      	lsls	r3, r0, #25
 8017d14:	bf44      	itt	mi
 8017d16:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017d1a:	b219      	sxthmi	r1, r3
 8017d1c:	0100      	lsls	r0, r0, #4
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d24:	4303      	orrs	r3, r0
 8017d26:	4413      	add	r3, r2
 8017d28:	1a5b      	subs	r3, r3, r1
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	42a3      	cmp	r3, r4
 8017d2e:	bfc8      	it	gt
 8017d30:	b21c      	sxthgt	r4, r3
 8017d32:	4633      	mov	r3, r6
 8017d34:	462a      	mov	r2, r5
 8017d36:	2100      	movs	r1, #0
 8017d38:	e7dc      	b.n	8017cf4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8017d3a:	b2a0      	uxth	r0, r4
 8017d3c:	b018      	add	sp, #96	; 0x60
 8017d3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d42:	b003      	add	sp, #12
 8017d44:	4770      	bx	lr

08017d46 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017d46:	b40e      	push	{r1, r2, r3}
 8017d48:	b530      	push	{r4, r5, lr}
 8017d4a:	b098      	sub	sp, #96	; 0x60
 8017d4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8017d4e:	4604      	mov	r4, r0
 8017d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d54:	9301      	str	r3, [sp, #4]
 8017d56:	a802      	add	r0, sp, #8
 8017d58:	f000 fd4b 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8017d5c:	6823      	ldr	r3, [r4, #0]
 8017d5e:	4620      	mov	r0, r4
 8017d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d62:	4798      	blx	r3
 8017d64:	9a01      	ldr	r2, [sp, #4]
 8017d66:	4603      	mov	r3, r0
 8017d68:	4629      	mov	r1, r5
 8017d6a:	a802      	add	r0, sp, #8
 8017d6c:	f000 fd86 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017d70:	a802      	add	r0, sp, #8
 8017d72:	f001 f975 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017d76:	2401      	movs	r4, #1
 8017d78:	b2a3      	uxth	r3, r4
 8017d7a:	b140      	cbz	r0, 8017d8e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8017d7c:	280a      	cmp	r0, #10
 8017d7e:	bf08      	it	eq
 8017d80:	3301      	addeq	r3, #1
 8017d82:	a802      	add	r0, sp, #8
 8017d84:	bf08      	it	eq
 8017d86:	b21c      	sxtheq	r4, r3
 8017d88:	f001 f96a 	bl	8019060 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017d8c:	e7f4      	b.n	8017d78 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8017d8e:	4618      	mov	r0, r3
 8017d90:	b018      	add	sp, #96	; 0x60
 8017d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d96:	b003      	add	sp, #12
 8017d98:	4770      	bx	lr

08017d9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017d9a:	b40e      	push	{r1, r2, r3}
 8017d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d9e:	b098      	sub	sp, #96	; 0x60
 8017da0:	ab1d      	add	r3, sp, #116	; 0x74
 8017da2:	4604      	mov	r4, r0
 8017da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8017da8:	9300      	str	r3, [sp, #0]
 8017daa:	a802      	add	r0, sp, #8
 8017dac:	f000 fd21 	bl	80187f2 <_ZN8touchgfx12TextProviderC1Ev>
 8017db0:	6823      	ldr	r3, [r4, #0]
 8017db2:	4620      	mov	r0, r4
 8017db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017db6:	4798      	blx	r3
 8017db8:	4629      	mov	r1, r5
 8017dba:	4603      	mov	r3, r0
 8017dbc:	9a00      	ldr	r2, [sp, #0]
 8017dbe:	a802      	add	r0, sp, #8
 8017dc0:	ad18      	add	r5, sp, #96	; 0x60
 8017dc2:	f000 fd5b 	bl	801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017dc6:	2100      	movs	r1, #0
 8017dc8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8017dcc:	4622      	mov	r2, r4
 8017dce:	462b      	mov	r3, r5
 8017dd0:	a802      	add	r0, sp, #8
 8017dd2:	f001 f84d 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017dd6:	26ff      	movs	r6, #255	; 0xff
 8017dd8:	b1d8      	cbz	r0, 8017e12 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017dda:	280a      	cmp	r0, #10
 8017ddc:	d012      	beq.n	8017e04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8017dde:	9801      	ldr	r0, [sp, #4]
 8017de0:	b180      	cbz	r0, 8017e04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8017de2:	7b47      	ldrb	r7, [r0, #13]
 8017de4:	7922      	ldrb	r2, [r4, #4]
 8017de6:	00fb      	lsls	r3, r7, #3
 8017de8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017dec:	7a03      	ldrb	r3, [r0, #8]
 8017dee:	430b      	orrs	r3, r1
 8017df0:	0679      	lsls	r1, r7, #25
 8017df2:	bf44      	itt	mi
 8017df4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017df8:	b21b      	sxthmi	r3, r3
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	429e      	cmp	r6, r3
 8017e00:	bf28      	it	cs
 8017e02:	461e      	movcs	r6, r3
 8017e04:	462b      	mov	r3, r5
 8017e06:	4622      	mov	r2, r4
 8017e08:	2100      	movs	r1, #0
 8017e0a:	a802      	add	r0, sp, #8
 8017e0c:	f001 f830 	bl	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e10:	e7e2      	b.n	8017dd8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8017e12:	4630      	mov	r0, r6
 8017e14:	b018      	add	sp, #96	; 0x60
 8017e16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e1a:	b003      	add	sp, #12
 8017e1c:	4770      	bx	lr

08017e1e <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017e1e:	b513      	push	{r0, r1, r4, lr}
 8017e20:	1d01      	adds	r1, r0, #4
 8017e22:	4603      	mov	r3, r0
 8017e24:	c903      	ldmia	r1, {r0, r1}
 8017e26:	466a      	mov	r2, sp
 8017e28:	e882 0003 	stmia.w	r2, {r0, r1}
 8017e2c:	2100      	movs	r1, #0
 8017e2e:	9100      	str	r1, [sp, #0]
 8017e30:	6819      	ldr	r1, [r3, #0]
 8017e32:	4618      	mov	r0, r3
 8017e34:	690c      	ldr	r4, [r1, #16]
 8017e36:	4611      	mov	r1, r2
 8017e38:	47a0      	blx	r4
 8017e3a:	b002      	add	sp, #8
 8017e3c:	bd10      	pop	{r4, pc}

08017e3e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017e3e:	b538      	push	{r3, r4, r5, lr}
 8017e40:	680b      	ldr	r3, [r1, #0]
 8017e42:	460c      	mov	r4, r1
 8017e44:	68db      	ldr	r3, [r3, #12]
 8017e46:	4605      	mov	r5, r0
 8017e48:	4798      	blx	r3
 8017e4a:	6823      	ldr	r3, [r4, #0]
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e50:	4629      	mov	r1, r5
 8017e52:	4798      	blx	r3
 8017e54:	4628      	mov	r0, r5
 8017e56:	bd38      	pop	{r3, r4, r5, pc}

08017e58 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017e58:	b410      	push	{r4}
 8017e5a:	880a      	ldrh	r2, [r1, #0]
 8017e5c:	8884      	ldrh	r4, [r0, #4]
 8017e5e:	4422      	add	r2, r4
 8017e60:	800a      	strh	r2, [r1, #0]
 8017e62:	88c4      	ldrh	r4, [r0, #6]
 8017e64:	884a      	ldrh	r2, [r1, #2]
 8017e66:	4422      	add	r2, r4
 8017e68:	804a      	strh	r2, [r1, #2]
 8017e6a:	6940      	ldr	r0, [r0, #20]
 8017e6c:	b120      	cbz	r0, 8017e78 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017e6e:	6803      	ldr	r3, [r0, #0]
 8017e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e76:	4718      	bx	r3
 8017e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e7c:	4770      	bx	lr

08017e7e <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e80:	460b      	mov	r3, r1
 8017e82:	b085      	sub	sp, #20
 8017e84:	4604      	mov	r4, r0
 8017e86:	b901      	cbnz	r1, 8017e8a <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017e88:	b1fa      	cbz	r2, 8017eca <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8017e8a:	1d27      	adds	r7, r4, #4
 8017e8c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017e90:	466e      	mov	r6, sp
 8017e92:	e886 0003 	stmia.w	r6, {r0, r1}
 8017e96:	88e1      	ldrh	r1, [r4, #6]
 8017e98:	440a      	add	r2, r1
 8017e9a:	88a1      	ldrh	r1, [r4, #4]
 8017e9c:	4419      	add	r1, r3
 8017e9e:	6823      	ldr	r3, [r4, #0]
 8017ea0:	b209      	sxth	r1, r1
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ea6:	b212      	sxth	r2, r2
 8017ea8:	4798      	blx	r3
 8017eaa:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017eae:	ad02      	add	r5, sp, #8
 8017eb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8017eb4:	6960      	ldr	r0, [r4, #20]
 8017eb6:	b150      	cbz	r0, 8017ece <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8017eb8:	6803      	ldr	r3, [r0, #0]
 8017eba:	4631      	mov	r1, r6
 8017ebc:	691b      	ldr	r3, [r3, #16]
 8017ebe:	4798      	blx	r3
 8017ec0:	6960      	ldr	r0, [r4, #20]
 8017ec2:	6803      	ldr	r3, [r0, #0]
 8017ec4:	691b      	ldr	r3, [r3, #16]
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	4798      	blx	r3
 8017eca:	b005      	add	sp, #20
 8017ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ece:	f7ff fad7 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8017ed2:	6803      	ldr	r3, [r0, #0]
 8017ed4:	4631      	mov	r1, r6
 8017ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ed8:	4798      	blx	r3
 8017eda:	f7ff fad1 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8017ede:	6803      	ldr	r3, [r0, #0]
 8017ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ee2:	e7f0      	b.n	8017ec6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08017ee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ee6:	8882      	ldrh	r2, [r0, #4]
 8017ee8:	880b      	ldrh	r3, [r1, #0]
 8017eea:	4413      	add	r3, r2
 8017eec:	800b      	strh	r3, [r1, #0]
 8017eee:	88c2      	ldrh	r2, [r0, #6]
 8017ef0:	884b      	ldrh	r3, [r1, #2]
 8017ef2:	4413      	add	r3, r2
 8017ef4:	4602      	mov	r2, r0
 8017ef6:	804b      	strh	r3, [r1, #2]
 8017ef8:	4605      	mov	r5, r0
 8017efa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017efe:	460c      	mov	r4, r1
 8017f00:	6851      	ldr	r1, [r2, #4]
 8017f02:	466b      	mov	r3, sp
 8017f04:	c303      	stmia	r3!, {r0, r1}
 8017f06:	4621      	mov	r1, r4
 8017f08:	4668      	mov	r0, sp
 8017f0a:	f7fc fb93 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 8017f0e:	466b      	mov	r3, sp
 8017f10:	cb03      	ldmia	r3!, {r0, r1}
 8017f12:	6020      	str	r0, [r4, #0]
 8017f14:	6061      	str	r1, [r4, #4]
 8017f16:	6968      	ldr	r0, [r5, #20]
 8017f18:	b128      	cbz	r0, 8017f26 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017f1a:	6803      	ldr	r3, [r0, #0]
 8017f1c:	691b      	ldr	r3, [r3, #16]
 8017f1e:	4621      	mov	r1, r4
 8017f20:	4798      	blx	r3
 8017f22:	b003      	add	sp, #12
 8017f24:	bd30      	pop	{r4, r5, pc}
 8017f26:	f7ff faab 	bl	8017480 <_ZN8touchgfx11Application11getInstanceEv>
 8017f2a:	6803      	ldr	r3, [r0, #0]
 8017f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f2e:	e7f6      	b.n	8017f1e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017f30 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	8882      	ldrh	r2, [r0, #4]
 8017f34:	880b      	ldrh	r3, [r1, #0]
 8017f36:	4413      	add	r3, r2
 8017f38:	800b      	strh	r3, [r1, #0]
 8017f3a:	88c2      	ldrh	r2, [r0, #6]
 8017f3c:	884b      	ldrh	r3, [r1, #2]
 8017f3e:	460c      	mov	r4, r1
 8017f40:	4413      	add	r3, r2
 8017f42:	804b      	strh	r3, [r1, #2]
 8017f44:	4605      	mov	r5, r0
 8017f46:	1d01      	adds	r1, r0, #4
 8017f48:	4620      	mov	r0, r4
 8017f4a:	f7fc fb73 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 8017f4e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	dd0b      	ble.n	8017f6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f56:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	dd07      	ble.n	8017f6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f5e:	6968      	ldr	r0, [r5, #20]
 8017f60:	b128      	cbz	r0, 8017f6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f62:	6803      	ldr	r3, [r0, #0]
 8017f64:	4621      	mov	r1, r4
 8017f66:	6a1b      	ldr	r3, [r3, #32]
 8017f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f6c:	4718      	bx	r3
 8017f6e:	bd70      	pop	{r4, r5, r6, pc}

08017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017f70:	b510      	push	{r4, lr}
 8017f72:	4604      	mov	r4, r0
 8017f74:	4608      	mov	r0, r1
 8017f76:	2300      	movs	r3, #0
 8017f78:	8023      	strh	r3, [r4, #0]
 8017f7a:	8063      	strh	r3, [r4, #2]
 8017f7c:	6803      	ldr	r3, [r0, #0]
 8017f7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017f82:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017f86:	80a1      	strh	r1, [r4, #4]
 8017f88:	80e2      	strh	r2, [r4, #6]
 8017f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	4798      	blx	r3
 8017f90:	4620      	mov	r0, r4
 8017f92:	bd10      	pop	{r4, pc}

08017f94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017f94:	b530      	push	{r4, r5, lr}
 8017f96:	8083      	strh	r3, [r0, #4]
 8017f98:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017f9c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017fa0:	7183      	strb	r3, [r0, #6]
 8017fa2:	79c3      	ldrb	r3, [r0, #7]
 8017fa4:	6101      	str	r1, [r0, #16]
 8017fa6:	f365 0306 	bfi	r3, r5, #0, #7
 8017faa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017fae:	8282      	strh	r2, [r0, #20]
 8017fb0:	f365 13c7 	bfi	r3, r5, #7, #1
 8017fb4:	71c3      	strb	r3, [r0, #7]
 8017fb6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017fba:	7203      	strb	r3, [r0, #8]
 8017fbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017fc0:	7243      	strb	r3, [r0, #9]
 8017fc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017fc6:	8143      	strh	r3, [r0, #10]
 8017fc8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017fcc:	8183      	strh	r3, [r0, #12]
 8017fce:	4b01      	ldr	r3, [pc, #4]	; (8017fd4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017fd0:	6003      	str	r3, [r0, #0]
 8017fd2:	bd30      	pop	{r4, r5, pc}
 8017fd4:	08053880 	.word	0x08053880

08017fd8 <_ZNK8touchgfx9ConstFont4findEt>:
 8017fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fda:	6904      	ldr	r4, [r0, #16]
 8017fdc:	8a82      	ldrh	r2, [r0, #20]
 8017fde:	88a3      	ldrh	r3, [r4, #4]
 8017fe0:	1acb      	subs	r3, r1, r3
 8017fe2:	f102 32ff 	add.w	r2, r2, #4294967295
 8017fe6:	d431      	bmi.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	dd0c      	ble.n	8018006 <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 8017fec:	230e      	movs	r3, #14
 8017fee:	fb03 4302 	mla	r3, r3, r2, r4
 8017ff2:	889b      	ldrh	r3, [r3, #4]
 8017ff4:	1a5b      	subs	r3, r3, r1
 8017ff6:	1ad3      	subs	r3, r2, r3
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	db27      	blt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	bfbc      	itt	lt
 8018000:	2302      	movlt	r3, #2
 8018002:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018006:	2500      	movs	r5, #0
 8018008:	260e      	movs	r6, #14
 801800a:	4295      	cmp	r5, r2
 801800c:	dc1e      	bgt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801800e:	fb06 4003 	mla	r0, r6, r3, r4
 8018012:	8887      	ldrh	r7, [r0, #4]
 8018014:	42b9      	cmp	r1, r7
 8018016:	d01a      	beq.n	801804e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018018:	d20d      	bcs.n	8018036 <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 801801a:	1e5a      	subs	r2, r3, #1
 801801c:	4295      	cmp	r5, r2
 801801e:	dc15      	bgt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018020:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018024:	1a5b      	subs	r3, r3, r1
 8018026:	1ad3      	subs	r3, r2, r3
 8018028:	429a      	cmp	r2, r3
 801802a:	db0f      	blt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801802c:	429d      	cmp	r5, r3
 801802e:	ddec      	ble.n	801800a <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8018030:	1953      	adds	r3, r2, r5
 8018032:	105b      	asrs	r3, r3, #1
 8018034:	e7e9      	b.n	801800a <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8018036:	1c5d      	adds	r5, r3, #1
 8018038:	42aa      	cmp	r2, r5
 801803a:	db07      	blt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801803c:	8a43      	ldrh	r3, [r0, #18]
 801803e:	1acb      	subs	r3, r1, r3
 8018040:	442b      	add	r3, r5
 8018042:	429d      	cmp	r5, r3
 8018044:	dc02      	bgt.n	801804c <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018046:	429a      	cmp	r2, r3
 8018048:	dadf      	bge.n	801800a <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801804a:	e7f1      	b.n	8018030 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 801804c:	2000      	movs	r0, #0
 801804e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018050 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018052:	4604      	mov	r4, r0
 8018054:	4617      	mov	r7, r2
 8018056:	461e      	mov	r6, r3
 8018058:	b911      	cbnz	r1, 8018060 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801805a:	2500      	movs	r5, #0
 801805c:	4628      	mov	r0, r5
 801805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018060:	290a      	cmp	r1, #10
 8018062:	d0fa      	beq.n	801805a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018064:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018068:	4291      	cmp	r1, r2
 801806a:	d0f6      	beq.n	801805a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801806c:	f242 020b 	movw	r2, #8203	; 0x200b
 8018070:	4291      	cmp	r1, r2
 8018072:	d0f2      	beq.n	801805a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018074:	f7ff ffb0 	bl	8017fd8 <_ZNK8touchgfx9ConstFont4findEt>
 8018078:	4605      	mov	r5, r0
 801807a:	b950      	cbnz	r0, 8018092 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	4620      	mov	r0, r4
 8018080:	691b      	ldr	r3, [r3, #16]
 8018082:	4798      	blx	r3
 8018084:	4601      	mov	r1, r0
 8018086:	4620      	mov	r0, r4
 8018088:	f7ff ffa6 	bl	8017fd8 <_ZNK8touchgfx9ConstFont4findEt>
 801808c:	4605      	mov	r5, r0
 801808e:	2800      	cmp	r0, #0
 8018090:	d0e3      	beq.n	801805a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018092:	6823      	ldr	r3, [r4, #0]
 8018094:	4629      	mov	r1, r5
 8018096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018098:	4620      	mov	r0, r4
 801809a:	4798      	blx	r3
 801809c:	6038      	str	r0, [r7, #0]
 801809e:	6823      	ldr	r3, [r4, #0]
 80180a0:	4620      	mov	r0, r4
 80180a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180a4:	4798      	blx	r3
 80180a6:	7030      	strb	r0, [r6, #0]
 80180a8:	e7d8      	b.n	801805c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080180aa <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80180aa:	2000      	movs	r0, #0
 80180ac:	4770      	bx	lr

080180ae <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80180ae:	2001      	movs	r0, #1
 80180b0:	4770      	bx	lr

080180b2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80180b2:	2002      	movs	r0, #2
 80180b4:	4770      	bx	lr

080180b6 <_ZN8touchgfx12GestureEventD1Ev>:
 80180b6:	4770      	bx	lr

080180b8 <_ZN8touchgfx9DragEventD1Ev>:
 80180b8:	4770      	bx	lr

080180ba <_ZN8touchgfx10ClickEventD1Ev>:
 80180ba:	4770      	bx	lr

080180bc <_ZN8touchgfx10ClickEventD0Ev>:
 80180bc:	b510      	push	{r4, lr}
 80180be:	210c      	movs	r1, #12
 80180c0:	4604      	mov	r4, r0
 80180c2:	f00c fe53 	bl	8024d6c <_ZdlPvj>
 80180c6:	4620      	mov	r0, r4
 80180c8:	bd10      	pop	{r4, pc}

080180ca <_ZN8touchgfx9DragEventD0Ev>:
 80180ca:	b510      	push	{r4, lr}
 80180cc:	2110      	movs	r1, #16
 80180ce:	4604      	mov	r4, r0
 80180d0:	f00c fe4c 	bl	8024d6c <_ZdlPvj>
 80180d4:	4620      	mov	r0, r4
 80180d6:	bd10      	pop	{r4, pc}

080180d8 <_ZN8touchgfx12GestureEventD0Ev>:
 80180d8:	b510      	push	{r4, lr}
 80180da:	210c      	movs	r1, #12
 80180dc:	4604      	mov	r4, r0
 80180de:	f00c fe45 	bl	8024d6c <_ZdlPvj>
 80180e2:	4620      	mov	r0, r4
 80180e4:	bd10      	pop	{r4, pc}
	...

080180e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80180e8:	b530      	push	{r4, r5, lr}
 80180ea:	460d      	mov	r5, r1
 80180ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80180ee:	b087      	sub	sp, #28
 80180f0:	4604      	mov	r4, r0
 80180f2:	b301      	cbz	r1, 8018136 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80180f4:	a801      	add	r0, sp, #4
 80180f6:	f7ff ff3b 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180fa:	892a      	ldrh	r2, [r5, #8]
 80180fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018100:	7928      	ldrb	r0, [r5, #4]
 8018102:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018106:	f88d 0010 	strb.w	r0, [sp, #16]
 801810a:	1ad2      	subs	r2, r2, r3
 801810c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801810e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018110:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018114:	441a      	add	r2, r3
 8018116:	896b      	ldrh	r3, [r5, #10]
 8018118:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801811c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018120:	1b5b      	subs	r3, r3, r5
 8018122:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018124:	442b      	add	r3, r5
 8018126:	4d05      	ldr	r5, [pc, #20]	; (801813c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018128:	9503      	str	r5, [sp, #12]
 801812a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801812e:	6803      	ldr	r3, [r0, #0]
 8018130:	a903      	add	r1, sp, #12
 8018132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018134:	4798      	blx	r3
 8018136:	b007      	add	sp, #28
 8018138:	bd30      	pop	{r4, r5, pc}
 801813a:	bf00      	nop
 801813c:	080538fc 	.word	0x080538fc

08018140 <_ZNK8touchgfx4Rect9intersectEss>:
 8018140:	b510      	push	{r4, lr}
 8018142:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018146:	428b      	cmp	r3, r1
 8018148:	dc10      	bgt.n	801816c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801814a:	8884      	ldrh	r4, [r0, #4]
 801814c:	4423      	add	r3, r4
 801814e:	b21b      	sxth	r3, r3
 8018150:	4299      	cmp	r1, r3
 8018152:	da0b      	bge.n	801816c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018154:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018158:	4293      	cmp	r3, r2
 801815a:	dc07      	bgt.n	801816c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801815c:	88c0      	ldrh	r0, [r0, #6]
 801815e:	4418      	add	r0, r3
 8018160:	b200      	sxth	r0, r0
 8018162:	4282      	cmp	r2, r0
 8018164:	bfac      	ite	ge
 8018166:	2000      	movge	r0, #0
 8018168:	2001      	movlt	r0, #1
 801816a:	bd10      	pop	{r4, pc}
 801816c:	2000      	movs	r0, #0
 801816e:	e7fc      	b.n	801816a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08018170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018172:	460c      	mov	r4, r1
 8018174:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018176:	b089      	sub	sp, #36	; 0x24
 8018178:	4605      	mov	r5, r0
 801817a:	2900      	cmp	r1, #0
 801817c:	d054      	beq.n	8018228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801817e:	4668      	mov	r0, sp
 8018180:	f7ff fef6 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018184:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8018186:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8018188:	8922      	ldrh	r2, [r4, #8]
 801818a:	88e1      	ldrh	r1, [r4, #6]
 801818c:	443a      	add	r2, r7
 801818e:	4431      	add	r1, r6
 8018190:	b212      	sxth	r2, r2
 8018192:	b209      	sxth	r1, r1
 8018194:	4668      	mov	r0, sp
 8018196:	f7ff ffd3 	bl	8018140 <_ZNK8touchgfx4Rect9intersectEss>
 801819a:	b1d0      	cbz	r0, 80181d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801819c:	89a2      	ldrh	r2, [r4, #12]
 801819e:	8961      	ldrh	r1, [r4, #10]
 80181a0:	443a      	add	r2, r7
 80181a2:	4431      	add	r1, r6
 80181a4:	b212      	sxth	r2, r2
 80181a6:	b209      	sxth	r1, r1
 80181a8:	4668      	mov	r0, sp
 80181aa:	f7ff ffc9 	bl	8018140 <_ZNK8touchgfx4Rect9intersectEss>
 80181ae:	4603      	mov	r3, r0
 80181b0:	b978      	cbnz	r0, 80181d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80181b2:	4a1e      	ldr	r2, [pc, #120]	; (801822c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80181b4:	9204      	str	r2, [sp, #16]
 80181b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80181b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181bc:	2202      	movs	r2, #2
 80181be:	f88d 2014 	strb.w	r2, [sp, #20]
 80181c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80181c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80181ca:	6803      	ldr	r3, [r0, #0]
 80181cc:	a904      	add	r1, sp, #16
 80181ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181d0:	4798      	blx	r3
 80181d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80181d4:	a802      	add	r0, sp, #8
 80181d6:	f7ff fecb 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80181de:	88e0      	ldrh	r0, [r4, #6]
 80181e0:	8961      	ldrh	r1, [r4, #10]
 80181e2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80181e6:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80181ea:	8923      	ldrh	r3, [r4, #8]
 80181ec:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80181ee:	7927      	ldrb	r7, [r4, #4]
 80181f0:	f88d 7014 	strb.w	r7, [sp, #20]
 80181f4:	1a80      	subs	r0, r0, r2
 80181f6:	1a89      	subs	r1, r1, r2
 80181f8:	89a2      	ldrh	r2, [r4, #12]
 80181fa:	4c0d      	ldr	r4, [pc, #52]	; (8018230 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80181fc:	9404      	str	r4, [sp, #16]
 80181fe:	4460      	add	r0, ip
 8018200:	eba3 030e 	sub.w	r3, r3, lr
 8018204:	eba2 020e 	sub.w	r2, r2, lr
 8018208:	f8ad 0016 	strh.w	r0, [sp, #22]
 801820c:	4433      	add	r3, r6
 801820e:	4461      	add	r1, ip
 8018210:	4432      	add	r2, r6
 8018212:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018214:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018218:	f8ad 3018 	strh.w	r3, [sp, #24]
 801821c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018220:	6803      	ldr	r3, [r0, #0]
 8018222:	a904      	add	r1, sp, #16
 8018224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018226:	4798      	blx	r3
 8018228:	b009      	add	sp, #36	; 0x24
 801822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801822c:	080538d4 	.word	0x080538d4
 8018230:	080538e8 	.word	0x080538e8

08018234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018238:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801823c:	790b      	ldrb	r3, [r1, #4]
 801823e:	b0a1      	sub	sp, #132	; 0x84
 8018240:	4604      	mov	r4, r0
 8018242:	460d      	mov	r5, r1
 8018244:	f1b9 0f00 	cmp.w	r9, #0
 8018248:	d00f      	beq.n	801826a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801824a:	2b00      	cmp	r3, #0
 801824c:	f040 80a0 	bne.w	8018390 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8018250:	b021      	add	sp, #132	; 0x84
 8018252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018256:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801825a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801825e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018262:	1d20      	adds	r0, r4, #4
 8018264:	f7fc f934 	bl	80144d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018268:	e092      	b.n	8018390 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801826a:	2b00      	cmp	r3, #0
 801826c:	d1f0      	bne.n	8018250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801826e:	4b5e      	ldr	r3, [pc, #376]	; (80183e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8018276:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801827a:	f1ba 0f03 	cmp.w	sl, #3
 801827e:	ddea      	ble.n	8018256 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8018280:	f1ba 0f0c 	cmp.w	sl, #12
 8018284:	f04f 0303 	mov.w	r3, #3
 8018288:	bfdc      	itt	le
 801828a:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801828e:	fb92 f3f3 	sdivle	r3, r2, r3
 8018292:	9301      	str	r3, [sp, #4]
 8018294:	4b55      	ldr	r3, [pc, #340]	; (80183ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8018296:	4956      	ldr	r1, [pc, #344]	; (80183f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8018298:	f9b3 2000 	ldrsh.w	r2, [r3]
 801829c:	4b55      	ldr	r3, [pc, #340]	; (80183f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801829e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80182a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80182aa:	ab0e      	add	r3, sp, #56	; 0x38
 80182ac:	2248      	movs	r2, #72	; 0x48
 80182ae:	2600      	movs	r6, #0
 80182b0:	4618      	mov	r0, r3
 80182b2:	960a      	str	r6, [sp, #40]	; 0x28
 80182b4:	f00c fe04 	bl	8024ec0 <memcpy>
 80182b8:	f04f 32ff 	mov.w	r2, #4294967295
 80182bc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80182c0:	f8cd a008 	str.w	sl, [sp, #8]
 80182c4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80182c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80182cc:	b29b      	uxth	r3, r3
 80182ce:	46b3      	mov	fp, r6
 80182d0:	9303      	str	r3, [sp, #12]
 80182d2:	2300      	movs	r3, #0
 80182d4:	9309      	str	r3, [sp, #36]	; 0x24
 80182d6:	9b07      	ldr	r3, [sp, #28]
 80182d8:	9a03      	ldr	r2, [sp, #12]
 80182da:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80182de:	88ef      	ldrh	r7, [r5, #6]
 80182e0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80182e4:	fb13 f302 	smulbb	r3, r3, r2
 80182e8:	b29b      	uxth	r3, r3
 80182ea:	9304      	str	r3, [sp, #16]
 80182ec:	9b07      	ldr	r3, [sp, #28]
 80182ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80182f2:	a80a      	add	r0, sp, #40	; 0x28
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	fb13 f302 	smulbb	r3, r3, r2
 80182fa:	b29b      	uxth	r3, r3
 80182fc:	9305      	str	r3, [sp, #20]
 80182fe:	9b04      	ldr	r3, [sp, #16]
 8018300:	441f      	add	r7, r3
 8018302:	9b05      	ldr	r3, [sp, #20]
 8018304:	4498      	add	r8, r3
 8018306:	b23f      	sxth	r7, r7
 8018308:	fa0f f888 	sxth.w	r8, r8
 801830c:	4642      	mov	r2, r8
 801830e:	4639      	mov	r1, r7
 8018310:	f7ff ff16 	bl	8018140 <_ZNK8touchgfx4Rect9intersectEss>
 8018314:	b380      	cbz	r0, 8018378 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8018316:	4639      	mov	r1, r7
 8018318:	ab09      	add	r3, sp, #36	; 0x24
 801831a:	4642      	mov	r2, r8
 801831c:	1d20      	adds	r0, r4, #4
 801831e:	f7fc f8d7 	bl	80144d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018324:	b341      	cbz	r1, 8018378 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8018326:	4549      	cmp	r1, r9
 8018328:	d026      	beq.n	8018378 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801832a:	a80c      	add	r0, sp, #48	; 0x30
 801832c:	f7ff fe20 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018330:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018334:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018338:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801833c:	2002      	movs	r0, #2
 801833e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018342:	440a      	add	r2, r1
 8018344:	1a99      	subs	r1, r3, r2
 8018346:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801834a:	fb93 f3f0 	sdiv	r3, r3, r0
 801834e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8018352:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018356:	4403      	add	r3, r0
 8018358:	1ad3      	subs	r3, r2, r3
 801835a:	435b      	muls	r3, r3
 801835c:	9a06      	ldr	r2, [sp, #24]
 801835e:	fb01 3301 	mla	r3, r1, r1, r3
 8018362:	4293      	cmp	r3, r2
 8018364:	d208      	bcs.n	8018378 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8018366:	9a04      	ldr	r2, [sp, #16]
 8018368:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801836c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801836e:	9a05      	ldr	r2, [sp, #20]
 8018370:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8018374:	86e2      	strh	r2, [r4, #54]	; 0x36
 8018376:	9306      	str	r3, [sp, #24]
 8018378:	f10b 0b02 	add.w	fp, fp, #2
 801837c:	f1bb 0f08 	cmp.w	fp, #8
 8018380:	dda7      	ble.n	80182d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018382:	9b02      	ldr	r3, [sp, #8]
 8018384:	4453      	add	r3, sl
 8018386:	9302      	str	r3, [sp, #8]
 8018388:	9b01      	ldr	r3, [sp, #4]
 801838a:	3601      	adds	r6, #1
 801838c:	42b3      	cmp	r3, r6
 801838e:	d199      	bne.n	80182c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8018390:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018392:	2900      	cmp	r1, #0
 8018394:	f43f af5c 	beq.w	8018250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018398:	a80c      	add	r0, sp, #48	; 0x30
 801839a:	f7ff fde9 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801839e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80183a2:	88ea      	ldrh	r2, [r5, #6]
 80183a4:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80183a8:	7929      	ldrb	r1, [r5, #4]
 80183aa:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80183ae:	1ad2      	subs	r2, r2, r3
 80183b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80183b2:	441a      	add	r2, r3
 80183b4:	892b      	ldrh	r3, [r5, #8]
 80183b6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80183ba:	1a1b      	subs	r3, r3, r0
 80183bc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80183be:	4403      	add	r3, r0
 80183c0:	480d      	ldr	r0, [pc, #52]	; (80183f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 80183c2:	900e      	str	r0, [sp, #56]	; 0x38
 80183c4:	2600      	movs	r6, #0
 80183c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80183c8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80183cc:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80183d0:	6803      	ldr	r3, [r0, #0]
 80183d2:	a90e      	add	r1, sp, #56	; 0x38
 80183d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183d6:	4798      	blx	r3
 80183d8:	792b      	ldrb	r3, [r5, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	f43f af38 	beq.w	8018250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80183e0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80183e4:	e734      	b.n	8018250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80183e6:	bf00      	nop
 80183e8:	20001354 	.word	0x20001354
 80183ec:	20001346 	.word	0x20001346
 80183f0:	08026548 	.word	0x08026548
 80183f4:	20001348 	.word	0x20001348
 80183f8:	080538d4 	.word	0x080538d4

080183fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80183fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183fe:	4604      	mov	r4, r0
 8018400:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018404:	3201      	adds	r2, #1
 8018406:	d112      	bne.n	801842e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018408:	6803      	ldr	r3, [r0, #0]
 801840a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801840e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018412:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018416:	2500      	movs	r5, #0
 8018418:	9500      	str	r5, [sp, #0]
 801841a:	466d      	mov	r5, sp
 801841c:	4629      	mov	r1, r5
 801841e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018422:	6a1b      	ldr	r3, [r3, #32]
 8018424:	4798      	blx	r3
 8018426:	e895 0003 	ldmia.w	r5, {r0, r1}
 801842a:	e884 0003 	stmia.w	r4, {r0, r1}
 801842e:	4620      	mov	r0, r4
 8018430:	b003      	add	sp, #12
 8018432:	bd30      	pop	{r4, r5, pc}

08018434 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018434:	b513      	push	{r0, r1, r4, lr}
 8018436:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801843a:	3301      	adds	r3, #1
 801843c:	4604      	mov	r4, r0
 801843e:	d109      	bne.n	8018454 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018440:	4601      	mov	r1, r0
 8018442:	4668      	mov	r0, sp
 8018444:	f7ff fd94 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018448:	f8bd 3000 	ldrh.w	r3, [sp]
 801844c:	8423      	strh	r3, [r4, #32]
 801844e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018452:	8463      	strh	r3, [r4, #34]	; 0x22
 8018454:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018458:	b002      	add	sp, #8
 801845a:	bd10      	pop	{r4, pc}

0801845c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801845c:	b513      	push	{r0, r1, r4, lr}
 801845e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018462:	3301      	adds	r3, #1
 8018464:	4604      	mov	r4, r0
 8018466:	d109      	bne.n	801847c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018468:	4601      	mov	r1, r0
 801846a:	4668      	mov	r0, sp
 801846c:	f7ff fd80 	bl	8017f70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018470:	f8bd 3000 	ldrh.w	r3, [sp]
 8018474:	8423      	strh	r3, [r4, #32]
 8018476:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801847a:	8463      	strh	r3, [r4, #34]	; 0x22
 801847c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018480:	b002      	add	sp, #8
 8018482:	bd10      	pop	{r4, pc}

08018484 <_ZN8touchgfx6ScreenC1Ev>:
 8018484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018486:	4605      	mov	r5, r0
 8018488:	4b17      	ldr	r3, [pc, #92]	; (80184e8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801848a:	f845 3b04 	str.w	r3, [r5], #4
 801848e:	2301      	movs	r3, #1
 8018490:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8018494:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018498:	4b14      	ldr	r3, [pc, #80]	; (80184ec <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801849a:	4915      	ldr	r1, [pc, #84]	; (80184f0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801849c:	f9b3 7000 	ldrsh.w	r7, [r3]
 80184a0:	4b14      	ldr	r3, [pc, #80]	; (80184f4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80184a2:	6041      	str	r1, [r0, #4]
 80184a4:	2200      	movs	r2, #0
 80184a6:	8102      	strh	r2, [r0, #8]
 80184a8:	8142      	strh	r2, [r0, #10]
 80184aa:	8182      	strh	r2, [r0, #12]
 80184ac:	81c2      	strh	r2, [r0, #14]
 80184ae:	8202      	strh	r2, [r0, #16]
 80184b0:	8242      	strh	r2, [r0, #18]
 80184b2:	8282      	strh	r2, [r0, #20]
 80184b4:	82c2      	strh	r2, [r0, #22]
 80184b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80184ba:	6202      	str	r2, [r0, #32]
 80184bc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80184c0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80184c4:	6342      	str	r2, [r0, #52]	; 0x34
 80184c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80184ca:	4611      	mov	r1, r2
 80184cc:	4604      	mov	r4, r0
 80184ce:	4628      	mov	r0, r5
 80184d0:	f7f6 f9e6 	bl	800e8a0 <_ZN8touchgfx8Drawable5setXYEss>
 80184d4:	4639      	mov	r1, r7
 80184d6:	4628      	mov	r0, r5
 80184d8:	f7f6 fa00 	bl	800e8dc <_ZN8touchgfx8Drawable8setWidthEs>
 80184dc:	4628      	mov	r0, r5
 80184de:	4631      	mov	r1, r6
 80184e0:	f7f6 fa0b 	bl	800e8fa <_ZN8touchgfx8Drawable9setHeightEs>
 80184e4:	4620      	mov	r0, r4
 80184e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184e8:	08053910 	.word	0x08053910
 80184ec:	20001346 	.word	0x20001346
 80184f0:	080524f0 	.word	0x080524f0
 80184f4:	20001348 	.word	0x20001348

080184f8 <_ZN8touchgfx6Screen4drawEv>:
 80184f8:	b507      	push	{r0, r1, r2, lr}
 80184fa:	4b09      	ldr	r3, [pc, #36]	; (8018520 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80184fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018500:	4b08      	ldr	r3, [pc, #32]	; (8018524 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018502:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018506:	f9b3 3000 	ldrsh.w	r3, [r3]
 801850a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801850e:	6803      	ldr	r3, [r0, #0]
 8018510:	2100      	movs	r1, #0
 8018512:	9100      	str	r1, [sp, #0]
 8018514:	689b      	ldr	r3, [r3, #8]
 8018516:	4669      	mov	r1, sp
 8018518:	4798      	blx	r3
 801851a:	b003      	add	sp, #12
 801851c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018520:	20001346 	.word	0x20001346
 8018524:	20001348 	.word	0x20001348

08018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018530:	2b00      	cmp	r3, #0
 8018532:	b089      	sub	sp, #36	; 0x24
 8018534:	4680      	mov	r8, r0
 8018536:	460c      	mov	r4, r1
 8018538:	4615      	mov	r5, r2
 801853a:	dd0e      	ble.n	801855a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801853c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018540:	2b00      	cmp	r3, #0
 8018542:	dd0a      	ble.n	801855a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018544:	4628      	mov	r0, r5
 8018546:	f7ff ff59 	bl	80183fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801854a:	4621      	mov	r1, r4
 801854c:	f7fe ff0e 	bl	801736c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018550:	69eb      	ldr	r3, [r5, #28]
 8018552:	b928      	cbnz	r0, 8018560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018554:	461d      	mov	r5, r3
 8018556:	2b00      	cmp	r3, #0
 8018558:	d1f4      	bne.n	8018544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801855a:	b009      	add	sp, #36	; 0x24
 801855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018560:	ae04      	add	r6, sp, #16
 8018562:	2b00      	cmp	r3, #0
 8018564:	d051      	beq.n	801860a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8018566:	682b      	ldr	r3, [r5, #0]
 8018568:	4629      	mov	r1, r5
 801856a:	68db      	ldr	r3, [r3, #12]
 801856c:	a802      	add	r0, sp, #8
 801856e:	4798      	blx	r3
 8018570:	4628      	mov	r0, r5
 8018572:	f7ff ff5f 	bl	8018434 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018576:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801857a:	4407      	add	r7, r0
 801857c:	4628      	mov	r0, r5
 801857e:	f7ff ff6d 	bl	801845c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018582:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018586:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801858a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801858e:	4418      	add	r0, r3
 8018590:	4621      	mov	r1, r4
 8018592:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018596:	f8ad 0012 	strh.w	r0, [sp, #18]
 801859a:	b23f      	sxth	r7, r7
 801859c:	4630      	mov	r0, r6
 801859e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185a2:	f8ad 7010 	strh.w	r7, [sp, #16]
 80185a6:	f7fc f845 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 80185aa:	4628      	mov	r0, r5
 80185ac:	f7ff ff26 	bl	80183fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185b0:	4602      	mov	r2, r0
 80185b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80185b6:	ab06      	add	r3, sp, #24
 80185b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80185bc:	4611      	mov	r1, r2
 80185be:	4618      	mov	r0, r3
 80185c0:	f7fc f838 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 80185c4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80185c8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80185cc:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80185d0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80185d4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80185d8:	4299      	cmp	r1, r3
 80185da:	d10b      	bne.n	80185f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80185dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80185e0:	4552      	cmp	r2, sl
 80185e2:	d107      	bne.n	80185f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80185e4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80185e8:	455a      	cmp	r2, fp
 80185ea:	d103      	bne.n	80185f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80185ec:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80185f0:	454a      	cmp	r2, r9
 80185f2:	d00a      	beq.n	801860a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80185f4:	f1bb 0f00 	cmp.w	fp, #0
 80185f8:	d002      	beq.n	8018600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 80185fa:	f1b9 0f00 	cmp.w	r9, #0
 80185fe:	d12e      	bne.n	801865e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 8018600:	69ea      	ldr	r2, [r5, #28]
 8018602:	4621      	mov	r1, r4
 8018604:	4640      	mov	r0, r8
 8018606:	f7ff ff8f 	bl	8018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801860a:	4628      	mov	r0, r5
 801860c:	f7ff fef6 	bl	80183fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018610:	6861      	ldr	r1, [r4, #4]
 8018612:	4602      	mov	r2, r0
 8018614:	6820      	ldr	r0, [r4, #0]
 8018616:	4633      	mov	r3, r6
 8018618:	c303      	stmia	r3!, {r0, r1}
 801861a:	4611      	mov	r1, r2
 801861c:	4630      	mov	r0, r6
 801861e:	f7fc f809 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 8018622:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018626:	2b00      	cmp	r3, #0
 8018628:	dd97      	ble.n	801855a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801862a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801862e:	2b00      	cmp	r3, #0
 8018630:	dd93      	ble.n	801855a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018632:	4628      	mov	r0, r5
 8018634:	f7ff fefe 	bl	8018434 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018638:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801863c:	1a18      	subs	r0, r3, r0
 801863e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018642:	4628      	mov	r0, r5
 8018644:	f7ff ff0a 	bl	801845c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018648:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801864c:	1a18      	subs	r0, r3, r0
 801864e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018652:	682b      	ldr	r3, [r5, #0]
 8018654:	4631      	mov	r1, r6
 8018656:	689b      	ldr	r3, [r3, #8]
 8018658:	4628      	mov	r0, r5
 801865a:	4798      	blx	r3
 801865c:	e77d      	b.n	801855a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801865e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018662:	fa1f f08a 	uxth.w	r0, sl
 8018666:	4552      	cmp	r2, sl
 8018668:	9000      	str	r0, [sp, #0]
 801866a:	da12      	bge.n	8018692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801866c:	9301      	str	r3, [sp, #4]
 801866e:	9b00      	ldr	r3, [sp, #0]
 8018670:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018674:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018678:	1a9a      	subs	r2, r3, r2
 801867a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801867e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018682:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018686:	69ea      	ldr	r2, [r5, #28]
 8018688:	4631      	mov	r1, r6
 801868a:	4640      	mov	r0, r8
 801868c:	f7ff ff4c 	bl	8018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018690:	9b01      	ldr	r3, [sp, #4]
 8018692:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018696:	429a      	cmp	r2, r3
 8018698:	b29f      	uxth	r7, r3
 801869a:	da0d      	bge.n	80186b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801869c:	f8ad 2010 	strh.w	r2, [sp, #16]
 80186a0:	1aba      	subs	r2, r7, r2
 80186a2:	f8ad a012 	strh.w	sl, [sp, #18]
 80186a6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80186aa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80186ae:	69ea      	ldr	r2, [r5, #28]
 80186b0:	4631      	mov	r1, r6
 80186b2:	4640      	mov	r0, r8
 80186b4:	f7ff ff38 	bl	8018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186b8:	8822      	ldrh	r2, [r4, #0]
 80186ba:	88a3      	ldrh	r3, [r4, #4]
 80186bc:	445f      	add	r7, fp
 80186be:	4413      	add	r3, r2
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	b2bf      	uxth	r7, r7
 80186c4:	b23a      	sxth	r2, r7
 80186c6:	b219      	sxth	r1, r3
 80186c8:	4291      	cmp	r1, r2
 80186ca:	dd0d      	ble.n	80186e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 80186cc:	1bdb      	subs	r3, r3, r7
 80186ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 80186d2:	f8ad a012 	strh.w	sl, [sp, #18]
 80186d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80186da:	f8ad 9016 	strh.w	r9, [sp, #22]
 80186de:	69ea      	ldr	r2, [r5, #28]
 80186e0:	4631      	mov	r1, r6
 80186e2:	4640      	mov	r0, r8
 80186e4:	f7ff ff20 	bl	8018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186e8:	88e2      	ldrh	r2, [r4, #6]
 80186ea:	8863      	ldrh	r3, [r4, #2]
 80186ec:	4413      	add	r3, r2
 80186ee:	9a00      	ldr	r2, [sp, #0]
 80186f0:	444a      	add	r2, r9
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	fa1f f982 	uxth.w	r9, r2
 80186f8:	fa0f f289 	sxth.w	r2, r9
 80186fc:	b219      	sxth	r1, r3
 80186fe:	428a      	cmp	r2, r1
 8018700:	da83      	bge.n	801860a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 8018702:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018706:	f9b4 0000 	ldrsh.w	r0, [r4]
 801870a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801870e:	eba3 0309 	sub.w	r3, r3, r9
 8018712:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018716:	f8ad 2012 	strh.w	r2, [sp, #18]
 801871a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801871e:	69ea      	ldr	r2, [r5, #28]
 8018720:	4631      	mov	r1, r6
 8018722:	e76f      	b.n	8018604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

08018724 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018726:	aa02      	add	r2, sp, #8
 8018728:	2300      	movs	r3, #0
 801872a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801872e:	4604      	mov	r4, r0
 8018730:	3004      	adds	r0, #4
 8018732:	460d      	mov	r5, r1
 8018734:	f7fc f856 	bl	80147e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018738:	9a01      	ldr	r2, [sp, #4]
 801873a:	b11a      	cbz	r2, 8018744 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801873c:	4629      	mov	r1, r5
 801873e:	4620      	mov	r0, r4
 8018740:	f7ff fef2 	bl	8018528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018744:	b003      	add	sp, #12
 8018746:	bd30      	pop	{r4, r5, pc}

08018748 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801874a:	4602      	mov	r2, r0
 801874c:	4604      	mov	r4, r0
 801874e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018752:	460d      	mov	r5, r1
 8018754:	6851      	ldr	r1, [r2, #4]
 8018756:	466b      	mov	r3, sp
 8018758:	c303      	stmia	r3!, {r0, r1}
 801875a:	4629      	mov	r1, r5
 801875c:	4668      	mov	r0, sp
 801875e:	f7fb ff69 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 8018762:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018766:	4669      	mov	r1, sp
 8018768:	b123      	cbz	r3, 8018774 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801876a:	4620      	mov	r0, r4
 801876c:	f7ff ffda 	bl	8018724 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018770:	b003      	add	sp, #12
 8018772:	bd30      	pop	{r4, r5, pc}
 8018774:	1d20      	adds	r0, r4, #4
 8018776:	f7fb fffc 	bl	8014772 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801877a:	e7f9      	b.n	8018770 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801877c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801877c:	680a      	ldr	r2, [r1, #0]
 801877e:	460b      	mov	r3, r1
 8018780:	6992      	ldr	r2, [r2, #24]
 8018782:	1d01      	adds	r1, r0, #4
 8018784:	4618      	mov	r0, r3
 8018786:	4710      	bx	r2

08018788 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8018788:	b510      	push	{r4, lr}
 801878a:	4298      	cmp	r0, r3
 801878c:	eb01 0402 	add.w	r4, r1, r2
 8018790:	b224      	sxth	r4, r4
 8018792:	d22c      	bcs.n	80187ee <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 8018794:	b35b      	cbz	r3, 80187ee <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 8018796:	ee07 0a90 	vmov	s15, r0
 801879a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801879e:	ee07 3a90 	vmov	s15, r3
 80187a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80187a6:	ee07 2a90 	vmov	s15, r2
 80187aa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80187ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80187b2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80187b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80187ba:	ee67 5a07 	vmul.f32	s11, s14, s14
 80187be:	ee07 1a90 	vmov	s15, r1
 80187c2:	eee5 6a87 	vfma.f32	s13, s11, s14
 80187c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80187ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80187d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187da:	bfcc      	ite	gt
 80187dc:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80187e0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80187e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80187e8:	ee17 3a90 	vmov	r3, s15
 80187ec:	b21c      	sxth	r4, r3
 80187ee:	4620      	mov	r0, r4
 80187f0:	bd10      	pop	{r4, pc}

080187f2 <_ZN8touchgfx12TextProviderC1Ev>:
 80187f2:	b510      	push	{r4, lr}
 80187f4:	2300      	movs	r3, #0
 80187f6:	2201      	movs	r2, #1
 80187f8:	4604      	mov	r4, r0
 80187fa:	e9c0 3300 	strd	r3, r3, [r0]
 80187fe:	60c3      	str	r3, [r0, #12]
 8018800:	7403      	strb	r3, [r0, #16]
 8018802:	82c3      	strh	r3, [r0, #22]
 8018804:	8303      	strh	r3, [r0, #24]
 8018806:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018808:	8603      	strh	r3, [r0, #48]	; 0x30
 801880a:	86c3      	strh	r3, [r0, #54]	; 0x36
 801880c:	8703      	strh	r3, [r0, #56]	; 0x38
 801880e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018810:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8018814:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018818:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801881c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8018820:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8018824:	f7f9 f890 	bl	8011948 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018828:	4620      	mov	r0, r4
 801882a:	bd10      	pop	{r4, pc}

0801882c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801882c:	b530      	push	{r4, r5, lr}
 801882e:	2500      	movs	r5, #0
 8018830:	2401      	movs	r4, #1
 8018832:	6843      	ldr	r3, [r0, #4]
 8018834:	b913      	cbnz	r3, 801883c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018836:	6803      	ldr	r3, [r0, #0]
 8018838:	b1f3      	cbz	r3, 8018878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801883a:	6043      	str	r3, [r0, #4]
 801883c:	7c03      	ldrb	r3, [r0, #16]
 801883e:	b143      	cbz	r3, 8018852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018840:	68c3      	ldr	r3, [r0, #12]
 8018842:	b12b      	cbz	r3, 8018850 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018844:	881a      	ldrh	r2, [r3, #0]
 8018846:	b11a      	cbz	r2, 8018850 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018848:	1c9a      	adds	r2, r3, #2
 801884a:	60c2      	str	r2, [r0, #12]
 801884c:	8818      	ldrh	r0, [r3, #0]
 801884e:	bd30      	pop	{r4, r5, pc}
 8018850:	7405      	strb	r5, [r0, #16]
 8018852:	6843      	ldr	r3, [r0, #4]
 8018854:	8819      	ldrh	r1, [r3, #0]
 8018856:	b179      	cbz	r1, 8018878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8018858:	1c9a      	adds	r2, r3, #2
 801885a:	2902      	cmp	r1, #2
 801885c:	6042      	str	r2, [r0, #4]
 801885e:	d1f5      	bne.n	801884c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018860:	6883      	ldr	r3, [r0, #8]
 8018862:	1d1a      	adds	r2, r3, #4
 8018864:	6082      	str	r2, [r0, #8]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	60c3      	str	r3, [r0, #12]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d0e1      	beq.n	8018832 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801886e:	881b      	ldrh	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d0de      	beq.n	8018832 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018874:	7404      	strb	r4, [r0, #16]
 8018876:	e7dc      	b.n	8018832 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018878:	2000      	movs	r0, #0
 801887a:	e7e8      	b.n	801884e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801887c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801887c:	b410      	push	{r4}
 801887e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018880:	2300      	movs	r3, #0
 8018882:	6082      	str	r2, [r0, #8]
 8018884:	6001      	str	r1, [r0, #0]
 8018886:	6043      	str	r3, [r0, #4]
 8018888:	60c3      	str	r3, [r0, #12]
 801888a:	7403      	strb	r3, [r0, #16]
 801888c:	8603      	strh	r3, [r0, #48]	; 0x30
 801888e:	8303      	strh	r3, [r0, #24]
 8018890:	8703      	strh	r3, [r0, #56]	; 0x38
 8018892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018896:	f7f9 b857 	b.w	8011948 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801889a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801889a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801889c:	4605      	mov	r5, r0
 801889e:	4608      	mov	r0, r1
 80188a0:	b1e9      	cbz	r1, 80188de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80188a2:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80188a6:	460b      	mov	r3, r1
 80188a8:	f101 0708 	add.w	r7, r1, #8
 80188ac:	4622      	mov	r2, r4
 80188ae:	6818      	ldr	r0, [r3, #0]
 80188b0:	6859      	ldr	r1, [r3, #4]
 80188b2:	4626      	mov	r6, r4
 80188b4:	c603      	stmia	r6!, {r0, r1}
 80188b6:	3308      	adds	r3, #8
 80188b8:	42bb      	cmp	r3, r7
 80188ba:	4634      	mov	r4, r6
 80188bc:	d1f7      	bne.n	80188ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80188be:	6818      	ldr	r0, [r3, #0]
 80188c0:	6030      	str	r0, [r6, #0]
 80188c2:	889b      	ldrh	r3, [r3, #4]
 80188c4:	80b3      	strh	r3, [r6, #4]
 80188c6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80188ca:	015b      	lsls	r3, r3, #5
 80188cc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80188d0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80188d4:	430b      	orrs	r3, r1
 80188d6:	425b      	negs	r3, r3
 80188d8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80188dc:	4610      	mov	r0, r2
 80188de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80188e0:	b538      	push	{r3, r4, r5, lr}
 80188e2:	460c      	mov	r4, r1
 80188e4:	6811      	ldr	r1, [r2, #0]
 80188e6:	4610      	mov	r0, r2
 80188e8:	68cd      	ldr	r5, [r1, #12]
 80188ea:	4619      	mov	r1, r3
 80188ec:	47a8      	blx	r5
 80188ee:	2800      	cmp	r0, #0
 80188f0:	bf08      	it	eq
 80188f2:	4620      	moveq	r0, r4
 80188f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080188f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80188f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188fa:	4604      	mov	r4, r0
 80188fc:	4615      	mov	r5, r2
 80188fe:	4608      	mov	r0, r1
 8018900:	b93a      	cbnz	r2, 8018912 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018902:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8018906:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801890a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801890e:	4628      	mov	r0, r5
 8018910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018912:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018916:	8893      	ldrh	r3, [r2, #4]
 8018918:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801891c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018920:	79ee      	ldrb	r6, [r5, #7]
 8018922:	4316      	orrs	r6, r2
 8018924:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8018928:	189a      	adds	r2, r3, r2
 801892a:	b291      	uxth	r1, r2
 801892c:	291d      	cmp	r1, #29
 801892e:	b2b7      	uxth	r7, r6
 8018930:	f200 8083 	bhi.w	8018a3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8018934:	2201      	movs	r2, #1
 8018936:	408a      	lsls	r2, r1
 8018938:	4978      	ldr	r1, [pc, #480]	; (8018b1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801893a:	420a      	tst	r2, r1
 801893c:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8018940:	d12d      	bne.n	801899e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8018942:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018946:	d078      	beq.n	8018a3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8018948:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801894c:	462b      	mov	r3, r5
 801894e:	f105 0e08 	add.w	lr, r5, #8
 8018952:	4615      	mov	r5, r2
 8018954:	6818      	ldr	r0, [r3, #0]
 8018956:	6859      	ldr	r1, [r3, #4]
 8018958:	4694      	mov	ip, r2
 801895a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801895e:	3308      	adds	r3, #8
 8018960:	4573      	cmp	r3, lr
 8018962:	4662      	mov	r2, ip
 8018964:	d1f6      	bne.n	8018954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 8018966:	6818      	ldr	r0, [r3, #0]
 8018968:	f8cc 0000 	str.w	r0, [ip]
 801896c:	889b      	ldrh	r3, [r3, #4]
 801896e:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018972:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8018976:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801897a:	b2b3      	uxth	r3, r6
 801897c:	1aca      	subs	r2, r1, r3
 801897e:	b292      	uxth	r2, r2
 8018980:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8018984:	10d2      	asrs	r2, r2, #3
 8018986:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801898a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801898e:	4302      	orrs	r2, r0
 8018990:	1bcf      	subs	r7, r1, r7
 8018992:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8018996:	1afb      	subs	r3, r7, r3
 8018998:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801899c:	e7b7      	b.n	801890e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801899e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80189a0:	b92b      	cbnz	r3, 80189ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80189a2:	4b5f      	ldr	r3, [pc, #380]	; (8018b20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80189a4:	4a5f      	ldr	r2, [pc, #380]	; (8018b24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80189a6:	4860      	ldr	r0, [pc, #384]	; (8018b28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80189a8:	21c0      	movs	r1, #192	; 0xc0
 80189aa:	f00c fa0b 	bl	8024dc4 <__assert_func>
 80189ae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80189b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80189b4:	8b59      	ldrh	r1, [r3, #26]
 80189b6:	f640 6333 	movw	r3, #3635	; 0xe33
 80189ba:	4299      	cmp	r1, r3
 80189bc:	d110      	bne.n	80189e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80189be:	6803      	ldr	r3, [r0, #0]
 80189c0:	68db      	ldr	r3, [r3, #12]
 80189c2:	4798      	blx	r3
 80189c4:	7b41      	ldrb	r1, [r0, #13]
 80189c6:	00cb      	lsls	r3, r1, #3
 80189c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189cc:	7a03      	ldrb	r3, [r0, #8]
 80189ce:	0648      	lsls	r0, r1, #25
 80189d0:	ea43 0302 	orr.w	r3, r3, r2
 80189d4:	bf44      	itt	mi
 80189d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189da:	b21b      	sxthmi	r3, r3
 80189dc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80189e0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80189e4:	443b      	add	r3, r7
 80189e6:	4433      	add	r3, r6
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80189ee:	462a      	mov	r2, r5
 80189f0:	f105 0c08 	add.w	ip, r5, #8
 80189f4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80189f8:	4635      	mov	r5, r6
 80189fa:	6810      	ldr	r0, [r2, #0]
 80189fc:	6851      	ldr	r1, [r2, #4]
 80189fe:	4637      	mov	r7, r6
 8018a00:	c703      	stmia	r7!, {r0, r1}
 8018a02:	3208      	adds	r2, #8
 8018a04:	4562      	cmp	r2, ip
 8018a06:	463e      	mov	r6, r7
 8018a08:	d1f7      	bne.n	80189fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8018a0a:	6810      	ldr	r0, [r2, #0]
 8018a0c:	6038      	str	r0, [r7, #0]
 8018a0e:	8892      	ldrh	r2, [r2, #4]
 8018a10:	80ba      	strh	r2, [r7, #4]
 8018a12:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018a16:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018a1a:	10db      	asrs	r3, r3, #3
 8018a1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018a24:	4313      	orrs	r3, r2
 8018a26:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018a2a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8018a2e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018a32:	1a9b      	subs	r3, r3, r2
 8018a34:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8018a38:	e769      	b.n	801890e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018a3a:	f023 0204 	bic.w	r2, r3, #4
 8018a3e:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018a42:	428a      	cmp	r2, r1
 8018a44:	d003      	beq.n	8018a4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8018a46:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018a4a:	4293      	cmp	r3, r2
 8018a4c:	d120      	bne.n	8018a90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8018a4e:	3b01      	subs	r3, #1
 8018a50:	4602      	mov	r2, r0
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	4629      	mov	r1, r5
 8018a56:	4620      	mov	r0, r4
 8018a58:	f7ff ff42 	bl	80188e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018a5c:	7b41      	ldrb	r1, [r0, #13]
 8018a5e:	00cb      	lsls	r3, r1, #3
 8018a60:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a64:	7a03      	ldrb	r3, [r0, #8]
 8018a66:	0649      	lsls	r1, r1, #25
 8018a68:	ea43 0302 	orr.w	r3, r3, r2
 8018a6c:	bf44      	itt	mi
 8018a6e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a72:	b21b      	sxthmi	r3, r3
 8018a74:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018a78:	7b6b      	ldrb	r3, [r5, #13]
 8018a7a:	7aaa      	ldrb	r2, [r5, #10]
 8018a7c:	005b      	lsls	r3, r3, #1
 8018a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a82:	4313      	orrs	r3, r2
 8018a84:	115a      	asrs	r2, r3, #5
 8018a86:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018a8a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018a8e:	e036      	b.n	8018afe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8018a90:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018a94:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018a98:	7a2a      	ldrb	r2, [r5, #8]
 8018a9a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018a9e:	ea42 0201 	orr.w	r2, r2, r1
 8018aa2:	bf1c      	itt	ne
 8018aa4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018aa8:	b212      	sxthne	r2, r2
 8018aaa:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8018aae:	f640 6109 	movw	r1, #3593	; 0xe09
 8018ab2:	f023 0210 	bic.w	r2, r3, #16
 8018ab6:	428a      	cmp	r2, r1
 8018ab8:	d003      	beq.n	8018ac2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8018aba:	f640 6213 	movw	r2, #3603	; 0xe13
 8018abe:	4293      	cmp	r3, r2
 8018ac0:	d12a      	bne.n	8018b18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8018ac2:	7b6e      	ldrb	r6, [r5, #13]
 8018ac4:	0076      	lsls	r6, r6, #1
 8018ac6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018aca:	7aae      	ldrb	r6, [r5, #10]
 8018acc:	4316      	orrs	r6, r2
 8018ace:	f640 6213 	movw	r2, #3603	; 0xe13
 8018ad2:	4293      	cmp	r3, r2
 8018ad4:	bf18      	it	ne
 8018ad6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018ada:	4602      	mov	r2, r0
 8018adc:	bf14      	ite	ne
 8018ade:	b29b      	uxthne	r3, r3
 8018ae0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018ae4:	4629      	mov	r1, r5
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	f7ff fefa 	bl	80188e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018aec:	7b43      	ldrb	r3, [r0, #13]
 8018aee:	7a82      	ldrb	r2, [r0, #10]
 8018af0:	005b      	lsls	r3, r3, #1
 8018af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018af6:	4313      	orrs	r3, r2
 8018af8:	1af6      	subs	r6, r6, r3
 8018afa:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8018afe:	7b69      	ldrb	r1, [r5, #13]
 8018b00:	00cb      	lsls	r3, r1, #3
 8018b02:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018b06:	7a2b      	ldrb	r3, [r5, #8]
 8018b08:	4313      	orrs	r3, r2
 8018b0a:	064a      	lsls	r2, r1, #25
 8018b0c:	bf44      	itt	mi
 8018b0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b12:	b21b      	sxthmi	r3, r3
 8018b14:	1bdb      	subs	r3, r3, r7
 8018b16:	e73f      	b.n	8018998 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8018b18:	2300      	movs	r3, #0
 8018b1a:	e7b6      	b.n	8018a8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8018b1c:	3fc00079 	.word	0x3fc00079
 8018b20:	0805393c 	.word	0x0805393c
 8018b24:	08053bae 	.word	0x08053bae
 8018b28:	08053945 	.word	0x08053945

08018b2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b30:	4604      	mov	r4, r0
 8018b32:	b942      	cbnz	r2, 8018b46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b38:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8018b3c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018b40:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018b44:	e046      	b.n	8018bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018b46:	7b51      	ldrb	r1, [r2, #13]
 8018b48:	8893      	ldrh	r3, [r2, #4]
 8018b4a:	010f      	lsls	r7, r1, #4
 8018b4c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018b50:	79d7      	ldrb	r7, [r2, #7]
 8018b52:	4307      	orrs	r7, r0
 8018b54:	2f04      	cmp	r7, #4
 8018b56:	b2bd      	uxth	r5, r7
 8018b58:	bfcc      	ite	gt
 8018b5a:	08bf      	lsrgt	r7, r7, #2
 8018b5c:	2701      	movle	r7, #1
 8018b5e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018b62:	f200 80ab 	bhi.w	8018cbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8018b66:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018b6a:	4283      	cmp	r3, r0
 8018b6c:	d216      	bcs.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018b6e:	f240 605b 	movw	r0, #1627	; 0x65b
 8018b72:	4283      	cmp	r3, r0
 8018b74:	d859      	bhi.n	8018c2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8018b76:	f240 6057 	movw	r0, #1623	; 0x657
 8018b7a:	4283      	cmp	r3, r0
 8018b7c:	d20e      	bcs.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018b7e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018b82:	d24a      	bcs.n	8018c1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8018b84:	f240 604e 	movw	r0, #1614	; 0x64e
 8018b88:	4283      	cmp	r3, r0
 8018b8a:	d207      	bcs.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018b8c:	f240 601a 	movw	r0, #1562	; 0x61a
 8018b90:	4283      	cmp	r3, r0
 8018b92:	d02a      	beq.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018b94:	d821      	bhi.n	8018bda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8018b96:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018b9a:	d35b      	bcc.n	8018c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018b9c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8018ba0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ba4:	f040 80d0 	bne.w	8018d48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018ba8:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8018bac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018bb0:	f040 80ca 	bne.w	8018d48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018bb4:	00cb      	lsls	r3, r1, #3
 8018bb6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018bba:	7a13      	ldrb	r3, [r2, #8]
 8018bbc:	0649      	lsls	r1, r1, #25
 8018bbe:	ea43 0300 	orr.w	r3, r3, r0
 8018bc2:	bf44      	itt	mi
 8018bc4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018bc8:	b21b      	sxthmi	r3, r3
 8018bca:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018bce:	1b5d      	subs	r5, r3, r5
 8018bd0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018bd4:	4610      	mov	r0, r2
 8018bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bda:	f240 604b 	movw	r0, #1611	; 0x64b
 8018bde:	4283      	cmp	r3, r0
 8018be0:	d338      	bcc.n	8018c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018be2:	f240 604c 	movw	r0, #1612	; 0x64c
 8018be6:	4283      	cmp	r3, r0
 8018be8:	d9d8      	bls.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018bea:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8018bee:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8018bf2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018bf6:	f040 80f1 	bne.w	8018ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8018bfa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018bfe:	f040 80ed 	bne.w	8018ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8018c02:	00cb      	lsls	r3, r1, #3
 8018c04:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018c08:	7a13      	ldrb	r3, [r2, #8]
 8018c0a:	064e      	lsls	r6, r1, #25
 8018c0c:	ea43 0300 	orr.w	r3, r3, r0
 8018c10:	bf44      	itt	mi
 8018c12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c16:	b21b      	sxthmi	r3, r3
 8018c18:	e7d9      	b.n	8018bce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8018c1a:	f240 6054 	movw	r0, #1620	; 0x654
 8018c1e:	4283      	cmp	r3, r0
 8018c20:	d8e3      	bhi.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c22:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018c26:	d9e0      	bls.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c28:	e7b8      	b.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c2a:	f240 6074 	movw	r0, #1652	; 0x674
 8018c2e:	4283      	cmp	r3, r0
 8018c30:	d0b4      	beq.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c32:	d82d      	bhi.n	8018c90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8018c34:	f240 605e 	movw	r0, #1630	; 0x65e
 8018c38:	4283      	cmp	r3, r0
 8018c3a:	d804      	bhi.n	8018c46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8018c3c:	f240 605d 	movw	r0, #1629	; 0x65d
 8018c40:	4283      	cmp	r3, r0
 8018c42:	d3d2      	bcc.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c44:	e7aa      	b.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c46:	f240 605f 	movw	r0, #1631	; 0x65f
 8018c4a:	4283      	cmp	r3, r0
 8018c4c:	d0cd      	beq.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c4e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018c52:	d0a3      	beq.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c54:	00cb      	lsls	r3, r1, #3
 8018c56:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018c5a:	7a13      	ldrb	r3, [r2, #8]
 8018c5c:	0649      	lsls	r1, r1, #25
 8018c5e:	ea43 0300 	orr.w	r3, r3, r0
 8018c62:	bf44      	itt	mi
 8018c64:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c68:	b21b      	sxthmi	r3, r3
 8018c6a:	1b5d      	subs	r5, r3, r5
 8018c6c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018c70:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018c74:	7b53      	ldrb	r3, [r2, #13]
 8018c76:	015b      	lsls	r3, r3, #5
 8018c78:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018c7c:	7993      	ldrb	r3, [r2, #6]
 8018c7e:	430b      	orrs	r3, r1
 8018c80:	005b      	lsls	r3, r3, #1
 8018c82:	2105      	movs	r1, #5
 8018c84:	fb93 f3f1 	sdiv	r3, r3, r1
 8018c88:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018c8c:	440b      	add	r3, r1
 8018c8e:	e757      	b.n	8018b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018c90:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018c94:	4283      	cmp	r3, r0
 8018c96:	d809      	bhi.n	8018cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8018c98:	f240 60df 	movw	r0, #1759	; 0x6df
 8018c9c:	4283      	cmp	r3, r0
 8018c9e:	f4bf af7d 	bcs.w	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018ca2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018ca6:	2b05      	cmp	r3, #5
 8018ca8:	d8d4      	bhi.n	8018c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018caa:	e777      	b.n	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018cac:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018cb0:	4283      	cmp	r3, r0
 8018cb2:	d09a      	beq.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018cb4:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018cb8:	4283      	cmp	r3, r0
 8018cba:	e7ca      	b.n	8018c52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8018cbc:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018cc0:	d22b      	bcs.n	8018d1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8018cc2:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018cc6:	4283      	cmp	r3, r0
 8018cc8:	d28f      	bcs.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018cca:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018cce:	4283      	cmp	r3, r0
 8018cd0:	d816      	bhi.n	8018d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8018cd2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018cd6:	4283      	cmp	r3, r0
 8018cd8:	f4bf af60 	bcs.w	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018cdc:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018ce0:	4283      	cmp	r3, r0
 8018ce2:	d80a      	bhi.n	8018cfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8018ce4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018ce8:	4283      	cmp	r3, r0
 8018cea:	f4bf af57 	bcs.w	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018cee:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018cf2:	4283      	cmp	r3, r0
 8018cf4:	f43f af79 	beq.w	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018cf8:	e7ac      	b.n	8018c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018cfa:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018cfe:	e7f8      	b.n	8018cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8018d00:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018d04:	4283      	cmp	r3, r0
 8018d06:	d802      	bhi.n	8018d0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8018d08:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018d0c:	e798      	b.n	8018c40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8018d0e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018d12:	4283      	cmp	r3, r0
 8018d14:	f47f af42 	bne.w	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d18:	e767      	b.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d1a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018d1e:	4283      	cmp	r3, r0
 8018d20:	f43f af63 	beq.w	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d24:	d802      	bhi.n	8018d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8018d26:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018d2a:	e7f2      	b.n	8018d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8018d2c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018d30:	4283      	cmp	r3, r0
 8018d32:	d805      	bhi.n	8018d40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8018d34:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018d38:	4283      	cmp	r3, r0
 8018d3a:	f4ff af2f 	bcc.w	8018b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d3e:	e754      	b.n	8018bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d40:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018d44:	4283      	cmp	r3, r0
 8018d46:	e7af      	b.n	8018ca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8018d48:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8018d4c:	4617      	mov	r7, r2
 8018d4e:	f102 0808 	add.w	r8, r2, #8
 8018d52:	4666      	mov	r6, ip
 8018d54:	6838      	ldr	r0, [r7, #0]
 8018d56:	6879      	ldr	r1, [r7, #4]
 8018d58:	46e6      	mov	lr, ip
 8018d5a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018d5e:	3708      	adds	r7, #8
 8018d60:	4547      	cmp	r7, r8
 8018d62:	46f4      	mov	ip, lr
 8018d64:	d1f6      	bne.n	8018d54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8018d66:	6838      	ldr	r0, [r7, #0]
 8018d68:	f8ce 0000 	str.w	r0, [lr]
 8018d6c:	88b9      	ldrh	r1, [r7, #4]
 8018d6e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018d72:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8018d76:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018d7a:	d009      	beq.n	8018d90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8018d7c:	7b51      	ldrb	r1, [r2, #13]
 8018d7e:	7992      	ldrb	r2, [r2, #6]
 8018d80:	0149      	lsls	r1, r1, #5
 8018d82:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018d86:	4311      	orrs	r1, r2
 8018d88:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018d8c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8018d90:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018d94:	d00d      	beq.n	8018db2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8018d96:	442b      	add	r3, r5
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018d9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018da2:	10db      	asrs	r3, r3, #3
 8018da4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018dac:	4313      	orrs	r3, r2
 8018dae:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018db2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018db6:	00cb      	lsls	r3, r1, #3
 8018db8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018dbc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018dc0:	064f      	lsls	r7, r1, #25
 8018dc2:	ea43 0302 	orr.w	r3, r3, r2
 8018dc6:	bf44      	itt	mi
 8018dc8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018dcc:	b21b      	sxthmi	r3, r3
 8018dce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018dd2:	1b5d      	subs	r5, r3, r5
 8018dd4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018dd8:	4632      	mov	r2, r6
 8018dda:	e6fb      	b.n	8018bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018ddc:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8018de0:	4694      	mov	ip, r2
 8018de2:	f102 0908 	add.w	r9, r2, #8
 8018de6:	4676      	mov	r6, lr
 8018de8:	f8dc 0000 	ldr.w	r0, [ip]
 8018dec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8018df0:	46f0      	mov	r8, lr
 8018df2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018df6:	f10c 0c08 	add.w	ip, ip, #8
 8018dfa:	45cc      	cmp	ip, r9
 8018dfc:	46c6      	mov	lr, r8
 8018dfe:	d1f3      	bne.n	8018de8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8018e00:	f8dc 0000 	ldr.w	r0, [ip]
 8018e04:	f8c8 0000 	str.w	r0, [r8]
 8018e08:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8018e0c:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018e10:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8018e14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018e18:	d009      	beq.n	8018e2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8018e1a:	7b51      	ldrb	r1, [r2, #13]
 8018e1c:	7992      	ldrb	r2, [r2, #6]
 8018e1e:	0149      	lsls	r1, r1, #5
 8018e20:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018e24:	4311      	orrs	r1, r2
 8018e26:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018e2a:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8018e2e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018e32:	d00d      	beq.n	8018e50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018e34:	1bdb      	subs	r3, r3, r7
 8018e36:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018e3a:	b29b      	uxth	r3, r3
 8018e3c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018e40:	10db      	asrs	r3, r3, #3
 8018e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018e4a:	4313      	orrs	r3, r2
 8018e4c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018e50:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018e54:	00cb      	lsls	r3, r1, #3
 8018e56:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018e5a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018e5e:	0648      	lsls	r0, r1, #25
 8018e60:	ea43 0302 	orr.w	r3, r3, r2
 8018e64:	bf44      	itt	mi
 8018e66:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018e6a:	b21b      	sxthmi	r3, r3
 8018e6c:	e7b1      	b.n	8018dd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e74:	461e      	mov	r6, r3
 8018e76:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018e78:	4604      	mov	r4, r0
 8018e7a:	4617      	mov	r7, r2
 8018e7c:	b92b      	cbnz	r3, 8018e8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8018e7e:	4b25      	ldr	r3, [pc, #148]	; (8018f14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8018e80:	4a25      	ldr	r2, [pc, #148]	; (8018f18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8018e82:	4826      	ldr	r0, [pc, #152]	; (8018f1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8018e84:	21c0      	movs	r1, #192	; 0xc0
 8018e86:	f00b ff9d 	bl	8024dc4 <__assert_func>
 8018e8a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018e8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018e90:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018e94:	f7f8 fcb4 	bl	8011800 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e98:	4605      	mov	r5, r0
 8018e9a:	b918      	cbnz	r0, 8018ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8018e9c:	6030      	str	r0, [r6, #0]
 8018e9e:	4628      	mov	r0, r5
 8018ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ea4:	683b      	ldr	r3, [r7, #0]
 8018ea6:	4601      	mov	r1, r0
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	4638      	mov	r0, r7
 8018eac:	4798      	blx	r3
 8018eae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018eb6:	4602      	mov	r2, r0
 8018eb8:	6030      	str	r0, [r6, #0]
 8018eba:	d213      	bcs.n	8018ee4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8018ebc:	4643      	mov	r3, r8
 8018ebe:	4639      	mov	r1, r7
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f7ff fe33 	bl	8018b2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018ec6:	6030      	str	r0, [r6, #0]
 8018ec8:	6833      	ldr	r3, [r6, #0]
 8018eca:	b143      	cbz	r3, 8018ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8018ecc:	7b5a      	ldrb	r2, [r3, #13]
 8018ece:	7a9b      	ldrb	r3, [r3, #10]
 8018ed0:	0052      	lsls	r2, r2, #1
 8018ed2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018ed6:	4313      	orrs	r3, r2
 8018ed8:	bf0c      	ite	eq
 8018eda:	2301      	moveq	r3, #1
 8018edc:	2300      	movne	r3, #0
 8018ede:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018ee2:	e7dc      	b.n	8018e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8018ee4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	2b7f      	cmp	r3, #127	; 0x7f
 8018eec:	d804      	bhi.n	8018ef8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8018eee:	4639      	mov	r1, r7
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f7ff fd01 	bl	80188f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018ef6:	e7e6      	b.n	8018ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018ef8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d0e3      	beq.n	8018ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018f00:	f640 1302 	movw	r3, #2306	; 0x902
 8018f04:	429d      	cmp	r5, r3
 8018f06:	d1df      	bne.n	8018ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018f08:	4601      	mov	r1, r0
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f7ff fcc5 	bl	801889a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018f10:	e7d9      	b.n	8018ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018f12:	bf00      	nop
 8018f14:	0805393c 	.word	0x0805393c
 8018f18:	08053bae 	.word	0x08053bae
 8018f1c:	08053945 	.word	0x08053945

08018f20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f24:	461e      	mov	r6, r3
 8018f26:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018f28:	4604      	mov	r4, r0
 8018f2a:	4617      	mov	r7, r2
 8018f2c:	b92b      	cbnz	r3, 8018f3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8018f2e:	4b26      	ldr	r3, [pc, #152]	; (8018fc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8018f30:	4a26      	ldr	r2, [pc, #152]	; (8018fcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8018f32:	4827      	ldr	r0, [pc, #156]	; (8018fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8018f34:	21c0      	movs	r1, #192	; 0xc0
 8018f36:	f00b ff45 	bl	8024dc4 <__assert_func>
 8018f3a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018f3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018f40:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018f44:	f7f8 fc5c 	bl	8011800 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018f48:	4605      	mov	r5, r0
 8018f4a:	b918      	cbnz	r0, 8018f54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8018f4c:	6030      	str	r0, [r6, #0]
 8018f4e:	4628      	mov	r0, r5
 8018f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	4601      	mov	r1, r0
 8018f58:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018f5c:	4638      	mov	r0, r7
 8018f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018f62:	47c8      	blx	r9
 8018f64:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018f6c:	4602      	mov	r2, r0
 8018f6e:	6030      	str	r0, [r6, #0]
 8018f70:	d213      	bcs.n	8018f9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8018f72:	4643      	mov	r3, r8
 8018f74:	4639      	mov	r1, r7
 8018f76:	4620      	mov	r0, r4
 8018f78:	f7ff fdd8 	bl	8018b2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018f7c:	6030      	str	r0, [r6, #0]
 8018f7e:	6833      	ldr	r3, [r6, #0]
 8018f80:	b143      	cbz	r3, 8018f94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8018f82:	7b5a      	ldrb	r2, [r3, #13]
 8018f84:	7a9b      	ldrb	r3, [r3, #10]
 8018f86:	0052      	lsls	r2, r2, #1
 8018f88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018f8c:	4313      	orrs	r3, r2
 8018f8e:	bf0c      	ite	eq
 8018f90:	2301      	moveq	r3, #1
 8018f92:	2300      	movne	r3, #0
 8018f94:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018f98:	e7d9      	b.n	8018f4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8018f9a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018f9e:	b29b      	uxth	r3, r3
 8018fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8018fa2:	d804      	bhi.n	8018fae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8018fa4:	4639      	mov	r1, r7
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	f7ff fca6 	bl	80188f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018fac:	e7e6      	b.n	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8018fae:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d0e3      	beq.n	8018f7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8018fb6:	f640 1302 	movw	r3, #2306	; 0x902
 8018fba:	429d      	cmp	r5, r3
 8018fbc:	d1df      	bne.n	8018f7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8018fbe:	4601      	mov	r1, r0
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	f7ff fc6a 	bl	801889a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018fc6:	e7d9      	b.n	8018f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8018fc8:	0805393c 	.word	0x0805393c
 8018fcc:	08053bae 	.word	0x08053bae
 8018fd0:	08053945 	.word	0x08053945

08018fd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018fd4:	b510      	push	{r4, lr}
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8018fda:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018fdc:	b9d9      	cbnz	r1, 8019016 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8018fde:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018fe0:	2b0a      	cmp	r3, #10
 8018fe2:	d036      	beq.n	8019052 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	f7ff fc21 	bl	801882c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018fea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018fec:	2b09      	cmp	r3, #9
 8018fee:	d906      	bls.n	8018ffe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8018ff0:	4b18      	ldr	r3, [pc, #96]	; (8019054 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8018ff2:	4a19      	ldr	r2, [pc, #100]	; (8019058 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8018ff4:	4819      	ldr	r0, [pc, #100]	; (801905c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8018ff6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018ffa:	f00b fee3 	bl	8024dc4 <__assert_func>
 8018ffe:	1c5a      	adds	r2, r3, #1
 8019000:	8622      	strh	r2, [r4, #48]	; 0x30
 8019002:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019004:	4413      	add	r3, r2
 8019006:	b29b      	uxth	r3, r3
 8019008:	2b09      	cmp	r3, #9
 801900a:	bf88      	it	hi
 801900c:	3b0a      	subhi	r3, #10
 801900e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019012:	8358      	strh	r0, [r3, #26]
 8019014:	e7e3      	b.n	8018fde <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8019016:	2b0a      	cmp	r3, #10
 8019018:	d01b      	beq.n	8019052 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801901a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801901c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019020:	3901      	subs	r1, #1
 8019022:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8019024:	8721      	strh	r1, [r4, #56]	; 0x38
 8019026:	1c51      	adds	r1, r2, #1
 8019028:	b289      	uxth	r1, r1
 801902a:	2901      	cmp	r1, #1
 801902c:	bf8a      	itet	hi
 801902e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019032:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8019034:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8019036:	2b09      	cmp	r3, #9
 8019038:	d8da      	bhi.n	8018ff0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801903a:	1c5a      	adds	r2, r3, #1
 801903c:	8622      	strh	r2, [r4, #48]	; 0x30
 801903e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019040:	4413      	add	r3, r2
 8019042:	b29b      	uxth	r3, r3
 8019044:	2b09      	cmp	r3, #9
 8019046:	bf88      	it	hi
 8019048:	3b0a      	subhi	r3, #10
 801904a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801904e:	8358      	strh	r0, [r3, #26]
 8019050:	e7c2      	b.n	8018fd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019052:	bd10      	pop	{r4, pc}
 8019054:	08053971 	.word	0x08053971
 8019058:	08053d04 	.word	0x08053d04
 801905c:	08053945 	.word	0x08053945

08019060 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019060:	b538      	push	{r3, r4, r5, lr}
 8019062:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019064:	4604      	mov	r4, r0
 8019066:	b92a      	cbnz	r2, 8019074 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019068:	4b13      	ldr	r3, [pc, #76]	; (80190b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801906a:	4a14      	ldr	r2, [pc, #80]	; (80190bc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801906c:	4814      	ldr	r0, [pc, #80]	; (80190c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801906e:	21d5      	movs	r1, #213	; 0xd5
 8019070:	f00b fea8 	bl	8024dc4 <__assert_func>
 8019074:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019076:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801907a:	3a01      	subs	r2, #1
 801907c:	8b4d      	ldrh	r5, [r1, #26]
 801907e:	8602      	strh	r2, [r0, #48]	; 0x30
 8019080:	1c5a      	adds	r2, r3, #1
 8019082:	b292      	uxth	r2, r2
 8019084:	2a09      	cmp	r2, #9
 8019086:	bf86      	itte	hi
 8019088:	3b09      	subhi	r3, #9
 801908a:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801908c:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801908e:	f7ff ffa1 	bl	8018fd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019092:	8b23      	ldrh	r3, [r4, #24]
 8019094:	2b01      	cmp	r3, #1
 8019096:	bf9c      	itt	ls
 8019098:	3301      	addls	r3, #1
 801909a:	8323      	strhls	r3, [r4, #24]
 801909c:	8ae3      	ldrh	r3, [r4, #22]
 801909e:	b90b      	cbnz	r3, 80190a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80190a0:	2302      	movs	r3, #2
 80190a2:	82e3      	strh	r3, [r4, #22]
 80190a4:	8ae3      	ldrh	r3, [r4, #22]
 80190a6:	3b01      	subs	r3, #1
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	82e3      	strh	r3, [r4, #22]
 80190ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80190b0:	4628      	mov	r0, r5
 80190b2:	8265      	strh	r5, [r4, #18]
 80190b4:	bd38      	pop	{r3, r4, r5, pc}
 80190b6:	bf00      	nop
 80190b8:	0805393c 	.word	0x0805393c
 80190bc:	08053c59 	.word	0x08053c59
 80190c0:	08053945 	.word	0x08053945

080190c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80190c4:	b538      	push	{r3, r4, r5, lr}
 80190c6:	428a      	cmp	r2, r1
 80190c8:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 80190ca:	d90c      	bls.n	80190e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80190cc:	b92c      	cbnz	r4, 80190da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80190ce:	4b1c      	ldr	r3, [pc, #112]	; (8019140 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80190d0:	4a1c      	ldr	r2, [pc, #112]	; (8019144 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80190d2:	21e1      	movs	r1, #225	; 0xe1
 80190d4:	481c      	ldr	r0, [pc, #112]	; (8019148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80190d6:	f00b fe75 	bl	8024dc4 <__assert_func>
 80190da:	3c01      	subs	r4, #1
 80190dc:	8604      	strh	r4, [r0, #48]	; 0x30
 80190de:	4b1b      	ldr	r3, [pc, #108]	; (801914c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80190e0:	4a1b      	ldr	r2, [pc, #108]	; (8019150 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80190e2:	21c5      	movs	r1, #197	; 0xc5
 80190e4:	e7f6      	b.n	80190d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80190e6:	428c      	cmp	r4, r1
 80190e8:	d203      	bcs.n	80190f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80190ea:	4b1a      	ldr	r3, [pc, #104]	; (8019154 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80190ec:	4a1a      	ldr	r2, [pc, #104]	; (8019158 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80190ee:	21cb      	movs	r1, #203	; 0xcb
 80190f0:	e7f0      	b.n	80190d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80190f2:	1a64      	subs	r4, r4, r1
 80190f4:	8604      	strh	r4, [r0, #48]	; 0x30
 80190f6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80190f8:	4421      	add	r1, r4
 80190fa:	b289      	uxth	r1, r1
 80190fc:	2909      	cmp	r1, #9
 80190fe:	bf88      	it	hi
 8019100:	390a      	subhi	r1, #10
 8019102:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019104:	250a      	movs	r5, #10
 8019106:	b1ba      	cbz	r2, 8019138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8019108:	3a01      	subs	r2, #1
 801910a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801910c:	b292      	uxth	r2, r2
 801910e:	2909      	cmp	r1, #9
 8019110:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019114:	d903      	bls.n	801911e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8019116:	4b11      	ldr	r3, [pc, #68]	; (801915c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8019118:	4a11      	ldr	r2, [pc, #68]	; (8019160 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801911a:	21e6      	movs	r1, #230	; 0xe6
 801911c:	e7da      	b.n	80190d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801911e:	3101      	adds	r1, #1
 8019120:	8601      	strh	r1, [r0, #48]	; 0x30
 8019122:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8019124:	b901      	cbnz	r1, 8019128 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8019126:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8019128:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801912a:	3901      	subs	r1, #1
 801912c:	b289      	uxth	r1, r1
 801912e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019130:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019134:	834c      	strh	r4, [r1, #26]
 8019136:	e7e6      	b.n	8019106 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8019138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801913c:	f7ff bf4a 	b.w	8018fd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019140:	0805393c 	.word	0x0805393c
 8019144:	08053a32 	.word	0x08053a32
 8019148:	08053945 	.word	0x08053945
 801914c:	0805397d 	.word	0x0805397d
 8019150:	08053adc 	.word	0x08053adc
 8019154:	0805398b 	.word	0x0805398b
 8019158:	08053db3 	.word	0x08053db3
 801915c:	08053997 	.word	0x08053997
 8019160:	080539aa 	.word	0x080539aa

08019164 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019164:	3a01      	subs	r2, #1
 8019166:	b570      	push	{r4, r5, r6, lr}
 8019168:	b292      	uxth	r2, r2
 801916a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801916e:	42b2      	cmp	r2, r6
 8019170:	d019      	beq.n	80191a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8019172:	8b04      	ldrh	r4, [r0, #24]
 8019174:	f831 5b02 	ldrh.w	r5, [r1], #2
 8019178:	4294      	cmp	r4, r2
 801917a:	d805      	bhi.n	8019188 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801917c:	4b19      	ldr	r3, [pc, #100]	; (80191e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801917e:	4a1a      	ldr	r2, [pc, #104]	; (80191e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8019180:	481a      	ldr	r0, [pc, #104]	; (80191ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8019182:	21c5      	movs	r1, #197	; 0xc5
 8019184:	f00b fe1e 	bl	8024dc4 <__assert_func>
 8019188:	8ac4      	ldrh	r4, [r0, #22]
 801918a:	4414      	add	r4, r2
 801918c:	b2a4      	uxth	r4, r4
 801918e:	2c01      	cmp	r4, #1
 8019190:	bf88      	it	hi
 8019192:	3c02      	subhi	r4, #2
 8019194:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019198:	3a01      	subs	r2, #1
 801919a:	8a64      	ldrh	r4, [r4, #18]
 801919c:	42ac      	cmp	r4, r5
 801919e:	b292      	uxth	r2, r2
 80191a0:	d0e5      	beq.n	801916e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80191a2:	2000      	movs	r0, #0
 80191a4:	bd70      	pop	{r4, r5, r6, pc}
 80191a6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80191aa:	2400      	movs	r4, #0
 80191ac:	4413      	add	r3, r2
 80191ae:	b2a2      	uxth	r2, r4
 80191b0:	429a      	cmp	r2, r3
 80191b2:	da14      	bge.n	80191de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80191b4:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80191b6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80191ba:	4296      	cmp	r6, r2
 80191bc:	d802      	bhi.n	80191c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80191be:	4b09      	ldr	r3, [pc, #36]	; (80191e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80191c0:	4a0b      	ldr	r2, [pc, #44]	; (80191f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80191c2:	e7dd      	b.n	8019180 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80191c4:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 80191c6:	4432      	add	r2, r6
 80191c8:	b292      	uxth	r2, r2
 80191ca:	2a09      	cmp	r2, #9
 80191cc:	bf88      	it	hi
 80191ce:	3a0a      	subhi	r2, #10
 80191d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80191d4:	3401      	adds	r4, #1
 80191d6:	8b52      	ldrh	r2, [r2, #26]
 80191d8:	42aa      	cmp	r2, r5
 80191da:	d0e8      	beq.n	80191ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80191dc:	e7e1      	b.n	80191a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80191de:	2001      	movs	r0, #1
 80191e0:	e7e0      	b.n	80191a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80191e2:	bf00      	nop
 80191e4:	0805397d 	.word	0x0805397d
 80191e8:	08053e37 	.word	0x08053e37
 80191ec:	08053945 	.word	0x08053945
 80191f0:	08053adc 	.word	0x08053adc

080191f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80191f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191f8:	4605      	mov	r5, r0
 80191fa:	4616      	mov	r6, r2
 80191fc:	1c8c      	adds	r4, r1, #2
 80191fe:	8809      	ldrh	r1, [r1, #0]
 8019200:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019204:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019208:	42b3      	cmp	r3, r6
 801920a:	d124      	bne.n	8019256 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801920c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019210:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019214:	f001 070f 	and.w	r7, r1, #15
 8019218:	f8cd 8000 	str.w	r8, [sp]
 801921c:	464b      	mov	r3, r9
 801921e:	4652      	mov	r2, sl
 8019220:	4621      	mov	r1, r4
 8019222:	4628      	mov	r0, r5
 8019224:	f7ff ff9e 	bl	8019164 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019228:	4683      	mov	fp, r0
 801922a:	b168      	cbz	r0, 8019248 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801922c:	eb0a 0109 	add.w	r1, sl, r9
 8019230:	4441      	add	r1, r8
 8019232:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019236:	463a      	mov	r2, r7
 8019238:	4649      	mov	r1, r9
 801923a:	4628      	mov	r0, r5
 801923c:	f7ff ff42 	bl	80190c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019240:	4658      	mov	r0, fp
 8019242:	b003      	add	sp, #12
 8019244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019248:	eb07 010a 	add.w	r1, r7, sl
 801924c:	4449      	add	r1, r9
 801924e:	4441      	add	r1, r8
 8019250:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019254:	e7d2      	b.n	80191fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019256:	f04f 0b00 	mov.w	fp, #0
 801925a:	e7f1      	b.n	8019240 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801925c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801925c:	b570      	push	{r4, r5, r6, lr}
 801925e:	8810      	ldrh	r0, [r2, #0]
 8019260:	4298      	cmp	r0, r3
 8019262:	d817      	bhi.n	8019294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019264:	1e48      	subs	r0, r1, #1
 8019266:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801926a:	4298      	cmp	r0, r3
 801926c:	d312      	bcc.n	8019294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801926e:	2400      	movs	r4, #0
 8019270:	428c      	cmp	r4, r1
 8019272:	d20f      	bcs.n	8019294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019274:	1860      	adds	r0, r4, r1
 8019276:	1040      	asrs	r0, r0, #1
 8019278:	0085      	lsls	r5, r0, #2
 801927a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801927e:	42b3      	cmp	r3, r6
 8019280:	d902      	bls.n	8019288 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019282:	3001      	adds	r0, #1
 8019284:	b284      	uxth	r4, r0
 8019286:	e7f3      	b.n	8019270 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019288:	d201      	bcs.n	801928e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801928a:	b281      	uxth	r1, r0
 801928c:	e7f0      	b.n	8019270 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801928e:	442a      	add	r2, r5
 8019290:	8850      	ldrh	r0, [r2, #2]
 8019292:	bd70      	pop	{r4, r5, r6, pc}
 8019294:	2000      	movs	r0, #0
 8019296:	e7fc      	b.n	8019292 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019298 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801929c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801929e:	886f      	ldrh	r7, [r5, #2]
 80192a0:	4604      	mov	r4, r0
 80192a2:	087f      	lsrs	r7, r7, #1
 80192a4:	260b      	movs	r6, #11
 80192a6:	3e01      	subs	r6, #1
 80192a8:	d01b      	beq.n	80192e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80192aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80192ac:	b92b      	cbnz	r3, 80192ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80192ae:	4b0e      	ldr	r3, [pc, #56]	; (80192e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80192b0:	4a0e      	ldr	r2, [pc, #56]	; (80192ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80192b2:	480f      	ldr	r0, [pc, #60]	; (80192f0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80192b4:	21c0      	movs	r1, #192	; 0xc0
 80192b6:	f00b fd85 	bl	8024dc4 <__assert_func>
 80192ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80192bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80192c0:	462a      	mov	r2, r5
 80192c2:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80192c6:	4639      	mov	r1, r7
 80192c8:	4643      	mov	r3, r8
 80192ca:	4620      	mov	r0, r4
 80192cc:	f7ff ffc6 	bl	801925c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80192d0:	b138      	cbz	r0, 80192e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80192d2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80192d6:	4642      	mov	r2, r8
 80192d8:	4620      	mov	r0, r4
 80192da:	f7ff ff8b 	bl	80191f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80192de:	2800      	cmp	r0, #0
 80192e0:	d1e1      	bne.n	80192a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80192e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e6:	bf00      	nop
 80192e8:	0805393c 	.word	0x0805393c
 80192ec:	08053bae 	.word	0x08053bae
 80192f0:	08053945 	.word	0x08053945

080192f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80192f4:	4b01      	ldr	r3, [pc, #4]	; (80192fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80192f6:	6018      	str	r0, [r3, #0]
 80192f8:	4770      	bx	lr
 80192fa:	bf00      	nop
 80192fc:	200013d4 	.word	0x200013d4

08019300 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019300:	4b07      	ldr	r3, [pc, #28]	; (8019320 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8019302:	881a      	ldrh	r2, [r3, #0]
 8019304:	4282      	cmp	r2, r0
 8019306:	d809      	bhi.n	801931c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019308:	4b06      	ldr	r3, [pc, #24]	; (8019324 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801930a:	881b      	ldrh	r3, [r3, #0]
 801930c:	4413      	add	r3, r2
 801930e:	4298      	cmp	r0, r3
 8019310:	da04      	bge.n	801931c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019312:	4b05      	ldr	r3, [pc, #20]	; (8019328 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801931a:	4770      	bx	lr
 801931c:	2000      	movs	r0, #0
 801931e:	4770      	bx	lr
 8019320:	200013f4 	.word	0x200013f4
 8019324:	200013f8 	.word	0x200013f8
 8019328:	200013d8 	.word	0x200013d8

0801932c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019330:	4d28      	ldr	r5, [pc, #160]	; (80193d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019332:	682b      	ldr	r3, [r5, #0]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d04a      	beq.n	80193ce <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019338:	4a27      	ldr	r2, [pc, #156]	; (80193d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801933a:	4e28      	ldr	r6, [pc, #160]	; (80193dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801933c:	8810      	ldrh	r0, [r2, #0]
 801933e:	f8b6 8000 	ldrh.w	r8, [r6]
 8019342:	4c27      	ldr	r4, [pc, #156]	; (80193e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019344:	4f27      	ldr	r7, [pc, #156]	; (80193e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019346:	4440      	add	r0, r8
 8019348:	1c41      	adds	r1, r0, #1
 801934a:	f021 0101 	bic.w	r1, r1, #1
 801934e:	0409      	lsls	r1, r1, #16
 8019350:	0c09      	lsrs	r1, r1, #16
 8019352:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8019356:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801935a:	eb03 020e 	add.w	r2, r3, lr
 801935e:	eb0e 010c 	add.w	r1, lr, ip
 8019362:	6022      	str	r2, [r4, #0]
 8019364:	185a      	adds	r2, r3, r1
 8019366:	603a      	str	r2, [r7, #0]
 8019368:	220e      	movs	r2, #14
 801936a:	fb02 f208 	mul.w	r2, r2, r8
 801936e:	3203      	adds	r2, #3
 8019370:	f022 0203 	bic.w	r2, r2, #3
 8019374:	4411      	add	r1, r2
 8019376:	440b      	add	r3, r1
 8019378:	491b      	ldr	r1, [pc, #108]	; (80193e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801937a:	600b      	str	r3, [r1, #0]
 801937c:	491b      	ldr	r1, [pc, #108]	; (80193ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801937e:	2300      	movs	r3, #0
 8019380:	800b      	strh	r3, [r1, #0]
 8019382:	491b      	ldr	r1, [pc, #108]	; (80193f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8019384:	6809      	ldr	r1, [r1, #0]
 8019386:	eba1 010e 	sub.w	r1, r1, lr
 801938a:	eba1 010c 	sub.w	r1, r1, ip
 801938e:	1a8a      	subs	r2, r1, r2
 8019390:	4918      	ldr	r1, [pc, #96]	; (80193f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8019392:	600a      	str	r2, [r1, #0]
 8019394:	4a18      	ldr	r2, [pc, #96]	; (80193f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8019396:	469c      	mov	ip, r3
 8019398:	8013      	strh	r3, [r2, #0]
 801939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801939e:	4283      	cmp	r3, r0
 80193a0:	d10d      	bne.n	80193be <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80193a2:	8835      	ldrh	r5, [r6, #0]
 80193a4:	6838      	ldr	r0, [r7, #0]
 80193a6:	2300      	movs	r3, #0
 80193a8:	240e      	movs	r4, #14
 80193aa:	429d      	cmp	r5, r3
 80193ac:	d90f      	bls.n	80193ce <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80193ae:	fb04 0203 	mla	r2, r4, r3, r0
 80193b2:	3301      	adds	r3, #1
 80193b4:	7b11      	ldrb	r1, [r2, #12]
 80193b6:	f36f 1145 	bfc	r1, #5, #1
 80193ba:	7311      	strb	r1, [r2, #12]
 80193bc:	e7f5      	b.n	80193aa <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80193be:	682a      	ldr	r2, [r5, #0]
 80193c0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80193c4:	6822      	ldr	r2, [r4, #0]
 80193c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80193ca:	3301      	adds	r3, #1
 80193cc:	e7e7      	b.n	801939e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80193ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d2:	bf00      	nop
 80193d4:	200013d8 	.word	0x200013d8
 80193d8:	200013f4 	.word	0x200013f4
 80193dc:	200013f8 	.word	0x200013f8
 80193e0:	200013ec 	.word	0x200013ec
 80193e4:	200013dc 	.word	0x200013dc
 80193e8:	200013e4 	.word	0x200013e4
 80193ec:	200013f6 	.word	0x200013f6
 80193f0:	200013e0 	.word	0x200013e0
 80193f4:	200013f0 	.word	0x200013f0
 80193f8:	200013e8 	.word	0x200013e8

080193fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80193fc:	b510      	push	{r4, lr}
 80193fe:	4b10      	ldr	r3, [pc, #64]	; (8019440 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	b9db      	cbnz	r3, 801943c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019404:	b1d1      	cbz	r1, 801943c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019406:	4b0f      	ldr	r3, [pc, #60]	; (8019444 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019408:	801a      	strh	r2, [r3, #0]
 801940a:	4b0f      	ldr	r3, [pc, #60]	; (8019448 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801940c:	881b      	ldrh	r3, [r3, #0]
 801940e:	b292      	uxth	r2, r2
 8019410:	240e      	movs	r4, #14
 8019412:	4413      	add	r3, r2
 8019414:	4362      	muls	r2, r4
 8019416:	2406      	movs	r4, #6
 8019418:	fb04 2203 	mla	r2, r4, r3, r2
 801941c:	428a      	cmp	r2, r1
 801941e:	d305      	bcc.n	801942c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019420:	4b0a      	ldr	r3, [pc, #40]	; (801944c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8019422:	4a0b      	ldr	r2, [pc, #44]	; (8019450 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8019424:	480b      	ldr	r0, [pc, #44]	; (8019454 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8019426:	2137      	movs	r1, #55	; 0x37
 8019428:	f00b fccc 	bl	8024dc4 <__assert_func>
 801942c:	4b0a      	ldr	r3, [pc, #40]	; (8019458 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801942e:	6019      	str	r1, [r3, #0]
 8019430:	4b0a      	ldr	r3, [pc, #40]	; (801945c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8019432:	6018      	str	r0, [r3, #0]
 8019434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019438:	f7ff bf78 	b.w	801932c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801943c:	bd10      	pop	{r4, pc}
 801943e:	bf00      	nop
 8019440:	200013e4 	.word	0x200013e4
 8019444:	200013f8 	.word	0x200013f8
 8019448:	200013f4 	.word	0x200013f4
 801944c:	08053f65 	.word	0x08053f65
 8019450:	08053fbe 	.word	0x08053fbe
 8019454:	08053f40 	.word	0x08053f40
 8019458:	200013e0 	.word	0x200013e0
 801945c:	200013d8 	.word	0x200013d8

08019460 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019460:	b470      	push	{r4, r5, r6}
 8019462:	4c07      	ldr	r4, [pc, #28]	; (8019480 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019464:	6826      	ldr	r6, [r4, #0]
 8019466:	4605      	mov	r5, r0
 8019468:	4610      	mov	r0, r2
 801946a:	9a03      	ldr	r2, [sp, #12]
 801946c:	b936      	cbnz	r6, 801947c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801946e:	6025      	str	r5, [r4, #0]
 8019470:	4c04      	ldr	r4, [pc, #16]	; (8019484 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019472:	8021      	strh	r1, [r4, #0]
 8019474:	bc70      	pop	{r4, r5, r6}
 8019476:	4619      	mov	r1, r3
 8019478:	f7ff bfc0 	b.w	80193fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801947c:	bc70      	pop	{r4, r5, r6}
 801947e:	4770      	bx	lr
 8019480:	200013fc 	.word	0x200013fc
 8019484:	200013f4 	.word	0x200013f4

08019488 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019488:	b508      	push	{r3, lr}
 801948a:	4b14      	ldr	r3, [pc, #80]	; (80194dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801948c:	6819      	ldr	r1, [r3, #0]
 801948e:	b931      	cbnz	r1, 801949e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019490:	4b13      	ldr	r3, [pc, #76]	; (80194e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019492:	4a14      	ldr	r2, [pc, #80]	; (80194e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019494:	4814      	ldr	r0, [pc, #80]	; (80194e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019496:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801949a:	f00b fc93 	bl	8024dc4 <__assert_func>
 801949e:	4a13      	ldr	r2, [pc, #76]	; (80194ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80194a0:	8803      	ldrh	r3, [r0, #0]
 80194a2:	8812      	ldrh	r2, [r2, #0]
 80194a4:	4293      	cmp	r3, r2
 80194a6:	d204      	bcs.n	80194b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80194a8:	2214      	movs	r2, #20
 80194aa:	fb02 1303 	mla	r3, r2, r3, r1
 80194ae:	8918      	ldrh	r0, [r3, #8]
 80194b0:	bd08      	pop	{r3, pc}
 80194b2:	490f      	ldr	r1, [pc, #60]	; (80194f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80194b4:	8809      	ldrh	r1, [r1, #0]
 80194b6:	4411      	add	r1, r2
 80194b8:	428b      	cmp	r3, r1
 80194ba:	da06      	bge.n	80194ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80194bc:	1a9b      	subs	r3, r3, r2
 80194be:	4a0d      	ldr	r2, [pc, #52]	; (80194f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80194c0:	6812      	ldr	r2, [r2, #0]
 80194c2:	210e      	movs	r1, #14
 80194c4:	fb01 2303 	mla	r3, r1, r3, r2
 80194c8:	e7f1      	b.n	80194ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80194ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80194ce:	4293      	cmp	r3, r2
 80194d0:	bf0a      	itet	eq
 80194d2:	4b09      	ldreq	r3, [pc, #36]	; (80194f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80194d4:	2000      	movne	r0, #0
 80194d6:	8818      	ldrheq	r0, [r3, #0]
 80194d8:	e7ea      	b.n	80194b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80194da:	bf00      	nop
 80194dc:	200013fc 	.word	0x200013fc
 80194e0:	08053434 	.word	0x08053434
 80194e4:	0805406b 	.word	0x0805406b
 80194e8:	08053f40 	.word	0x08053f40
 80194ec:	200013f4 	.word	0x200013f4
 80194f0:	200013f8 	.word	0x200013f8
 80194f4:	200013dc 	.word	0x200013dc
 80194f8:	20001346 	.word	0x20001346

080194fc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80194fc:	b508      	push	{r3, lr}
 80194fe:	4b14      	ldr	r3, [pc, #80]	; (8019550 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019500:	6819      	ldr	r1, [r3, #0]
 8019502:	b931      	cbnz	r1, 8019512 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8019504:	4b13      	ldr	r3, [pc, #76]	; (8019554 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019506:	4a14      	ldr	r2, [pc, #80]	; (8019558 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019508:	4814      	ldr	r0, [pc, #80]	; (801955c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801950a:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801950e:	f00b fc59 	bl	8024dc4 <__assert_func>
 8019512:	4a13      	ldr	r2, [pc, #76]	; (8019560 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019514:	8803      	ldrh	r3, [r0, #0]
 8019516:	8812      	ldrh	r2, [r2, #0]
 8019518:	4293      	cmp	r3, r2
 801951a:	d204      	bcs.n	8019526 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801951c:	2214      	movs	r2, #20
 801951e:	fb02 1303 	mla	r3, r2, r3, r1
 8019522:	8958      	ldrh	r0, [r3, #10]
 8019524:	bd08      	pop	{r3, pc}
 8019526:	490f      	ldr	r1, [pc, #60]	; (8019564 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019528:	8809      	ldrh	r1, [r1, #0]
 801952a:	4411      	add	r1, r2
 801952c:	428b      	cmp	r3, r1
 801952e:	da06      	bge.n	801953e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019530:	1a9b      	subs	r3, r3, r2
 8019532:	4a0d      	ldr	r2, [pc, #52]	; (8019568 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8019534:	6812      	ldr	r2, [r2, #0]
 8019536:	210e      	movs	r1, #14
 8019538:	fb01 2303 	mla	r3, r1, r3, r2
 801953c:	e7f1      	b.n	8019522 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801953e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019542:	4293      	cmp	r3, r2
 8019544:	bf0a      	itet	eq
 8019546:	4b09      	ldreq	r3, [pc, #36]	; (801956c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019548:	2000      	movne	r0, #0
 801954a:	8818      	ldrheq	r0, [r3, #0]
 801954c:	e7ea      	b.n	8019524 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801954e:	bf00      	nop
 8019550:	200013fc 	.word	0x200013fc
 8019554:	08053434 	.word	0x08053434
 8019558:	08054097 	.word	0x08054097
 801955c:	08053f40 	.word	0x08053f40
 8019560:	200013f4 	.word	0x200013f4
 8019564:	200013f8 	.word	0x200013f8
 8019568:	200013dc 	.word	0x200013dc
 801956c:	20001348 	.word	0x20001348

08019570 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019570:	b510      	push	{r4, lr}
 8019572:	4b23      	ldr	r3, [pc, #140]	; (8019600 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019574:	681c      	ldr	r4, [r3, #0]
 8019576:	b934      	cbnz	r4, 8019586 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019578:	4b22      	ldr	r3, [pc, #136]	; (8019604 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801957a:	4a23      	ldr	r2, [pc, #140]	; (8019608 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801957c:	4823      	ldr	r0, [pc, #140]	; (801960c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801957e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8019582:	f00b fc1f 	bl	8024dc4 <__assert_func>
 8019586:	4a22      	ldr	r2, [pc, #136]	; (8019610 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019588:	880b      	ldrh	r3, [r1, #0]
 801958a:	8812      	ldrh	r2, [r2, #0]
 801958c:	4293      	cmp	r3, r2
 801958e:	d211      	bcs.n	80195b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019590:	2214      	movs	r2, #20
 8019592:	fb02 4303 	mla	r3, r2, r3, r4
 8019596:	8a1a      	ldrh	r2, [r3, #16]
 8019598:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801959c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80195a0:	8a5b      	ldrh	r3, [r3, #18]
 80195a2:	8004      	strh	r4, [r0, #0]
 80195a4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80195a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195ac:	8041      	strh	r1, [r0, #2]
 80195ae:	8082      	strh	r2, [r0, #4]
 80195b0:	80c3      	strh	r3, [r0, #6]
 80195b2:	e00e      	b.n	80195d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80195b4:	4917      	ldr	r1, [pc, #92]	; (8019614 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80195b6:	8809      	ldrh	r1, [r1, #0]
 80195b8:	4411      	add	r1, r2
 80195ba:	428b      	cmp	r3, r1
 80195bc:	da0a      	bge.n	80195d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80195be:	1a9b      	subs	r3, r3, r2
 80195c0:	4a15      	ldr	r2, [pc, #84]	; (8019618 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80195c2:	6812      	ldr	r2, [r2, #0]
 80195c4:	210e      	movs	r1, #14
 80195c6:	fb01 2303 	mla	r3, r1, r3, r2
 80195ca:	681a      	ldr	r2, [r3, #0]
 80195cc:	6002      	str	r2, [r0, #0]
 80195ce:	685a      	ldr	r2, [r3, #4]
 80195d0:	6042      	str	r2, [r0, #4]
 80195d2:	bd10      	pop	{r4, pc}
 80195d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80195d8:	4293      	cmp	r3, r2
 80195da:	d10b      	bne.n	80195f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80195dc:	4b0f      	ldr	r3, [pc, #60]	; (801961c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80195de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80195e2:	4b0f      	ldr	r3, [pc, #60]	; (8019620 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80195e4:	8081      	strh	r1, [r0, #4]
 80195e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80195ea:	80c2      	strh	r2, [r0, #6]
 80195ec:	2300      	movs	r3, #0
 80195ee:	8003      	strh	r3, [r0, #0]
 80195f0:	8043      	strh	r3, [r0, #2]
 80195f2:	e7ee      	b.n	80195d2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80195f4:	2300      	movs	r3, #0
 80195f6:	8003      	strh	r3, [r0, #0]
 80195f8:	8043      	strh	r3, [r0, #2]
 80195fa:	8083      	strh	r3, [r0, #4]
 80195fc:	e7d8      	b.n	80195b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80195fe:	bf00      	nop
 8019600:	200013fc 	.word	0x200013fc
 8019604:	08053434 	.word	0x08053434
 8019608:	08054004 	.word	0x08054004
 801960c:	08053f40 	.word	0x08053f40
 8019610:	200013f4 	.word	0x200013f4
 8019614:	200013f8 	.word	0x200013f8
 8019618:	200013dc 	.word	0x200013dc
 801961c:	20001346 	.word	0x20001346
 8019620:	20001348 	.word	0x20001348

08019624 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019624:	4b18      	ldr	r3, [pc, #96]	; (8019688 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	b34b      	cbz	r3, 801967e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801962a:	4a18      	ldr	r2, [pc, #96]	; (801968c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801962c:	8800      	ldrh	r0, [r0, #0]
 801962e:	8812      	ldrh	r2, [r2, #0]
 8019630:	4290      	cmp	r0, r2
 8019632:	d211      	bcs.n	8019658 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8019634:	2214      	movs	r2, #20
 8019636:	fb02 3300 	mla	r3, r2, r0, r3
 801963a:	8a1a      	ldrh	r2, [r3, #16]
 801963c:	8919      	ldrh	r1, [r3, #8]
 801963e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019642:	428a      	cmp	r2, r1
 8019644:	db1d      	blt.n	8019682 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019646:	8a58      	ldrh	r0, [r3, #18]
 8019648:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801964c:	895b      	ldrh	r3, [r3, #10]
 801964e:	4298      	cmp	r0, r3
 8019650:	bfac      	ite	ge
 8019652:	2000      	movge	r0, #0
 8019654:	2001      	movlt	r0, #1
 8019656:	4770      	bx	lr
 8019658:	4b0d      	ldr	r3, [pc, #52]	; (8019690 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801965a:	881b      	ldrh	r3, [r3, #0]
 801965c:	4413      	add	r3, r2
 801965e:	4298      	cmp	r0, r3
 8019660:	da0d      	bge.n	801967e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019662:	4b0c      	ldr	r3, [pc, #48]	; (8019694 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	1a80      	subs	r0, r0, r2
 8019668:	220e      	movs	r2, #14
 801966a:	fb02 3300 	mla	r3, r2, r0, r3
 801966e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019672:	891a      	ldrh	r2, [r3, #8]
 8019674:	4291      	cmp	r1, r2
 8019676:	db04      	blt.n	8019682 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019678:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801967c:	e7e6      	b.n	801964c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801967e:	2000      	movs	r0, #0
 8019680:	4770      	bx	lr
 8019682:	2001      	movs	r0, #1
 8019684:	4770      	bx	lr
 8019686:	bf00      	nop
 8019688:	200013fc 	.word	0x200013fc
 801968c:	200013f4 	.word	0x200013f4
 8019690:	200013f8 	.word	0x200013f8
 8019694:	200013dc 	.word	0x200013dc

08019698 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019698:	b508      	push	{r3, lr}
 801969a:	4b12      	ldr	r3, [pc, #72]	; (80196e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801969c:	6819      	ldr	r1, [r3, #0]
 801969e:	b931      	cbnz	r1, 80196ae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80196a0:	4b11      	ldr	r3, [pc, #68]	; (80196e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80196a2:	4a12      	ldr	r2, [pc, #72]	; (80196ec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80196a4:	4812      	ldr	r0, [pc, #72]	; (80196f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80196a6:	f44f 7151 	mov.w	r1, #836	; 0x344
 80196aa:	f00b fb8b 	bl	8024dc4 <__assert_func>
 80196ae:	8803      	ldrh	r3, [r0, #0]
 80196b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196b4:	4293      	cmp	r3, r2
 80196b6:	d012      	beq.n	80196de <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80196b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196bc:	4293      	cmp	r3, r2
 80196be:	d103      	bne.n	80196c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80196c0:	4b0c      	ldr	r3, [pc, #48]	; (80196f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80196c6:	bd08      	pop	{r3, pc}
 80196c8:	4a0b      	ldr	r2, [pc, #44]	; (80196f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80196ca:	6812      	ldr	r2, [r2, #0]
 80196cc:	b11a      	cbz	r2, 80196d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80196ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80196d2:	2800      	cmp	r0, #0
 80196d4:	d1f7      	bne.n	80196c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80196d6:	2214      	movs	r2, #20
 80196d8:	4353      	muls	r3, r2
 80196da:	58c8      	ldr	r0, [r1, r3]
 80196dc:	e7f3      	b.n	80196c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80196de:	2000      	movs	r0, #0
 80196e0:	e7f1      	b.n	80196c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80196e2:	bf00      	nop
 80196e4:	200013fc 	.word	0x200013fc
 80196e8:	08053434 	.word	0x08053434
 80196ec:	0805403a 	.word	0x0805403a
 80196f0:	08053f40 	.word	0x08053f40
 80196f4:	20001354 	.word	0x20001354
 80196f8:	200013d8 	.word	0x200013d8

080196fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80196fc:	8802      	ldrh	r2, [r0, #0]
 80196fe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8019702:	429a      	cmp	r2, r3
 8019704:	d840      	bhi.n	8019788 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019706:	4b21      	ldr	r3, [pc, #132]	; (801978c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8019708:	881b      	ldrh	r3, [r3, #0]
 801970a:	429a      	cmp	r2, r3
 801970c:	d220      	bcs.n	8019750 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801970e:	4b20      	ldr	r3, [pc, #128]	; (8019790 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019710:	6819      	ldr	r1, [r3, #0]
 8019712:	2314      	movs	r3, #20
 8019714:	fb03 1302 	mla	r3, r3, r2, r1
 8019718:	6858      	ldr	r0, [r3, #4]
 801971a:	2800      	cmp	r0, #0
 801971c:	d035      	beq.n	801978a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801971e:	491d      	ldr	r1, [pc, #116]	; (8019794 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019720:	6809      	ldr	r1, [r1, #0]
 8019722:	2900      	cmp	r1, #0
 8019724:	d031      	beq.n	801978a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019726:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801972a:	b371      	cbz	r1, 801978a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801972c:	895a      	ldrh	r2, [r3, #10]
 801972e:	8918      	ldrh	r0, [r3, #8]
 8019730:	4350      	muls	r0, r2
 8019732:	7c5a      	ldrb	r2, [r3, #17]
 8019734:	7cdb      	ldrb	r3, [r3, #19]
 8019736:	0952      	lsrs	r2, r2, #5
 8019738:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801973c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019740:	2b0b      	cmp	r3, #11
 8019742:	bf18      	it	ne
 8019744:	0040      	lslne	r0, r0, #1
 8019746:	3003      	adds	r0, #3
 8019748:	f020 0003 	bic.w	r0, r0, #3
 801974c:	4408      	add	r0, r1
 801974e:	4770      	bx	lr
 8019750:	4911      	ldr	r1, [pc, #68]	; (8019798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019752:	8809      	ldrh	r1, [r1, #0]
 8019754:	4419      	add	r1, r3
 8019756:	428a      	cmp	r2, r1
 8019758:	da16      	bge.n	8019788 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801975a:	4910      	ldr	r1, [pc, #64]	; (801979c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801975c:	6809      	ldr	r1, [r1, #0]
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	200e      	movs	r0, #14
 8019762:	fb00 1303 	mla	r3, r0, r3, r1
 8019766:	7b19      	ldrb	r1, [r3, #12]
 8019768:	f001 011f 	and.w	r1, r1, #31
 801976c:	290b      	cmp	r1, #11
 801976e:	d10b      	bne.n	8019788 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019770:	8919      	ldrh	r1, [r3, #8]
 8019772:	8958      	ldrh	r0, [r3, #10]
 8019774:	4b07      	ldr	r3, [pc, #28]	; (8019794 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019776:	4348      	muls	r0, r1
 8019778:	6819      	ldr	r1, [r3, #0]
 801977a:	3003      	adds	r0, #3
 801977c:	f020 0303 	bic.w	r3, r0, #3
 8019780:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019784:	4418      	add	r0, r3
 8019786:	4770      	bx	lr
 8019788:	2000      	movs	r0, #0
 801978a:	4770      	bx	lr
 801978c:	200013f4 	.word	0x200013f4
 8019790:	200013fc 	.word	0x200013fc
 8019794:	200013d8 	.word	0x200013d8
 8019798:	200013f8 	.word	0x200013f8
 801979c:	200013dc 	.word	0x200013dc

080197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80197a0:	4b19      	ldr	r3, [pc, #100]	; (8019808 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80197a2:	6819      	ldr	r1, [r3, #0]
 80197a4:	8803      	ldrh	r3, [r0, #0]
 80197a6:	b1e9      	cbz	r1, 80197e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80197a8:	4a18      	ldr	r2, [pc, #96]	; (801980c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80197aa:	8812      	ldrh	r2, [r2, #0]
 80197ac:	429a      	cmp	r2, r3
 80197ae:	d90a      	bls.n	80197c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80197b0:	2214      	movs	r2, #20
 80197b2:	fb02 1303 	mla	r3, r2, r3, r1
 80197b6:	7c58      	ldrb	r0, [r3, #17]
 80197b8:	0942      	lsrs	r2, r0, #5
 80197ba:	7cd8      	ldrb	r0, [r3, #19]
 80197bc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80197c0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80197c4:	4770      	bx	lr
 80197c6:	4912      	ldr	r1, [pc, #72]	; (8019810 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 80197c8:	8809      	ldrh	r1, [r1, #0]
 80197ca:	4411      	add	r1, r2
 80197cc:	428b      	cmp	r3, r1
 80197ce:	da09      	bge.n	80197e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80197d0:	1a9b      	subs	r3, r3, r2
 80197d2:	4a10      	ldr	r2, [pc, #64]	; (8019814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80197d4:	6812      	ldr	r2, [r2, #0]
 80197d6:	210e      	movs	r1, #14
 80197d8:	fb01 2303 	mla	r3, r1, r3, r2
 80197dc:	7b18      	ldrb	r0, [r3, #12]
 80197de:	f000 001f 	and.w	r0, r0, #31
 80197e2:	4770      	bx	lr
 80197e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80197e8:	4293      	cmp	r3, r2
 80197ea:	d10a      	bne.n	8019802 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 80197ec:	4b0a      	ldr	r3, [pc, #40]	; (8019818 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80197f4:	b10a      	cbz	r2, 80197fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80197f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80197f8:	b900      	cbnz	r0, 80197fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80197fa:	6898      	ldr	r0, [r3, #8]
 80197fc:	6803      	ldr	r3, [r0, #0]
 80197fe:	6a1b      	ldr	r3, [r3, #32]
 8019800:	4718      	bx	r3
 8019802:	2000      	movs	r0, #0
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop
 8019808:	200013fc 	.word	0x200013fc
 801980c:	200013f4 	.word	0x200013f4
 8019810:	200013f8 	.word	0x200013f8
 8019814:	200013dc 	.word	0x200013dc
 8019818:	20001354 	.word	0x20001354

0801981c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801981c:	2010      	movs	r0, #16
 801981e:	4770      	bx	lr

08019820 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019820:	2000      	movs	r0, #0
 8019822:	4770      	bx	lr

08019824 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8019824:	00d2      	lsls	r2, r2, #3
 8019826:	0209      	lsls	r1, r1, #8
 8019828:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801982c:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8019830:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8019834:	4310      	orrs	r0, r2
 8019836:	4770      	bx	lr

08019838 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8019838:	0a09      	lsrs	r1, r1, #8
 801983a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801983e:	4770      	bx	lr

08019840 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8019840:	08c9      	lsrs	r1, r1, #3
 8019842:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8019846:	4770      	bx	lr

08019848 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8019848:	00c9      	lsls	r1, r1, #3
 801984a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801984e:	4770      	bx	lr

08019850 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019850:	2bff      	cmp	r3, #255	; 0xff
 8019852:	d050      	beq.n	80198f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019854:	2a0b      	cmp	r2, #11
 8019856:	d04a      	beq.n	80198ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019858:	d80e      	bhi.n	8019878 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801985a:	2a03      	cmp	r2, #3
 801985c:	d03f      	beq.n	80198de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801985e:	d804      	bhi.n	801986a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019860:	2a01      	cmp	r2, #1
 8019862:	d03e      	beq.n	80198e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019864:	d93f      	bls.n	80198e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019866:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019868:	4770      	bx	lr
 801986a:	2a09      	cmp	r2, #9
 801986c:	d03f      	beq.n	80198ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801986e:	d83c      	bhi.n	80198ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019870:	2a08      	cmp	r2, #8
 8019872:	d03a      	beq.n	80198ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019874:	2000      	movs	r0, #0
 8019876:	4770      	bx	lr
 8019878:	2a2f      	cmp	r2, #47	; 0x2f
 801987a:	d024      	beq.n	80198c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801987c:	d80d      	bhi.n	801989a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801987e:	2a2d      	cmp	r2, #45	; 0x2d
 8019880:	d014      	beq.n	80198ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019882:	d826      	bhi.n	80198d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019884:	2a2c      	cmp	r2, #44	; 0x2c
 8019886:	d1f5      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019888:	684b      	ldr	r3, [r1, #4]
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	2b01      	cmp	r3, #1
 801988e:	d018      	beq.n	80198c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019890:	d323      	bcc.n	80198da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019892:	2b02      	cmp	r3, #2
 8019894:	d1ee      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019896:	6880      	ldr	r0, [r0, #8]
 8019898:	4770      	bx	lr
 801989a:	2a31      	cmp	r2, #49	; 0x31
 801989c:	d004      	beq.n	80198a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801989e:	d328      	bcc.n	80198f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80198a0:	2a32      	cmp	r2, #50	; 0x32
 80198a2:	d026      	beq.n	80198f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80198a4:	2a33      	cmp	r2, #51	; 0x33
 80198a6:	d1e5      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198a8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80198aa:	4770      	bx	lr
 80198ac:	684b      	ldr	r3, [r1, #4]
 80198ae:	781b      	ldrb	r3, [r3, #0]
 80198b0:	2b01      	cmp	r3, #1
 80198b2:	d004      	beq.n	80198be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80198b4:	d30b      	bcc.n	80198ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80198b6:	2b02      	cmp	r3, #2
 80198b8:	d1dc      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198ba:	6900      	ldr	r0, [r0, #16]
 80198bc:	4770      	bx	lr
 80198be:	6a00      	ldr	r0, [r0, #32]
 80198c0:	4770      	bx	lr
 80198c2:	6980      	ldr	r0, [r0, #24]
 80198c4:	4770      	bx	lr
 80198c6:	684b      	ldr	r3, [r1, #4]
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d1d2      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80198d0:	4770      	bx	lr
 80198d2:	684b      	ldr	r3, [r1, #4]
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d1cc      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80198dc:	4770      	bx	lr
 80198de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80198e0:	4770      	bx	lr
 80198e2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80198e4:	4770      	bx	lr
 80198e6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80198e8:	4770      	bx	lr
 80198ea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80198ec:	4770      	bx	lr
 80198ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80198f0:	4770      	bx	lr
 80198f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80198f4:	4770      	bx	lr
 80198f6:	2a0b      	cmp	r2, #11
 80198f8:	d049      	beq.n	801998e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80198fa:	d80e      	bhi.n	801991a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80198fc:	2a03      	cmp	r2, #3
 80198fe:	d040      	beq.n	8019982 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019900:	d804      	bhi.n	801990c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019902:	2a01      	cmp	r2, #1
 8019904:	d03f      	beq.n	8019986 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019906:	d940      	bls.n	801998a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019908:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801990a:	4770      	bx	lr
 801990c:	2a09      	cmp	r2, #9
 801990e:	d03e      	beq.n	801998e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019910:	d801      	bhi.n	8019916 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019912:	2a08      	cmp	r2, #8
 8019914:	d1ae      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019916:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019918:	4770      	bx	lr
 801991a:	2a2f      	cmp	r2, #47	; 0x2f
 801991c:	d024      	beq.n	8019968 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801991e:	d80d      	bhi.n	801993c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019920:	2a2d      	cmp	r2, #45	; 0x2d
 8019922:	d014      	beq.n	801994e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019924:	d826      	bhi.n	8019974 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019926:	2a2c      	cmp	r2, #44	; 0x2c
 8019928:	d1a4      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801992a:	684b      	ldr	r3, [r1, #4]
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	2b01      	cmp	r3, #1
 8019930:	d018      	beq.n	8019964 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019932:	d324      	bcc.n	801997e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019934:	2b02      	cmp	r3, #2
 8019936:	d19d      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019938:	68c0      	ldr	r0, [r0, #12]
 801993a:	4770      	bx	lr
 801993c:	2a31      	cmp	r2, #49	; 0x31
 801993e:	d004      	beq.n	801994a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019940:	d327      	bcc.n	8019992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019942:	2a32      	cmp	r2, #50	; 0x32
 8019944:	d025      	beq.n	8019992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019946:	2a33      	cmp	r2, #51	; 0x33
 8019948:	d194      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801994a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801994c:	4770      	bx	lr
 801994e:	684b      	ldr	r3, [r1, #4]
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	2b01      	cmp	r3, #1
 8019954:	d004      	beq.n	8019960 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019956:	d30b      	bcc.n	8019970 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019958:	2b02      	cmp	r3, #2
 801995a:	d18b      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801995c:	6940      	ldr	r0, [r0, #20]
 801995e:	4770      	bx	lr
 8019960:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019962:	4770      	bx	lr
 8019964:	69c0      	ldr	r0, [r0, #28]
 8019966:	4770      	bx	lr
 8019968:	684b      	ldr	r3, [r1, #4]
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d181      	bne.n	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019970:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019972:	4770      	bx	lr
 8019974:	684b      	ldr	r3, [r1, #4]
 8019976:	781b      	ldrb	r3, [r3, #0]
 8019978:	2b00      	cmp	r3, #0
 801997a:	f47f af7b 	bne.w	8019874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801997e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019980:	4770      	bx	lr
 8019982:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019984:	4770      	bx	lr
 8019986:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019988:	4770      	bx	lr
 801998a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801998c:	4770      	bx	lr
 801998e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019990:	4770      	bx	lr
 8019992:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019994:	4770      	bx	lr

08019996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801999a:	b087      	sub	sp, #28
 801999c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801999e:	9205      	str	r2, [sp, #20]
 80199a0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80199a4:	9202      	str	r2, [sp, #8]
 80199a6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80199aa:	9101      	str	r1, [sp, #4]
 80199ac:	6871      	ldr	r1, [r6, #4]
 80199ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80199b0:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 80199b4:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80199b8:	fb01 2505 	mla	r5, r1, r5, r2
 80199bc:	6832      	ldr	r2, [r6, #0]
 80199be:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80199c2:	6802      	ldr	r2, [r0, #0]
 80199c4:	9203      	str	r2, [sp, #12]
 80199c6:	6842      	ldr	r2, [r0, #4]
 80199c8:	fa1f fe84 	uxth.w	lr, r4
 80199cc:	3204      	adds	r2, #4
 80199ce:	43e4      	mvns	r4, r4
 80199d0:	9204      	str	r2, [sp, #16]
 80199d2:	b2e4      	uxtb	r4, r4
 80199d4:	9a01      	ldr	r2, [sp, #4]
 80199d6:	2a00      	cmp	r2, #0
 80199d8:	dc03      	bgt.n	80199e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80199da:	9a05      	ldr	r2, [sp, #20]
 80199dc:	2a00      	cmp	r2, #0
 80199de:	f340 8119 	ble.w	8019c14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 80199e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80199e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80199ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	dd0f      	ble.n	8019a12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80199f2:	1408      	asrs	r0, r1, #16
 80199f4:	d406      	bmi.n	8019a04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80199f6:	4540      	cmp	r0, r8
 80199f8:	da04      	bge.n	8019a04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80199fa:	1410      	asrs	r0, r2, #16
 80199fc:	d402      	bmi.n	8019a04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80199fe:	9e02      	ldr	r6, [sp, #8]
 8019a00:	42b0      	cmp	r0, r6
 8019a02:	db07      	blt.n	8019a14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019a04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a06:	4401      	add	r1, r0
 8019a08:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	4402      	add	r2, r0
 8019a0e:	3502      	adds	r5, #2
 8019a10:	e7ed      	b.n	80199ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019a12:	d00f      	beq.n	8019a34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019a14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019a16:	1e58      	subs	r0, r3, #1
 8019a18:	fb06 1600 	mla	r6, r6, r0, r1
 8019a1c:	1436      	asrs	r6, r6, #16
 8019a1e:	d547      	bpl.n	8019ab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8019a20:	469b      	mov	fp, r3
 8019a22:	46aa      	mov	sl, r5
 8019a24:	f1bb 0f00 	cmp.w	fp, #0
 8019a28:	f300 809e 	bgt.w	8019b68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8019a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a30:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019a34:	9b01      	ldr	r3, [sp, #4]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	f340 80ec 	ble.w	8019c14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8019a3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a56:	eef0 6a62 	vmov.f32	s13, s5
 8019a5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a66:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019a6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a6e:	eef0 6a43 	vmov.f32	s13, s6
 8019a72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a76:	ee12 2a90 	vmov	r2, s5
 8019a7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a82:	ee13 2a10 	vmov	r2, s6
 8019a86:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a8e:	9314      	str	r3, [sp, #80]	; 0x50
 8019a90:	9b01      	ldr	r3, [sp, #4]
 8019a92:	9a05      	ldr	r2, [sp, #20]
 8019a94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	9301      	str	r3, [sp, #4]
 8019a9c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019aa2:	eeb0 3a67 	vmov.f32	s6, s15
 8019aa6:	bf08      	it	eq
 8019aa8:	4613      	moveq	r3, r2
 8019aaa:	eef0 2a47 	vmov.f32	s5, s14
 8019aae:	e791      	b.n	80199d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019ab0:	4546      	cmp	r6, r8
 8019ab2:	dab5      	bge.n	8019a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019ab4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019ab6:	fb06 2000 	mla	r0, r6, r0, r2
 8019aba:	1400      	asrs	r0, r0, #16
 8019abc:	d4b0      	bmi.n	8019a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019abe:	9e02      	ldr	r6, [sp, #8]
 8019ac0:	42b0      	cmp	r0, r6
 8019ac2:	daad      	bge.n	8019a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019ac4:	469a      	mov	sl, r3
 8019ac6:	46ab      	mov	fp, r5
 8019ac8:	f1ba 0f00 	cmp.w	sl, #0
 8019acc:	ddae      	ble.n	8019a2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019ace:	9f03      	ldr	r7, [sp, #12]
 8019ad0:	1410      	asrs	r0, r2, #16
 8019ad2:	140e      	asrs	r6, r1, #16
 8019ad4:	fb08 7000 	mla	r0, r8, r0, r7
 8019ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019adc:	5d80      	ldrb	r0, [r0, r6]
 8019ade:	9e04      	ldr	r6, [sp, #16]
 8019ae0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019ae4:	f8bb 6000 	ldrh.w	r6, [fp]
 8019ae8:	1237      	asrs	r7, r6, #8
 8019aea:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019aee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019af2:	fb17 f704 	smulbb	r7, r7, r4
 8019af6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8019afa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019afe:	00f6      	lsls	r6, r6, #3
 8019b00:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8019b04:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019b08:	10c7      	asrs	r7, r0, #3
 8019b0a:	b2f6      	uxtb	r6, r6
 8019b0c:	00c0      	lsls	r0, r0, #3
 8019b0e:	fb19 f904 	smulbb	r9, r9, r4
 8019b12:	fb16 f604 	smulbb	r6, r6, r4
 8019b16:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019b1a:	b2c0      	uxtb	r0, r0
 8019b1c:	fa1f fc8c 	uxth.w	ip, ip
 8019b20:	fb07 970e 	mla	r7, r7, lr, r9
 8019b24:	fb00 600e 	mla	r0, r0, lr, r6
 8019b28:	b280      	uxth	r0, r0
 8019b2a:	b2bf      	uxth	r7, r7
 8019b2c:	f10c 0601 	add.w	r6, ip, #1
 8019b30:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019b34:	f107 0901 	add.w	r9, r7, #1
 8019b38:	1c46      	adds	r6, r0, #1
 8019b3a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8019b3e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019b42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b44:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019b48:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019b4c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019b50:	ea4c 0c06 	orr.w	ip, ip, r6
 8019b54:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019b58:	4401      	add	r1, r0
 8019b5a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019b5c:	ea4c 0c09 	orr.w	ip, ip, r9
 8019b60:	f82b cb02 	strh.w	ip, [fp], #2
 8019b64:	4402      	add	r2, r0
 8019b66:	e7af      	b.n	8019ac8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019b68:	140e      	asrs	r6, r1, #16
 8019b6a:	d44a      	bmi.n	8019c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019b6c:	4546      	cmp	r6, r8
 8019b6e:	da48      	bge.n	8019c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019b70:	1410      	asrs	r0, r2, #16
 8019b72:	d446      	bmi.n	8019c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019b74:	9f02      	ldr	r7, [sp, #8]
 8019b76:	42b8      	cmp	r0, r7
 8019b78:	da43      	bge.n	8019c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019b7a:	9f03      	ldr	r7, [sp, #12]
 8019b7c:	fb08 7000 	mla	r0, r8, r0, r7
 8019b80:	5d80      	ldrb	r0, [r0, r6]
 8019b82:	9e04      	ldr	r6, [sp, #16]
 8019b84:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019b88:	f8ba 6000 	ldrh.w	r6, [sl]
 8019b8c:	1237      	asrs	r7, r6, #8
 8019b8e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019b92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019b96:	fb17 f704 	smulbb	r7, r7, r4
 8019b9a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8019b9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019ba2:	00f6      	lsls	r6, r6, #3
 8019ba4:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8019ba8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019bac:	10c7      	asrs	r7, r0, #3
 8019bae:	b2f6      	uxtb	r6, r6
 8019bb0:	00c0      	lsls	r0, r0, #3
 8019bb2:	fb19 f904 	smulbb	r9, r9, r4
 8019bb6:	fb16 f604 	smulbb	r6, r6, r4
 8019bba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019bbe:	b2c0      	uxtb	r0, r0
 8019bc0:	fa1f fc8c 	uxth.w	ip, ip
 8019bc4:	fb07 970e 	mla	r7, r7, lr, r9
 8019bc8:	fb00 600e 	mla	r0, r0, lr, r6
 8019bcc:	b2bf      	uxth	r7, r7
 8019bce:	b280      	uxth	r0, r0
 8019bd0:	f10c 0601 	add.w	r6, ip, #1
 8019bd4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019bd8:	f107 0901 	add.w	r9, r7, #1
 8019bdc:	1c46      	adds	r6, r0, #1
 8019bde:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8019be2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019be6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019bea:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019bee:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019bf2:	ea4c 0c06 	orr.w	ip, ip, r6
 8019bf6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019bfa:	ea4c 0c09 	orr.w	ip, ip, r9
 8019bfe:	f8aa c000 	strh.w	ip, [sl]
 8019c02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c04:	4401      	add	r1, r0
 8019c06:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c08:	f10a 0a02 	add.w	sl, sl, #2
 8019c0c:	4402      	add	r2, r0
 8019c0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019c12:	e707      	b.n	8019a24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8019c14:	b007      	add	sp, #28
 8019c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c1e:	b085      	sub	sp, #20
 8019c20:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8019c24:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c26:	9203      	str	r2, [sp, #12]
 8019c28:	6842      	ldr	r2, [r0, #4]
 8019c2a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019c2c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019c2e:	6800      	ldr	r0, [r0, #0]
 8019c30:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8019c34:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019c38:	4696      	mov	lr, r2
 8019c3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c3c:	fb0e 2505 	mla	r5, lr, r5, r2
 8019c40:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019c44:	6860      	ldr	r0, [r4, #4]
 8019c46:	6822      	ldr	r2, [r4, #0]
 8019c48:	9201      	str	r2, [sp, #4]
 8019c4a:	1d02      	adds	r2, r0, #4
 8019c4c:	9202      	str	r2, [sp, #8]
 8019c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c52:	2900      	cmp	r1, #0
 8019c54:	dc03      	bgt.n	8019c5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8019c56:	9a03      	ldr	r2, [sp, #12]
 8019c58:	2a00      	cmp	r2, #0
 8019c5a:	f340 809b 	ble.w	8019d94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8019c5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c60:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	dd0e      	ble.n	8019c8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019c6e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019c72:	d406      	bmi.n	8019c82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019c74:	45e6      	cmp	lr, ip
 8019c76:	da04      	bge.n	8019c82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019c78:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8019c7c:	d401      	bmi.n	8019c82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019c7e:	45c6      	cmp	lr, r8
 8019c80:	db05      	blt.n	8019c8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019c82:	443c      	add	r4, r7
 8019c84:	4430      	add	r0, r6
 8019c86:	3b01      	subs	r3, #1
 8019c88:	3502      	adds	r5, #2
 8019c8a:	e7ee      	b.n	8019c6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8019c8c:	d010      	beq.n	8019cb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019c8e:	f103 3eff 	add.w	lr, r3, #4294967295
 8019c92:	fb07 490e 	mla	r9, r7, lr, r4
 8019c96:	ea5f 4929 	movs.w	r9, r9, asr #16
 8019c9a:	d53d      	bpl.n	8019d18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8019c9c:	469e      	mov	lr, r3
 8019c9e:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8019ca2:	f1be 0f00 	cmp.w	lr, #0
 8019ca6:	dc58      	bgt.n	8019d5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019ca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cac:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019cb0:	2900      	cmp	r1, #0
 8019cb2:	dd6f      	ble.n	8019d94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8019cb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cc2:	3901      	subs	r1, #1
 8019cc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ccc:	eeb0 6a62 	vmov.f32	s12, s5
 8019cd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cdc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019ce0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ce4:	eeb0 6a43 	vmov.f32	s12, s6
 8019ce8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cec:	ee12 2a90 	vmov	r2, s5
 8019cf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cf4:	fb92 f7f3 	sdiv	r7, r2, r3
 8019cf8:	ee13 2a10 	vmov	r2, s6
 8019cfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d00:	fb92 f6f3 	sdiv	r6, r2, r3
 8019d04:	9a03      	ldr	r2, [sp, #12]
 8019d06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019d0a:	bf08      	it	eq
 8019d0c:	4613      	moveq	r3, r2
 8019d0e:	eeb0 3a67 	vmov.f32	s6, s15
 8019d12:	eef0 2a47 	vmov.f32	s5, s14
 8019d16:	e79c      	b.n	8019c52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8019d18:	45e1      	cmp	r9, ip
 8019d1a:	dabf      	bge.n	8019c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d1c:	fb06 0e0e 	mla	lr, r6, lr, r0
 8019d20:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019d24:	d4ba      	bmi.n	8019c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d26:	45c6      	cmp	lr, r8
 8019d28:	dab8      	bge.n	8019c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d2a:	469e      	mov	lr, r3
 8019d2c:	46aa      	mov	sl, r5
 8019d2e:	f1be 0f00 	cmp.w	lr, #0
 8019d32:	ddb9      	ble.n	8019ca8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8019d34:	9a01      	ldr	r2, [sp, #4]
 8019d36:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019d3a:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8019d3e:	fb0c 2909 	mla	r9, ip, r9, r2
 8019d42:	9a02      	ldr	r2, [sp, #8]
 8019d44:	f819 900b 	ldrb.w	r9, [r9, fp]
 8019d48:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8019d4c:	f82a 9b02 	strh.w	r9, [sl], #2
 8019d50:	443c      	add	r4, r7
 8019d52:	4430      	add	r0, r6
 8019d54:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019d58:	e7e9      	b.n	8019d2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8019d5a:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8019d5e:	d414      	bmi.n	8019d8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019d60:	45e2      	cmp	sl, ip
 8019d62:	da12      	bge.n	8019d8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019d64:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019d68:	d40f      	bmi.n	8019d8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019d6a:	45c1      	cmp	r9, r8
 8019d6c:	da0d      	bge.n	8019d8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019d6e:	9a01      	ldr	r2, [sp, #4]
 8019d70:	fb0c 2909 	mla	r9, ip, r9, r2
 8019d74:	9a02      	ldr	r2, [sp, #8]
 8019d76:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019d7a:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 8019d7e:	f06f 0201 	mvn.w	r2, #1
 8019d82:	fb02 f90e 	mul.w	r9, r2, lr
 8019d86:	f82b a009 	strh.w	sl, [fp, r9]
 8019d8a:	443c      	add	r4, r7
 8019d8c:	4430      	add	r0, r6
 8019d8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019d92:	e786      	b.n	8019ca2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8019d94:	b005      	add	sp, #20
 8019d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d9e:	b087      	sub	sp, #28
 8019da0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019da2:	9205      	str	r2, [sp, #20]
 8019da4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8019da8:	9202      	str	r2, [sp, #8]
 8019daa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019dae:	9101      	str	r1, [sp, #4]
 8019db0:	6871      	ldr	r1, [r6, #4]
 8019db2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8019db4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8019db8:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8019dbc:	fb01 2404 	mla	r4, r1, r4, r2
 8019dc0:	6832      	ldr	r2, [r6, #0]
 8019dc2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019dc6:	682a      	ldr	r2, [r5, #0]
 8019dc8:	9203      	str	r2, [sp, #12]
 8019dca:	686a      	ldr	r2, [r5, #4]
 8019dcc:	fa1f fc80 	uxth.w	ip, r0
 8019dd0:	3204      	adds	r2, #4
 8019dd2:	43c0      	mvns	r0, r0
 8019dd4:	9200      	str	r2, [sp, #0]
 8019dd6:	b2c0      	uxtb	r0, r0
 8019dd8:	9a01      	ldr	r2, [sp, #4]
 8019dda:	2a00      	cmp	r2, #0
 8019ddc:	dc03      	bgt.n	8019de6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019dde:	9a05      	ldr	r2, [sp, #20]
 8019de0:	2a00      	cmp	r2, #0
 8019de2:	f340 811b 	ble.w	801a01c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019de6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019de8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019dee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	dd0f      	ble.n	8019e16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019df6:	140d      	asrs	r5, r1, #16
 8019df8:	d406      	bmi.n	8019e08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019dfa:	4575      	cmp	r5, lr
 8019dfc:	da04      	bge.n	8019e08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019dfe:	1415      	asrs	r5, r2, #16
 8019e00:	d402      	bmi.n	8019e08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019e02:	9e02      	ldr	r6, [sp, #8]
 8019e04:	42b5      	cmp	r5, r6
 8019e06:	db07      	blt.n	8019e18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019e08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019e0a:	4429      	add	r1, r5
 8019e0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019e0e:	3b01      	subs	r3, #1
 8019e10:	442a      	add	r2, r5
 8019e12:	3402      	adds	r4, #2
 8019e14:	e7ed      	b.n	8019df2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019e16:	d00f      	beq.n	8019e38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019e18:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e1a:	1e5d      	subs	r5, r3, #1
 8019e1c:	fb06 1605 	mla	r6, r6, r5, r1
 8019e20:	1436      	asrs	r6, r6, #16
 8019e22:	d547      	bpl.n	8019eb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8019e24:	469a      	mov	sl, r3
 8019e26:	46a1      	mov	r9, r4
 8019e28:	f1ba 0f00 	cmp.w	sl, #0
 8019e2c:	f300 809f 	bgt.w	8019f6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8019e30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e38:	9b01      	ldr	r3, [sp, #4]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	f340 80ee 	ble.w	801a01c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019e40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e5a:	eef0 6a62 	vmov.f32	s13, s5
 8019e5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e6a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019e6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e72:	eef0 6a43 	vmov.f32	s13, s6
 8019e76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e7a:	ee12 2a90 	vmov	r2, s5
 8019e7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e86:	ee13 2a10 	vmov	r2, s6
 8019e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e92:	9314      	str	r3, [sp, #80]	; 0x50
 8019e94:	9b01      	ldr	r3, [sp, #4]
 8019e96:	9a05      	ldr	r2, [sp, #20]
 8019e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	9301      	str	r3, [sp, #4]
 8019ea0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ea6:	eeb0 3a67 	vmov.f32	s6, s15
 8019eaa:	bf08      	it	eq
 8019eac:	4613      	moveq	r3, r2
 8019eae:	eef0 2a47 	vmov.f32	s5, s14
 8019eb2:	e791      	b.n	8019dd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019eb4:	4576      	cmp	r6, lr
 8019eb6:	dab5      	bge.n	8019e24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019eb8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019eba:	fb06 2505 	mla	r5, r6, r5, r2
 8019ebe:	142d      	asrs	r5, r5, #16
 8019ec0:	d4b0      	bmi.n	8019e24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019ec2:	9e02      	ldr	r6, [sp, #8]
 8019ec4:	42b5      	cmp	r5, r6
 8019ec6:	daad      	bge.n	8019e24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019ec8:	4699      	mov	r9, r3
 8019eca:	46a2      	mov	sl, r4
 8019ecc:	f1b9 0f00 	cmp.w	r9, #0
 8019ed0:	ddae      	ble.n	8019e30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019ed2:	9f03      	ldr	r7, [sp, #12]
 8019ed4:	1415      	asrs	r5, r2, #16
 8019ed6:	140e      	asrs	r6, r1, #16
 8019ed8:	fb0e 7505 	mla	r5, lr, r5, r7
 8019edc:	f109 39ff 	add.w	r9, r9, #4294967295
 8019ee0:	f815 8006 	ldrb.w	r8, [r5, r6]
 8019ee4:	9d00      	ldr	r5, [sp, #0]
 8019ee6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019eea:	eb05 0b08 	add.w	fp, r5, r8
 8019eee:	f8ba 5000 	ldrh.w	r5, [sl]
 8019ef2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019ef6:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019efa:	122f      	asrs	r7, r5, #8
 8019efc:	fb16 f60c 	smulbb	r6, r6, ip
 8019f00:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019f04:	fb07 6700 	mla	r7, r7, r0, r6
 8019f08:	10ee      	asrs	r6, r5, #3
 8019f0a:	fb1b fb0c 	smulbb	fp, fp, ip
 8019f0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019f12:	fb06 b600 	mla	r6, r6, r0, fp
 8019f16:	b2b6      	uxth	r6, r6
 8019f18:	9604      	str	r6, [sp, #16]
 8019f1a:	9e00      	ldr	r6, [sp, #0]
 8019f1c:	00ed      	lsls	r5, r5, #3
 8019f1e:	f816 8008 	ldrb.w	r8, [r6, r8]
 8019f22:	b2ed      	uxtb	r5, r5
 8019f24:	fb15 f500 	smulbb	r5, r5, r0
 8019f28:	b2bf      	uxth	r7, r7
 8019f2a:	fb08 580c 	mla	r8, r8, ip, r5
 8019f2e:	fa1f f888 	uxth.w	r8, r8
 8019f32:	1c7d      	adds	r5, r7, #1
 8019f34:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8019f38:	f108 0501 	add.w	r5, r8, #1
 8019f3c:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8019f40:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019f44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019f48:	432f      	orrs	r7, r5
 8019f4a:	9d04      	ldr	r5, [sp, #16]
 8019f4c:	f105 0b01 	add.w	fp, r5, #1
 8019f50:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8019f54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019f56:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019f5a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019f5e:	4429      	add	r1, r5
 8019f60:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019f62:	ea47 070b 	orr.w	r7, r7, fp
 8019f66:	f82a 7b02 	strh.w	r7, [sl], #2
 8019f6a:	442a      	add	r2, r5
 8019f6c:	e7ae      	b.n	8019ecc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019f6e:	140e      	asrs	r6, r1, #16
 8019f70:	d44b      	bmi.n	801a00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019f72:	4576      	cmp	r6, lr
 8019f74:	da49      	bge.n	801a00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019f76:	1415      	asrs	r5, r2, #16
 8019f78:	d447      	bmi.n	801a00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019f7a:	9f02      	ldr	r7, [sp, #8]
 8019f7c:	42bd      	cmp	r5, r7
 8019f7e:	da44      	bge.n	801a00a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019f80:	9f03      	ldr	r7, [sp, #12]
 8019f82:	fb0e 7505 	mla	r5, lr, r5, r7
 8019f86:	f815 8006 	ldrb.w	r8, [r5, r6]
 8019f8a:	9d00      	ldr	r5, [sp, #0]
 8019f8c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019f90:	eb05 0b08 	add.w	fp, r5, r8
 8019f94:	f8b9 5000 	ldrh.w	r5, [r9]
 8019f98:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019f9c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019fa0:	122f      	asrs	r7, r5, #8
 8019fa2:	fb16 f60c 	smulbb	r6, r6, ip
 8019fa6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019faa:	fb07 6700 	mla	r7, r7, r0, r6
 8019fae:	10ee      	asrs	r6, r5, #3
 8019fb0:	fb1b fb0c 	smulbb	fp, fp, ip
 8019fb4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019fb8:	fb06 b600 	mla	r6, r6, r0, fp
 8019fbc:	b2b6      	uxth	r6, r6
 8019fbe:	9604      	str	r6, [sp, #16]
 8019fc0:	9e00      	ldr	r6, [sp, #0]
 8019fc2:	00ed      	lsls	r5, r5, #3
 8019fc4:	f816 8008 	ldrb.w	r8, [r6, r8]
 8019fc8:	b2ed      	uxtb	r5, r5
 8019fca:	fb15 f500 	smulbb	r5, r5, r0
 8019fce:	b2bf      	uxth	r7, r7
 8019fd0:	fb08 580c 	mla	r8, r8, ip, r5
 8019fd4:	fa1f f888 	uxth.w	r8, r8
 8019fd8:	1c7d      	adds	r5, r7, #1
 8019fda:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8019fde:	f108 0501 	add.w	r5, r8, #1
 8019fe2:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8019fe6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019fea:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019fee:	432f      	orrs	r7, r5
 8019ff0:	9d04      	ldr	r5, [sp, #16]
 8019ff2:	f105 0b01 	add.w	fp, r5, #1
 8019ff6:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8019ffa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019ffe:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a002:	ea47 070b 	orr.w	r7, r7, fp
 801a006:	f8a9 7000 	strh.w	r7, [r9]
 801a00a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a00c:	4429      	add	r1, r5
 801a00e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a010:	f109 0902 	add.w	r9, r9, #2
 801a014:	442a      	add	r2, r5
 801a016:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a01a:	e705      	b.n	8019e28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801a01c:	b007      	add	sp, #28
 801a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a028:	b085      	sub	sp, #20
 801a02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a02e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a030:	9203      	str	r2, [sp, #12]
 801a032:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a036:	6870      	ldr	r0, [r6, #4]
 801a038:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a03a:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 801a03e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801a042:	9101      	str	r1, [sp, #4]
 801a044:	fb00 2404 	mla	r4, r0, r4, r2
 801a048:	6832      	ldr	r2, [r6, #0]
 801a04a:	686e      	ldr	r6, [r5, #4]
 801a04c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a050:	682a      	ldr	r2, [r5, #0]
 801a052:	9202      	str	r2, [sp, #8]
 801a054:	3604      	adds	r6, #4
 801a056:	9a01      	ldr	r2, [sp, #4]
 801a058:	2a00      	cmp	r2, #0
 801a05a:	dc03      	bgt.n	801a064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801a05c:	9a03      	ldr	r2, [sp, #12]
 801a05e:	2a00      	cmp	r2, #0
 801a060:	f340 80c7 	ble.w	801a1f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801a064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a066:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a06a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a06c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a070:	2b00      	cmp	r3, #0
 801a072:	dd0e      	ble.n	801a092 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a074:	1405      	asrs	r5, r0, #16
 801a076:	d405      	bmi.n	801a084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a078:	42bd      	cmp	r5, r7
 801a07a:	da03      	bge.n	801a084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a07c:	1415      	asrs	r5, r2, #16
 801a07e:	d401      	bmi.n	801a084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a080:	4545      	cmp	r5, r8
 801a082:	db07      	blt.n	801a094 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a084:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a086:	4428      	add	r0, r5
 801a088:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a08a:	3b01      	subs	r3, #1
 801a08c:	442a      	add	r2, r5
 801a08e:	3402      	adds	r4, #2
 801a090:	e7ee      	b.n	801a070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801a092:	d010      	beq.n	801a0b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a094:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a096:	1e5d      	subs	r5, r3, #1
 801a098:	fb01 0c05 	mla	ip, r1, r5, r0
 801a09c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801a0a0:	d545      	bpl.n	801a12e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801a0a2:	469e      	mov	lr, r3
 801a0a4:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 801a0a8:	f1be 0f00 	cmp.w	lr, #0
 801a0ac:	dc72      	bgt.n	801a194 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801a0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0b2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a0b6:	9b01      	ldr	r3, [sp, #4]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	f340 809a 	ble.w	801a1f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801a0be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a0ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0d4:	eeb0 6a62 	vmov.f32	s12, s5
 801a0d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a0dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0e4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a0e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0ec:	eeb0 6a43 	vmov.f32	s12, s6
 801a0f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0f4:	ee12 2a90 	vmov	r2, s5
 801a0f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a100:	ee13 2a10 	vmov	r2, s6
 801a104:	9311      	str	r3, [sp, #68]	; 0x44
 801a106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a108:	fb92 f3f3 	sdiv	r3, r2, r3
 801a10c:	9312      	str	r3, [sp, #72]	; 0x48
 801a10e:	9b01      	ldr	r3, [sp, #4]
 801a110:	9a03      	ldr	r2, [sp, #12]
 801a112:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a116:	3b01      	subs	r3, #1
 801a118:	9301      	str	r3, [sp, #4]
 801a11a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a120:	eeb0 3a67 	vmov.f32	s6, s15
 801a124:	bf08      	it	eq
 801a126:	4613      	moveq	r3, r2
 801a128:	eef0 2a47 	vmov.f32	s5, s14
 801a12c:	e793      	b.n	801a056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 801a12e:	45bc      	cmp	ip, r7
 801a130:	dab7      	bge.n	801a0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a132:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a134:	fb01 2505 	mla	r5, r1, r5, r2
 801a138:	142d      	asrs	r5, r5, #16
 801a13a:	d4b2      	bmi.n	801a0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a13c:	4545      	cmp	r5, r8
 801a13e:	dab0      	bge.n	801a0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a140:	469e      	mov	lr, r3
 801a142:	46a2      	mov	sl, r4
 801a144:	f1be 0f00 	cmp.w	lr, #0
 801a148:	ddb1      	ble.n	801a0ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a14a:	9902      	ldr	r1, [sp, #8]
 801a14c:	1415      	asrs	r5, r2, #16
 801a14e:	fb07 1505 	mla	r5, r7, r5, r1
 801a152:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a156:	4928      	ldr	r1, [pc, #160]	; (801a1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 801a158:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801a15c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a160:	eb06 0b0c 	add.w	fp, r6, ip
 801a164:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a168:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801a16c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a170:	00ed      	lsls	r5, r5, #3
 801a172:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a176:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a17a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a17c:	ea49 0505 	orr.w	r5, r9, r5
 801a180:	f816 900c 	ldrb.w	r9, [r6, ip]
 801a184:	4408      	add	r0, r1
 801a186:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a188:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 801a18c:	f82a 5b02 	strh.w	r5, [sl], #2
 801a190:	440a      	add	r2, r1
 801a192:	e7d7      	b.n	801a144 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 801a194:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801a198:	d424      	bmi.n	801a1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a19a:	45bc      	cmp	ip, r7
 801a19c:	da22      	bge.n	801a1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a19e:	1415      	asrs	r5, r2, #16
 801a1a0:	d420      	bmi.n	801a1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1a2:	4545      	cmp	r5, r8
 801a1a4:	da1e      	bge.n	801a1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1a6:	9902      	ldr	r1, [sp, #8]
 801a1a8:	fb07 1505 	mla	r5, r7, r5, r1
 801a1ac:	f06f 0101 	mvn.w	r1, #1
 801a1b0:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801a1b4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a1b8:	eb06 050c 	add.w	r5, r6, ip
 801a1bc:	fb01 f90e 	mul.w	r9, r1, lr
 801a1c0:	f895 a002 	ldrb.w	sl, [r5, #2]
 801a1c4:	786d      	ldrb	r5, [r5, #1]
 801a1c6:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a1ca:	00ed      	lsls	r5, r5, #3
 801a1cc:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 801a1d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a1d4:	ea4a 0505 	orr.w	r5, sl, r5
 801a1d8:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801a1dc:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 801a1e0:	f82b 5009 	strh.w	r5, [fp, r9]
 801a1e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a1e6:	4408      	add	r0, r1
 801a1e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a1ea:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a1ee:	440a      	add	r2, r1
 801a1f0:	e75a      	b.n	801a0a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801a1f2:	b005      	add	sp, #20
 801a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1f8:	fffff800 	.word	0xfffff800

0801a1fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a200:	b087      	sub	sp, #28
 801a202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a206:	9204      	str	r2, [sp, #16]
 801a208:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a20c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a20e:	9201      	str	r2, [sp, #4]
 801a210:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a214:	9205      	str	r2, [sp, #20]
 801a216:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a21a:	9100      	str	r1, [sp, #0]
 801a21c:	6869      	ldr	r1, [r5, #4]
 801a21e:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a220:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801a224:	fb01 2404 	mla	r4, r1, r4, r2
 801a228:	682a      	ldr	r2, [r5, #0]
 801a22a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a22e:	6802      	ldr	r2, [r0, #0]
 801a230:	9202      	str	r2, [sp, #8]
 801a232:	6842      	ldr	r2, [r0, #4]
 801a234:	3204      	adds	r2, #4
 801a236:	9203      	str	r2, [sp, #12]
 801a238:	9a00      	ldr	r2, [sp, #0]
 801a23a:	2a00      	cmp	r2, #0
 801a23c:	dc03      	bgt.n	801a246 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801a23e:	9a04      	ldr	r2, [sp, #16]
 801a240:	2a00      	cmp	r2, #0
 801a242:	f340 812c 	ble.w	801a49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a246:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a248:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a24e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a252:	2b00      	cmp	r3, #0
 801a254:	dd0f      	ble.n	801a276 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a256:	1402      	asrs	r2, r0, #16
 801a258:	d406      	bmi.n	801a268 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a25a:	4572      	cmp	r2, lr
 801a25c:	da04      	bge.n	801a268 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a25e:	140a      	asrs	r2, r1, #16
 801a260:	d402      	bmi.n	801a268 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a262:	9d01      	ldr	r5, [sp, #4]
 801a264:	42aa      	cmp	r2, r5
 801a266:	db07      	blt.n	801a278 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a26a:	4410      	add	r0, r2
 801a26c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a26e:	3b01      	subs	r3, #1
 801a270:	4411      	add	r1, r2
 801a272:	3402      	adds	r4, #2
 801a274:	e7ed      	b.n	801a252 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801a276:	d00f      	beq.n	801a298 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a278:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a27a:	1e5a      	subs	r2, r3, #1
 801a27c:	fb05 0502 	mla	r5, r5, r2, r0
 801a280:	142d      	asrs	r5, r5, #16
 801a282:	d545      	bpl.n	801a310 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801a284:	4699      	mov	r9, r3
 801a286:	46a0      	mov	r8, r4
 801a288:	f1b9 0f00 	cmp.w	r9, #0
 801a28c:	f300 80a7 	bgt.w	801a3de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801a290:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a294:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a298:	9b00      	ldr	r3, [sp, #0]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	f340 80ff 	ble.w	801a49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a2a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2b6:	eeb0 6a62 	vmov.f32	s12, s5
 801a2ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a2ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2ce:	eeb0 6a43 	vmov.f32	s12, s6
 801a2d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2d6:	ee12 2a90 	vmov	r2, s5
 801a2da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2e2:	ee13 2a10 	vmov	r2, s6
 801a2e6:	9313      	str	r3, [sp, #76]	; 0x4c
 801a2e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2ee:	9314      	str	r3, [sp, #80]	; 0x50
 801a2f0:	9b00      	ldr	r3, [sp, #0]
 801a2f2:	9a04      	ldr	r2, [sp, #16]
 801a2f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2f8:	3b01      	subs	r3, #1
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a302:	eeb0 3a67 	vmov.f32	s6, s15
 801a306:	bf08      	it	eq
 801a308:	4613      	moveq	r3, r2
 801a30a:	eef0 2a47 	vmov.f32	s5, s14
 801a30e:	e793      	b.n	801a238 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a310:	4575      	cmp	r5, lr
 801a312:	dab7      	bge.n	801a284 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a314:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a316:	fb05 1202 	mla	r2, r5, r2, r1
 801a31a:	1412      	asrs	r2, r2, #16
 801a31c:	d4b2      	bmi.n	801a284 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a31e:	9d01      	ldr	r5, [sp, #4]
 801a320:	42aa      	cmp	r2, r5
 801a322:	daaf      	bge.n	801a284 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a324:	f04f 0800 	mov.w	r8, #0
 801a328:	eba3 0208 	sub.w	r2, r3, r8
 801a32c:	2a00      	cmp	r2, #0
 801a32e:	ddaf      	ble.n	801a290 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801a330:	9e02      	ldr	r6, [sp, #8]
 801a332:	140a      	asrs	r2, r1, #16
 801a334:	1405      	asrs	r5, r0, #16
 801a336:	fb0e 6202 	mla	r2, lr, r2, r6
 801a33a:	5d52      	ldrb	r2, [r2, r5]
 801a33c:	9d03      	ldr	r5, [sp, #12]
 801a33e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a342:	0e2e      	lsrs	r6, r5, #24
 801a344:	d044      	beq.n	801a3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801a346:	9a05      	ldr	r2, [sp, #20]
 801a348:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a34c:	4356      	muls	r6, r2
 801a34e:	1c72      	adds	r2, r6, #1
 801a350:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a354:	1212      	asrs	r2, r2, #8
 801a356:	fa1f f982 	uxth.w	r9, r2
 801a35a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a35e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a362:	43d2      	mvns	r2, r2
 801a364:	b2d2      	uxtb	r2, r2
 801a366:	fb16 f609 	smulbb	r6, r6, r9
 801a36a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a36e:	fb07 6702 	mla	r7, r7, r2, r6
 801a372:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a376:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a37a:	b2ed      	uxtb	r5, r5
 801a37c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a380:	fa5f fc8c 	uxtb.w	ip, ip
 801a384:	fb15 f509 	smulbb	r5, r5, r9
 801a388:	fb0c 5502 	mla	r5, ip, r2, r5
 801a38c:	b2bf      	uxth	r7, r7
 801a38e:	fb1a fa09 	smulbb	sl, sl, r9
 801a392:	b2ad      	uxth	r5, r5
 801a394:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a398:	fb06 a602 	mla	r6, r6, r2, sl
 801a39c:	1c7a      	adds	r2, r7, #1
 801a39e:	f105 0a01 	add.w	sl, r5, #1
 801a3a2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a3a6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a3aa:	b2b6      	uxth	r6, r6
 801a3ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a3b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a3b4:	ea47 070a 	orr.w	r7, r7, sl
 801a3b8:	f106 0a01 	add.w	sl, r6, #1
 801a3bc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a3c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a3c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a3c8:	ea47 070a 	orr.w	r7, r7, sl
 801a3cc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a3d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3d2:	4410      	add	r0, r2
 801a3d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a3d6:	f108 0801 	add.w	r8, r8, #1
 801a3da:	4411      	add	r1, r2
 801a3dc:	e7a4      	b.n	801a328 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 801a3de:	1405      	asrs	r5, r0, #16
 801a3e0:	d454      	bmi.n	801a48c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a3e2:	4575      	cmp	r5, lr
 801a3e4:	da52      	bge.n	801a48c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a3e6:	140a      	asrs	r2, r1, #16
 801a3e8:	d450      	bmi.n	801a48c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a3ea:	9e01      	ldr	r6, [sp, #4]
 801a3ec:	42b2      	cmp	r2, r6
 801a3ee:	da4d      	bge.n	801a48c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a3f0:	9e02      	ldr	r6, [sp, #8]
 801a3f2:	fb0e 6202 	mla	r2, lr, r2, r6
 801a3f6:	5d52      	ldrb	r2, [r2, r5]
 801a3f8:	9d03      	ldr	r5, [sp, #12]
 801a3fa:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a3fe:	0e2e      	lsrs	r6, r5, #24
 801a400:	d044      	beq.n	801a48c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a402:	9a05      	ldr	r2, [sp, #20]
 801a404:	f8b8 c000 	ldrh.w	ip, [r8]
 801a408:	4356      	muls	r6, r2
 801a40a:	1c72      	adds	r2, r6, #1
 801a40c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a410:	1212      	asrs	r2, r2, #8
 801a412:	fa1f fa82 	uxth.w	sl, r2
 801a416:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a41a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a41e:	43d2      	mvns	r2, r2
 801a420:	b2d2      	uxtb	r2, r2
 801a422:	fb16 f60a 	smulbb	r6, r6, sl
 801a426:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a42a:	fb07 6702 	mla	r7, r7, r2, r6
 801a42e:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 801a432:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a436:	b2ed      	uxtb	r5, r5
 801a438:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a43c:	fa5f fc8c 	uxtb.w	ip, ip
 801a440:	fb15 f50a 	smulbb	r5, r5, sl
 801a444:	fb0c 5502 	mla	r5, ip, r2, r5
 801a448:	b2bf      	uxth	r7, r7
 801a44a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a44e:	b2ad      	uxth	r5, r5
 801a450:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a454:	fb06 b602 	mla	r6, r6, r2, fp
 801a458:	1c7a      	adds	r2, r7, #1
 801a45a:	f105 0b01 	add.w	fp, r5, #1
 801a45e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a462:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801a466:	b2b6      	uxth	r6, r6
 801a468:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801a46c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a470:	ea47 070b 	orr.w	r7, r7, fp
 801a474:	f106 0b01 	add.w	fp, r6, #1
 801a478:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a47c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a480:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a484:	ea47 070b 	orr.w	r7, r7, fp
 801a488:	f8a8 7000 	strh.w	r7, [r8]
 801a48c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a48e:	4410      	add	r0, r2
 801a490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a492:	f108 0802 	add.w	r8, r8, #2
 801a496:	4411      	add	r1, r2
 801a498:	f109 39ff 	add.w	r9, r9, #4294967295
 801a49c:	e6f4      	b.n	801a288 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801a49e:	b007      	add	sp, #28
 801a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a4a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4a8:	b087      	sub	sp, #28
 801a4aa:	468b      	mov	fp, r1
 801a4ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a4ae:	9205      	str	r2, [sp, #20]
 801a4b0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a4b4:	9201      	str	r2, [sp, #4]
 801a4b6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a4ba:	6869      	ldr	r1, [r5, #4]
 801a4bc:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a4be:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a4c2:	fb01 2404 	mla	r4, r1, r4, r2
 801a4c6:	682a      	ldr	r2, [r5, #0]
 801a4c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a4cc:	6802      	ldr	r2, [r0, #0]
 801a4ce:	9203      	str	r2, [sp, #12]
 801a4d0:	6842      	ldr	r2, [r0, #4]
 801a4d2:	3204      	adds	r2, #4
 801a4d4:	9204      	str	r2, [sp, #16]
 801a4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4da:	f1bb 0f00 	cmp.w	fp, #0
 801a4de:	dc03      	bgt.n	801a4e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801a4e0:	9a05      	ldr	r2, [sp, #20]
 801a4e2:	2a00      	cmp	r2, #0
 801a4e4:	f340 814a 	ble.w	801a77c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801a4e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a4ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a4ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a4f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	dd0f      	ble.n	801a518 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a4f8:	1408      	asrs	r0, r1, #16
 801a4fa:	d406      	bmi.n	801a50a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a4fc:	4540      	cmp	r0, r8
 801a4fe:	da04      	bge.n	801a50a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a500:	1410      	asrs	r0, r2, #16
 801a502:	d402      	bmi.n	801a50a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a504:	9d01      	ldr	r5, [sp, #4]
 801a506:	42a8      	cmp	r0, r5
 801a508:	db07      	blt.n	801a51a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801a50a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a50c:	4401      	add	r1, r0
 801a50e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a510:	3b01      	subs	r3, #1
 801a512:	4402      	add	r2, r0
 801a514:	3402      	adds	r4, #2
 801a516:	e7ed      	b.n	801a4f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801a518:	d018      	beq.n	801a54c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 801a51a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a51c:	1e58      	subs	r0, r3, #1
 801a51e:	fb05 1500 	mla	r5, r5, r0, r1
 801a522:	142d      	asrs	r5, r5, #16
 801a524:	d40a      	bmi.n	801a53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a526:	4545      	cmp	r5, r8
 801a528:	da08      	bge.n	801a53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a52a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a52c:	fb05 2000 	mla	r0, r5, r0, r2
 801a530:	1400      	asrs	r0, r0, #16
 801a532:	d403      	bmi.n	801a53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a534:	9d01      	ldr	r5, [sp, #4]
 801a536:	42a8      	cmp	r0, r5
 801a538:	f2c0 80b7 	blt.w	801a6aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801a53c:	2600      	movs	r6, #0
 801a53e:	1998      	adds	r0, r3, r6
 801a540:	2800      	cmp	r0, #0
 801a542:	dc3e      	bgt.n	801a5c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801a544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a548:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a54c:	f1bb 0f00 	cmp.w	fp, #0
 801a550:	f340 8114 	ble.w	801a77c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801a554:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a558:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a55c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a562:	f1bb 0b01 	subs.w	fp, fp, #1
 801a566:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a56a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a56e:	eeb0 6a62 	vmov.f32	s12, s5
 801a572:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a576:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a57a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a57e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a582:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a586:	eeb0 6a43 	vmov.f32	s12, s6
 801a58a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a58e:	ee12 2a90 	vmov	r2, s5
 801a592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a596:	fb92 f3f3 	sdiv	r3, r2, r3
 801a59a:	ee13 2a10 	vmov	r2, s6
 801a59e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a5a2:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5aa:	9a05      	ldr	r2, [sp, #20]
 801a5ac:	9314      	str	r3, [sp, #80]	; 0x50
 801a5ae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5b4:	eeb0 3a67 	vmov.f32	s6, s15
 801a5b8:	bf08      	it	eq
 801a5ba:	4613      	moveq	r3, r2
 801a5bc:	eef0 2a47 	vmov.f32	s5, s14
 801a5c0:	e78b      	b.n	801a4da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a5c2:	140d      	asrs	r5, r1, #16
 801a5c4:	d459      	bmi.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a5c6:	4545      	cmp	r5, r8
 801a5c8:	da57      	bge.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a5ca:	1410      	asrs	r0, r2, #16
 801a5cc:	d455      	bmi.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a5ce:	9f01      	ldr	r7, [sp, #4]
 801a5d0:	42b8      	cmp	r0, r7
 801a5d2:	da52      	bge.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a5d4:	9f03      	ldr	r7, [sp, #12]
 801a5d6:	fb08 7000 	mla	r0, r8, r0, r7
 801a5da:	5d40      	ldrb	r0, [r0, r5]
 801a5dc:	9d04      	ldr	r5, [sp, #16]
 801a5de:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a5e2:	0e07      	lsrs	r7, r0, #24
 801a5e4:	2fff      	cmp	r7, #255	; 0xff
 801a5e6:	d04e      	beq.n	801a686 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801a5e8:	b2fd      	uxtb	r5, r7
 801a5ea:	2f00      	cmp	r7, #0
 801a5ec:	d045      	beq.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a5ee:	f06f 0701 	mvn.w	r7, #1
 801a5f2:	4377      	muls	r7, r6
 801a5f4:	fa1f f985 	uxth.w	r9, r5
 801a5f8:	f834 e007 	ldrh.w	lr, [r4, r7]
 801a5fc:	9702      	str	r7, [sp, #8]
 801a5fe:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a602:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a606:	43ed      	mvns	r5, r5
 801a608:	b2ed      	uxtb	r5, r5
 801a60a:	fb17 f709 	smulbb	r7, r7, r9
 801a60e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a612:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a616:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a61a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a61e:	b2c0      	uxtb	r0, r0
 801a620:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a624:	fa5f fe8e 	uxtb.w	lr, lr
 801a628:	fb10 f009 	smulbb	r0, r0, r9
 801a62c:	fb0e 0005 	mla	r0, lr, r5, r0
 801a630:	b280      	uxth	r0, r0
 801a632:	fa1f fc8c 	uxth.w	ip, ip
 801a636:	fb1a fa09 	smulbb	sl, sl, r9
 801a63a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a63e:	fb07 a705 	mla	r7, r7, r5, sl
 801a642:	f100 0a01 	add.w	sl, r0, #1
 801a646:	f10c 0501 	add.w	r5, ip, #1
 801a64a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a64e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a652:	b2bf      	uxth	r7, r7
 801a654:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a658:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a65c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a660:	f107 0a01 	add.w	sl, r7, #1
 801a664:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a668:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a66c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a670:	9802      	ldr	r0, [sp, #8]
 801a672:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a676:	f824 c000 	strh.w	ip, [r4, r0]
 801a67a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a67c:	4401      	add	r1, r0
 801a67e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a680:	3e01      	subs	r6, #1
 801a682:	4402      	add	r2, r0
 801a684:	e75b      	b.n	801a53e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801a686:	f06f 0501 	mvn.w	r5, #1
 801a68a:	fb05 f706 	mul.w	r7, r5, r6
 801a68e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a692:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a696:	0945      	lsrs	r5, r0, #5
 801a698:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a69c:	ea4c 0505 	orr.w	r5, ip, r5
 801a6a0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a6a4:	4305      	orrs	r5, r0
 801a6a6:	53e5      	strh	r5, [r4, r7]
 801a6a8:	e7e7      	b.n	801a67a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a6aa:	f04f 0e00 	mov.w	lr, #0
 801a6ae:	eba3 000e 	sub.w	r0, r3, lr
 801a6b2:	2800      	cmp	r0, #0
 801a6b4:	f77f af46 	ble.w	801a544 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a6b8:	9e03      	ldr	r6, [sp, #12]
 801a6ba:	1410      	asrs	r0, r2, #16
 801a6bc:	140d      	asrs	r5, r1, #16
 801a6be:	fb08 6000 	mla	r0, r8, r0, r6
 801a6c2:	5d40      	ldrb	r0, [r0, r5]
 801a6c4:	9d04      	ldr	r5, [sp, #16]
 801a6c6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a6ca:	0e06      	lsrs	r6, r0, #24
 801a6cc:	2eff      	cmp	r6, #255	; 0xff
 801a6ce:	d048      	beq.n	801a762 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a6d0:	b2f5      	uxtb	r5, r6
 801a6d2:	2e00      	cmp	r6, #0
 801a6d4:	d03e      	beq.n	801a754 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a6d6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801a6da:	fa1f f985 	uxth.w	r9, r5
 801a6de:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a6e2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801a6e6:	43ed      	mvns	r5, r5
 801a6e8:	b2ed      	uxtb	r5, r5
 801a6ea:	fb16 f609 	smulbb	r6, r6, r9
 801a6ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6f2:	fb07 6705 	mla	r7, r7, r5, r6
 801a6f6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a6fa:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a6fe:	b2c0      	uxtb	r0, r0
 801a700:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a704:	fa5f fc8c 	uxtb.w	ip, ip
 801a708:	fb10 f009 	smulbb	r0, r0, r9
 801a70c:	fb0c 0005 	mla	r0, ip, r5, r0
 801a710:	b2bf      	uxth	r7, r7
 801a712:	fb1a fa09 	smulbb	sl, sl, r9
 801a716:	b280      	uxth	r0, r0
 801a718:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a71c:	fb06 a605 	mla	r6, r6, r5, sl
 801a720:	1c7d      	adds	r5, r7, #1
 801a722:	f100 0a01 	add.w	sl, r0, #1
 801a726:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801a72a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a72e:	b2b6      	uxth	r6, r6
 801a730:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a734:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a738:	ea47 070a 	orr.w	r7, r7, sl
 801a73c:	f106 0a01 	add.w	sl, r6, #1
 801a740:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a744:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a748:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a74c:	ea47 070a 	orr.w	r7, r7, sl
 801a750:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801a754:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a756:	4401      	add	r1, r0
 801a758:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a75a:	f10e 0e01 	add.w	lr, lr, #1
 801a75e:	4402      	add	r2, r0
 801a760:	e7a5      	b.n	801a6ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 801a762:	4d08      	ldr	r5, [pc, #32]	; (801a784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 801a764:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801a768:	0945      	lsrs	r5, r0, #5
 801a76a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a76e:	4335      	orrs	r5, r6
 801a770:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a774:	4305      	orrs	r5, r0
 801a776:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801a77a:	e7eb      	b.n	801a754 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a77c:	b007      	add	sp, #28
 801a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a782:	bf00      	nop
 801a784:	fffff800 	.word	0xfffff800

0801a788 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a78c:	b087      	sub	sp, #28
 801a78e:	468b      	mov	fp, r1
 801a790:	9204      	str	r2, [sp, #16]
 801a792:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a796:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a798:	9201      	str	r2, [sp, #4]
 801a79a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a79e:	9205      	str	r2, [sp, #20]
 801a7a0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a7a4:	6869      	ldr	r1, [r5, #4]
 801a7a6:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a7a8:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a7ac:	fb01 2404 	mla	r4, r1, r4, r2
 801a7b0:	682a      	ldr	r2, [r5, #0]
 801a7b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a7b6:	6802      	ldr	r2, [r0, #0]
 801a7b8:	9202      	str	r2, [sp, #8]
 801a7ba:	6842      	ldr	r2, [r0, #4]
 801a7bc:	9203      	str	r2, [sp, #12]
 801a7be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a7c2:	f1bb 0f00 	cmp.w	fp, #0
 801a7c6:	dc03      	bgt.n	801a7d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a7c8:	9a04      	ldr	r2, [sp, #16]
 801a7ca:	2a00      	cmp	r2, #0
 801a7cc:	f340 8136 	ble.w	801aa3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801a7d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a7d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a7d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a7d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	dd0f      	ble.n	801a800 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a7e0:	1408      	asrs	r0, r1, #16
 801a7e2:	d406      	bmi.n	801a7f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a7e4:	4540      	cmp	r0, r8
 801a7e6:	da04      	bge.n	801a7f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a7e8:	1410      	asrs	r0, r2, #16
 801a7ea:	d402      	bmi.n	801a7f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a7ec:	9d01      	ldr	r5, [sp, #4]
 801a7ee:	42a8      	cmp	r0, r5
 801a7f0:	db07      	blt.n	801a802 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a7f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a7f4:	4401      	add	r1, r0
 801a7f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a7f8:	3b01      	subs	r3, #1
 801a7fa:	4402      	add	r2, r0
 801a7fc:	3402      	adds	r4, #2
 801a7fe:	e7ed      	b.n	801a7dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 801a800:	d00f      	beq.n	801a822 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801a802:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a804:	1e58      	subs	r0, r3, #1
 801a806:	fb05 1500 	mla	r5, r5, r0, r1
 801a80a:	142d      	asrs	r5, r5, #16
 801a80c:	d544      	bpl.n	801a898 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801a80e:	9300      	str	r3, [sp, #0]
 801a810:	46a2      	mov	sl, r4
 801a812:	9800      	ldr	r0, [sp, #0]
 801a814:	2800      	cmp	r0, #0
 801a816:	f300 80ab 	bgt.w	801a970 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801a81a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a81e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a822:	f1bb 0f00 	cmp.w	fp, #0
 801a826:	f340 8109 	ble.w	801aa3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801a82a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a82e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a832:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a838:	f1bb 0b01 	subs.w	fp, fp, #1
 801a83c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a840:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a844:	eeb0 6a62 	vmov.f32	s12, s5
 801a848:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a84c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a850:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a854:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a858:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a85c:	eeb0 6a43 	vmov.f32	s12, s6
 801a860:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a864:	ee12 2a90 	vmov	r2, s5
 801a868:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a86c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a870:	ee13 2a10 	vmov	r2, s6
 801a874:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a878:	9313      	str	r3, [sp, #76]	; 0x4c
 801a87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a87c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a880:	9a04      	ldr	r2, [sp, #16]
 801a882:	9314      	str	r3, [sp, #80]	; 0x50
 801a884:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a88a:	eeb0 3a67 	vmov.f32	s6, s15
 801a88e:	bf08      	it	eq
 801a890:	4613      	moveq	r3, r2
 801a892:	eef0 2a47 	vmov.f32	s5, s14
 801a896:	e794      	b.n	801a7c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801a898:	4545      	cmp	r5, r8
 801a89a:	dab8      	bge.n	801a80e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a89c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a89e:	fb05 2000 	mla	r0, r5, r0, r2
 801a8a2:	1400      	asrs	r0, r0, #16
 801a8a4:	d4b3      	bmi.n	801a80e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a8a6:	9d01      	ldr	r5, [sp, #4]
 801a8a8:	42a8      	cmp	r0, r5
 801a8aa:	dab0      	bge.n	801a80e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a8ac:	f04f 0900 	mov.w	r9, #0
 801a8b0:	eba3 0009 	sub.w	r0, r3, r9
 801a8b4:	2800      	cmp	r0, #0
 801a8b6:	ddb0      	ble.n	801a81a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a8b8:	140d      	asrs	r5, r1, #16
 801a8ba:	1410      	asrs	r0, r2, #16
 801a8bc:	fb08 5000 	mla	r0, r8, r0, r5
 801a8c0:	9d03      	ldr	r5, [sp, #12]
 801a8c2:	5c2e      	ldrb	r6, [r5, r0]
 801a8c4:	2e00      	cmp	r6, #0
 801a8c6:	d04c      	beq.n	801a962 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 801a8c8:	9d02      	ldr	r5, [sp, #8]
 801a8ca:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801a8ce:	9805      	ldr	r0, [sp, #20]
 801a8d0:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 801a8d4:	4346      	muls	r6, r0
 801a8d6:	1c70      	adds	r0, r6, #1
 801a8d8:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801a8dc:	1200      	asrs	r0, r0, #8
 801a8de:	b287      	uxth	r7, r0
 801a8e0:	122e      	asrs	r6, r5, #8
 801a8e2:	43c0      	mvns	r0, r0
 801a8e4:	b2c0      	uxtb	r0, r0
 801a8e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a8ea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a8ee:	fb16 f600 	smulbb	r6, r6, r0
 801a8f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a8f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a8fa:	00ed      	lsls	r5, r5, #3
 801a8fc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a900:	b2ed      	uxtb	r5, r5
 801a902:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a906:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a90a:	fb15 f500 	smulbb	r5, r5, r0
 801a90e:	fa5f fe8e 	uxtb.w	lr, lr
 801a912:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a916:	fb0e 5507 	mla	r5, lr, r7, r5
 801a91a:	fb1a fa00 	smulbb	sl, sl, r0
 801a91e:	fa1f fc8c 	uxth.w	ip, ip
 801a922:	b2ad      	uxth	r5, r5
 801a924:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a928:	fb06 a607 	mla	r6, r6, r7, sl
 801a92c:	f10c 0001 	add.w	r0, ip, #1
 801a930:	f105 0a01 	add.w	sl, r5, #1
 801a934:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801a938:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a93c:	b2b6      	uxth	r6, r6
 801a93e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a942:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a946:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a94a:	f106 0a01 	add.w	sl, r6, #1
 801a94e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a952:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a956:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a95a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a95e:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 801a962:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a964:	4401      	add	r1, r0
 801a966:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a968:	f109 0901 	add.w	r9, r9, #1
 801a96c:	4402      	add	r2, r0
 801a96e:	e79f      	b.n	801a8b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 801a970:	1408      	asrs	r0, r1, #16
 801a972:	d459      	bmi.n	801aa28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a974:	4540      	cmp	r0, r8
 801a976:	da57      	bge.n	801aa28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a978:	1415      	asrs	r5, r2, #16
 801a97a:	d455      	bmi.n	801aa28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a97c:	9e01      	ldr	r6, [sp, #4]
 801a97e:	42b5      	cmp	r5, r6
 801a980:	da52      	bge.n	801aa28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a982:	fb08 0005 	mla	r0, r8, r5, r0
 801a986:	9d03      	ldr	r5, [sp, #12]
 801a988:	5c2e      	ldrb	r6, [r5, r0]
 801a98a:	2e00      	cmp	r6, #0
 801a98c:	d04c      	beq.n	801aa28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a98e:	9d02      	ldr	r5, [sp, #8]
 801a990:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801a994:	9805      	ldr	r0, [sp, #20]
 801a996:	f8ba 5000 	ldrh.w	r5, [sl]
 801a99a:	4346      	muls	r6, r0
 801a99c:	1c70      	adds	r0, r6, #1
 801a99e:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801a9a2:	1200      	asrs	r0, r0, #8
 801a9a4:	b287      	uxth	r7, r0
 801a9a6:	122e      	asrs	r6, r5, #8
 801a9a8:	43c0      	mvns	r0, r0
 801a9aa:	b2c0      	uxtb	r0, r0
 801a9ac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a9b0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a9b4:	fb16 f600 	smulbb	r6, r6, r0
 801a9b8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a9bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a9c0:	00ed      	lsls	r5, r5, #3
 801a9c2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a9c6:	b2ed      	uxtb	r5, r5
 801a9c8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a9cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a9d0:	fb15 f500 	smulbb	r5, r5, r0
 801a9d4:	fa5f fe8e 	uxtb.w	lr, lr
 801a9d8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a9dc:	fb0e 5507 	mla	r5, lr, r7, r5
 801a9e0:	fb19 f900 	smulbb	r9, r9, r0
 801a9e4:	fa1f fc8c 	uxth.w	ip, ip
 801a9e8:	b2ad      	uxth	r5, r5
 801a9ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a9ee:	fb06 9607 	mla	r6, r6, r7, r9
 801a9f2:	f10c 0001 	add.w	r0, ip, #1
 801a9f6:	f105 0901 	add.w	r9, r5, #1
 801a9fa:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801a9fe:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801aa02:	b2b6      	uxth	r6, r6
 801aa04:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801aa08:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aa0c:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa10:	f106 0901 	add.w	r9, r6, #1
 801aa14:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 801aa18:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801aa1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801aa20:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa24:	f8aa c000 	strh.w	ip, [sl]
 801aa28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aa2a:	4401      	add	r1, r0
 801aa2c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801aa2e:	4402      	add	r2, r0
 801aa30:	9800      	ldr	r0, [sp, #0]
 801aa32:	3801      	subs	r0, #1
 801aa34:	f10a 0a02 	add.w	sl, sl, #2
 801aa38:	9000      	str	r0, [sp, #0]
 801aa3a:	e6ea      	b.n	801a812 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801aa3c:	b007      	add	sp, #28
 801aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa42 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801aa42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa46:	b087      	sub	sp, #28
 801aa48:	468b      	mov	fp, r1
 801aa4a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801aa4c:	9205      	str	r2, [sp, #20]
 801aa4e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801aa52:	9202      	str	r2, [sp, #8]
 801aa54:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801aa58:	6869      	ldr	r1, [r5, #4]
 801aa5a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801aa5c:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 801aa60:	fb01 2000 	mla	r0, r1, r0, r2
 801aa64:	682a      	ldr	r2, [r5, #0]
 801aa66:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801aa6a:	6822      	ldr	r2, [r4, #0]
 801aa6c:	9201      	str	r2, [sp, #4]
 801aa6e:	6862      	ldr	r2, [r4, #4]
 801aa70:	9204      	str	r2, [sp, #16]
 801aa72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa76:	f1bb 0f00 	cmp.w	fp, #0
 801aa7a:	dc03      	bgt.n	801aa84 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801aa7c:	9a05      	ldr	r2, [sp, #20]
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	f340 813d 	ble.w	801acfe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801aa84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aa8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dd0f      	ble.n	801aab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801aa94:	140c      	asrs	r4, r1, #16
 801aa96:	d406      	bmi.n	801aaa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aa98:	454c      	cmp	r4, r9
 801aa9a:	da04      	bge.n	801aaa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aa9c:	1414      	asrs	r4, r2, #16
 801aa9e:	d402      	bmi.n	801aaa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aaa0:	9d02      	ldr	r5, [sp, #8]
 801aaa2:	42ac      	cmp	r4, r5
 801aaa4:	db07      	blt.n	801aab6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801aaa6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aaa8:	4421      	add	r1, r4
 801aaaa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aaac:	3b01      	subs	r3, #1
 801aaae:	4422      	add	r2, r4
 801aab0:	3002      	adds	r0, #2
 801aab2:	e7ed      	b.n	801aa90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801aab4:	d018      	beq.n	801aae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 801aab6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aab8:	1e5c      	subs	r4, r3, #1
 801aaba:	fb05 1504 	mla	r5, r5, r4, r1
 801aabe:	142d      	asrs	r5, r5, #16
 801aac0:	d40a      	bmi.n	801aad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801aac2:	454d      	cmp	r5, r9
 801aac4:	da08      	bge.n	801aad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801aac6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aac8:	fb05 2404 	mla	r4, r5, r4, r2
 801aacc:	1424      	asrs	r4, r4, #16
 801aace:	d403      	bmi.n	801aad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801aad0:	9d02      	ldr	r5, [sp, #8]
 801aad2:	42ac      	cmp	r4, r5
 801aad4:	f2c0 80ae 	blt.w	801ac34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 801aad8:	2600      	movs	r6, #0
 801aada:	199c      	adds	r4, r3, r6
 801aadc:	2c00      	cmp	r4, #0
 801aade:	dc3e      	bgt.n	801ab5e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 801aae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aae4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aae8:	f1bb 0f00 	cmp.w	fp, #0
 801aaec:	f340 8107 	ble.w	801acfe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801aaf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aaf4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aaf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aafc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aafe:	f1bb 0b01 	subs.w	fp, fp, #1
 801ab02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab0a:	eeb0 6a62 	vmov.f32	s12, s5
 801ab0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab16:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab1a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab22:	eeb0 6a43 	vmov.f32	s12, s6
 801ab26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab2a:	ee12 2a90 	vmov	r2, s5
 801ab2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab36:	ee13 2a10 	vmov	r2, s6
 801ab3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab46:	9a05      	ldr	r2, [sp, #20]
 801ab48:	9314      	str	r3, [sp, #80]	; 0x50
 801ab4a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab50:	eeb0 3a67 	vmov.f32	s6, s15
 801ab54:	bf08      	it	eq
 801ab56:	4613      	moveq	r3, r2
 801ab58:	eef0 2a47 	vmov.f32	s5, s14
 801ab5c:	e78b      	b.n	801aa76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801ab5e:	140c      	asrs	r4, r1, #16
 801ab60:	d45a      	bmi.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ab62:	454c      	cmp	r4, r9
 801ab64:	da58      	bge.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ab66:	1415      	asrs	r5, r2, #16
 801ab68:	d456      	bmi.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ab6a:	9f02      	ldr	r7, [sp, #8]
 801ab6c:	42bd      	cmp	r5, r7
 801ab6e:	da53      	bge.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ab70:	fb09 4505 	mla	r5, r9, r5, r4
 801ab74:	9c04      	ldr	r4, [sp, #16]
 801ab76:	5d64      	ldrb	r4, [r4, r5]
 801ab78:	2cff      	cmp	r4, #255	; 0xff
 801ab7a:	d053      	beq.n	801ac24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801ab7c:	2c00      	cmp	r4, #0
 801ab7e:	d04b      	beq.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ab80:	9f01      	ldr	r7, [sp, #4]
 801ab82:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 801ab86:	f06f 0501 	mvn.w	r5, #1
 801ab8a:	4375      	muls	r5, r6
 801ab8c:	9503      	str	r5, [sp, #12]
 801ab8e:	5b45      	ldrh	r5, [r0, r5]
 801ab90:	fa1f fc84 	uxth.w	ip, r4
 801ab94:	122f      	asrs	r7, r5, #8
 801ab96:	43e4      	mvns	r4, r4
 801ab98:	b2e4      	uxtb	r4, r4
 801ab9a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ab9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aba2:	fb17 f704 	smulbb	r7, r7, r4
 801aba6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abaa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801abae:	00ed      	lsls	r5, r5, #3
 801abb0:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801abb4:	b2ed      	uxtb	r5, r5
 801abb6:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801abba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801abbe:	fb15 f504 	smulbb	r5, r5, r4
 801abc2:	fa5f f888 	uxtb.w	r8, r8
 801abc6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801abca:	fb08 550c 	mla	r5, r8, ip, r5
 801abce:	fb1a fa04 	smulbb	sl, sl, r4
 801abd2:	fa1f fe8e 	uxth.w	lr, lr
 801abd6:	b2ad      	uxth	r5, r5
 801abd8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801abdc:	fb07 a70c 	mla	r7, r7, ip, sl
 801abe0:	f10e 0401 	add.w	r4, lr, #1
 801abe4:	f105 0a01 	add.w	sl, r5, #1
 801abe8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801abec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801abf0:	b2bf      	uxth	r7, r7
 801abf2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801abf6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801abfa:	ea4e 0e0a 	orr.w	lr, lr, sl
 801abfe:	f107 0a01 	add.w	sl, r7, #1
 801ac02:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ac06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac0e:	9c03      	ldr	r4, [sp, #12]
 801ac10:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ac14:	f820 e004 	strh.w	lr, [r0, r4]
 801ac18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac1a:	4421      	add	r1, r4
 801ac1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac1e:	3e01      	subs	r6, #1
 801ac20:	4422      	add	r2, r4
 801ac22:	e75a      	b.n	801aada <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ac24:	9c01      	ldr	r4, [sp, #4]
 801ac26:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ac2a:	f06f 0401 	mvn.w	r4, #1
 801ac2e:	4374      	muls	r4, r6
 801ac30:	5305      	strh	r5, [r0, r4]
 801ac32:	e7f1      	b.n	801ac18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ac34:	f04f 0800 	mov.w	r8, #0
 801ac38:	eba3 0408 	sub.w	r4, r3, r8
 801ac3c:	2c00      	cmp	r4, #0
 801ac3e:	f77f af4f 	ble.w	801aae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801ac42:	140c      	asrs	r4, r1, #16
 801ac44:	1415      	asrs	r5, r2, #16
 801ac46:	fb09 4505 	mla	r5, r9, r5, r4
 801ac4a:	9c04      	ldr	r4, [sp, #16]
 801ac4c:	5d64      	ldrb	r4, [r4, r5]
 801ac4e:	2cff      	cmp	r4, #255	; 0xff
 801ac50:	d04f      	beq.n	801acf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801ac52:	2c00      	cmp	r4, #0
 801ac54:	d046      	beq.n	801ace4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ac56:	9e01      	ldr	r6, [sp, #4]
 801ac58:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ac5c:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 801ac60:	b2a7      	uxth	r7, r4
 801ac62:	122e      	asrs	r6, r5, #8
 801ac64:	43e4      	mvns	r4, r4
 801ac66:	b2e4      	uxtb	r4, r4
 801ac68:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ac6c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ac70:	fb16 f604 	smulbb	r6, r6, r4
 801ac74:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ac78:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac7c:	00ed      	lsls	r5, r5, #3
 801ac7e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ac82:	b2ed      	uxtb	r5, r5
 801ac84:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ac88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ac8c:	fb15 f504 	smulbb	r5, r5, r4
 801ac90:	fa5f fe8e 	uxtb.w	lr, lr
 801ac94:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac98:	fb0e 5507 	mla	r5, lr, r7, r5
 801ac9c:	fb1a fa04 	smulbb	sl, sl, r4
 801aca0:	fa1f fc8c 	uxth.w	ip, ip
 801aca4:	b2ad      	uxth	r5, r5
 801aca6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801acaa:	fb06 a607 	mla	r6, r6, r7, sl
 801acae:	f10c 0401 	add.w	r4, ip, #1
 801acb2:	f105 0a01 	add.w	sl, r5, #1
 801acb6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801acba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801acbe:	b2b6      	uxth	r6, r6
 801acc0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acc4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acc8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801accc:	f106 0a01 	add.w	sl, r6, #1
 801acd0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801acd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801acd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801acdc:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ace0:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 801ace4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ace6:	4421      	add	r1, r4
 801ace8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801acea:	f108 0801 	add.w	r8, r8, #1
 801acee:	4422      	add	r2, r4
 801acf0:	e7a2      	b.n	801ac38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801acf2:	9c01      	ldr	r4, [sp, #4]
 801acf4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801acf8:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 801acfc:	e7f2      	b.n	801ace4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801acfe:	b007      	add	sp, #28
 801ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad04 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad08:	b085      	sub	sp, #20
 801ad0a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad0c:	9203      	str	r2, [sp, #12]
 801ad0e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ad12:	9201      	str	r2, [sp, #4]
 801ad14:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ad18:	9100      	str	r1, [sp, #0]
 801ad1a:	6841      	ldr	r1, [r0, #4]
 801ad1c:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801ad20:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ad24:	fb01 2404 	mla	r4, r1, r4, r2
 801ad28:	6802      	ldr	r2, [r0, #0]
 801ad2a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ad2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad30:	fa1f fe85 	uxth.w	lr, r5
 801ad34:	6812      	ldr	r2, [r2, #0]
 801ad36:	9202      	str	r2, [sp, #8]
 801ad38:	43ed      	mvns	r5, r5
 801ad3a:	b2ed      	uxtb	r5, r5
 801ad3c:	9a00      	ldr	r2, [sp, #0]
 801ad3e:	2a00      	cmp	r2, #0
 801ad40:	dc03      	bgt.n	801ad4a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801ad42:	9a03      	ldr	r2, [sp, #12]
 801ad44:	2a00      	cmp	r2, #0
 801ad46:	f340 8117 	ble.w	801af78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ad4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad4c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad52:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	dd0f      	ble.n	801ad7a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801ad5a:	1408      	asrs	r0, r1, #16
 801ad5c:	d406      	bmi.n	801ad6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ad5e:	4540      	cmp	r0, r8
 801ad60:	da04      	bge.n	801ad6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ad62:	1410      	asrs	r0, r2, #16
 801ad64:	d402      	bmi.n	801ad6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ad66:	9e01      	ldr	r6, [sp, #4]
 801ad68:	42b0      	cmp	r0, r6
 801ad6a:	db07      	blt.n	801ad7c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ad6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad6e:	4401      	add	r1, r0
 801ad70:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad72:	3b01      	subs	r3, #1
 801ad74:	4402      	add	r2, r0
 801ad76:	3402      	adds	r4, #2
 801ad78:	e7ed      	b.n	801ad56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801ad7a:	d069      	beq.n	801ae50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ad7c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ad7e:	1e58      	subs	r0, r3, #1
 801ad80:	fb06 1600 	mla	r6, r6, r0, r1
 801ad84:	1436      	asrs	r6, r6, #16
 801ad86:	d459      	bmi.n	801ae3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801ad88:	4546      	cmp	r6, r8
 801ad8a:	da57      	bge.n	801ae3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801ad8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ad8e:	fb06 2000 	mla	r0, r6, r0, r2
 801ad92:	1400      	asrs	r0, r0, #16
 801ad94:	d452      	bmi.n	801ae3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801ad96:	9e01      	ldr	r6, [sp, #4]
 801ad98:	42b0      	cmp	r0, r6
 801ad9a:	da4f      	bge.n	801ae3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801ad9c:	469a      	mov	sl, r3
 801ad9e:	46a3      	mov	fp, r4
 801ada0:	f1ba 0f00 	cmp.w	sl, #0
 801ada4:	dd50      	ble.n	801ae48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ada6:	140e      	asrs	r6, r1, #16
 801ada8:	1410      	asrs	r0, r2, #16
 801adaa:	fb08 6000 	mla	r0, r8, r0, r6
 801adae:	9e02      	ldr	r6, [sp, #8]
 801adb0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 801adb4:	f8bb 6000 	ldrh.w	r6, [fp]
 801adb8:	1237      	asrs	r7, r6, #8
 801adba:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801adbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801adc2:	fb17 f705 	smulbb	r7, r7, r5
 801adc6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801adca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801adce:	00f6      	lsls	r6, r6, #3
 801add0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801add4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801add8:	10c7      	asrs	r7, r0, #3
 801adda:	b2f6      	uxtb	r6, r6
 801addc:	00c0      	lsls	r0, r0, #3
 801adde:	fb19 f905 	smulbb	r9, r9, r5
 801ade2:	fb16 f605 	smulbb	r6, r6, r5
 801ade6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801adea:	b2c0      	uxtb	r0, r0
 801adec:	fa1f fc8c 	uxth.w	ip, ip
 801adf0:	fb07 970e 	mla	r7, r7, lr, r9
 801adf4:	fb00 600e 	mla	r0, r0, lr, r6
 801adf8:	b280      	uxth	r0, r0
 801adfa:	b2bf      	uxth	r7, r7
 801adfc:	f10c 0601 	add.w	r6, ip, #1
 801ae00:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801ae04:	f107 0901 	add.w	r9, r7, #1
 801ae08:	1c46      	adds	r6, r0, #1
 801ae0a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801ae0e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ae12:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae14:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ae18:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ae1c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ae20:	ea4c 0c06 	orr.w	ip, ip, r6
 801ae24:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae28:	4401      	add	r1, r0
 801ae2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae2c:	ea4c 0c09 	orr.w	ip, ip, r9
 801ae30:	f82b cb02 	strh.w	ip, [fp], #2
 801ae34:	4402      	add	r2, r0
 801ae36:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae3a:	e7b1      	b.n	801ada0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ae3c:	f04f 0900 	mov.w	r9, #0
 801ae40:	eb03 0009 	add.w	r0, r3, r9
 801ae44:	2800      	cmp	r0, #0
 801ae46:	dc41      	bgt.n	801aecc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801ae48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae50:	9b00      	ldr	r3, [sp, #0]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f340 8090 	ble.w	801af78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ae58:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ae64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae72:	eef0 6a62 	vmov.f32	s13, s5
 801ae76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae82:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ae86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae8a:	eef0 6a43 	vmov.f32	s13, s6
 801ae8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae92:	ee12 2a90 	vmov	r2, s5
 801ae96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae9e:	ee13 2a10 	vmov	r2, s6
 801aea2:	9311      	str	r3, [sp, #68]	; 0x44
 801aea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aea6:	fb92 f3f3 	sdiv	r3, r2, r3
 801aeaa:	9312      	str	r3, [sp, #72]	; 0x48
 801aeac:	9b00      	ldr	r3, [sp, #0]
 801aeae:	9a03      	ldr	r2, [sp, #12]
 801aeb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aeb4:	3b01      	subs	r3, #1
 801aeb6:	9300      	str	r3, [sp, #0]
 801aeb8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801aebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aebe:	eeb0 3a67 	vmov.f32	s6, s15
 801aec2:	bf08      	it	eq
 801aec4:	4613      	moveq	r3, r2
 801aec6:	eef0 2a47 	vmov.f32	s5, s14
 801aeca:	e737      	b.n	801ad3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801aecc:	140e      	asrs	r6, r1, #16
 801aece:	d44c      	bmi.n	801af6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801aed0:	4546      	cmp	r6, r8
 801aed2:	da4a      	bge.n	801af6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801aed4:	1410      	asrs	r0, r2, #16
 801aed6:	d448      	bmi.n	801af6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801aed8:	9f01      	ldr	r7, [sp, #4]
 801aeda:	42b8      	cmp	r0, r7
 801aedc:	da45      	bge.n	801af6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801aede:	fb08 6000 	mla	r0, r8, r0, r6
 801aee2:	9e02      	ldr	r6, [sp, #8]
 801aee4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 801aee8:	f06f 0601 	mvn.w	r6, #1
 801aeec:	fb06 fb09 	mul.w	fp, r6, r9
 801aef0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801aef4:	f834 600b 	ldrh.w	r6, [r4, fp]
 801aef8:	1237      	asrs	r7, r6, #8
 801aefa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aefe:	fb17 f705 	smulbb	r7, r7, r5
 801af02:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 801af06:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af0a:	00f6      	lsls	r6, r6, #3
 801af0c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801af10:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af14:	10c7      	asrs	r7, r0, #3
 801af16:	b2f6      	uxtb	r6, r6
 801af18:	00c0      	lsls	r0, r0, #3
 801af1a:	fb1a fa05 	smulbb	sl, sl, r5
 801af1e:	fb16 f605 	smulbb	r6, r6, r5
 801af22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801af26:	b2c0      	uxtb	r0, r0
 801af28:	fa1f fc8c 	uxth.w	ip, ip
 801af2c:	fb07 a70e 	mla	r7, r7, lr, sl
 801af30:	fb00 600e 	mla	r0, r0, lr, r6
 801af34:	b2bf      	uxth	r7, r7
 801af36:	b280      	uxth	r0, r0
 801af38:	f10c 0601 	add.w	r6, ip, #1
 801af3c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801af40:	f107 0a01 	add.w	sl, r7, #1
 801af44:	1c46      	adds	r6, r0, #1
 801af46:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801af4a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801af4e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af52:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801af56:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af5a:	ea4c 0c06 	orr.w	ip, ip, r6
 801af5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af62:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af66:	f824 c00b 	strh.w	ip, [r4, fp]
 801af6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af6c:	4401      	add	r1, r0
 801af6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801af70:	f109 39ff 	add.w	r9, r9, #4294967295
 801af74:	4402      	add	r2, r0
 801af76:	e763      	b.n	801ae40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 801af78:	b005      	add	sp, #20
 801af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801af7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af82:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af84:	9201      	str	r2, [sp, #4]
 801af86:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801af8a:	6844      	ldr	r4, [r0, #4]
 801af8c:	6800      	ldr	r0, [r0, #0]
 801af8e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801af92:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801af96:	fb04 2505 	mla	r5, r4, r5, r2
 801af9a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801af9e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801afa0:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801afa4:	6802      	ldr	r2, [r0, #0]
 801afa6:	9200      	str	r2, [sp, #0]
 801afa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afac:	2900      	cmp	r1, #0
 801afae:	dc03      	bgt.n	801afb8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801afb0:	9a01      	ldr	r2, [sp, #4]
 801afb2:	2a00      	cmp	r2, #0
 801afb4:	f340 8095 	ble.w	801b0e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801afb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801afbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801afc0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	dd0e      	ble.n	801afe6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801afc8:	ea5f 4824 	movs.w	r8, r4, asr #16
 801afcc:	d406      	bmi.n	801afdc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801afce:	45e0      	cmp	r8, ip
 801afd0:	da04      	bge.n	801afdc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801afd2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801afd6:	d401      	bmi.n	801afdc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801afd8:	45f0      	cmp	r8, lr
 801afda:	db05      	blt.n	801afe8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801afdc:	443c      	add	r4, r7
 801afde:	4430      	add	r0, r6
 801afe0:	3b01      	subs	r3, #1
 801afe2:	3502      	adds	r5, #2
 801afe4:	e7ee      	b.n	801afc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801afe6:	d010      	beq.n	801b00a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801afe8:	f103 38ff 	add.w	r8, r3, #4294967295
 801afec:	fb07 4908 	mla	r9, r7, r8, r4
 801aff0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801aff4:	d53d      	bpl.n	801b072 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801aff6:	4698      	mov	r8, r3
 801aff8:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 801affc:	f1b8 0f00 	cmp.w	r8, #0
 801b000:	dc55      	bgt.n	801b0ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801b002:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b006:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b00a:	2900      	cmp	r1, #0
 801b00c:	dd69      	ble.n	801b0e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801b00e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b012:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b016:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b01c:	3901      	subs	r1, #1
 801b01e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b022:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b026:	eeb0 6a62 	vmov.f32	s12, s5
 801b02a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b02e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b032:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b036:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b03a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b03e:	eeb0 6a43 	vmov.f32	s12, s6
 801b042:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b046:	ee12 2a90 	vmov	r2, s5
 801b04a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b04e:	fb92 f7f3 	sdiv	r7, r2, r3
 801b052:	ee13 2a10 	vmov	r2, s6
 801b056:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b05a:	fb92 f6f3 	sdiv	r6, r2, r3
 801b05e:	9a01      	ldr	r2, [sp, #4]
 801b060:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b064:	bf08      	it	eq
 801b066:	4613      	moveq	r3, r2
 801b068:	eeb0 3a67 	vmov.f32	s6, s15
 801b06c:	eef0 2a47 	vmov.f32	s5, s14
 801b070:	e79c      	b.n	801afac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 801b072:	45e1      	cmp	r9, ip
 801b074:	dabf      	bge.n	801aff6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b076:	fb06 0808 	mla	r8, r6, r8, r0
 801b07a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801b07e:	d4ba      	bmi.n	801aff6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b080:	45f0      	cmp	r8, lr
 801b082:	dab8      	bge.n	801aff6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b084:	4698      	mov	r8, r3
 801b086:	46aa      	mov	sl, r5
 801b088:	f1b8 0f00 	cmp.w	r8, #0
 801b08c:	ddb9      	ble.n	801b002 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801b08e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b092:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801b096:	fb0c b909 	mla	r9, ip, r9, fp
 801b09a:	9a00      	ldr	r2, [sp, #0]
 801b09c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 801b0a0:	f82a 9b02 	strh.w	r9, [sl], #2
 801b0a4:	443c      	add	r4, r7
 801b0a6:	4430      	add	r0, r6
 801b0a8:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0ac:	e7ec      	b.n	801b088 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b0ae:	ea5f 4a24 	movs.w	sl, r4, asr #16
 801b0b2:	d411      	bmi.n	801b0d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b0b4:	45e2      	cmp	sl, ip
 801b0b6:	da0f      	bge.n	801b0d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b0b8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b0bc:	d40c      	bmi.n	801b0d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b0be:	45f1      	cmp	r9, lr
 801b0c0:	da0a      	bge.n	801b0d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b0c2:	fb0c a909 	mla	r9, ip, r9, sl
 801b0c6:	9a00      	ldr	r2, [sp, #0]
 801b0c8:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801b0cc:	f06f 0201 	mvn.w	r2, #1
 801b0d0:	fb02 f908 	mul.w	r9, r2, r8
 801b0d4:	f82b a009 	strh.w	sl, [fp, r9]
 801b0d8:	443c      	add	r4, r7
 801b0da:	4430      	add	r0, r6
 801b0dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0e0:	e78c      	b.n	801affc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b0e2:	b003      	add	sp, #12
 801b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ec:	b087      	sub	sp, #28
 801b0ee:	468b      	mov	fp, r1
 801b0f0:	9204      	str	r2, [sp, #16]
 801b0f2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b0f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b0f8:	9201      	str	r2, [sp, #4]
 801b0fa:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b0fe:	9205      	str	r2, [sp, #20]
 801b100:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b104:	6841      	ldr	r1, [r0, #4]
 801b106:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801b10a:	fb01 2404 	mla	r4, r1, r4, r2
 801b10e:	6802      	ldr	r2, [r0, #0]
 801b110:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b114:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b116:	6812      	ldr	r2, [r2, #0]
 801b118:	9203      	str	r2, [sp, #12]
 801b11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b11e:	f1bb 0f00 	cmp.w	fp, #0
 801b122:	dc03      	bgt.n	801b12c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801b124:	9a04      	ldr	r2, [sp, #16]
 801b126:	2a00      	cmp	r2, #0
 801b128:	f340 812c 	ble.w	801b384 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801b12c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b12e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b134:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b138:	2b00      	cmp	r3, #0
 801b13a:	dd0f      	ble.n	801b15c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b13c:	1402      	asrs	r2, r0, #16
 801b13e:	d406      	bmi.n	801b14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b140:	4542      	cmp	r2, r8
 801b142:	da04      	bge.n	801b14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b144:	140a      	asrs	r2, r1, #16
 801b146:	d402      	bmi.n	801b14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b148:	9d01      	ldr	r5, [sp, #4]
 801b14a:	42aa      	cmp	r2, r5
 801b14c:	db07      	blt.n	801b15e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801b14e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b150:	4410      	add	r0, r2
 801b152:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b154:	3b01      	subs	r3, #1
 801b156:	4411      	add	r1, r2
 801b158:	3402      	adds	r4, #2
 801b15a:	e7ed      	b.n	801b138 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801b15c:	d01a      	beq.n	801b194 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801b15e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b160:	1e5a      	subs	r2, r3, #1
 801b162:	fb05 0502 	mla	r5, r5, r2, r0
 801b166:	142d      	asrs	r5, r5, #16
 801b168:	d40a      	bmi.n	801b180 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b16a:	4545      	cmp	r5, r8
 801b16c:	da08      	bge.n	801b180 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b16e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b170:	fb05 1202 	mla	r2, r5, r2, r1
 801b174:	1412      	asrs	r2, r2, #16
 801b176:	d403      	bmi.n	801b180 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b178:	9d01      	ldr	r5, [sp, #4]
 801b17a:	42aa      	cmp	r2, r5
 801b17c:	f2c0 80a6 	blt.w	801b2cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801b180:	f04f 0c00 	mov.w	ip, #0
 801b184:	eb03 020c 	add.w	r2, r3, ip
 801b188:	2a00      	cmp	r2, #0
 801b18a:	dc3e      	bgt.n	801b20a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b18c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b190:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b194:	f1bb 0f00 	cmp.w	fp, #0
 801b198:	f340 80f4 	ble.w	801b384 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801b19c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b1a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1aa:	f1bb 0b01 	subs.w	fp, fp, #1
 801b1ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1b6:	eeb0 6a62 	vmov.f32	s12, s5
 801b1ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b1ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1ce:	eeb0 6a43 	vmov.f32	s12, s6
 801b1d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1d6:	ee12 2a90 	vmov	r2, s5
 801b1da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1de:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1e2:	ee13 2a10 	vmov	r2, s6
 801b1e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1f2:	9a04      	ldr	r2, [sp, #16]
 801b1f4:	9314      	str	r3, [sp, #80]	; 0x50
 801b1f6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1fc:	eeb0 3a67 	vmov.f32	s6, s15
 801b200:	bf08      	it	eq
 801b202:	4613      	moveq	r3, r2
 801b204:	eef0 2a47 	vmov.f32	s5, s14
 801b208:	e789      	b.n	801b11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b20a:	1405      	asrs	r5, r0, #16
 801b20c:	d457      	bmi.n	801b2be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b20e:	4545      	cmp	r5, r8
 801b210:	da55      	bge.n	801b2be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b212:	140a      	asrs	r2, r1, #16
 801b214:	d453      	bmi.n	801b2be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b216:	9e01      	ldr	r6, [sp, #4]
 801b218:	42b2      	cmp	r2, r6
 801b21a:	da50      	bge.n	801b2be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b21c:	fb08 5202 	mla	r2, r8, r2, r5
 801b220:	9d03      	ldr	r5, [sp, #12]
 801b222:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b226:	0e2e      	lsrs	r6, r5, #24
 801b228:	d049      	beq.n	801b2be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b22a:	f06f 0201 	mvn.w	r2, #1
 801b22e:	fb02 f20c 	mul.w	r2, r2, ip
 801b232:	9202      	str	r2, [sp, #8]
 801b234:	f834 e002 	ldrh.w	lr, [r4, r2]
 801b238:	9a05      	ldr	r2, [sp, #20]
 801b23a:	4356      	muls	r6, r2
 801b23c:	1c72      	adds	r2, r6, #1
 801b23e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b242:	1212      	asrs	r2, r2, #8
 801b244:	fa1f f982 	uxth.w	r9, r2
 801b248:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b24c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b250:	43d2      	mvns	r2, r2
 801b252:	b2d2      	uxtb	r2, r2
 801b254:	fb16 f609 	smulbb	r6, r6, r9
 801b258:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b25c:	fb07 6702 	mla	r7, r7, r2, r6
 801b260:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b264:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b268:	b2ed      	uxtb	r5, r5
 801b26a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b26e:	fa5f fe8e 	uxtb.w	lr, lr
 801b272:	fb15 f509 	smulbb	r5, r5, r9
 801b276:	fb0e 5502 	mla	r5, lr, r2, r5
 801b27a:	b2bf      	uxth	r7, r7
 801b27c:	fb1a fa09 	smulbb	sl, sl, r9
 801b280:	b2ad      	uxth	r5, r5
 801b282:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b286:	fb06 a602 	mla	r6, r6, r2, sl
 801b28a:	1c7a      	adds	r2, r7, #1
 801b28c:	f105 0a01 	add.w	sl, r5, #1
 801b290:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b294:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b298:	b2b6      	uxth	r6, r6
 801b29a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b29e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b2a2:	ea47 070a 	orr.w	r7, r7, sl
 801b2a6:	f106 0a01 	add.w	sl, r6, #1
 801b2aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b2ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b2b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b2b6:	9a02      	ldr	r2, [sp, #8]
 801b2b8:	ea47 070a 	orr.w	r7, r7, sl
 801b2bc:	52a7      	strh	r7, [r4, r2]
 801b2be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b2c0:	4410      	add	r0, r2
 801b2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b2c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b2c8:	4411      	add	r1, r2
 801b2ca:	e75b      	b.n	801b184 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b2cc:	f04f 0e00 	mov.w	lr, #0
 801b2d0:	eba3 020e 	sub.w	r2, r3, lr
 801b2d4:	2a00      	cmp	r2, #0
 801b2d6:	f77f af59 	ble.w	801b18c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801b2da:	1405      	asrs	r5, r0, #16
 801b2dc:	140a      	asrs	r2, r1, #16
 801b2de:	fb08 5202 	mla	r2, r8, r2, r5
 801b2e2:	9d03      	ldr	r5, [sp, #12]
 801b2e4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b2e8:	0e2e      	lsrs	r6, r5, #24
 801b2ea:	d044      	beq.n	801b376 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b2ec:	9a05      	ldr	r2, [sp, #20]
 801b2ee:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b2f2:	4356      	muls	r6, r2
 801b2f4:	1c72      	adds	r2, r6, #1
 801b2f6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b2fa:	1212      	asrs	r2, r2, #8
 801b2fc:	fa1f f982 	uxth.w	r9, r2
 801b300:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b304:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b308:	43d2      	mvns	r2, r2
 801b30a:	b2d2      	uxtb	r2, r2
 801b30c:	fb16 f609 	smulbb	r6, r6, r9
 801b310:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b314:	fb07 6702 	mla	r7, r7, r2, r6
 801b318:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b31c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b320:	b2ed      	uxtb	r5, r5
 801b322:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b326:	fa5f fc8c 	uxtb.w	ip, ip
 801b32a:	fb15 f509 	smulbb	r5, r5, r9
 801b32e:	fb0c 5502 	mla	r5, ip, r2, r5
 801b332:	b2bf      	uxth	r7, r7
 801b334:	fb1a fa09 	smulbb	sl, sl, r9
 801b338:	b2ad      	uxth	r5, r5
 801b33a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b33e:	fb06 a602 	mla	r6, r6, r2, sl
 801b342:	1c7a      	adds	r2, r7, #1
 801b344:	f105 0a01 	add.w	sl, r5, #1
 801b348:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b34c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b350:	b2b6      	uxth	r6, r6
 801b352:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b356:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b35a:	ea47 070a 	orr.w	r7, r7, sl
 801b35e:	f106 0a01 	add.w	sl, r6, #1
 801b362:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b366:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b36a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b36e:	ea47 070a 	orr.w	r7, r7, sl
 801b372:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b376:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b378:	4410      	add	r0, r2
 801b37a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b37c:	f10e 0e01 	add.w	lr, lr, #1
 801b380:	4411      	add	r1, r2
 801b382:	e7a5      	b.n	801b2d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801b384:	b007      	add	sp, #28
 801b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b38c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b390:	b087      	sub	sp, #28
 801b392:	468b      	mov	fp, r1
 801b394:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b396:	9205      	str	r2, [sp, #20]
 801b398:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b39c:	9201      	str	r2, [sp, #4]
 801b39e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b3a2:	6861      	ldr	r1, [r4, #4]
 801b3a4:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 801b3a8:	fb01 2000 	mla	r0, r1, r0, r2
 801b3ac:	6822      	ldr	r2, [r4, #0]
 801b3ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b3b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b3b4:	6812      	ldr	r2, [r2, #0]
 801b3b6:	9203      	str	r2, [sp, #12]
 801b3b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b3bc:	f1bb 0f00 	cmp.w	fp, #0
 801b3c0:	dc03      	bgt.n	801b3ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b3c2:	9a05      	ldr	r2, [sp, #20]
 801b3c4:	2a00      	cmp	r2, #0
 801b3c6:	f340 814b 	ble.w	801b660 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801b3ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b3cc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b3d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b3d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	dd0f      	ble.n	801b3fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b3da:	140c      	asrs	r4, r1, #16
 801b3dc:	d406      	bmi.n	801b3ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b3de:	454c      	cmp	r4, r9
 801b3e0:	da04      	bge.n	801b3ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b3e2:	1414      	asrs	r4, r2, #16
 801b3e4:	d402      	bmi.n	801b3ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b3e6:	9d01      	ldr	r5, [sp, #4]
 801b3e8:	42ac      	cmp	r4, r5
 801b3ea:	db07      	blt.n	801b3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b3ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b3ee:	4421      	add	r1, r4
 801b3f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3f2:	3b01      	subs	r3, #1
 801b3f4:	4422      	add	r2, r4
 801b3f6:	3002      	adds	r0, #2
 801b3f8:	e7ed      	b.n	801b3d6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b3fa:	d018      	beq.n	801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b3fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b3fe:	1e5c      	subs	r4, r3, #1
 801b400:	fb05 1504 	mla	r5, r5, r4, r1
 801b404:	142d      	asrs	r5, r5, #16
 801b406:	d40a      	bmi.n	801b41e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b408:	454d      	cmp	r5, r9
 801b40a:	da08      	bge.n	801b41e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b40c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b40e:	fb05 2404 	mla	r4, r5, r4, r2
 801b412:	1424      	asrs	r4, r4, #16
 801b414:	d403      	bmi.n	801b41e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b416:	9d01      	ldr	r5, [sp, #4]
 801b418:	42ac      	cmp	r4, r5
 801b41a:	f2c0 80bb 	blt.w	801b594 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 801b41e:	2700      	movs	r7, #0
 801b420:	19dc      	adds	r4, r3, r7
 801b422:	2c00      	cmp	r4, #0
 801b424:	dc3e      	bgt.n	801b4a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801b426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b42a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b42e:	f1bb 0f00 	cmp.w	fp, #0
 801b432:	f340 8115 	ble.w	801b660 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801b436:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b43a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b43e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b444:	f1bb 0b01 	subs.w	fp, fp, #1
 801b448:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b44c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b450:	eeb0 6a62 	vmov.f32	s12, s5
 801b454:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b458:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b45c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b460:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b464:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b468:	eeb0 6a43 	vmov.f32	s12, s6
 801b46c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b470:	ee12 2a90 	vmov	r2, s5
 801b474:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b478:	fb92 f3f3 	sdiv	r3, r2, r3
 801b47c:	ee13 2a10 	vmov	r2, s6
 801b480:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b484:	9313      	str	r3, [sp, #76]	; 0x4c
 801b486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b488:	fb92 f3f3 	sdiv	r3, r2, r3
 801b48c:	9a05      	ldr	r2, [sp, #20]
 801b48e:	9314      	str	r3, [sp, #80]	; 0x50
 801b490:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b496:	eeb0 3a67 	vmov.f32	s6, s15
 801b49a:	bf08      	it	eq
 801b49c:	4613      	moveq	r3, r2
 801b49e:	eef0 2a47 	vmov.f32	s5, s14
 801b4a2:	e78b      	b.n	801b3bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801b4a4:	140d      	asrs	r5, r1, #16
 801b4a6:	d45c      	bmi.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4a8:	454d      	cmp	r5, r9
 801b4aa:	da5a      	bge.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4ac:	1414      	asrs	r4, r2, #16
 801b4ae:	d458      	bmi.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4b0:	9e01      	ldr	r6, [sp, #4]
 801b4b2:	42b4      	cmp	r4, r6
 801b4b4:	da55      	bge.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4b6:	fb09 5404 	mla	r4, r9, r4, r5
 801b4ba:	9d03      	ldr	r5, [sp, #12]
 801b4bc:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801b4c0:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801b4c4:	d04d      	beq.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4c6:	0a26      	lsrs	r6, r4, #8
 801b4c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b4cc:	fa5f f58e 	uxtb.w	r5, lr
 801b4d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801b4d4:	9604      	str	r6, [sp, #16]
 801b4d6:	d04a      	beq.n	801b56e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801b4d8:	f06f 0601 	mvn.w	r6, #1
 801b4dc:	437e      	muls	r6, r7
 801b4de:	fa1f fa85 	uxth.w	sl, r5
 801b4e2:	f830 8006 	ldrh.w	r8, [r0, r6]
 801b4e6:	9602      	str	r6, [sp, #8]
 801b4e8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b4ec:	43ed      	mvns	r5, r5
 801b4ee:	fa5f fc8c 	uxtb.w	ip, ip
 801b4f2:	b2ed      	uxtb	r5, r5
 801b4f4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b4f8:	fb1c fc0a 	smulbb	ip, ip, sl
 801b4fc:	fb0e cc05 	mla	ip, lr, r5, ip
 801b500:	b2e4      	uxtb	r4, r4
 801b502:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801b506:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b50a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801b50e:	fa5f f888 	uxtb.w	r8, r8
 801b512:	fb14 f40a 	smulbb	r4, r4, sl
 801b516:	fb08 4405 	mla	r4, r8, r5, r4
 801b51a:	b2a4      	uxth	r4, r4
 801b51c:	fa1f fc8c 	uxth.w	ip, ip
 801b520:	fb16 f60a 	smulbb	r6, r6, sl
 801b524:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b528:	fb0e 6e05 	mla	lr, lr, r5, r6
 801b52c:	1c66      	adds	r6, r4, #1
 801b52e:	f10c 0501 	add.w	r5, ip, #1
 801b532:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b536:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b53a:	fa1f fe8e 	uxth.w	lr, lr
 801b53e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b542:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b546:	ea4c 0c06 	orr.w	ip, ip, r6
 801b54a:	f10e 0601 	add.w	r6, lr, #1
 801b54e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801b552:	0976      	lsrs	r6, r6, #5
 801b554:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b558:	9c02      	ldr	r4, [sp, #8]
 801b55a:	ea4c 0c06 	orr.w	ip, ip, r6
 801b55e:	f820 c004 	strh.w	ip, [r0, r4]
 801b562:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b564:	4421      	add	r1, r4
 801b566:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b568:	3f01      	subs	r7, #1
 801b56a:	4422      	add	r2, r4
 801b56c:	e758      	b.n	801b420 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801b56e:	4e3e      	ldr	r6, [pc, #248]	; (801b668 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b570:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b574:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801b578:	ea4c 0c04 	orr.w	ip, ip, r4
 801b57c:	9c04      	ldr	r4, [sp, #16]
 801b57e:	f06f 0501 	mvn.w	r5, #1
 801b582:	00e6      	lsls	r6, r4, #3
 801b584:	437d      	muls	r5, r7
 801b586:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b58a:	ea4c 0c04 	orr.w	ip, ip, r4
 801b58e:	f820 c005 	strh.w	ip, [r0, r5]
 801b592:	e7e6      	b.n	801b562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b594:	f04f 0800 	mov.w	r8, #0
 801b598:	eba3 0408 	sub.w	r4, r3, r8
 801b59c:	2c00      	cmp	r4, #0
 801b59e:	f77f af42 	ble.w	801b426 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801b5a2:	140d      	asrs	r5, r1, #16
 801b5a4:	1414      	asrs	r4, r2, #16
 801b5a6:	fb09 5404 	mla	r4, r9, r4, r5
 801b5aa:	9d03      	ldr	r5, [sp, #12]
 801b5ac:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801b5b0:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801b5b4:	d042      	beq.n	801b63c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801b5b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b5ba:	fa5f f58c 	uxtb.w	r5, ip
 801b5be:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801b5c2:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b5c6:	d040      	beq.n	801b64a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b5c8:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801b5cc:	fa1f fa85 	uxth.w	sl, r5
 801b5d0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5d4:	43ed      	mvns	r5, r5
 801b5d6:	b2ff      	uxtb	r7, r7
 801b5d8:	b2ed      	uxtb	r5, r5
 801b5da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b5de:	fb17 f70a 	smulbb	r7, r7, sl
 801b5e2:	fb0c 7705 	mla	r7, ip, r5, r7
 801b5e6:	b2e4      	uxtb	r4, r4
 801b5e8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b5ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b5f0:	fa5f fe8e 	uxtb.w	lr, lr
 801b5f4:	fb14 f40a 	smulbb	r4, r4, sl
 801b5f8:	fb0e 4405 	mla	r4, lr, r5, r4
 801b5fc:	b2f6      	uxtb	r6, r6
 801b5fe:	b2bf      	uxth	r7, r7
 801b600:	fb16 f60a 	smulbb	r6, r6, sl
 801b604:	b2a4      	uxth	r4, r4
 801b606:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b60a:	fb0c 6c05 	mla	ip, ip, r5, r6
 801b60e:	1c7d      	adds	r5, r7, #1
 801b610:	1c66      	adds	r6, r4, #1
 801b612:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801b616:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b61a:	fa1f fc8c 	uxth.w	ip, ip
 801b61e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b622:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b626:	4337      	orrs	r7, r6
 801b628:	f10c 0601 	add.w	r6, ip, #1
 801b62c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b630:	0976      	lsrs	r6, r6, #5
 801b632:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b636:	4337      	orrs	r7, r6
 801b638:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801b63c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b63e:	4421      	add	r1, r4
 801b640:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b642:	f108 0801 	add.w	r8, r8, #1
 801b646:	4422      	add	r2, r4
 801b648:	e7a6      	b.n	801b598 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 801b64a:	4d07      	ldr	r5, [pc, #28]	; (801b668 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b64c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b650:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801b654:	00f6      	lsls	r6, r6, #3
 801b656:	4327      	orrs	r7, r4
 801b658:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b65c:	4327      	orrs	r7, r4
 801b65e:	e7eb      	b.n	801b638 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801b660:	b007      	add	sp, #28
 801b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b666:	bf00      	nop
 801b668:	fffff800 	.word	0xfffff800

0801b66c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b670:	b087      	sub	sp, #28
 801b672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b676:	9204      	str	r2, [sp, #16]
 801b678:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 801b67c:	9200      	str	r2, [sp, #0]
 801b67e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b682:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b684:	9201      	str	r2, [sp, #4]
 801b686:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b68a:	9205      	str	r2, [sp, #20]
 801b68c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b690:	6860      	ldr	r0, [r4, #4]
 801b692:	fb00 2505 	mla	r5, r0, r5, r2
 801b696:	6822      	ldr	r2, [r4, #0]
 801b698:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b69c:	9a00      	ldr	r2, [sp, #0]
 801b69e:	3201      	adds	r2, #1
 801b6a0:	f022 0201 	bic.w	r2, r2, #1
 801b6a4:	9202      	str	r2, [sp, #8]
 801b6a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b6a8:	6812      	ldr	r2, [r2, #0]
 801b6aa:	9203      	str	r2, [sp, #12]
 801b6ac:	2900      	cmp	r1, #0
 801b6ae:	dc03      	bgt.n	801b6b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b6b0:	9a04      	ldr	r2, [sp, #16]
 801b6b2:	2a00      	cmp	r2, #0
 801b6b4:	f340 814c 	ble.w	801b950 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801b6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b6ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b6be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b6c0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	dd10      	ble.n	801b6ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b6c8:	1422      	asrs	r2, r4, #16
 801b6ca:	d407      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b6cc:	9e00      	ldr	r6, [sp, #0]
 801b6ce:	4296      	cmp	r6, r2
 801b6d0:	dd04      	ble.n	801b6dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b6d2:	1402      	asrs	r2, r0, #16
 801b6d4:	d402      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b6d6:	9e01      	ldr	r6, [sp, #4]
 801b6d8:	42b2      	cmp	r2, r6
 801b6da:	db07      	blt.n	801b6ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x80>
 801b6dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b6de:	4414      	add	r4, r2
 801b6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b6e2:	3b01      	subs	r3, #1
 801b6e4:	4410      	add	r0, r2
 801b6e6:	3502      	adds	r5, #2
 801b6e8:	e7ec      	b.n	801b6c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b6ea:	d00f      	beq.n	801b70c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b6ec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b6ee:	1e5a      	subs	r2, r3, #1
 801b6f0:	fb06 4602 	mla	r6, r6, r2, r4
 801b6f4:	1436      	asrs	r6, r6, #16
 801b6f6:	d542      	bpl.n	801b77e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801b6f8:	469a      	mov	sl, r3
 801b6fa:	46a9      	mov	r9, r5
 801b6fc:	f1ba 0f00 	cmp.w	sl, #0
 801b700:	f300 80b5 	bgt.w	801b86e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801b704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b708:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b70c:	2900      	cmp	r1, #0
 801b70e:	f340 811f 	ble.w	801b950 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801b712:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b716:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b71a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b720:	3901      	subs	r1, #1
 801b722:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b726:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b72a:	eeb0 6a62 	vmov.f32	s12, s5
 801b72e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b732:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b736:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b73a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b73e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b742:	eeb0 6a43 	vmov.f32	s12, s6
 801b746:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b74a:	ee12 2a90 	vmov	r2, s5
 801b74e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b752:	fb92 f3f3 	sdiv	r3, r2, r3
 801b756:	ee13 2a10 	vmov	r2, s6
 801b75a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b75e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b762:	fb92 f3f3 	sdiv	r3, r2, r3
 801b766:	9a04      	ldr	r2, [sp, #16]
 801b768:	9314      	str	r3, [sp, #80]	; 0x50
 801b76a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b76e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b770:	eeb0 3a67 	vmov.f32	s6, s15
 801b774:	bf08      	it	eq
 801b776:	4613      	moveq	r3, r2
 801b778:	eef0 2a47 	vmov.f32	s5, s14
 801b77c:	e796      	b.n	801b6ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801b77e:	9f00      	ldr	r7, [sp, #0]
 801b780:	42b7      	cmp	r7, r6
 801b782:	ddb9      	ble.n	801b6f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b784:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b786:	fb06 0202 	mla	r2, r6, r2, r0
 801b78a:	1412      	asrs	r2, r2, #16
 801b78c:	d4b4      	bmi.n	801b6f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b78e:	9e01      	ldr	r6, [sp, #4]
 801b790:	42b2      	cmp	r2, r6
 801b792:	dab1      	bge.n	801b6f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b794:	f04f 0800 	mov.w	r8, #0
 801b798:	eba3 0208 	sub.w	r2, r3, r8
 801b79c:	2a00      	cmp	r2, #0
 801b79e:	ddb1      	ble.n	801b704 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b7a0:	9f02      	ldr	r7, [sp, #8]
 801b7a2:	1422      	asrs	r2, r4, #16
 801b7a4:	1406      	asrs	r6, r0, #16
 801b7a6:	fb07 2606 	mla	r6, r7, r6, r2
 801b7aa:	0872      	lsrs	r2, r6, #1
 801b7ac:	9f03      	ldr	r7, [sp, #12]
 801b7ae:	5cba      	ldrb	r2, [r7, r2]
 801b7b0:	07f6      	lsls	r6, r6, #31
 801b7b2:	bf54      	ite	pl
 801b7b4:	f002 020f 	andpl.w	r2, r2, #15
 801b7b8:	1112      	asrmi	r2, r2, #4
 801b7ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b7be:	b2d2      	uxtb	r2, r2
 801b7c0:	2a00      	cmp	r2, #0
 801b7c2:	d04d      	beq.n	801b860 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 801b7c4:	9f05      	ldr	r7, [sp, #20]
 801b7c6:	4e64      	ldr	r6, [pc, #400]	; (801b958 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b7c8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b7cc:	6836      	ldr	r6, [r6, #0]
 801b7ce:	437a      	muls	r2, r7
 801b7d0:	1c57      	adds	r7, r2, #1
 801b7d2:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b7d6:	1212      	asrs	r2, r2, #8
 801b7d8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b7dc:	fa1f fa82 	uxth.w	sl, r2
 801b7e0:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b7e4:	43d2      	mvns	r2, r2
 801b7e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b7ea:	b2d2      	uxtb	r2, r2
 801b7ec:	fb1c fc0a 	smulbb	ip, ip, sl
 801b7f0:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 801b7f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b7f8:	fb07 c702 	mla	r7, r7, r2, ip
 801b7fc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b800:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b804:	fb19 f90a 	smulbb	r9, r9, sl
 801b808:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b80c:	00f6      	lsls	r6, r6, #3
 801b80e:	fb0c 9c02 	mla	ip, ip, r2, r9
 801b812:	b2f6      	uxtb	r6, r6
 801b814:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b818:	fa1f fc8c 	uxth.w	ip, ip
 801b81c:	fa5f fe8e 	uxtb.w	lr, lr
 801b820:	fb16 f60a 	smulbb	r6, r6, sl
 801b824:	b2bf      	uxth	r7, r7
 801b826:	fb0e 6602 	mla	r6, lr, r2, r6
 801b82a:	f10c 0901 	add.w	r9, ip, #1
 801b82e:	b2b6      	uxth	r6, r6
 801b830:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b834:	f107 0b01 	add.w	fp, r7, #1
 801b838:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b83c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b840:	f106 0e01 	add.w	lr, r6, #1
 801b844:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b848:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b84c:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801b850:	ea4c 0c07 	orr.w	ip, ip, r7
 801b854:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b858:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b85c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b862:	4414      	add	r4, r2
 801b864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b866:	f108 0801 	add.w	r8, r8, #1
 801b86a:	4410      	add	r0, r2
 801b86c:	e794      	b.n	801b798 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 801b86e:	1422      	asrs	r2, r4, #16
 801b870:	d465      	bmi.n	801b93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b872:	9e00      	ldr	r6, [sp, #0]
 801b874:	4296      	cmp	r6, r2
 801b876:	dd62      	ble.n	801b93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b878:	1406      	asrs	r6, r0, #16
 801b87a:	d460      	bmi.n	801b93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b87c:	9f01      	ldr	r7, [sp, #4]
 801b87e:	42be      	cmp	r6, r7
 801b880:	da5d      	bge.n	801b93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b882:	9f02      	ldr	r7, [sp, #8]
 801b884:	fb06 2607 	mla	r6, r6, r7, r2
 801b888:	0872      	lsrs	r2, r6, #1
 801b88a:	9f03      	ldr	r7, [sp, #12]
 801b88c:	5cba      	ldrb	r2, [r7, r2]
 801b88e:	07f7      	lsls	r7, r6, #31
 801b890:	bf54      	ite	pl
 801b892:	f002 020f 	andpl.w	r2, r2, #15
 801b896:	1112      	asrmi	r2, r2, #4
 801b898:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b89c:	b2d2      	uxtb	r2, r2
 801b89e:	2a00      	cmp	r2, #0
 801b8a0:	d04d      	beq.n	801b93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8a2:	9f05      	ldr	r7, [sp, #20]
 801b8a4:	4e2c      	ldr	r6, [pc, #176]	; (801b958 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b8a6:	f8b9 e000 	ldrh.w	lr, [r9]
 801b8aa:	6836      	ldr	r6, [r6, #0]
 801b8ac:	437a      	muls	r2, r7
 801b8ae:	1c57      	adds	r7, r2, #1
 801b8b0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b8b4:	1212      	asrs	r2, r2, #8
 801b8b6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b8ba:	fa1f fb82 	uxth.w	fp, r2
 801b8be:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b8c2:	43d2      	mvns	r2, r2
 801b8c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b8c8:	b2d2      	uxtb	r2, r2
 801b8ca:	fb1c fc0b 	smulbb	ip, ip, fp
 801b8ce:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 801b8d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b8d6:	fb07 c702 	mla	r7, r7, r2, ip
 801b8da:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b8de:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b8e2:	fb18 f80b 	smulbb	r8, r8, fp
 801b8e6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b8ea:	00f6      	lsls	r6, r6, #3
 801b8ec:	fb0c 8c02 	mla	ip, ip, r2, r8
 801b8f0:	b2f6      	uxtb	r6, r6
 801b8f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b8f6:	fa1f fc8c 	uxth.w	ip, ip
 801b8fa:	fa5f fe8e 	uxtb.w	lr, lr
 801b8fe:	fb16 f60b 	smulbb	r6, r6, fp
 801b902:	b2bf      	uxth	r7, r7
 801b904:	fb0e 6602 	mla	r6, lr, r2, r6
 801b908:	f10c 0801 	add.w	r8, ip, #1
 801b90c:	b2b6      	uxth	r6, r6
 801b90e:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801b912:	f107 0801 	add.w	r8, r7, #1
 801b916:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b91a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b91e:	f106 0e01 	add.w	lr, r6, #1
 801b922:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b926:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b92a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801b92e:	ea4c 0c07 	orr.w	ip, ip, r7
 801b932:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b936:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b93a:	f8a9 c000 	strh.w	ip, [r9]
 801b93e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b940:	4414      	add	r4, r2
 801b942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b944:	f109 0902 	add.w	r9, r9, #2
 801b948:	4410      	add	r0, r2
 801b94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b94e:	e6d5      	b.n	801b6fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b950:	b007      	add	sp, #28
 801b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b956:	bf00      	nop
 801b958:	2000135c 	.word	0x2000135c

0801b95c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b960:	b087      	sub	sp, #28
 801b962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b966:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b968:	9205      	str	r2, [sp, #20]
 801b96a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b96e:	9201      	str	r2, [sp, #4]
 801b970:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b974:	6860      	ldr	r0, [r4, #4]
 801b976:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 801b97a:	9100      	str	r1, [sp, #0]
 801b97c:	fb00 2505 	mla	r5, r0, r5, r2
 801b980:	6822      	ldr	r2, [r4, #0]
 801b982:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b986:	f10b 0201 	add.w	r2, fp, #1
 801b98a:	f022 0201 	bic.w	r2, r2, #1
 801b98e:	9203      	str	r2, [sp, #12]
 801b990:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b992:	6812      	ldr	r2, [r2, #0]
 801b994:	9204      	str	r2, [sp, #16]
 801b996:	9a00      	ldr	r2, [sp, #0]
 801b998:	2a00      	cmp	r2, #0
 801b99a:	dc03      	bgt.n	801b9a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801b99c:	9a05      	ldr	r2, [sp, #20]
 801b99e:	2a00      	cmp	r2, #0
 801b9a0:	f340 8157 	ble.w	801bc52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801b9a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9a6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b9aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	dd0f      	ble.n	801b9d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b9b4:	1422      	asrs	r2, r4, #16
 801b9b6:	d406      	bmi.n	801b9c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9b8:	4593      	cmp	fp, r2
 801b9ba:	dd04      	ble.n	801b9c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9bc:	1402      	asrs	r2, r0, #16
 801b9be:	d402      	bmi.n	801b9c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9c0:	9e01      	ldr	r6, [sp, #4]
 801b9c2:	42b2      	cmp	r2, r6
 801b9c4:	db07      	blt.n	801b9d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b9c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9c8:	4414      	add	r4, r2
 801b9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9cc:	3b01      	subs	r3, #1
 801b9ce:	4410      	add	r0, r2
 801b9d0:	3502      	adds	r5, #2
 801b9d2:	e7ed      	b.n	801b9b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 801b9d4:	d018      	beq.n	801ba08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801b9d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b9d8:	1e5a      	subs	r2, r3, #1
 801b9da:	fb06 4602 	mla	r6, r6, r2, r4
 801b9de:	1436      	asrs	r6, r6, #16
 801b9e0:	d40a      	bmi.n	801b9f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b9e2:	45b3      	cmp	fp, r6
 801b9e4:	dd08      	ble.n	801b9f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b9e6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b9e8:	fb06 0202 	mla	r2, r6, r2, r0
 801b9ec:	1412      	asrs	r2, r2, #16
 801b9ee:	d403      	bmi.n	801b9f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b9f0:	9e01      	ldr	r6, [sp, #4]
 801b9f2:	42b2      	cmp	r2, r6
 801b9f4:	f2c0 80bf 	blt.w	801bb76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 801b9f8:	2700      	movs	r7, #0
 801b9fa:	19da      	adds	r2, r3, r7
 801b9fc:	2a00      	cmp	r2, #0
 801b9fe:	dc3f      	bgt.n	801ba80 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801ba00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba04:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ba08:	9b00      	ldr	r3, [sp, #0]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f340 8121 	ble.w	801bc52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801ba10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba26:	eeb0 6a62 	vmov.f32	s12, s5
 801ba2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba32:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba36:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba3e:	eeb0 6a43 	vmov.f32	s12, s6
 801ba42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba46:	ee12 2a90 	vmov	r2, s5
 801ba4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba52:	ee13 2a10 	vmov	r2, s6
 801ba56:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba5e:	9314      	str	r3, [sp, #80]	; 0x50
 801ba60:	9b00      	ldr	r3, [sp, #0]
 801ba62:	9a05      	ldr	r2, [sp, #20]
 801ba64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba68:	3b01      	subs	r3, #1
 801ba6a:	9300      	str	r3, [sp, #0]
 801ba6c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba72:	eeb0 3a67 	vmov.f32	s6, s15
 801ba76:	bf08      	it	eq
 801ba78:	4613      	moveq	r3, r2
 801ba7a:	eef0 2a47 	vmov.f32	s5, s14
 801ba7e:	e78a      	b.n	801b996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801ba80:	1422      	asrs	r2, r4, #16
 801ba82:	d466      	bmi.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801ba84:	4593      	cmp	fp, r2
 801ba86:	dd64      	ble.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801ba88:	1406      	asrs	r6, r0, #16
 801ba8a:	d462      	bmi.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801ba8c:	9901      	ldr	r1, [sp, #4]
 801ba8e:	428e      	cmp	r6, r1
 801ba90:	da5f      	bge.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801ba92:	9903      	ldr	r1, [sp, #12]
 801ba94:	fb06 2601 	mla	r6, r6, r1, r2
 801ba98:	0872      	lsrs	r2, r6, #1
 801ba9a:	9904      	ldr	r1, [sp, #16]
 801ba9c:	5c8a      	ldrb	r2, [r1, r2]
 801ba9e:	07f6      	lsls	r6, r6, #31
 801baa0:	bf54      	ite	pl
 801baa2:	f002 020f 	andpl.w	r2, r2, #15
 801baa6:	1112      	asrmi	r2, r2, #4
 801baa8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801baac:	b2d2      	uxtb	r2, r2
 801baae:	2a00      	cmp	r2, #0
 801bab0:	d04f      	beq.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bab2:	4969      	ldr	r1, [pc, #420]	; (801bc58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 801bab4:	f8d1 c000 	ldr.w	ip, [r1]
 801bab8:	2aff      	cmp	r2, #255	; 0xff
 801baba:	ea4f 291c 	mov.w	r9, ip, lsr #8
 801babe:	ea4f 06dc 	mov.w	r6, ip, lsr #3
 801bac2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bac6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801baca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bace:	fa5f fc8c 	uxtb.w	ip, ip
 801bad2:	d044      	beq.n	801bb5e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801bad4:	f06f 0101 	mvn.w	r1, #1
 801bad8:	4379      	muls	r1, r7
 801bada:	fa1f fa82 	uxth.w	sl, r2
 801bade:	f835 8001 	ldrh.w	r8, [r5, r1]
 801bae2:	9102      	str	r1, [sp, #8]
 801bae4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bae8:	43d2      	mvns	r2, r2
 801baea:	b2d2      	uxtb	r2, r2
 801baec:	fb19 f90a 	smulbb	r9, r9, sl
 801baf0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801baf4:	fb0e 9e02 	mla	lr, lr, r2, r9
 801baf8:	ea4f 09e8 	mov.w	r9, r8, asr #3
 801bafc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bb00:	fb16 f60a 	smulbb	r6, r6, sl
 801bb04:	fb09 6602 	mla	r6, r9, r2, r6
 801bb08:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bb0c:	b2b6      	uxth	r6, r6
 801bb0e:	fa5f f888 	uxtb.w	r8, r8
 801bb12:	fb1c fc0a 	smulbb	ip, ip, sl
 801bb16:	fa1f fe8e 	uxth.w	lr, lr
 801bb1a:	fb08 cc02 	mla	ip, r8, r2, ip
 801bb1e:	f106 0901 	add.w	r9, r6, #1
 801bb22:	fa1f fc8c 	uxth.w	ip, ip
 801bb26:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801bb2a:	f10e 0901 	add.w	r9, lr, #1
 801bb2e:	0976      	lsrs	r6, r6, #5
 801bb30:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 801bb34:	f10c 0201 	add.w	r2, ip, #1
 801bb38:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb3c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb40:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bb44:	ea46 060e 	orr.w	r6, r6, lr
 801bb48:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bb4c:	ea46 060c 	orr.w	r6, r6, ip
 801bb50:	526e      	strh	r6, [r5, r1]
 801bb52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb54:	4414      	add	r4, r2
 801bb56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb58:	3f01      	subs	r7, #1
 801bb5a:	4410      	add	r0, r2
 801bb5c:	e74d      	b.n	801b9fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801bb5e:	f06f 0201 	mvn.w	r2, #1
 801bb62:	00f6      	lsls	r6, r6, #3
 801bb64:	fb02 f807 	mul.w	r8, r2, r7
 801bb68:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801bb6c:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 801bb70:	f825 6008 	strh.w	r6, [r5, r8]
 801bb74:	e7ed      	b.n	801bb52 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bb76:	f04f 0800 	mov.w	r8, #0
 801bb7a:	eba3 0208 	sub.w	r2, r3, r8
 801bb7e:	2a00      	cmp	r2, #0
 801bb80:	f77f af3e 	ble.w	801ba00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801bb84:	9903      	ldr	r1, [sp, #12]
 801bb86:	1422      	asrs	r2, r4, #16
 801bb88:	1406      	asrs	r6, r0, #16
 801bb8a:	fb01 2606 	mla	r6, r1, r6, r2
 801bb8e:	0872      	lsrs	r2, r6, #1
 801bb90:	9904      	ldr	r1, [sp, #16]
 801bb92:	5c8a      	ldrb	r2, [r1, r2]
 801bb94:	07f1      	lsls	r1, r6, #31
 801bb96:	bf54      	ite	pl
 801bb98:	f002 020f 	andpl.w	r2, r2, #15
 801bb9c:	1112      	asrmi	r2, r2, #4
 801bb9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bba2:	b2d2      	uxtb	r2, r2
 801bba4:	2a00      	cmp	r2, #0
 801bba6:	d047      	beq.n	801bc38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>
 801bba8:	492b      	ldr	r1, [pc, #172]	; (801bc58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 801bbaa:	680f      	ldr	r7, [r1, #0]
 801bbac:	2aff      	cmp	r2, #255	; 0xff
 801bbae:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801bbb2:	ea4f 06d7 	mov.w	r6, r7, lsr #3
 801bbb6:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801bbba:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801bbbe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bbc2:	b2ff      	uxtb	r7, r7
 801bbc4:	d03f      	beq.n	801bc46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ea>
 801bbc6:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bbca:	fa1f fa82 	uxth.w	sl, r2
 801bbce:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbd2:	43d2      	mvns	r2, r2
 801bbd4:	b2d2      	uxtb	r2, r2
 801bbd6:	fb19 f90a 	smulbb	r9, r9, sl
 801bbda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbde:	fb0c 9c02 	mla	ip, ip, r2, r9
 801bbe2:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801bbe6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bbea:	fb16 f60a 	smulbb	r6, r6, sl
 801bbee:	fb09 6602 	mla	r6, r9, r2, r6
 801bbf2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bbf6:	b2b6      	uxth	r6, r6
 801bbf8:	fa5f fe8e 	uxtb.w	lr, lr
 801bbfc:	fb17 f70a 	smulbb	r7, r7, sl
 801bc00:	fa1f fc8c 	uxth.w	ip, ip
 801bc04:	fb0e 7702 	mla	r7, lr, r2, r7
 801bc08:	f106 0901 	add.w	r9, r6, #1
 801bc0c:	b2bf      	uxth	r7, r7
 801bc0e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801bc12:	f10c 0901 	add.w	r9, ip, #1
 801bc16:	0976      	lsrs	r6, r6, #5
 801bc18:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801bc1c:	1c7a      	adds	r2, r7, #1
 801bc1e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bc22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc26:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bc2a:	ea46 060c 	orr.w	r6, r6, ip
 801bc2e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bc32:	433e      	orrs	r6, r7
 801bc34:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801bc38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc3a:	4414      	add	r4, r2
 801bc3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc3e:	f108 0801 	add.w	r8, r8, #1
 801bc42:	4410      	add	r0, r2
 801bc44:	e799      	b.n	801bb7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bc46:	00f6      	lsls	r6, r6, #3
 801bc48:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801bc4c:	ea46 06d7 	orr.w	r6, r6, r7, lsr #3
 801bc50:	e7f0      	b.n	801bc34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801bc52:	b007      	add	sp, #28
 801bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc58:	2000135c 	.word	0x2000135c

0801bc5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bc5c:	4770      	bx	lr

0801bc5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bc5e:	4770      	bx	lr

0801bc60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bc60:	4770      	bx	lr

0801bc62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bc62:	4770      	bx	lr

0801bc64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bc64:	4770      	bx	lr

0801bc66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bc66:	4770      	bx	lr

0801bc68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bc68:	4770      	bx	lr

0801bc6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bc6a:	4770      	bx	lr

0801bc6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bc6c:	4770      	bx	lr

0801bc6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bc6e:	4770      	bx	lr

0801bc70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bc70:	4770      	bx	lr

0801bc72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bc72:	4770      	bx	lr

0801bc74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bc74:	4770      	bx	lr

0801bc76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bc76:	4770      	bx	lr

0801bc78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bc78:	4770      	bx	lr

0801bc7a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bc7a:	4770      	bx	lr

0801bc7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bc7c:	4770      	bx	lr

0801bc7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bc7e:	4770      	bx	lr

0801bc80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bc80:	4770      	bx	lr

0801bc82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bc82:	4770      	bx	lr

0801bc84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bc84:	4770      	bx	lr

0801bc86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bc86:	4770      	bx	lr

0801bc88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bc88:	4770      	bx	lr

0801bc8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bc8a:	4770      	bx	lr

0801bc8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bc8c:	4770      	bx	lr

0801bc8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bc8e:	4770      	bx	lr

0801bc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bc90:	4770      	bx	lr

0801bc92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bc92:	4770      	bx	lr

0801bc94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801bc94:	b508      	push	{r3, lr}
 801bc96:	4b06      	ldr	r3, [pc, #24]	; (801bcb0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801bc98:	8818      	ldrh	r0, [r3, #0]
 801bc9a:	b928      	cbnz	r0, 801bca8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801bc9c:	4b05      	ldr	r3, [pc, #20]	; (801bcb4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801bc9e:	4a06      	ldr	r2, [pc, #24]	; (801bcb8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801bca0:	4806      	ldr	r0, [pc, #24]	; (801bcbc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801bca2:	2154      	movs	r1, #84	; 0x54
 801bca4:	f009 f88e 	bl	8024dc4 <__assert_func>
 801bca8:	0040      	lsls	r0, r0, #1
 801bcaa:	b280      	uxth	r0, r0
 801bcac:	bd08      	pop	{r3, pc}
 801bcae:	bf00      	nop
 801bcb0:	2000134c 	.word	0x2000134c
 801bcb4:	08054462 	.word	0x08054462
 801bcb8:	080549e3 	.word	0x080549e3
 801bcbc:	080544a4 	.word	0x080544a4

0801bcc0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc4:	b08d      	sub	sp, #52	; 0x34
 801bcc6:	460f      	mov	r7, r1
 801bcc8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801bccc:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801bcd0:	4616      	mov	r6, r2
 801bcd2:	f1b9 0f00 	cmp.w	r9, #0
 801bcd6:	d046      	beq.n	801bd66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bcd8:	6810      	ldr	r0, [r2, #0]
 801bcda:	6851      	ldr	r1, [r2, #4]
 801bcdc:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801bea4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801bce0:	ad08      	add	r5, sp, #32
 801bce2:	c503      	stmia	r5!, {r0, r1}
 801bce4:	6818      	ldr	r0, [r3, #0]
 801bce6:	6859      	ldr	r1, [r3, #4]
 801bce8:	ad0a      	add	r5, sp, #40	; 0x28
 801bcea:	c503      	stmia	r5!, {r0, r1}
 801bcec:	a808      	add	r0, sp, #32
 801bcee:	f7fb fa3d 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bcf2:	4631      	mov	r1, r6
 801bcf4:	a80a      	add	r0, sp, #40	; 0x28
 801bcf6:	f7fb fa21 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bcfa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801bcfe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801bd02:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801bd06:	f8d8 0000 	ldr.w	r0, [r8]
 801bd0a:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801bd0e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801bd12:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801bd16:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801bd1a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801bd1e:	440a      	add	r2, r1
 801bd20:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bd24:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bd28:	4413      	add	r3, r2
 801bd2a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bd2e:	6803      	ldr	r3, [r0, #0]
 801bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd32:	4798      	blx	r3
 801bd34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bd38:	d018      	beq.n	801bd6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801bd3a:	f010 0f04 	tst.w	r0, #4
 801bd3e:	d019      	beq.n	801bd74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bd40:	f8d8 0000 	ldr.w	r0, [r8]
 801bd44:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bd48:	6801      	ldr	r1, [r0, #0]
 801bd4a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801bd4e:	e9cd 9403 	strd	r9, r4, [sp, #12]
 801bd52:	b2bf      	uxth	r7, r7
 801bd54:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801bd58:	9402      	str	r4, [sp, #8]
 801bd5a:	b2ad      	uxth	r5, r5
 801bd5c:	9701      	str	r7, [sp, #4]
 801bd5e:	9500      	str	r5, [sp, #0]
 801bd60:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801bd62:	4631      	mov	r1, r6
 801bd64:	47a0      	blx	r4
 801bd66:	b00d      	add	sp, #52	; 0x34
 801bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd6c:	b914      	cbnz	r4, 801bd74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bd6e:	f010 0f01 	tst.w	r0, #1
 801bd72:	e7e4      	b.n	801bd3e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801bd74:	f8d8 0000 	ldr.w	r0, [r8]
 801bd78:	6803      	ldr	r3, [r0, #0]
 801bd7a:	6a1b      	ldr	r3, [r3, #32]
 801bd7c:	4798      	blx	r3
 801bd7e:	4a48      	ldr	r2, [pc, #288]	; (801bea0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 801bd80:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801bd84:	8814      	ldrh	r4, [r2, #0]
 801bd86:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801bd8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bd8e:	fb01 3404 	mla	r4, r1, r4, r3
 801bd92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bd96:	4692      	mov	sl, r2
 801bd98:	d118      	bne.n	801bdcc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 801bd9a:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801bd9e:	f04f 0900 	mov.w	r9, #0
 801bda2:	f8d8 0000 	ldr.w	r0, [r8]
 801bda6:	45b9      	cmp	r9, r7
 801bda8:	6803      	ldr	r3, [r0, #0]
 801bdaa:	da73      	bge.n	801be94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801bdac:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801bdae:	4632      	mov	r2, r6
 801bdb0:	465b      	mov	r3, fp
 801bdb2:	4621      	mov	r1, r4
 801bdb4:	47a8      	blx	r5
 801bdb6:	f8ba 3000 	ldrh.w	r3, [sl]
 801bdba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bdbe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801bdc2:	f109 0901 	add.w	r9, r9, #1
 801bdc6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801bdca:	e7ea      	b.n	801bda2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 801bdcc:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 801bdd0:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 801bdd4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801bdd8:	f04f 0b00 	mov.w	fp, #0
 801bddc:	fa1f f389 	uxth.w	r3, r9
 801bde0:	fa1f f888 	uxth.w	r8, r8
 801bde4:	9207      	str	r2, [sp, #28]
 801bde6:	45bb      	cmp	fp, r7
 801bde8:	da54      	bge.n	801be94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801bdea:	f04f 0e00 	mov.w	lr, #0
 801bdee:	45ae      	cmp	lr, r5
 801bdf0:	da41      	bge.n	801be76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 801bdf2:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 801bdf6:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 801bdfa:	1208      	asrs	r0, r1, #8
 801bdfc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801be00:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801be04:	fb10 f008 	smulbb	r0, r0, r8
 801be08:	ea4f 09e1 	mov.w	r9, r1, asr #3
 801be0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801be10:	00c9      	lsls	r1, r1, #3
 801be12:	fb0c 0c03 	mla	ip, ip, r3, r0
 801be16:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801be1a:	10d0      	asrs	r0, r2, #3
 801be1c:	b2c9      	uxtb	r1, r1
 801be1e:	00d2      	lsls	r2, r2, #3
 801be20:	fa1f fc8c 	uxth.w	ip, ip
 801be24:	fb19 f908 	smulbb	r9, r9, r8
 801be28:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801be2c:	b2d2      	uxtb	r2, r2
 801be2e:	fb11 f108 	smulbb	r1, r1, r8
 801be32:	fb00 9003 	mla	r0, r0, r3, r9
 801be36:	fb02 1203 	mla	r2, r2, r3, r1
 801be3a:	f10c 0901 	add.w	r9, ip, #1
 801be3e:	b292      	uxth	r2, r2
 801be40:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801be44:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801be48:	f102 0c01 	add.w	ip, r2, #1
 801be4c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801be50:	b280      	uxth	r0, r0
 801be52:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801be56:	ea49 0c02 	orr.w	ip, r9, r2
 801be5a:	f100 0901 	add.w	r9, r0, #1
 801be5e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801be62:	0940      	lsrs	r0, r0, #5
 801be64:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801be68:	ea4c 0c00 	orr.w	ip, ip, r0
 801be6c:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 801be70:	f10e 0e01 	add.w	lr, lr, #1
 801be74:	e7bb      	b.n	801bdee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801be76:	9a07      	ldr	r2, [sp, #28]
 801be78:	8812      	ldrh	r2, [r2, #0]
 801be7a:	1b52      	subs	r2, r2, r5
 801be7c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801be80:	4414      	add	r4, r2
 801be82:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801be86:	1b52      	subs	r2, r2, r5
 801be88:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801be8c:	4416      	add	r6, r2
 801be8e:	f10b 0b01 	add.w	fp, fp, #1
 801be92:	e7a8      	b.n	801bde6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 801be94:	4b03      	ldr	r3, [pc, #12]	; (801bea4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801be96:	6818      	ldr	r0, [r3, #0]
 801be98:	6803      	ldr	r3, [r0, #0]
 801be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be9c:	4798      	blx	r3
 801be9e:	e762      	b.n	801bd66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bea0:	2000134c 	.word	0x2000134c
 801bea4:	20001354 	.word	0x20001354

0801bea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bea8:	b510      	push	{r4, lr}
 801beaa:	2104      	movs	r1, #4
 801beac:	4604      	mov	r4, r0
 801beae:	f008 ff5d 	bl	8024d6c <_ZdlPvj>
 801beb2:	4620      	mov	r0, r4
 801beb4:	bd10      	pop	{r4, pc}

0801beb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801beb6:	b510      	push	{r4, lr}
 801beb8:	2104      	movs	r1, #4
 801beba:	4604      	mov	r4, r0
 801bebc:	f008 ff56 	bl	8024d6c <_ZdlPvj>
 801bec0:	4620      	mov	r0, r4
 801bec2:	bd10      	pop	{r4, pc}

0801bec4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bec4:	b510      	push	{r4, lr}
 801bec6:	2104      	movs	r1, #4
 801bec8:	4604      	mov	r4, r0
 801beca:	f008 ff4f 	bl	8024d6c <_ZdlPvj>
 801bece:	4620      	mov	r0, r4
 801bed0:	bd10      	pop	{r4, pc}

0801bed2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bed2:	b510      	push	{r4, lr}
 801bed4:	2104      	movs	r1, #4
 801bed6:	4604      	mov	r4, r0
 801bed8:	f008 ff48 	bl	8024d6c <_ZdlPvj>
 801bedc:	4620      	mov	r0, r4
 801bede:	bd10      	pop	{r4, pc}

0801bee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bee0:	b510      	push	{r4, lr}
 801bee2:	2104      	movs	r1, #4
 801bee4:	4604      	mov	r4, r0
 801bee6:	f008 ff41 	bl	8024d6c <_ZdlPvj>
 801beea:	4620      	mov	r0, r4
 801beec:	bd10      	pop	{r4, pc}

0801beee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801beee:	b510      	push	{r4, lr}
 801bef0:	2104      	movs	r1, #4
 801bef2:	4604      	mov	r4, r0
 801bef4:	f008 ff3a 	bl	8024d6c <_ZdlPvj>
 801bef8:	4620      	mov	r0, r4
 801befa:	bd10      	pop	{r4, pc}

0801befc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801befc:	b510      	push	{r4, lr}
 801befe:	2104      	movs	r1, #4
 801bf00:	4604      	mov	r4, r0
 801bf02:	f008 ff33 	bl	8024d6c <_ZdlPvj>
 801bf06:	4620      	mov	r0, r4
 801bf08:	bd10      	pop	{r4, pc}

0801bf0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bf0a:	b510      	push	{r4, lr}
 801bf0c:	2104      	movs	r1, #4
 801bf0e:	4604      	mov	r4, r0
 801bf10:	f008 ff2c 	bl	8024d6c <_ZdlPvj>
 801bf14:	4620      	mov	r0, r4
 801bf16:	bd10      	pop	{r4, pc}

0801bf18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bf18:	b510      	push	{r4, lr}
 801bf1a:	2104      	movs	r1, #4
 801bf1c:	4604      	mov	r4, r0
 801bf1e:	f008 ff25 	bl	8024d6c <_ZdlPvj>
 801bf22:	4620      	mov	r0, r4
 801bf24:	bd10      	pop	{r4, pc}

0801bf26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bf26:	b510      	push	{r4, lr}
 801bf28:	2104      	movs	r1, #4
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	f008 ff1e 	bl	8024d6c <_ZdlPvj>
 801bf30:	4620      	mov	r0, r4
 801bf32:	bd10      	pop	{r4, pc}

0801bf34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bf34:	b510      	push	{r4, lr}
 801bf36:	2104      	movs	r1, #4
 801bf38:	4604      	mov	r4, r0
 801bf3a:	f008 ff17 	bl	8024d6c <_ZdlPvj>
 801bf3e:	4620      	mov	r0, r4
 801bf40:	bd10      	pop	{r4, pc}

0801bf42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bf42:	b510      	push	{r4, lr}
 801bf44:	2104      	movs	r1, #4
 801bf46:	4604      	mov	r4, r0
 801bf48:	f008 ff10 	bl	8024d6c <_ZdlPvj>
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	bd10      	pop	{r4, pc}

0801bf50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bf50:	b510      	push	{r4, lr}
 801bf52:	2104      	movs	r1, #4
 801bf54:	4604      	mov	r4, r0
 801bf56:	f008 ff09 	bl	8024d6c <_ZdlPvj>
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	bd10      	pop	{r4, pc}

0801bf5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801bf5e:	b510      	push	{r4, lr}
 801bf60:	2104      	movs	r1, #4
 801bf62:	4604      	mov	r4, r0
 801bf64:	f008 ff02 	bl	8024d6c <_ZdlPvj>
 801bf68:	4620      	mov	r0, r4
 801bf6a:	bd10      	pop	{r4, pc}

0801bf6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bf6c:	b510      	push	{r4, lr}
 801bf6e:	2104      	movs	r1, #4
 801bf70:	4604      	mov	r4, r0
 801bf72:	f008 fefb 	bl	8024d6c <_ZdlPvj>
 801bf76:	4620      	mov	r0, r4
 801bf78:	bd10      	pop	{r4, pc}

0801bf7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bf7a:	b510      	push	{r4, lr}
 801bf7c:	2104      	movs	r1, #4
 801bf7e:	4604      	mov	r4, r0
 801bf80:	f008 fef4 	bl	8024d6c <_ZdlPvj>
 801bf84:	4620      	mov	r0, r4
 801bf86:	bd10      	pop	{r4, pc}

0801bf88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bf88:	b510      	push	{r4, lr}
 801bf8a:	2104      	movs	r1, #4
 801bf8c:	4604      	mov	r4, r0
 801bf8e:	f008 feed 	bl	8024d6c <_ZdlPvj>
 801bf92:	4620      	mov	r0, r4
 801bf94:	bd10      	pop	{r4, pc}

0801bf96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bf96:	b510      	push	{r4, lr}
 801bf98:	2104      	movs	r1, #4
 801bf9a:	4604      	mov	r4, r0
 801bf9c:	f008 fee6 	bl	8024d6c <_ZdlPvj>
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	bd10      	pop	{r4, pc}

0801bfa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bfa4:	b510      	push	{r4, lr}
 801bfa6:	2104      	movs	r1, #4
 801bfa8:	4604      	mov	r4, r0
 801bfaa:	f008 fedf 	bl	8024d6c <_ZdlPvj>
 801bfae:	4620      	mov	r0, r4
 801bfb0:	bd10      	pop	{r4, pc}

0801bfb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bfb2:	b510      	push	{r4, lr}
 801bfb4:	2104      	movs	r1, #4
 801bfb6:	4604      	mov	r4, r0
 801bfb8:	f008 fed8 	bl	8024d6c <_ZdlPvj>
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	bd10      	pop	{r4, pc}

0801bfc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bfc0:	b510      	push	{r4, lr}
 801bfc2:	2104      	movs	r1, #4
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	f008 fed1 	bl	8024d6c <_ZdlPvj>
 801bfca:	4620      	mov	r0, r4
 801bfcc:	bd10      	pop	{r4, pc}

0801bfce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bfce:	b510      	push	{r4, lr}
 801bfd0:	2104      	movs	r1, #4
 801bfd2:	4604      	mov	r4, r0
 801bfd4:	f008 feca 	bl	8024d6c <_ZdlPvj>
 801bfd8:	4620      	mov	r0, r4
 801bfda:	bd10      	pop	{r4, pc}

0801bfdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bfdc:	b510      	push	{r4, lr}
 801bfde:	2104      	movs	r1, #4
 801bfe0:	4604      	mov	r4, r0
 801bfe2:	f008 fec3 	bl	8024d6c <_ZdlPvj>
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	bd10      	pop	{r4, pc}

0801bfea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bfea:	b510      	push	{r4, lr}
 801bfec:	2104      	movs	r1, #4
 801bfee:	4604      	mov	r4, r0
 801bff0:	f008 febc 	bl	8024d6c <_ZdlPvj>
 801bff4:	4620      	mov	r0, r4
 801bff6:	bd10      	pop	{r4, pc}

0801bff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801bff8:	b510      	push	{r4, lr}
 801bffa:	2104      	movs	r1, #4
 801bffc:	4604      	mov	r4, r0
 801bffe:	f008 feb5 	bl	8024d6c <_ZdlPvj>
 801c002:	4620      	mov	r0, r4
 801c004:	bd10      	pop	{r4, pc}

0801c006 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c006:	b510      	push	{r4, lr}
 801c008:	2104      	movs	r1, #4
 801c00a:	4604      	mov	r4, r0
 801c00c:	f008 feae 	bl	8024d6c <_ZdlPvj>
 801c010:	4620      	mov	r0, r4
 801c012:	bd10      	pop	{r4, pc}

0801c014 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c014:	b510      	push	{r4, lr}
 801c016:	2104      	movs	r1, #4
 801c018:	4604      	mov	r4, r0
 801c01a:	f008 fea7 	bl	8024d6c <_ZdlPvj>
 801c01e:	4620      	mov	r0, r4
 801c020:	bd10      	pop	{r4, pc}

0801c022 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c022:	b510      	push	{r4, lr}
 801c024:	2104      	movs	r1, #4
 801c026:	4604      	mov	r4, r0
 801c028:	f008 fea0 	bl	8024d6c <_ZdlPvj>
 801c02c:	4620      	mov	r0, r4
 801c02e:	bd10      	pop	{r4, pc}

0801c030 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c034:	460e      	mov	r6, r1
 801c036:	b08b      	sub	sp, #44	; 0x2c
 801c038:	4615      	mov	r5, r2
 801c03a:	461c      	mov	r4, r3
 801c03c:	b323      	cbz	r3, 801c088 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c03e:	4608      	mov	r0, r1
 801c040:	f7f8 fb3b 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801c044:	bb00      	cbnz	r0, 801c088 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c046:	6830      	ldr	r0, [r6, #0]
 801c048:	6871      	ldr	r1, [r6, #4]
 801c04a:	4e55      	ldr	r6, [pc, #340]	; (801c1a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801c04c:	ab08      	add	r3, sp, #32
 801c04e:	c303      	stmia	r3!, {r0, r1}
 801c050:	a808      	add	r0, sp, #32
 801c052:	f7fb f88b 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c056:	6830      	ldr	r0, [r6, #0]
 801c058:	6803      	ldr	r3, [r0, #0]
 801c05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c05c:	4798      	blx	r3
 801c05e:	2cff      	cmp	r4, #255	; 0xff
 801c060:	d015      	beq.n	801c08e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801c062:	f010 0f08 	tst.w	r0, #8
 801c066:	d015      	beq.n	801c094 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 801c068:	6830      	ldr	r0, [r6, #0]
 801c06a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c06e:	6801      	ldr	r1, [r0, #0]
 801c070:	9402      	str	r4, [sp, #8]
 801c072:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c076:	9401      	str	r4, [sp, #4]
 801c078:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c07c:	9400      	str	r4, [sp, #0]
 801c07e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c080:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c084:	4629      	mov	r1, r5
 801c086:	47a0      	blx	r4
 801c088:	b00b      	add	sp, #44	; 0x2c
 801c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c08e:	f010 0f02 	tst.w	r0, #2
 801c092:	e7e8      	b.n	801c066 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c094:	6830      	ldr	r0, [r6, #0]
 801c096:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c09a:	6803      	ldr	r3, [r0, #0]
 801c09c:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801c0a0:	6a1b      	ldr	r3, [r3, #32]
 801c0a2:	4798      	blx	r3
 801c0a4:	4a3f      	ldr	r2, [pc, #252]	; (801c1a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 801c0a6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c0aa:	8816      	ldrh	r6, [r2, #0]
 801c0ac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c0b0:	2cff      	cmp	r4, #255	; 0xff
 801c0b2:	fb06 1303 	mla	r3, r6, r3, r1
 801c0b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c0ba:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801c0be:	4616      	mov	r6, r2
 801c0c0:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 801c0c4:	d10a      	bne.n	801c0dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 801c0c6:	0049      	lsls	r1, r1, #1
 801c0c8:	2200      	movs	r2, #0
 801c0ca:	454a      	cmp	r2, r9
 801c0cc:	da61      	bge.n	801c192 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	4543      	cmp	r3, r8
 801c0d2:	da57      	bge.n	801c184 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x154>
 801c0d4:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801c0d8:	3301      	adds	r3, #1
 801c0da:	e7f9      	b.n	801c0d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 801c0dc:	0a2b      	lsrs	r3, r5, #8
 801c0de:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 801c0e2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c0e6:	b2a4      	uxth	r4, r4
 801c0e8:	4363      	muls	r3, r4
 801c0ea:	9305      	str	r3, [sp, #20]
 801c0ec:	08ee      	lsrs	r6, r5, #3
 801c0ee:	00eb      	lsls	r3, r5, #3
 801c0f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c0f4:	b2db      	uxtb	r3, r3
 801c0f6:	0049      	lsls	r1, r1, #1
 801c0f8:	4366      	muls	r6, r4
 801c0fa:	4363      	muls	r3, r4
 801c0fc:	9106      	str	r1, [sp, #24]
 801c0fe:	f04f 0c00 	mov.w	ip, #0
 801c102:	b2bf      	uxth	r7, r7
 801c104:	9207      	str	r2, [sp, #28]
 801c106:	45cc      	cmp	ip, r9
 801c108:	da43      	bge.n	801c192 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 801c10a:	4682      	mov	sl, r0
 801c10c:	f04f 0e00 	mov.w	lr, #0
 801c110:	45c6      	cmp	lr, r8
 801c112:	da2d      	bge.n	801c170 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801c114:	f8ba 2000 	ldrh.w	r2, [sl]
 801c118:	9905      	ldr	r1, [sp, #20]
 801c11a:	1214      	asrs	r4, r2, #8
 801c11c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c120:	fb14 f407 	smulbb	r4, r4, r7
 801c124:	440c      	add	r4, r1
 801c126:	10d1      	asrs	r1, r2, #3
 801c128:	00d2      	lsls	r2, r2, #3
 801c12a:	b2d2      	uxtb	r2, r2
 801c12c:	fb12 f207 	smulbb	r2, r2, r7
 801c130:	b2a4      	uxth	r4, r4
 801c132:	441a      	add	r2, r3
 801c134:	b292      	uxth	r2, r2
 801c136:	1c65      	adds	r5, r4, #1
 801c138:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c13c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801c140:	fb11 f107 	smulbb	r1, r1, r7
 801c144:	1c55      	adds	r5, r2, #1
 801c146:	4431      	add	r1, r6
 801c148:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c14c:	b289      	uxth	r1, r1
 801c14e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c152:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c156:	4314      	orrs	r4, r2
 801c158:	1c4a      	adds	r2, r1, #1
 801c15a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c15e:	0949      	lsrs	r1, r1, #5
 801c160:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c164:	430c      	orrs	r4, r1
 801c166:	f82a 4b02 	strh.w	r4, [sl], #2
 801c16a:	f10e 0e01 	add.w	lr, lr, #1
 801c16e:	e7cf      	b.n	801c110 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe0>
 801c170:	9a07      	ldr	r2, [sp, #28]
 801c172:	9906      	ldr	r1, [sp, #24]
 801c174:	8812      	ldrh	r2, [r2, #0]
 801c176:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 801c17a:	440a      	add	r2, r1
 801c17c:	4410      	add	r0, r2
 801c17e:	f10c 0c01 	add.w	ip, ip, #1
 801c182:	e7c0      	b.n	801c106 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd6>
 801c184:	8833      	ldrh	r3, [r6, #0]
 801c186:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 801c18a:	440b      	add	r3, r1
 801c18c:	4418      	add	r0, r3
 801c18e:	3201      	adds	r2, #1
 801c190:	e79b      	b.n	801c0ca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 801c192:	4b03      	ldr	r3, [pc, #12]	; (801c1a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801c194:	6818      	ldr	r0, [r3, #0]
 801c196:	6803      	ldr	r3, [r0, #0]
 801c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c19a:	4798      	blx	r3
 801c19c:	e774      	b.n	801c088 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c19e:	bf00      	nop
 801c1a0:	20001354 	.word	0x20001354
 801c1a4:	2000134c 	.word	0x2000134c

0801c1a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ac:	4d9b      	ldr	r5, [pc, #620]	; (801c41c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801c1ae:	4690      	mov	r8, r2
 801c1b0:	682a      	ldr	r2, [r5, #0]
 801c1b2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c1b6:	2a02      	cmp	r2, #2
 801c1b8:	b08f      	sub	sp, #60	; 0x3c
 801c1ba:	4604      	mov	r4, r0
 801c1bc:	4689      	mov	r9, r1
 801c1be:	d106      	bne.n	801c1ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c1c0:	4b97      	ldr	r3, [pc, #604]	; (801c420 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801c1c2:	4a98      	ldr	r2, [pc, #608]	; (801c424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c1c4:	f240 21be 	movw	r1, #702	; 0x2be
 801c1c8:	4897      	ldr	r0, [pc, #604]	; (801c428 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c1ca:	f008 fdfb 	bl	8024dc4 <__assert_func>
 801c1ce:	ae0e      	add	r6, sp, #56	; 0x38
 801c1d0:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	f7fd fae3 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c1da:	6823      	ldr	r3, [r4, #0]
 801c1dc:	4607      	mov	r7, r0
 801c1de:	6a1b      	ldr	r3, [r3, #32]
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	4798      	blx	r3
 801c1e4:	4287      	cmp	r7, r0
 801c1e6:	d004      	beq.n	801c1f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c1e8:	4b90      	ldr	r3, [pc, #576]	; (801c42c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c1ea:	4a8e      	ldr	r2, [pc, #568]	; (801c424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c1ec:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 801c1f0:	e7ea      	b.n	801c1c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	f7fd fa50 	bl	8019698 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c1f8:	4607      	mov	r7, r0
 801c1fa:	b920      	cbnz	r0, 801c206 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c1fc:	4b8c      	ldr	r3, [pc, #560]	; (801c430 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c1fe:	4a89      	ldr	r2, [pc, #548]	; (801c424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c200:	f240 21c2 	movw	r1, #706	; 0x2c2
 801c204:	e7e0      	b.n	801c1c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c206:	f8d8 0000 	ldr.w	r0, [r8]
 801c20a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c20e:	f9b8 a000 	ldrsh.w	sl, [r8]
 801c212:	ab06      	add	r3, sp, #24
 801c214:	c303      	stmia	r3!, {r0, r1}
 801c216:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c21a:	f8d9 0000 	ldr.w	r0, [r9]
 801c21e:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801c222:	ab08      	add	r3, sp, #32
 801c224:	c303      	stmia	r3!, {r0, r1}
 801c226:	4630      	mov	r0, r6
 801c228:	f7fd f92e 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c22c:	4680      	mov	r8, r0
 801c22e:	4630      	mov	r0, r6
 801c230:	f7fd f964 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c234:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c238:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c23c:	f10d 0920 	add.w	r9, sp, #32
 801c240:	a806      	add	r0, sp, #24
 801c242:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c246:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801c24a:	f7fa ff8f 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c24e:	4648      	mov	r0, r9
 801c250:	f7fa ff8c 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c254:	a80a      	add	r0, sp, #40	; 0x28
 801c256:	f7fa ff89 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c25a:	4e76      	ldr	r6, [pc, #472]	; (801c434 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801c25c:	4b76      	ldr	r3, [pc, #472]	; (801c438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c25e:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c262:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c266:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c26a:	2100      	movs	r1, #0
 801c26c:	910c      	str	r1, [sp, #48]	; 0x30
 801c26e:	4648      	mov	r0, r9
 801c270:	a90c      	add	r1, sp, #48	; 0x30
 801c272:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c276:	f7f8 f9dd 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 801c27a:	4648      	mov	r0, r9
 801c27c:	f7f8 fa1d 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801c280:	2800      	cmp	r0, #0
 801c282:	f040 80bd 	bne.w	801c400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c286:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c28a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c28e:	4288      	cmp	r0, r1
 801c290:	db37      	blt.n	801c302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c292:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c296:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c29a:	429a      	cmp	r2, r3
 801c29c:	db31      	blt.n	801c302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c29e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801c2a2:	4460      	add	r0, ip
 801c2a4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801c2a8:	4461      	add	r1, ip
 801c2aa:	b200      	sxth	r0, r0
 801c2ac:	b209      	sxth	r1, r1
 801c2ae:	4288      	cmp	r0, r1
 801c2b0:	dc27      	bgt.n	801c302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c2b2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c2b6:	440a      	add	r2, r1
 801c2b8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801c2bc:	440b      	add	r3, r1
 801c2be:	b212      	sxth	r2, r2
 801c2c0:	b21b      	sxth	r3, r3
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	dc1d      	bgt.n	801c302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c2c6:	6823      	ldr	r3, [r4, #0]
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2cc:	4798      	blx	r3
 801c2ce:	4682      	mov	sl, r0
 801c2d0:	6828      	ldr	r0, [r5, #0]
 801c2d2:	6803      	ldr	r3, [r0, #0]
 801c2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2d6:	4798      	blx	r3
 801c2d8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c2dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c2e0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801c2e4:	1a9b      	subs	r3, r3, r2
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	b21c      	sxth	r4, r3
 801c2ea:	2c00      	cmp	r4, #0
 801c2ec:	dc0e      	bgt.n	801c30c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c2ee:	bf1f      	itttt	ne
 801c2f0:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801c2f4:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801c2f8:	189b      	addne	r3, r3, r2
 801c2fa:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801c2fe:	463c      	mov	r4, r7
 801c300:	e00a      	b.n	801c318 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 801c302:	4b4e      	ldr	r3, [pc, #312]	; (801c43c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801c304:	4a47      	ldr	r2, [pc, #284]	; (801c424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c306:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801c30a:	e75d      	b.n	801c1c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c30c:	ebab 0303 	sub.w	r3, fp, r3
 801c310:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801c314:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c318:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c31c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c320:	1a5b      	subs	r3, r3, r1
 801c322:	b29b      	uxth	r3, r3
 801c324:	b21a      	sxth	r2, r3
 801c326:	2a00      	cmp	r2, #0
 801c328:	dd4a      	ble.n	801c3c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 801c32a:	fb02 f20b 	mul.w	r2, r2, fp
 801c32e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801c332:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801c336:	1ad3      	subs	r3, r2, r3
 801c338:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c33c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801c340:	2b00      	cmp	r3, #0
 801c342:	dd5d      	ble.n	801c400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c344:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801c348:	f1bc 0f00 	cmp.w	ip, #0
 801c34c:	dd58      	ble.n	801c400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c34e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801c352:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c356:	fb0a f801 	mul.w	r8, sl, r1
 801c35a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c35e:	4480      	add	r8, r0
 801c360:	8830      	ldrh	r0, [r6, #0]
 801c362:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801c366:	42b3      	cmp	r3, r6
 801c368:	bfa8      	it	ge
 801c36a:	4633      	movge	r3, r6
 801c36c:	1a82      	subs	r2, r0, r2
 801c36e:	4293      	cmp	r3, r2
 801c370:	bfa8      	it	ge
 801c372:	4613      	movge	r3, r2
 801c374:	4a30      	ldr	r2, [pc, #192]	; (801c438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c376:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801c37a:	8812      	ldrh	r2, [r2, #0]
 801c37c:	4566      	cmp	r6, ip
 801c37e:	eba2 0101 	sub.w	r1, r2, r1
 801c382:	bfa8      	it	ge
 801c384:	4666      	movge	r6, ip
 801c386:	428e      	cmp	r6, r1
 801c388:	4632      	mov	r2, r6
 801c38a:	bfa8      	it	ge
 801c38c:	460a      	movge	r2, r1
 801c38e:	4298      	cmp	r0, r3
 801c390:	9202      	str	r2, [sp, #8]
 801c392:	d01e      	beq.n	801c3d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 801c394:	005b      	lsls	r3, r3, #1
 801c396:	9303      	str	r3, [sp, #12]
 801c398:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801c39c:	f04f 0900 	mov.w	r9, #0
 801c3a0:	9b02      	ldr	r3, [sp, #8]
 801c3a2:	454b      	cmp	r3, r9
 801c3a4:	dd2c      	ble.n	801c400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c3a6:	6828      	ldr	r0, [r5, #0]
 801c3a8:	6803      	ldr	r3, [r0, #0]
 801c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3ac:	4642      	mov	r2, r8
 801c3ae:	461e      	mov	r6, r3
 801c3b0:	4621      	mov	r1, r4
 801c3b2:	9b03      	ldr	r3, [sp, #12]
 801c3b4:	47b0      	blx	r6
 801c3b6:	44d0      	add	r8, sl
 801c3b8:	445c      	add	r4, fp
 801c3ba:	f109 0901 	add.w	r9, r9, #1
 801c3be:	e7ef      	b.n	801c3a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 801c3c0:	bf1f      	itttt	ne
 801c3c2:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801c3c6:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 801c3ca:	189b      	addne	r3, r3, r2
 801c3cc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801c3d0:	e7b4      	b.n	801c33c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 801c3d2:	4558      	cmp	r0, fp
 801c3d4:	d1de      	bne.n	801c394 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 801c3d6:	6828      	ldr	r0, [r5, #0]
 801c3d8:	6803      	ldr	r3, [r0, #0]
 801c3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3dc:	4798      	blx	r3
 801c3de:	07c3      	lsls	r3, r0, #31
 801c3e0:	d512      	bpl.n	801c408 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 801c3e2:	6828      	ldr	r0, [r5, #0]
 801c3e4:	9b02      	ldr	r3, [sp, #8]
 801c3e6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801c3ea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c3ee:	6803      	ldr	r3, [r0, #0]
 801c3f0:	f8cd b000 	str.w	fp, [sp]
 801c3f4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801c3f6:	e899 0006 	ldmia.w	r9, {r1, r2}
 801c3fa:	4623      	mov	r3, r4
 801c3fc:	47a8      	blx	r5
 801c3fe:	4607      	mov	r7, r0
 801c400:	4638      	mov	r0, r7
 801c402:	b00f      	add	sp, #60	; 0x3c
 801c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c408:	6828      	ldr	r0, [r5, #0]
 801c40a:	6803      	ldr	r3, [r0, #0]
 801c40c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801c40e:	9b02      	ldr	r3, [sp, #8]
 801c410:	4642      	mov	r2, r8
 801c412:	fb03 f30a 	mul.w	r3, r3, sl
 801c416:	4621      	mov	r1, r4
 801c418:	47a8      	blx	r5
 801c41a:	e7f1      	b.n	801c400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c41c:	20001354 	.word	0x20001354
 801c420:	08054256 	.word	0x08054256
 801c424:	08054a93 	.word	0x08054a93
 801c428:	08054308 	.word	0x08054308
 801c42c:	0805433a 	.word	0x0805433a
 801c430:	0805438f 	.word	0x0805438f
 801c434:	2000134c 	.word	0x2000134c
 801c438:	2000134e 	.word	0x2000134e
 801c43c:	080543cd 	.word	0x080543cd

0801c440 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c440:	2200      	movs	r2, #0
 801c442:	4910      	ldr	r1, [pc, #64]	; (801c484 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c444:	6042      	str	r2, [r0, #4]
 801c446:	6001      	str	r1, [r0, #0]
 801c448:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c44c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c450:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c454:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c458:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c45c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c460:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c464:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c468:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c46c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c470:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c474:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c478:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c47c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c480:	4770      	bx	lr
 801c482:	bf00      	nop
 801c484:	08054710 	.word	0x08054710

0801c488 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c48c:	460c      	mov	r4, r1
 801c48e:	b08d      	sub	sp, #52	; 0x34
 801c490:	4682      	mov	sl, r0
 801c492:	6808      	ldr	r0, [r1, #0]
 801c494:	6849      	ldr	r1, [r1, #4]
 801c496:	469b      	mov	fp, r3
 801c498:	ab08      	add	r3, sp, #32
 801c49a:	c303      	stmia	r3!, {r0, r1}
 801c49c:	6810      	ldr	r0, [r2, #0]
 801c49e:	6851      	ldr	r1, [r2, #4]
 801c4a0:	ab0a      	add	r3, sp, #40	; 0x28
 801c4a2:	c303      	stmia	r3!, {r0, r1}
 801c4a4:	a808      	add	r0, sp, #32
 801c4a6:	f7fa fe61 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4aa:	4621      	mov	r1, r4
 801c4ac:	a80a      	add	r0, sp, #40	; 0x28
 801c4ae:	f7fa fe45 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4b2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c4b6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c4ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c4be:	4c60      	ldr	r4, [pc, #384]	; (801c640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801c4c0:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c4c4:	6820      	ldr	r0, [r4, #0]
 801c4c6:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 801c4ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c4ce:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 801c4d2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c4d6:	440a      	add	r2, r1
 801c4d8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c4dc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c4e0:	4413      	add	r3, r2
 801c4e2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c4e6:	6803      	ldr	r3, [r0, #0]
 801c4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4ea:	4798      	blx	r3
 801c4ec:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c4f0:	d119      	bne.n	801c526 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c4f2:	f010 0f20 	tst.w	r0, #32
 801c4f6:	6820      	ldr	r0, [r4, #0]
 801c4f8:	d018      	beq.n	801c52c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c4fa:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c4fe:	6801      	ldr	r1, [r0, #0]
 801c500:	9402      	str	r4, [sp, #8]
 801c502:	fa1f f489 	uxth.w	r4, r9
 801c506:	9401      	str	r4, [sp, #4]
 801c508:	fa1f f488 	uxth.w	r4, r8
 801c50c:	f8cd b00c 	str.w	fp, [sp, #12]
 801c510:	9400      	str	r4, [sp, #0]
 801c512:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c514:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c518:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c51c:	4651      	mov	r1, sl
 801c51e:	47a0      	blx	r4
 801c520:	b00d      	add	sp, #52	; 0x34
 801c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c526:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c52a:	e7e4      	b.n	801c4f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c52c:	6803      	ldr	r3, [r0, #0]
 801c52e:	6a1b      	ldr	r3, [r3, #32]
 801c530:	4798      	blx	r3
 801c532:	4a44      	ldr	r2, [pc, #272]	; (801c644 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801c534:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c538:	8813      	ldrh	r3, [r2, #0]
 801c53a:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 801c53e:	9207      	str	r2, [sp, #28]
 801c540:	fb04 1303 	mla	r3, r4, r3, r1
 801c544:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c548:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 801c54c:	0099      	lsls	r1, r3, #2
 801c54e:	005b      	lsls	r3, r3, #1
 801c550:	9106      	str	r1, [sp, #24]
 801c552:	9305      	str	r3, [sp, #20]
 801c554:	f04f 0c00 	mov.w	ip, #0
 801c558:	45cc      	cmp	ip, r9
 801c55a:	da6b      	bge.n	801c634 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 801c55c:	2300      	movs	r3, #0
 801c55e:	4543      	cmp	r3, r8
 801c560:	da55      	bge.n	801c60e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 801c562:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801c566:	0e25      	lsrs	r5, r4, #24
 801c568:	d013      	beq.n	801c592 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c56a:	2dff      	cmp	r5, #255	; 0xff
 801c56c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801c570:	d111      	bne.n	801c596 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801c572:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c576:	d10e      	bne.n	801c596 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801c578:	0962      	lsrs	r2, r4, #5
 801c57a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801c57e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c582:	f027 0707 	bic.w	r7, r7, #7
 801c586:	4317      	orrs	r7, r2
 801c588:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c58c:	433c      	orrs	r4, r7
 801c58e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 801c592:	3301      	adds	r3, #1
 801c594:	e7e3      	b.n	801c55e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801c596:	fb0b f505 	mul.w	r5, fp, r5
 801c59a:	1c6a      	adds	r2, r5, #1
 801c59c:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 801c5a0:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801c5a4:	1212      	asrs	r2, r2, #8
 801c5a6:	fa1f fe82 	uxth.w	lr, r2
 801c5aa:	120e      	asrs	r6, r1, #8
 801c5ac:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801c5b0:	43d2      	mvns	r2, r2
 801c5b2:	b2d2      	uxtb	r2, r2
 801c5b4:	fb15 f50e 	smulbb	r5, r5, lr
 801c5b8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c5bc:	fb06 5602 	mla	r6, r6, r2, r5
 801c5c0:	b2e4      	uxtb	r4, r4
 801c5c2:	10cd      	asrs	r5, r1, #3
 801c5c4:	00c9      	lsls	r1, r1, #3
 801c5c6:	b2c9      	uxtb	r1, r1
 801c5c8:	fb14 f40e 	smulbb	r4, r4, lr
 801c5cc:	fb01 4402 	mla	r4, r1, r2, r4
 801c5d0:	b2ff      	uxtb	r7, r7
 801c5d2:	b2b6      	uxth	r6, r6
 801c5d4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c5d8:	b2a4      	uxth	r4, r4
 801c5da:	fb17 f70e 	smulbb	r7, r7, lr
 801c5de:	fb05 7702 	mla	r7, r5, r2, r7
 801c5e2:	1c72      	adds	r2, r6, #1
 801c5e4:	1c65      	adds	r5, r4, #1
 801c5e6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c5ea:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801c5ee:	b2bf      	uxth	r7, r7
 801c5f0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c5f4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c5f8:	432e      	orrs	r6, r5
 801c5fa:	1c7d      	adds	r5, r7, #1
 801c5fc:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801c600:	097f      	lsrs	r7, r7, #5
 801c602:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c606:	433e      	orrs	r6, r7
 801c608:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 801c60c:	e7c1      	b.n	801c592 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c60e:	9b07      	ldr	r3, [sp, #28]
 801c610:	9a05      	ldr	r2, [sp, #20]
 801c612:	881b      	ldrh	r3, [r3, #0]
 801c614:	eba3 0308 	sub.w	r3, r3, r8
 801c618:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c61c:	4418      	add	r0, r3
 801c61e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c622:	9a06      	ldr	r2, [sp, #24]
 801c624:	eba3 0308 	sub.w	r3, r3, r8
 801c628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c62c:	449a      	add	sl, r3
 801c62e:	f10c 0c01 	add.w	ip, ip, #1
 801c632:	e791      	b.n	801c558 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801c634:	4b02      	ldr	r3, [pc, #8]	; (801c640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801c636:	6818      	ldr	r0, [r3, #0]
 801c638:	6803      	ldr	r3, [r0, #0]
 801c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c63c:	4798      	blx	r3
 801c63e:	e76f      	b.n	801c520 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801c640:	20001354 	.word	0x20001354
 801c644:	2000134c 	.word	0x2000134c

0801c648 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c648:	b570      	push	{r4, r5, r6, lr}
 801c64a:	9d04      	ldr	r5, [sp, #16]
 801c64c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801c650:	460c      	mov	r4, r1
 801c652:	4619      	mov	r1, r3
 801c654:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c658:	2a0c      	cmp	r2, #12
 801c65a:	d820      	bhi.n	801c69e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801c65c:	e8df f002 	tbb	[pc, r2]
 801c660:	18121807 	.word	0x18121807
 801c664:	18181818 	.word	0x18181818
 801c668:	18181818 	.word	0x18181818
 801c66c:	18          	.byte	0x18
 801c66d:	00          	.byte	0x00
 801c66e:	6802      	ldr	r2, [r0, #0]
 801c670:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c674:	68d6      	ldr	r6, [r2, #12]
 801c676:	462b      	mov	r3, r5
 801c678:	460a      	mov	r2, r1
 801c67a:	46b4      	mov	ip, r6
 801c67c:	4621      	mov	r1, r4
 801c67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c682:	4760      	bx	ip
 801c684:	462a      	mov	r2, r5
 801c686:	4620      	mov	r0, r4
 801c688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c68c:	f7ff befc 	b.w	801c488 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c690:	4b03      	ldr	r3, [pc, #12]	; (801c6a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801c692:	4a04      	ldr	r2, [pc, #16]	; (801c6a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801c694:	4804      	ldr	r0, [pc, #16]	; (801c6a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801c696:	f240 21b7 	movw	r1, #695	; 0x2b7
 801c69a:	f008 fb93 	bl	8024dc4 <__assert_func>
 801c69e:	bd70      	pop	{r4, r5, r6, pc}
 801c6a0:	0805442d 	.word	0x0805442d
 801c6a4:	08054b19 	.word	0x08054b19
 801c6a8:	08054308 	.word	0x08054308

0801c6ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6b0:	b093      	sub	sp, #76	; 0x4c
 801c6b2:	880f      	ldrh	r7, [r1, #0]
 801c6b4:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801c6b8:	4681      	mov	r9, r0
 801c6ba:	4688      	mov	r8, r1
 801c6bc:	4615      	mov	r5, r2
 801c6be:	b12f      	cbz	r7, 801c6cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801c6c0:	4b71      	ldr	r3, [pc, #452]	; (801c888 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801c6c2:	4a72      	ldr	r2, [pc, #456]	; (801c88c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801c6c4:	4872      	ldr	r0, [pc, #456]	; (801c890 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801c6c6:	21e8      	movs	r1, #232	; 0xe8
 801c6c8:	f008 fb7c 	bl	8024dc4 <__assert_func>
 801c6cc:	6810      	ldr	r0, [r2, #0]
 801c6ce:	6851      	ldr	r1, [r2, #4]
 801c6d0:	ac0e      	add	r4, sp, #56	; 0x38
 801c6d2:	c403      	stmia	r4!, {r0, r1}
 801c6d4:	6818      	ldr	r0, [r3, #0]
 801c6d6:	6859      	ldr	r1, [r3, #4]
 801c6d8:	ac10      	add	r4, sp, #64	; 0x40
 801c6da:	c403      	stmia	r4!, {r0, r1}
 801c6dc:	a80e      	add	r0, sp, #56	; 0x38
 801c6de:	f7fa fd45 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6e2:	4629      	mov	r1, r5
 801c6e4:	a810      	add	r0, sp, #64	; 0x40
 801c6e6:	f7fa fd29 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c6ea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c6ee:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c6f2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c6f6:	4d67      	ldr	r5, [pc, #412]	; (801c894 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801c6f8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c6fc:	6828      	ldr	r0, [r5, #0]
 801c6fe:	4c66      	ldr	r4, [pc, #408]	; (801c898 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801c700:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c704:	4489      	add	r9, r1
 801c706:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c70a:	440a      	add	r2, r1
 801c70c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c710:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c714:	4413      	add	r3, r2
 801c716:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c71a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801c71e:	930a      	str	r3, [sp, #40]	; 0x28
 801c720:	6803      	ldr	r3, [r0, #0]
 801c722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c726:	4798      	blx	r3
 801c728:	2801      	cmp	r0, #1
 801c72a:	d11d      	bne.n	801c768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 801c72c:	220b      	movs	r2, #11
 801c72e:	9708      	str	r7, [sp, #32]
 801c730:	9207      	str	r2, [sp, #28]
 801c732:	8822      	ldrh	r2, [r4, #0]
 801c734:	f8cd a010 	str.w	sl, [sp, #16]
 801c738:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801c73c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c740:	9203      	str	r2, [sp, #12]
 801c742:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c746:	9202      	str	r2, [sp, #8]
 801c748:	fa1f f28b 	uxth.w	r2, fp
 801c74c:	9201      	str	r2, [sp, #4]
 801c74e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c752:	9200      	str	r2, [sp, #0]
 801c754:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c758:	6828      	ldr	r0, [r5, #0]
 801c75a:	4642      	mov	r2, r8
 801c75c:	4649      	mov	r1, r9
 801c75e:	f7f8 fec7 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c762:	b013      	add	sp, #76	; 0x4c
 801c764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c768:	6828      	ldr	r0, [r5, #0]
 801c76a:	6803      	ldr	r3, [r0, #0]
 801c76c:	6a1b      	ldr	r3, [r3, #32]
 801c76e:	4798      	blx	r3
 801c770:	8823      	ldrh	r3, [r4, #0]
 801c772:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c776:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c77a:	fb01 2303 	mla	r3, r1, r3, r2
 801c77e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c782:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801c786:	930b      	str	r3, [sp, #44]	; 0x2c
 801c788:	005b      	lsls	r3, r3, #1
 801c78a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801c78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c790:	429f      	cmp	r7, r3
 801c792:	da72      	bge.n	801c87a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 801c794:	2100      	movs	r1, #0
 801c796:	4559      	cmp	r1, fp
 801c798:	da5e      	bge.n	801c858 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c79a:	f819 3001 	ldrb.w	r3, [r9, r1]
 801c79e:	2204      	movs	r2, #4
 801c7a0:	fb12 2303 	smlabb	r3, r2, r3, r2
 801c7a4:	f858 2003 	ldr.w	r2, [r8, r3]
 801c7a8:	0e15      	lsrs	r5, r2, #24
 801c7aa:	d013      	beq.n	801c7d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c7ac:	2dff      	cmp	r5, #255	; 0xff
 801c7ae:	ea4f 2412 	mov.w	r4, r2, lsr #8
 801c7b2:	d111      	bne.n	801c7d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c7b4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c7b8:	d10e      	bne.n	801c7d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c7ba:	0953      	lsrs	r3, r2, #5
 801c7bc:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 801c7c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7c4:	f024 0407 	bic.w	r4, r4, #7
 801c7c8:	431c      	orrs	r4, r3
 801c7ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c7ce:	4314      	orrs	r4, r2
 801c7d0:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 801c7d4:	3101      	adds	r1, #1
 801c7d6:	e7de      	b.n	801c796 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 801c7d8:	fb0a f505 	mul.w	r5, sl, r5
 801c7dc:	1c6b      	adds	r3, r5, #1
 801c7de:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801c7e2:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801c7e6:	121b      	asrs	r3, r3, #8
 801c7e8:	fa1f fe83 	uxth.w	lr, r3
 801c7ec:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c7f0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801c7f4:	43db      	mvns	r3, r3
 801c7f6:	b2db      	uxtb	r3, r3
 801c7f8:	fb15 f50e 	smulbb	r5, r5, lr
 801c7fc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c800:	fb06 5603 	mla	r6, r6, r3, r5
 801c804:	b2d2      	uxtb	r2, r2
 801c806:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c80a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c80e:	fa5f fc8c 	uxtb.w	ip, ip
 801c812:	fb12 f20e 	smulbb	r2, r2, lr
 801c816:	fb0c 2203 	mla	r2, ip, r3, r2
 801c81a:	b2e4      	uxtb	r4, r4
 801c81c:	b2b6      	uxth	r6, r6
 801c81e:	fb14 f40e 	smulbb	r4, r4, lr
 801c822:	b292      	uxth	r2, r2
 801c824:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c828:	fb05 4503 	mla	r5, r5, r3, r4
 801c82c:	1c73      	adds	r3, r6, #1
 801c82e:	1c54      	adds	r4, r2, #1
 801c830:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c834:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801c838:	b2ad      	uxth	r5, r5
 801c83a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c83e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c842:	4326      	orrs	r6, r4
 801c844:	1c6c      	adds	r4, r5, #1
 801c846:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 801c84a:	0964      	lsrs	r4, r4, #5
 801c84c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c850:	4326      	orrs	r6, r4
 801c852:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 801c856:	e7bd      	b.n	801c7d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c85c:	881b      	ldrh	r3, [r3, #0]
 801c85e:	eba3 030b 	sub.w	r3, r3, fp
 801c862:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c866:	4418      	add	r0, r3
 801c868:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801c86c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c86e:	eba3 030b 	sub.w	r3, r3, fp
 801c872:	4413      	add	r3, r2
 801c874:	4499      	add	r9, r3
 801c876:	3701      	adds	r7, #1
 801c878:	e789      	b.n	801c78e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801c87a:	4b06      	ldr	r3, [pc, #24]	; (801c894 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801c87c:	6818      	ldr	r0, [r3, #0]
 801c87e:	6803      	ldr	r3, [r0, #0]
 801c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c882:	4798      	blx	r3
 801c884:	e76d      	b.n	801c762 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 801c886:	bf00      	nop
 801c888:	08054206 	.word	0x08054206
 801c88c:	080548ea 	.word	0x080548ea
 801c890:	08054308 	.word	0x08054308
 801c894:	20001354 	.word	0x20001354
 801c898:	2000134c 	.word	0x2000134c

0801c89c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a0:	4614      	mov	r4, r2
 801c8a2:	880a      	ldrh	r2, [r1, #0]
 801c8a4:	b093      	sub	sp, #76	; 0x4c
 801c8a6:	2a02      	cmp	r2, #2
 801c8a8:	4606      	mov	r6, r0
 801c8aa:	4689      	mov	r9, r1
 801c8ac:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 801c8b0:	d006      	beq.n	801c8c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801c8b2:	4b7a      	ldr	r3, [pc, #488]	; (801ca9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801c8b4:	4a7a      	ldr	r2, [pc, #488]	; (801caa0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801c8b6:	487b      	ldr	r0, [pc, #492]	; (801caa4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801c8b8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801c8bc:	f008 fa82 	bl	8024dc4 <__assert_func>
 801c8c0:	2f00      	cmp	r7, #0
 801c8c2:	d04b      	beq.n	801c95c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801c8c4:	6820      	ldr	r0, [r4, #0]
 801c8c6:	6861      	ldr	r1, [r4, #4]
 801c8c8:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 801caac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 801c8cc:	ad0e      	add	r5, sp, #56	; 0x38
 801c8ce:	c503      	stmia	r5!, {r0, r1}
 801c8d0:	6818      	ldr	r0, [r3, #0]
 801c8d2:	6859      	ldr	r1, [r3, #4]
 801c8d4:	ad10      	add	r5, sp, #64	; 0x40
 801c8d6:	c503      	stmia	r5!, {r0, r1}
 801c8d8:	a80e      	add	r0, sp, #56	; 0x38
 801c8da:	f7fa fc47 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8de:	4621      	mov	r1, r4
 801c8e0:	a810      	add	r0, sp, #64	; 0x40
 801c8e2:	f7fa fc2b 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8e6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c8ea:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c8ee:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c8f2:	f8da 0000 	ldr.w	r0, [sl]
 801c8f6:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801c8fa:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 801c8fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c902:	1874      	adds	r4, r6, r1
 801c904:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c908:	4e67      	ldr	r6, [pc, #412]	; (801caa8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 801c90a:	440a      	add	r2, r1
 801c90c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c910:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c914:	4413      	add	r3, r2
 801c916:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c91a:	6803      	ldr	r3, [r0, #0]
 801c91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c920:	4798      	blx	r3
 801c922:	2801      	cmp	r0, #1
 801c924:	d11d      	bne.n	801c962 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801c926:	2200      	movs	r2, #0
 801c928:	210b      	movs	r1, #11
 801c92a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801c92e:	8831      	ldrh	r1, [r6, #0]
 801c930:	9704      	str	r7, [sp, #16]
 801c932:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c936:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c93a:	9203      	str	r2, [sp, #12]
 801c93c:	fa1f f288 	uxth.w	r2, r8
 801c940:	9202      	str	r2, [sp, #8]
 801c942:	b2ad      	uxth	r5, r5
 801c944:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c948:	9200      	str	r2, [sp, #0]
 801c94a:	9501      	str	r5, [sp, #4]
 801c94c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c950:	f8da 0000 	ldr.w	r0, [sl]
 801c954:	464a      	mov	r2, r9
 801c956:	4621      	mov	r1, r4
 801c958:	f7f8 fdca 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c95c:	b013      	add	sp, #76	; 0x4c
 801c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c962:	f8da 0000 	ldr.w	r0, [sl]
 801c966:	6803      	ldr	r3, [r0, #0]
 801c968:	6a1b      	ldr	r3, [r3, #32]
 801c96a:	4798      	blx	r3
 801c96c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c970:	8833      	ldrh	r3, [r6, #0]
 801c972:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c976:	fb01 2303 	mla	r3, r1, r3, r2
 801c97a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c97e:	2fff      	cmp	r7, #255	; 0xff
 801c980:	f109 0304 	add.w	r3, r9, #4
 801c984:	930a      	str	r3, [sp, #40]	; 0x28
 801c986:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801c98a:	d111      	bne.n	801c9b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 801c98c:	b212      	sxth	r2, r2
 801c98e:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 801c992:	2100      	movs	r1, #0
 801c994:	4541      	cmp	r1, r8
 801c996:	da7a      	bge.n	801ca8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801c998:	2300      	movs	r3, #0
 801c99a:	42ab      	cmp	r3, r5
 801c99c:	da6b      	bge.n	801ca76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 801c99e:	f814 c003 	ldrb.w	ip, [r4, r3]
 801c9a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c9a4:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 801c9a8:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 801c9ac:	3301      	adds	r3, #1
 801c9ae:	e7f4      	b.n	801c99a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 801c9b0:	b213      	sxth	r3, r2
 801c9b2:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c9b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c9b8:	005b      	lsls	r3, r3, #1
 801c9ba:	930c      	str	r3, [sp, #48]	; 0x30
 801c9bc:	f04f 0900 	mov.w	r9, #0
 801c9c0:	b2ba      	uxth	r2, r7
 801c9c2:	fa1f fc8c 	uxth.w	ip, ip
 801c9c6:	960d      	str	r6, [sp, #52]	; 0x34
 801c9c8:	45c1      	cmp	r9, r8
 801c9ca:	da60      	bge.n	801ca8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801c9cc:	46a3      	mov	fp, r4
 801c9ce:	4682      	mov	sl, r0
 801c9d0:	ebab 0304 	sub.w	r3, fp, r4
 801c9d4:	429d      	cmp	r5, r3
 801c9d6:	dd3e      	ble.n	801ca56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 801c9d8:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801c9dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801c9de:	f8ba 1000 	ldrh.w	r1, [sl]
 801c9e2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9e6:	120e      	asrs	r6, r1, #8
 801c9e8:	121f      	asrs	r7, r3, #8
 801c9ea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c9ee:	fb16 f60c 	smulbb	r6, r6, ip
 801c9f2:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 801c9f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c9fa:	00c9      	lsls	r1, r1, #3
 801c9fc:	fb07 6702 	mla	r7, r7, r2, r6
 801ca00:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ca04:	10de      	asrs	r6, r3, #3
 801ca06:	b2c9      	uxtb	r1, r1
 801ca08:	00db      	lsls	r3, r3, #3
 801ca0a:	fb1e fe0c 	smulbb	lr, lr, ip
 801ca0e:	fb11 f10c 	smulbb	r1, r1, ip
 801ca12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	b2bf      	uxth	r7, r7
 801ca1a:	fb06 e602 	mla	r6, r6, r2, lr
 801ca1e:	fb03 1302 	mla	r3, r3, r2, r1
 801ca22:	b2b6      	uxth	r6, r6
 801ca24:	b29b      	uxth	r3, r3
 801ca26:	1c79      	adds	r1, r7, #1
 801ca28:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ca2c:	f106 0e01 	add.w	lr, r6, #1
 801ca30:	1c59      	adds	r1, r3, #1
 801ca32:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ca36:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801ca3a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ca3e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801ca42:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ca46:	430f      	orrs	r7, r1
 801ca48:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801ca4c:	ea47 070e 	orr.w	r7, r7, lr
 801ca50:	f82a 7b02 	strh.w	r7, [sl], #2
 801ca54:	e7bc      	b.n	801c9d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 801ca56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca58:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ca5a:	881b      	ldrh	r3, [r3, #0]
 801ca5c:	1b5b      	subs	r3, r3, r5
 801ca5e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ca62:	4418      	add	r0, r3
 801ca64:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801ca68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ca6a:	1b5b      	subs	r3, r3, r5
 801ca6c:	440b      	add	r3, r1
 801ca6e:	441c      	add	r4, r3
 801ca70:	f109 0901 	add.w	r9, r9, #1
 801ca74:	e7a8      	b.n	801c9c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 801ca76:	8833      	ldrh	r3, [r6, #0]
 801ca78:	1b5b      	subs	r3, r3, r5
 801ca7a:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ca7e:	4418      	add	r0, r3
 801ca80:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801ca84:	1b5b      	subs	r3, r3, r5
 801ca86:	4413      	add	r3, r2
 801ca88:	441c      	add	r4, r3
 801ca8a:	3101      	adds	r1, #1
 801ca8c:	e782      	b.n	801c994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 801ca8e:	4b07      	ldr	r3, [pc, #28]	; (801caac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 801ca90:	6818      	ldr	r0, [r3, #0]
 801ca92:	6803      	ldr	r3, [r0, #0]
 801ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca96:	4798      	blx	r3
 801ca98:	e760      	b.n	801c95c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ca9a:	bf00      	nop
 801ca9c:	080540c4 	.word	0x080540c4
 801caa0:	08054754 	.word	0x08054754
 801caa4:	08054308 	.word	0x08054308
 801caa8:	2000134c 	.word	0x2000134c
 801caac:	20001354 	.word	0x20001354

0801cab0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab4:	4616      	mov	r6, r2
 801cab6:	880a      	ldrh	r2, [r1, #0]
 801cab8:	b093      	sub	sp, #76	; 0x4c
 801caba:	2a01      	cmp	r2, #1
 801cabc:	4681      	mov	r9, r0
 801cabe:	4688      	mov	r8, r1
 801cac0:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801cac4:	d006      	beq.n	801cad4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801cac6:	4b6c      	ldr	r3, [pc, #432]	; (801cc78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cac8:	4a6c      	ldr	r2, [pc, #432]	; (801cc7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801caca:	486d      	ldr	r0, [pc, #436]	; (801cc80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801cacc:	f240 119d 	movw	r1, #413	; 0x19d
 801cad0:	f008 f978 	bl	8024dc4 <__assert_func>
 801cad4:	f1ba 0f00 	cmp.w	sl, #0
 801cad8:	d04a      	beq.n	801cb70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cada:	6830      	ldr	r0, [r6, #0]
 801cadc:	6871      	ldr	r1, [r6, #4]
 801cade:	4d69      	ldr	r5, [pc, #420]	; (801cc84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801cae0:	ac0e      	add	r4, sp, #56	; 0x38
 801cae2:	c403      	stmia	r4!, {r0, r1}
 801cae4:	6818      	ldr	r0, [r3, #0]
 801cae6:	6859      	ldr	r1, [r3, #4]
 801cae8:	ac10      	add	r4, sp, #64	; 0x40
 801caea:	c403      	stmia	r4!, {r0, r1}
 801caec:	a80e      	add	r0, sp, #56	; 0x38
 801caee:	f7fa fb3d 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caf2:	4631      	mov	r1, r6
 801caf4:	a810      	add	r0, sp, #64	; 0x40
 801caf6:	f7fa fb21 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cafa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cafe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cb02:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cb06:	6828      	ldr	r0, [r5, #0]
 801cb08:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801cb0c:	4c5e      	ldr	r4, [pc, #376]	; (801cc88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801cb0e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cb12:	4489      	add	r9, r1
 801cb14:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cb18:	440a      	add	r2, r1
 801cb1a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cb1e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cb22:	4413      	add	r3, r2
 801cb24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cb28:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801cb2c:	930a      	str	r3, [sp, #40]	; 0x28
 801cb2e:	6803      	ldr	r3, [r0, #0]
 801cb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb34:	4798      	blx	r3
 801cb36:	2801      	cmp	r0, #1
 801cb38:	d11d      	bne.n	801cb76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801cb3a:	220b      	movs	r2, #11
 801cb3c:	2100      	movs	r1, #0
 801cb3e:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801cb42:	8822      	ldrh	r2, [r4, #0]
 801cb44:	f8cd a010 	str.w	sl, [sp, #16]
 801cb48:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801cb4c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801cb50:	9203      	str	r2, [sp, #12]
 801cb52:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cb56:	9202      	str	r2, [sp, #8]
 801cb58:	b2b6      	uxth	r6, r6
 801cb5a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cb5e:	9200      	str	r2, [sp, #0]
 801cb60:	9601      	str	r6, [sp, #4]
 801cb62:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cb66:	6828      	ldr	r0, [r5, #0]
 801cb68:	4642      	mov	r2, r8
 801cb6a:	4649      	mov	r1, r9
 801cb6c:	f7f8 fcc0 	bl	80154f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801cb70:	b013      	add	sp, #76	; 0x4c
 801cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb76:	6828      	ldr	r0, [r5, #0]
 801cb78:	6803      	ldr	r3, [r0, #0]
 801cb7a:	6a1b      	ldr	r3, [r3, #32]
 801cb7c:	4798      	blx	r3
 801cb7e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801cb82:	8823      	ldrh	r3, [r4, #0]
 801cb84:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cb88:	940d      	str	r4, [sp, #52]	; 0x34
 801cb8a:	fb01 2303 	mla	r3, r1, r3, r2
 801cb8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb92:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801cb96:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb98:	ea6f 010a 	mvn.w	r1, sl
 801cb9c:	005b      	lsls	r3, r3, #1
 801cb9e:	930c      	str	r3, [sp, #48]	; 0x30
 801cba0:	f04f 0e00 	mov.w	lr, #0
 801cba4:	b2c9      	uxtb	r1, r1
 801cba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cba8:	459e      	cmp	lr, r3
 801cbaa:	da5f      	bge.n	801cc6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801cbac:	2700      	movs	r7, #0
 801cbae:	fa1f fb8a 	uxth.w	fp, sl
 801cbb2:	42b7      	cmp	r7, r6
 801cbb4:	da4a      	bge.n	801cc4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801cbb6:	f819 3007 	ldrb.w	r3, [r9, r7]
 801cbba:	2203      	movs	r2, #3
 801cbbc:	2404      	movs	r4, #4
 801cbbe:	fb12 4303 	smlabb	r3, r2, r3, r4
 801cbc2:	eb08 0403 	add.w	r4, r8, r3
 801cbc6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cbca:	78a2      	ldrb	r2, [r4, #2]
 801cbcc:	7865      	ldrb	r5, [r4, #1]
 801cbce:	f818 c003 	ldrb.w	ip, [r8, r3]
 801cbd2:	d10c      	bne.n	801cbee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 801cbd4:	4b2d      	ldr	r3, [pc, #180]	; (801cc8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cbd6:	00ed      	lsls	r5, r5, #3
 801cbd8:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 801cbdc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cbe0:	432a      	orrs	r2, r5
 801cbe2:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 801cbe6:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 801cbea:	3701      	adds	r7, #1
 801cbec:	e7e1      	b.n	801cbb2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 801cbee:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 801cbf2:	121c      	asrs	r4, r3, #8
 801cbf4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cbf8:	fb12 f20b 	smulbb	r2, r2, fp
 801cbfc:	fb04 2201 	mla	r2, r4, r1, r2
 801cc00:	10dc      	asrs	r4, r3, #3
 801cc02:	00db      	lsls	r3, r3, #3
 801cc04:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cc08:	b2db      	uxtb	r3, r3
 801cc0a:	fb15 f50b 	smulbb	r5, r5, fp
 801cc0e:	fb1c fc0b 	smulbb	ip, ip, fp
 801cc12:	b292      	uxth	r2, r2
 801cc14:	fb04 5501 	mla	r5, r4, r1, r5
 801cc18:	fb03 cc01 	mla	ip, r3, r1, ip
 801cc1c:	b2ad      	uxth	r5, r5
 801cc1e:	fa1f fc8c 	uxth.w	ip, ip
 801cc22:	1c53      	adds	r3, r2, #1
 801cc24:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cc28:	1c6c      	adds	r4, r5, #1
 801cc2a:	f10c 0301 	add.w	r3, ip, #1
 801cc2e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801cc32:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 801cc36:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801cc3a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cc3e:	096d      	lsrs	r5, r5, #5
 801cc40:	ea42 020c 	orr.w	r2, r2, ip
 801cc44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cc48:	432a      	orrs	r2, r5
 801cc4a:	e7cc      	b.n	801cbe6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 801cc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc50:	881b      	ldrh	r3, [r3, #0]
 801cc52:	1b9b      	subs	r3, r3, r6
 801cc54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cc58:	4418      	add	r0, r3
 801cc5a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cc5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc60:	1b9b      	subs	r3, r3, r6
 801cc62:	4413      	add	r3, r2
 801cc64:	4499      	add	r9, r3
 801cc66:	f10e 0e01 	add.w	lr, lr, #1
 801cc6a:	e79c      	b.n	801cba6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 801cc6c:	4b05      	ldr	r3, [pc, #20]	; (801cc84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801cc6e:	6818      	ldr	r0, [r3, #0]
 801cc70:	6803      	ldr	r3, [r0, #0]
 801cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc74:	4798      	blx	r3
 801cc76:	e77b      	b.n	801cb70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cc78:	08054112 	.word	0x08054112
 801cc7c:	080547dd 	.word	0x080547dd
 801cc80:	08054308 	.word	0x08054308
 801cc84:	20001354 	.word	0x20001354
 801cc88:	2000134c 	.word	0x2000134c
 801cc8c:	fffff800 	.word	0xfffff800

0801cc90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cc90:	b430      	push	{r4, r5}
 801cc92:	780d      	ldrb	r5, [r1, #0]
 801cc94:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801cc98:	2d01      	cmp	r5, #1
 801cc9a:	d00a      	beq.n	801ccb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801cc9c:	d305      	bcc.n	801ccaa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801cc9e:	2d02      	cmp	r5, #2
 801cca0:	d10b      	bne.n	801ccba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801cca2:	9402      	str	r4, [sp, #8]
 801cca4:	bc30      	pop	{r4, r5}
 801cca6:	f7ff bdf9 	b.w	801c89c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ccaa:	9402      	str	r4, [sp, #8]
 801ccac:	bc30      	pop	{r4, r5}
 801ccae:	f7ff bcfd 	b.w	801c6ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ccb2:	9402      	str	r4, [sp, #8]
 801ccb4:	bc30      	pop	{r4, r5}
 801ccb6:	f7ff befb 	b.w	801cab0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ccba:	bc30      	pop	{r4, r5}
 801ccbc:	4770      	bx	lr
	...

0801ccc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc4:	4605      	mov	r5, r0
 801ccc6:	b089      	sub	sp, #36	; 0x24
 801ccc8:	6810      	ldr	r0, [r2, #0]
 801ccca:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 801ccce:	460c      	mov	r4, r1
 801ccd0:	6851      	ldr	r1, [r2, #4]
 801ccd2:	ae04      	add	r6, sp, #16
 801ccd4:	c603      	stmia	r6!, {r0, r1}
 801ccd6:	6818      	ldr	r0, [r3, #0]
 801ccd8:	6859      	ldr	r1, [r3, #4]
 801ccda:	ae06      	add	r6, sp, #24
 801ccdc:	4617      	mov	r7, r2
 801ccde:	c603      	stmia	r6!, {r0, r1}
 801cce0:	a804      	add	r0, sp, #16
 801cce2:	f7fa fa43 	bl	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cce6:	4639      	mov	r1, r7
 801cce8:	a806      	add	r0, sp, #24
 801ccea:	f7fa fa27 	bl	801713c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ccee:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ccf2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ccf6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ccfa:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801ccfe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cd02:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801cd06:	440c      	add	r4, r1
 801cd08:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801cd0c:	440a      	add	r2, r1
 801cd0e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cd12:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801cd16:	4413      	add	r3, r2
 801cd18:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cd1c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801cd20:	9300      	str	r3, [sp, #0]
 801cd22:	4b80      	ldr	r3, [pc, #512]	; (801cf24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801cd24:	6818      	ldr	r0, [r3, #0]
 801cd26:	6803      	ldr	r3, [r0, #0]
 801cd28:	6a1b      	ldr	r3, [r3, #32]
 801cd2a:	4798      	blx	r3
 801cd2c:	4b7e      	ldr	r3, [pc, #504]	; (801cf28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801cd2e:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801cd32:	881a      	ldrh	r2, [r3, #0]
 801cd34:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801cd38:	fb06 1202 	mla	r2, r6, r2, r1
 801cd3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cd40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cd44:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 801cd48:	b212      	sxth	r2, r2
 801cd4a:	d117      	bne.n	801cd7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 801cd4c:	9201      	str	r2, [sp, #4]
 801cd4e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801cd52:	f04f 0a00 	mov.w	sl, #0
 801cd56:	9302      	str	r3, [sp, #8]
 801cd58:	9b00      	ldr	r3, [sp, #0]
 801cd5a:	459a      	cmp	sl, r3
 801cd5c:	f280 80d9 	bge.w	801cf12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801cd60:	2100      	movs	r1, #0
 801cd62:	4541      	cmp	r1, r8
 801cd64:	f280 80c1 	bge.w	801ceea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801cd68:	5c63      	ldrb	r3, [r4, r1]
 801cd6a:	b12b      	cbz	r3, 801cd78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801cd6c:	2bff      	cmp	r3, #255	; 0xff
 801cd6e:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 801cd72:	d176      	bne.n	801ce62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 801cd74:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801cd78:	3101      	adds	r1, #1
 801cd7a:	e7f2      	b.n	801cd62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 801cd7c:	9202      	str	r2, [sp, #8]
 801cd7e:	0052      	lsls	r2, r2, #1
 801cd80:	9201      	str	r2, [sp, #4]
 801cd82:	f04f 0b00 	mov.w	fp, #0
 801cd86:	9303      	str	r3, [sp, #12]
 801cd88:	9b00      	ldr	r3, [sp, #0]
 801cd8a:	459b      	cmp	fp, r3
 801cd8c:	f280 80c1 	bge.w	801cf12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801cd90:	f04f 0c00 	mov.w	ip, #0
 801cd94:	45c4      	cmp	ip, r8
 801cd96:	da4f      	bge.n	801ce38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 801cd98:	f814 300c 	ldrb.w	r3, [r4, ip]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d048      	beq.n	801ce32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801cda0:	fb09 f303 	mul.w	r3, r9, r3
 801cda4:	1c5a      	adds	r2, r3, #1
 801cda6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cdaa:	121b      	asrs	r3, r3, #8
 801cdac:	d041      	beq.n	801ce32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801cdae:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 801cdb2:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 801cdb6:	b29e      	uxth	r6, r3
 801cdb8:	1211      	asrs	r1, r2, #8
 801cdba:	43db      	mvns	r3, r3
 801cdbc:	b2db      	uxtb	r3, r3
 801cdbe:	ea4f 272e 	mov.w	r7, lr, asr #8
 801cdc2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cdc6:	fb11 f103 	smulbb	r1, r1, r3
 801cdca:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801cdce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cdd2:	00d2      	lsls	r2, r2, #3
 801cdd4:	fb07 1706 	mla	r7, r7, r6, r1
 801cdd8:	b2d2      	uxtb	r2, r2
 801cdda:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801cdde:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cde2:	fb12 f203 	smulbb	r2, r2, r3
 801cde6:	fa5f fe8e 	uxtb.w	lr, lr
 801cdea:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cdee:	fb0e 2206 	mla	r2, lr, r6, r2
 801cdf2:	fb1a fa03 	smulbb	sl, sl, r3
 801cdf6:	b2bf      	uxth	r7, r7
 801cdf8:	b292      	uxth	r2, r2
 801cdfa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cdfe:	fb01 a106 	mla	r1, r1, r6, sl
 801ce02:	1c7b      	adds	r3, r7, #1
 801ce04:	f102 0a01 	add.w	sl, r2, #1
 801ce08:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ce0c:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 801ce10:	b289      	uxth	r1, r1
 801ce12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ce16:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ce1a:	ea47 070a 	orr.w	r7, r7, sl
 801ce1e:	f101 0a01 	add.w	sl, r1, #1
 801ce22:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801ce26:	0949      	lsrs	r1, r1, #5
 801ce28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ce2c:	430f      	orrs	r7, r1
 801ce2e:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 801ce32:	f10c 0c01 	add.w	ip, ip, #1
 801ce36:	e7ad      	b.n	801cd94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 801ce38:	9b03      	ldr	r3, [sp, #12]
 801ce3a:	9a01      	ldr	r2, [sp, #4]
 801ce3c:	881b      	ldrh	r3, [r3, #0]
 801ce3e:	eba3 0308 	sub.w	r3, r3, r8
 801ce42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ce46:	4418      	add	r0, r3
 801ce48:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ce4c:	eba3 0308 	sub.w	r3, r3, r8
 801ce50:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ce54:	4415      	add	r5, r2
 801ce56:	9a02      	ldr	r2, [sp, #8]
 801ce58:	4413      	add	r3, r2
 801ce5a:	441c      	add	r4, r3
 801ce5c:	f10b 0b01 	add.w	fp, fp, #1
 801ce60:	e792      	b.n	801cd88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 801ce62:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801ce66:	b29f      	uxth	r7, r3
 801ce68:	1216      	asrs	r6, r2, #8
 801ce6a:	43db      	mvns	r3, r3
 801ce6c:	b2db      	uxtb	r3, r3
 801ce6e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ce72:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ce76:	fb16 f603 	smulbb	r6, r6, r3
 801ce7a:	ea4f 09e2 	mov.w	r9, r2, asr #3
 801ce7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ce82:	00d2      	lsls	r2, r2, #3
 801ce84:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ce88:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ce8c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ce90:	b2d2      	uxtb	r2, r2
 801ce92:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ce96:	fa1f fc8c 	uxth.w	ip, ip
 801ce9a:	fb19 f903 	smulbb	r9, r9, r3
 801ce9e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cea2:	fa5f fe8e 	uxtb.w	lr, lr
 801cea6:	fb12 f203 	smulbb	r2, r2, r3
 801ceaa:	fb06 9607 	mla	r6, r6, r7, r9
 801ceae:	fb0e 2207 	mla	r2, lr, r7, r2
 801ceb2:	f10c 0901 	add.w	r9, ip, #1
 801ceb6:	b292      	uxth	r2, r2
 801ceb8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801cebc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801cec0:	f102 0c01 	add.w	ip, r2, #1
 801cec4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cec8:	b2b6      	uxth	r6, r6
 801ceca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cece:	ea49 0c02 	orr.w	ip, r9, r2
 801ced2:	f106 0901 	add.w	r9, r6, #1
 801ced6:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801ceda:	0976      	lsrs	r6, r6, #5
 801cedc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cee0:	ea4c 0c06 	orr.w	ip, ip, r6
 801cee4:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801cee8:	e746      	b.n	801cd78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801ceea:	9b02      	ldr	r3, [sp, #8]
 801ceec:	881b      	ldrh	r3, [r3, #0]
 801ceee:	eba3 0308 	sub.w	r3, r3, r8
 801cef2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801cef6:	4418      	add	r0, r3
 801cef8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cefc:	eba3 0308 	sub.w	r3, r3, r8
 801cf00:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 801cf04:	4415      	add	r5, r2
 801cf06:	9a01      	ldr	r2, [sp, #4]
 801cf08:	4413      	add	r3, r2
 801cf0a:	441c      	add	r4, r3
 801cf0c:	f10a 0a01 	add.w	sl, sl, #1
 801cf10:	e722      	b.n	801cd58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801cf12:	4b04      	ldr	r3, [pc, #16]	; (801cf24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801cf14:	6818      	ldr	r0, [r3, #0]
 801cf16:	6803      	ldr	r3, [r0, #0]
 801cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf1a:	4798      	blx	r3
 801cf1c:	b009      	add	sp, #36	; 0x24
 801cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf22:	bf00      	nop
 801cf24:	20001354 	.word	0x20001354
 801cf28:	2000134c 	.word	0x2000134c

0801cf2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf30:	b089      	sub	sp, #36	; 0x24
 801cf32:	4682      	mov	sl, r0
 801cf34:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801cf38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf3a:	460d      	mov	r5, r1
 801cf3c:	4691      	mov	r9, r2
 801cf3e:	4698      	mov	r8, r3
 801cf40:	b3ae      	cbz	r6, 801cfae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cf42:	4608      	mov	r0, r1
 801cf44:	f7fc faa0 	bl	8019488 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf48:	4607      	mov	r7, r0
 801cf4a:	4628      	mov	r0, r5
 801cf4c:	f7fc fad6 	bl	80194fc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf50:	f8ad 000e 	strh.w	r0, [sp, #14]
 801cf54:	4628      	mov	r0, r5
 801cf56:	f8ad 9008 	strh.w	r9, [sp, #8]
 801cf5a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801cf5e:	f8ad 700c 	strh.w	r7, [sp, #12]
 801cf62:	f7fc fc1d 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cf66:	b178      	cbz	r0, 801cf88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cf68:	4628      	mov	r0, r5
 801cf6a:	f7fc fc19 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cf6e:	2802      	cmp	r0, #2
 801cf70:	d00a      	beq.n	801cf88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cf72:	4628      	mov	r0, r5
 801cf74:	f7fc fc14 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cf78:	280b      	cmp	r0, #11
 801cf7a:	d005      	beq.n	801cf88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cf7c:	4b69      	ldr	r3, [pc, #420]	; (801d124 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801cf7e:	4a6a      	ldr	r2, [pc, #424]	; (801d128 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801cf80:	486a      	ldr	r0, [pc, #424]	; (801d12c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801cf82:	214b      	movs	r1, #75	; 0x4b
 801cf84:	f007 ff1e 	bl	8024dc4 <__assert_func>
 801cf88:	4628      	mov	r0, r5
 801cf8a:	f7fc fb85 	bl	8019698 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cf8e:	4607      	mov	r7, r0
 801cf90:	4628      	mov	r0, r5
 801cf92:	f7fc fbb3 	bl	80196fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801cf96:	4681      	mov	r9, r0
 801cf98:	4628      	mov	r0, r5
 801cf9a:	f7fc fc01 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cf9e:	2802      	cmp	r0, #2
 801cfa0:	d108      	bne.n	801cfb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801cfa2:	4633      	mov	r3, r6
 801cfa4:	4622      	mov	r2, r4
 801cfa6:	a902      	add	r1, sp, #8
 801cfa8:	4638      	mov	r0, r7
 801cfaa:	f7ff fa6d 	bl	801c488 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cfae:	b009      	add	sp, #36	; 0x24
 801cfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb4:	4628      	mov	r0, r5
 801cfb6:	f7fc fbf3 	bl	80197a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cfba:	280b      	cmp	r0, #11
 801cfbc:	d107      	bne.n	801cfce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801cfbe:	9600      	str	r6, [sp, #0]
 801cfc0:	4623      	mov	r3, r4
 801cfc2:	aa02      	add	r2, sp, #8
 801cfc4:	4649      	mov	r1, r9
 801cfc6:	4638      	mov	r0, r7
 801cfc8:	f7ff fe62 	bl	801cc90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801cfcc:	e7ef      	b.n	801cfae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cfce:	4628      	mov	r0, r5
 801cfd0:	f7fc fb28 	bl	8019624 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cfd4:	b950      	cbnz	r0, 801cfec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801cfd6:	e9cd 6000 	strd	r6, r0, [sp]
 801cfda:	f8da 3000 	ldr.w	r3, [sl]
 801cfde:	aa02      	add	r2, sp, #8
 801cfe0:	68dd      	ldr	r5, [r3, #12]
 801cfe2:	4639      	mov	r1, r7
 801cfe4:	4623      	mov	r3, r4
 801cfe6:	4650      	mov	r0, sl
 801cfe8:	47a8      	blx	r5
 801cfea:	e7e0      	b.n	801cfae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cfec:	f10d 0818 	add.w	r8, sp, #24
 801cff0:	4629      	mov	r1, r5
 801cff2:	4640      	mov	r0, r8
 801cff4:	f7fc fabc 	bl	8019570 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cff8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801cffc:	ad04      	add	r5, sp, #16
 801cffe:	e885 0003 	stmia.w	r5, {r0, r1}
 801d002:	4628      	mov	r0, r5
 801d004:	4621      	mov	r1, r4
 801d006:	f7f7 fb15 	bl	8014634 <_ZN8touchgfx4RectaNERKS0_>
 801d00a:	4628      	mov	r0, r5
 801d00c:	f7f7 fb55 	bl	80146ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801d010:	b138      	cbz	r0, 801d022 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801d012:	9600      	str	r6, [sp, #0]
 801d014:	4623      	mov	r3, r4
 801d016:	aa02      	add	r2, sp, #8
 801d018:	4649      	mov	r1, r9
 801d01a:	4638      	mov	r0, r7
 801d01c:	f7ff fe50 	bl	801ccc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d020:	e7c5      	b.n	801cfae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d022:	e9cd 6000 	strd	r6, r0, [sp]
 801d026:	f8da 3000 	ldr.w	r3, [sl]
 801d02a:	aa02      	add	r2, sp, #8
 801d02c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d030:	4639      	mov	r1, r7
 801d032:	462b      	mov	r3, r5
 801d034:	4650      	mov	r0, sl
 801d036:	47d8      	blx	fp
 801d038:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d03c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d040:	4293      	cmp	r3, r2
 801d042:	dd13      	ble.n	801d06c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801d044:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d048:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d04c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d050:	1a9b      	subs	r3, r3, r2
 801d052:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d056:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d05a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d05e:	9600      	str	r6, [sp, #0]
 801d060:	4643      	mov	r3, r8
 801d062:	aa02      	add	r2, sp, #8
 801d064:	4649      	mov	r1, r9
 801d066:	4638      	mov	r0, r7
 801d068:	f7ff fe2a 	bl	801ccc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d06c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d070:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d074:	4293      	cmp	r3, r2
 801d076:	dd13      	ble.n	801d0a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801d078:	1a9b      	subs	r3, r3, r2
 801d07a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d07e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d082:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d086:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d08a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d08e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d092:	9600      	str	r6, [sp, #0]
 801d094:	4643      	mov	r3, r8
 801d096:	aa02      	add	r2, sp, #8
 801d098:	4649      	mov	r1, r9
 801d09a:	4638      	mov	r0, r7
 801d09c:	f7ff fe10 	bl	801ccc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d0a0:	88a2      	ldrh	r2, [r4, #4]
 801d0a2:	8823      	ldrh	r3, [r4, #0]
 801d0a4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d0a8:	4413      	add	r3, r2
 801d0aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d0ae:	440a      	add	r2, r1
 801d0b0:	b29b      	uxth	r3, r3
 801d0b2:	b292      	uxth	r2, r2
 801d0b4:	b211      	sxth	r1, r2
 801d0b6:	b218      	sxth	r0, r3
 801d0b8:	4288      	cmp	r0, r1
 801d0ba:	dd13      	ble.n	801d0e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801d0bc:	1a9b      	subs	r3, r3, r2
 801d0be:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d0c2:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801d0c6:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d0ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d0ce:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d0d2:	9600      	str	r6, [sp, #0]
 801d0d4:	4643      	mov	r3, r8
 801d0d6:	aa02      	add	r2, sp, #8
 801d0d8:	4649      	mov	r1, r9
 801d0da:	4638      	mov	r0, r7
 801d0dc:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d0e0:	f7ff fdee 	bl	801ccc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d0e4:	88e2      	ldrh	r2, [r4, #6]
 801d0e6:	8863      	ldrh	r3, [r4, #2]
 801d0e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d0ec:	4413      	add	r3, r2
 801d0ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d0f2:	440a      	add	r2, r1
 801d0f4:	b29b      	uxth	r3, r3
 801d0f6:	b292      	uxth	r2, r2
 801d0f8:	b211      	sxth	r1, r2
 801d0fa:	b218      	sxth	r0, r3
 801d0fc:	4288      	cmp	r0, r1
 801d0fe:	f77f af56 	ble.w	801cfae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d102:	f9b4 5000 	ldrsh.w	r5, [r4]
 801d106:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d10a:	f8ad 5018 	strh.w	r5, [sp, #24]
 801d10e:	1a9b      	subs	r3, r3, r2
 801d110:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d114:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d118:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d11c:	9600      	str	r6, [sp, #0]
 801d11e:	4643      	mov	r3, r8
 801d120:	e779      	b.n	801d016 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801d122:	bf00      	nop
 801d124:	08054160 	.word	0x08054160
 801d128:	08054866 	.word	0x08054866
 801d12c:	08054308 	.word	0x08054308

0801d130 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d130:	b508      	push	{r3, lr}
 801d132:	b180      	cbz	r0, 801d156 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d134:	2902      	cmp	r1, #2
 801d136:	d014      	beq.n	801d162 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801d138:	2903      	cmp	r1, #3
 801d13a:	d01d      	beq.n	801d178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d13c:	2901      	cmp	r1, #1
 801d13e:	d101      	bne.n	801d144 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d140:	2001      	movs	r0, #1
 801d142:	bd08      	pop	{r3, pc}
 801d144:	4b0e      	ldr	r3, [pc, #56]	; (801d180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d146:	8818      	ldrh	r0, [r3, #0]
 801d148:	b990      	cbnz	r0, 801d170 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d14a:	4b0e      	ldr	r3, [pc, #56]	; (801d184 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801d14c:	4a0e      	ldr	r2, [pc, #56]	; (801d188 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801d14e:	480f      	ldr	r0, [pc, #60]	; (801d18c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801d150:	2154      	movs	r1, #84	; 0x54
 801d152:	f007 fe37 	bl	8024dc4 <__assert_func>
 801d156:	2902      	cmp	r1, #2
 801d158:	d00e      	beq.n	801d178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d15a:	2903      	cmp	r1, #3
 801d15c:	d0f2      	beq.n	801d144 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d15e:	2901      	cmp	r1, #1
 801d160:	d1ee      	bne.n	801d140 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801d162:	4b07      	ldr	r3, [pc, #28]	; (801d180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d164:	8818      	ldrh	r0, [r3, #0]
 801d166:	2800      	cmp	r0, #0
 801d168:	d0ef      	beq.n	801d14a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d16a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d16e:	e7e8      	b.n	801d142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d170:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d174:	4240      	negs	r0, r0
 801d176:	e7e4      	b.n	801d142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d178:	f04f 30ff 	mov.w	r0, #4294967295
 801d17c:	e7e1      	b.n	801d142 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d17e:	bf00      	nop
 801d180:	2000134c 	.word	0x2000134c
 801d184:	08054462 	.word	0x08054462
 801d188:	080549e3 	.word	0x080549e3
 801d18c:	080544a4 	.word	0x080544a4

0801d190 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d190:	b508      	push	{r3, lr}
 801d192:	b180      	cbz	r0, 801d1b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801d194:	2902      	cmp	r1, #2
 801d196:	d014      	beq.n	801d1c2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801d198:	2903      	cmp	r1, #3
 801d19a:	d018      	beq.n	801d1ce <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d19c:	2901      	cmp	r1, #1
 801d19e:	d001      	beq.n	801d1a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d1a0:	2001      	movs	r0, #1
 801d1a2:	e013      	b.n	801d1cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d1a4:	4b0e      	ldr	r3, [pc, #56]	; (801d1e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d1a6:	8818      	ldrh	r0, [r3, #0]
 801d1a8:	b970      	cbnz	r0, 801d1c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801d1aa:	4b0e      	ldr	r3, [pc, #56]	; (801d1e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801d1ac:	4a0e      	ldr	r2, [pc, #56]	; (801d1e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801d1ae:	480f      	ldr	r0, [pc, #60]	; (801d1ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801d1b0:	2154      	movs	r1, #84	; 0x54
 801d1b2:	f007 fe07 	bl	8024dc4 <__assert_func>
 801d1b6:	2902      	cmp	r1, #2
 801d1b8:	d009      	beq.n	801d1ce <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d1ba:	2903      	cmp	r1, #3
 801d1bc:	d0f0      	beq.n	801d1a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801d1be:	2901      	cmp	r1, #1
 801d1c0:	d1f0      	bne.n	801d1a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 801d1c6:	e001      	b.n	801d1cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d1c8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d1cc:	bd08      	pop	{r3, pc}
 801d1ce:	4b04      	ldr	r3, [pc, #16]	; (801d1e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d1d0:	8818      	ldrh	r0, [r3, #0]
 801d1d2:	2800      	cmp	r0, #0
 801d1d4:	d0e9      	beq.n	801d1aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801d1d6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d1da:	4240      	negs	r0, r0
 801d1dc:	e7f6      	b.n	801d1cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d1de:	bf00      	nop
 801d1e0:	2000134c 	.word	0x2000134c
 801d1e4:	08054462 	.word	0x08054462
 801d1e8:	080549e3 	.word	0x080549e3
 801d1ec:	080544a4 	.word	0x080544a4

0801d1f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1f4:	b097      	sub	sp, #92	; 0x5c
 801d1f6:	910a      	str	r1, [sp, #40]	; 0x28
 801d1f8:	a912      	add	r1, sp, #72	; 0x48
 801d1fa:	e881 000c 	stmia.w	r1, {r2, r3}
 801d1fe:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801d202:	9307      	str	r3, [sp, #28]
 801d204:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801d208:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d20c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d20e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801d212:	930b      	str	r3, [sp, #44]	; 0x2c
 801d214:	7b4b      	ldrb	r3, [r1, #13]
 801d216:	798d      	ldrb	r5, [r1, #6]
 801d218:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801d21c:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801d220:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801d224:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801d228:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801d22c:	0158      	lsls	r0, r3, #5
 801d22e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d232:	4328      	orrs	r0, r5
 801d234:	9006      	str	r0, [sp, #24]
 801d236:	f000 8156 	beq.w	801d4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d23a:	011b      	lsls	r3, r3, #4
 801d23c:	79c8      	ldrb	r0, [r1, #7]
 801d23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d242:	4303      	orrs	r3, r0
 801d244:	9308      	str	r3, [sp, #32]
 801d246:	f000 814e 	beq.w	801d4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d24a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d24e:	b29b      	uxth	r3, r3
 801d250:	2f00      	cmp	r7, #0
 801d252:	f000 80f2 	beq.w	801d43a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24a>
 801d256:	1aff      	subs	r7, r7, r3
 801d258:	b2bf      	uxth	r7, r7
 801d25a:	043b      	lsls	r3, r7, #16
 801d25c:	d502      	bpl.n	801d264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d25e:	1bf6      	subs	r6, r6, r7
 801d260:	b236      	sxth	r6, r6
 801d262:	2700      	movs	r7, #0
 801d264:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d268:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d26c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801d270:	428e      	cmp	r6, r1
 801d272:	b28b      	uxth	r3, r1
 801d274:	bfbf      	itttt	lt
 801d276:	18ff      	addlt	r7, r7, r3
 801d278:	1bbe      	sublt	r6, r7, r6
 801d27a:	b2b7      	uxthlt	r7, r6
 801d27c:	460e      	movlt	r6, r1
 801d27e:	8891      	ldrh	r1, [r2, #4]
 801d280:	440b      	add	r3, r1
 801d282:	b21b      	sxth	r3, r3
 801d284:	930e      	str	r3, [sp, #56]	; 0x38
 801d286:	88d3      	ldrh	r3, [r2, #6]
 801d288:	9a07      	ldr	r2, [sp, #28]
 801d28a:	449a      	add	sl, r3
 801d28c:	fa0f f38a 	sxth.w	r3, sl
 801d290:	930d      	str	r3, [sp, #52]	; 0x34
 801d292:	4bbc      	ldr	r3, [pc, #752]	; (801d584 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d294:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d298:	f893 b000 	ldrb.w	fp, [r3]
 801d29c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d2a0:	f1dc 0300 	rsbs	r3, ip, #0
 801d2a4:	eb43 030c 	adc.w	r3, r3, ip
 801d2a8:	930c      	str	r3, [sp, #48]	; 0x30
 801d2aa:	4631      	mov	r1, r6
 801d2ac:	464b      	mov	r3, r9
 801d2ae:	a812      	add	r0, sp, #72	; 0x48
 801d2b0:	f7f9 fe34 	bl	8016f1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d2b4:	4631      	mov	r1, r6
 801d2b6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801d2ba:	464b      	mov	r3, r9
 801d2bc:	9a07      	ldr	r2, [sp, #28]
 801d2be:	a812      	add	r0, sp, #72	; 0x48
 801d2c0:	f7f9 fe44 	bl	8016f4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d2c4:	a916      	add	r1, sp, #88	; 0x58
 801d2c6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d2ca:	a815      	add	r0, sp, #84	; 0x54
 801d2cc:	f7f9 ff20 	bl	8017110 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d2d0:	f1b9 0f00 	cmp.w	r9, #0
 801d2d4:	f040 80b4 	bne.w	801d440 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 801d2d8:	f1bb 0f01 	cmp.w	fp, #1
 801d2dc:	f040 80b8 	bne.w	801d450 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801d2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	f040 8104 	bne.w	801d4f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 801d2e8:	4ba7      	ldr	r3, [pc, #668]	; (801d588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801d2ea:	6818      	ldr	r0, [r3, #0]
 801d2ec:	6803      	ldr	r3, [r0, #0]
 801d2ee:	6a1b      	ldr	r3, [r3, #32]
 801d2f0:	4798      	blx	r3
 801d2f2:	4aa6      	ldr	r2, [pc, #664]	; (801d58c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801d2f4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801d2f8:	8811      	ldrh	r1, [r2, #0]
 801d2fa:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d2fe:	fb01 2303 	mla	r3, r1, r3, r2
 801d302:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d306:	9308      	str	r3, [sp, #32]
 801d308:	2301      	movs	r3, #1
 801d30a:	fa03 f308 	lsl.w	r3, r3, r8
 801d30e:	3b01      	subs	r3, #1
 801d310:	b2db      	uxtb	r3, r3
 801d312:	f1b8 0f01 	cmp.w	r8, #1
 801d316:	9310      	str	r3, [sp, #64]	; 0x40
 801d318:	f000 80ec 	beq.w	801d4f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801d31c:	f1b8 0f02 	cmp.w	r8, #2
 801d320:	f000 80ea 	beq.w	801d4f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 801d324:	f1b8 0f04 	cmp.w	r8, #4
 801d328:	bf14      	ite	ne
 801d32a:	2301      	movne	r3, #1
 801d32c:	2311      	moveq	r3, #17
 801d32e:	9309      	str	r3, [sp, #36]	; 0x24
 801d330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d332:	b153      	cbz	r3, 801d34a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 801d334:	9a06      	ldr	r2, [sp, #24]
 801d336:	2508      	movs	r5, #8
 801d338:	fb95 f3f8 	sdiv	r3, r5, r8
 801d33c:	1e5d      	subs	r5, r3, #1
 801d33e:	4415      	add	r5, r2
 801d340:	fb95 f5f3 	sdiv	r5, r5, r3
 801d344:	fb15 f503 	smulbb	r5, r5, r3
 801d348:	b2ad      	uxth	r5, r5
 801d34a:	b907      	cbnz	r7, 801d34e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 801d34c:	b16c      	cbz	r4, 801d36a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 801d34e:	fb04 7305 	mla	r3, r4, r5, r7
 801d352:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d354:	fb08 f303 	mul.w	r3, r8, r3
 801d358:	ebaa 0a04 	sub.w	sl, sl, r4
 801d35c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801d360:	9226      	str	r2, [sp, #152]	; 0x98
 801d362:	fa1f fa8a 	uxth.w	sl, sl
 801d366:	f003 0407 	and.w	r4, r3, #7
 801d36a:	4649      	mov	r1, r9
 801d36c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d36e:	f7ff fedf 	bl	801d130 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801d372:	4649      	mov	r1, r9
 801d374:	4683      	mov	fp, r0
 801d376:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d378:	f7ff ff0a 	bl	801d190 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801d37c:	9a07      	ldr	r2, [sp, #28]
 801d37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d380:	1a9b      	subs	r3, r3, r2
 801d382:	459a      	cmp	sl, r3
 801d384:	bfa8      	it	ge
 801d386:	469a      	movge	sl, r3
 801d388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d38a:	1bf6      	subs	r6, r6, r7
 801d38c:	1b9e      	subs	r6, r3, r6
 801d38e:	9b06      	ldr	r3, [sp, #24]
 801d390:	429e      	cmp	r6, r3
 801d392:	bfd4      	ite	le
 801d394:	ebc7 0706 	rsble	r7, r7, r6
 801d398:	ebc7 0703 	rsbgt	r7, r7, r3
 801d39c:	1bed      	subs	r5, r5, r7
 801d39e:	fb08 f305 	mul.w	r3, r8, r5
 801d3a2:	9307      	str	r3, [sp, #28]
 801d3a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d3a6:	781a      	ldrb	r2, [r3, #0]
 801d3a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3aa:	0a1b      	lsrs	r3, r3, #8
 801d3ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d3b0:	930d      	str	r3, [sp, #52]	; 0x34
 801d3b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3b4:	08db      	lsrs	r3, r3, #3
 801d3b6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d3ba:	930e      	str	r3, [sp, #56]	; 0x38
 801d3bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3be:	00db      	lsls	r3, r3, #3
 801d3c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801d3c6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801d3ca:	fb0b 0b17 	mls	fp, fp, r7, r0
 801d3ce:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 801d3d2:	4358      	muls	r0, r3
 801d3d4:	9306      	str	r3, [sp, #24]
 801d3d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3d8:	4122      	asrs	r2, r4
 801d3da:	b29b      	uxth	r3, r3
 801d3dc:	b2d2      	uxtb	r2, r2
 801d3de:	9311      	str	r3, [sp, #68]	; 0x44
 801d3e0:	eb00 0b4b 	add.w	fp, r0, fp, lsl #1
 801d3e4:	f1ba 0f00 	cmp.w	sl, #0
 801d3e8:	f340 80e5 	ble.w	801d5b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801d3ec:	f8dd c020 	ldr.w	ip, [sp, #32]
 801d3f0:	46be      	mov	lr, r7
 801d3f2:	f1be 0f00 	cmp.w	lr, #0
 801d3f6:	f340 80cb 	ble.w	801d590 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801d3fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3fc:	4013      	ands	r3, r2
 801d3fe:	d00a      	beq.n	801d416 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 801d400:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d402:	fb13 f301 	smulbb	r3, r3, r1
 801d406:	2bfe      	cmp	r3, #254	; 0xfe
 801d408:	dd78      	ble.n	801d4fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 801d40a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d40c:	29ff      	cmp	r1, #255	; 0xff
 801d40e:	d175      	bne.n	801d4fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 801d410:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d412:	f8ac 0000 	strh.w	r0, [ip]
 801d416:	4444      	add	r4, r8
 801d418:	b2a4      	uxth	r4, r4
 801d41a:	2c07      	cmp	r4, #7
 801d41c:	bf81      	itttt	hi
 801d41e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801d420:	785a      	ldrbhi	r2, [r3, #1]
 801d422:	3301      	addhi	r3, #1
 801d424:	9326      	strhi	r3, [sp, #152]	; 0x98
 801d426:	9b06      	ldr	r3, [sp, #24]
 801d428:	bf9a      	itte	ls
 801d42a:	fa42 f208 	asrls.w	r2, r2, r8
 801d42e:	b2d2      	uxtbls	r2, r2
 801d430:	2400      	movhi	r4, #0
 801d432:	449c      	add	ip, r3
 801d434:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d438:	e7db      	b.n	801d3f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 801d43a:	441e      	add	r6, r3
 801d43c:	b236      	sxth	r6, r6
 801d43e:	e711      	b.n	801d264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d440:	f1b9 0f01 	cmp.w	r9, #1
 801d444:	f47f af4c 	bne.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d448:	f1bb 0f01 	cmp.w	fp, #1
 801d44c:	f47f af48 	bne.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d450:	f8df b134 	ldr.w	fp, [pc, #308]	; 801d588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d454:	f8db 0000 	ldr.w	r0, [fp]
 801d458:	6803      	ldr	r3, [r0, #0]
 801d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d45c:	4798      	blx	r3
 801d45e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d462:	465a      	mov	r2, fp
 801d464:	d006      	beq.n	801d474 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801d466:	f1b8 0f04 	cmp.w	r8, #4
 801d46a:	d13f      	bne.n	801d4ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 801d46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d46e:	3300      	adds	r3, #0
 801d470:	bf18      	it	ne
 801d472:	2301      	movne	r3, #1
 801d474:	05c0      	lsls	r0, r0, #23
 801d476:	f140 80a7 	bpl.w	801d5c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 801d47a:	f1b8 0f08 	cmp.w	r8, #8
 801d47e:	f040 80a3 	bne.w	801d5c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 801d482:	2b00      	cmp	r3, #0
 801d484:	bf0c      	ite	eq
 801d486:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d48a:	2180      	movne	r1, #128	; 0x80
 801d48c:	2f00      	cmp	r7, #0
 801d48e:	f47f af27 	bne.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d492:	2c00      	cmp	r4, #0
 801d494:	f47f af24 	bne.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d498:	9b06      	ldr	r3, [sp, #24]
 801d49a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d49c:	18f3      	adds	r3, r6, r3
 801d49e:	4283      	cmp	r3, r0
 801d4a0:	f73f af1e 	bgt.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4a4:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 801d4a8:	4403      	add	r3, r0
 801d4aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d4ac:	4283      	cmp	r3, r0
 801d4ae:	f73f af17 	bgt.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4b2:	6810      	ldr	r0, [r2, #0]
 801d4b4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801d4b8:	6804      	ldr	r4, [r0, #0]
 801d4ba:	9105      	str	r1, [sp, #20]
 801d4bc:	f1b8 0f08 	cmp.w	r8, #8
 801d4c0:	bf18      	it	ne
 801d4c2:	3501      	addne	r5, #1
 801d4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d4c6:	9104      	str	r1, [sp, #16]
 801d4c8:	bf18      	it	ne
 801d4ca:	f025 0501 	bicne.w	r5, r5, #1
 801d4ce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d4d0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801d4d4:	bf18      	it	ne
 801d4d6:	b2ad      	uxthne	r5, r5
 801d4d8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801d4dc:	e9cd 5a00 	strd	r5, sl, [sp]
 801d4e0:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d4e2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801d4e4:	47a0      	blx	r4
 801d4e6:	b017      	add	sp, #92	; 0x5c
 801d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	e7c1      	b.n	801d474 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801d4f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d4f2:	e6fe      	b.n	801d2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d4f4:	23ff      	movs	r3, #255	; 0xff
 801d4f6:	e71a      	b.n	801d32e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d4f8:	2355      	movs	r3, #85	; 0x55
 801d4fa:	e718      	b.n	801d32e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d4fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d4fe:	f8bc 5000 	ldrh.w	r5, [ip]
 801d502:	fb11 f303 	smulbb	r3, r1, r3
 801d506:	b29b      	uxth	r3, r3
 801d508:	1c59      	adds	r1, r3, #1
 801d50a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d50e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d512:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d514:	b29e      	uxth	r6, r3
 801d516:	1228      	asrs	r0, r5, #8
 801d518:	43db      	mvns	r3, r3
 801d51a:	b2db      	uxtb	r3, r3
 801d51c:	fb11 f106 	smulbb	r1, r1, r6
 801d520:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d524:	fb00 1003 	mla	r0, r0, r3, r1
 801d528:	b281      	uxth	r1, r0
 801d52a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d52c:	910c      	str	r1, [sp, #48]	; 0x30
 801d52e:	fb16 f900 	smulbb	r9, r6, r0
 801d532:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d534:	10e9      	asrs	r1, r5, #3
 801d536:	00ed      	lsls	r5, r5, #3
 801d538:	fb16 f600 	smulbb	r6, r6, r0
 801d53c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d540:	b2ed      	uxtb	r5, r5
 801d542:	fb01 9103 	mla	r1, r1, r3, r9
 801d546:	fb05 6603 	mla	r6, r5, r3, r6
 801d54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d54c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d54e:	b2b6      	uxth	r6, r6
 801d550:	3301      	adds	r3, #1
 801d552:	f106 0901 	add.w	r9, r6, #1
 801d556:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d55a:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 801d55e:	b289      	uxth	r1, r1
 801d560:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801d564:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d568:	ea40 0009 	orr.w	r0, r0, r9
 801d56c:	f101 0901 	add.w	r9, r1, #1
 801d570:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801d574:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d578:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d57c:	ea40 0009 	orr.w	r0, r0, r9
 801d580:	e747      	b.n	801d412 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801d582:	bf00      	nop
 801d584:	2000134a 	.word	0x2000134a
 801d588:	20001354 	.word	0x20001354
 801d58c:	2000134c 	.word	0x2000134c
 801d590:	9b07      	ldr	r3, [sp, #28]
 801d592:	b153      	cbz	r3, 801d5aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 801d594:	441c      	add	r4, r3
 801d596:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d598:	b2a4      	uxth	r4, r4
 801d59a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d59e:	f004 0407 	and.w	r4, r4, #7
 801d5a2:	781a      	ldrb	r2, [r3, #0]
 801d5a4:	9326      	str	r3, [sp, #152]	; 0x98
 801d5a6:	4122      	asrs	r2, r4
 801d5a8:	b2d2      	uxtb	r2, r2
 801d5aa:	9b08      	ldr	r3, [sp, #32]
 801d5ac:	445b      	add	r3, fp
 801d5ae:	9308      	str	r3, [sp, #32]
 801d5b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d5b4:	e716      	b.n	801d3e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 801d5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d194      	bne.n	801d4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d5bc:	4b05      	ldr	r3, [pc, #20]	; (801d5d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>)
 801d5be:	6818      	ldr	r0, [r3, #0]
 801d5c0:	6803      	ldr	r3, [r0, #0]
 801d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5c4:	4798      	blx	r3
 801d5c6:	e78e      	b.n	801d4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	f43f ae89 	beq.w	801d2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d5ce:	2180      	movs	r1, #128	; 0x80
 801d5d0:	e75c      	b.n	801d48c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29c>
 801d5d2:	bf00      	nop
 801d5d4:	20001354 	.word	0x20001354

0801d5d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801d5d8:	b538      	push	{r3, r4, r5, lr}
 801d5da:	4c15      	ldr	r4, [pc, #84]	; (801d630 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801d5dc:	7823      	ldrb	r3, [r4, #0]
 801d5de:	f3bf 8f5b 	dmb	ish
 801d5e2:	07da      	lsls	r2, r3, #31
 801d5e4:	4605      	mov	r5, r0
 801d5e6:	d40b      	bmi.n	801d600 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	f007 fbc1 	bl	8024d70 <__cxa_guard_acquire>
 801d5ee:	b138      	cbz	r0, 801d600 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	f007 fbc9 	bl	8024d88 <__cxa_guard_release>
 801d5f6:	4a0f      	ldr	r2, [pc, #60]	; (801d634 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d5f8:	490f      	ldr	r1, [pc, #60]	; (801d638 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801d5fa:	4810      	ldr	r0, [pc, #64]	; (801d63c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d5fc:	f007 fbae 	bl	8024d5c <__aeabi_atexit>
 801d600:	4c0f      	ldr	r4, [pc, #60]	; (801d640 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801d602:	7823      	ldrb	r3, [r4, #0]
 801d604:	f3bf 8f5b 	dmb	ish
 801d608:	07db      	lsls	r3, r3, #31
 801d60a:	d40b      	bmi.n	801d624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d60c:	4620      	mov	r0, r4
 801d60e:	f007 fbaf 	bl	8024d70 <__cxa_guard_acquire>
 801d612:	b138      	cbz	r0, 801d624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d614:	4620      	mov	r0, r4
 801d616:	f007 fbb7 	bl	8024d88 <__cxa_guard_release>
 801d61a:	4a06      	ldr	r2, [pc, #24]	; (801d634 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d61c:	4909      	ldr	r1, [pc, #36]	; (801d644 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801d61e:	480a      	ldr	r0, [pc, #40]	; (801d648 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d620:	f007 fb9c 	bl	8024d5c <__aeabi_atexit>
 801d624:	4b05      	ldr	r3, [pc, #20]	; (801d63c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d626:	612b      	str	r3, [r5, #16]
 801d628:	4b07      	ldr	r3, [pc, #28]	; (801d648 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d62a:	616b      	str	r3, [r5, #20]
 801d62c:	bd38      	pop	{r3, r4, r5, pc}
 801d62e:	bf00      	nop
 801d630:	20001440 	.word	0x20001440
 801d634:	20000000 	.word	0x20000000
 801d638:	0801bc8f 	.word	0x0801bc8f
 801d63c:	20000078 	.word	0x20000078
 801d640:	20001444 	.word	0x20001444
 801d644:	0801bc8d 	.word	0x0801bc8d
 801d648:	2000007c 	.word	0x2000007c

0801d64c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801d64c:	b538      	push	{r3, r4, r5, lr}
 801d64e:	4c15      	ldr	r4, [pc, #84]	; (801d6a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801d650:	7823      	ldrb	r3, [r4, #0]
 801d652:	f3bf 8f5b 	dmb	ish
 801d656:	07da      	lsls	r2, r3, #31
 801d658:	4605      	mov	r5, r0
 801d65a:	d40b      	bmi.n	801d674 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d65c:	4620      	mov	r0, r4
 801d65e:	f007 fb87 	bl	8024d70 <__cxa_guard_acquire>
 801d662:	b138      	cbz	r0, 801d674 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d664:	4620      	mov	r0, r4
 801d666:	f007 fb8f 	bl	8024d88 <__cxa_guard_release>
 801d66a:	4a0f      	ldr	r2, [pc, #60]	; (801d6a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d66c:	490f      	ldr	r1, [pc, #60]	; (801d6ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801d66e:	4810      	ldr	r0, [pc, #64]	; (801d6b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d670:	f007 fb74 	bl	8024d5c <__aeabi_atexit>
 801d674:	4c0f      	ldr	r4, [pc, #60]	; (801d6b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801d676:	7823      	ldrb	r3, [r4, #0]
 801d678:	f3bf 8f5b 	dmb	ish
 801d67c:	07db      	lsls	r3, r3, #31
 801d67e:	d40b      	bmi.n	801d698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d680:	4620      	mov	r0, r4
 801d682:	f007 fb75 	bl	8024d70 <__cxa_guard_acquire>
 801d686:	b138      	cbz	r0, 801d698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d688:	4620      	mov	r0, r4
 801d68a:	f007 fb7d 	bl	8024d88 <__cxa_guard_release>
 801d68e:	4a06      	ldr	r2, [pc, #24]	; (801d6a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d690:	4909      	ldr	r1, [pc, #36]	; (801d6b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801d692:	480a      	ldr	r0, [pc, #40]	; (801d6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d694:	f007 fb62 	bl	8024d5c <__aeabi_atexit>
 801d698:	4b05      	ldr	r3, [pc, #20]	; (801d6b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d69a:	60ab      	str	r3, [r5, #8]
 801d69c:	4b07      	ldr	r3, [pc, #28]	; (801d6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d69e:	60eb      	str	r3, [r5, #12]
 801d6a0:	bd38      	pop	{r3, r4, r5, pc}
 801d6a2:	bf00      	nop
 801d6a4:	20001418 	.word	0x20001418
 801d6a8:	20000000 	.word	0x20000000
 801d6ac:	0801bc93 	.word	0x0801bc93
 801d6b0:	20000050 	.word	0x20000050
 801d6b4:	2000141c 	.word	0x2000141c
 801d6b8:	0801bc91 	.word	0x0801bc91
 801d6bc:	20000054 	.word	0x20000054

0801d6c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801d6c0:	b510      	push	{r4, lr}
 801d6c2:	4604      	mov	r4, r0
 801d6c4:	f7ff ff88 	bl	801d5d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6ce:	f7ff bfbd 	b.w	801d64c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801d6d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d6d4:	b538      	push	{r3, r4, r5, lr}
 801d6d6:	4c15      	ldr	r4, [pc, #84]	; (801d72c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d6d8:	7823      	ldrb	r3, [r4, #0]
 801d6da:	f3bf 8f5b 	dmb	ish
 801d6de:	07da      	lsls	r2, r3, #31
 801d6e0:	4605      	mov	r5, r0
 801d6e2:	d40b      	bmi.n	801d6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	f007 fb43 	bl	8024d70 <__cxa_guard_acquire>
 801d6ea:	b138      	cbz	r0, 801d6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f007 fb4b 	bl	8024d88 <__cxa_guard_release>
 801d6f2:	4a0f      	ldr	r2, [pc, #60]	; (801d730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d6f4:	490f      	ldr	r1, [pc, #60]	; (801d734 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d6f6:	4810      	ldr	r0, [pc, #64]	; (801d738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d6f8:	f007 fb30 	bl	8024d5c <__aeabi_atexit>
 801d6fc:	4c0f      	ldr	r4, [pc, #60]	; (801d73c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d6fe:	7823      	ldrb	r3, [r4, #0]
 801d700:	f3bf 8f5b 	dmb	ish
 801d704:	07db      	lsls	r3, r3, #31
 801d706:	d40b      	bmi.n	801d720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d708:	4620      	mov	r0, r4
 801d70a:	f007 fb31 	bl	8024d70 <__cxa_guard_acquire>
 801d70e:	b138      	cbz	r0, 801d720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d710:	4620      	mov	r0, r4
 801d712:	f007 fb39 	bl	8024d88 <__cxa_guard_release>
 801d716:	4a06      	ldr	r2, [pc, #24]	; (801d730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d718:	4909      	ldr	r1, [pc, #36]	; (801d740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d71a:	480a      	ldr	r0, [pc, #40]	; (801d744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d71c:	f007 fb1e 	bl	8024d5c <__aeabi_atexit>
 801d720:	4b05      	ldr	r3, [pc, #20]	; (801d738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d722:	622b      	str	r3, [r5, #32]
 801d724:	4b07      	ldr	r3, [pc, #28]	; (801d744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d726:	626b      	str	r3, [r5, #36]	; 0x24
 801d728:	bd38      	pop	{r3, r4, r5, pc}
 801d72a:	bf00      	nop
 801d72c:	20001448 	.word	0x20001448
 801d730:	20000000 	.word	0x20000000
 801d734:	0801bc87 	.word	0x0801bc87
 801d738:	20000080 	.word	0x20000080
 801d73c:	2000144c 	.word	0x2000144c
 801d740:	0801bc85 	.word	0x0801bc85
 801d744:	20000084 	.word	0x20000084

0801d748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d748:	b538      	push	{r3, r4, r5, lr}
 801d74a:	4c15      	ldr	r4, [pc, #84]	; (801d7a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d74c:	7823      	ldrb	r3, [r4, #0]
 801d74e:	f3bf 8f5b 	dmb	ish
 801d752:	07da      	lsls	r2, r3, #31
 801d754:	4605      	mov	r5, r0
 801d756:	d40b      	bmi.n	801d770 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d758:	4620      	mov	r0, r4
 801d75a:	f007 fb09 	bl	8024d70 <__cxa_guard_acquire>
 801d75e:	b138      	cbz	r0, 801d770 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d760:	4620      	mov	r0, r4
 801d762:	f007 fb11 	bl	8024d88 <__cxa_guard_release>
 801d766:	4a0f      	ldr	r2, [pc, #60]	; (801d7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d768:	490f      	ldr	r1, [pc, #60]	; (801d7a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d76a:	4810      	ldr	r0, [pc, #64]	; (801d7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d76c:	f007 faf6 	bl	8024d5c <__aeabi_atexit>
 801d770:	4c0f      	ldr	r4, [pc, #60]	; (801d7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d772:	7823      	ldrb	r3, [r4, #0]
 801d774:	f3bf 8f5b 	dmb	ish
 801d778:	07db      	lsls	r3, r3, #31
 801d77a:	d40b      	bmi.n	801d794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d77c:	4620      	mov	r0, r4
 801d77e:	f007 faf7 	bl	8024d70 <__cxa_guard_acquire>
 801d782:	b138      	cbz	r0, 801d794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d784:	4620      	mov	r0, r4
 801d786:	f007 faff 	bl	8024d88 <__cxa_guard_release>
 801d78a:	4a06      	ldr	r2, [pc, #24]	; (801d7a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d78c:	4909      	ldr	r1, [pc, #36]	; (801d7b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d78e:	480a      	ldr	r0, [pc, #40]	; (801d7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d790:	f007 fae4 	bl	8024d5c <__aeabi_atexit>
 801d794:	4b05      	ldr	r3, [pc, #20]	; (801d7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d796:	61ab      	str	r3, [r5, #24]
 801d798:	4b07      	ldr	r3, [pc, #28]	; (801d7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d79a:	61eb      	str	r3, [r5, #28]
 801d79c:	bd38      	pop	{r3, r4, r5, pc}
 801d79e:	bf00      	nop
 801d7a0:	20001420 	.word	0x20001420
 801d7a4:	20000000 	.word	0x20000000
 801d7a8:	0801bc8b 	.word	0x0801bc8b
 801d7ac:	20000058 	.word	0x20000058
 801d7b0:	20001424 	.word	0x20001424
 801d7b4:	0801bc89 	.word	0x0801bc89
 801d7b8:	2000005c 	.word	0x2000005c

0801d7bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801d7bc:	b510      	push	{r4, lr}
 801d7be:	4604      	mov	r4, r0
 801d7c0:	f7ff ff88 	bl	801d6d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d7c4:	4620      	mov	r0, r4
 801d7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7ca:	f7ff bfbd 	b.w	801d748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d7d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d7d0:	b538      	push	{r3, r4, r5, lr}
 801d7d2:	4c15      	ldr	r4, [pc, #84]	; (801d828 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d7d4:	7823      	ldrb	r3, [r4, #0]
 801d7d6:	f3bf 8f5b 	dmb	ish
 801d7da:	07da      	lsls	r2, r3, #31
 801d7dc:	4605      	mov	r5, r0
 801d7de:	d40b      	bmi.n	801d7f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d7e0:	4620      	mov	r0, r4
 801d7e2:	f007 fac5 	bl	8024d70 <__cxa_guard_acquire>
 801d7e6:	b138      	cbz	r0, 801d7f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	f007 facd 	bl	8024d88 <__cxa_guard_release>
 801d7ee:	4a0f      	ldr	r2, [pc, #60]	; (801d82c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d7f0:	490f      	ldr	r1, [pc, #60]	; (801d830 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d7f2:	4810      	ldr	r0, [pc, #64]	; (801d834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d7f4:	f007 fab2 	bl	8024d5c <__aeabi_atexit>
 801d7f8:	4c0f      	ldr	r4, [pc, #60]	; (801d838 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d7fa:	7823      	ldrb	r3, [r4, #0]
 801d7fc:	f3bf 8f5b 	dmb	ish
 801d800:	07db      	lsls	r3, r3, #31
 801d802:	d40b      	bmi.n	801d81c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d804:	4620      	mov	r0, r4
 801d806:	f007 fab3 	bl	8024d70 <__cxa_guard_acquire>
 801d80a:	b138      	cbz	r0, 801d81c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d80c:	4620      	mov	r0, r4
 801d80e:	f007 fabb 	bl	8024d88 <__cxa_guard_release>
 801d812:	4a06      	ldr	r2, [pc, #24]	; (801d82c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d814:	4909      	ldr	r1, [pc, #36]	; (801d83c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d816:	480a      	ldr	r0, [pc, #40]	; (801d840 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d818:	f007 faa0 	bl	8024d5c <__aeabi_atexit>
 801d81c:	4b05      	ldr	r3, [pc, #20]	; (801d834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d81e:	632b      	str	r3, [r5, #48]	; 0x30
 801d820:	4b07      	ldr	r3, [pc, #28]	; (801d840 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d822:	636b      	str	r3, [r5, #52]	; 0x34
 801d824:	bd38      	pop	{r3, r4, r5, pc}
 801d826:	bf00      	nop
 801d828:	20001458 	.word	0x20001458
 801d82c:	20000000 	.word	0x20000000
 801d830:	0801bc7f 	.word	0x0801bc7f
 801d834:	20000090 	.word	0x20000090
 801d838:	2000145c 	.word	0x2000145c
 801d83c:	0801bc7d 	.word	0x0801bc7d
 801d840:	20000094 	.word	0x20000094

0801d844 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d844:	b538      	push	{r3, r4, r5, lr}
 801d846:	4c15      	ldr	r4, [pc, #84]	; (801d89c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d848:	7823      	ldrb	r3, [r4, #0]
 801d84a:	f3bf 8f5b 	dmb	ish
 801d84e:	07da      	lsls	r2, r3, #31
 801d850:	4605      	mov	r5, r0
 801d852:	d40b      	bmi.n	801d86c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d854:	4620      	mov	r0, r4
 801d856:	f007 fa8b 	bl	8024d70 <__cxa_guard_acquire>
 801d85a:	b138      	cbz	r0, 801d86c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d85c:	4620      	mov	r0, r4
 801d85e:	f007 fa93 	bl	8024d88 <__cxa_guard_release>
 801d862:	4a0f      	ldr	r2, [pc, #60]	; (801d8a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d864:	490f      	ldr	r1, [pc, #60]	; (801d8a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d866:	4810      	ldr	r0, [pc, #64]	; (801d8a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d868:	f007 fa78 	bl	8024d5c <__aeabi_atexit>
 801d86c:	4c0f      	ldr	r4, [pc, #60]	; (801d8ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d86e:	7823      	ldrb	r3, [r4, #0]
 801d870:	f3bf 8f5b 	dmb	ish
 801d874:	07db      	lsls	r3, r3, #31
 801d876:	d40b      	bmi.n	801d890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d878:	4620      	mov	r0, r4
 801d87a:	f007 fa79 	bl	8024d70 <__cxa_guard_acquire>
 801d87e:	b138      	cbz	r0, 801d890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d880:	4620      	mov	r0, r4
 801d882:	f007 fa81 	bl	8024d88 <__cxa_guard_release>
 801d886:	4a06      	ldr	r2, [pc, #24]	; (801d8a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d888:	4909      	ldr	r1, [pc, #36]	; (801d8b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d88a:	480a      	ldr	r0, [pc, #40]	; (801d8b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d88c:	f007 fa66 	bl	8024d5c <__aeabi_atexit>
 801d890:	4b05      	ldr	r3, [pc, #20]	; (801d8a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d892:	62ab      	str	r3, [r5, #40]	; 0x28
 801d894:	4b07      	ldr	r3, [pc, #28]	; (801d8b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d896:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d898:	bd38      	pop	{r3, r4, r5, pc}
 801d89a:	bf00      	nop
 801d89c:	20001428 	.word	0x20001428
 801d8a0:	20000000 	.word	0x20000000
 801d8a4:	0801bc83 	.word	0x0801bc83
 801d8a8:	20000060 	.word	0x20000060
 801d8ac:	2000142c 	.word	0x2000142c
 801d8b0:	0801bc81 	.word	0x0801bc81
 801d8b4:	20000064 	.word	0x20000064

0801d8b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d8b8:	b510      	push	{r4, lr}
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	f7ff ff88 	bl	801d7d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8c6:	f7ff bfbd 	b.w	801d844 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d8cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801d8cc:	b538      	push	{r3, r4, r5, lr}
 801d8ce:	4c15      	ldr	r4, [pc, #84]	; (801d924 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801d8d0:	7823      	ldrb	r3, [r4, #0]
 801d8d2:	f3bf 8f5b 	dmb	ish
 801d8d6:	07da      	lsls	r2, r3, #31
 801d8d8:	4605      	mov	r5, r0
 801d8da:	d40b      	bmi.n	801d8f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d8dc:	4620      	mov	r0, r4
 801d8de:	f007 fa47 	bl	8024d70 <__cxa_guard_acquire>
 801d8e2:	b138      	cbz	r0, 801d8f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d8e4:	4620      	mov	r0, r4
 801d8e6:	f007 fa4f 	bl	8024d88 <__cxa_guard_release>
 801d8ea:	4a0f      	ldr	r2, [pc, #60]	; (801d928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d8ec:	490f      	ldr	r1, [pc, #60]	; (801d92c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801d8ee:	4810      	ldr	r0, [pc, #64]	; (801d930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d8f0:	f007 fa34 	bl	8024d5c <__aeabi_atexit>
 801d8f4:	4c0f      	ldr	r4, [pc, #60]	; (801d934 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801d8f6:	7823      	ldrb	r3, [r4, #0]
 801d8f8:	f3bf 8f5b 	dmb	ish
 801d8fc:	07db      	lsls	r3, r3, #31
 801d8fe:	d40b      	bmi.n	801d918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d900:	4620      	mov	r0, r4
 801d902:	f007 fa35 	bl	8024d70 <__cxa_guard_acquire>
 801d906:	b138      	cbz	r0, 801d918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d908:	4620      	mov	r0, r4
 801d90a:	f007 fa3d 	bl	8024d88 <__cxa_guard_release>
 801d90e:	4a06      	ldr	r2, [pc, #24]	; (801d928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d910:	4909      	ldr	r1, [pc, #36]	; (801d938 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801d912:	480a      	ldr	r0, [pc, #40]	; (801d93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d914:	f007 fa22 	bl	8024d5c <__aeabi_atexit>
 801d918:	4b05      	ldr	r3, [pc, #20]	; (801d930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d91a:	652b      	str	r3, [r5, #80]	; 0x50
 801d91c:	4b07      	ldr	r3, [pc, #28]	; (801d93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d91e:	656b      	str	r3, [r5, #84]	; 0x54
 801d920:	bd38      	pop	{r3, r4, r5, pc}
 801d922:	bf00      	nop
 801d924:	20001460 	.word	0x20001460
 801d928:	20000000 	.word	0x20000000
 801d92c:	0801bc6f 	.word	0x0801bc6f
 801d930:	20000098 	.word	0x20000098
 801d934:	20001464 	.word	0x20001464
 801d938:	0801bc6d 	.word	0x0801bc6d
 801d93c:	2000009c 	.word	0x2000009c

0801d940 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801d940:	b538      	push	{r3, r4, r5, lr}
 801d942:	4c15      	ldr	r4, [pc, #84]	; (801d998 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801d944:	7823      	ldrb	r3, [r4, #0]
 801d946:	f3bf 8f5b 	dmb	ish
 801d94a:	07da      	lsls	r2, r3, #31
 801d94c:	4605      	mov	r5, r0
 801d94e:	d40b      	bmi.n	801d968 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d950:	4620      	mov	r0, r4
 801d952:	f007 fa0d 	bl	8024d70 <__cxa_guard_acquire>
 801d956:	b138      	cbz	r0, 801d968 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d958:	4620      	mov	r0, r4
 801d95a:	f007 fa15 	bl	8024d88 <__cxa_guard_release>
 801d95e:	4a0f      	ldr	r2, [pc, #60]	; (801d99c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d960:	490f      	ldr	r1, [pc, #60]	; (801d9a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801d962:	4810      	ldr	r0, [pc, #64]	; (801d9a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d964:	f007 f9fa 	bl	8024d5c <__aeabi_atexit>
 801d968:	4c0f      	ldr	r4, [pc, #60]	; (801d9a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801d96a:	7823      	ldrb	r3, [r4, #0]
 801d96c:	f3bf 8f5b 	dmb	ish
 801d970:	07db      	lsls	r3, r3, #31
 801d972:	d40b      	bmi.n	801d98c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d974:	4620      	mov	r0, r4
 801d976:	f007 f9fb 	bl	8024d70 <__cxa_guard_acquire>
 801d97a:	b138      	cbz	r0, 801d98c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d97c:	4620      	mov	r0, r4
 801d97e:	f007 fa03 	bl	8024d88 <__cxa_guard_release>
 801d982:	4a06      	ldr	r2, [pc, #24]	; (801d99c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d984:	4909      	ldr	r1, [pc, #36]	; (801d9ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801d986:	480a      	ldr	r0, [pc, #40]	; (801d9b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d988:	f007 f9e8 	bl	8024d5c <__aeabi_atexit>
 801d98c:	4b05      	ldr	r3, [pc, #20]	; (801d9a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d98e:	64ab      	str	r3, [r5, #72]	; 0x48
 801d990:	4b07      	ldr	r3, [pc, #28]	; (801d9b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d992:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d994:	bd38      	pop	{r3, r4, r5, pc}
 801d996:	bf00      	nop
 801d998:	20001468 	.word	0x20001468
 801d99c:	20000000 	.word	0x20000000
 801d9a0:	0801bc73 	.word	0x0801bc73
 801d9a4:	200000a0 	.word	0x200000a0
 801d9a8:	2000146c 	.word	0x2000146c
 801d9ac:	0801bc71 	.word	0x0801bc71
 801d9b0:	200000a4 	.word	0x200000a4

0801d9b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801d9b4:	b538      	push	{r3, r4, r5, lr}
 801d9b6:	4c15      	ldr	r4, [pc, #84]	; (801da0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801d9b8:	7823      	ldrb	r3, [r4, #0]
 801d9ba:	f3bf 8f5b 	dmb	ish
 801d9be:	07da      	lsls	r2, r3, #31
 801d9c0:	4605      	mov	r5, r0
 801d9c2:	d40b      	bmi.n	801d9dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d9c4:	4620      	mov	r0, r4
 801d9c6:	f007 f9d3 	bl	8024d70 <__cxa_guard_acquire>
 801d9ca:	b138      	cbz	r0, 801d9dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	f007 f9db 	bl	8024d88 <__cxa_guard_release>
 801d9d2:	4a0f      	ldr	r2, [pc, #60]	; (801da10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d9d4:	490f      	ldr	r1, [pc, #60]	; (801da14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801d9d6:	4810      	ldr	r0, [pc, #64]	; (801da18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d9d8:	f007 f9c0 	bl	8024d5c <__aeabi_atexit>
 801d9dc:	4c0f      	ldr	r4, [pc, #60]	; (801da1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801d9de:	7823      	ldrb	r3, [r4, #0]
 801d9e0:	f3bf 8f5b 	dmb	ish
 801d9e4:	07db      	lsls	r3, r3, #31
 801d9e6:	d40b      	bmi.n	801da00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d9e8:	4620      	mov	r0, r4
 801d9ea:	f007 f9c1 	bl	8024d70 <__cxa_guard_acquire>
 801d9ee:	b138      	cbz	r0, 801da00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f007 f9c9 	bl	8024d88 <__cxa_guard_release>
 801d9f6:	4a06      	ldr	r2, [pc, #24]	; (801da10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d9f8:	4909      	ldr	r1, [pc, #36]	; (801da20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801d9fa:	480a      	ldr	r0, [pc, #40]	; (801da24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d9fc:	f007 f9ae 	bl	8024d5c <__aeabi_atexit>
 801da00:	4b05      	ldr	r3, [pc, #20]	; (801da18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801da02:	642b      	str	r3, [r5, #64]	; 0x40
 801da04:	4b07      	ldr	r3, [pc, #28]	; (801da24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801da06:	646b      	str	r3, [r5, #68]	; 0x44
 801da08:	bd38      	pop	{r3, r4, r5, pc}
 801da0a:	bf00      	nop
 801da0c:	20001430 	.word	0x20001430
 801da10:	20000000 	.word	0x20000000
 801da14:	0801bc77 	.word	0x0801bc77
 801da18:	20000068 	.word	0x20000068
 801da1c:	20001434 	.word	0x20001434
 801da20:	0801bc75 	.word	0x0801bc75
 801da24:	2000006c 	.word	0x2000006c

0801da28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801da28:	b538      	push	{r3, r4, r5, lr}
 801da2a:	4c15      	ldr	r4, [pc, #84]	; (801da80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801da2c:	7823      	ldrb	r3, [r4, #0]
 801da2e:	f3bf 8f5b 	dmb	ish
 801da32:	07da      	lsls	r2, r3, #31
 801da34:	4605      	mov	r5, r0
 801da36:	d40b      	bmi.n	801da50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801da38:	4620      	mov	r0, r4
 801da3a:	f007 f999 	bl	8024d70 <__cxa_guard_acquire>
 801da3e:	b138      	cbz	r0, 801da50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801da40:	4620      	mov	r0, r4
 801da42:	f007 f9a1 	bl	8024d88 <__cxa_guard_release>
 801da46:	4a0f      	ldr	r2, [pc, #60]	; (801da84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801da48:	490f      	ldr	r1, [pc, #60]	; (801da88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801da4a:	4810      	ldr	r0, [pc, #64]	; (801da8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801da4c:	f007 f986 	bl	8024d5c <__aeabi_atexit>
 801da50:	4c0f      	ldr	r4, [pc, #60]	; (801da90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801da52:	7823      	ldrb	r3, [r4, #0]
 801da54:	f3bf 8f5b 	dmb	ish
 801da58:	07db      	lsls	r3, r3, #31
 801da5a:	d40b      	bmi.n	801da74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801da5c:	4620      	mov	r0, r4
 801da5e:	f007 f987 	bl	8024d70 <__cxa_guard_acquire>
 801da62:	b138      	cbz	r0, 801da74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801da64:	4620      	mov	r0, r4
 801da66:	f007 f98f 	bl	8024d88 <__cxa_guard_release>
 801da6a:	4a06      	ldr	r2, [pc, #24]	; (801da84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801da6c:	4909      	ldr	r1, [pc, #36]	; (801da94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801da6e:	480a      	ldr	r0, [pc, #40]	; (801da98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801da70:	f007 f974 	bl	8024d5c <__aeabi_atexit>
 801da74:	4b05      	ldr	r3, [pc, #20]	; (801da8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801da76:	63ab      	str	r3, [r5, #56]	; 0x38
 801da78:	4b07      	ldr	r3, [pc, #28]	; (801da98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801da7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801da7c:	bd38      	pop	{r3, r4, r5, pc}
 801da7e:	bf00      	nop
 801da80:	20001450 	.word	0x20001450
 801da84:	20000000 	.word	0x20000000
 801da88:	0801bc7b 	.word	0x0801bc7b
 801da8c:	20000088 	.word	0x20000088
 801da90:	20001454 	.word	0x20001454
 801da94:	0801bc79 	.word	0x0801bc79
 801da98:	2000008c 	.word	0x2000008c

0801da9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801da9c:	b510      	push	{r4, lr}
 801da9e:	4604      	mov	r4, r0
 801daa0:	f7ff ff14 	bl	801d8cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801daa4:	4620      	mov	r0, r4
 801daa6:	f7ff ff85 	bl	801d9b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801daaa:	4620      	mov	r0, r4
 801daac:	f7ff ff48 	bl	801d940 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801dab0:	4620      	mov	r0, r4
 801dab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dab6:	f7ff bfb7 	b.w	801da28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801dabc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801dabc:	b538      	push	{r3, r4, r5, lr}
 801dabe:	4c15      	ldr	r4, [pc, #84]	; (801db14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801dac0:	7823      	ldrb	r3, [r4, #0]
 801dac2:	f3bf 8f5b 	dmb	ish
 801dac6:	07da      	lsls	r2, r3, #31
 801dac8:	4605      	mov	r5, r0
 801daca:	d40b      	bmi.n	801dae4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801dacc:	4620      	mov	r0, r4
 801dace:	f007 f94f 	bl	8024d70 <__cxa_guard_acquire>
 801dad2:	b138      	cbz	r0, 801dae4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801dad4:	4620      	mov	r0, r4
 801dad6:	f007 f957 	bl	8024d88 <__cxa_guard_release>
 801dada:	4a0f      	ldr	r2, [pc, #60]	; (801db18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801dadc:	490f      	ldr	r1, [pc, #60]	; (801db1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801dade:	4810      	ldr	r0, [pc, #64]	; (801db20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801dae0:	f007 f93c 	bl	8024d5c <__aeabi_atexit>
 801dae4:	4c0f      	ldr	r4, [pc, #60]	; (801db24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801dae6:	7823      	ldrb	r3, [r4, #0]
 801dae8:	f3bf 8f5b 	dmb	ish
 801daec:	07db      	lsls	r3, r3, #31
 801daee:	d40b      	bmi.n	801db08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801daf0:	4620      	mov	r0, r4
 801daf2:	f007 f93d 	bl	8024d70 <__cxa_guard_acquire>
 801daf6:	b138      	cbz	r0, 801db08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801daf8:	4620      	mov	r0, r4
 801dafa:	f007 f945 	bl	8024d88 <__cxa_guard_release>
 801dafe:	4a06      	ldr	r2, [pc, #24]	; (801db18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801db00:	4909      	ldr	r1, [pc, #36]	; (801db28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801db02:	480a      	ldr	r0, [pc, #40]	; (801db2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801db04:	f007 f92a 	bl	8024d5c <__aeabi_atexit>
 801db08:	4b05      	ldr	r3, [pc, #20]	; (801db20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801db0a:	662b      	str	r3, [r5, #96]	; 0x60
 801db0c:	4b07      	ldr	r3, [pc, #28]	; (801db2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801db0e:	666b      	str	r3, [r5, #100]	; 0x64
 801db10:	bd38      	pop	{r3, r4, r5, pc}
 801db12:	bf00      	nop
 801db14:	20001438 	.word	0x20001438
 801db18:	20000000 	.word	0x20000000
 801db1c:	0801bc67 	.word	0x0801bc67
 801db20:	20000070 	.word	0x20000070
 801db24:	2000143c 	.word	0x2000143c
 801db28:	0801bc65 	.word	0x0801bc65
 801db2c:	20000074 	.word	0x20000074

0801db30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801db30:	b538      	push	{r3, r4, r5, lr}
 801db32:	4c15      	ldr	r4, [pc, #84]	; (801db88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801db34:	7823      	ldrb	r3, [r4, #0]
 801db36:	f3bf 8f5b 	dmb	ish
 801db3a:	07da      	lsls	r2, r3, #31
 801db3c:	4605      	mov	r5, r0
 801db3e:	d40b      	bmi.n	801db58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801db40:	4620      	mov	r0, r4
 801db42:	f007 f915 	bl	8024d70 <__cxa_guard_acquire>
 801db46:	b138      	cbz	r0, 801db58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801db48:	4620      	mov	r0, r4
 801db4a:	f007 f91d 	bl	8024d88 <__cxa_guard_release>
 801db4e:	4a0f      	ldr	r2, [pc, #60]	; (801db8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801db50:	490f      	ldr	r1, [pc, #60]	; (801db90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801db52:	4810      	ldr	r0, [pc, #64]	; (801db94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801db54:	f007 f902 	bl	8024d5c <__aeabi_atexit>
 801db58:	4c0f      	ldr	r4, [pc, #60]	; (801db98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801db5a:	7823      	ldrb	r3, [r4, #0]
 801db5c:	f3bf 8f5b 	dmb	ish
 801db60:	07db      	lsls	r3, r3, #31
 801db62:	d40b      	bmi.n	801db7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801db64:	4620      	mov	r0, r4
 801db66:	f007 f903 	bl	8024d70 <__cxa_guard_acquire>
 801db6a:	b138      	cbz	r0, 801db7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801db6c:	4620      	mov	r0, r4
 801db6e:	f007 f90b 	bl	8024d88 <__cxa_guard_release>
 801db72:	4a06      	ldr	r2, [pc, #24]	; (801db8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801db74:	4909      	ldr	r1, [pc, #36]	; (801db9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801db76:	480a      	ldr	r0, [pc, #40]	; (801dba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801db78:	f007 f8f0 	bl	8024d5c <__aeabi_atexit>
 801db7c:	4b05      	ldr	r3, [pc, #20]	; (801db94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801db7e:	65ab      	str	r3, [r5, #88]	; 0x58
 801db80:	4b07      	ldr	r3, [pc, #28]	; (801dba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801db82:	65eb      	str	r3, [r5, #92]	; 0x5c
 801db84:	bd38      	pop	{r3, r4, r5, pc}
 801db86:	bf00      	nop
 801db88:	20001410 	.word	0x20001410
 801db8c:	20000000 	.word	0x20000000
 801db90:	0801bc6b 	.word	0x0801bc6b
 801db94:	20000048 	.word	0x20000048
 801db98:	20001414 	.word	0x20001414
 801db9c:	0801bc69 	.word	0x0801bc69
 801dba0:	2000004c 	.word	0x2000004c

0801dba4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801dba4:	b510      	push	{r4, lr}
 801dba6:	4604      	mov	r4, r0
 801dba8:	f7ff ff88 	bl	801dabc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801dbac:	4620      	mov	r0, r4
 801dbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbb2:	f7ff bfbd 	b.w	801db30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801dbb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801dbb8:	b538      	push	{r3, r4, r5, lr}
 801dbba:	4c15      	ldr	r4, [pc, #84]	; (801dc10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801dbbc:	7823      	ldrb	r3, [r4, #0]
 801dbbe:	f3bf 8f5b 	dmb	ish
 801dbc2:	07da      	lsls	r2, r3, #31
 801dbc4:	4605      	mov	r5, r0
 801dbc6:	d40b      	bmi.n	801dbe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dbc8:	4620      	mov	r0, r4
 801dbca:	f007 f8d1 	bl	8024d70 <__cxa_guard_acquire>
 801dbce:	b138      	cbz	r0, 801dbe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dbd0:	4620      	mov	r0, r4
 801dbd2:	f007 f8d9 	bl	8024d88 <__cxa_guard_release>
 801dbd6:	4a0f      	ldr	r2, [pc, #60]	; (801dc14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dbd8:	490f      	ldr	r1, [pc, #60]	; (801dc18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801dbda:	4810      	ldr	r0, [pc, #64]	; (801dc1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dbdc:	f007 f8be 	bl	8024d5c <__aeabi_atexit>
 801dbe0:	4c0f      	ldr	r4, [pc, #60]	; (801dc20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801dbe2:	7823      	ldrb	r3, [r4, #0]
 801dbe4:	f3bf 8f5b 	dmb	ish
 801dbe8:	07db      	lsls	r3, r3, #31
 801dbea:	d40b      	bmi.n	801dc04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dbec:	4620      	mov	r0, r4
 801dbee:	f007 f8bf 	bl	8024d70 <__cxa_guard_acquire>
 801dbf2:	b138      	cbz	r0, 801dc04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	f007 f8c7 	bl	8024d88 <__cxa_guard_release>
 801dbfa:	4a06      	ldr	r2, [pc, #24]	; (801dc14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dbfc:	4909      	ldr	r1, [pc, #36]	; (801dc24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801dbfe:	480a      	ldr	r0, [pc, #40]	; (801dc28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801dc00:	f007 f8ac 	bl	8024d5c <__aeabi_atexit>
 801dc04:	4b05      	ldr	r3, [pc, #20]	; (801dc1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dc06:	672b      	str	r3, [r5, #112]	; 0x70
 801dc08:	4b07      	ldr	r3, [pc, #28]	; (801dc28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801dc0a:	676b      	str	r3, [r5, #116]	; 0x74
 801dc0c:	bd38      	pop	{r3, r4, r5, pc}
 801dc0e:	bf00      	nop
 801dc10:	20001408 	.word	0x20001408
 801dc14:	20000000 	.word	0x20000000
 801dc18:	0801bc5f 	.word	0x0801bc5f
 801dc1c:	20000040 	.word	0x20000040
 801dc20:	2000140c 	.word	0x2000140c
 801dc24:	0801bc5d 	.word	0x0801bc5d
 801dc28:	20000044 	.word	0x20000044

0801dc2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801dc2c:	b538      	push	{r3, r4, r5, lr}
 801dc2e:	4c15      	ldr	r4, [pc, #84]	; (801dc84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801dc30:	7823      	ldrb	r3, [r4, #0]
 801dc32:	f3bf 8f5b 	dmb	ish
 801dc36:	07da      	lsls	r2, r3, #31
 801dc38:	4605      	mov	r5, r0
 801dc3a:	d40b      	bmi.n	801dc54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dc3c:	4620      	mov	r0, r4
 801dc3e:	f007 f897 	bl	8024d70 <__cxa_guard_acquire>
 801dc42:	b138      	cbz	r0, 801dc54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dc44:	4620      	mov	r0, r4
 801dc46:	f007 f89f 	bl	8024d88 <__cxa_guard_release>
 801dc4a:	4a0f      	ldr	r2, [pc, #60]	; (801dc88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dc4c:	490f      	ldr	r1, [pc, #60]	; (801dc8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801dc4e:	4810      	ldr	r0, [pc, #64]	; (801dc90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dc50:	f007 f884 	bl	8024d5c <__aeabi_atexit>
 801dc54:	4c0f      	ldr	r4, [pc, #60]	; (801dc94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801dc56:	7823      	ldrb	r3, [r4, #0]
 801dc58:	f3bf 8f5b 	dmb	ish
 801dc5c:	07db      	lsls	r3, r3, #31
 801dc5e:	d40b      	bmi.n	801dc78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dc60:	4620      	mov	r0, r4
 801dc62:	f007 f885 	bl	8024d70 <__cxa_guard_acquire>
 801dc66:	b138      	cbz	r0, 801dc78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dc68:	4620      	mov	r0, r4
 801dc6a:	f007 f88d 	bl	8024d88 <__cxa_guard_release>
 801dc6e:	4a06      	ldr	r2, [pc, #24]	; (801dc88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dc70:	4909      	ldr	r1, [pc, #36]	; (801dc98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801dc72:	480a      	ldr	r0, [pc, #40]	; (801dc9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dc74:	f007 f872 	bl	8024d5c <__aeabi_atexit>
 801dc78:	4b05      	ldr	r3, [pc, #20]	; (801dc90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dc7a:	66ab      	str	r3, [r5, #104]	; 0x68
 801dc7c:	4b07      	ldr	r3, [pc, #28]	; (801dc9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dc7e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801dc80:	bd38      	pop	{r3, r4, r5, pc}
 801dc82:	bf00      	nop
 801dc84:	20001400 	.word	0x20001400
 801dc88:	20000000 	.word	0x20000000
 801dc8c:	0801bc63 	.word	0x0801bc63
 801dc90:	20000038 	.word	0x20000038
 801dc94:	20001404 	.word	0x20001404
 801dc98:	0801bc61 	.word	0x0801bc61
 801dc9c:	2000003c 	.word	0x2000003c

0801dca0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801dca0:	b510      	push	{r4, lr}
 801dca2:	4604      	mov	r4, r0
 801dca4:	f7ff ff88 	bl	801dbb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dca8:	4620      	mov	r0, r4
 801dcaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcae:	f7ff bfbd 	b.w	801dc2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801dcb2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801dcb2:	b510      	push	{r4, lr}
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	f7ff fff3 	bl	801dca0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801dcba:	4620      	mov	r0, r4
 801dcbc:	f7ff ff72 	bl	801dba4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f7ff fdf9 	bl	801d8b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	f7ff fcfa 	bl	801d6c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801dccc:	4620      	mov	r0, r4
 801dcce:	f7ff fd75 	bl	801d7bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcd8:	f7ff bee0 	b.w	801da9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801dcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801dcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dce0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801dce4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801dce8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dcec:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801dcf0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801dcf4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801dcf8:	8808      	ldrh	r0, [r1, #0]
 801dcfa:	fb0e 4708 	mla	r7, lr, r8, r4
 801dcfe:	f1be 0f00 	cmp.w	lr, #0
 801dd02:	eb02 0a07 	add.w	sl, r2, r7
 801dd06:	db37      	blt.n	801dd78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dd08:	45f3      	cmp	fp, lr
 801dd0a:	dd35      	ble.n	801dd78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dd0c:	2c00      	cmp	r4, #0
 801dd0e:	db31      	blt.n	801dd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dd10:	45a0      	cmp	r8, r4
 801dd12:	dd2f      	ble.n	801dd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dd14:	5dd2      	ldrb	r2, [r2, r7]
 801dd16:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801dd1a:	1c62      	adds	r2, r4, #1
 801dd1c:	d42f      	bmi.n	801dd7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd1e:	4590      	cmp	r8, r2
 801dd20:	dd2d      	ble.n	801dd7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd22:	b366      	cbz	r6, 801dd7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd24:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dd28:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801dd2c:	f11e 0e01 	adds.w	lr, lr, #1
 801dd30:	d429      	bmi.n	801dd86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dd32:	45f3      	cmp	fp, lr
 801dd34:	dd27      	ble.n	801dd86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dd36:	f1bc 0f00 	cmp.w	ip, #0
 801dd3a:	f000 80a0 	beq.w	801de7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801dd3e:	2c00      	cmp	r4, #0
 801dd40:	db1f      	blt.n	801dd82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dd42:	45a0      	cmp	r8, r4
 801dd44:	dd1d      	ble.n	801dd82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dd46:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801dd4a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801dd4e:	3401      	adds	r4, #1
 801dd50:	d41c      	bmi.n	801dd8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dd52:	45a0      	cmp	r8, r4
 801dd54:	dd1a      	ble.n	801dd8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dd56:	b1de      	cbz	r6, 801dd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801dd58:	44d0      	add	r8, sl
 801dd5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dd5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801dd62:	2e0f      	cmp	r6, #15
 801dd64:	d915      	bls.n	801dd92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801dd66:	4b49      	ldr	r3, [pc, #292]	; (801de8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801dd68:	4a49      	ldr	r2, [pc, #292]	; (801de90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801dd6a:	484a      	ldr	r0, [pc, #296]	; (801de94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801dd6c:	f240 11ef 	movw	r1, #495	; 0x1ef
 801dd70:	f007 f828 	bl	8024dc4 <__assert_func>
 801dd74:	4681      	mov	r9, r0
 801dd76:	e7d0      	b.n	801dd1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801dd78:	4607      	mov	r7, r0
 801dd7a:	4681      	mov	r9, r0
 801dd7c:	e7d6      	b.n	801dd2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801dd7e:	4607      	mov	r7, r0
 801dd80:	e7d4      	b.n	801dd2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801dd82:	4686      	mov	lr, r0
 801dd84:	e7e3      	b.n	801dd4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801dd86:	4603      	mov	r3, r0
 801dd88:	4686      	mov	lr, r0
 801dd8a:	e7ea      	b.n	801dd62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	e7e8      	b.n	801dd62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801dd90:	4603      	mov	r3, r0
 801dd92:	f1bc 0f0f 	cmp.w	ip, #15
 801dd96:	d8e6      	bhi.n	801dd66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801dd98:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801dd9c:	fb16 f80c 	smulbb	r8, r6, ip
 801dda0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801dda4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801dda8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ddac:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801ddb0:	ea44 0909 	orr.w	r9, r4, r9
 801ddb4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ddb8:	f1cc 0410 	rsb	r4, ip, #16
 801ddbc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ddc0:	1ba4      	subs	r4, r4, r6
 801ddc2:	041a      	lsls	r2, r3, #16
 801ddc4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801ddc8:	ea4a 0707 	orr.w	r7, sl, r7
 801ddcc:	4377      	muls	r7, r6
 801ddce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ddd2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801ddd6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ddda:	fb04 7409 	mla	r4, r4, r9, r7
 801ddde:	4313      	orrs	r3, r2
 801dde0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801dde4:	fb08 4303 	mla	r3, r8, r3, r4
 801dde8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ddec:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801ddf0:	4322      	orrs	r2, r4
 801ddf2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801ddf6:	fb0c 3202 	mla	r2, ip, r2, r3
 801ddfa:	0d53      	lsrs	r3, r2, #21
 801ddfc:	0952      	lsrs	r2, r2, #5
 801ddfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801de02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801de06:	431a      	orrs	r2, r3
 801de08:	b293      	uxth	r3, r2
 801de0a:	b2af      	uxth	r7, r5
 801de0c:	1202      	asrs	r2, r0, #8
 801de0e:	43ed      	mvns	r5, r5
 801de10:	b2ed      	uxtb	r5, r5
 801de12:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801de16:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801de1a:	fb12 f205 	smulbb	r2, r2, r5
 801de1e:	10c6      	asrs	r6, r0, #3
 801de20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de24:	fb0c 2c07 	mla	ip, ip, r7, r2
 801de28:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de2c:	10da      	asrs	r2, r3, #3
 801de2e:	fb16 f605 	smulbb	r6, r6, r5
 801de32:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801de36:	fb02 6207 	mla	r2, r2, r7, r6
 801de3a:	b296      	uxth	r6, r2
 801de3c:	00c2      	lsls	r2, r0, #3
 801de3e:	00dc      	lsls	r4, r3, #3
 801de40:	b2d2      	uxtb	r2, r2
 801de42:	b2e4      	uxtb	r4, r4
 801de44:	fb12 f205 	smulbb	r2, r2, r5
 801de48:	fb04 2207 	mla	r2, r4, r7, r2
 801de4c:	fa1f fc8c 	uxth.w	ip, ip
 801de50:	b292      	uxth	r2, r2
 801de52:	f10c 0301 	add.w	r3, ip, #1
 801de56:	1c50      	adds	r0, r2, #1
 801de58:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801de5c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801de60:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801de64:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801de68:	4313      	orrs	r3, r2
 801de6a:	1c72      	adds	r2, r6, #1
 801de6c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801de70:	0952      	lsrs	r2, r2, #5
 801de72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de76:	4313      	orrs	r3, r2
 801de78:	800b      	strh	r3, [r1, #0]
 801de7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de7e:	2e0f      	cmp	r6, #15
 801de80:	f63f af71 	bhi.w	801dd66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801de84:	4603      	mov	r3, r0
 801de86:	4686      	mov	lr, r0
 801de88:	e786      	b.n	801dd98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801de8a:	bf00      	nop
 801de8c:	0805441c 	.word	0x0805441c
 801de90:	08054a1e 	.word	0x08054a1e
 801de94:	080544a4 	.word	0x080544a4

0801de98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de9c:	ed2d 8b08 	vpush	{d8-d11}
 801dea0:	b09b      	sub	sp, #108	; 0x6c
 801dea2:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 801dea6:	9309      	str	r3, [sp, #36]	; 0x24
 801dea8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801deac:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 801deae:	930a      	str	r3, [sp, #40]	; 0x28
 801deb0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801deb4:	930e      	str	r3, [sp, #56]	; 0x38
 801deb6:	910d      	str	r1, [sp, #52]	; 0x34
 801deb8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801debc:	9018      	str	r0, [sp, #96]	; 0x60
 801debe:	6870      	ldr	r0, [r6, #4]
 801dec0:	9217      	str	r2, [sp, #92]	; 0x5c
 801dec2:	fb00 1303 	mla	r3, r0, r3, r1
 801dec6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801dec8:	6831      	ldr	r1, [r6, #0]
 801deca:	6856      	ldr	r6, [r2, #4]
 801decc:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801ded0:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801ded4:	6813      	ldr	r3, [r2, #0]
 801ded6:	930c      	str	r3, [sp, #48]	; 0x30
 801ded8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801deda:	43db      	mvns	r3, r3
 801dedc:	b2db      	uxtb	r3, r3
 801dede:	eeb0 aa40 	vmov.f32	s20, s0
 801dee2:	eef0 9a60 	vmov.f32	s19, s1
 801dee6:	eeb0 9a41 	vmov.f32	s18, s2
 801deea:	eeb0 8a62 	vmov.f32	s16, s5
 801deee:	eef0 8a43 	vmov.f32	s17, s6
 801def2:	eef0 ba44 	vmov.f32	s23, s8
 801def6:	eeb0 ba64 	vmov.f32	s22, s9
 801defa:	eef0 aa45 	vmov.f32	s21, s10
 801defe:	3604      	adds	r6, #4
 801df00:	930b      	str	r3, [sp, #44]	; 0x2c
 801df02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df04:	2b00      	cmp	r3, #0
 801df06:	dc03      	bgt.n	801df10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801df08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	f340 8215 	ble.w	801e33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df12:	2b00      	cmp	r3, #0
 801df14:	f340 8102 	ble.w	801e11c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801df18:	ea5f 4229 	movs.w	r2, r9, asr #16
 801df1c:	ea4f 4328 	mov.w	r3, r8, asr #16
 801df20:	d42c      	bmi.n	801df7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801df22:	1c51      	adds	r1, r2, #1
 801df24:	428c      	cmp	r4, r1
 801df26:	dd2c      	ble.n	801df82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df28:	2b00      	cmp	r3, #0
 801df2a:	db2a      	blt.n	801df82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801df2e:	1c59      	adds	r1, r3, #1
 801df30:	4288      	cmp	r0, r1
 801df32:	dd26      	ble.n	801df82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df36:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801df38:	3b01      	subs	r3, #1
 801df3a:	fb02 9203 	mla	r2, r2, r3, r9
 801df3e:	1412      	asrs	r2, r2, #16
 801df40:	d429      	bmi.n	801df96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df42:	3201      	adds	r2, #1
 801df44:	4294      	cmp	r4, r2
 801df46:	dd26      	ble.n	801df96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df48:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801df4a:	fb02 8303 	mla	r3, r2, r3, r8
 801df4e:	141b      	asrs	r3, r3, #16
 801df50:	d421      	bmi.n	801df96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df54:	3301      	adds	r3, #1
 801df56:	429a      	cmp	r2, r3
 801df58:	dd1d      	ble.n	801df96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df5a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801df5e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801df62:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801df66:	9312      	str	r3, [sp, #72]	; 0x48
 801df68:	f1be 0f00 	cmp.w	lr, #0
 801df6c:	f300 8138 	bgt.w	801e1e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 801df70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df72:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801df76:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801df7a:	e0d1      	b.n	801e120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801df7c:	1c51      	adds	r1, r2, #1
 801df7e:	f040 80c3 	bne.w	801e108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801df82:	42a2      	cmp	r2, r4
 801df84:	f280 80c0 	bge.w	801e108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801df88:	1c5f      	adds	r7, r3, #1
 801df8a:	f2c0 80bd 	blt.w	801e108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801df8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df90:	4293      	cmp	r3, r2
 801df92:	f280 80b9 	bge.w	801e108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801df96:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801df9a:	4657      	mov	r7, sl
 801df9c:	f1bb 0f00 	cmp.w	fp, #0
 801dfa0:	dde6      	ble.n	801df70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801dfa2:	ea5f 4229 	movs.w	r2, r9, asr #16
 801dfa6:	ea4f 4328 	mov.w	r3, r8, asr #16
 801dfaa:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801dfae:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801dfb2:	f100 80fc 	bmi.w	801e1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 801dfb6:	f102 0c01 	add.w	ip, r2, #1
 801dfba:	4564      	cmp	r4, ip
 801dfbc:	f340 80f9 	ble.w	801e1b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	f2c0 80f6 	blt.w	801e1b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801dfc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dfc8:	f103 0c01 	add.w	ip, r3, #1
 801dfcc:	4565      	cmp	r5, ip
 801dfce:	f340 80f0 	ble.w	801e1b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801dfd2:	fb03 2304 	mla	r3, r3, r4, r2
 801dfd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dfd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dfda:	441a      	add	r2, r3
 801dfdc:	5ceb      	ldrb	r3, [r5, r3]
 801dfde:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 801dfe2:	2800      	cmp	r0, #0
 801dfe4:	f000 80db 	beq.w	801e19e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 801dfe8:	7853      	ldrb	r3, [r2, #1]
 801dfea:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dfee:	9313      	str	r3, [sp, #76]	; 0x4c
 801dff0:	b141      	cbz	r1, 801e004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801dff2:	1913      	adds	r3, r2, r4
 801dff4:	5d12      	ldrb	r2, [r2, r4]
 801dff6:	785b      	ldrb	r3, [r3, #1]
 801dff8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801dffc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e000:	9210      	str	r2, [sp, #64]	; 0x40
 801e002:	9314      	str	r3, [sp, #80]	; 0x50
 801e004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e006:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e008:	fb10 f201 	smulbb	r2, r0, r1
 801e00c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e010:	10d2      	asrs	r2, r2, #3
 801e012:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e016:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e01a:	ea4c 0c03 	orr.w	ip, ip, r3
 801e01e:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801e022:	930f      	str	r3, [sp, #60]	; 0x3c
 801e024:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e026:	041b      	lsls	r3, r3, #16
 801e028:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e02c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e030:	432b      	orrs	r3, r5
 801e032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e034:	4353      	muls	r3, r2
 801e036:	fb05 330c 	mla	r3, r5, ip, r3
 801e03a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e03e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e042:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e046:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e04a:	f1c1 0c10 	rsb	ip, r1, #16
 801e04e:	ebac 0c00 	sub.w	ip, ip, r0
 801e052:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e056:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e05a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e05c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e05e:	0418      	lsls	r0, r3, #16
 801e060:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e064:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e068:	4318      	orrs	r0, r3
 801e06a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e06e:	fb02 c200 	mla	r2, r2, r0, ip
 801e072:	0d53      	lsrs	r3, r2, #21
 801e074:	0952      	lsrs	r2, r2, #5
 801e076:	f8b7 c000 	ldrh.w	ip, [r7]
 801e07a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e07e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e082:	431a      	orrs	r2, r3
 801e084:	b292      	uxth	r2, r2
 801e086:	ea4f 212c 	mov.w	r1, ip, asr #8
 801e08a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e08e:	1210      	asrs	r0, r2, #8
 801e090:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e094:	fb11 f105 	smulbb	r1, r1, r5
 801e098:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801e09c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e0a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e0a4:	fb00 1003 	mla	r0, r0, r3, r1
 801e0a8:	fa5f fc8c 	uxtb.w	ip, ip
 801e0ac:	10d1      	asrs	r1, r2, #3
 801e0ae:	00d2      	lsls	r2, r2, #3
 801e0b0:	fb1c fc05 	smulbb	ip, ip, r5
 801e0b4:	b2d2      	uxtb	r2, r2
 801e0b6:	fb02 c203 	mla	r2, r2, r3, ip
 801e0ba:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e0be:	b280      	uxth	r0, r0
 801e0c0:	b292      	uxth	r2, r2
 801e0c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e0c6:	fb1e fe05 	smulbb	lr, lr, r5
 801e0ca:	fb01 e103 	mla	r1, r1, r3, lr
 801e0ce:	f102 0c01 	add.w	ip, r2, #1
 801e0d2:	1c43      	adds	r3, r0, #1
 801e0d4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e0d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e0dc:	b289      	uxth	r1, r1
 801e0de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e0e2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e0e6:	4313      	orrs	r3, r2
 801e0e8:	1c4a      	adds	r2, r1, #1
 801e0ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e0ee:	0949      	lsrs	r1, r1, #5
 801e0f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e0f4:	430b      	orrs	r3, r1
 801e0f6:	803b      	strh	r3, [r7, #0]
 801e0f8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e0fa:	4499      	add	r9, r3
 801e0fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e0fe:	3702      	adds	r7, #2
 801e100:	4498      	add	r8, r3
 801e102:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e106:	e749      	b.n	801df9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e108:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e10a:	4499      	add	r9, r3
 801e10c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e10e:	4498      	add	r8, r3
 801e110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e112:	3b01      	subs	r3, #1
 801e114:	9309      	str	r3, [sp, #36]	; 0x24
 801e116:	f10a 0a02 	add.w	sl, sl, #2
 801e11a:	e6f9      	b.n	801df10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801e11c:	f47f af0a 	bne.w	801df34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801e120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e122:	2b00      	cmp	r3, #0
 801e124:	f340 8109 	ble.w	801e33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801e128:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e130:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e134:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e136:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e13a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e13e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e142:	eef0 6a48 	vmov.f32	s13, s16
 801e146:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e14a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e14e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e152:	ee16 9a90 	vmov	r9, s13
 801e156:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e15a:	eef0 6a68 	vmov.f32	s13, s17
 801e15e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e162:	ee18 2a10 	vmov	r2, s16
 801e166:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e16e:	ee18 2a90 	vmov	r2, s17
 801e172:	932f      	str	r3, [sp, #188]	; 0xbc
 801e174:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e176:	fb92 f3f3 	sdiv	r3, r2, r3
 801e17a:	9330      	str	r3, [sp, #192]	; 0xc0
 801e17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e17e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e180:	3b01      	subs	r3, #1
 801e182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e186:	930d      	str	r3, [sp, #52]	; 0x34
 801e188:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e18a:	bf08      	it	eq
 801e18c:	4613      	moveq	r3, r2
 801e18e:	ee16 8a90 	vmov	r8, s13
 801e192:	9309      	str	r3, [sp, #36]	; 0x24
 801e194:	eef0 8a67 	vmov.f32	s17, s15
 801e198:	eeb0 8a47 	vmov.f32	s16, s14
 801e19c:	e6b1      	b.n	801df02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e19e:	2900      	cmp	r1, #0
 801e1a0:	f43f af30 	beq.w	801e004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801e1a4:	5d13      	ldrb	r3, [r2, r4]
 801e1a6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e1aa:	9310      	str	r3, [sp, #64]	; 0x40
 801e1ac:	e72a      	b.n	801e004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801e1ae:	1c55      	adds	r5, r2, #1
 801e1b0:	d1a2      	bne.n	801e0f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1b2:	4294      	cmp	r4, r2
 801e1b4:	dda0      	ble.n	801e0f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1b6:	1c5d      	adds	r5, r3, #1
 801e1b8:	db9e      	blt.n	801e0f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e1bc:	429d      	cmp	r5, r3
 801e1be:	dd9b      	ble.n	801e0f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1c0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801e1c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e1c8:	9202      	str	r2, [sp, #8]
 801e1ca:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e1ce:	e9cd 4300 	strd	r4, r3, [sp]
 801e1d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e1d4:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e1d6:	4633      	mov	r3, r6
 801e1d8:	4639      	mov	r1, r7
 801e1da:	f7ff fd7f 	bl	801dcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e1de:	e78b      	b.n	801e0f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1e0:	ea4f 4329 	mov.w	r3, r9, asr #16
 801e1e4:	ea4f 4228 	mov.w	r2, r8, asr #16
 801e1e8:	fb04 3202 	mla	r2, r4, r2, r3
 801e1ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1f0:	4413      	add	r3, r2
 801e1f2:	5c8a      	ldrb	r2, [r1, r2]
 801e1f4:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 801e1f8:	f3c8 3003 	ubfx	r0, r8, #12, #4
 801e1fc:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 801e200:	f1bc 0f00 	cmp.w	ip, #0
 801e204:	f000 8091 	beq.w	801e32a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 801e208:	785a      	ldrb	r2, [r3, #1]
 801e20a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e20e:	9215      	str	r2, [sp, #84]	; 0x54
 801e210:	b140      	cbz	r0, 801e224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e212:	191a      	adds	r2, r3, r4
 801e214:	5d1b      	ldrb	r3, [r3, r4]
 801e216:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e21a:	9311      	str	r3, [sp, #68]	; 0x44
 801e21c:	7853      	ldrb	r3, [r2, #1]
 801e21e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e222:	9316      	str	r3, [sp, #88]	; 0x58
 801e224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e226:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e228:	fb1c f200 	smulbb	r2, ip, r0
 801e22c:	041f      	lsls	r7, r3, #16
 801e22e:	10d2      	asrs	r2, r2, #3
 801e230:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e234:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e238:	431f      	orrs	r7, r3
 801e23a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e23e:	9319      	str	r3, [sp, #100]	; 0x64
 801e240:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e242:	041b      	lsls	r3, r3, #16
 801e244:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e248:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e24c:	ea43 030b 	orr.w	r3, r3, fp
 801e250:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801e252:	4353      	muls	r3, r2
 801e254:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e258:	fb05 3707 	mla	r7, r5, r7, r3
 801e25c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e260:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e264:	ea43 0b01 	orr.w	fp, r3, r1
 801e268:	f1c0 0110 	rsb	r1, r0, #16
 801e26c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e26e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e270:	eba1 0c0c 	sub.w	ip, r1, ip
 801e274:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e278:	fb0c 770b 	mla	r7, ip, fp, r7
 801e27c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e280:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e284:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e288:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e28c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e290:	fb02 770c 	mla	r7, r2, ip, r7
 801e294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e296:	0d79      	lsrs	r1, r7, #21
 801e298:	8812      	ldrh	r2, [r2, #0]
 801e29a:	097f      	lsrs	r7, r7, #5
 801e29c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e2a0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e2a4:	430f      	orrs	r7, r1
 801e2a6:	1211      	asrs	r1, r2, #8
 801e2a8:	b2bb      	uxth	r3, r7
 801e2aa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e2ae:	fb11 f105 	smulbb	r1, r1, r5
 801e2b2:	1218      	asrs	r0, r3, #8
 801e2b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e2b6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e2ba:	fb00 1005 	mla	r0, r0, r5, r1
 801e2be:	10d7      	asrs	r7, r2, #3
 801e2c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e2c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e2c6:	fb17 f705 	smulbb	r7, r7, r5
 801e2ca:	10d9      	asrs	r1, r3, #3
 801e2cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e2ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e2d2:	fb01 7105 	mla	r1, r1, r5, r7
 801e2d6:	00d2      	lsls	r2, r2, #3
 801e2d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e2da:	b2d2      	uxtb	r2, r2
 801e2dc:	fb12 f205 	smulbb	r2, r2, r5
 801e2e0:	00db      	lsls	r3, r3, #3
 801e2e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e2e4:	b2db      	uxtb	r3, r3
 801e2e6:	b280      	uxth	r0, r0
 801e2e8:	fb03 2305 	mla	r3, r3, r5, r2
 801e2ec:	b29b      	uxth	r3, r3
 801e2ee:	b289      	uxth	r1, r1
 801e2f0:	1c42      	adds	r2, r0, #1
 801e2f2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e2f6:	1c4f      	adds	r7, r1, #1
 801e2f8:	1c5a      	adds	r2, r3, #1
 801e2fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e2fe:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e302:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e306:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e30a:	0949      	lsrs	r1, r1, #5
 801e30c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e30e:	4310      	orrs	r0, r2
 801e310:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e314:	4308      	orrs	r0, r1
 801e316:	f823 0b02 	strh.w	r0, [r3], #2
 801e31a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e31c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e31e:	4499      	add	r9, r3
 801e320:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e322:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e326:	4498      	add	r8, r3
 801e328:	e61e      	b.n	801df68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e32a:	2800      	cmp	r0, #0
 801e32c:	f43f af7a 	beq.w	801e224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e330:	5d1b      	ldrb	r3, [r3, r4]
 801e332:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e336:	9311      	str	r3, [sp, #68]	; 0x44
 801e338:	e774      	b.n	801e224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e33a:	b01b      	add	sp, #108	; 0x6c
 801e33c:	ecbd 8b08 	vpop	{d8-d11}
 801e340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e348:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801e34c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801e350:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e354:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801e358:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e35c:	8808      	ldrh	r0, [r1, #0]
 801e35e:	fb06 570e 	mla	r7, r6, lr, r5
 801e362:	2e00      	cmp	r6, #0
 801e364:	eb02 0807 	add.w	r8, r2, r7
 801e368:	db38      	blt.n	801e3dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e36a:	45b1      	cmp	r9, r6
 801e36c:	dd36      	ble.n	801e3dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e36e:	2d00      	cmp	r5, #0
 801e370:	db32      	blt.n	801e3d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e372:	45ae      	cmp	lr, r5
 801e374:	dd30      	ble.n	801e3d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e376:	5dd2      	ldrb	r2, [r2, r7]
 801e378:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801e37c:	1c6a      	adds	r2, r5, #1
 801e37e:	d430      	bmi.n	801e3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e380:	4596      	cmp	lr, r2
 801e382:	dd2e      	ble.n	801e3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e384:	b36c      	cbz	r4, 801e3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e386:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e38a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e38e:	3601      	adds	r6, #1
 801e390:	d42b      	bmi.n	801e3ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e392:	45b1      	cmp	r9, r6
 801e394:	dd29      	ble.n	801e3ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e396:	f1bc 0f00 	cmp.w	ip, #0
 801e39a:	d028      	beq.n	801e3ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801e39c:	2d00      	cmp	r5, #0
 801e39e:	db22      	blt.n	801e3e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e3a0:	45ae      	cmp	lr, r5
 801e3a2:	dd20      	ble.n	801e3e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e3a4:	f818 600e 	ldrb.w	r6, [r8, lr]
 801e3a8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801e3ac:	3501      	adds	r5, #1
 801e3ae:	d407      	bmi.n	801e3c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e3b0:	45ae      	cmp	lr, r5
 801e3b2:	dd05      	ble.n	801e3c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e3b4:	b134      	cbz	r4, 801e3c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e3b6:	44c6      	add	lr, r8
 801e3b8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801e3bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801e3c0:	2c0f      	cmp	r4, #15
 801e3c2:	d802      	bhi.n	801e3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e3c4:	f1bc 0f0f 	cmp.w	ip, #15
 801e3c8:	d914      	bls.n	801e3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801e3ca:	4b26      	ldr	r3, [pc, #152]	; (801e464 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801e3cc:	4a26      	ldr	r2, [pc, #152]	; (801e468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801e3ce:	4827      	ldr	r0, [pc, #156]	; (801e46c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801e3d0:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e3d4:	f006 fcf6 	bl	8024dc4 <__assert_func>
 801e3d8:	4607      	mov	r7, r0
 801e3da:	e7cf      	b.n	801e37c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801e3dc:	4602      	mov	r2, r0
 801e3de:	4607      	mov	r7, r0
 801e3e0:	e7d5      	b.n	801e38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e3e2:	4602      	mov	r2, r0
 801e3e4:	e7d3      	b.n	801e38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e3e6:	4606      	mov	r6, r0
 801e3e8:	e7e0      	b.n	801e3ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801e3ea:	4606      	mov	r6, r0
 801e3ec:	e7e8      	b.n	801e3c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e3ee:	2c0f      	cmp	r4, #15
 801e3f0:	d8eb      	bhi.n	801e3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e3f2:	4606      	mov	r6, r0
 801e3f4:	043d      	lsls	r5, r7, #16
 801e3f6:	fb14 f30c 	smulbb	r3, r4, ip
 801e3fa:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801e3fe:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801e402:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e406:	10db      	asrs	r3, r3, #3
 801e408:	432f      	orrs	r7, r5
 801e40a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e40e:	f1cc 0510 	rsb	r5, ip, #16
 801e412:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e416:	1b2d      	subs	r5, r5, r4
 801e418:	ea4e 0202 	orr.w	r2, lr, r2
 801e41c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801e420:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e424:	4354      	muls	r4, r2
 801e426:	fb05 4507 	mla	r5, r5, r7, r4
 801e42a:	0404      	lsls	r4, r0, #16
 801e42c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e430:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e434:	4320      	orrs	r0, r4
 801e436:	fb03 5400 	mla	r4, r3, r0, r5
 801e43a:	0430      	lsls	r0, r6, #16
 801e43c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e440:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801e444:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801e448:	4330      	orrs	r0, r6
 801e44a:	fb03 4000 	mla	r0, r3, r0, r4
 801e44e:	0d43      	lsrs	r3, r0, #21
 801e450:	0940      	lsrs	r0, r0, #5
 801e452:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e456:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e45a:	4318      	orrs	r0, r3
 801e45c:	8008      	strh	r0, [r1, #0]
 801e45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e462:	bf00      	nop
 801e464:	0805441c 	.word	0x0805441c
 801e468:	08054a1e 	.word	0x08054a1e
 801e46c:	080544a4 	.word	0x080544a4

0801e470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e474:	ed2d 8b0a 	vpush	{d8-d12}
 801e478:	b095      	sub	sp, #84	; 0x54
 801e47a:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 801e47e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 801e480:	9306      	str	r3, [sp, #24]
 801e482:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e486:	9109      	str	r1, [sp, #36]	; 0x24
 801e488:	9307      	str	r3, [sp, #28]
 801e48a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e48e:	9012      	str	r0, [sp, #72]	; 0x48
 801e490:	6878      	ldr	r0, [r7, #4]
 801e492:	9211      	str	r2, [sp, #68]	; 0x44
 801e494:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e496:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801e49a:	fb00 1303 	mla	r3, r0, r3, r1
 801e49e:	6839      	ldr	r1, [r7, #0]
 801e4a0:	6857      	ldr	r7, [r2, #4]
 801e4a2:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801e4a6:	6813      	ldr	r3, [r2, #0]
 801e4a8:	9308      	str	r3, [sp, #32]
 801e4aa:	eeb0 aa40 	vmov.f32	s20, s0
 801e4ae:	eef0 9a60 	vmov.f32	s19, s1
 801e4b2:	eeb0 9a41 	vmov.f32	s18, s2
 801e4b6:	eeb0 8a62 	vmov.f32	s16, s5
 801e4ba:	eef0 8a43 	vmov.f32	s17, s6
 801e4be:	eeb0 ca44 	vmov.f32	s24, s8
 801e4c2:	eef0 ba64 	vmov.f32	s23, s9
 801e4c6:	eeb0 ba45 	vmov.f32	s22, s10
 801e4ca:	3704      	adds	r7, #4
 801e4cc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	dc03      	bgt.n	801e4de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	f340 819a 	ble.w	801e812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801e4de:	9b06      	ldr	r3, [sp, #24]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	f340 80c4 	ble.w	801e66e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801e4e6:	ea5f 4229 	movs.w	r2, r9, asr #16
 801e4ea:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e4ee:	d429      	bmi.n	801e544 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e4f0:	1c51      	adds	r1, r2, #1
 801e4f2:	428c      	cmp	r4, r1
 801e4f4:	dd29      	ble.n	801e54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	db27      	blt.n	801e54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e4fa:	9807      	ldr	r0, [sp, #28]
 801e4fc:	1c59      	adds	r1, r3, #1
 801e4fe:	4288      	cmp	r0, r1
 801e500:	dd23      	ble.n	801e54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e502:	9b06      	ldr	r3, [sp, #24]
 801e504:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e506:	3b01      	subs	r3, #1
 801e508:	fb02 9203 	mla	r2, r2, r3, r9
 801e50c:	1412      	asrs	r2, r2, #16
 801e50e:	d425      	bmi.n	801e55c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e510:	3201      	adds	r2, #1
 801e512:	4294      	cmp	r4, r2
 801e514:	dd22      	ble.n	801e55c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e516:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e518:	fb02 6303 	mla	r3, r2, r3, r6
 801e51c:	141b      	asrs	r3, r3, #16
 801e51e:	d41d      	bmi.n	801e55c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e520:	9a07      	ldr	r2, [sp, #28]
 801e522:	3301      	adds	r3, #1
 801e524:	429a      	cmp	r2, r3
 801e526:	dd19      	ble.n	801e55c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e528:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e52c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801e530:	f1b8 0f00 	cmp.w	r8, #0
 801e534:	f300 80f8 	bgt.w	801e728 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801e538:	9b06      	ldr	r3, [sp, #24]
 801e53a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e53e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801e542:	e096      	b.n	801e672 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801e544:	1c51      	adds	r1, r2, #1
 801e546:	f040 8088 	bne.w	801e65a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e54a:	42a2      	cmp	r2, r4
 801e54c:	f280 8085 	bge.w	801e65a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e550:	1c5a      	adds	r2, r3, #1
 801e552:	f2c0 8082 	blt.w	801e65a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e556:	9a07      	ldr	r2, [sp, #28]
 801e558:	4293      	cmp	r3, r2
 801e55a:	da7e      	bge.n	801e65a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e55c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801e560:	46d0      	mov	r8, sl
 801e562:	f1bb 0f00 	cmp.w	fp, #0
 801e566:	dde7      	ble.n	801e538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e568:	ea5f 4229 	movs.w	r2, r9, asr #16
 801e56c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e570:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801e574:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e578:	f100 80c0 	bmi.w	801e6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801e57c:	f102 0c01 	add.w	ip, r2, #1
 801e580:	4564      	cmp	r4, ip
 801e582:	f340 80bd 	ble.w	801e700 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e586:	2b00      	cmp	r3, #0
 801e588:	f2c0 80ba 	blt.w	801e700 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e58c:	9d07      	ldr	r5, [sp, #28]
 801e58e:	f103 0c01 	add.w	ip, r3, #1
 801e592:	4565      	cmp	r5, ip
 801e594:	f340 80b4 	ble.w	801e700 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e598:	fb03 2304 	mla	r3, r3, r4, r2
 801e59c:	9d08      	ldr	r5, [sp, #32]
 801e59e:	9a08      	ldr	r2, [sp, #32]
 801e5a0:	441a      	add	r2, r3
 801e5a2:	5ceb      	ldrb	r3, [r5, r3]
 801e5a4:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	f000 809f 	beq.w	801e6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 801e5ae:	7853      	ldrb	r3, [r2, #1]
 801e5b0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e5b4:	930d      	str	r3, [sp, #52]	; 0x34
 801e5b6:	b141      	cbz	r1, 801e5ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e5b8:	1913      	adds	r3, r2, r4
 801e5ba:	5d12      	ldrb	r2, [r2, r4]
 801e5bc:	785b      	ldrb	r3, [r3, #1]
 801e5be:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e5c2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e5c6:	920a      	str	r2, [sp, #40]	; 0x28
 801e5c8:	930e      	str	r3, [sp, #56]	; 0x38
 801e5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e5ce:	fb10 f201 	smulbb	r2, r0, r1
 801e5d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e5d6:	10d2      	asrs	r2, r2, #3
 801e5d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e5dc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e5e0:	ea4c 0c03 	orr.w	ip, ip, r3
 801e5e4:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801e5e8:	930c      	str	r3, [sp, #48]	; 0x30
 801e5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5ec:	041b      	lsls	r3, r3, #16
 801e5ee:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e5f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e5f6:	432b      	orrs	r3, r5
 801e5f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e5fa:	4353      	muls	r3, r2
 801e5fc:	fb05 330c 	mla	r3, r5, ip, r3
 801e600:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e604:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e608:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e60c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e610:	f1c1 0c10 	rsb	ip, r1, #16
 801e614:	ebac 0c00 	sub.w	ip, ip, r0
 801e618:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e61c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e622:	0418      	lsls	r0, r3, #16
 801e624:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e628:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e62c:	4318      	orrs	r0, r3
 801e62e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e632:	fb02 c200 	mla	r2, r2, r0, ip
 801e636:	0d53      	lsrs	r3, r2, #21
 801e638:	0952      	lsrs	r2, r2, #5
 801e63a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e63e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e642:	431a      	orrs	r2, r3
 801e644:	f8a8 2000 	strh.w	r2, [r8]
 801e648:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e64a:	4499      	add	r9, r3
 801e64c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e64e:	f108 0802 	add.w	r8, r8, #2
 801e652:	441e      	add	r6, r3
 801e654:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e658:	e783      	b.n	801e562 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e65a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e65c:	4499      	add	r9, r3
 801e65e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e660:	441e      	add	r6, r3
 801e662:	9b06      	ldr	r3, [sp, #24]
 801e664:	3b01      	subs	r3, #1
 801e666:	9306      	str	r3, [sp, #24]
 801e668:	f10a 0a02 	add.w	sl, sl, #2
 801e66c:	e737      	b.n	801e4de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e66e:	f47f af48 	bne.w	801e502 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e674:	2b00      	cmp	r3, #0
 801e676:	f340 80cc 	ble.w	801e812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801e67a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e67e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e682:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e688:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e68c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e690:	eef0 6a48 	vmov.f32	s13, s16
 801e694:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e698:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e69c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e6a0:	ee16 9a90 	vmov	r9, s13
 801e6a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e6a8:	eef0 6a68 	vmov.f32	s13, s17
 801e6ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e6b0:	ee18 2a10 	vmov	r2, s16
 801e6b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e6b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6bc:	ee18 2a90 	vmov	r2, s17
 801e6c0:	932b      	str	r3, [sp, #172]	; 0xac
 801e6c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6c8:	932c      	str	r3, [sp, #176]	; 0xb0
 801e6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e6ce:	3b01      	subs	r3, #1
 801e6d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6d4:	9309      	str	r3, [sp, #36]	; 0x24
 801e6d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6d8:	bf08      	it	eq
 801e6da:	4613      	moveq	r3, r2
 801e6dc:	ee16 6a90 	vmov	r6, s13
 801e6e0:	9306      	str	r3, [sp, #24]
 801e6e2:	eef0 8a67 	vmov.f32	s17, s15
 801e6e6:	eeb0 8a47 	vmov.f32	s16, s14
 801e6ea:	e6f1      	b.n	801e4d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e6ec:	2900      	cmp	r1, #0
 801e6ee:	f43f af6c 	beq.w	801e5ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e6f2:	5d13      	ldrb	r3, [r2, r4]
 801e6f4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e6f8:	930a      	str	r3, [sp, #40]	; 0x28
 801e6fa:	e766      	b.n	801e5ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e6fc:	1c55      	adds	r5, r2, #1
 801e6fe:	d1a3      	bne.n	801e648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e700:	4294      	cmp	r4, r2
 801e702:	dda1      	ble.n	801e648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e704:	1c5d      	adds	r5, r3, #1
 801e706:	db9f      	blt.n	801e648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e708:	9d07      	ldr	r5, [sp, #28]
 801e70a:	429d      	cmp	r5, r3
 801e70c:	dd9c      	ble.n	801e648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e716:	e9cd 4500 	strd	r4, r5, [sp]
 801e71a:	463b      	mov	r3, r7
 801e71c:	9a08      	ldr	r2, [sp, #32]
 801e71e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e720:	4641      	mov	r1, r8
 801e722:	f7ff fe0f 	bl	801e344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801e726:	e78f      	b.n	801e648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e728:	ea4f 4329 	mov.w	r3, r9, asr #16
 801e72c:	1432      	asrs	r2, r6, #16
 801e72e:	fb04 3202 	mla	r2, r4, r2, r3
 801e732:	9908      	ldr	r1, [sp, #32]
 801e734:	9b08      	ldr	r3, [sp, #32]
 801e736:	4413      	add	r3, r2
 801e738:	5c8a      	ldrb	r2, [r1, r2]
 801e73a:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 801e73e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e742:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 801e746:	f1be 0f00 	cmp.w	lr, #0
 801e74a:	d05b      	beq.n	801e804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 801e74c:	785a      	ldrb	r2, [r3, #1]
 801e74e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e752:	920f      	str	r2, [sp, #60]	; 0x3c
 801e754:	b140      	cbz	r0, 801e768 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e756:	191a      	adds	r2, r3, r4
 801e758:	5d1b      	ldrb	r3, [r3, r4]
 801e75a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e75e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e760:	7853      	ldrb	r3, [r2, #1]
 801e762:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e766:	9310      	str	r3, [sp, #64]	; 0x40
 801e768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e76a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e76c:	fb1e f200 	smulbb	r2, lr, r0
 801e770:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e774:	10d2      	asrs	r2, r2, #3
 801e776:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e77a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e77e:	ea4c 0c03 	orr.w	ip, ip, r3
 801e782:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801e786:	9313      	str	r3, [sp, #76]	; 0x4c
 801e788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e78a:	041b      	lsls	r3, r3, #16
 801e78c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e790:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e794:	ea43 030b 	orr.w	r3, r3, fp
 801e798:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e79a:	4353      	muls	r3, r2
 801e79c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e7a0:	fb05 3c0c 	mla	ip, r5, ip, r3
 801e7a4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e7a8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e7ac:	ea43 0b01 	orr.w	fp, r3, r1
 801e7b0:	f1c0 0110 	rsb	r1, r0, #16
 801e7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7b6:	eba1 0e0e 	sub.w	lr, r1, lr
 801e7ba:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801e7be:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e7c2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801e7c6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801e7ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e7ce:	ea4b 0e0e 	orr.w	lr, fp, lr
 801e7d2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e7d6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e7da:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801e7de:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e7e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e7e6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e7ea:	ea43 0c0c 	orr.w	ip, r3, ip
 801e7ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7f0:	f823 cb02 	strh.w	ip, [r3], #2
 801e7f4:	930c      	str	r3, [sp, #48]	; 0x30
 801e7f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e7f8:	4499      	add	r9, r3
 801e7fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7fc:	f108 38ff 	add.w	r8, r8, #4294967295
 801e800:	441e      	add	r6, r3
 801e802:	e695      	b.n	801e530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 801e804:	2800      	cmp	r0, #0
 801e806:	d0af      	beq.n	801e768 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e808:	5d1b      	ldrb	r3, [r3, r4]
 801e80a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e80e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e810:	e7aa      	b.n	801e768 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e812:	b015      	add	sp, #84	; 0x54
 801e814:	ecbd 8b0a 	vpop	{d8-d12}
 801e818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e81c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801e81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e820:	468b      	mov	fp, r1
 801e822:	8809      	ldrh	r1, [r1, #0]
 801e824:	b089      	sub	sp, #36	; 0x24
 801e826:	10cd      	asrs	r5, r1, #3
 801e828:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801e82c:	ea4f 2921 	mov.w	r9, r1, asr #8
 801e830:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e834:	00c9      	lsls	r1, r1, #3
 801e836:	9500      	str	r5, [sp, #0]
 801e838:	b2c9      	uxtb	r1, r1
 801e83a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801e83e:	9101      	str	r1, [sp, #4]
 801e840:	9900      	ldr	r1, [sp, #0]
 801e842:	9202      	str	r2, [sp, #8]
 801e844:	fb04 650e 	mla	r5, r4, lr, r6
 801e848:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801e84c:	eb02 0805 	add.w	r8, r2, r5
 801e850:	0209      	lsls	r1, r1, #8
 801e852:	9a01      	ldr	r2, [sp, #4]
 801e854:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801e858:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e85c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801e860:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801e864:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801e868:	4311      	orrs	r1, r2
 801e86a:	2c00      	cmp	r4, #0
 801e86c:	9107      	str	r1, [sp, #28]
 801e86e:	db43      	blt.n	801e8f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e870:	45a2      	cmp	sl, r4
 801e872:	dd41      	ble.n	801e8f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e874:	2e00      	cmp	r6, #0
 801e876:	db3d      	blt.n	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e878:	45b6      	cmp	lr, r6
 801e87a:	dd3b      	ble.n	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e87c:	9a02      	ldr	r2, [sp, #8]
 801e87e:	5d55      	ldrb	r5, [r2, r5]
 801e880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e884:	441d      	add	r5, r3
 801e886:	1c72      	adds	r2, r6, #1
 801e888:	d439      	bmi.n	801e8fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e88a:	4596      	cmp	lr, r2
 801e88c:	dd37      	ble.n	801e8fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e88e:	2f00      	cmp	r7, #0
 801e890:	d035      	beq.n	801e8fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e892:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e896:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e89a:	4419      	add	r1, r3
 801e89c:	3401      	adds	r4, #1
 801e89e:	d432      	bmi.n	801e906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8a0:	45a2      	cmp	sl, r4
 801e8a2:	dd30      	ble.n	801e906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8a4:	b378      	cbz	r0, 801e906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8a6:	2e00      	cmp	r6, #0
 801e8a8:	db2b      	blt.n	801e902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e8aa:	45b6      	cmp	lr, r6
 801e8ac:	dd29      	ble.n	801e902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e8ae:	f818 400e 	ldrb.w	r4, [r8, lr]
 801e8b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e8b6:	441c      	add	r4, r3
 801e8b8:	3601      	adds	r6, #1
 801e8ba:	d427      	bmi.n	801e90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e8bc:	45b6      	cmp	lr, r6
 801e8be:	dd25      	ble.n	801e90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e8c0:	b327      	cbz	r7, 801e90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e8c2:	44c6      	add	lr, r8
 801e8c4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e8c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8cc:	4413      	add	r3, r2
 801e8ce:	782a      	ldrb	r2, [r5, #0]
 801e8d0:	9202      	str	r2, [sp, #8]
 801e8d2:	780a      	ldrb	r2, [r1, #0]
 801e8d4:	9203      	str	r2, [sp, #12]
 801e8d6:	7822      	ldrb	r2, [r4, #0]
 801e8d8:	9204      	str	r2, [sp, #16]
 801e8da:	2f0f      	cmp	r7, #15
 801e8dc:	781a      	ldrb	r2, [r3, #0]
 801e8de:	9205      	str	r2, [sp, #20]
 801e8e0:	d801      	bhi.n	801e8e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 801e8e2:	280f      	cmp	r0, #15
 801e8e4:	d914      	bls.n	801e910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 801e8e6:	4b3f      	ldr	r3, [pc, #252]	; (801e9e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 801e8e8:	4a3f      	ldr	r2, [pc, #252]	; (801e9e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801e8ea:	4840      	ldr	r0, [pc, #256]	; (801e9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801e8ec:	f240 210d 	movw	r1, #525	; 0x20d
 801e8f0:	f006 fa68 	bl	8024dc4 <__assert_func>
 801e8f4:	ad07      	add	r5, sp, #28
 801e8f6:	e7c6      	b.n	801e886 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 801e8f8:	a907      	add	r1, sp, #28
 801e8fa:	460d      	mov	r5, r1
 801e8fc:	e7ce      	b.n	801e89c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e8fe:	a907      	add	r1, sp, #28
 801e900:	e7cc      	b.n	801e89c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e902:	ac07      	add	r4, sp, #28
 801e904:	e7d8      	b.n	801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 801e906:	ab07      	add	r3, sp, #28
 801e908:	461c      	mov	r4, r3
 801e90a:	e7e0      	b.n	801e8ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e90c:	ab07      	add	r3, sp, #28
 801e90e:	e7de      	b.n	801e8ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e910:	b2ba      	uxth	r2, r7
 801e912:	b280      	uxth	r0, r0
 801e914:	fb02 fa00 	mul.w	sl, r2, r0
 801e918:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e91c:	0112      	lsls	r2, r2, #4
 801e91e:	b280      	uxth	r0, r0
 801e920:	f891 8002 	ldrb.w	r8, [r1, #2]
 801e924:	7849      	ldrb	r1, [r1, #1]
 801e926:	78ae      	ldrb	r6, [r5, #2]
 801e928:	786d      	ldrb	r5, [r5, #1]
 801e92a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e92e:	eba2 020a 	sub.w	r2, r2, sl
 801e932:	b292      	uxth	r2, r2
 801e934:	ebae 0e00 	sub.w	lr, lr, r0
 801e938:	fa1f fe8e 	uxth.w	lr, lr
 801e93c:	4351      	muls	r1, r2
 801e93e:	fb02 f808 	mul.w	r8, r2, r8
 801e942:	fb0e 8806 	mla	r8, lr, r6, r8
 801e946:	fb0e 1505 	mla	r5, lr, r5, r1
 801e94a:	78a6      	ldrb	r6, [r4, #2]
 801e94c:	7861      	ldrb	r1, [r4, #1]
 801e94e:	fa1f f78c 	uxth.w	r7, ip
 801e952:	fb00 8806 	mla	r8, r0, r6, r8
 801e956:	fb00 5501 	mla	r5, r0, r1, r5
 801e95a:	789e      	ldrb	r6, [r3, #2]
 801e95c:	7859      	ldrb	r1, [r3, #1]
 801e95e:	9b00      	ldr	r3, [sp, #0]
 801e960:	ea6f 0c0c 	mvn.w	ip, ip
 801e964:	fa5f fc8c 	uxtb.w	ip, ip
 801e968:	fb0a 5101 	mla	r1, sl, r1, r5
 801e96c:	fb13 f50c 	smulbb	r5, r3, ip
 801e970:	9b03      	ldr	r3, [sp, #12]
 801e972:	435a      	muls	r2, r3
 801e974:	9b02      	ldr	r3, [sp, #8]
 801e976:	fb0e 2203 	mla	r2, lr, r3, r2
 801e97a:	9b04      	ldr	r3, [sp, #16]
 801e97c:	fb00 2003 	mla	r0, r0, r3, r2
 801e980:	9b05      	ldr	r3, [sp, #20]
 801e982:	fb0a 8606 	mla	r6, sl, r6, r8
 801e986:	fb0a 0a03 	mla	sl, sl, r3, r0
 801e98a:	9b01      	ldr	r3, [sp, #4]
 801e98c:	fb19 f90c 	smulbb	r9, r9, ip
 801e990:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e994:	fb13 fc0c 	smulbb	ip, r3, ip
 801e998:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e99c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e9a0:	fb06 9607 	mla	r6, r6, r7, r9
 801e9a4:	fb01 5107 	mla	r1, r1, r7, r5
 801e9a8:	fb0a c707 	mla	r7, sl, r7, ip
 801e9ac:	b2b6      	uxth	r6, r6
 801e9ae:	b289      	uxth	r1, r1
 801e9b0:	b2bf      	uxth	r7, r7
 801e9b2:	f106 0901 	add.w	r9, r6, #1
 801e9b6:	f107 0c01 	add.w	ip, r7, #1
 801e9ba:	1c4d      	adds	r5, r1, #1
 801e9bc:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801e9c0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e9c4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801e9c8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e9cc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e9d0:	0949      	lsrs	r1, r1, #5
 801e9d2:	433e      	orrs	r6, r7
 801e9d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9d8:	430e      	orrs	r6, r1
 801e9da:	f8ab 6000 	strh.w	r6, [fp]
 801e9de:	b009      	add	sp, #36	; 0x24
 801e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9e4:	0805441c 	.word	0x0805441c
 801e9e8:	08054975 	.word	0x08054975
 801e9ec:	080544a4 	.word	0x080544a4

0801e9f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f4:	ed2d 8b08 	vpush	{d8-d11}
 801e9f8:	b097      	sub	sp, #92	; 0x5c
 801e9fa:	eeb0 aa40 	vmov.f32	s20, s0
 801e9fe:	9309      	str	r3, [sp, #36]	; 0x24
 801ea00:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801ea04:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801ea06:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea08:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801ea0c:	9310      	str	r3, [sp, #64]	; 0x40
 801ea0e:	910f      	str	r1, [sp, #60]	; 0x3c
 801ea10:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ea14:	9015      	str	r0, [sp, #84]	; 0x54
 801ea16:	6860      	ldr	r0, [r4, #4]
 801ea18:	9213      	str	r2, [sp, #76]	; 0x4c
 801ea1a:	fb00 1303 	mla	r3, r0, r3, r1
 801ea1e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ea20:	6821      	ldr	r1, [r4, #0]
 801ea22:	6854      	ldr	r4, [r2, #4]
 801ea24:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 801ea28:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ea2c:	930a      	str	r3, [sp, #40]	; 0x28
 801ea2e:	6813      	ldr	r3, [r2, #0]
 801ea30:	930e      	str	r3, [sp, #56]	; 0x38
 801ea32:	1d23      	adds	r3, r4, #4
 801ea34:	9308      	str	r3, [sp, #32]
 801ea36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea38:	43db      	mvns	r3, r3
 801ea3a:	b2db      	uxtb	r3, r3
 801ea3c:	eef0 9a60 	vmov.f32	s19, s1
 801ea40:	eeb0 9a41 	vmov.f32	s18, s2
 801ea44:	eeb0 8a62 	vmov.f32	s16, s5
 801ea48:	eef0 8a43 	vmov.f32	s17, s6
 801ea4c:	eef0 ba44 	vmov.f32	s23, s8
 801ea50:	eeb0 ba64 	vmov.f32	s22, s9
 801ea54:	eef0 aa45 	vmov.f32	s21, s10
 801ea58:	930c      	str	r3, [sp, #48]	; 0x30
 801ea5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	dc03      	bgt.n	801ea68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ea60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f340 825c 	ble.w	801ef20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801ea68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	f340 8127 	ble.w	801ecbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 801ea70:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ea74:	1412      	asrs	r2, r2, #16
 801ea76:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ea7a:	d430      	bmi.n	801eade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801ea7c:	1c51      	adds	r1, r2, #1
 801ea7e:	428d      	cmp	r5, r1
 801ea80:	dd30      	ble.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	db2e      	blt.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ea86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea88:	1c59      	adds	r1, r3, #1
 801ea8a:	4288      	cmp	r0, r1
 801ea8c:	dd2a      	ble.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ea8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea90:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ea92:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ea94:	3b01      	subs	r3, #1
 801ea96:	fb02 1203 	mla	r2, r2, r3, r1
 801ea9a:	1412      	asrs	r2, r2, #16
 801ea9c:	d42c      	bmi.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801ea9e:	3201      	adds	r2, #1
 801eaa0:	4295      	cmp	r5, r2
 801eaa2:	dd29      	ble.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eaa4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eaa6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801eaa8:	fb02 1303 	mla	r3, r2, r3, r1
 801eaac:	141b      	asrs	r3, r3, #16
 801eaae:	d423      	bmi.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eab2:	3301      	adds	r3, #1
 801eab4:	429a      	cmp	r2, r3
 801eab6:	dd1f      	ble.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaba:	9311      	str	r3, [sp, #68]	; 0x44
 801eabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eabe:	930d      	str	r3, [sp, #52]	; 0x34
 801eac0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801eac4:	9312      	str	r3, [sp, #72]	; 0x48
 801eac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	f300 8161 	bgt.w	801ed90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801eace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ead0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ead2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ead6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eada:	930a      	str	r3, [sp, #40]	; 0x28
 801eadc:	e0f1      	b.n	801ecc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801eade:	1c51      	adds	r1, r2, #1
 801eae0:	f040 80de 	bne.w	801eca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eae4:	42aa      	cmp	r2, r5
 801eae6:	f280 80db 	bge.w	801eca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eaea:	1c5f      	adds	r7, r3, #1
 801eaec:	f2c0 80d8 	blt.w	801eca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eaf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	f280 80d4 	bge.w	801eca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eafa:	9311      	str	r3, [sp, #68]	; 0x44
 801eafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eafe:	930d      	str	r3, [sp, #52]	; 0x34
 801eb00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	dde3      	ble.n	801eace <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801eb06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eb08:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801eb0a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801eb0c:	141a      	asrs	r2, r3, #16
 801eb0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb10:	1400      	asrs	r0, r0, #16
 801eb12:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb16:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801eb1a:	f100 8120 	bmi.w	801ed5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801eb1e:	1c46      	adds	r6, r0, #1
 801eb20:	42b5      	cmp	r5, r6
 801eb22:	f340 811e 	ble.w	801ed62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb26:	2a00      	cmp	r2, #0
 801eb28:	f2c0 811b 	blt.w	801ed62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb2e:	1c56      	adds	r6, r2, #1
 801eb30:	42b7      	cmp	r7, r6
 801eb32:	f340 8116 	ble.w	801ed62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb36:	fb02 0005 	mla	r0, r2, r5, r0
 801eb3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801eb3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb3e:	9c08      	ldr	r4, [sp, #32]
 801eb40:	4402      	add	r2, r0
 801eb42:	5c30      	ldrb	r0, [r6, r0]
 801eb44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb48:	9014      	str	r0, [sp, #80]	; 0x50
 801eb4a:	1826      	adds	r6, r4, r0
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	f000 80f7 	beq.w	801ed40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801eb52:	f892 e001 	ldrb.w	lr, [r2, #1]
 801eb56:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb5a:	44a6      	add	lr, r4
 801eb5c:	2900      	cmp	r1, #0
 801eb5e:	f000 80f8 	beq.w	801ed52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 801eb62:	1950      	adds	r0, r2, r5
 801eb64:	5d52      	ldrb	r2, [r2, r5]
 801eb66:	7840      	ldrb	r0, [r0, #1]
 801eb68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb70:	4422      	add	r2, r4
 801eb72:	4420      	add	r0, r4
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	b289      	uxth	r1, r1
 801eb78:	fb03 fa01 	mul.w	sl, r3, r1
 801eb7c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801eb80:	011b      	lsls	r3, r3, #4
 801eb82:	b289      	uxth	r1, r1
 801eb84:	f89e c002 	ldrb.w	ip, [lr, #2]
 801eb88:	f896 b002 	ldrb.w	fp, [r6, #2]
 801eb8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801eb8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb90:	f8b7 8000 	ldrh.w	r8, [r7]
 801eb94:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 801eb98:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801eb9c:	eba3 030a 	sub.w	r3, r3, sl
 801eba0:	b29b      	uxth	r3, r3
 801eba2:	eba9 0901 	sub.w	r9, r9, r1
 801eba6:	fa1f f989 	uxth.w	r9, r9
 801ebaa:	fb03 fc0c 	mul.w	ip, r3, ip
 801ebae:	fb09 cc0b 	mla	ip, r9, fp, ip
 801ebb2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ebb6:	fb01 cc0b 	mla	ip, r1, fp, ip
 801ebba:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ebbe:	fb0a cc0b 	mla	ip, sl, fp, ip
 801ebc2:	ea4f 2b28 	mov.w	fp, r8, asr #8
 801ebc6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ebca:	fb1b fb04 	smulbb	fp, fp, r4
 801ebce:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ebd2:	fb0c bc07 	mla	ip, ip, r7, fp
 801ebd6:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ebda:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ebde:	f89e e000 	ldrb.w	lr, [lr]
 801ebe2:	435e      	muls	r6, r3
 801ebe4:	fb09 660b 	mla	r6, r9, fp, r6
 801ebe8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ebec:	fb01 660b 	mla	r6, r1, fp, r6
 801ebf0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ebf4:	fb0a 660b 	mla	r6, sl, fp, r6
 801ebf8:	ea4f 0be8 	mov.w	fp, r8, asr #3
 801ebfc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ec00:	fb1b fb04 	smulbb	fp, fp, r4
 801ec04:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ec08:	fb06 b607 	mla	r6, r6, r7, fp
 801ec0c:	b2b4      	uxth	r4, r6
 801ec0e:	9412      	str	r4, [sp, #72]	; 0x48
 801ec10:	9e08      	ldr	r6, [sp, #32]
 801ec12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ec14:	f816 b004 	ldrb.w	fp, [r6, r4]
 801ec18:	fb03 f30e 	mul.w	r3, r3, lr
 801ec1c:	f892 e000 	ldrb.w	lr, [r2]
 801ec20:	fb09 330b 	mla	r3, r9, fp, r3
 801ec24:	fb01 330e 	mla	r3, r1, lr, r3
 801ec28:	f890 e000 	ldrb.w	lr, [r0]
 801ec2c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ec30:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801ec34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec36:	fa5f f888 	uxtb.w	r8, r8
 801ec3a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec3e:	fb18 f803 	smulbb	r8, r8, r3
 801ec42:	fb0e 8807 	mla	r8, lr, r7, r8
 801ec46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ec48:	fa1f fc8c 	uxth.w	ip, ip
 801ec4c:	fa1f f888 	uxth.w	r8, r8
 801ec50:	f103 0b01 	add.w	fp, r3, #1
 801ec54:	f10c 0201 	add.w	r2, ip, #1
 801ec58:	f108 0e01 	add.w	lr, r8, #1
 801ec5c:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 801ec60:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ec64:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 801ec68:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ec6c:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 801ec70:	0976      	lsrs	r6, r6, #5
 801ec72:	ea4c 0c08 	orr.w	ip, ip, r8
 801ec76:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ec7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec7c:	ea4c 0606 	orr.w	r6, ip, r6
 801ec80:	801e      	strh	r6, [r3, #0]
 801ec82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ec86:	3302      	adds	r3, #2
 801ec88:	930d      	str	r3, [sp, #52]	; 0x34
 801ec8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec8c:	4413      	add	r3, r2
 801ec8e:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec90:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ec92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec94:	4413      	add	r3, r2
 801ec96:	932a      	str	r3, [sp, #168]	; 0xa8
 801ec98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ec9a:	3b01      	subs	r3, #1
 801ec9c:	9311      	str	r3, [sp, #68]	; 0x44
 801ec9e:	e72f      	b.n	801eb00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801eca0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eca2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eca4:	4413      	add	r3, r2
 801eca6:	9329      	str	r3, [sp, #164]	; 0xa4
 801eca8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ecaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecac:	4413      	add	r3, r2
 801ecae:	932a      	str	r3, [sp, #168]	; 0xa8
 801ecb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecb2:	3b01      	subs	r3, #1
 801ecb4:	9309      	str	r3, [sp, #36]	; 0x24
 801ecb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecb8:	3302      	adds	r3, #2
 801ecba:	930a      	str	r3, [sp, #40]	; 0x28
 801ecbc:	e6d4      	b.n	801ea68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ecbe:	f47f aee6 	bne.w	801ea8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801ecc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	f340 812b 	ble.w	801ef20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801ecca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ecce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ecd2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ecd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecd8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ecdc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ece0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ece4:	eef0 6a48 	vmov.f32	s13, s16
 801ece8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ecec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecf0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ecf4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ecf8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ecfc:	eef0 6a68 	vmov.f32	s13, s17
 801ed00:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ed04:	ee18 2a10 	vmov	r2, s16
 801ed08:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ed0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed10:	ee18 2a90 	vmov	r2, s17
 801ed14:	932b      	str	r3, [sp, #172]	; 0xac
 801ed16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed1c:	932c      	str	r3, [sp, #176]	; 0xb0
 801ed1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed22:	3b01      	subs	r3, #1
 801ed24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed28:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed2c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801ed30:	bf08      	it	eq
 801ed32:	4613      	moveq	r3, r2
 801ed34:	9309      	str	r3, [sp, #36]	; 0x24
 801ed36:	eef0 8a67 	vmov.f32	s17, s15
 801ed3a:	eeb0 8a47 	vmov.f32	s16, s14
 801ed3e:	e68c      	b.n	801ea5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ed40:	b151      	cbz	r1, 801ed58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801ed42:	5d52      	ldrb	r2, [r2, r5]
 801ed44:	9808      	ldr	r0, [sp, #32]
 801ed46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed4a:	4402      	add	r2, r0
 801ed4c:	4630      	mov	r0, r6
 801ed4e:	46b6      	mov	lr, r6
 801ed50:	e710      	b.n	801eb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ed52:	4630      	mov	r0, r6
 801ed54:	4632      	mov	r2, r6
 801ed56:	e70d      	b.n	801eb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ed58:	4630      	mov	r0, r6
 801ed5a:	4632      	mov	r2, r6
 801ed5c:	e7f7      	b.n	801ed4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 801ed5e:	1c46      	adds	r6, r0, #1
 801ed60:	d18f      	bne.n	801ec82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed62:	4285      	cmp	r5, r0
 801ed64:	dd8d      	ble.n	801ec82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed66:	1c54      	adds	r4, r2, #1
 801ed68:	db8b      	blt.n	801ec82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed6c:	4294      	cmp	r4, r2
 801ed6e:	dd88      	ble.n	801ec82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed70:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801ed74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ed76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed78:	9002      	str	r0, [sp, #8]
 801ed7a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ed7e:	e9cd 5300 	strd	r5, r3, [sp]
 801ed82:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801ed86:	9b08      	ldr	r3, [sp, #32]
 801ed88:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ed8a:	f7ff fd47 	bl	801e81c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801ed8e:	e778      	b.n	801ec82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ed92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed96:	1410      	asrs	r0, r2, #16
 801ed98:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ed9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ed9e:	1412      	asrs	r2, r2, #16
 801eda0:	fb05 2000 	mla	r0, r5, r0, r2
 801eda4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eda6:	f814 a000 	ldrb.w	sl, [r4, r0]
 801edaa:	4402      	add	r2, r0
 801edac:	9808      	ldr	r0, [sp, #32]
 801edae:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801edb2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801edb6:	eb00 060a 	add.w	r6, r0, sl
 801edba:	2b00      	cmp	r3, #0
 801edbc:	f000 80a1 	beq.w	801ef02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 801edc0:	f892 c001 	ldrb.w	ip, [r2, #1]
 801edc4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801edc8:	4484      	add	ip, r0
 801edca:	2900      	cmp	r1, #0
 801edcc:	f000 80a2 	beq.w	801ef14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801edd0:	1950      	adds	r0, r2, r5
 801edd2:	5d52      	ldrb	r2, [r2, r5]
 801edd4:	7840      	ldrb	r0, [r0, #1]
 801edd6:	9c08      	ldr	r4, [sp, #32]
 801edd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eddc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ede0:	4422      	add	r2, r4
 801ede2:	4420      	add	r0, r4
 801ede4:	b29b      	uxth	r3, r3
 801ede6:	b289      	uxth	r1, r1
 801ede8:	fb03 f901 	mul.w	r9, r3, r1
 801edec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801edf0:	011b      	lsls	r3, r3, #4
 801edf2:	b289      	uxth	r1, r1
 801edf4:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801edf8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801edfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801edfe:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801ee02:	eba3 0309 	sub.w	r3, r3, r9
 801ee06:	b29b      	uxth	r3, r3
 801ee08:	eba8 0801 	sub.w	r8, r8, r1
 801ee0c:	fa1f f888 	uxth.w	r8, r8
 801ee10:	435f      	muls	r7, r3
 801ee12:	fb08 770b 	mla	r7, r8, fp, r7
 801ee16:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ee1a:	f8b4 e000 	ldrh.w	lr, [r4]
 801ee1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ee20:	fb01 770b 	mla	r7, r1, fp, r7
 801ee24:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ee28:	fb09 770b 	mla	r7, r9, fp, r7
 801ee2c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801ee30:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ee34:	fb1b fb04 	smulbb	fp, fp, r4
 801ee38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee3a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ee3e:	fb07 b704 	mla	r7, r7, r4, fp
 801ee42:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ee46:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801ee4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ee4c:	f89c c000 	ldrb.w	ip, [ip]
 801ee50:	435e      	muls	r6, r3
 801ee52:	fb08 660b 	mla	r6, r8, fp, r6
 801ee56:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ee5a:	fb01 660b 	mla	r6, r1, fp, r6
 801ee5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ee62:	fb09 660b 	mla	r6, r9, fp, r6
 801ee66:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801ee6a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ee6e:	fb1b fb04 	smulbb	fp, fp, r4
 801ee72:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee74:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ee78:	fb06 b604 	mla	r6, r6, r4, fp
 801ee7c:	9c08      	ldr	r4, [sp, #32]
 801ee7e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801ee82:	fb03 f30c 	mul.w	r3, r3, ip
 801ee86:	f892 c000 	ldrb.w	ip, [r2]
 801ee8a:	fb08 330a 	mla	r3, r8, sl, r3
 801ee8e:	fb01 330c 	mla	r3, r1, ip, r3
 801ee92:	f890 c000 	ldrb.w	ip, [r0]
 801ee96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ee9a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ee9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eea0:	fa5f fe8e 	uxtb.w	lr, lr
 801eea4:	fb1e fe03 	smulbb	lr, lr, r3
 801eea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eeaa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801eeae:	fb0c ec03 	mla	ip, ip, r3, lr
 801eeb2:	b2bf      	uxth	r7, r7
 801eeb4:	b2b6      	uxth	r6, r6
 801eeb6:	fa1f fc8c 	uxth.w	ip, ip
 801eeba:	1c7b      	adds	r3, r7, #1
 801eebc:	f10c 0201 	add.w	r2, ip, #1
 801eec0:	f106 0b01 	add.w	fp, r6, #1
 801eec4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801eec8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801eecc:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801eed0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801eed4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eed8:	0976      	lsrs	r6, r6, #5
 801eeda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eedc:	4317      	orrs	r7, r2
 801eede:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801eee2:	4337      	orrs	r7, r6
 801eee4:	f823 7b02 	strh.w	r7, [r3], #2
 801eee8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eeea:	930d      	str	r3, [sp, #52]	; 0x34
 801eeec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eeee:	4413      	add	r3, r2
 801eef0:	9329      	str	r3, [sp, #164]	; 0xa4
 801eef2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eef4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eef6:	4413      	add	r3, r2
 801eef8:	932a      	str	r3, [sp, #168]	; 0xa8
 801eefa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eefc:	3b01      	subs	r3, #1
 801eefe:	9311      	str	r3, [sp, #68]	; 0x44
 801ef00:	e5e1      	b.n	801eac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801ef02:	b151      	cbz	r1, 801ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801ef04:	5d52      	ldrb	r2, [r2, r5]
 801ef06:	9808      	ldr	r0, [sp, #32]
 801ef08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef0c:	4402      	add	r2, r0
 801ef0e:	4630      	mov	r0, r6
 801ef10:	46b4      	mov	ip, r6
 801ef12:	e767      	b.n	801ede4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801ef14:	4630      	mov	r0, r6
 801ef16:	4632      	mov	r2, r6
 801ef18:	e764      	b.n	801ede4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801ef1a:	4630      	mov	r0, r6
 801ef1c:	4632      	mov	r2, r6
 801ef1e:	e7f7      	b.n	801ef10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 801ef20:	b017      	add	sp, #92	; 0x5c
 801ef22:	ecbd 8b08 	vpop	{d8-d11}
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ef2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef30:	880e      	ldrh	r6, [r1, #0]
 801ef32:	b085      	sub	sp, #20
 801ef34:	0230      	lsls	r0, r6, #8
 801ef36:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801ef3a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801ef3e:	0170      	lsls	r0, r6, #5
 801ef40:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ef44:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ef48:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ef4c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801ef50:	00f6      	lsls	r6, r6, #3
 801ef52:	ea4b 0000 	orr.w	r0, fp, r0
 801ef56:	b2f6      	uxtb	r6, r6
 801ef58:	4691      	mov	r9, r2
 801ef5a:	fb05 7a0c 	mla	sl, r5, ip, r7
 801ef5e:	4306      	orrs	r6, r0
 801ef60:	2d00      	cmp	r5, #0
 801ef62:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801ef66:	9603      	str	r6, [sp, #12]
 801ef68:	eb09 0e0a 	add.w	lr, r9, sl
 801ef6c:	db42      	blt.n	801eff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801ef6e:	45a8      	cmp	r8, r5
 801ef70:	dd40      	ble.n	801eff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801ef72:	2f00      	cmp	r7, #0
 801ef74:	db3c      	blt.n	801eff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801ef76:	45bc      	cmp	ip, r7
 801ef78:	dd3a      	ble.n	801eff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801ef7a:	f819 600a 	ldrb.w	r6, [r9, sl]
 801ef7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef82:	441e      	add	r6, r3
 801ef84:	1c78      	adds	r0, r7, #1
 801ef86:	d438      	bmi.n	801effa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef88:	4584      	cmp	ip, r0
 801ef8a:	dd36      	ble.n	801effa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef8c:	b3aa      	cbz	r2, 801effa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801ef8e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ef92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef96:	4418      	add	r0, r3
 801ef98:	3501      	adds	r5, #1
 801ef9a:	d432      	bmi.n	801f002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801ef9c:	45a8      	cmp	r8, r5
 801ef9e:	dd30      	ble.n	801f002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801efa0:	b37c      	cbz	r4, 801f002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801efa2:	2f00      	cmp	r7, #0
 801efa4:	db2b      	blt.n	801effe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801efa6:	45bc      	cmp	ip, r7
 801efa8:	dd29      	ble.n	801effe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801efaa:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801efae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801efb2:	441d      	add	r5, r3
 801efb4:	3701      	adds	r7, #1
 801efb6:	d427      	bmi.n	801f008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801efb8:	45bc      	cmp	ip, r7
 801efba:	dd25      	ble.n	801f008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801efbc:	b322      	cbz	r2, 801f008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801efbe:	44f4      	add	ip, lr
 801efc0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801efc4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efc8:	443b      	add	r3, r7
 801efca:	781f      	ldrb	r7, [r3, #0]
 801efcc:	f896 a000 	ldrb.w	sl, [r6]
 801efd0:	f890 b000 	ldrb.w	fp, [r0]
 801efd4:	f895 9000 	ldrb.w	r9, [r5]
 801efd8:	9700      	str	r7, [sp, #0]
 801efda:	2a0f      	cmp	r2, #15
 801efdc:	d801      	bhi.n	801efe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801efde:	2c0f      	cmp	r4, #15
 801efe0:	d914      	bls.n	801f00c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801efe2:	4b2c      	ldr	r3, [pc, #176]	; (801f094 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801efe4:	4a2c      	ldr	r2, [pc, #176]	; (801f098 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801efe6:	482d      	ldr	r0, [pc, #180]	; (801f09c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801efe8:	f240 210d 	movw	r1, #525	; 0x20d
 801efec:	f005 feea 	bl	8024dc4 <__assert_func>
 801eff0:	ae03      	add	r6, sp, #12
 801eff2:	e7c7      	b.n	801ef84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801eff4:	a803      	add	r0, sp, #12
 801eff6:	4606      	mov	r6, r0
 801eff8:	e7ce      	b.n	801ef98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801effa:	a803      	add	r0, sp, #12
 801effc:	e7cc      	b.n	801ef98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801effe:	ad03      	add	r5, sp, #12
 801f000:	e7d8      	b.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801f002:	ab03      	add	r3, sp, #12
 801f004:	461d      	mov	r5, r3
 801f006:	e7e0      	b.n	801efca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801f008:	ab03      	add	r3, sp, #12
 801f00a:	e7de      	b.n	801efca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801f00c:	b292      	uxth	r2, r2
 801f00e:	b2a4      	uxth	r4, r4
 801f010:	fb02 f804 	mul.w	r8, r2, r4
 801f014:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f018:	0112      	lsls	r2, r2, #4
 801f01a:	b2a4      	uxth	r4, r4
 801f01c:	f890 e002 	ldrb.w	lr, [r0, #2]
 801f020:	78b7      	ldrb	r7, [r6, #2]
 801f022:	7840      	ldrb	r0, [r0, #1]
 801f024:	7876      	ldrb	r6, [r6, #1]
 801f026:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801f02a:	eba2 0208 	sub.w	r2, r2, r8
 801f02e:	b292      	uxth	r2, r2
 801f030:	ebac 0c04 	sub.w	ip, ip, r4
 801f034:	fa1f fc8c 	uxth.w	ip, ip
 801f038:	fb02 fe0e 	mul.w	lr, r2, lr
 801f03c:	fb0c ee07 	mla	lr, ip, r7, lr
 801f040:	78af      	ldrb	r7, [r5, #2]
 801f042:	fb04 ee07 	mla	lr, r4, r7, lr
 801f046:	789f      	ldrb	r7, [r3, #2]
 801f048:	785b      	ldrb	r3, [r3, #1]
 801f04a:	fb08 e707 	mla	r7, r8, r7, lr
 801f04e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f052:	fb02 fe0b 	mul.w	lr, r2, fp
 801f056:	4342      	muls	r2, r0
 801f058:	7868      	ldrb	r0, [r5, #1]
 801f05a:	9701      	str	r7, [sp, #4]
 801f05c:	fb0c ee0a 	mla	lr, ip, sl, lr
 801f060:	9f00      	ldr	r7, [sp, #0]
 801f062:	fb0c 2206 	mla	r2, ip, r6, r2
 801f066:	fb04 ee09 	mla	lr, r4, r9, lr
 801f06a:	fb04 2400 	mla	r4, r4, r0, r2
 801f06e:	fb08 ee07 	mla	lr, r8, r7, lr
 801f072:	9f01      	ldr	r7, [sp, #4]
 801f074:	fb08 4803 	mla	r8, r8, r3, r4
 801f078:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f07c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f080:	ea47 070e 	orr.w	r7, r7, lr
 801f084:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f088:	ea47 0708 	orr.w	r7, r7, r8
 801f08c:	800f      	strh	r7, [r1, #0]
 801f08e:	b005      	add	sp, #20
 801f090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f094:	0805441c 	.word	0x0805441c
 801f098:	08054975 	.word	0x08054975
 801f09c:	080544a4 	.word	0x080544a4

0801f0a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a4:	ed2d 8b0a 	vpush	{d8-d12}
 801f0a8:	b091      	sub	sp, #68	; 0x44
 801f0aa:	eeb0 aa40 	vmov.f32	s20, s0
 801f0ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f0b0:	9307      	str	r3, [sp, #28]
 801f0b2:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 801f0b6:	910c      	str	r1, [sp, #48]	; 0x30
 801f0b8:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ba:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f0be:	900f      	str	r0, [sp, #60]	; 0x3c
 801f0c0:	6860      	ldr	r0, [r4, #4]
 801f0c2:	920e      	str	r2, [sp, #56]	; 0x38
 801f0c4:	fb00 1303 	mla	r3, r0, r3, r1
 801f0c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f0ca:	6821      	ldr	r1, [r4, #0]
 801f0cc:	6854      	ldr	r4, [r2, #4]
 801f0ce:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 801f0d2:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 801f0d6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f0da:	9308      	str	r3, [sp, #32]
 801f0dc:	6813      	ldr	r3, [r2, #0]
 801f0de:	930a      	str	r3, [sp, #40]	; 0x28
 801f0e0:	eef0 9a60 	vmov.f32	s19, s1
 801f0e4:	eeb0 9a41 	vmov.f32	s18, s2
 801f0e8:	eeb0 8a62 	vmov.f32	s16, s5
 801f0ec:	eef0 8a43 	vmov.f32	s17, s6
 801f0f0:	eeb0 ca44 	vmov.f32	s24, s8
 801f0f4:	eef0 ba64 	vmov.f32	s23, s9
 801f0f8:	eeb0 ba45 	vmov.f32	s22, s10
 801f0fc:	3404      	adds	r4, #4
 801f0fe:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f104:	2b00      	cmp	r3, #0
 801f106:	dc03      	bgt.n	801f110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	f340 81cb 	ble.w	801f4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f110:	9b07      	ldr	r3, [sp, #28]
 801f112:	2b00      	cmp	r3, #0
 801f114:	f340 80dd 	ble.w	801f2d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 801f118:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f11a:	1412      	asrs	r2, r2, #16
 801f11c:	ea4f 432b 	mov.w	r3, fp, asr #16
 801f120:	d42c      	bmi.n	801f17c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f122:	1c51      	adds	r1, r2, #1
 801f124:	428d      	cmp	r5, r1
 801f126:	dd2c      	ble.n	801f182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f128:	2b00      	cmp	r3, #0
 801f12a:	db2a      	blt.n	801f182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f12e:	1c59      	adds	r1, r3, #1
 801f130:	4288      	cmp	r0, r1
 801f132:	dd26      	ble.n	801f182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f134:	9b07      	ldr	r3, [sp, #28]
 801f136:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f138:	9925      	ldr	r1, [sp, #148]	; 0x94
 801f13a:	3b01      	subs	r3, #1
 801f13c:	fb02 1203 	mla	r2, r2, r3, r1
 801f140:	1412      	asrs	r2, r2, #16
 801f142:	d428      	bmi.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f144:	3201      	adds	r2, #1
 801f146:	4295      	cmp	r5, r2
 801f148:	dd25      	ble.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f14a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f14c:	fb02 b303 	mla	r3, r2, r3, fp
 801f150:	141b      	asrs	r3, r3, #16
 801f152:	d420      	bmi.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f156:	3301      	adds	r3, #1
 801f158:	429a      	cmp	r2, r3
 801f15a:	dd1c      	ble.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f15c:	9b07      	ldr	r3, [sp, #28]
 801f15e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f160:	9b08      	ldr	r3, [sp, #32]
 801f162:	930d      	str	r3, [sp, #52]	; 0x34
 801f164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f166:	2b00      	cmp	r3, #0
 801f168:	f300 8116 	bgt.w	801f398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801f16c:	9b07      	ldr	r3, [sp, #28]
 801f16e:	9a08      	ldr	r2, [sp, #32]
 801f170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f174:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f178:	9308      	str	r3, [sp, #32]
 801f17a:	e0ac      	b.n	801f2d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801f17c:	1c51      	adds	r1, r2, #1
 801f17e:	f040 809b 	bne.w	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f182:	42aa      	cmp	r2, r5
 801f184:	f280 8098 	bge.w	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f188:	1c5a      	adds	r2, r3, #1
 801f18a:	f2c0 8095 	blt.w	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f190:	4293      	cmp	r3, r2
 801f192:	f280 8091 	bge.w	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f196:	9b07      	ldr	r3, [sp, #28]
 801f198:	930d      	str	r3, [sp, #52]	; 0x34
 801f19a:	9b08      	ldr	r3, [sp, #32]
 801f19c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	dde3      	ble.n	801f16c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f1a4:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f1a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1a8:	1400      	asrs	r0, r0, #16
 801f1aa:	ea4f 422b 	mov.w	r2, fp, asr #16
 801f1ae:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f1b2:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801f1b6:	f100 80d9 	bmi.w	801f36c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f1ba:	1c46      	adds	r6, r0, #1
 801f1bc:	42b5      	cmp	r5, r6
 801f1be:	f340 80d7 	ble.w	801f370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f1c2:	2a00      	cmp	r2, #0
 801f1c4:	f2c0 80d4 	blt.w	801f370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f1c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f1ca:	1c56      	adds	r6, r2, #1
 801f1cc:	42b7      	cmp	r7, r6
 801f1ce:	f340 80cf 	ble.w	801f370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f1d2:	fb02 0005 	mla	r0, r2, r5, r0
 801f1d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f1d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f1da:	4402      	add	r2, r0
 801f1dc:	5c30      	ldrb	r0, [r6, r0]
 801f1de:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f1e2:	eb04 0c08 	add.w	ip, r4, r8
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	f000 80b2 	beq.w	801f350 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f1ec:	7856      	ldrb	r6, [r2, #1]
 801f1ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f1f2:	4426      	add	r6, r4
 801f1f4:	2900      	cmp	r1, #0
 801f1f6:	f000 80b3 	beq.w	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801f1fa:	1950      	adds	r0, r2, r5
 801f1fc:	5d52      	ldrb	r2, [r2, r5]
 801f1fe:	7840      	ldrb	r0, [r0, #1]
 801f200:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f204:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f208:	4422      	add	r2, r4
 801f20a:	4420      	add	r0, r4
 801f20c:	b29b      	uxth	r3, r3
 801f20e:	b289      	uxth	r1, r1
 801f210:	fb03 f901 	mul.w	r9, r3, r1
 801f214:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f218:	011b      	lsls	r3, r3, #4
 801f21a:	b289      	uxth	r1, r1
 801f21c:	78b7      	ldrb	r7, [r6, #2]
 801f21e:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f222:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f226:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f22a:	eba3 0309 	sub.w	r3, r3, r9
 801f22e:	b29b      	uxth	r3, r3
 801f230:	ebae 0e01 	sub.w	lr, lr, r1
 801f234:	fa1f fe8e 	uxth.w	lr, lr
 801f238:	435f      	muls	r7, r3
 801f23a:	fb0e 770a 	mla	r7, lr, sl, r7
 801f23e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f242:	fb01 770a 	mla	r7, r1, sl, r7
 801f246:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f24a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f24e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f252:	f896 8000 	ldrb.w	r8, [r6]
 801f256:	7876      	ldrb	r6, [r6, #1]
 801f258:	fb03 f808 	mul.w	r8, r3, r8
 801f25c:	fb0e 8807 	mla	r8, lr, r7, r8
 801f260:	7817      	ldrb	r7, [r2, #0]
 801f262:	fb01 8807 	mla	r8, r1, r7, r8
 801f266:	7807      	ldrb	r7, [r0, #0]
 801f268:	fb09 8707 	mla	r7, r9, r7, r8
 801f26c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f270:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f274:	ea4a 0707 	orr.w	r7, sl, r7
 801f278:	4373      	muls	r3, r6
 801f27a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f27e:	fb0e 330c 	mla	r3, lr, ip, r3
 801f282:	fb01 310a 	mla	r1, r1, sl, r3
 801f286:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f28c:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f290:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f294:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f298:	ea47 070a 	orr.w	r7, r7, sl
 801f29c:	801f      	strh	r7, [r3, #0]
 801f29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f2a2:	3302      	adds	r3, #2
 801f2a4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f2a8:	4413      	add	r3, r2
 801f2aa:	9325      	str	r3, [sp, #148]	; 0x94
 801f2ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2ae:	449b      	add	fp, r3
 801f2b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2b2:	3b01      	subs	r3, #1
 801f2b4:	930d      	str	r3, [sp, #52]	; 0x34
 801f2b6:	e772      	b.n	801f19e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f2b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f2ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f2bc:	4413      	add	r3, r2
 801f2be:	9325      	str	r3, [sp, #148]	; 0x94
 801f2c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2c2:	449b      	add	fp, r3
 801f2c4:	9b07      	ldr	r3, [sp, #28]
 801f2c6:	3b01      	subs	r3, #1
 801f2c8:	9307      	str	r3, [sp, #28]
 801f2ca:	9b08      	ldr	r3, [sp, #32]
 801f2cc:	3302      	adds	r3, #2
 801f2ce:	9308      	str	r3, [sp, #32]
 801f2d0:	e71e      	b.n	801f110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f2d2:	f47f af2f 	bne.w	801f134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	f340 80e4 	ble.w	801f4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f2de:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f2e2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f2e6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f2ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f2ec:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f2f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2f4:	eef0 6a48 	vmov.f32	s13, s16
 801f2f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f300:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f304:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801f308:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f30c:	eef0 6a68 	vmov.f32	s13, s17
 801f310:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f314:	ee18 2a10 	vmov	r2, s16
 801f318:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f31c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f320:	ee18 2a90 	vmov	r2, s17
 801f324:	9327      	str	r3, [sp, #156]	; 0x9c
 801f326:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f328:	fb92 f3f3 	sdiv	r3, r2, r3
 801f32c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f332:	3b01      	subs	r3, #1
 801f334:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f338:	930c      	str	r3, [sp, #48]	; 0x30
 801f33a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f33c:	bf08      	it	eq
 801f33e:	4613      	moveq	r3, r2
 801f340:	ee16 ba90 	vmov	fp, s13
 801f344:	9307      	str	r3, [sp, #28]
 801f346:	eef0 8a67 	vmov.f32	s17, s15
 801f34a:	eeb0 8a47 	vmov.f32	s16, s14
 801f34e:	e6d8      	b.n	801f102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801f350:	b149      	cbz	r1, 801f366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f352:	5d52      	ldrb	r2, [r2, r5]
 801f354:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f358:	4422      	add	r2, r4
 801f35a:	4660      	mov	r0, ip
 801f35c:	4666      	mov	r6, ip
 801f35e:	e755      	b.n	801f20c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801f360:	4660      	mov	r0, ip
 801f362:	4662      	mov	r2, ip
 801f364:	e752      	b.n	801f20c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801f366:	4660      	mov	r0, ip
 801f368:	4662      	mov	r2, ip
 801f36a:	e7f7      	b.n	801f35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801f36c:	1c47      	adds	r7, r0, #1
 801f36e:	d196      	bne.n	801f29e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f370:	4285      	cmp	r5, r0
 801f372:	dd94      	ble.n	801f29e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f374:	1c56      	adds	r6, r2, #1
 801f376:	db92      	blt.n	801f29e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f378:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f37a:	4296      	cmp	r6, r2
 801f37c:	dd8f      	ble.n	801f29e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f37e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f382:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f386:	e9cd 5600 	strd	r5, r6, [sp]
 801f38a:	4623      	mov	r3, r4
 801f38c:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 801f390:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f392:	f7ff fdcb 	bl	801ef2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801f396:	e782      	b.n	801f29e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f398:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f39a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f39c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f39e:	1412      	asrs	r2, r2, #16
 801f3a0:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f3a4:	fb05 2000 	mla	r0, r5, r0, r2
 801f3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3aa:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f3ae:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f3b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f3b6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801f3ba:	4402      	add	r2, r0
 801f3bc:	eb04 0c08 	add.w	ip, r4, r8
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d062      	beq.n	801f48a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 801f3c4:	7856      	ldrb	r6, [r2, #1]
 801f3c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f3ca:	4426      	add	r6, r4
 801f3cc:	2900      	cmp	r1, #0
 801f3ce:	d064      	beq.n	801f49a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801f3d0:	1950      	adds	r0, r2, r5
 801f3d2:	5d52      	ldrb	r2, [r2, r5]
 801f3d4:	7840      	ldrb	r0, [r0, #1]
 801f3d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f3da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3de:	4422      	add	r2, r4
 801f3e0:	4420      	add	r0, r4
 801f3e2:	b29b      	uxth	r3, r3
 801f3e4:	b289      	uxth	r1, r1
 801f3e6:	fb03 f901 	mul.w	r9, r3, r1
 801f3ea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f3ee:	011b      	lsls	r3, r3, #4
 801f3f0:	b289      	uxth	r1, r1
 801f3f2:	78b7      	ldrb	r7, [r6, #2]
 801f3f4:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f3f8:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f3fc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f400:	eba3 0309 	sub.w	r3, r3, r9
 801f404:	b29b      	uxth	r3, r3
 801f406:	ebae 0e01 	sub.w	lr, lr, r1
 801f40a:	fa1f fe8e 	uxth.w	lr, lr
 801f40e:	435f      	muls	r7, r3
 801f410:	fb0e 770a 	mla	r7, lr, sl, r7
 801f414:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f418:	fb01 770a 	mla	r7, r1, sl, r7
 801f41c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f420:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f424:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f428:	f896 8000 	ldrb.w	r8, [r6]
 801f42c:	7876      	ldrb	r6, [r6, #1]
 801f42e:	fb03 f808 	mul.w	r8, r3, r8
 801f432:	fb0e 8807 	mla	r8, lr, r7, r8
 801f436:	7817      	ldrb	r7, [r2, #0]
 801f438:	fb01 8807 	mla	r8, r1, r7, r8
 801f43c:	7807      	ldrb	r7, [r0, #0]
 801f43e:	fb09 8707 	mla	r7, r9, r7, r8
 801f442:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f446:	4373      	muls	r3, r6
 801f448:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f44c:	7856      	ldrb	r6, [r2, #1]
 801f44e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f450:	ea4a 0707 	orr.w	r7, sl, r7
 801f454:	fb0e 330c 	mla	r3, lr, ip, r3
 801f458:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f45c:	fb01 3306 	mla	r3, r1, r6, r3
 801f460:	fb09 3a0a 	mla	sl, r9, sl, r3
 801f464:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f46a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f46e:	ea47 070a 	orr.w	r7, r7, sl
 801f472:	f823 7b02 	strh.w	r7, [r3], #2
 801f476:	930d      	str	r3, [sp, #52]	; 0x34
 801f478:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f47a:	4413      	add	r3, r2
 801f47c:	9325      	str	r3, [sp, #148]	; 0x94
 801f47e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f480:	449b      	add	fp, r3
 801f482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f484:	3b01      	subs	r3, #1
 801f486:	930b      	str	r3, [sp, #44]	; 0x2c
 801f488:	e66c      	b.n	801f164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801f48a:	b149      	cbz	r1, 801f4a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 801f48c:	5d52      	ldrb	r2, [r2, r5]
 801f48e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f492:	4422      	add	r2, r4
 801f494:	4660      	mov	r0, ip
 801f496:	4666      	mov	r6, ip
 801f498:	e7a3      	b.n	801f3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f49a:	4660      	mov	r0, ip
 801f49c:	4662      	mov	r2, ip
 801f49e:	e7a0      	b.n	801f3e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f4a0:	4660      	mov	r0, ip
 801f4a2:	4662      	mov	r2, ip
 801f4a4:	e7f7      	b.n	801f496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f4a6:	b011      	add	sp, #68	; 0x44
 801f4a8:	ecbd 8b0a 	vpop	{d8-d12}
 801f4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4b4:	8808      	ldrh	r0, [r1, #0]
 801f4b6:	b085      	sub	sp, #20
 801f4b8:	1206      	asrs	r6, r0, #8
 801f4ba:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f4be:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f4c2:	9600      	str	r6, [sp, #0]
 801f4c4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f4c8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f4cc:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f4d0:	10c6      	asrs	r6, r0, #3
 801f4d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f4d6:	9601      	str	r6, [sp, #4]
 801f4d8:	00c0      	lsls	r0, r0, #3
 801f4da:	fb04 560c 	mla	r6, r4, ip, r5
 801f4de:	b2c0      	uxtb	r0, r0
 801f4e0:	4692      	mov	sl, r2
 801f4e2:	eb02 0e06 	add.w	lr, r2, r6
 801f4e6:	9a00      	ldr	r2, [sp, #0]
 801f4e8:	9002      	str	r0, [sp, #8]
 801f4ea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f4ee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f4f2:	9a01      	ldr	r2, [sp, #4]
 801f4f4:	2c00      	cmp	r4, #0
 801f4f6:	4698      	mov	r8, r3
 801f4f8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f4fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f500:	db3e      	blt.n	801f580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f502:	45a1      	cmp	r9, r4
 801f504:	dd3c      	ble.n	801f580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f506:	2d00      	cmp	r5, #0
 801f508:	db38      	blt.n	801f57c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801f50a:	45ac      	cmp	ip, r5
 801f50c:	dd36      	ble.n	801f57c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801f50e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801f512:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801f516:	1c6e      	adds	r6, r5, #1
 801f518:	d435      	bmi.n	801f586 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f51a:	45b4      	cmp	ip, r6
 801f51c:	dd33      	ble.n	801f586 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f51e:	b393      	cbz	r3, 801f586 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f520:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f524:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801f528:	3401      	adds	r4, #1
 801f52a:	d430      	bmi.n	801f58e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f52c:	45a1      	cmp	r9, r4
 801f52e:	dd2e      	ble.n	801f58e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f530:	b36f      	cbz	r7, 801f58e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f532:	2d00      	cmp	r5, #0
 801f534:	db29      	blt.n	801f58a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801f536:	45ac      	cmp	ip, r5
 801f538:	dd27      	ble.n	801f58a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801f53a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f53e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801f542:	3501      	adds	r5, #1
 801f544:	d407      	bmi.n	801f556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f546:	45ac      	cmp	ip, r5
 801f548:	dd05      	ble.n	801f556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f54a:	b123      	cbz	r3, 801f556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f54c:	44f4      	add	ip, lr
 801f54e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f552:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801f556:	2b0f      	cmp	r3, #15
 801f558:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f55c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f560:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f564:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f568:	d801      	bhi.n	801f56e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801f56a:	2f0f      	cmp	r7, #15
 801f56c:	d911      	bls.n	801f592 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801f56e:	4b7f      	ldr	r3, [pc, #508]	; (801f76c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 801f570:	4a7f      	ldr	r2, [pc, #508]	; (801f770 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 801f572:	4880      	ldr	r0, [pc, #512]	; (801f774 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801f574:	f240 210d 	movw	r1, #525	; 0x20d
 801f578:	f005 fc24 	bl	8024dc4 <__assert_func>
 801f57c:	4602      	mov	r2, r0
 801f57e:	e7ca      	b.n	801f516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 801f580:	4606      	mov	r6, r0
 801f582:	4602      	mov	r2, r0
 801f584:	e7d0      	b.n	801f528 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801f586:	4606      	mov	r6, r0
 801f588:	e7ce      	b.n	801f528 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801f58a:	4604      	mov	r4, r0
 801f58c:	e7d9      	b.n	801f542 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801f58e:	4604      	mov	r4, r0
 801f590:	e7e1      	b.n	801f556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f592:	b29b      	uxth	r3, r3
 801f594:	b2bf      	uxth	r7, r7
 801f596:	fb03 fe07 	mul.w	lr, r3, r7
 801f59a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f59e:	011b      	lsls	r3, r3, #4
 801f5a0:	eba3 0c0e 	sub.w	ip, r3, lr
 801f5a4:	b2bf      	uxth	r7, r7
 801f5a6:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f5aa:	fa1f fc8c 	uxth.w	ip, ip
 801f5ae:	1bed      	subs	r5, r5, r7
 801f5b0:	b2ad      	uxth	r5, r5
 801f5b2:	fb0c f30a 	mul.w	r3, ip, sl
 801f5b6:	fb05 330b 	mla	r3, r5, fp, r3
 801f5ba:	fb07 3309 	mla	r3, r7, r9, r3
 801f5be:	fb0e 3308 	mla	r3, lr, r8, r3
 801f5c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f5c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f5ca:	9303      	str	r3, [sp, #12]
 801f5cc:	d018      	beq.n	801f600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 801f5ce:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f5d2:	fb0b f303 	mul.w	r3, fp, r3
 801f5d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f5da:	fb0b fb02 	mul.w	fp, fp, r2
 801f5de:	0a1a      	lsrs	r2, r3, #8
 801f5e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5e4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f5e8:	441a      	add	r2, r3
 801f5ea:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f5ee:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f5f2:	0a12      	lsrs	r2, r2, #8
 801f5f4:	0a1b      	lsrs	r3, r3, #8
 801f5f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f5fe:	431a      	orrs	r2, r3
 801f600:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f604:	d019      	beq.n	801f63a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 801f606:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f60a:	fb0a fb0b 	mul.w	fp, sl, fp
 801f60e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f612:	fb0a fa06 	mul.w	sl, sl, r6
 801f616:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f61a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f61e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f622:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f626:	445e      	add	r6, fp
 801f628:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f62c:	0a36      	lsrs	r6, r6, #8
 801f62e:	0a1b      	lsrs	r3, r3, #8
 801f630:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f638:	431e      	orrs	r6, r3
 801f63a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f63e:	d019      	beq.n	801f674 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 801f640:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f644:	fb09 fa0a 	mul.w	sl, r9, sl
 801f648:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f64c:	fb09 f904 	mul.w	r9, r9, r4
 801f650:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f654:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f658:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f65c:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f660:	4454      	add	r4, sl
 801f662:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f666:	0a24      	lsrs	r4, r4, #8
 801f668:	0a1b      	lsrs	r3, r3, #8
 801f66a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f66e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f672:	431c      	orrs	r4, r3
 801f674:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f678:	d019      	beq.n	801f6ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801f67a:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f67e:	fb08 f909 	mul.w	r9, r8, r9
 801f682:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f686:	fb08 f800 	mul.w	r8, r8, r0
 801f68a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f68e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f692:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f696:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f69a:	4448      	add	r0, r9
 801f69c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f6a0:	0a00      	lsrs	r0, r0, #8
 801f6a2:	0a1b      	lsrs	r3, r3, #8
 801f6a4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f6a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6ac:	4318      	orrs	r0, r3
 801f6ae:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f6b2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f6b6:	fb0c f808 	mul.w	r8, ip, r8
 801f6ba:	fb05 8803 	mla	r8, r5, r3, r8
 801f6be:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f6c2:	fb07 8803 	mla	r8, r7, r3, r8
 801f6c6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f6ca:	fb0e 8303 	mla	r3, lr, r3, r8
 801f6ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f6d2:	fb0c f606 	mul.w	r6, ip, r6
 801f6d6:	0a1b      	lsrs	r3, r3, #8
 801f6d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f6dc:	fb05 6202 	mla	r2, r5, r2, r6
 801f6e0:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f6e4:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f6e8:	fb07 2703 	mla	r7, r7, r3, r2
 801f6ec:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f6f0:	b295      	uxth	r5, r2
 801f6f2:	9a03      	ldr	r2, [sp, #12]
 801f6f4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f6f8:	436a      	muls	r2, r5
 801f6fa:	fb0e 7303 	mla	r3, lr, r3, r7
 801f6fe:	1c50      	adds	r0, r2, #1
 801f700:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f704:	0a1b      	lsrs	r3, r3, #8
 801f706:	9a00      	ldr	r2, [sp, #0]
 801f708:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f70c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f710:	ea48 0303 	orr.w	r3, r8, r3
 801f714:	b2c0      	uxtb	r0, r0
 801f716:	fb12 f200 	smulbb	r2, r2, r0
 801f71a:	0c1e      	lsrs	r6, r3, #16
 801f71c:	fb06 2605 	mla	r6, r6, r5, r2
 801f720:	9a01      	ldr	r2, [sp, #4]
 801f722:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801f726:	fb12 f200 	smulbb	r2, r2, r0
 801f72a:	fb04 2205 	mla	r2, r4, r5, r2
 801f72e:	b294      	uxth	r4, r2
 801f730:	9a02      	ldr	r2, [sp, #8]
 801f732:	b2db      	uxtb	r3, r3
 801f734:	fb12 f200 	smulbb	r2, r2, r0
 801f738:	fb03 2205 	mla	r2, r3, r5, r2
 801f73c:	b2b6      	uxth	r6, r6
 801f73e:	b292      	uxth	r2, r2
 801f740:	1c73      	adds	r3, r6, #1
 801f742:	1c50      	adds	r0, r2, #1
 801f744:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801f748:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f74c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f750:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f754:	4313      	orrs	r3, r2
 801f756:	1c62      	adds	r2, r4, #1
 801f758:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f75c:	0952      	lsrs	r2, r2, #5
 801f75e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f762:	4313      	orrs	r3, r2
 801f764:	800b      	strh	r3, [r1, #0]
 801f766:	b005      	add	sp, #20
 801f768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f76c:	0805441c 	.word	0x0805441c
 801f770:	08054975 	.word	0x08054975
 801f774:	080544a4 	.word	0x080544a4

0801f778 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f77c:	ed2d 8b08 	vpush	{d8-d11}
 801f780:	b09b      	sub	sp, #108	; 0x6c
 801f782:	eeb0 aa40 	vmov.f32	s20, s0
 801f786:	9309      	str	r3, [sp, #36]	; 0x24
 801f788:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f78c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f78e:	9311      	str	r3, [sp, #68]	; 0x44
 801f790:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f794:	9114      	str	r1, [sp, #80]	; 0x50
 801f796:	9317      	str	r3, [sp, #92]	; 0x5c
 801f798:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f79c:	9019      	str	r0, [sp, #100]	; 0x64
 801f79e:	6868      	ldr	r0, [r5, #4]
 801f7a0:	9218      	str	r2, [sp, #96]	; 0x60
 801f7a2:	fb00 1303 	mla	r3, r0, r3, r1
 801f7a6:	6829      	ldr	r1, [r5, #0]
 801f7a8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f7aa:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f7ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f7b2:	930c      	str	r3, [sp, #48]	; 0x30
 801f7b4:	6813      	ldr	r3, [r2, #0]
 801f7b6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f7b8:	6853      	ldr	r3, [r2, #4]
 801f7ba:	3304      	adds	r3, #4
 801f7bc:	eef0 9a60 	vmov.f32	s19, s1
 801f7c0:	eeb0 9a41 	vmov.f32	s18, s2
 801f7c4:	eeb0 8a62 	vmov.f32	s16, s5
 801f7c8:	eef0 8a43 	vmov.f32	s17, s6
 801f7cc:	eef0 ba44 	vmov.f32	s23, s8
 801f7d0:	eeb0 ba64 	vmov.f32	s22, s9
 801f7d4:	eef0 aa45 	vmov.f32	s21, s10
 801f7d8:	9308      	str	r3, [sp, #32]
 801f7da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	dc03      	bgt.n	801f7e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f7e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	f340 8363 	ble.w	801feae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801f7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	f340 81ad 	ble.w	801fb4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 801f7f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f7f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f7f4:	1412      	asrs	r2, r2, #16
 801f7f6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f7fa:	d42f      	bmi.n	801f85c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f7fc:	1c51      	adds	r1, r2, #1
 801f7fe:	428c      	cmp	r4, r1
 801f800:	dd2f      	ble.n	801f862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f802:	2b00      	cmp	r3, #0
 801f804:	db2d      	blt.n	801f862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f806:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f808:	1c59      	adds	r1, r3, #1
 801f80a:	4288      	cmp	r0, r1
 801f80c:	dd29      	ble.n	801f862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f810:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f812:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f814:	3b01      	subs	r3, #1
 801f816:	fb02 1203 	mla	r2, r2, r3, r1
 801f81a:	1412      	asrs	r2, r2, #16
 801f81c:	d42b      	bmi.n	801f876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f81e:	3201      	adds	r2, #1
 801f820:	4294      	cmp	r4, r2
 801f822:	dd28      	ble.n	801f876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f824:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f826:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f828:	fb02 1303 	mla	r3, r2, r3, r1
 801f82c:	141b      	asrs	r3, r3, #16
 801f82e:	d422      	bmi.n	801f876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f832:	3301      	adds	r3, #1
 801f834:	429a      	cmp	r2, r3
 801f836:	dd1e      	ble.n	801f876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f83a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f83e:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f842:	9312      	str	r3, [sp, #72]	; 0x48
 801f844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f846:	2b00      	cmp	r3, #0
 801f848:	f300 81ea 	bgt.w	801fc20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 801f84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f854:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f858:	930c      	str	r3, [sp, #48]	; 0x30
 801f85a:	e178      	b.n	801fb4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 801f85c:	1c51      	adds	r1, r2, #1
 801f85e:	f040 8165 	bne.w	801fb2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f862:	42a2      	cmp	r2, r4
 801f864:	f280 8162 	bge.w	801fb2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f868:	1c5f      	adds	r7, r3, #1
 801f86a:	f2c0 815f 	blt.w	801fb2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f86e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f870:	4293      	cmp	r3, r2
 801f872:	f280 815b 	bge.w	801fb2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f878:	9316      	str	r3, [sp, #88]	; 0x58
 801f87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f87c:	9312      	str	r3, [sp, #72]	; 0x48
 801f87e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f882:	9315      	str	r3, [sp, #84]	; 0x54
 801f884:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f886:	2b00      	cmp	r3, #0
 801f888:	dde0      	ble.n	801f84c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f88a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f88c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f88e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f892:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f894:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f898:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f89a:	1412      	asrs	r2, r2, #16
 801f89c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f8a0:	f100 81a5 	bmi.w	801fbee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 801f8a4:	1c55      	adds	r5, r2, #1
 801f8a6:	42ac      	cmp	r4, r5
 801f8a8:	f340 81a3 	ble.w	801fbf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	f2c0 81a0 	blt.w	801fbf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f8b2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801f8b4:	1c5d      	adds	r5, r3, #1
 801f8b6:	42af      	cmp	r7, r5
 801f8b8:	f340 819b 	ble.w	801fbf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f8bc:	fb03 2304 	mla	r3, r3, r4, r2
 801f8c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f8c2:	18d5      	adds	r5, r2, r3
 801f8c4:	5cd3      	ldrb	r3, [r2, r3]
 801f8c6:	9a08      	ldr	r2, [sp, #32]
 801f8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f8cc:	0e1f      	lsrs	r7, r3, #24
 801f8ce:	2800      	cmp	r0, #0
 801f8d0:	f000 817c 	beq.w	801fbcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801f8d4:	786a      	ldrb	r2, [r5, #1]
 801f8d6:	9e08      	ldr	r6, [sp, #32]
 801f8d8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f8dc:	920d      	str	r2, [sp, #52]	; 0x34
 801f8de:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f8e2:	2900      	cmp	r1, #0
 801f8e4:	f000 817d 	beq.w	801fbe2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 801f8e8:	192a      	adds	r2, r5, r4
 801f8ea:	5d2d      	ldrb	r5, [r5, r4]
 801f8ec:	7852      	ldrb	r2, [r2, #1]
 801f8ee:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f8f2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f8f6:	950a      	str	r5, [sp, #40]	; 0x28
 801f8f8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f8fc:	920e      	str	r2, [sp, #56]	; 0x38
 801f8fe:	0e15      	lsrs	r5, r2, #24
 801f900:	b280      	uxth	r0, r0
 801f902:	b289      	uxth	r1, r1
 801f904:	fb00 fa01 	mul.w	sl, r0, r1
 801f908:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f90c:	0100      	lsls	r0, r0, #4
 801f90e:	eba0 080a 	sub.w	r8, r0, sl
 801f912:	b289      	uxth	r1, r1
 801f914:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f918:	fa1f f888 	uxth.w	r8, r8
 801f91c:	1a52      	subs	r2, r2, r1
 801f91e:	b292      	uxth	r2, r2
 801f920:	fb08 f00e 	mul.w	r0, r8, lr
 801f924:	fb02 0007 	mla	r0, r2, r7, r0
 801f928:	fb01 0009 	mla	r0, r1, r9, r0
 801f92c:	fb0a 0005 	mla	r0, sl, r5, r0
 801f930:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f934:	2800      	cmp	r0, #0
 801f936:	f000 80ea 	beq.w	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f93a:	2fff      	cmp	r7, #255	; 0xff
 801f93c:	d01a      	beq.n	801f974 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 801f93e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f942:	fb07 fc0c 	mul.w	ip, r7, ip
 801f946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f94a:	435f      	muls	r7, r3
 801f94c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f950:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f954:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f958:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f95c:	4463      	add	r3, ip
 801f95e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f962:	0a1b      	lsrs	r3, r3, #8
 801f964:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f968:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f96c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f970:	ea43 030b 	orr.w	r3, r3, fp
 801f974:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f978:	d01e      	beq.n	801f9b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f97a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f97c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f980:	fb0e fb0b 	mul.w	fp, lr, fp
 801f984:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801f988:	fb0e fe07 	mul.w	lr, lr, r7
 801f98c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f990:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f994:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f998:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f99c:	44dc      	add	ip, fp
 801f99e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f9a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9ae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f9b2:	ea4c 060e 	orr.w	r6, ip, lr
 801f9b6:	960d      	str	r6, [sp, #52]	; 0x34
 801f9b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f9bc:	d01e      	beq.n	801f9fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801f9be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f9c0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801f9c4:	fb09 fe0e 	mul.w	lr, r9, lr
 801f9c8:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801f9cc:	fb09 f907 	mul.w	r9, r9, r7
 801f9d0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f9d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9d8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f9dc:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f9e0:	44f4      	add	ip, lr
 801f9e2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f9e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f9ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f9f6:	ea4c 0609 	orr.w	r6, ip, r9
 801f9fa:	960a      	str	r6, [sp, #40]	; 0x28
 801f9fc:	2dff      	cmp	r5, #255	; 0xff
 801f9fe:	d01c      	beq.n	801fa3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801fa00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801fa02:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801fa06:	fb05 fe0e 	mul.w	lr, r5, lr
 801fa0a:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801fa0e:	437d      	muls	r5, r7
 801fa10:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa18:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa1c:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801fa20:	44f4      	add	ip, lr
 801fa22:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801fa26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa2a:	0a2d      	lsrs	r5, r5, #8
 801fa2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa30:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fa34:	ea4c 0505 	orr.w	r5, ip, r5
 801fa38:	950e      	str	r5, [sp, #56]	; 0x38
 801fa3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fa3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fa3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fa42:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fa46:	fb08 f505 	mul.w	r5, r8, r5
 801fa4a:	fb02 5507 	mla	r5, r2, r7, r5
 801fa4e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801fa52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801fa54:	fb01 5507 	mla	r5, r1, r7, r5
 801fa58:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801fa5c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801fa5e:	fb0a 5507 	mla	r5, sl, r7, r5
 801fa62:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801fa66:	fb08 f807 	mul.w	r8, r8, r7
 801fa6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa6e:	fb02 8303 	mla	r3, r2, r3, r8
 801fa72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa74:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801fa76:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fa7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa7c:	fb01 330c 	mla	r3, r1, ip, r3
 801fa80:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801fa84:	fb0a 3a01 	mla	sl, sl, r1, r3
 801fa88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fa8c:	881f      	ldrh	r7, [r3, #0]
 801fa8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fa90:	0a2d      	lsrs	r5, r5, #8
 801fa92:	4343      	muls	r3, r0
 801fa94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa98:	1c58      	adds	r0, r3, #1
 801fa9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fa9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801faa2:	ea45 050a 	orr.w	r5, r5, sl
 801faa6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801faaa:	0c29      	lsrs	r1, r5, #16
 801faac:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fab0:	123b      	asrs	r3, r7, #8
 801fab2:	b2c0      	uxtb	r0, r0
 801fab4:	fb11 f102 	smulbb	r1, r1, r2
 801fab8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801fabc:	fb03 1300 	mla	r3, r3, r0, r1
 801fac0:	b299      	uxth	r1, r3
 801fac2:	10fa      	asrs	r2, r7, #3
 801fac4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fac8:	fb13 f306 	smulbb	r3, r3, r6
 801facc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fad0:	fb02 3200 	mla	r2, r2, r0, r3
 801fad4:	b2ed      	uxtb	r5, r5
 801fad6:	00fb      	lsls	r3, r7, #3
 801fad8:	b2db      	uxtb	r3, r3
 801fada:	fb15 f506 	smulbb	r5, r5, r6
 801fade:	fb03 5500 	mla	r5, r3, r0, r5
 801fae2:	b292      	uxth	r2, r2
 801fae4:	b2ad      	uxth	r5, r5
 801fae6:	1c4b      	adds	r3, r1, #1
 801fae8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801faec:	1c68      	adds	r0, r5, #1
 801faee:	1c51      	adds	r1, r2, #1
 801faf0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801faf4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801faf8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fafc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fb00:	0952      	lsrs	r2, r2, #5
 801fb02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb06:	432b      	orrs	r3, r5
 801fb08:	4313      	orrs	r3, r2
 801fb0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb0c:	8013      	strh	r3, [r2, #0]
 801fb0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb10:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb12:	3302      	adds	r3, #2
 801fb14:	9312      	str	r3, [sp, #72]	; 0x48
 801fb16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb18:	4413      	add	r3, r2
 801fb1a:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb1c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb20:	4413      	add	r3, r2
 801fb22:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fb26:	3b01      	subs	r3, #1
 801fb28:	9316      	str	r3, [sp, #88]	; 0x58
 801fb2a:	e6ab      	b.n	801f884 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fb2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb2e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb30:	4413      	add	r3, r2
 801fb32:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb34:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb38:	4413      	add	r3, r2
 801fb3a:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb3e:	3b01      	subs	r3, #1
 801fb40:	9309      	str	r3, [sp, #36]	; 0x24
 801fb42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb44:	3302      	adds	r3, #2
 801fb46:	930c      	str	r3, [sp, #48]	; 0x30
 801fb48:	e64e      	b.n	801f7e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fb4a:	f47f ae60 	bne.w	801f80e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801fb4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	f340 81ac 	ble.w	801feae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801fb56:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fb5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb5e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fb62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fb64:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fb68:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fb6c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fb70:	eef0 6a48 	vmov.f32	s13, s16
 801fb74:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb7c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb80:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801fb84:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fb88:	eef0 6a68 	vmov.f32	s13, s17
 801fb8c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fb90:	ee18 2a10 	vmov	r2, s16
 801fb94:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fb98:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb9c:	ee18 2a90 	vmov	r2, s17
 801fba0:	932f      	str	r3, [sp, #188]	; 0xbc
 801fba2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fba4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fba8:	9330      	str	r3, [sp, #192]	; 0xc0
 801fbaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fbac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fbae:	3b01      	subs	r3, #1
 801fbb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbb4:	9314      	str	r3, [sp, #80]	; 0x50
 801fbb6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbb8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801fbbc:	bf08      	it	eq
 801fbbe:	4613      	moveq	r3, r2
 801fbc0:	9309      	str	r3, [sp, #36]	; 0x24
 801fbc2:	eef0 8a67 	vmov.f32	s17, s15
 801fbc6:	eeb0 8a47 	vmov.f32	s16, s14
 801fbca:	e606      	b.n	801f7da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801fbcc:	b161      	cbz	r1, 801fbe8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801fbce:	5d2a      	ldrb	r2, [r5, r4]
 801fbd0:	9d08      	ldr	r5, [sp, #32]
 801fbd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fbd6:	920a      	str	r2, [sp, #40]	; 0x28
 801fbd8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fbdc:	25ff      	movs	r5, #255	; 0xff
 801fbde:	46ae      	mov	lr, r5
 801fbe0:	e68e      	b.n	801f900 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801fbe2:	25ff      	movs	r5, #255	; 0xff
 801fbe4:	46a9      	mov	r9, r5
 801fbe6:	e68b      	b.n	801f900 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801fbe8:	25ff      	movs	r5, #255	; 0xff
 801fbea:	46a9      	mov	r9, r5
 801fbec:	e7f7      	b.n	801fbde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801fbee:	1c56      	adds	r6, r2, #1
 801fbf0:	d18d      	bne.n	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fbf2:	4294      	cmp	r4, r2
 801fbf4:	dd8b      	ble.n	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fbf6:	1c5d      	adds	r5, r3, #1
 801fbf8:	db89      	blt.n	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fbfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fbfc:	429d      	cmp	r5, r3
 801fbfe:	dd86      	ble.n	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc00:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801fc04:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801fc06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc08:	9202      	str	r2, [sp, #8]
 801fc0a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fc0e:	e9cd 4300 	strd	r4, r3, [sp]
 801fc12:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 801fc16:	9b08      	ldr	r3, [sp, #32]
 801fc18:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fc1a:	f7ff fc49 	bl	801f4b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801fc1e:	e776      	b.n	801fb0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fc22:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fc24:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fc28:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc2a:	1412      	asrs	r2, r2, #16
 801fc2c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fc30:	141b      	asrs	r3, r3, #16
 801fc32:	fb04 2303 	mla	r3, r4, r3, r2
 801fc36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc38:	18d5      	adds	r5, r2, r3
 801fc3a:	5cd3      	ldrb	r3, [r2, r3]
 801fc3c:	9a08      	ldr	r2, [sp, #32]
 801fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fc42:	0e1e      	lsrs	r6, r3, #24
 801fc44:	2900      	cmp	r1, #0
 801fc46:	f000 8121 	beq.w	801fe8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801fc4a:	786a      	ldrb	r2, [r5, #1]
 801fc4c:	9f08      	ldr	r7, [sp, #32]
 801fc4e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fc52:	920f      	str	r2, [sp, #60]	; 0x3c
 801fc54:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fc58:	2800      	cmp	r0, #0
 801fc5a:	f000 8122 	beq.w	801fea2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 801fc5e:	192a      	adds	r2, r5, r4
 801fc60:	5d2d      	ldrb	r5, [r5, r4]
 801fc62:	7852      	ldrb	r2, [r2, #1]
 801fc64:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fc68:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fc6c:	950b      	str	r5, [sp, #44]	; 0x2c
 801fc6e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801fc72:	9210      	str	r2, [sp, #64]	; 0x40
 801fc74:	0e15      	lsrs	r5, r2, #24
 801fc76:	b289      	uxth	r1, r1
 801fc78:	b280      	uxth	r0, r0
 801fc7a:	fb01 f900 	mul.w	r9, r1, r0
 801fc7e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fc82:	0109      	lsls	r1, r1, #4
 801fc84:	eba1 0e09 	sub.w	lr, r1, r9
 801fc88:	b280      	uxth	r0, r0
 801fc8a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fc8e:	fa1f fe8e 	uxth.w	lr, lr
 801fc92:	1a12      	subs	r2, r2, r0
 801fc94:	b292      	uxth	r2, r2
 801fc96:	fb0e f10c 	mul.w	r1, lr, ip
 801fc9a:	fb02 1106 	mla	r1, r2, r6, r1
 801fc9e:	fb00 1108 	mla	r1, r0, r8, r1
 801fca2:	fb09 1105 	mla	r1, r9, r5, r1
 801fca6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fcaa:	2900      	cmp	r1, #0
 801fcac:	f000 80e0 	beq.w	801fe70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 801fcb0:	2eff      	cmp	r6, #255	; 0xff
 801fcb2:	d016      	beq.n	801fce2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 801fcb4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fcb8:	4377      	muls	r7, r6
 801fcba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcbe:	435e      	muls	r6, r3
 801fcc0:	0a3b      	lsrs	r3, r7, #8
 801fcc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fcc6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fcca:	443b      	add	r3, r7
 801fccc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fcd0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fcd4:	0a1b      	lsrs	r3, r3, #8
 801fcd6:	0a3f      	lsrs	r7, r7, #8
 801fcd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fcdc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fce0:	433b      	orrs	r3, r7
 801fce2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fce6:	d01d      	beq.n	801fd24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 801fce8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fcea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fcec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fcf0:	fb0c f606 	mul.w	r6, ip, r6
 801fcf4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fcf8:	fb0c fc07 	mul.w	ip, ip, r7
 801fcfc:	0a37      	lsrs	r7, r6, #8
 801fcfe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd02:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fd06:	4437      	add	r7, r6
 801fd08:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fd0c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fd10:	0a3f      	lsrs	r7, r7, #8
 801fd12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd16:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fd1e:	ea47 060c 	orr.w	r6, r7, ip
 801fd22:	960f      	str	r6, [sp, #60]	; 0x3c
 801fd24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fd28:	d01d      	beq.n	801fd66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801fd2a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fd2c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fd30:	fb08 fc0c 	mul.w	ip, r8, ip
 801fd34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd38:	fb08 f806 	mul.w	r8, r8, r6
 801fd3c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fd40:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801fd44:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd4c:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801fd50:	4467      	add	r7, ip
 801fd52:	0a3f      	lsrs	r7, r7, #8
 801fd54:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fd58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd5c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fd60:	ea47 0608 	orr.w	r6, r7, r8
 801fd64:	960b      	str	r6, [sp, #44]	; 0x2c
 801fd66:	2dff      	cmp	r5, #255	; 0xff
 801fd68:	d01a      	beq.n	801fda0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801fd6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fd6c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fd70:	fb05 fc0c 	mul.w	ip, r5, ip
 801fd74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd78:	4375      	muls	r5, r6
 801fd7a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fd7e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd82:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd86:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fd8a:	4467      	add	r7, ip
 801fd8c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fd90:	0a3f      	lsrs	r7, r7, #8
 801fd92:	0a2d      	lsrs	r5, r5, #8
 801fd94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd98:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fd9c:	433d      	orrs	r5, r7
 801fd9e:	9510      	str	r5, [sp, #64]	; 0x40
 801fda0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801fda2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fda6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fdaa:	fb0e f505 	mul.w	r5, lr, r5
 801fdae:	fb02 5506 	mla	r5, r2, r6, r5
 801fdb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fdb4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdb8:	fb00 5506 	mla	r5, r0, r6, r5
 801fdbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fdbe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdc2:	fb09 5506 	mla	r5, r9, r6, r5
 801fdc6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fdc8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fdcc:	fb0e fe06 	mul.w	lr, lr, r6
 801fdd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdd4:	fb02 e303 	mla	r3, r2, r3, lr
 801fdd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fdda:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fdde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fde0:	fb00 3307 	mla	r3, r0, r7, r3
 801fde4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fde8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fdec:	fb01 f10b 	mul.w	r1, r1, fp
 801fdf0:	0a2d      	lsrs	r5, r5, #8
 801fdf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdf6:	f8ba 0000 	ldrh.w	r0, [sl]
 801fdfa:	1c4b      	adds	r3, r1, #1
 801fdfc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe00:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe04:	ea45 050c 	orr.w	r5, r5, ip
 801fe08:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fe0c:	1202      	asrs	r2, r0, #8
 801fe0e:	0c2b      	lsrs	r3, r5, #16
 801fe10:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fe14:	b2c9      	uxtb	r1, r1
 801fe16:	fb13 f30b 	smulbb	r3, r3, fp
 801fe1a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fe1e:	fb02 3201 	mla	r2, r2, r1, r3
 801fe22:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801fe26:	10c3      	asrs	r3, r0, #3
 801fe28:	b2ed      	uxtb	r5, r5
 801fe2a:	00c0      	lsls	r0, r0, #3
 801fe2c:	b2c0      	uxtb	r0, r0
 801fe2e:	fb15 f50b 	smulbb	r5, r5, fp
 801fe32:	fb00 5001 	mla	r0, r0, r1, r5
 801fe36:	b292      	uxth	r2, r2
 801fe38:	fb16 f60b 	smulbb	r6, r6, fp
 801fe3c:	b280      	uxth	r0, r0
 801fe3e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801fe42:	fb03 6301 	mla	r3, r3, r1, r6
 801fe46:	1c51      	adds	r1, r2, #1
 801fe48:	1c46      	adds	r6, r0, #1
 801fe4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fe4e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801fe52:	b29b      	uxth	r3, r3
 801fe54:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fe58:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801fe5c:	4332      	orrs	r2, r6
 801fe5e:	1c5e      	adds	r6, r3, #1
 801fe60:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fe64:	095b      	lsrs	r3, r3, #5
 801fe66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fe6a:	431a      	orrs	r2, r3
 801fe6c:	f8aa 2000 	strh.w	r2, [sl]
 801fe70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fe72:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fe74:	4413      	add	r3, r2
 801fe76:	932d      	str	r3, [sp, #180]	; 0xb4
 801fe78:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fe7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fe7c:	4413      	add	r3, r2
 801fe7e:	932e      	str	r3, [sp, #184]	; 0xb8
 801fe80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fe82:	3b01      	subs	r3, #1
 801fe84:	f10a 0a02 	add.w	sl, sl, #2
 801fe88:	9312      	str	r3, [sp, #72]	; 0x48
 801fe8a:	e4db      	b.n	801f844 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801fe8c:	b160      	cbz	r0, 801fea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801fe8e:	5d2a      	ldrb	r2, [r5, r4]
 801fe90:	9d08      	ldr	r5, [sp, #32]
 801fe92:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fe96:	920b      	str	r2, [sp, #44]	; 0x2c
 801fe98:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fe9c:	25ff      	movs	r5, #255	; 0xff
 801fe9e:	46ac      	mov	ip, r5
 801fea0:	e6e9      	b.n	801fc76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801fea2:	25ff      	movs	r5, #255	; 0xff
 801fea4:	46a8      	mov	r8, r5
 801fea6:	e6e6      	b.n	801fc76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801fea8:	25ff      	movs	r5, #255	; 0xff
 801feaa:	46a8      	mov	r8, r5
 801feac:	e7f7      	b.n	801fe9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801feae:	b01b      	add	sp, #108	; 0x6c
 801feb0:	ecbd 8b08 	vpop	{d8-d11}
 801feb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801feb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801febc:	8808      	ldrh	r0, [r1, #0]
 801febe:	b085      	sub	sp, #20
 801fec0:	1206      	asrs	r6, r0, #8
 801fec2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fec6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801feca:	9600      	str	r6, [sp, #0]
 801fecc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fed0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fed4:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801fed8:	10c6      	asrs	r6, r0, #3
 801feda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fede:	9601      	str	r6, [sp, #4]
 801fee0:	00c0      	lsls	r0, r0, #3
 801fee2:	fb04 560c 	mla	r6, r4, ip, r5
 801fee6:	b2c0      	uxtb	r0, r0
 801fee8:	4692      	mov	sl, r2
 801feea:	eb02 0e06 	add.w	lr, r2, r6
 801feee:	9a00      	ldr	r2, [sp, #0]
 801fef0:	9002      	str	r0, [sp, #8]
 801fef2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fef6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fefa:	9a01      	ldr	r2, [sp, #4]
 801fefc:	2c00      	cmp	r4, #0
 801fefe:	4698      	mov	r8, r3
 801ff00:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ff04:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ff08:	db3e      	blt.n	801ff88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff0a:	45a1      	cmp	r9, r4
 801ff0c:	dd3c      	ble.n	801ff88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff0e:	2d00      	cmp	r5, #0
 801ff10:	db38      	blt.n	801ff84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801ff12:	45ac      	cmp	ip, r5
 801ff14:	dd36      	ble.n	801ff84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801ff16:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801ff1a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801ff1e:	1c6e      	adds	r6, r5, #1
 801ff20:	d435      	bmi.n	801ff8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff22:	45b4      	cmp	ip, r6
 801ff24:	dd33      	ble.n	801ff8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff26:	b393      	cbz	r3, 801ff8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff28:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ff2c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801ff30:	3401      	adds	r4, #1
 801ff32:	d430      	bmi.n	801ff96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff34:	45a1      	cmp	r9, r4
 801ff36:	dd2e      	ble.n	801ff96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff38:	b36f      	cbz	r7, 801ff96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff3a:	2d00      	cmp	r5, #0
 801ff3c:	db29      	blt.n	801ff92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801ff3e:	45ac      	cmp	ip, r5
 801ff40:	dd27      	ble.n	801ff92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801ff42:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801ff46:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801ff4a:	3501      	adds	r5, #1
 801ff4c:	d407      	bmi.n	801ff5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff4e:	45ac      	cmp	ip, r5
 801ff50:	dd05      	ble.n	801ff5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff52:	b123      	cbz	r3, 801ff5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff54:	44f4      	add	ip, lr
 801ff56:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ff5a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801ff5e:	2b0f      	cmp	r3, #15
 801ff60:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ff64:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ff68:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ff6c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ff70:	d801      	bhi.n	801ff76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801ff72:	2f0f      	cmp	r7, #15
 801ff74:	d911      	bls.n	801ff9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801ff76:	4b79      	ldr	r3, [pc, #484]	; (802015c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 801ff78:	4a79      	ldr	r2, [pc, #484]	; (8020160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801ff7a:	487a      	ldr	r0, [pc, #488]	; (8020164 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801ff7c:	f240 210d 	movw	r1, #525	; 0x20d
 801ff80:	f004 ff20 	bl	8024dc4 <__assert_func>
 801ff84:	4602      	mov	r2, r0
 801ff86:	e7ca      	b.n	801ff1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 801ff88:	4606      	mov	r6, r0
 801ff8a:	4602      	mov	r2, r0
 801ff8c:	e7d0      	b.n	801ff30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801ff8e:	4606      	mov	r6, r0
 801ff90:	e7ce      	b.n	801ff30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801ff92:	4604      	mov	r4, r0
 801ff94:	e7d9      	b.n	801ff4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 801ff96:	4604      	mov	r4, r0
 801ff98:	e7e1      	b.n	801ff5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff9a:	b29b      	uxth	r3, r3
 801ff9c:	b2bf      	uxth	r7, r7
 801ff9e:	fb03 fe07 	mul.w	lr, r3, r7
 801ffa2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ffa6:	011b      	lsls	r3, r3, #4
 801ffa8:	eba3 0c0e 	sub.w	ip, r3, lr
 801ffac:	b2bf      	uxth	r7, r7
 801ffae:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801ffb2:	fa1f fc8c 	uxth.w	ip, ip
 801ffb6:	1bed      	subs	r5, r5, r7
 801ffb8:	b2ad      	uxth	r5, r5
 801ffba:	fb0c f30a 	mul.w	r3, ip, sl
 801ffbe:	fb05 330b 	mla	r3, r5, fp, r3
 801ffc2:	fb07 3309 	mla	r3, r7, r9, r3
 801ffc6:	fb0e 3308 	mla	r3, lr, r8, r3
 801ffca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ffce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ffd2:	9303      	str	r3, [sp, #12]
 801ffd4:	d018      	beq.n	8020008 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 801ffd6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ffda:	fb0b f303 	mul.w	r3, fp, r3
 801ffde:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ffe2:	fb0b fb02 	mul.w	fp, fp, r2
 801ffe6:	0a1a      	lsrs	r2, r3, #8
 801ffe8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ffec:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fff0:	441a      	add	r2, r3
 801fff2:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801fff6:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801fffa:	0a12      	lsrs	r2, r2, #8
 801fffc:	0a1b      	lsrs	r3, r3, #8
 801fffe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020006:	431a      	orrs	r2, r3
 8020008:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802000c:	d019      	beq.n	8020042 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 802000e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020012:	fb0a fb0b 	mul.w	fp, sl, fp
 8020016:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802001a:	fb0a fa06 	mul.w	sl, sl, r6
 802001e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020022:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020026:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802002a:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802002e:	445e      	add	r6, fp
 8020030:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020034:	0a36      	lsrs	r6, r6, #8
 8020036:	0a1b      	lsrs	r3, r3, #8
 8020038:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802003c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020040:	431e      	orrs	r6, r3
 8020042:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020046:	d019      	beq.n	802007c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8020048:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802004c:	fb09 fa0a 	mul.w	sl, r9, sl
 8020050:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020054:	fb09 f904 	mul.w	r9, r9, r4
 8020058:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802005c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020060:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020064:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020068:	4454      	add	r4, sl
 802006a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802006e:	0a24      	lsrs	r4, r4, #8
 8020070:	0a1b      	lsrs	r3, r3, #8
 8020072:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802007a:	431c      	orrs	r4, r3
 802007c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020080:	d019      	beq.n	80200b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 8020082:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020086:	fb08 f909 	mul.w	r9, r8, r9
 802008a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802008e:	fb08 f800 	mul.w	r8, r8, r0
 8020092:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020096:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802009a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802009e:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80200a2:	4448      	add	r0, r9
 80200a4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80200a8:	0a00      	lsrs	r0, r0, #8
 80200aa:	0a1b      	lsrs	r3, r3, #8
 80200ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200b4:	4318      	orrs	r0, r3
 80200b6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80200ba:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80200be:	fb0c f808 	mul.w	r8, ip, r8
 80200c2:	fb05 8803 	mla	r8, r5, r3, r8
 80200c6:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80200ca:	fb07 8803 	mla	r8, r7, r3, r8
 80200ce:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80200d2:	fb0e 8303 	mla	r3, lr, r3, r8
 80200d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80200da:	0a1b      	lsrs	r3, r3, #8
 80200dc:	fb0c f606 	mul.w	r6, ip, r6
 80200e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80200e4:	fb05 6202 	mla	r2, r5, r2, r6
 80200e8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80200ec:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80200f0:	fb07 2703 	mla	r7, r7, r3, r2
 80200f4:	9a03      	ldr	r2, [sp, #12]
 80200f6:	9c02      	ldr	r4, [sp, #8]
 80200f8:	9d01      	ldr	r5, [sp, #4]
 80200fa:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80200fe:	fb0e 7303 	mla	r3, lr, r3, r7
 8020102:	43d0      	mvns	r0, r2
 8020104:	9a00      	ldr	r2, [sp, #0]
 8020106:	b2c0      	uxtb	r0, r0
 8020108:	0a1b      	lsrs	r3, r3, #8
 802010a:	4342      	muls	r2, r0
 802010c:	4344      	muls	r4, r0
 802010e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020112:	ea48 0303 	orr.w	r3, r8, r3
 8020116:	4345      	muls	r5, r0
 8020118:	4620      	mov	r0, r4
 802011a:	1c54      	adds	r4, r2, #1
 802011c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020120:	0c1a      	lsrs	r2, r3, #16
 8020122:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020126:	4a10      	ldr	r2, [pc, #64]	; (8020168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8020128:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 802012c:	1c44      	adds	r4, r0, #1
 802012e:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020132:	b2d8      	uxtb	r0, r3
 8020134:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020138:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802013c:	1c68      	adds	r0, r5, #1
 802013e:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8020142:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020146:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802014a:	00db      	lsls	r3, r3, #3
 802014c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020150:	4313      	orrs	r3, r2
 8020152:	800b      	strh	r3, [r1, #0]
 8020154:	b005      	add	sp, #20
 8020156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802015a:	bf00      	nop
 802015c:	0805441c 	.word	0x0805441c
 8020160:	08054975 	.word	0x08054975
 8020164:	080544a4 	.word	0x080544a4
 8020168:	fffff800 	.word	0xfffff800

0802016c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020170:	ed2d 8b08 	vpush	{d8-d11}
 8020174:	b097      	sub	sp, #92	; 0x5c
 8020176:	eeb0 aa40 	vmov.f32	s20, s0
 802017a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 802017c:	9307      	str	r3, [sp, #28]
 802017e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020182:	9112      	str	r1, [sp, #72]	; 0x48
 8020184:	930f      	str	r3, [sp, #60]	; 0x3c
 8020186:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802018a:	9015      	str	r0, [sp, #84]	; 0x54
 802018c:	6868      	ldr	r0, [r5, #4]
 802018e:	9214      	str	r2, [sp, #80]	; 0x50
 8020190:	fb00 1303 	mla	r3, r0, r3, r1
 8020194:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020196:	6829      	ldr	r1, [r5, #0]
 8020198:	6855      	ldr	r5, [r2, #4]
 802019a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802019e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80201a2:	930a      	str	r3, [sp, #40]	; 0x28
 80201a4:	6813      	ldr	r3, [r2, #0]
 80201a6:	9311      	str	r3, [sp, #68]	; 0x44
 80201a8:	eef0 9a60 	vmov.f32	s19, s1
 80201ac:	eeb0 9a41 	vmov.f32	s18, s2
 80201b0:	eeb0 8a62 	vmov.f32	s16, s5
 80201b4:	eef0 8a43 	vmov.f32	s17, s6
 80201b8:	eef0 ba44 	vmov.f32	s23, s8
 80201bc:	eeb0 ba64 	vmov.f32	s22, s9
 80201c0:	eef0 aa45 	vmov.f32	s21, s10
 80201c4:	3504      	adds	r5, #4
 80201c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	dc03      	bgt.n	80201d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80201cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	f340 834d 	ble.w	802086e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 80201d4:	9b07      	ldr	r3, [sp, #28]
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	f340 819c 	ble.w	8020514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 80201dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80201de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80201e0:	1412      	asrs	r2, r2, #16
 80201e2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80201e6:	d42d      	bmi.n	8020244 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80201e8:	1c51      	adds	r1, r2, #1
 80201ea:	428c      	cmp	r4, r1
 80201ec:	dd2d      	ble.n	802024a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	db2b      	blt.n	802024a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80201f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80201f4:	1c59      	adds	r1, r3, #1
 80201f6:	4288      	cmp	r0, r1
 80201f8:	dd27      	ble.n	802024a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80201fa:	9b07      	ldr	r3, [sp, #28]
 80201fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80201fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020200:	3b01      	subs	r3, #1
 8020202:	fb02 1203 	mla	r2, r2, r3, r1
 8020206:	1412      	asrs	r2, r2, #16
 8020208:	d429      	bmi.n	802025e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802020a:	3201      	adds	r2, #1
 802020c:	4294      	cmp	r4, r2
 802020e:	dd26      	ble.n	802025e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020210:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020212:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020214:	fb02 1303 	mla	r3, r2, r3, r1
 8020218:	141b      	asrs	r3, r3, #16
 802021a:	d420      	bmi.n	802025e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802021c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802021e:	3301      	adds	r3, #1
 8020220:	429a      	cmp	r2, r3
 8020222:	dd1c      	ble.n	802025e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020224:	9b07      	ldr	r3, [sp, #28]
 8020226:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 802022a:	9310      	str	r3, [sp, #64]	; 0x40
 802022c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802022e:	2b00      	cmp	r3, #0
 8020230:	f300 81da 	bgt.w	80205e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8020234:	9b07      	ldr	r3, [sp, #28]
 8020236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020238:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802023c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020240:	930a      	str	r3, [sp, #40]	; 0x28
 8020242:	e169      	b.n	8020518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8020244:	1c51      	adds	r1, r2, #1
 8020246:	f040 8156 	bne.w	80204f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802024a:	42a2      	cmp	r2, r4
 802024c:	f280 8153 	bge.w	80204f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8020250:	1c5a      	adds	r2, r3, #1
 8020252:	f2c0 8150 	blt.w	80204f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8020256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020258:	4293      	cmp	r3, r2
 802025a:	f280 814c 	bge.w	80204f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802025e:	9b07      	ldr	r3, [sp, #28]
 8020260:	9313      	str	r3, [sp, #76]	; 0x4c
 8020262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020264:	9310      	str	r3, [sp, #64]	; 0x40
 8020266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020268:	2b00      	cmp	r3, #0
 802026a:	dde3      	ble.n	8020234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802026c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802026e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020270:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020274:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020276:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802027a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802027c:	1412      	asrs	r2, r2, #16
 802027e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020282:	f100 8198 	bmi.w	80205b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8020286:	1c56      	adds	r6, r2, #1
 8020288:	42b4      	cmp	r4, r6
 802028a:	f340 8196 	ble.w	80205ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802028e:	2b00      	cmp	r3, #0
 8020290:	f2c0 8193 	blt.w	80205ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8020294:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020296:	1c5e      	adds	r6, r3, #1
 8020298:	42b7      	cmp	r7, r6
 802029a:	f340 818e 	ble.w	80205ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802029e:	fb03 2304 	mla	r3, r3, r4, r2
 80202a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202a4:	18d6      	adds	r6, r2, r3
 80202a6:	5cd3      	ldrb	r3, [r2, r3]
 80202a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80202ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202b0:	2900      	cmp	r1, #0
 80202b2:	f000 8170 	beq.w	8020596 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80202b6:	7872      	ldrb	r2, [r6, #1]
 80202b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80202be:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80202c2:	2800      	cmp	r0, #0
 80202c4:	f000 8171 	beq.w	80205aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 80202c8:	1932      	adds	r2, r6, r4
 80202ca:	5d36      	ldrb	r6, [r6, r4]
 80202cc:	7852      	ldrb	r2, [r2, #1]
 80202ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80202d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202d6:	9608      	str	r6, [sp, #32]
 80202d8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80202dc:	920c      	str	r2, [sp, #48]	; 0x30
 80202de:	0e16      	lsrs	r6, r2, #24
 80202e0:	b289      	uxth	r1, r1
 80202e2:	b280      	uxth	r0, r0
 80202e4:	fb01 fb00 	mul.w	fp, r1, r0
 80202e8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80202ec:	0109      	lsls	r1, r1, #4
 80202ee:	eba1 090b 	sub.w	r9, r1, fp
 80202f2:	b280      	uxth	r0, r0
 80202f4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80202f8:	fa1f f989 	uxth.w	r9, r9
 80202fc:	1a12      	subs	r2, r2, r0
 80202fe:	b292      	uxth	r2, r2
 8020300:	fb09 f108 	mul.w	r1, r9, r8
 8020304:	fb02 110c 	mla	r1, r2, ip, r1
 8020308:	fb00 110a 	mla	r1, r0, sl, r1
 802030c:	fb0b 1106 	mla	r1, fp, r6, r1
 8020310:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020314:	2900      	cmp	r1, #0
 8020316:	f000 80df 	beq.w	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802031a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802031e:	d01b      	beq.n	8020358 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8020320:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020324:	fb0c fe0e 	mul.w	lr, ip, lr
 8020328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802032c:	fb0c fc03 	mul.w	ip, ip, r3
 8020330:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020334:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020338:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802033c:	4473      	add	r3, lr
 802033e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020342:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020346:	0a1b      	lsrs	r3, r3, #8
 8020348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802034c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020350:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020354:	ea43 030e 	orr.w	r3, r3, lr
 8020358:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802035c:	d01e      	beq.n	802039c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 802035e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020360:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020364:	fb08 fc0c 	mul.w	ip, r8, ip
 8020368:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802036c:	fb08 f80e 	mul.w	r8, r8, lr
 8020370:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020374:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020378:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802037c:	44e6      	add	lr, ip
 802037e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020382:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802038a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802038e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020392:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020396:	ea4e 0708 	orr.w	r7, lr, r8
 802039a:	970b      	str	r7, [sp, #44]	; 0x2c
 802039c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80203a0:	d01e      	beq.n	80203e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80203a2:	9f08      	ldr	r7, [sp, #32]
 80203a4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80203a8:	fb0a f808 	mul.w	r8, sl, r8
 80203ac:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80203b0:	fb0a fa0c 	mul.w	sl, sl, ip
 80203b4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80203b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203bc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80203c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80203c4:	44c6      	add	lr, r8
 80203c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80203ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203da:	ea4e 070a 	orr.w	r7, lr, sl
 80203de:	9708      	str	r7, [sp, #32]
 80203e0:	2eff      	cmp	r6, #255	; 0xff
 80203e2:	d01d      	beq.n	8020420 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80203e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80203e6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80203ea:	fb06 f808 	mul.w	r8, r6, r8
 80203ee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80203f2:	fb06 f60c 	mul.w	r6, r6, ip
 80203f6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80203fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203fe:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020402:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020406:	44c6      	add	lr, r8
 8020408:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802040c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020410:	0a36      	lsrs	r6, r6, #8
 8020412:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020416:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802041a:	ea4e 0606 	orr.w	r6, lr, r6
 802041e:	960c      	str	r6, [sp, #48]	; 0x30
 8020420:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8020422:	9f08      	ldr	r7, [sp, #32]
 8020424:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020428:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802042c:	fb09 f606 	mul.w	r6, r9, r6
 8020430:	fb02 660c 	mla	r6, r2, ip, r6
 8020434:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020438:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802043a:	fb00 660c 	mla	r6, r0, ip, r6
 802043e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020442:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020444:	fb0b 660c 	mla	r6, fp, ip, r6
 8020448:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802044c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020450:	fb09 f90c 	mul.w	r9, r9, ip
 8020454:	fb02 9303 	mla	r3, r2, r3, r9
 8020458:	9a08      	ldr	r2, [sp, #32]
 802045a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802045e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020460:	fb00 330e 	mla	r3, r0, lr, r3
 8020464:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020468:	fb0b 3b00 	mla	fp, fp, r0, r3
 802046c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802046e:	881b      	ldrh	r3, [r3, #0]
 8020470:	43c9      	mvns	r1, r1
 8020472:	1218      	asrs	r0, r3, #8
 8020474:	b2c9      	uxtb	r1, r1
 8020476:	10da      	asrs	r2, r3, #3
 8020478:	0a36      	lsrs	r6, r6, #8
 802047a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802047e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020482:	00db      	lsls	r3, r3, #3
 8020484:	4348      	muls	r0, r1
 8020486:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802048a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802048e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020492:	b2db      	uxtb	r3, r3
 8020494:	434b      	muls	r3, r1
 8020496:	ea46 060b 	orr.w	r6, r6, fp
 802049a:	434a      	muls	r2, r1
 802049c:	1c41      	adds	r1, r0, #1
 802049e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80204a2:	0c30      	lsrs	r0, r6, #16
 80204a4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80204a8:	494e      	ldr	r1, [pc, #312]	; (80205e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 80204aa:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80204ae:	1c59      	adds	r1, r3, #1
 80204b0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80204b4:	b2f3      	uxtb	r3, r6
 80204b6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80204ba:	1c51      	adds	r1, r2, #1
 80204bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80204c0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80204c4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80204c8:	00f6      	lsls	r6, r6, #3
 80204ca:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 80204ce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80204d2:	431e      	orrs	r6, r3
 80204d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80204d6:	801e      	strh	r6, [r3, #0]
 80204d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80204da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80204dc:	3302      	adds	r3, #2
 80204de:	9310      	str	r3, [sp, #64]	; 0x40
 80204e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204e2:	4413      	add	r3, r2
 80204e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80204e6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80204e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80204ea:	4413      	add	r3, r2
 80204ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80204ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80204f0:	3b01      	subs	r3, #1
 80204f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80204f4:	e6b7      	b.n	8020266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80204f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80204fa:	4413      	add	r3, r2
 80204fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80204fe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020500:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020502:	4413      	add	r3, r2
 8020504:	932a      	str	r3, [sp, #168]	; 0xa8
 8020506:	9b07      	ldr	r3, [sp, #28]
 8020508:	3b01      	subs	r3, #1
 802050a:	9307      	str	r3, [sp, #28]
 802050c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802050e:	3302      	adds	r3, #2
 8020510:	930a      	str	r3, [sp, #40]	; 0x28
 8020512:	e65f      	b.n	80201d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020514:	f47f ae71 	bne.w	80201fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8020518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802051a:	2b00      	cmp	r3, #0
 802051c:	f340 81a7 	ble.w	802086e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8020520:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020528:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802052c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802052e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020532:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020536:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802053a:	eef0 6a48 	vmov.f32	s13, s16
 802053e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020542:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020546:	ee37 8a48 	vsub.f32	s16, s14, s16
 802054a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802054e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020552:	eef0 6a68 	vmov.f32	s13, s17
 8020556:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802055a:	ee18 2a10 	vmov	r2, s16
 802055e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020562:	fb92 f3f3 	sdiv	r3, r2, r3
 8020566:	ee18 2a90 	vmov	r2, s17
 802056a:	932b      	str	r3, [sp, #172]	; 0xac
 802056c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802056e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020572:	932c      	str	r3, [sp, #176]	; 0xb0
 8020574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020576:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020578:	3b01      	subs	r3, #1
 802057a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802057e:	9312      	str	r3, [sp, #72]	; 0x48
 8020580:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020582:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020586:	bf08      	it	eq
 8020588:	4613      	moveq	r3, r2
 802058a:	9307      	str	r3, [sp, #28]
 802058c:	eef0 8a67 	vmov.f32	s17, s15
 8020590:	eeb0 8a47 	vmov.f32	s16, s14
 8020594:	e617      	b.n	80201c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8020596:	b158      	cbz	r0, 80205b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8020598:	5d32      	ldrb	r2, [r6, r4]
 802059a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802059e:	9208      	str	r2, [sp, #32]
 80205a0:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80205a4:	26ff      	movs	r6, #255	; 0xff
 80205a6:	46b0      	mov	r8, r6
 80205a8:	e69a      	b.n	80202e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80205aa:	26ff      	movs	r6, #255	; 0xff
 80205ac:	46b2      	mov	sl, r6
 80205ae:	e697      	b.n	80202e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80205b0:	26ff      	movs	r6, #255	; 0xff
 80205b2:	46b2      	mov	sl, r6
 80205b4:	e7f7      	b.n	80205a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 80205b6:	1c57      	adds	r7, r2, #1
 80205b8:	d18e      	bne.n	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80205ba:	4294      	cmp	r4, r2
 80205bc:	dd8c      	ble.n	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80205be:	1c5e      	adds	r6, r3, #1
 80205c0:	db8a      	blt.n	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80205c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80205c4:	429e      	cmp	r6, r3
 80205c6:	dd87      	ble.n	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80205c8:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80205cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80205d0:	e9cd 4600 	strd	r4, r6, [sp]
 80205d4:	462b      	mov	r3, r5
 80205d6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 80205da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205dc:	f7ff fc6c 	bl	801feb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80205e0:	e77a      	b.n	80204d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80205e2:	bf00      	nop
 80205e4:	fffff800 	.word	0xfffff800
 80205e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80205ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80205ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80205f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205f2:	1409      	asrs	r1, r1, #16
 80205f4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80205f8:	141b      	asrs	r3, r3, #16
 80205fa:	fb04 1303 	mla	r3, r4, r3, r1
 80205fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020600:	18ce      	adds	r6, r1, r3
 8020602:	5ccb      	ldrb	r3, [r1, r3]
 8020604:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020608:	0e1f      	lsrs	r7, r3, #24
 802060a:	2a00      	cmp	r2, #0
 802060c:	f000 811f 	beq.w	802084e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 8020610:	7871      	ldrb	r1, [r6, #1]
 8020612:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020616:	910d      	str	r1, [sp, #52]	; 0x34
 8020618:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802061c:	2800      	cmp	r0, #0
 802061e:	f000 8120 	beq.w	8020862 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8020622:	1931      	adds	r1, r6, r4
 8020624:	5d36      	ldrb	r6, [r6, r4]
 8020626:	7849      	ldrb	r1, [r1, #1]
 8020628:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802062c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020630:	9609      	str	r6, [sp, #36]	; 0x24
 8020632:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8020636:	910e      	str	r1, [sp, #56]	; 0x38
 8020638:	0e0e      	lsrs	r6, r1, #24
 802063a:	b292      	uxth	r2, r2
 802063c:	b280      	uxth	r0, r0
 802063e:	fb02 fa00 	mul.w	sl, r2, r0
 8020642:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020646:	0112      	lsls	r2, r2, #4
 8020648:	eba2 080a 	sub.w	r8, r2, sl
 802064c:	b280      	uxth	r0, r0
 802064e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020652:	fa1f f888 	uxth.w	r8, r8
 8020656:	1a09      	subs	r1, r1, r0
 8020658:	b289      	uxth	r1, r1
 802065a:	fb08 f20e 	mul.w	r2, r8, lr
 802065e:	fb01 2207 	mla	r2, r1, r7, r2
 8020662:	fb00 2209 	mla	r2, r0, r9, r2
 8020666:	fb0a 2206 	mla	r2, sl, r6, r2
 802066a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802066e:	9213      	str	r2, [sp, #76]	; 0x4c
 8020670:	2a00      	cmp	r2, #0
 8020672:	f000 80de 	beq.w	8020832 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 8020676:	2fff      	cmp	r7, #255	; 0xff
 8020678:	d01a      	beq.n	80206b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802067a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802067e:	fb07 fc0c 	mul.w	ip, r7, ip
 8020682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020686:	435f      	muls	r7, r3
 8020688:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802068c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020690:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020694:	4463      	add	r3, ip
 8020696:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802069a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802069e:	0a1b      	lsrs	r3, r3, #8
 80206a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80206ac:	ea43 030c 	orr.w	r3, r3, ip
 80206b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80206b4:	d01f      	beq.n	80206f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 80206b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80206b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80206ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206be:	fb0e f707 	mul.w	r7, lr, r7
 80206c2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80206c6:	fb0e fe0c 	mul.w	lr, lr, ip
 80206ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80206ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80206d6:	44bc      	add	ip, r7
 80206d8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80206dc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80206e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80206f0:	ea4c 020e 	orr.w	r2, ip, lr
 80206f4:	920d      	str	r2, [sp, #52]	; 0x34
 80206f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80206fa:	d01e      	beq.n	802073a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 80206fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80206fe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020702:	fb09 fe0e 	mul.w	lr, r9, lr
 8020706:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802070a:	fb09 f907 	mul.w	r9, r9, r7
 802070e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020712:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020716:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802071a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802071e:	44f4      	add	ip, lr
 8020720:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020728:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802072c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020730:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020734:	ea4c 0209 	orr.w	r2, ip, r9
 8020738:	9209      	str	r2, [sp, #36]	; 0x24
 802073a:	2eff      	cmp	r6, #255	; 0xff
 802073c:	d01c      	beq.n	8020778 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 802073e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020740:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020744:	fb06 fe0e 	mul.w	lr, r6, lr
 8020748:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802074c:	437e      	muls	r6, r7
 802074e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020752:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020756:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802075a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802075e:	44f4      	add	ip, lr
 8020760:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020764:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020768:	0a36      	lsrs	r6, r6, #8
 802076a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802076e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020772:	ea4c 0206 	orr.w	r2, ip, r6
 8020776:	920e      	str	r2, [sp, #56]	; 0x38
 8020778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802077a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802077e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020780:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020784:	fb08 f606 	mul.w	r6, r8, r6
 8020788:	fb01 6607 	mla	r6, r1, r7, r6
 802078c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020792:	fb00 6607 	mla	r6, r0, r7, r6
 8020796:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802079a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802079c:	fb0a 6607 	mla	r6, sl, r7, r6
 80207a0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80207a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207a6:	fb08 f807 	mul.w	r8, r8, r7
 80207aa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80207ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80207b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207b4:	fb01 8303 	mla	r3, r1, r3, r8
 80207b8:	fb00 330c 	mla	r3, r0, ip, r3
 80207bc:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80207c0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80207c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80207c6:	f8bb 3000 	ldrh.w	r3, [fp]
 80207ca:	43d2      	mvns	r2, r2
 80207cc:	1218      	asrs	r0, r3, #8
 80207ce:	b2d2      	uxtb	r2, r2
 80207d0:	0a36      	lsrs	r6, r6, #8
 80207d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207d6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80207da:	4350      	muls	r0, r2
 80207dc:	10d9      	asrs	r1, r3, #3
 80207de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80207e2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80207e6:	00db      	lsls	r3, r3, #3
 80207e8:	ea46 060e 	orr.w	r6, r6, lr
 80207ec:	1c47      	adds	r7, r0, #1
 80207ee:	b2db      	uxtb	r3, r3
 80207f0:	4353      	muls	r3, r2
 80207f2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80207f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80207fa:	0c37      	lsrs	r7, r6, #16
 80207fc:	4351      	muls	r1, r2
 80207fe:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020802:	4a1d      	ldr	r2, [pc, #116]	; (8020878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 8020804:	1c5f      	adds	r7, r3, #1
 8020806:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802080a:	b2f7      	uxtb	r7, r6
 802080c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020810:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020814:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8020818:	1c4b      	adds	r3, r1, #1
 802081a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802081e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020822:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020826:	00f6      	lsls	r6, r6, #3
 8020828:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802082c:	4330      	orrs	r0, r6
 802082e:	f8ab 0000 	strh.w	r0, [fp]
 8020832:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020834:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020836:	4413      	add	r3, r2
 8020838:	9329      	str	r3, [sp, #164]	; 0xa4
 802083a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802083c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802083e:	4413      	add	r3, r2
 8020840:	932a      	str	r3, [sp, #168]	; 0xa8
 8020842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020844:	3b01      	subs	r3, #1
 8020846:	f10b 0b02 	add.w	fp, fp, #2
 802084a:	9310      	str	r3, [sp, #64]	; 0x40
 802084c:	e4ee      	b.n	802022c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 802084e:	b158      	cbz	r0, 8020868 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8020850:	5d31      	ldrb	r1, [r6, r4]
 8020852:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020856:	9109      	str	r1, [sp, #36]	; 0x24
 8020858:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802085c:	26ff      	movs	r6, #255	; 0xff
 802085e:	46b6      	mov	lr, r6
 8020860:	e6eb      	b.n	802063a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8020862:	26ff      	movs	r6, #255	; 0xff
 8020864:	46b1      	mov	r9, r6
 8020866:	e6e8      	b.n	802063a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8020868:	26ff      	movs	r6, #255	; 0xff
 802086a:	46b1      	mov	r9, r6
 802086c:	e7f7      	b.n	802085e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 802086e:	b017      	add	sp, #92	; 0x5c
 8020870:	ecbd 8b08 	vpop	{d8-d11}
 8020874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020878:	fffff800 	.word	0xfffff800

0802087c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020880:	b087      	sub	sp, #28
 8020882:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8020886:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 802088a:	9105      	str	r1, [sp, #20]
 802088c:	fb00 e604 	mla	r6, r0, r4, lr
 8020890:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8020894:	9102      	str	r1, [sp, #8]
 8020896:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 802089a:	9103      	str	r1, [sp, #12]
 802089c:	9905      	ldr	r1, [sp, #20]
 802089e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 80208a2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80208a6:	8809      	ldrh	r1, [r1, #0]
 80208a8:	2800      	cmp	r0, #0
 80208aa:	eb03 0a06 	add.w	sl, r3, r6
 80208ae:	f2c0 80ca 	blt.w	8020a46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 80208b2:	4287      	cmp	r7, r0
 80208b4:	f340 80c7 	ble.w	8020a46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 80208b8:	f1be 0f00 	cmp.w	lr, #0
 80208bc:	f2c0 80bf 	blt.w	8020a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 80208c0:	4574      	cmp	r4, lr
 80208c2:	f340 80bc 	ble.w	8020a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 80208c6:	f813 c006 	ldrb.w	ip, [r3, r6]
 80208ca:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 80208ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80208d2:	d01c      	beq.n	802090e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 80208d4:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 80208d8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80208dc:	4372      	muls	r2, r6
 80208de:	f64f 081f 	movw	r8, #63519	; 0xf81f
 80208e2:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 80208e6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80208ea:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80208ee:	fb0c f609 	mul.w	r6, ip, r9
 80208f2:	eb03 0902 	add.w	r9, r3, r2
 80208f6:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 80208fa:	f106 0820 	add.w	r8, r6, #32
 80208fe:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8020902:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020906:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802090a:	ea49 0908 	orr.w	r9, r9, r8
 802090e:	fa1f f989 	uxth.w	r9, r9
 8020912:	f11e 0301 	adds.w	r3, lr, #1
 8020916:	f100 809b 	bmi.w	8020a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 802091a:	429c      	cmp	r4, r3
 802091c:	f340 8098 	ble.w	8020a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8020920:	2d00      	cmp	r5, #0
 8020922:	f000 8095 	beq.w	8020a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8020926:	f89a 6001 	ldrb.w	r6, [sl, #1]
 802092a:	9b03      	ldr	r3, [sp, #12]
 802092c:	2eff      	cmp	r6, #255	; 0xff
 802092e:	885b      	ldrh	r3, [r3, #2]
 8020930:	d01b      	beq.n	802096a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 8020932:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8020936:	ea4f 08e6 	mov.w	r8, r6, asr #3
 802093a:	fb08 f202 	mul.w	r2, r8, r2
 802093e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020942:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020946:	fb06 f803 	mul.w	r8, r6, r3
 802094a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802094e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8020952:	441a      	add	r2, r3
 8020954:	f108 0320 	add.w	r3, r8, #32
 8020958:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802095c:	0a1b      	lsrs	r3, r3, #8
 802095e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8020962:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020966:	ea4b 0303 	orr.w	r3, fp, r3
 802096a:	b29b      	uxth	r3, r3
 802096c:	9301      	str	r3, [sp, #4]
 802096e:	3001      	adds	r0, #1
 8020970:	d474      	bmi.n	8020a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8020972:	4287      	cmp	r7, r0
 8020974:	dd72      	ble.n	8020a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8020976:	9a02      	ldr	r2, [sp, #8]
 8020978:	2a00      	cmp	r2, #0
 802097a:	f000 8121 	beq.w	8020bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 802097e:	f1be 0f00 	cmp.w	lr, #0
 8020982:	db68      	blt.n	8020a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8020984:	4574      	cmp	r4, lr
 8020986:	dd66      	ble.n	8020a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8020988:	f81a 7004 	ldrb.w	r7, [sl, r4]
 802098c:	9a03      	ldr	r2, [sp, #12]
 802098e:	2fff      	cmp	r7, #255	; 0xff
 8020990:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8020994:	d01c      	beq.n	80209d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8020996:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 802099a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802099e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80209a2:	fb07 fb00 	mul.w	fp, r7, r0
 80209a6:	fb08 f802 	mul.w	r8, r8, r2
 80209aa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80209ae:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 80209b2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80209b6:	4490      	add	r8, r2
 80209b8:	f10b 0220 	add.w	r2, fp, #32
 80209bc:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 80209c0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80209c4:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 80209c8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80209cc:	ea40 000b 	orr.w	r0, r0, fp
 80209d0:	b280      	uxth	r0, r0
 80209d2:	f11e 0e01 	adds.w	lr, lr, #1
 80209d6:	d446      	bmi.n	8020a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 80209d8:	4574      	cmp	r4, lr
 80209da:	dd44      	ble.n	8020a66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 80209dc:	2d00      	cmp	r5, #0
 80209de:	d045      	beq.n	8020a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 80209e0:	1c62      	adds	r2, r4, #1
 80209e2:	9b03      	ldr	r3, [sp, #12]
 80209e4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80209e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80209ec:	2cff      	cmp	r4, #255	; 0xff
 80209ee:	d01c      	beq.n	8020a2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 80209f0:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 80209f4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80209f8:	fb08 fe0e 	mul.w	lr, r8, lr
 80209fc:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8020a00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a04:	fb04 f802 	mul.w	r8, r4, r2
 8020a08:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 8020a0c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020a10:	4472      	add	r2, lr
 8020a12:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8020a16:	f108 0a20 	add.w	sl, r8, #32
 8020a1a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 8020a1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a22:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a26:	ea42 020a 	orr.w	r2, r2, sl
 8020a2a:	b292      	uxth	r2, r2
 8020a2c:	2d0f      	cmp	r5, #15
 8020a2e:	d91f      	bls.n	8020a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 8020a30:	4b67      	ldr	r3, [pc, #412]	; (8020bd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 8020a32:	4a68      	ldr	r2, [pc, #416]	; (8020bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 8020a34:	4868      	ldr	r0, [pc, #416]	; (8020bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 8020a36:	f240 210d 	movw	r1, #525	; 0x20d
 8020a3a:	f004 f9c3 	bl	8024dc4 <__assert_func>
 8020a3e:	4689      	mov	r9, r1
 8020a40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020a44:	e765      	b.n	8020912 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 8020a46:	26ff      	movs	r6, #255	; 0xff
 8020a48:	9101      	str	r1, [sp, #4]
 8020a4a:	4689      	mov	r9, r1
 8020a4c:	46b4      	mov	ip, r6
 8020a4e:	e78e      	b.n	802096e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8020a50:	9101      	str	r1, [sp, #4]
 8020a52:	26ff      	movs	r6, #255	; 0xff
 8020a54:	e78b      	b.n	802096e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8020a56:	4608      	mov	r0, r1
 8020a58:	27ff      	movs	r7, #255	; 0xff
 8020a5a:	e7ba      	b.n	80209d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 8020a5c:	24ff      	movs	r4, #255	; 0xff
 8020a5e:	460a      	mov	r2, r1
 8020a60:	4608      	mov	r0, r1
 8020a62:	4627      	mov	r7, r4
 8020a64:	e7e2      	b.n	8020a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8020a66:	460a      	mov	r2, r1
 8020a68:	24ff      	movs	r4, #255	; 0xff
 8020a6a:	e7df      	b.n	8020a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8020a6c:	460a      	mov	r2, r1
 8020a6e:	24ff      	movs	r4, #255	; 0xff
 8020a70:	9b02      	ldr	r3, [sp, #8]
 8020a72:	2b0f      	cmp	r3, #15
 8020a74:	d8dc      	bhi.n	8020a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8020a76:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8020a7a:	fa1f f885 	uxth.w	r8, r5
 8020a7e:	fb08 fa0e 	mul.w	sl, r8, lr
 8020a82:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8020a86:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8020a8a:	9303      	str	r3, [sp, #12]
 8020a8c:	fa1f f38e 	uxth.w	r3, lr
 8020a90:	9304      	str	r3, [sp, #16]
 8020a92:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8020a96:	9b02      	ldr	r3, [sp, #8]
 8020a98:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020a9c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8020aa0:	fb15 fe03 	smulbb	lr, r5, r3
 8020aa4:	ea48 0809 	orr.w	r8, r8, r9
 8020aa8:	f1c3 0910 	rsb	r9, r3, #16
 8020aac:	9b01      	ldr	r3, [sp, #4]
 8020aae:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020ab2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020ab6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020aba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020abe:	eba9 0905 	sub.w	r9, r9, r5
 8020ac2:	ea4b 0303 	orr.w	r3, fp, r3
 8020ac6:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8020aca:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020ace:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8020ad2:	436b      	muls	r3, r5
 8020ad4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ad8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020adc:	ea4b 0202 	orr.w	r2, fp, r2
 8020ae0:	fb09 3308 	mla	r3, r9, r8, r3
 8020ae4:	fb0e 3302 	mla	r3, lr, r2, r3
 8020ae8:	0402      	lsls	r2, r0, #16
 8020aea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020aee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020af2:	4310      	orrs	r0, r2
 8020af4:	9a02      	ldr	r2, [sp, #8]
 8020af6:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8020afa:	fb0e 3e00 	mla	lr, lr, r0, r3
 8020afe:	9803      	ldr	r0, [sp, #12]
 8020b00:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8020b04:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8020b08:	9804      	ldr	r0, [sp, #16]
 8020b0a:	1a2d      	subs	r5, r5, r0
 8020b0c:	9803      	ldr	r0, [sp, #12]
 8020b0e:	eba0 000a 	sub.w	r0, r0, sl
 8020b12:	b280      	uxth	r0, r0
 8020b14:	b2ad      	uxth	r5, r5
 8020b16:	4346      	muls	r6, r0
 8020b18:	9804      	ldr	r0, [sp, #16]
 8020b1a:	fb0c 6605 	mla	r6, ip, r5, r6
 8020b1e:	fb00 6707 	mla	r7, r0, r7, r6
 8020b22:	fb0a 7404 	mla	r4, sl, r4, r7
 8020b26:	b292      	uxth	r2, r2
 8020b28:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020b2c:	4354      	muls	r4, r2
 8020b2e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8020b32:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020b36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b3a:	f104 0a01 	add.w	sl, r4, #1
 8020b3e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020b42:	ea43 0e0e 	orr.w	lr, r3, lr
 8020b46:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020b4a:	fa1f f38e 	uxth.w	r3, lr
 8020b4e:	1208      	asrs	r0, r1, #8
 8020b50:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8020b54:	b2e4      	uxtb	r4, r4
 8020b56:	121d      	asrs	r5, r3, #8
 8020b58:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020b5c:	fb10 f004 	smulbb	r0, r0, r4
 8020b60:	10ce      	asrs	r6, r1, #3
 8020b62:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020b66:	00c9      	lsls	r1, r1, #3
 8020b68:	fb05 0502 	mla	r5, r5, r2, r0
 8020b6c:	b2c9      	uxtb	r1, r1
 8020b6e:	10d8      	asrs	r0, r3, #3
 8020b70:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020b74:	00db      	lsls	r3, r3, #3
 8020b76:	fb16 f604 	smulbb	r6, r6, r4
 8020b7a:	b2db      	uxtb	r3, r3
 8020b7c:	fb11 f404 	smulbb	r4, r1, r4
 8020b80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020b84:	fb00 6002 	mla	r0, r0, r2, r6
 8020b88:	fb03 4202 	mla	r2, r3, r2, r4
 8020b8c:	b2ad      	uxth	r5, r5
 8020b8e:	b292      	uxth	r2, r2
 8020b90:	1c6b      	adds	r3, r5, #1
 8020b92:	1c51      	adds	r1, r2, #1
 8020b94:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8020b98:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020b9c:	b280      	uxth	r0, r0
 8020b9e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ba2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020ba6:	4313      	orrs	r3, r2
 8020ba8:	1c42      	adds	r2, r0, #1
 8020baa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020bae:	0940      	lsrs	r0, r0, #5
 8020bb0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020bb4:	9a05      	ldr	r2, [sp, #20]
 8020bb6:	4303      	orrs	r3, r0
 8020bb8:	8013      	strh	r3, [r2, #0]
 8020bba:	b007      	add	sp, #28
 8020bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bc0:	2d0f      	cmp	r5, #15
 8020bc2:	f63f af35 	bhi.w	8020a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8020bc6:	24ff      	movs	r4, #255	; 0xff
 8020bc8:	460a      	mov	r2, r1
 8020bca:	4608      	mov	r0, r1
 8020bcc:	4627      	mov	r7, r4
 8020bce:	e752      	b.n	8020a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8020bd0:	0805441c 	.word	0x0805441c
 8020bd4:	08054975 	.word	0x08054975
 8020bd8:	080544a4 	.word	0x080544a4

08020bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020be0:	ed2d 8b08 	vpush	{d8-d11}
 8020be4:	b099      	sub	sp, #100	; 0x64
 8020be6:	eeb0 aa40 	vmov.f32	s20, s0
 8020bea:	9308      	str	r3, [sp, #32]
 8020bec:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8020bf0:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8020bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bf4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8020bf8:	9314      	str	r3, [sp, #80]	; 0x50
 8020bfa:	9113      	str	r1, [sp, #76]	; 0x4c
 8020bfc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8020c00:	9017      	str	r0, [sp, #92]	; 0x5c
 8020c02:	6870      	ldr	r0, [r6, #4]
 8020c04:	9216      	str	r2, [sp, #88]	; 0x58
 8020c06:	fb00 1303 	mla	r3, r0, r3, r1
 8020c0a:	6831      	ldr	r1, [r6, #0]
 8020c0c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020c0e:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 8020c12:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8020c16:	9309      	str	r3, [sp, #36]	; 0x24
 8020c18:	6813      	ldr	r3, [r2, #0]
 8020c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8020c1c:	6853      	ldr	r3, [r2, #4]
 8020c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8020c20:	006b      	lsls	r3, r5, #1
 8020c22:	9312      	str	r3, [sp, #72]	; 0x48
 8020c24:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8020c28:	930a      	str	r3, [sp, #40]	; 0x28
 8020c2a:	eef0 9a60 	vmov.f32	s19, s1
 8020c2e:	eeb0 9a41 	vmov.f32	s18, s2
 8020c32:	eeb0 8a62 	vmov.f32	s16, s5
 8020c36:	eef0 8a43 	vmov.f32	s17, s6
 8020c3a:	eef0 ba44 	vmov.f32	s23, s8
 8020c3e:	eeb0 ba64 	vmov.f32	s22, s9
 8020c42:	eef0 aa45 	vmov.f32	s21, s10
 8020c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	dc03      	bgt.n	8020c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8020c4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	f340 83bf 	ble.w	80213d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8020c54:	9b08      	ldr	r3, [sp, #32]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	f340 81cb 	ble.w	8020ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 8020c5c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020c5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c60:	1412      	asrs	r2, r2, #16
 8020c62:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020c66:	d42f      	bmi.n	8020cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8020c68:	1c51      	adds	r1, r2, #1
 8020c6a:	428d      	cmp	r5, r1
 8020c6c:	dd2f      	ble.n	8020cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	db2d      	blt.n	8020cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020c72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020c74:	1c59      	adds	r1, r3, #1
 8020c76:	4288      	cmp	r0, r1
 8020c78:	dd29      	ble.n	8020cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020c7a:	9b08      	ldr	r3, [sp, #32]
 8020c7c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020c7e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8020c80:	3b01      	subs	r3, #1
 8020c82:	fb02 1203 	mla	r2, r2, r3, r1
 8020c86:	1412      	asrs	r2, r2, #16
 8020c88:	d42b      	bmi.n	8020ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020c8a:	3201      	adds	r2, #1
 8020c8c:	4295      	cmp	r5, r2
 8020c8e:	dd28      	ble.n	8020ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020c90:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020c92:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020c94:	fb02 1303 	mla	r3, r2, r3, r1
 8020c98:	141b      	asrs	r3, r3, #16
 8020c9a:	d422      	bmi.n	8020ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020c9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c9e:	3301      	adds	r3, #1
 8020ca0:	429a      	cmp	r2, r3
 8020ca2:	dd1e      	ble.n	8020ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020ca4:	9b08      	ldr	r3, [sp, #32]
 8020ca6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8020caa:	9315      	str	r3, [sp, #84]	; 0x54
 8020cac:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	f300 8217 	bgt.w	80210e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8020cb8:	9b08      	ldr	r3, [sp, #32]
 8020cba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cc0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8020cc6:	e196      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8020cc8:	1c57      	adds	r7, r2, #1
 8020cca:	f040 8183 	bne.w	8020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020cce:	42aa      	cmp	r2, r5
 8020cd0:	f280 8180 	bge.w	8020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020cd4:	1c5e      	adds	r6, r3, #1
 8020cd6:	f2c0 817d 	blt.w	8020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020cdc:	4293      	cmp	r3, r2
 8020cde:	f280 8179 	bge.w	8020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020ce2:	9b08      	ldr	r3, [sp, #32]
 8020ce4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020ce6:	9315      	str	r3, [sp, #84]	; 0x54
 8020ce8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	dde2      	ble.n	8020cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020cf2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020cf4:	1419      	asrs	r1, r3, #16
 8020cf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020cf8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020cfc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020cfe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020d02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d04:	141b      	asrs	r3, r3, #16
 8020d06:	f100 81d3 	bmi.w	80210b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d0a:	1c58      	adds	r0, r3, #1
 8020d0c:	4285      	cmp	r5, r0
 8020d0e:	f340 81d1 	ble.w	80210b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d12:	2900      	cmp	r1, #0
 8020d14:	f2c0 81ce 	blt.w	80210b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d1a:	1c48      	adds	r0, r1, #1
 8020d1c:	4284      	cmp	r4, r0
 8020d1e:	f340 81c9 	ble.w	80210b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d22:	fb01 3105 	mla	r1, r1, r5, r3
 8020d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d28:	fa1f fe82 	uxth.w	lr, r2
 8020d2c:	eb03 0a01 	add.w	sl, r3, r1
 8020d30:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8020d34:	f813 9001 	ldrb.w	r9, [r3, r1]
 8020d38:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020d3c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020d40:	b29b      	uxth	r3, r3
 8020d42:	f1bc 0f00 	cmp.w	ip, #0
 8020d46:	f000 8195 	beq.w	8021074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 8020d4a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8020d4e:	940e      	str	r4, [sp, #56]	; 0x38
 8020d50:	eb0a 0b05 	add.w	fp, sl, r5
 8020d54:	fa1f fa8c 	uxth.w	sl, ip
 8020d58:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d5c:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020d60:	fa1f fa8a 	uxth.w	sl, sl
 8020d64:	eba0 000e 	sub.w	r0, r0, lr
 8020d68:	eba3 030a 	sub.w	r3, r3, sl
 8020d6c:	b280      	uxth	r0, r0
 8020d6e:	fb08 f000 	mul.w	r0, r8, r0
 8020d72:	b29b      	uxth	r3, r3
 8020d74:	fb09 0303 	mla	r3, r9, r3, r0
 8020d78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020d7a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020d7e:	940f      	str	r4, [sp, #60]	; 0x3c
 8020d80:	fb0a 3300 	mla	r3, sl, r0, r3
 8020d84:	fb0e 3304 	mla	r3, lr, r4, r3
 8020d88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	f000 8114 	beq.w	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8020d92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020d94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020d96:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020d9a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020d9e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8020da2:	f000 816c 	beq.w	802107e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020da6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020daa:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020dae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020db2:	fb09 f101 	mul.w	r1, r9, r1
 8020db6:	fb0a fe0e 	mul.w	lr, sl, lr
 8020dba:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020dbe:	f101 0b20 	add.w	fp, r1, #32
 8020dc2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020dc6:	44ce      	add	lr, r9
 8020dc8:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8020dcc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020dd0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020dd4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020dd8:	ea4e 0909 	orr.w	r9, lr, r9
 8020ddc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020de0:	8841      	ldrh	r1, [r0, #2]
 8020de2:	d019      	beq.n	8020e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8020de4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020de8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020dec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020df0:	fb0a fe0e 	mul.w	lr, sl, lr
 8020df4:	fb08 f801 	mul.w	r8, r8, r1
 8020df8:	f108 0b20 	add.w	fp, r8, #32
 8020dfc:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8020e00:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020e04:	448e      	add	lr, r1
 8020e06:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8020e0a:	0a09      	lsrs	r1, r1, #8
 8020e0c:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8020e10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e14:	ea4a 0101 	orr.w	r1, sl, r1
 8020e18:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020e1c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e20:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020e24:	ea4e 0909 	orr.w	r9, lr, r9
 8020e28:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8020e2c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e30:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020e34:	ea4e 0e01 	orr.w	lr, lr, r1
 8020e38:	f1bc 0f00 	cmp.w	ip, #0
 8020e3c:	f000 8121 	beq.w	8021082 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8020e40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020e42:	eb00 0801 	add.w	r8, r0, r1
 8020e46:	5a41      	ldrh	r1, [r0, r1]
 8020e48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020e4a:	28ff      	cmp	r0, #255	; 0xff
 8020e4c:	d019      	beq.n	8020e82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8020e4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e50:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020e54:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e58:	fb04 fb01 	mul.w	fp, r4, r1
 8020e5c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020e60:	fb0a fa00 	mul.w	sl, sl, r0
 8020e64:	f10b 0020 	add.w	r0, fp, #32
 8020e68:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8020e6c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020e70:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020e74:	4451      	add	r1, sl
 8020e76:	0a00      	lsrs	r0, r0, #8
 8020e78:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020e7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e80:	4301      	orrs	r1, r0
 8020e82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020e84:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8020e88:	2cff      	cmp	r4, #255	; 0xff
 8020e8a:	d01a      	beq.n	8020ec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 8020e8c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8020e90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e94:	fb04 fb00 	mul.w	fp, r4, r0
 8020e98:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020e9c:	fb0a fa08 	mul.w	sl, sl, r8
 8020ea0:	f10b 0820 	add.w	r8, fp, #32
 8020ea4:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8020ea8:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8020eac:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020eb0:	4450      	add	r0, sl
 8020eb2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020eb6:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020eba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020ebe:	ea40 0008 	orr.w	r0, r0, r8
 8020ec2:	fb1c f802 	smulbb	r8, ip, r2
 8020ec6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8020eca:	f1cc 0a10 	rsb	sl, ip, #16
 8020ece:	ebaa 0a02 	sub.w	sl, sl, r2
 8020ed2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020ed6:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8020eda:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8020ede:	fb0e f202 	mul.w	r2, lr, r2
 8020ee2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ee6:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8020eea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020eee:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8020ef2:	fb09 220a 	mla	r2, r9, sl, r2
 8020ef6:	ea4b 0101 	orr.w	r1, fp, r1
 8020efa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020efe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020f02:	fb0c 2201 	mla	r2, ip, r1, r2
 8020f06:	ea4e 0000 	orr.w	r0, lr, r0
 8020f0a:	fb08 2800 	mla	r8, r8, r0, r2
 8020f0e:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8020f12:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020f16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020f1a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020f1e:	ea42 0808 	orr.w	r8, r2, r8
 8020f22:	fa1f f288 	uxth.w	r2, r8
 8020f26:	2bff      	cmp	r3, #255	; 0xff
 8020f28:	d103      	bne.n	8020f32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020f2a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020f2c:	29ff      	cmp	r1, #255	; 0xff
 8020f2e:	f000 80bd 	beq.w	80210ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 8020f32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f34:	f8b7 c000 	ldrh.w	ip, [r7]
 8020f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f3a:	434b      	muls	r3, r1
 8020f3c:	f103 0e01 	add.w	lr, r3, #1
 8020f40:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 8020f44:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 8020f48:	ea4f 202c 	mov.w	r0, ip, asr #8
 8020f4c:	fa5f fe8e 	uxtb.w	lr, lr
 8020f50:	1213      	asrs	r3, r2, #8
 8020f52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020f56:	fb10 f00e 	smulbb	r0, r0, lr
 8020f5a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020f5e:	fb03 0301 	mla	r3, r3, r1, r0
 8020f62:	b298      	uxth	r0, r3
 8020f64:	ea4f 03ec 	mov.w	r3, ip, asr #3
 8020f68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020f6c:	10d1      	asrs	r1, r2, #3
 8020f6e:	fa5f fc8c 	uxtb.w	ip, ip
 8020f72:	00d2      	lsls	r2, r2, #3
 8020f74:	fb1c fc0e 	smulbb	ip, ip, lr
 8020f78:	b2d2      	uxtb	r2, r2
 8020f7a:	fb02 c204 	mla	r2, r2, r4, ip
 8020f7e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020f82:	fb13 f30e 	smulbb	r3, r3, lr
 8020f86:	b292      	uxth	r2, r2
 8020f88:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020f8c:	fb01 3104 	mla	r1, r1, r4, r3
 8020f90:	f102 0c01 	add.w	ip, r2, #1
 8020f94:	1c43      	adds	r3, r0, #1
 8020f96:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020f9a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020f9e:	b289      	uxth	r1, r1
 8020fa0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020fa4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020fa8:	4313      	orrs	r3, r2
 8020faa:	1c4a      	adds	r2, r1, #1
 8020fac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020fb0:	0949      	lsrs	r1, r1, #5
 8020fb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020fb6:	430b      	orrs	r3, r1
 8020fb8:	803b      	strh	r3, [r7, #0]
 8020fba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020fbc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020fbe:	4413      	add	r3, r2
 8020fc0:	932b      	str	r3, [sp, #172]	; 0xac
 8020fc2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020fc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020fc6:	441a      	add	r2, r3
 8020fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020fca:	922c      	str	r2, [sp, #176]	; 0xb0
 8020fcc:	3b01      	subs	r3, #1
 8020fce:	3702      	adds	r7, #2
 8020fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8020fd2:	e68b      	b.n	8020cec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020fd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020fd6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020fd8:	4413      	add	r3, r2
 8020fda:	932b      	str	r3, [sp, #172]	; 0xac
 8020fdc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020fde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020fe0:	441a      	add	r2, r3
 8020fe2:	9b08      	ldr	r3, [sp, #32]
 8020fe4:	922c      	str	r2, [sp, #176]	; 0xb0
 8020fe6:	3b01      	subs	r3, #1
 8020fe8:	9308      	str	r3, [sp, #32]
 8020fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fec:	3302      	adds	r3, #2
 8020fee:	9309      	str	r3, [sp, #36]	; 0x24
 8020ff0:	e630      	b.n	8020c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8020ff2:	f47f ae42 	bne.w	8020c7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8020ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	f340 81ea 	ble.w	80213d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8020ffe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021006:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802100a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802100c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021010:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021014:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021018:	eef0 6a48 	vmov.f32	s13, s16
 802101c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021020:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021024:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021028:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802102c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021030:	eef0 6a68 	vmov.f32	s13, s17
 8021034:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021038:	ee18 2a10 	vmov	r2, s16
 802103c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021040:	fb92 f3f3 	sdiv	r3, r2, r3
 8021044:	ee18 2a90 	vmov	r2, s17
 8021048:	932d      	str	r3, [sp, #180]	; 0xb4
 802104a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802104c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021050:	932e      	str	r3, [sp, #184]	; 0xb8
 8021052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021054:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021056:	3b01      	subs	r3, #1
 8021058:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802105c:	9313      	str	r3, [sp, #76]	; 0x4c
 802105e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021060:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8021064:	bf08      	it	eq
 8021066:	4613      	moveq	r3, r2
 8021068:	9308      	str	r3, [sp, #32]
 802106a:	eef0 8a67 	vmov.f32	s17, s15
 802106e:	eeb0 8a47 	vmov.f32	s16, s14
 8021072:	e5e8      	b.n	8020c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021074:	fb08 f000 	mul.w	r0, r8, r0
 8021078:	fb09 0303 	mla	r3, r9, r3, r0
 802107c:	e684      	b.n	8020d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 802107e:	4689      	mov	r9, r1
 8021080:	e6ac      	b.n	8020ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021082:	f1c2 0010 	rsb	r0, r2, #16
 8021086:	fb0e f202 	mul.w	r2, lr, r2
 802108a:	fb09 2900 	mla	r9, r9, r0, r2
 802108e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021092:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021096:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802109a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802109e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80210a2:	ea42 0909 	orr.w	r9, r2, r9
 80210a6:	fa1f f289 	uxth.w	r2, r9
 80210aa:	e73c      	b.n	8020f26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 80210ac:	803a      	strh	r2, [r7, #0]
 80210ae:	e784      	b.n	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210b0:	1c5c      	adds	r4, r3, #1
 80210b2:	d182      	bne.n	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210b4:	429d      	cmp	r5, r3
 80210b6:	dd80      	ble.n	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210b8:	1c48      	adds	r0, r1, #1
 80210ba:	f6ff af7e 	blt.w	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80210c0:	4288      	cmp	r0, r1
 80210c2:	f77f af7a 	ble.w	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80210c8:	9302      	str	r3, [sp, #8]
 80210ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210cc:	e9cd 1203 	strd	r1, r2, [sp, #12]
 80210d0:	e9cd c005 	strd	ip, r0, [sp, #20]
 80210d4:	e9cd 5300 	strd	r5, r3, [sp]
 80210d8:	4639      	mov	r1, r7
 80210da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80210de:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80210e0:	f7ff fbcc 	bl	802087c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80210e4:	e769      	b.n	8020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80210ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210ee:	141f      	asrs	r7, r3, #16
 80210f0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80210f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210f6:	141b      	asrs	r3, r3, #16
 80210f8:	fb05 3707 	mla	r7, r5, r7, r3
 80210fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210fe:	fa1f fc82 	uxth.w	ip, r2
 8021102:	eb03 0a07 	add.w	sl, r3, r7
 8021106:	ea4f 110c 	mov.w	r1, ip, lsl #4
 802110a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802110e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021112:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8021116:	b29b      	uxth	r3, r3
 8021118:	2800      	cmp	r0, #0
 802111a:	f000 813f 	beq.w	802139c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 802111e:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8021122:	9410      	str	r4, [sp, #64]	; 0x40
 8021124:	eb0a 0b05 	add.w	fp, sl, r5
 8021128:	fa1f fa80 	uxth.w	sl, r0
 802112c:	fb0a fc0c 	mul.w	ip, sl, ip
 8021130:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021134:	fa1f fa8a 	uxth.w	sl, sl
 8021138:	eba1 010c 	sub.w	r1, r1, ip
 802113c:	eba3 030a 	sub.w	r3, r3, sl
 8021140:	b289      	uxth	r1, r1
 8021142:	fb08 f101 	mul.w	r1, r8, r1
 8021146:	b29b      	uxth	r3, r3
 8021148:	fb09 1303 	mla	r3, r9, r3, r1
 802114c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802114e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021152:	9411      	str	r4, [sp, #68]	; 0x44
 8021154:	fb0a 3301 	mla	r3, sl, r1, r3
 8021158:	fb0c 3304 	mla	r3, ip, r4, r3
 802115c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021160:	2b00      	cmp	r3, #0
 8021162:	f000 810d 	beq.w	8021380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8021166:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021168:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802116a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802116e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8021172:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021176:	f000 8116 	beq.w	80213a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 802117a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802117e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021182:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021186:	fb09 f707 	mul.w	r7, r9, r7
 802118a:	fb0a fc0c 	mul.w	ip, sl, ip
 802118e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021192:	f107 0b20 	add.w	fp, r7, #32
 8021196:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802119a:	44cc      	add	ip, r9
 802119c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80211a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80211a4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80211a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80211ac:	ea4c 0909 	orr.w	r9, ip, r9
 80211b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80211b4:	884f      	ldrh	r7, [r1, #2]
 80211b6:	d019      	beq.n	80211ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 80211b8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80211bc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80211c0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211c4:	fb08 f807 	mul.w	r8, r8, r7
 80211c8:	fb0a fc0c 	mul.w	ip, sl, ip
 80211cc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80211d0:	f108 0b20 	add.w	fp, r8, #32
 80211d4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80211d8:	44bc      	add	ip, r7
 80211da:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80211de:	0a3f      	lsrs	r7, r7, #8
 80211e0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80211e4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211e8:	ea4c 0707 	orr.w	r7, ip, r7
 80211ec:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80211f0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80211f4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80211f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80211fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021200:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021204:	ea4c 0909 	orr.w	r9, ip, r9
 8021208:	ea4a 0707 	orr.w	r7, sl, r7
 802120c:	2800      	cmp	r0, #0
 802120e:	f000 80cc 	beq.w	80213aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 8021212:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021214:	eb01 0c04 	add.w	ip, r1, r4
 8021218:	f831 8004 	ldrh.w	r8, [r1, r4]
 802121c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802121e:	29ff      	cmp	r1, #255	; 0xff
 8021220:	d01a      	beq.n	8021258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 8021222:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021224:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8021228:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802122c:	fb04 fb08 	mul.w	fp, r4, r8
 8021230:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021234:	fb0a fa01 	mul.w	sl, sl, r1
 8021238:	f10b 0120 	add.w	r1, fp, #32
 802123c:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8021240:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8021244:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021248:	44d0      	add	r8, sl
 802124a:	0a09      	lsrs	r1, r1, #8
 802124c:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8021250:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021254:	ea48 0801 	orr.w	r8, r8, r1
 8021258:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802125a:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 802125e:	2cff      	cmp	r4, #255	; 0xff
 8021260:	d01a      	beq.n	8021298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8021262:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8021266:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802126a:	fb04 fb01 	mul.w	fp, r4, r1
 802126e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021272:	fb0a fa0c 	mul.w	sl, sl, ip
 8021276:	f10b 0c20 	add.w	ip, fp, #32
 802127a:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 802127e:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8021282:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021286:	4451      	add	r1, sl
 8021288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802128c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021290:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021294:	ea41 010c 	orr.w	r1, r1, ip
 8021298:	fb10 fc02 	smulbb	ip, r0, r2
 802129c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80212a0:	f1c0 0a10 	rsb	sl, r0, #16
 80212a4:	ebaa 0a02 	sub.w	sl, sl, r2
 80212a8:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80212ac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80212b0:	437a      	muls	r2, r7
 80212b2:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 80212b6:	040f      	lsls	r7, r1, #16
 80212b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80212bc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80212c0:	fb09 220a 	mla	r2, r9, sl, r2
 80212c4:	ea4b 0808 	orr.w	r8, fp, r8
 80212c8:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 80212cc:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80212d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80212d4:	fb00 2208 	mla	r2, r0, r8, r2
 80212d8:	4339      	orrs	r1, r7
 80212da:	fb0c 2201 	mla	r2, ip, r1, r2
 80212de:	ea4f 5952 	mov.w	r9, r2, lsr #21
 80212e2:	0952      	lsrs	r2, r2, #5
 80212e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80212e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80212ec:	ea49 0202 	orr.w	r2, r9, r2
 80212f0:	2bff      	cmp	r3, #255	; 0xff
 80212f2:	b292      	uxth	r2, r2
 80212f4:	d102      	bne.n	80212fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 80212f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80212f8:	29ff      	cmp	r1, #255	; 0xff
 80212fa:	d067      	beq.n	80213cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 80212fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80212fe:	f8be 0000 	ldrh.w	r0, [lr]
 8021302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021304:	434b      	muls	r3, r1
 8021306:	1c59      	adds	r1, r3, #1
 8021308:	eb01 2323 	add.w	r3, r1, r3, asr #8
 802130c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021310:	1201      	asrs	r1, r0, #8
 8021312:	b2db      	uxtb	r3, r3
 8021314:	1217      	asrs	r7, r2, #8
 8021316:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802131a:	fb11 f103 	smulbb	r1, r1, r3
 802131e:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 8021322:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021326:	00c0      	lsls	r0, r0, #3
 8021328:	fb07 1704 	mla	r7, r7, r4, r1
 802132c:	b2c0      	uxtb	r0, r0
 802132e:	10d1      	asrs	r1, r2, #3
 8021330:	00d2      	lsls	r2, r2, #3
 8021332:	fb10 f003 	smulbb	r0, r0, r3
 8021336:	b2d2      	uxtb	r2, r2
 8021338:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802133c:	fb02 0204 	mla	r2, r2, r4, r0
 8021340:	fb1c fc03 	smulbb	ip, ip, r3
 8021344:	b2bf      	uxth	r7, r7
 8021346:	b292      	uxth	r2, r2
 8021348:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802134c:	fb01 c104 	mla	r1, r1, r4, ip
 8021350:	1c7b      	adds	r3, r7, #1
 8021352:	f102 0c01 	add.w	ip, r2, #1
 8021356:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802135a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 802135e:	b289      	uxth	r1, r1
 8021360:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021364:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021368:	ea47 070c 	orr.w	r7, r7, ip
 802136c:	f101 0c01 	add.w	ip, r1, #1
 8021370:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021374:	0949      	lsrs	r1, r1, #5
 8021376:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802137a:	430f      	orrs	r7, r1
 802137c:	f8ae 7000 	strh.w	r7, [lr]
 8021380:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021382:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021384:	4413      	add	r3, r2
 8021386:	932b      	str	r3, [sp, #172]	; 0xac
 8021388:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802138a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802138c:	441a      	add	r2, r3
 802138e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021390:	922c      	str	r2, [sp, #176]	; 0xb0
 8021392:	3b01      	subs	r3, #1
 8021394:	f10e 0e02 	add.w	lr, lr, #2
 8021398:	9315      	str	r3, [sp, #84]	; 0x54
 802139a:	e489      	b.n	8020cb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802139c:	fb08 f101 	mul.w	r1, r8, r1
 80213a0:	fb09 1303 	mla	r3, r9, r3, r1
 80213a4:	e6da      	b.n	802115c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 80213a6:	46b9      	mov	r9, r7
 80213a8:	e702      	b.n	80211b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 80213aa:	f1c2 0110 	rsb	r1, r2, #16
 80213ae:	437a      	muls	r2, r7
 80213b0:	fb09 2901 	mla	r9, r9, r1, r2
 80213b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80213b8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80213bc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80213c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80213c4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80213c8:	4302      	orrs	r2, r0
 80213ca:	e791      	b.n	80212f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 80213cc:	f8ae 2000 	strh.w	r2, [lr]
 80213d0:	e7d6      	b.n	8021380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 80213d2:	b019      	add	sp, #100	; 0x64
 80213d4:	ecbd 8b08 	vpop	{d8-d11}
 80213d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80213dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e0:	b087      	sub	sp, #28
 80213e2:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 80213e6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80213ea:	9105      	str	r1, [sp, #20]
 80213ec:	fb00 e604 	mla	r6, r0, r4, lr
 80213f0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 80213f4:	9102      	str	r1, [sp, #8]
 80213f6:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 80213fa:	9103      	str	r1, [sp, #12]
 80213fc:	9905      	ldr	r1, [sp, #20]
 80213fe:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8021402:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8021406:	8809      	ldrh	r1, [r1, #0]
 8021408:	2800      	cmp	r0, #0
 802140a:	eb02 0a06 	add.w	sl, r2, r6
 802140e:	f2c0 80ca 	blt.w	80215a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8021412:	4287      	cmp	r7, r0
 8021414:	f340 80c7 	ble.w	80215a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8021418:	f1be 0f00 	cmp.w	lr, #0
 802141c:	f2c0 80bf 	blt.w	802159e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8021420:	4574      	cmp	r4, lr
 8021422:	f340 80bc 	ble.w	802159e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8021426:	f812 c006 	ldrb.w	ip, [r2, r6]
 802142a:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 802142e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021432:	d01c      	beq.n	802146e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 8021434:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8021438:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802143c:	4372      	muls	r2, r6
 802143e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8021442:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8021446:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802144a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802144e:	fb0c f609 	mul.w	r6, ip, r9
 8021452:	eb03 0902 	add.w	r9, r3, r2
 8021456:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 802145a:	f106 0820 	add.w	r8, r6, #32
 802145e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8021462:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021466:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802146a:	ea49 0908 	orr.w	r9, r9, r8
 802146e:	fa1f f989 	uxth.w	r9, r9
 8021472:	f11e 0301 	adds.w	r3, lr, #1
 8021476:	f100 809b 	bmi.w	80215b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 802147a:	429c      	cmp	r4, r3
 802147c:	f340 8098 	ble.w	80215b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8021480:	2d00      	cmp	r5, #0
 8021482:	f000 8095 	beq.w	80215b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8021486:	f89a 6001 	ldrb.w	r6, [sl, #1]
 802148a:	9b03      	ldr	r3, [sp, #12]
 802148c:	2eff      	cmp	r6, #255	; 0xff
 802148e:	885b      	ldrh	r3, [r3, #2]
 8021490:	d01b      	beq.n	80214ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 8021492:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8021496:	ea4f 08e6 	mov.w	r8, r6, asr #3
 802149a:	fb08 f202 	mul.w	r2, r8, r2
 802149e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214a2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80214a6:	fb06 f803 	mul.w	r8, r6, r3
 80214aa:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80214ae:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80214b2:	441a      	add	r2, r3
 80214b4:	f108 0320 	add.w	r3, r8, #32
 80214b8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80214bc:	0a1b      	lsrs	r3, r3, #8
 80214be:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80214c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214c6:	ea4b 0303 	orr.w	r3, fp, r3
 80214ca:	b29b      	uxth	r3, r3
 80214cc:	9301      	str	r3, [sp, #4]
 80214ce:	3001      	adds	r0, #1
 80214d0:	d474      	bmi.n	80215bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80214d2:	4287      	cmp	r7, r0
 80214d4:	dd72      	ble.n	80215bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80214d6:	9a02      	ldr	r2, [sp, #8]
 80214d8:	2a00      	cmp	r2, #0
 80214da:	f000 8111 	beq.w	8021700 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 80214de:	f1be 0f00 	cmp.w	lr, #0
 80214e2:	db68      	blt.n	80215b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80214e4:	4574      	cmp	r4, lr
 80214e6:	dd66      	ble.n	80215b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80214e8:	f81a 7004 	ldrb.w	r7, [sl, r4]
 80214ec:	9a03      	ldr	r2, [sp, #12]
 80214ee:	2fff      	cmp	r7, #255	; 0xff
 80214f0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80214f4:	d01c      	beq.n	8021530 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 80214f6:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 80214fa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80214fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021502:	fb07 fb00 	mul.w	fp, r7, r0
 8021506:	fb08 f802 	mul.w	r8, r8, r2
 802150a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802150e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8021512:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021516:	4490      	add	r8, r2
 8021518:	f10b 0220 	add.w	r2, fp, #32
 802151c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8021520:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021524:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8021528:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802152c:	ea40 000b 	orr.w	r0, r0, fp
 8021530:	b280      	uxth	r0, r0
 8021532:	f11e 0e01 	adds.w	lr, lr, #1
 8021536:	d446      	bmi.n	80215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8021538:	4574      	cmp	r4, lr
 802153a:	dd44      	ble.n	80215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 802153c:	2d00      	cmp	r5, #0
 802153e:	d045      	beq.n	80215cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8021540:	1c62      	adds	r2, r4, #1
 8021542:	9b03      	ldr	r3, [sp, #12]
 8021544:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021548:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802154c:	2cff      	cmp	r4, #255	; 0xff
 802154e:	d01c      	beq.n	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 8021550:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8021554:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021558:	fb08 fe0e 	mul.w	lr, r8, lr
 802155c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8021560:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021564:	fb04 f802 	mul.w	r8, r4, r2
 8021568:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 802156c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021570:	4472      	add	r2, lr
 8021572:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8021576:	f108 0a20 	add.w	sl, r8, #32
 802157a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 802157e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021582:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021586:	ea42 020a 	orr.w	r2, r2, sl
 802158a:	b292      	uxth	r2, r2
 802158c:	2d0f      	cmp	r5, #15
 802158e:	d91f      	bls.n	80215d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 8021590:	4b5f      	ldr	r3, [pc, #380]	; (8021710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 8021592:	4a60      	ldr	r2, [pc, #384]	; (8021714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 8021594:	4860      	ldr	r0, [pc, #384]	; (8021718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 8021596:	f240 210d 	movw	r1, #525	; 0x20d
 802159a:	f003 fc13 	bl	8024dc4 <__assert_func>
 802159e:	4689      	mov	r9, r1
 80215a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80215a4:	e765      	b.n	8021472 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 80215a6:	26ff      	movs	r6, #255	; 0xff
 80215a8:	9101      	str	r1, [sp, #4]
 80215aa:	4689      	mov	r9, r1
 80215ac:	46b4      	mov	ip, r6
 80215ae:	e78e      	b.n	80214ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 80215b0:	9101      	str	r1, [sp, #4]
 80215b2:	26ff      	movs	r6, #255	; 0xff
 80215b4:	e78b      	b.n	80214ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 80215b6:	4608      	mov	r0, r1
 80215b8:	27ff      	movs	r7, #255	; 0xff
 80215ba:	e7ba      	b.n	8021532 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 80215bc:	24ff      	movs	r4, #255	; 0xff
 80215be:	460a      	mov	r2, r1
 80215c0:	4608      	mov	r0, r1
 80215c2:	4627      	mov	r7, r4
 80215c4:	e7e2      	b.n	802158c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80215c6:	460a      	mov	r2, r1
 80215c8:	24ff      	movs	r4, #255	; 0xff
 80215ca:	e7df      	b.n	802158c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80215cc:	460a      	mov	r2, r1
 80215ce:	24ff      	movs	r4, #255	; 0xff
 80215d0:	9b02      	ldr	r3, [sp, #8]
 80215d2:	2b0f      	cmp	r3, #15
 80215d4:	d8dc      	bhi.n	8021590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 80215d6:	f8bd e008 	ldrh.w	lr, [sp, #8]
 80215da:	fa1f f885 	uxth.w	r8, r5
 80215de:	fb08 fa0e 	mul.w	sl, r8, lr
 80215e2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80215e6:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 80215ea:	9303      	str	r3, [sp, #12]
 80215ec:	fa1f f38e 	uxth.w	r3, lr
 80215f0:	9304      	str	r3, [sp, #16]
 80215f2:	ea4f 4809 	mov.w	r8, r9, lsl #16
 80215f6:	9b02      	ldr	r3, [sp, #8]
 80215f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80215fc:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8021600:	fb15 fe03 	smulbb	lr, r5, r3
 8021604:	ea48 0809 	orr.w	r8, r8, r9
 8021608:	f1c3 0910 	rsb	r9, r3, #16
 802160c:	9b01      	ldr	r3, [sp, #4]
 802160e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8021612:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021616:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802161a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802161e:	eba9 0905 	sub.w	r9, r9, r5
 8021622:	ea4b 0303 	orr.w	r3, fp, r3
 8021626:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 802162a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802162e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8021632:	436b      	muls	r3, r5
 8021634:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021638:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802163c:	ea4b 0202 	orr.w	r2, fp, r2
 8021640:	fb09 3308 	mla	r3, r9, r8, r3
 8021644:	fb0e 3302 	mla	r3, lr, r2, r3
 8021648:	0402      	lsls	r2, r0, #16
 802164a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802164e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021652:	4310      	orrs	r0, r2
 8021654:	9a02      	ldr	r2, [sp, #8]
 8021656:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 802165a:	9a03      	ldr	r2, [sp, #12]
 802165c:	fb0e 3e00 	mla	lr, lr, r0, r3
 8021660:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8021664:	9a04      	ldr	r2, [sp, #16]
 8021666:	1a80      	subs	r0, r0, r2
 8021668:	9a03      	ldr	r2, [sp, #12]
 802166a:	eba2 020a 	sub.w	r2, r2, sl
 802166e:	b292      	uxth	r2, r2
 8021670:	b280      	uxth	r0, r0
 8021672:	4356      	muls	r6, r2
 8021674:	9a04      	ldr	r2, [sp, #16]
 8021676:	fb0c 6600 	mla	r6, ip, r0, r6
 802167a:	fb02 6707 	mla	r7, r2, r7, r6
 802167e:	fb0a 7404 	mla	r4, sl, r4, r7
 8021682:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8021686:	1208      	asrs	r0, r1, #8
 8021688:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802168c:	ea6f 2424 	mvn.w	r4, r4, asr #8
 8021690:	b2e4      	uxtb	r4, r4
 8021692:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021696:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802169a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802169e:	4360      	muls	r0, r4
 80216a0:	ea43 0e0e 	orr.w	lr, r3, lr
 80216a4:	fa1f f38e 	uxth.w	r3, lr
 80216a8:	1c42      	adds	r2, r0, #1
 80216aa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80216ae:	1218      	asrs	r0, r3, #8
 80216b0:	10cd      	asrs	r5, r1, #3
 80216b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80216b6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80216ba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80216be:	4a17      	ldr	r2, [pc, #92]	; (802171c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 80216c0:	4365      	muls	r5, r4
 80216c2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80216c6:	1c6a      	adds	r2, r5, #1
 80216c8:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80216cc:	00c9      	lsls	r1, r1, #3
 80216ce:	10da      	asrs	r2, r3, #3
 80216d0:	b2c9      	uxtb	r1, r1
 80216d2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80216d6:	434c      	muls	r4, r1
 80216d8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80216dc:	1c61      	adds	r1, r4, #1
 80216de:	00d2      	lsls	r2, r2, #3
 80216e0:	00db      	lsls	r3, r3, #3
 80216e2:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 80216e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216ea:	b2db      	uxtb	r3, r3
 80216ec:	4302      	orrs	r2, r0
 80216ee:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80216f2:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80216f6:	9a05      	ldr	r2, [sp, #20]
 80216f8:	8013      	strh	r3, [r2, #0]
 80216fa:	b007      	add	sp, #28
 80216fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021700:	2d0f      	cmp	r5, #15
 8021702:	f63f af45 	bhi.w	8021590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 8021706:	24ff      	movs	r4, #255	; 0xff
 8021708:	460a      	mov	r2, r1
 802170a:	4608      	mov	r0, r1
 802170c:	4627      	mov	r7, r4
 802170e:	e762      	b.n	80215d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 8021710:	0805441c 	.word	0x0805441c
 8021714:	08054975 	.word	0x08054975
 8021718:	080544a4 	.word	0x080544a4
 802171c:	fffff800 	.word	0xfffff800

08021720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021724:	ed2d 8b08 	vpush	{d8-d11}
 8021728:	b095      	sub	sp, #84	; 0x54
 802172a:	eeb0 aa40 	vmov.f32	s20, s0
 802172e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8021730:	9306      	str	r3, [sp, #24]
 8021732:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021736:	9110      	str	r1, [sp, #64]	; 0x40
 8021738:	9308      	str	r3, [sp, #32]
 802173a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802173e:	9013      	str	r0, [sp, #76]	; 0x4c
 8021740:	6870      	ldr	r0, [r6, #4]
 8021742:	9212      	str	r2, [sp, #72]	; 0x48
 8021744:	fb00 1303 	mla	r3, r0, r3, r1
 8021748:	6831      	ldr	r1, [r6, #0]
 802174a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802174c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8021750:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8021754:	9307      	str	r3, [sp, #28]
 8021756:	6813      	ldr	r3, [r2, #0]
 8021758:	9309      	str	r3, [sp, #36]	; 0x24
 802175a:	6853      	ldr	r3, [r2, #4]
 802175c:	930a      	str	r3, [sp, #40]	; 0x28
 802175e:	006b      	lsls	r3, r5, #1
 8021760:	eef0 9a60 	vmov.f32	s19, s1
 8021764:	eeb0 9a41 	vmov.f32	s18, s2
 8021768:	eeb0 8a62 	vmov.f32	s16, s5
 802176c:	eef0 8a43 	vmov.f32	s17, s6
 8021770:	eef0 ba44 	vmov.f32	s23, s8
 8021774:	eeb0 ba64 	vmov.f32	s22, s9
 8021778:	eef0 aa45 	vmov.f32	s21, s10
 802177c:	930f      	str	r3, [sp, #60]	; 0x3c
 802177e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021780:	2b00      	cmp	r3, #0
 8021782:	dc03      	bgt.n	802178c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021786:	2b00      	cmp	r3, #0
 8021788:	f340 83a3 	ble.w	8021ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 802178c:	9b06      	ldr	r3, [sp, #24]
 802178e:	2b00      	cmp	r3, #0
 8021790:	f340 81bc 	ble.w	8021b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 8021794:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021798:	1412      	asrs	r2, r2, #16
 802179a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802179e:	d42f      	bmi.n	8021800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80217a0:	1c51      	adds	r1, r2, #1
 80217a2:	428d      	cmp	r5, r1
 80217a4:	dd2f      	ble.n	8021806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	db2d      	blt.n	8021806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217aa:	9808      	ldr	r0, [sp, #32]
 80217ac:	1c59      	adds	r1, r3, #1
 80217ae:	4288      	cmp	r0, r1
 80217b0:	dd29      	ble.n	8021806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217b2:	9b06      	ldr	r3, [sp, #24]
 80217b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80217b6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80217b8:	3b01      	subs	r3, #1
 80217ba:	fb02 1203 	mla	r2, r2, r3, r1
 80217be:	1412      	asrs	r2, r2, #16
 80217c0:	d42b      	bmi.n	802181a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80217c2:	3201      	adds	r2, #1
 80217c4:	4295      	cmp	r5, r2
 80217c6:	dd28      	ble.n	802181a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80217c8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80217ca:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80217cc:	fb02 1303 	mla	r3, r2, r3, r1
 80217d0:	141b      	asrs	r3, r3, #16
 80217d2:	d422      	bmi.n	802181a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80217d4:	9a08      	ldr	r2, [sp, #32]
 80217d6:	3301      	adds	r3, #1
 80217d8:	429a      	cmp	r2, r3
 80217da:	dd1e      	ble.n	802181a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80217dc:	9b06      	ldr	r3, [sp, #24]
 80217de:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80217e2:	9311      	str	r3, [sp, #68]	; 0x44
 80217e4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80217e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	f300 8208 	bgt.w	8021c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 80217f0:	9b06      	ldr	r3, [sp, #24]
 80217f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217f6:	9b07      	ldr	r3, [sp, #28]
 80217f8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80217fc:	9307      	str	r3, [sp, #28]
 80217fe:	e187      	b.n	8021b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 8021800:	1c57      	adds	r7, r2, #1
 8021802:	f040 8174 	bne.w	8021aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8021806:	42aa      	cmp	r2, r5
 8021808:	f280 8171 	bge.w	8021aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 802180c:	1c5e      	adds	r6, r3, #1
 802180e:	f2c0 816e 	blt.w	8021aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8021812:	9a08      	ldr	r2, [sp, #32]
 8021814:	4293      	cmp	r3, r2
 8021816:	f280 816a 	bge.w	8021aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 802181a:	9b06      	ldr	r3, [sp, #24]
 802181c:	9f07      	ldr	r7, [sp, #28]
 802181e:	9311      	str	r3, [sp, #68]	; 0x44
 8021820:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021826:	2b00      	cmp	r3, #0
 8021828:	dde2      	ble.n	80217f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802182a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802182c:	1419      	asrs	r1, r3, #16
 802182e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021830:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021836:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802183a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802183c:	141b      	asrs	r3, r3, #16
 802183e:	f100 81c4 	bmi.w	8021bca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 8021842:	1c58      	adds	r0, r3, #1
 8021844:	4285      	cmp	r5, r0
 8021846:	f340 81c2 	ble.w	8021bce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802184a:	2900      	cmp	r1, #0
 802184c:	f2c0 81bf 	blt.w	8021bce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8021850:	9c08      	ldr	r4, [sp, #32]
 8021852:	1c48      	adds	r0, r1, #1
 8021854:	4284      	cmp	r4, r0
 8021856:	f340 81ba 	ble.w	8021bce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802185a:	fb01 3105 	mla	r1, r1, r5, r3
 802185e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021860:	fa1f fe82 	uxth.w	lr, r2
 8021864:	eb03 0a01 	add.w	sl, r3, r1
 8021868:	ea4f 100e 	mov.w	r0, lr, lsl #4
 802186c:	f813 9001 	ldrb.w	r9, [r3, r1]
 8021870:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021874:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021878:	b29b      	uxth	r3, r3
 802187a:	f1bc 0f00 	cmp.w	ip, #0
 802187e:	f000 8186 	beq.w	8021b8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 8021882:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8021886:	940b      	str	r4, [sp, #44]	; 0x2c
 8021888:	eb0a 0b05 	add.w	fp, sl, r5
 802188c:	fa1f fa8c 	uxth.w	sl, ip
 8021890:	fb0a fe0e 	mul.w	lr, sl, lr
 8021894:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021898:	fa1f fa8a 	uxth.w	sl, sl
 802189c:	eba0 000e 	sub.w	r0, r0, lr
 80218a0:	eba3 030a 	sub.w	r3, r3, sl
 80218a4:	b280      	uxth	r0, r0
 80218a6:	fb08 f000 	mul.w	r0, r8, r0
 80218aa:	b29b      	uxth	r3, r3
 80218ac:	fb09 0303 	mla	r3, r9, r3, r0
 80218b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80218b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80218b6:	940c      	str	r4, [sp, #48]	; 0x30
 80218b8:	fb0a 3300 	mla	r3, sl, r0, r3
 80218bc:	fb0e 3304 	mla	r3, lr, r4, r3
 80218c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	f000 8105 	beq.w	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 80218ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80218cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80218ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80218d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80218d6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80218da:	f000 815d 	beq.w	8021b98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 80218de:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80218e2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80218e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80218ea:	fb09 f101 	mul.w	r1, r9, r1
 80218ee:	fb0a fe0e 	mul.w	lr, sl, lr
 80218f2:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80218f6:	f101 0b20 	add.w	fp, r1, #32
 80218fa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80218fe:	44ce      	add	lr, r9
 8021900:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8021904:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021908:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802190c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021910:	ea4e 0909 	orr.w	r9, lr, r9
 8021914:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021918:	8841      	ldrh	r1, [r0, #2]
 802191a:	d019      	beq.n	8021950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 802191c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021920:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8021924:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021928:	fb0a fe0e 	mul.w	lr, sl, lr
 802192c:	fb08 f801 	mul.w	r8, r8, r1
 8021930:	f108 0b20 	add.w	fp, r8, #32
 8021934:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8021938:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802193c:	448e      	add	lr, r1
 802193e:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8021942:	0a09      	lsrs	r1, r1, #8
 8021944:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8021948:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802194c:	ea4a 0101 	orr.w	r1, sl, r1
 8021950:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021954:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021958:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802195c:	ea4e 0909 	orr.w	r9, lr, r9
 8021960:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8021964:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021968:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802196c:	ea4e 0e01 	orr.w	lr, lr, r1
 8021970:	f1bc 0f00 	cmp.w	ip, #0
 8021974:	f000 8112 	beq.w	8021b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8021978:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802197a:	eb00 0801 	add.w	r8, r0, r1
 802197e:	5a41      	ldrh	r1, [r0, r1]
 8021980:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021982:	28ff      	cmp	r0, #255	; 0xff
 8021984:	d019      	beq.n	80219ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8021986:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021988:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802198c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021990:	fb04 fb01 	mul.w	fp, r4, r1
 8021994:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021998:	fb0a fa00 	mul.w	sl, sl, r0
 802199c:	f10b 0020 	add.w	r0, fp, #32
 80219a0:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 80219a4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80219a8:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80219ac:	4451      	add	r1, sl
 80219ae:	0a00      	lsrs	r0, r0, #8
 80219b0:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80219b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219b8:	4301      	orrs	r1, r0
 80219ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80219bc:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80219c0:	2cff      	cmp	r4, #255	; 0xff
 80219c2:	d01a      	beq.n	80219fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80219c4:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 80219c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219cc:	fb04 fb00 	mul.w	fp, r4, r0
 80219d0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80219d4:	fb0a fa08 	mul.w	sl, sl, r8
 80219d8:	f10b 0820 	add.w	r8, fp, #32
 80219dc:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 80219e0:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 80219e4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80219e8:	4450      	add	r0, sl
 80219ea:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80219ee:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80219f2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80219f6:	ea40 0008 	orr.w	r0, r0, r8
 80219fa:	fb1c f802 	smulbb	r8, ip, r2
 80219fe:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021a02:	f1cc 0a10 	rsb	sl, ip, #16
 8021a06:	ebaa 0a02 	sub.w	sl, sl, r2
 8021a0a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021a0e:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8021a12:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8021a16:	fb0e f202 	mul.w	r2, lr, r2
 8021a1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021a1e:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8021a22:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021a26:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8021a2a:	fb09 220a 	mla	r2, r9, sl, r2
 8021a2e:	ea4b 0101 	orr.w	r1, fp, r1
 8021a32:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a3a:	fb0c 2201 	mla	r2, ip, r1, r2
 8021a3e:	ea4e 0000 	orr.w	r0, lr, r0
 8021a42:	fb08 2800 	mla	r8, r8, r0, r2
 8021a46:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8021a4a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021a4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a52:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021a56:	ea42 0808 	orr.w	r8, r2, r8
 8021a5a:	fa1f f288 	uxth.w	r2, r8
 8021a5e:	2bff      	cmp	r3, #255	; 0xff
 8021a60:	f000 80b1 	beq.w	8021bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8021a64:	f8b7 8000 	ldrh.w	r8, [r7]
 8021a68:	43db      	mvns	r3, r3
 8021a6a:	ea4f 2028 	mov.w	r0, r8, asr #8
 8021a6e:	fa5f fe83 	uxtb.w	lr, r3
 8021a72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a76:	fb00 f00e 	mul.w	r0, r0, lr
 8021a7a:	1c41      	adds	r1, r0, #1
 8021a7c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021a80:	1210      	asrs	r0, r2, #8
 8021a82:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021a86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a8a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8021a8e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021a92:	495a      	ldr	r1, [pc, #360]	; (8021bfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8021a94:	fb0c fc0e 	mul.w	ip, ip, lr
 8021a98:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8021a9c:	f10c 0101 	add.w	r1, ip, #1
 8021aa0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021aa4:	10d1      	asrs	r1, r2, #3
 8021aa6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021aaa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8021aae:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8021ab2:	b2db      	uxtb	r3, r3
 8021ab4:	00c9      	lsls	r1, r1, #3
 8021ab6:	fb03 f30e 	mul.w	r3, r3, lr
 8021aba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021abe:	4301      	orrs	r1, r0
 8021ac0:	1c58      	adds	r0, r3, #1
 8021ac2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021ac6:	00d3      	lsls	r3, r2, #3
 8021ac8:	b2db      	uxtb	r3, r3
 8021aca:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021ace:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8021ad2:	803b      	strh	r3, [r7, #0]
 8021ad4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021ad6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ad8:	4413      	add	r3, r2
 8021ada:	9327      	str	r3, [sp, #156]	; 0x9c
 8021adc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021ade:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021ae0:	441a      	add	r2, r3
 8021ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021ae4:	9228      	str	r2, [sp, #160]	; 0xa0
 8021ae6:	3b01      	subs	r3, #1
 8021ae8:	3702      	adds	r7, #2
 8021aea:	9311      	str	r3, [sp, #68]	; 0x44
 8021aec:	e69a      	b.n	8021824 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021aee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021af0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021af2:	4413      	add	r3, r2
 8021af4:	9327      	str	r3, [sp, #156]	; 0x9c
 8021af6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021af8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021afa:	441a      	add	r2, r3
 8021afc:	9b06      	ldr	r3, [sp, #24]
 8021afe:	9228      	str	r2, [sp, #160]	; 0xa0
 8021b00:	3b01      	subs	r3, #1
 8021b02:	9306      	str	r3, [sp, #24]
 8021b04:	9b07      	ldr	r3, [sp, #28]
 8021b06:	3302      	adds	r3, #2
 8021b08:	9307      	str	r3, [sp, #28]
 8021b0a:	e63f      	b.n	802178c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021b0c:	f47f ae51 	bne.w	80217b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021b10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	f340 81dd 	ble.w	8021ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8021b18:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b20:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021b26:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b2e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b32:	eef0 6a48 	vmov.f32	s13, s16
 8021b36:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b42:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8021b46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b4a:	eef0 6a68 	vmov.f32	s13, s17
 8021b4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b52:	ee18 2a10 	vmov	r2, s16
 8021b56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b5e:	ee18 2a90 	vmov	r2, s17
 8021b62:	9329      	str	r3, [sp, #164]	; 0xa4
 8021b64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b6a:	932a      	str	r3, [sp, #168]	; 0xa8
 8021b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021b70:	3b01      	subs	r3, #1
 8021b72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b76:	9310      	str	r3, [sp, #64]	; 0x40
 8021b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021b7a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8021b7e:	bf08      	it	eq
 8021b80:	4613      	moveq	r3, r2
 8021b82:	9306      	str	r3, [sp, #24]
 8021b84:	eef0 8a67 	vmov.f32	s17, s15
 8021b88:	eeb0 8a47 	vmov.f32	s16, s14
 8021b8c:	e5f7      	b.n	802177e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8021b8e:	fb08 f000 	mul.w	r0, r8, r0
 8021b92:	fb09 0303 	mla	r3, r9, r3, r0
 8021b96:	e693      	b.n	80218c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8021b98:	4689      	mov	r9, r1
 8021b9a:	e6bb      	b.n	8021914 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8021b9c:	f1c2 0010 	rsb	r0, r2, #16
 8021ba0:	fb0e f202 	mul.w	r2, lr, r2
 8021ba4:	fb09 2900 	mla	r9, r9, r0, r2
 8021ba8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021bac:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021bb0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021bb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bb8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021bbc:	ea42 0909 	orr.w	r9, r2, r9
 8021bc0:	fa1f f289 	uxth.w	r2, r9
 8021bc4:	e74b      	b.n	8021a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8021bc6:	803a      	strh	r2, [r7, #0]
 8021bc8:	e784      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021bca:	1c5c      	adds	r4, r3, #1
 8021bcc:	d182      	bne.n	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021bce:	429d      	cmp	r5, r3
 8021bd0:	dd80      	ble.n	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021bd2:	1c48      	adds	r0, r1, #1
 8021bd4:	f6ff af7e 	blt.w	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021bd8:	9808      	ldr	r0, [sp, #32]
 8021bda:	4288      	cmp	r0, r1
 8021bdc:	f77f af7a 	ble.w	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021be0:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8021be4:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8021be8:	e9cd 5000 	strd	r5, r0, [sp]
 8021bec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8021bf0:	4639      	mov	r1, r7
 8021bf2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021bf4:	f7ff fbf2 	bl	80213dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021bf8:	e76c      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021bfa:	bf00      	nop
 8021bfc:	fffff800 	.word	0xfffff800
 8021c00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c02:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021c06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c08:	141f      	asrs	r7, r3, #16
 8021c0a:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021c0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c10:	141b      	asrs	r3, r3, #16
 8021c12:	fb05 3707 	mla	r7, r5, r7, r3
 8021c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c18:	fa1f fc82 	uxth.w	ip, r2
 8021c1c:	eb03 0a07 	add.w	sl, r3, r7
 8021c20:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8021c24:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021c28:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021c2c:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8021c30:	b29b      	uxth	r3, r3
 8021c32:	2800      	cmp	r0, #0
 8021c34:	f000 8132 	beq.w	8021e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 8021c38:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8021c3c:	940d      	str	r4, [sp, #52]	; 0x34
 8021c3e:	eb0a 0b05 	add.w	fp, sl, r5
 8021c42:	fa1f fa80 	uxth.w	sl, r0
 8021c46:	fb0a fc0c 	mul.w	ip, sl, ip
 8021c4a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021c4e:	fa1f fa8a 	uxth.w	sl, sl
 8021c52:	eba1 010c 	sub.w	r1, r1, ip
 8021c56:	eba3 030a 	sub.w	r3, r3, sl
 8021c5a:	b289      	uxth	r1, r1
 8021c5c:	fb08 f101 	mul.w	r1, r8, r1
 8021c60:	b29b      	uxth	r3, r3
 8021c62:	fb09 1303 	mla	r3, r9, r3, r1
 8021c66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021c68:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021c6c:	940e      	str	r4, [sp, #56]	; 0x38
 8021c6e:	fb0a 3301 	mla	r3, sl, r1, r3
 8021c72:	fb0c 3304 	mla	r3, ip, r4, r3
 8021c76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	f000 8100 	beq.w	8021e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8021c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021c82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021c84:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c88:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8021c8c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021c90:	f000 8109 	beq.w	8021ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 8021c94:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021c98:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021c9c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021ca0:	fb09 f707 	mul.w	r7, r9, r7
 8021ca4:	fb0a fc0c 	mul.w	ip, sl, ip
 8021ca8:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021cac:	f107 0b20 	add.w	fp, r7, #32
 8021cb0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021cb4:	44cc      	add	ip, r9
 8021cb6:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021cba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021cbe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021cc2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021cc6:	ea4c 0909 	orr.w	r9, ip, r9
 8021cca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021cce:	884f      	ldrh	r7, [r1, #2]
 8021cd0:	d019      	beq.n	8021d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 8021cd2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021cd6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021cda:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021cde:	fb08 f807 	mul.w	r8, r8, r7
 8021ce2:	fb0a fc0c 	mul.w	ip, sl, ip
 8021ce6:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021cea:	f108 0b20 	add.w	fp, r8, #32
 8021cee:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021cf2:	44bc      	add	ip, r7
 8021cf4:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021cf8:	0a3f      	lsrs	r7, r7, #8
 8021cfa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021cfe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d02:	ea4c 0707 	orr.w	r7, ip, r7
 8021d06:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021d0a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021d0e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d12:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021d16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d1a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021d1e:	ea4c 0909 	orr.w	r9, ip, r9
 8021d22:	ea4a 0707 	orr.w	r7, sl, r7
 8021d26:	2800      	cmp	r0, #0
 8021d28:	f000 80bf 	beq.w	8021eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 8021d2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d2e:	eb01 0c04 	add.w	ip, r1, r4
 8021d32:	f831 8004 	ldrh.w	r8, [r1, r4]
 8021d36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021d38:	29ff      	cmp	r1, #255	; 0xff
 8021d3a:	d01a      	beq.n	8021d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 8021d3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d3e:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8021d42:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021d46:	fb04 fb08 	mul.w	fp, r4, r8
 8021d4a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021d4e:	fb0a fa01 	mul.w	sl, sl, r1
 8021d52:	f10b 0120 	add.w	r1, fp, #32
 8021d56:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8021d5a:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8021d5e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021d62:	44d0      	add	r8, sl
 8021d64:	0a09      	lsrs	r1, r1, #8
 8021d66:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8021d6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021d6e:	ea48 0801 	orr.w	r8, r8, r1
 8021d72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d74:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8021d78:	2cff      	cmp	r4, #255	; 0xff
 8021d7a:	d01a      	beq.n	8021db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 8021d7c:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8021d80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021d84:	fb04 fb01 	mul.w	fp, r4, r1
 8021d88:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021d8c:	fb0a fa0c 	mul.w	sl, sl, ip
 8021d90:	f10b 0c20 	add.w	ip, fp, #32
 8021d94:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8021d98:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8021d9c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021da0:	4451      	add	r1, sl
 8021da2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021da6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021daa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021dae:	ea41 010c 	orr.w	r1, r1, ip
 8021db2:	fb10 fc02 	smulbb	ip, r0, r2
 8021db6:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021dba:	f1c0 0a10 	rsb	sl, r0, #16
 8021dbe:	ebaa 0a02 	sub.w	sl, sl, r2
 8021dc2:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8021dc6:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021dca:	437a      	muls	r2, r7
 8021dcc:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8021dd0:	040f      	lsls	r7, r1, #16
 8021dd2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021dd6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021dda:	fb09 220a 	mla	r2, r9, sl, r2
 8021dde:	ea4b 0808 	orr.w	r8, fp, r8
 8021de2:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 8021de6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8021dea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021dee:	fb00 2208 	mla	r2, r0, r8, r2
 8021df2:	4339      	orrs	r1, r7
 8021df4:	fb0c 2201 	mla	r2, ip, r1, r2
 8021df8:	ea4f 5952 	mov.w	r9, r2, lsr #21
 8021dfc:	0952      	lsrs	r2, r2, #5
 8021dfe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e06:	ea49 0202 	orr.w	r2, r9, r2
 8021e0a:	2bff      	cmp	r3, #255	; 0xff
 8021e0c:	b292      	uxth	r2, r2
 8021e0e:	d05d      	beq.n	8021ecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 8021e10:	f8be 8000 	ldrh.w	r8, [lr]
 8021e14:	4c31      	ldr	r4, [pc, #196]	; (8021edc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 8021e16:	43db      	mvns	r3, r3
 8021e18:	ea4f 2028 	mov.w	r0, r8, asr #8
 8021e1c:	fa5f fc83 	uxtb.w	ip, r3
 8021e20:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021e24:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8021e28:	fb00 f00c 	mul.w	r0, r0, ip
 8021e2c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e30:	fb07 f10c 	mul.w	r1, r7, ip
 8021e34:	1c47      	adds	r7, r0, #1
 8021e36:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021e3a:	1217      	asrs	r7, r2, #8
 8021e3c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021e40:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021e44:	1c4f      	adds	r7, r1, #1
 8021e46:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8021e4a:	10d1      	asrs	r1, r2, #3
 8021e4c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e50:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8021e54:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8021e58:	b2db      	uxtb	r3, r3
 8021e5a:	00c9      	lsls	r1, r1, #3
 8021e5c:	fb03 f30c 	mul.w	r3, r3, ip
 8021e60:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021e64:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8021e68:	4308      	orrs	r0, r1
 8021e6a:	00d2      	lsls	r2, r2, #3
 8021e6c:	1c59      	adds	r1, r3, #1
 8021e6e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021e72:	b2d2      	uxtb	r2, r2
 8021e74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e78:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8021e7c:	f8ae 0000 	strh.w	r0, [lr]
 8021e80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021e82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021e84:	4413      	add	r3, r2
 8021e86:	9327      	str	r3, [sp, #156]	; 0x9c
 8021e88:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021e8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021e8c:	441a      	add	r2, r3
 8021e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e90:	9228      	str	r2, [sp, #160]	; 0xa0
 8021e92:	3b01      	subs	r3, #1
 8021e94:	f10e 0e02 	add.w	lr, lr, #2
 8021e98:	9311      	str	r3, [sp, #68]	; 0x44
 8021e9a:	e4a5      	b.n	80217e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021e9c:	fb08 f101 	mul.w	r1, r8, r1
 8021ea0:	fb09 1303 	mla	r3, r9, r3, r1
 8021ea4:	e6e7      	b.n	8021c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8021ea6:	46b9      	mov	r9, r7
 8021ea8:	e70f      	b.n	8021cca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 8021eaa:	f1c2 0110 	rsb	r1, r2, #16
 8021eae:	437a      	muls	r2, r7
 8021eb0:	fb09 2901 	mla	r9, r9, r1, r2
 8021eb4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021eb8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021ebc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021ec0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ec4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021ec8:	4302      	orrs	r2, r0
 8021eca:	e79e      	b.n	8021e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 8021ecc:	f8ae 2000 	strh.w	r2, [lr]
 8021ed0:	e7d6      	b.n	8021e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8021ed2:	b015      	add	sp, #84	; 0x54
 8021ed4:	ecbd 8b08 	vpop	{d8-d11}
 8021ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021edc:	fffff800 	.word	0xfffff800

08021ee0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8021ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ee4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8021ee8:	fb0c 4e03 	mla	lr, ip, r3, r4
 8021eec:	f1bc 0f00 	cmp.w	ip, #0
 8021ef0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8021ef4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8021ef8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8021efc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021f00:	8808      	ldrh	r0, [r1, #0]
 8021f02:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8021f06:	db2f      	blt.n	8021f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f08:	45e2      	cmp	sl, ip
 8021f0a:	dd2d      	ble.n	8021f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f0c:	2c00      	cmp	r4, #0
 8021f0e:	db29      	blt.n	8021f64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f10:	42a3      	cmp	r3, r4
 8021f12:	dd27      	ble.n	8021f64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f14:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8021f18:	1c62      	adds	r2, r4, #1
 8021f1a:	d428      	bmi.n	8021f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f1c:	4293      	cmp	r3, r2
 8021f1e:	dd26      	ble.n	8021f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f20:	b32f      	cbz	r7, 8021f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f22:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8021f26:	f11c 0c01 	adds.w	ip, ip, #1
 8021f2a:	d424      	bmi.n	8021f76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f2c:	45e2      	cmp	sl, ip
 8021f2e:	dd22      	ble.n	8021f76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f30:	2e00      	cmp	r6, #0
 8021f32:	f000 809c 	beq.w	802206e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8021f36:	2c00      	cmp	r4, #0
 8021f38:	db1b      	blt.n	8021f72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f3a:	42a3      	cmp	r3, r4
 8021f3c:	dd19      	ble.n	8021f72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f3e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8021f42:	3401      	adds	r4, #1
 8021f44:	d41a      	bmi.n	8021f7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021f46:	42a3      	cmp	r3, r4
 8021f48:	dd18      	ble.n	8021f7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021f4a:	b1cf      	cbz	r7, 8021f80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8021f4c:	3301      	adds	r3, #1
 8021f4e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8021f52:	2f0f      	cmp	r7, #15
 8021f54:	d915      	bls.n	8021f82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8021f56:	4b49      	ldr	r3, [pc, #292]	; (802207c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8021f58:	4a49      	ldr	r2, [pc, #292]	; (8022080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8021f5a:	484a      	ldr	r0, [pc, #296]	; (8022084 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8021f5c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021f60:	f002 ff30 	bl	8024dc4 <__assert_func>
 8021f64:	4681      	mov	r9, r0
 8021f66:	e7d7      	b.n	8021f18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8021f68:	4686      	mov	lr, r0
 8021f6a:	4681      	mov	r9, r0
 8021f6c:	e7db      	b.n	8021f26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021f6e:	4686      	mov	lr, r0
 8021f70:	e7d9      	b.n	8021f26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021f72:	4684      	mov	ip, r0
 8021f74:	e7e5      	b.n	8021f42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8021f76:	4603      	mov	r3, r0
 8021f78:	4684      	mov	ip, r0
 8021f7a:	e7ea      	b.n	8021f52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	e7e8      	b.n	8021f52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021f80:	4603      	mov	r3, r0
 8021f82:	2e0f      	cmp	r6, #15
 8021f84:	d8e7      	bhi.n	8021f56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8021f86:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8021f8a:	fb17 f806 	smulbb	r8, r7, r6
 8021f8e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021f92:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8021f96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021f9a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021f9e:	ea44 0909 	orr.w	r9, r4, r9
 8021fa2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021fa6:	f1c6 0410 	rsb	r4, r6, #16
 8021faa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021fae:	1be4      	subs	r4, r4, r7
 8021fb0:	041a      	lsls	r2, r3, #16
 8021fb2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8021fb6:	ea4a 0e0e 	orr.w	lr, sl, lr
 8021fba:	fb07 fe0e 	mul.w	lr, r7, lr
 8021fbe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021fc2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021fc6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021fca:	fb04 e409 	mla	r4, r4, r9, lr
 8021fce:	4313      	orrs	r3, r2
 8021fd0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8021fd4:	fb08 4303 	mla	r3, r8, r3, r4
 8021fd8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021fdc:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8021fe0:	4322      	orrs	r2, r4
 8021fe2:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8021fe6:	fb06 3202 	mla	r2, r6, r2, r3
 8021fea:	0d53      	lsrs	r3, r2, #21
 8021fec:	0952      	lsrs	r2, r2, #5
 8021fee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ff2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021ff6:	431a      	orrs	r2, r3
 8021ff8:	b293      	uxth	r3, r2
 8021ffa:	b2af      	uxth	r7, r5
 8021ffc:	1202      	asrs	r2, r0, #8
 8021ffe:	43ed      	mvns	r5, r5
 8022000:	b2ed      	uxtb	r5, r5
 8022002:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022006:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802200a:	fb12 f205 	smulbb	r2, r2, r5
 802200e:	10c6      	asrs	r6, r0, #3
 8022010:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022014:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022018:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802201c:	10da      	asrs	r2, r3, #3
 802201e:	fb16 f605 	smulbb	r6, r6, r5
 8022022:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022026:	fb02 6207 	mla	r2, r2, r7, r6
 802202a:	b296      	uxth	r6, r2
 802202c:	00c2      	lsls	r2, r0, #3
 802202e:	00dc      	lsls	r4, r3, #3
 8022030:	b2d2      	uxtb	r2, r2
 8022032:	b2e4      	uxtb	r4, r4
 8022034:	fb12 f205 	smulbb	r2, r2, r5
 8022038:	fb04 2207 	mla	r2, r4, r7, r2
 802203c:	fa1f fc8c 	uxth.w	ip, ip
 8022040:	b292      	uxth	r2, r2
 8022042:	f10c 0301 	add.w	r3, ip, #1
 8022046:	1c50      	adds	r0, r2, #1
 8022048:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802204c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022050:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022054:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022058:	4313      	orrs	r3, r2
 802205a:	1c72      	adds	r2, r6, #1
 802205c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022060:	0952      	lsrs	r2, r2, #5
 8022062:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022066:	4313      	orrs	r3, r2
 8022068:	800b      	strh	r3, [r1, #0]
 802206a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802206e:	2f0f      	cmp	r7, #15
 8022070:	f63f af71 	bhi.w	8021f56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8022074:	4603      	mov	r3, r0
 8022076:	4684      	mov	ip, r0
 8022078:	e785      	b.n	8021f86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802207a:	bf00      	nop
 802207c:	0805441c 	.word	0x0805441c
 8022080:	08054a1e 	.word	0x08054a1e
 8022084:	080544a4 	.word	0x080544a4

08022088 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802208c:	ed2d 8b08 	vpush	{d8-d11}
 8022090:	b095      	sub	sp, #84	; 0x54
 8022092:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022096:	9306      	str	r3, [sp, #24]
 8022098:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802209c:	9212      	str	r2, [sp, #72]	; 0x48
 802209e:	9307      	str	r3, [sp, #28]
 80220a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220a2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80220a6:	930c      	str	r3, [sp, #48]	; 0x30
 80220a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80220aa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80220ae:	9013      	str	r0, [sp, #76]	; 0x4c
 80220b0:	6850      	ldr	r0, [r2, #4]
 80220b2:	6812      	ldr	r2, [r2, #0]
 80220b4:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 80220b8:	fb00 1303 	mla	r3, r0, r3, r1
 80220bc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80220c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80220c2:	681b      	ldr	r3, [r3, #0]
 80220c4:	9309      	str	r3, [sp, #36]	; 0x24
 80220c6:	007b      	lsls	r3, r7, #1
 80220c8:	930a      	str	r3, [sp, #40]	; 0x28
 80220ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80220cc:	43db      	mvns	r3, r3
 80220ce:	b2db      	uxtb	r3, r3
 80220d0:	eeb0 aa40 	vmov.f32	s20, s0
 80220d4:	eef0 9a60 	vmov.f32	s19, s1
 80220d8:	eeb0 9a41 	vmov.f32	s18, s2
 80220dc:	eeb0 8a62 	vmov.f32	s16, s5
 80220e0:	eef0 8a43 	vmov.f32	s17, s6
 80220e4:	eef0 ba44 	vmov.f32	s23, s8
 80220e8:	eeb0 ba64 	vmov.f32	s22, s9
 80220ec:	eef0 aa45 	vmov.f32	s21, s10
 80220f0:	9308      	str	r3, [sp, #32]
 80220f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	dc03      	bgt.n	8022100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80220f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	f340 81f3 	ble.w	80224e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8022100:	9b06      	ldr	r3, [sp, #24]
 8022102:	2b00      	cmp	r3, #0
 8022104:	f340 80fa 	ble.w	80222fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022108:	1422      	asrs	r2, r4, #16
 802210a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802210e:	d42b      	bmi.n	8022168 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022110:	1c51      	adds	r1, r2, #1
 8022112:	428f      	cmp	r7, r1
 8022114:	dd2b      	ble.n	802216e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022116:	2b00      	cmp	r3, #0
 8022118:	db29      	blt.n	802216e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802211a:	9807      	ldr	r0, [sp, #28]
 802211c:	1c59      	adds	r1, r3, #1
 802211e:	4288      	cmp	r0, r1
 8022120:	dd25      	ble.n	802216e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022122:	9b06      	ldr	r3, [sp, #24]
 8022124:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022126:	3b01      	subs	r3, #1
 8022128:	fb02 4203 	mla	r2, r2, r3, r4
 802212c:	1412      	asrs	r2, r2, #16
 802212e:	d428      	bmi.n	8022182 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022130:	3201      	adds	r2, #1
 8022132:	4297      	cmp	r7, r2
 8022134:	dd25      	ble.n	8022182 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022136:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022138:	fb02 6303 	mla	r3, r2, r3, r6
 802213c:	141b      	asrs	r3, r3, #16
 802213e:	d420      	bmi.n	8022182 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022140:	9a07      	ldr	r2, [sp, #28]
 8022142:	3301      	adds	r3, #1
 8022144:	429a      	cmp	r2, r3
 8022146:	dd1c      	ble.n	8022182 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022148:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802214c:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8022150:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8022154:	f1b8 0f00 	cmp.w	r8, #0
 8022158:	f300 8129 	bgt.w	80223ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 802215c:	9b06      	ldr	r3, [sp, #24]
 802215e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022162:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022166:	e0cb      	b.n	8022300 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022168:	1c51      	adds	r1, r2, #1
 802216a:	f040 80bd 	bne.w	80222e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802216e:	42ba      	cmp	r2, r7
 8022170:	f280 80ba 	bge.w	80222e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8022174:	1c5a      	adds	r2, r3, #1
 8022176:	f2c0 80b7 	blt.w	80222e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802217a:	9a07      	ldr	r2, [sp, #28]
 802217c:	4293      	cmp	r3, r2
 802217e:	f280 80b3 	bge.w	80222e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8022182:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022186:	46c8      	mov	r8, r9
 8022188:	f1bb 0f00 	cmp.w	fp, #0
 802218c:	dde6      	ble.n	802215c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802218e:	1421      	asrs	r1, r4, #16
 8022190:	ea4f 4226 	mov.w	r2, r6, asr #16
 8022194:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022198:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802219c:	f100 80ef 	bmi.w	802237e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80221a0:	f101 0c01 	add.w	ip, r1, #1
 80221a4:	4567      	cmp	r7, ip
 80221a6:	f340 80ec 	ble.w	8022382 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80221aa:	2a00      	cmp	r2, #0
 80221ac:	f2c0 80e9 	blt.w	8022382 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80221b0:	9d07      	ldr	r5, [sp, #28]
 80221b2:	f102 0c01 	add.w	ip, r2, #1
 80221b6:	4565      	cmp	r5, ip
 80221b8:	f340 80e3 	ble.w	8022382 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80221bc:	fb02 1207 	mla	r2, r2, r7, r1
 80221c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80221c2:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 80221c6:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80221ca:	f8be 1002 	ldrh.w	r1, [lr, #2]
 80221ce:	b138      	cbz	r0, 80221e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 80221d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80221d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80221d4:	4472      	add	r2, lr
 80221d6:	f83e 5005 	ldrh.w	r5, [lr, r5]
 80221da:	8852      	ldrh	r2, [r2, #2]
 80221dc:	950e      	str	r5, [sp, #56]	; 0x38
 80221de:	920f      	str	r2, [sp, #60]	; 0x3c
 80221e0:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 80221e4:	fb13 f200 	smulbb	r2, r3, r0
 80221e8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80221ec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80221f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80221f4:	10d2      	asrs	r2, r2, #3
 80221f6:	ea4e 0c0c 	orr.w	ip, lr, ip
 80221fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221fe:	f1c0 0e10 	rsb	lr, r0, #16
 8022202:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022206:	ebae 0e03 	sub.w	lr, lr, r3
 802220a:	ea4a 0101 	orr.w	r1, sl, r1
 802220e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 8022212:	4359      	muls	r1, r3
 8022214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022216:	9d08      	ldr	r5, [sp, #32]
 8022218:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802221c:	fb0e 1e0c 	mla	lr, lr, ip, r1
 8022220:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022224:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022228:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802222c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022232:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022234:	041b      	lsls	r3, r3, #16
 8022236:	fb02 ec0c 	mla	ip, r2, ip, lr
 802223a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802223e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022242:	ea43 030e 	orr.w	r3, r3, lr
 8022246:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802224a:	fb02 c203 	mla	r2, r2, r3, ip
 802224e:	0d53      	lsrs	r3, r2, #21
 8022250:	0952      	lsrs	r2, r2, #5
 8022252:	f8b8 c000 	ldrh.w	ip, [r8]
 8022256:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802225a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802225e:	431a      	orrs	r2, r3
 8022260:	b292      	uxth	r2, r2
 8022262:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022266:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802226a:	1210      	asrs	r0, r2, #8
 802226c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022270:	fb11 f105 	smulbb	r1, r1, r5
 8022274:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8022278:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802227c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022280:	fb00 1003 	mla	r0, r0, r3, r1
 8022284:	fa5f fc8c 	uxtb.w	ip, ip
 8022288:	10d1      	asrs	r1, r2, #3
 802228a:	00d2      	lsls	r2, r2, #3
 802228c:	fb1c fc05 	smulbb	ip, ip, r5
 8022290:	b2d2      	uxtb	r2, r2
 8022292:	fb02 c203 	mla	r2, r2, r3, ip
 8022296:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802229a:	b280      	uxth	r0, r0
 802229c:	b292      	uxth	r2, r2
 802229e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80222a2:	fb1e fe05 	smulbb	lr, lr, r5
 80222a6:	fb01 e103 	mla	r1, r1, r3, lr
 80222aa:	f102 0c01 	add.w	ip, r2, #1
 80222ae:	1c43      	adds	r3, r0, #1
 80222b0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80222b4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80222b8:	b289      	uxth	r1, r1
 80222ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80222be:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80222c2:	4313      	orrs	r3, r2
 80222c4:	1c4a      	adds	r2, r1, #1
 80222c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80222ca:	0949      	lsrs	r1, r1, #5
 80222cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80222d0:	430b      	orrs	r3, r1
 80222d2:	f8a8 3000 	strh.w	r3, [r8]
 80222d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80222d8:	441c      	add	r4, r3
 80222da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222dc:	f108 0802 	add.w	r8, r8, #2
 80222e0:	441e      	add	r6, r3
 80222e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80222e6:	e74f      	b.n	8022188 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80222e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80222ea:	441c      	add	r4, r3
 80222ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222ee:	441e      	add	r6, r3
 80222f0:	9b06      	ldr	r3, [sp, #24]
 80222f2:	3b01      	subs	r3, #1
 80222f4:	9306      	str	r3, [sp, #24]
 80222f6:	f109 0902 	add.w	r9, r9, #2
 80222fa:	e701      	b.n	8022100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80222fc:	f47f af11 	bne.w	8022122 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022302:	2b00      	cmp	r3, #0
 8022304:	f340 80ef 	ble.w	80224e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8022308:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802230c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022310:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022314:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022316:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802231a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802231e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022322:	eef0 6a48 	vmov.f32	s13, s16
 8022326:	ee69 7a27 	vmul.f32	s15, s18, s15
 802232a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802232e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022332:	ee16 4a90 	vmov	r4, s13
 8022336:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802233a:	eef0 6a68 	vmov.f32	s13, s17
 802233e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022342:	ee18 2a10 	vmov	r2, s16
 8022346:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802234a:	fb92 f3f3 	sdiv	r3, r2, r3
 802234e:	ee18 2a90 	vmov	r2, s17
 8022352:	9329      	str	r3, [sp, #164]	; 0xa4
 8022354:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022356:	fb92 f3f3 	sdiv	r3, r2, r3
 802235a:	932a      	str	r3, [sp, #168]	; 0xa8
 802235c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802235e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022360:	3b01      	subs	r3, #1
 8022362:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022366:	930b      	str	r3, [sp, #44]	; 0x2c
 8022368:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802236a:	bf08      	it	eq
 802236c:	4613      	moveq	r3, r2
 802236e:	ee16 6a90 	vmov	r6, s13
 8022372:	9306      	str	r3, [sp, #24]
 8022374:	eef0 8a67 	vmov.f32	s17, s15
 8022378:	eeb0 8a47 	vmov.f32	s16, s14
 802237c:	e6b9      	b.n	80220f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802237e:	1c4d      	adds	r5, r1, #1
 8022380:	d1a9      	bne.n	80222d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022382:	428f      	cmp	r7, r1
 8022384:	dda7      	ble.n	80222d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022386:	1c55      	adds	r5, r2, #1
 8022388:	dba5      	blt.n	80222d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802238a:	9d07      	ldr	r5, [sp, #28]
 802238c:	4295      	cmp	r5, r2
 802238e:	dda2      	ble.n	80222d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022392:	9101      	str	r1, [sp, #4]
 8022394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022398:	9b07      	ldr	r3, [sp, #28]
 802239a:	9300      	str	r3, [sp, #0]
 802239c:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80223a0:	463b      	mov	r3, r7
 80223a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80223a6:	4641      	mov	r1, r8
 80223a8:	f7ff fd9a 	bl	8021ee0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80223ac:	e793      	b.n	80222d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223ae:	1422      	asrs	r2, r4, #16
 80223b0:	1431      	asrs	r1, r6, #16
 80223b2:	fb07 2101 	mla	r1, r7, r1, r2
 80223b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80223ba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80223be:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80223c2:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 80223c6:	8851      	ldrh	r1, [r2, #2]
 80223c8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80223cc:	f1be 0f00 	cmp.w	lr, #0
 80223d0:	d006      	beq.n	80223e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 80223d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80223d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80223d6:	1810      	adds	r0, r2, r0
 80223d8:	5b52      	ldrh	r2, [r2, r5]
 80223da:	9210      	str	r2, [sp, #64]	; 0x40
 80223dc:	8842      	ldrh	r2, [r0, #2]
 80223de:	9211      	str	r2, [sp, #68]	; 0x44
 80223e0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80223e4:	fb13 f20e 	smulbb	r2, r3, lr
 80223e8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80223ec:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80223f0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80223f4:	10d2      	asrs	r2, r2, #3
 80223f6:	ea40 000c 	orr.w	r0, r0, ip
 80223fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80223fe:	f1ce 0c10 	rsb	ip, lr, #16
 8022402:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022406:	ebac 0c03 	sub.w	ip, ip, r3
 802240a:	ea4b 0101 	orr.w	r1, fp, r1
 802240e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 8022412:	4359      	muls	r1, r3
 8022414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022416:	9d08      	ldr	r5, [sp, #32]
 8022418:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802241c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022420:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022424:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8022428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802242a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802242e:	ea4b 0000 	orr.w	r0, fp, r0
 8022432:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022436:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802243a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802243e:	fb02 c000 	mla	r0, r2, r0, ip
 8022442:	ea4b 0b03 	orr.w	fp, fp, r3
 8022446:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802244a:	fb02 0b0b 	mla	fp, r2, fp, r0
 802244e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022450:	ea4f 515b 	mov.w	r1, fp, lsr #21
 8022454:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8022458:	8812      	ldrh	r2, [r2, #0]
 802245a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802245e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022462:	ea41 0b0b 	orr.w	fp, r1, fp
 8022466:	fa1f f38b 	uxth.w	r3, fp
 802246a:	1211      	asrs	r1, r2, #8
 802246c:	1218      	asrs	r0, r3, #8
 802246e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022472:	fb11 f105 	smulbb	r1, r1, r5
 8022476:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802247a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802247e:	00d2      	lsls	r2, r2, #3
 8022480:	fb00 100a 	mla	r0, r0, sl, r1
 8022484:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022488:	10d9      	asrs	r1, r3, #3
 802248a:	b2d2      	uxtb	r2, r2
 802248c:	00db      	lsls	r3, r3, #3
 802248e:	fb1c fc05 	smulbb	ip, ip, r5
 8022492:	fb12 f205 	smulbb	r2, r2, r5
 8022496:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802249a:	b2db      	uxtb	r3, r3
 802249c:	b280      	uxth	r0, r0
 802249e:	fb01 c10a 	mla	r1, r1, sl, ip
 80224a2:	fb03 230a 	mla	r3, r3, sl, r2
 80224a6:	b29b      	uxth	r3, r3
 80224a8:	b289      	uxth	r1, r1
 80224aa:	1c42      	adds	r2, r0, #1
 80224ac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224b0:	f101 0c01 	add.w	ip, r1, #1
 80224b4:	1c5a      	adds	r2, r3, #1
 80224b6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80224ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80224be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80224c2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80224c6:	0949      	lsrs	r1, r1, #5
 80224c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80224ca:	4310      	orrs	r0, r2
 80224cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80224d0:	4308      	orrs	r0, r1
 80224d2:	f823 0b02 	strh.w	r0, [r3], #2
 80224d6:	930d      	str	r3, [sp, #52]	; 0x34
 80224d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80224da:	441c      	add	r4, r3
 80224dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80224de:	f108 38ff 	add.w	r8, r8, #4294967295
 80224e2:	441e      	add	r6, r3
 80224e4:	e636      	b.n	8022154 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80224e6:	b015      	add	sp, #84	; 0x54
 80224e8:	ecbd 8b08 	vpop	{d8-d11}
 80224ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080224f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80224f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224f4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80224f8:	fb06 5c03 	mla	ip, r6, r3, r5
 80224fc:	2e00      	cmp	r6, #0
 80224fe:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8022502:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8022506:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802250a:	8808      	ldrh	r0, [r1, #0]
 802250c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022510:	db2e      	blt.n	8022570 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8022512:	45b0      	cmp	r8, r6
 8022514:	dd2c      	ble.n	8022570 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8022516:	2d00      	cmp	r5, #0
 8022518:	db28      	blt.n	802256c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802251a:	42ab      	cmp	r3, r5
 802251c:	dd26      	ble.n	802256c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802251e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8022522:	1c6a      	adds	r2, r5, #1
 8022524:	d427      	bmi.n	8022576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8022526:	4293      	cmp	r3, r2
 8022528:	dd25      	ble.n	8022576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802252a:	b324      	cbz	r4, 8022576 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802252c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022530:	3601      	adds	r6, #1
 8022532:	d424      	bmi.n	802257e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8022534:	45b0      	cmp	r8, r6
 8022536:	dd22      	ble.n	802257e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8022538:	b31f      	cbz	r7, 8022582 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802253a:	2d00      	cmp	r5, #0
 802253c:	db1d      	blt.n	802257a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802253e:	42ab      	cmp	r3, r5
 8022540:	dd1b      	ble.n	802257a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8022542:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8022546:	3501      	adds	r5, #1
 8022548:	d405      	bmi.n	8022556 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802254a:	42ab      	cmp	r3, r5
 802254c:	dd03      	ble.n	8022556 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802254e:	b124      	cbz	r4, 802255a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8022550:	3301      	adds	r3, #1
 8022552:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8022556:	2c0f      	cmp	r4, #15
 8022558:	d801      	bhi.n	802255e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802255a:	2f0f      	cmp	r7, #15
 802255c:	d914      	bls.n	8022588 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802255e:	4b27      	ldr	r3, [pc, #156]	; (80225fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8022560:	4a27      	ldr	r2, [pc, #156]	; (8022600 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8022562:	4828      	ldr	r0, [pc, #160]	; (8022604 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8022564:	f240 11ef 	movw	r1, #495	; 0x1ef
 8022568:	f002 fc2c 	bl	8024dc4 <__assert_func>
 802256c:	4684      	mov	ip, r0
 802256e:	e7d8      	b.n	8022522 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8022570:	4602      	mov	r2, r0
 8022572:	4684      	mov	ip, r0
 8022574:	e7dc      	b.n	8022530 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8022576:	4602      	mov	r2, r0
 8022578:	e7da      	b.n	8022530 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802257a:	4606      	mov	r6, r0
 802257c:	e7e3      	b.n	8022546 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802257e:	4606      	mov	r6, r0
 8022580:	e7e9      	b.n	8022556 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8022582:	2c0f      	cmp	r4, #15
 8022584:	d8eb      	bhi.n	802255e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022586:	4606      	mov	r6, r0
 8022588:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802258c:	fb14 f307 	smulbb	r3, r4, r7
 8022590:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8022594:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022598:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802259c:	10db      	asrs	r3, r3, #3
 802259e:	ea45 0c0c 	orr.w	ip, r5, ip
 80225a2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80225a6:	f1c7 0510 	rsb	r5, r7, #16
 80225aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80225ae:	1b2d      	subs	r5, r5, r4
 80225b0:	ea4e 0202 	orr.w	r2, lr, r2
 80225b4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80225b8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80225bc:	4354      	muls	r4, r2
 80225be:	fb05 450c 	mla	r5, r5, ip, r4
 80225c2:	0404      	lsls	r4, r0, #16
 80225c4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80225c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80225cc:	4320      	orrs	r0, r4
 80225ce:	fb03 5400 	mla	r4, r3, r0, r5
 80225d2:	0430      	lsls	r0, r6, #16
 80225d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80225d8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80225dc:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80225e0:	4330      	orrs	r0, r6
 80225e2:	fb07 4000 	mla	r0, r7, r0, r4
 80225e6:	0d43      	lsrs	r3, r0, #21
 80225e8:	0940      	lsrs	r0, r0, #5
 80225ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80225f2:	4318      	orrs	r0, r3
 80225f4:	8008      	strh	r0, [r1, #0]
 80225f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225fa:	bf00      	nop
 80225fc:	0805441c 	.word	0x0805441c
 8022600:	08054a1e 	.word	0x08054a1e
 8022604:	080544a4 	.word	0x080544a4

08022608 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802260c:	ed2d 8b0a 	vpush	{d8-d12}
 8022610:	b093      	sub	sp, #76	; 0x4c
 8022612:	461d      	mov	r5, r3
 8022614:	9210      	str	r2, [sp, #64]	; 0x40
 8022616:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022618:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 802261c:	9208      	str	r2, [sp, #32]
 802261e:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 8022622:	910b      	str	r1, [sp, #44]	; 0x2c
 8022624:	6859      	ldr	r1, [r3, #4]
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 802262c:	9011      	str	r0, [sp, #68]	; 0x44
 802262e:	fb01 2707 	mla	r7, r1, r7, r2
 8022632:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022636:	9307      	str	r3, [sp, #28]
 8022638:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802263a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	9309      	str	r3, [sp, #36]	; 0x24
 8022642:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022646:	eeb0 aa40 	vmov.f32	s20, s0
 802264a:	eef0 9a60 	vmov.f32	s19, s1
 802264e:	eeb0 9a41 	vmov.f32	s18, s2
 8022652:	eeb0 8a62 	vmov.f32	s16, s5
 8022656:	eef0 8a43 	vmov.f32	s17, s6
 802265a:	eeb0 ca44 	vmov.f32	s24, s8
 802265e:	eef0 ba64 	vmov.f32	s23, s9
 8022662:	eeb0 ba45 	vmov.f32	s22, s10
 8022666:	930a      	str	r3, [sp, #40]	; 0x28
 8022668:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802266c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802266e:	2b00      	cmp	r3, #0
 8022670:	dc03      	bgt.n	802267a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022674:	2b00      	cmp	r3, #0
 8022676:	f340 816c 	ble.w	8022952 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 802267a:	2d00      	cmp	r5, #0
 802267c:	f340 80b6 	ble.w	80227ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8022680:	1422      	asrs	r2, r4, #16
 8022682:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022686:	d428      	bmi.n	80226da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022688:	1c51      	adds	r1, r2, #1
 802268a:	4588      	cmp	r8, r1
 802268c:	dd27      	ble.n	80226de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802268e:	2b00      	cmp	r3, #0
 8022690:	db25      	blt.n	80226de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8022692:	9808      	ldr	r0, [sp, #32]
 8022694:	1c59      	adds	r1, r3, #1
 8022696:	4288      	cmp	r0, r1
 8022698:	dd21      	ble.n	80226de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802269a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802269c:	1e6b      	subs	r3, r5, #1
 802269e:	fb02 4203 	mla	r2, r2, r3, r4
 80226a2:	1412      	asrs	r2, r2, #16
 80226a4:	d422      	bmi.n	80226ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226a6:	3201      	adds	r2, #1
 80226a8:	4590      	cmp	r8, r2
 80226aa:	dd1f      	ble.n	80226ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80226ae:	fb02 6303 	mla	r3, r2, r3, r6
 80226b2:	141b      	asrs	r3, r3, #16
 80226b4:	d41a      	bmi.n	80226ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226b6:	9a08      	ldr	r2, [sp, #32]
 80226b8:	3301      	adds	r3, #1
 80226ba:	429a      	cmp	r2, r3
 80226bc:	dd16      	ble.n	80226ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80226c2:	46a9      	mov	r9, r5
 80226c4:	f1b9 0f00 	cmp.w	r9, #0
 80226c8:	f300 80e4 	bgt.w	8022894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 80226cc:	9b07      	ldr	r3, [sp, #28]
 80226ce:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80226d2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80226d6:	9307      	str	r3, [sp, #28]
 80226d8:	e08a      	b.n	80227f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 80226da:	1c51      	adds	r1, r2, #1
 80226dc:	d17d      	bne.n	80227da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80226de:	4542      	cmp	r2, r8
 80226e0:	da7b      	bge.n	80227da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80226e2:	1c5a      	adds	r2, r3, #1
 80226e4:	db79      	blt.n	80227da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80226e6:	9a08      	ldr	r2, [sp, #32]
 80226e8:	4293      	cmp	r3, r2
 80226ea:	da76      	bge.n	80227da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80226ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80226f0:	46aa      	mov	sl, r5
 80226f2:	f1ba 0f00 	cmp.w	sl, #0
 80226f6:	dde9      	ble.n	80226cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80226f8:	1421      	asrs	r1, r4, #16
 80226fa:	ea4f 4226 	mov.w	r2, r6, asr #16
 80226fe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022702:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022706:	f100 80b0 	bmi.w	802286a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 802270a:	f101 0c01 	add.w	ip, r1, #1
 802270e:	45e0      	cmp	r8, ip
 8022710:	f340 80ad 	ble.w	802286e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8022714:	2a00      	cmp	r2, #0
 8022716:	f2c0 80aa 	blt.w	802286e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802271a:	9f08      	ldr	r7, [sp, #32]
 802271c:	f102 0c01 	add.w	ip, r2, #1
 8022720:	4567      	cmp	r7, ip
 8022722:	f340 80a4 	ble.w	802286e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8022726:	fb02 1208 	mla	r2, r2, r8, r1
 802272a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802272c:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 8022730:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8022734:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8022738:	b138      	cbz	r0, 802274a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802273a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802273c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802273e:	4472      	add	r2, lr
 8022740:	f83e 7007 	ldrh.w	r7, [lr, r7]
 8022744:	8852      	ldrh	r2, [r2, #2]
 8022746:	970c      	str	r7, [sp, #48]	; 0x30
 8022748:	920d      	str	r2, [sp, #52]	; 0x34
 802274a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802274e:	fb13 f200 	smulbb	r2, r3, r0
 8022752:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022756:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802275a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802275e:	10d2      	asrs	r2, r2, #3
 8022760:	ea4e 0c0c 	orr.w	ip, lr, ip
 8022764:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022768:	f1c0 0e10 	rsb	lr, r0, #16
 802276c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022770:	ebae 0e03 	sub.w	lr, lr, r3
 8022774:	ea4b 0101 	orr.w	r1, fp, r1
 8022778:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802277c:	4359      	muls	r1, r3
 802277e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022780:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022784:	fb0e 1e0c 	mla	lr, lr, ip, r1
 8022788:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802278c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022790:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022794:	ea4c 0c03 	orr.w	ip, ip, r3
 8022798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802279a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802279c:	041b      	lsls	r3, r3, #16
 802279e:	fb02 ec0c 	mla	ip, r2, ip, lr
 80227a2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227a6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80227aa:	ea43 030e 	orr.w	r3, r3, lr
 80227ae:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80227b2:	fb02 c203 	mla	r2, r2, r3, ip
 80227b6:	0d53      	lsrs	r3, r2, #21
 80227b8:	0952      	lsrs	r2, r2, #5
 80227ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227c2:	431a      	orrs	r2, r3
 80227c4:	f8a9 2000 	strh.w	r2, [r9]
 80227c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80227ca:	441c      	add	r4, r3
 80227cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80227ce:	f109 0902 	add.w	r9, r9, #2
 80227d2:	441e      	add	r6, r3
 80227d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80227d8:	e78b      	b.n	80226f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80227da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80227dc:	441c      	add	r4, r3
 80227de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80227e0:	441e      	add	r6, r3
 80227e2:	9b07      	ldr	r3, [sp, #28]
 80227e4:	3302      	adds	r3, #2
 80227e6:	3d01      	subs	r5, #1
 80227e8:	9307      	str	r3, [sp, #28]
 80227ea:	e746      	b.n	802267a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80227ec:	f47f af55 	bne.w	802269a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80227f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	f340 80ad 	ble.w	8022952 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 80227f8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80227fc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022800:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022804:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022806:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802280a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802280e:	eef0 6a48 	vmov.f32	s13, s16
 8022812:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022816:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802281a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802281e:	ee16 4a90 	vmov	r4, s13
 8022822:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022826:	eef0 6a68 	vmov.f32	s13, s17
 802282a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802282e:	ee18 2a10 	vmov	r2, s16
 8022832:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022836:	fb92 f3f3 	sdiv	r3, r2, r3
 802283a:	ee18 2a90 	vmov	r2, s17
 802283e:	9329      	str	r3, [sp, #164]	; 0xa4
 8022840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022842:	fb92 f3f3 	sdiv	r3, r2, r3
 8022846:	932a      	str	r3, [sp, #168]	; 0xa8
 8022848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802284a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802284c:	3b01      	subs	r3, #1
 802284e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022852:	930b      	str	r3, [sp, #44]	; 0x2c
 8022854:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022856:	ee16 6a90 	vmov	r6, s13
 802285a:	bf14      	ite	ne
 802285c:	461d      	movne	r5, r3
 802285e:	4615      	moveq	r5, r2
 8022860:	eef0 8a67 	vmov.f32	s17, s15
 8022864:	eeb0 8a47 	vmov.f32	s16, s14
 8022868:	e700      	b.n	802266c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802286a:	1c4f      	adds	r7, r1, #1
 802286c:	d1ac      	bne.n	80227c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802286e:	4588      	cmp	r8, r1
 8022870:	ddaa      	ble.n	80227c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022872:	1c57      	adds	r7, r2, #1
 8022874:	dba8      	blt.n	80227c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022876:	9f08      	ldr	r7, [sp, #32]
 8022878:	4297      	cmp	r7, r2
 802287a:	dda5      	ble.n	80227c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802287c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8022880:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8022884:	9700      	str	r7, [sp, #0]
 8022886:	4643      	mov	r3, r8
 8022888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802288a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802288c:	4649      	mov	r1, r9
 802288e:	f7ff fe2f 	bl	80224f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022892:	e799      	b.n	80227c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022894:	1422      	asrs	r2, r4, #16
 8022896:	1431      	asrs	r1, r6, #16
 8022898:	fb08 2101 	mla	r1, r8, r1, r2
 802289c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802289e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80228a4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80228a8:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 80228ac:	8851      	ldrh	r1, [r2, #2]
 80228ae:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80228b2:	f1be 0f00 	cmp.w	lr, #0
 80228b6:	d006      	beq.n	80228c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 80228b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80228bc:	1810      	adds	r0, r2, r0
 80228be:	5bd2      	ldrh	r2, [r2, r7]
 80228c0:	920e      	str	r2, [sp, #56]	; 0x38
 80228c2:	8842      	ldrh	r2, [r0, #2]
 80228c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80228c6:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80228ca:	fb13 f20e 	smulbb	r2, r3, lr
 80228ce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80228d2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80228d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80228da:	10d2      	asrs	r2, r2, #3
 80228dc:	ea40 000c 	orr.w	r0, r0, ip
 80228e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80228e4:	f1ce 0c10 	rsb	ip, lr, #16
 80228e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80228ec:	ebac 0c03 	sub.w	ip, ip, r3
 80228f0:	ea4a 0101 	orr.w	r1, sl, r1
 80228f4:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 80228f8:	4359      	muls	r1, r3
 80228fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80228fc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022900:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022904:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022908:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802290c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802290e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022910:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022914:	041b      	lsls	r3, r3, #16
 8022916:	ea4a 0000 	orr.w	r0, sl, r0
 802291a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802291e:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 8022922:	fb02 c000 	mla	r0, r2, r0, ip
 8022926:	ea43 0a0a 	orr.w	sl, r3, sl
 802292a:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802292e:	fb02 000a 	mla	r0, r2, sl, r0
 8022932:	0d43      	lsrs	r3, r0, #21
 8022934:	0940      	lsrs	r0, r0, #5
 8022936:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802293a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802293e:	4318      	orrs	r0, r3
 8022940:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022942:	f82b 0b02 	strh.w	r0, [fp], #2
 8022946:	441c      	add	r4, r3
 8022948:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802294a:	f109 39ff 	add.w	r9, r9, #4294967295
 802294e:	441e      	add	r6, r3
 8022950:	e6b8      	b.n	80226c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 8022952:	b013      	add	sp, #76	; 0x4c
 8022954:	ecbd 8b0a 	vpop	{d8-d12}
 8022958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802295c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022960:	8808      	ldrh	r0, [r1, #0]
 8022962:	b085      	sub	sp, #20
 8022964:	1206      	asrs	r6, r0, #8
 8022966:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802296a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802296e:	9600      	str	r6, [sp, #0]
 8022970:	10c6      	asrs	r6, r0, #3
 8022972:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022976:	9601      	str	r6, [sp, #4]
 8022978:	00c0      	lsls	r0, r0, #3
 802297a:	fb04 c603 	mla	r6, r4, r3, ip
 802297e:	b2c0      	uxtb	r0, r0
 8022980:	4691      	mov	r9, r2
 8022982:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8022986:	9a00      	ldr	r2, [sp, #0]
 8022988:	9002      	str	r0, [sp, #8]
 802298a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802298e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022992:	9a01      	ldr	r2, [sp, #4]
 8022994:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022998:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802299c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80229a0:	2c00      	cmp	r4, #0
 80229a2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80229a6:	db3a      	blt.n	8022a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 80229a8:	45a0      	cmp	r8, r4
 80229aa:	dd38      	ble.n	8022a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 80229ac:	f1bc 0f00 	cmp.w	ip, #0
 80229b0:	db33      	blt.n	8022a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 80229b2:	4563      	cmp	r3, ip
 80229b4:	dd31      	ble.n	8022a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 80229b6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80229ba:	f11c 0601 	adds.w	r6, ip, #1
 80229be:	d431      	bmi.n	8022a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 80229c0:	42b3      	cmp	r3, r6
 80229c2:	dd2f      	ble.n	8022a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 80229c4:	b375      	cbz	r5, 8022a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 80229c6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80229ca:	3401      	adds	r4, #1
 80229cc:	d42e      	bmi.n	8022a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 80229ce:	45a0      	cmp	r8, r4
 80229d0:	dd2c      	ble.n	8022a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 80229d2:	b35f      	cbz	r7, 8022a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 80229d4:	f1bc 0f00 	cmp.w	ip, #0
 80229d8:	db26      	blt.n	8022a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80229da:	4563      	cmp	r3, ip
 80229dc:	dd24      	ble.n	8022a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80229de:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80229e2:	f11c 0c01 	adds.w	ip, ip, #1
 80229e6:	d405      	bmi.n	80229f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80229e8:	4563      	cmp	r3, ip
 80229ea:	dd03      	ble.n	80229f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80229ec:	b115      	cbz	r5, 80229f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80229ee:	3301      	adds	r3, #1
 80229f0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80229f4:	2d0f      	cmp	r5, #15
 80229f6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80229fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80229fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022a02:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022a06:	d801      	bhi.n	8022a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8022a08:	2f0f      	cmp	r7, #15
 8022a0a:	d911      	bls.n	8022a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8022a0c:	4b82      	ldr	r3, [pc, #520]	; (8022c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8022a0e:	4a83      	ldr	r2, [pc, #524]	; (8022c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 8022a10:	4883      	ldr	r0, [pc, #524]	; (8022c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 8022a12:	f240 210d 	movw	r1, #525	; 0x20d
 8022a16:	f002 f9d5 	bl	8024dc4 <__assert_func>
 8022a1a:	4602      	mov	r2, r0
 8022a1c:	e7cd      	b.n	80229ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8022a1e:	4606      	mov	r6, r0
 8022a20:	4602      	mov	r2, r0
 8022a22:	e7d2      	b.n	80229ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 8022a24:	4606      	mov	r6, r0
 8022a26:	e7d0      	b.n	80229ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 8022a28:	4604      	mov	r4, r0
 8022a2a:	e7da      	b.n	80229e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 8022a2c:	4604      	mov	r4, r0
 8022a2e:	e7e1      	b.n	80229f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8022a30:	b2ab      	uxth	r3, r5
 8022a32:	b2bf      	uxth	r7, r7
 8022a34:	fb03 fe07 	mul.w	lr, r3, r7
 8022a38:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022a3c:	011b      	lsls	r3, r3, #4
 8022a3e:	eba3 0c0e 	sub.w	ip, r3, lr
 8022a42:	b2bf      	uxth	r7, r7
 8022a44:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022a48:	fa1f fc8c 	uxth.w	ip, ip
 8022a4c:	1bed      	subs	r5, r5, r7
 8022a4e:	b2ad      	uxth	r5, r5
 8022a50:	fb0c f30a 	mul.w	r3, ip, sl
 8022a54:	fb05 330b 	mla	r3, r5, fp, r3
 8022a58:	fb07 3309 	mla	r3, r7, r9, r3
 8022a5c:	fb0e 3308 	mla	r3, lr, r8, r3
 8022a60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a64:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022a68:	9303      	str	r3, [sp, #12]
 8022a6a:	d018      	beq.n	8022a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8022a6c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022a70:	fb0b f303 	mul.w	r3, fp, r3
 8022a74:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022a78:	fb0b fb02 	mul.w	fp, fp, r2
 8022a7c:	0a1a      	lsrs	r2, r3, #8
 8022a7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022a82:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022a86:	441a      	add	r2, r3
 8022a88:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022a8c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022a90:	0a12      	lsrs	r2, r2, #8
 8022a92:	0a1b      	lsrs	r3, r3, #8
 8022a94:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022a98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a9c:	431a      	orrs	r2, r3
 8022a9e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022aa2:	d019      	beq.n	8022ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8022aa4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022aa8:	fb0a fb0b 	mul.w	fp, sl, fp
 8022aac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022ab0:	fb0a fa06 	mul.w	sl, sl, r6
 8022ab4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022ab8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022abc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ac0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022ac4:	445e      	add	r6, fp
 8022ac6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022aca:	0a36      	lsrs	r6, r6, #8
 8022acc:	0a1b      	lsrs	r3, r3, #8
 8022ace:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022ad2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ad6:	431e      	orrs	r6, r3
 8022ad8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022adc:	d019      	beq.n	8022b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8022ade:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022ae2:	fb09 fa0a 	mul.w	sl, r9, sl
 8022ae6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022aea:	fb09 f904 	mul.w	r9, r9, r4
 8022aee:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022af2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022af6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022afa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022afe:	4454      	add	r4, sl
 8022b00:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022b04:	0a24      	lsrs	r4, r4, #8
 8022b06:	0a1b      	lsrs	r3, r3, #8
 8022b08:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b10:	431c      	orrs	r4, r3
 8022b12:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b16:	d019      	beq.n	8022b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8022b18:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022b1c:	fb08 f909 	mul.w	r9, r8, r9
 8022b20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b24:	fb08 f800 	mul.w	r8, r8, r0
 8022b28:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022b2c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b30:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022b34:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022b38:	4448      	add	r0, r9
 8022b3a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022b3e:	0a00      	lsrs	r0, r0, #8
 8022b40:	0a1b      	lsrs	r3, r3, #8
 8022b42:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b4a:	4318      	orrs	r0, r3
 8022b4c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022b50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b54:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022b58:	fb0c f808 	mul.w	r8, ip, r8
 8022b5c:	fb0c f606 	mul.w	r6, ip, r6
 8022b60:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022b64:	fb05 6202 	mla	r2, r5, r2, r6
 8022b68:	fb05 8803 	mla	r8, r5, r3, r8
 8022b6c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022b70:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b74:	fb07 8803 	mla	r8, r7, r3, r8
 8022b78:	fb07 2704 	mla	r7, r7, r4, r2
 8022b7c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022b80:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b84:	fb0e 8303 	mla	r3, lr, r3, r8
 8022b88:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022b8c:	0a1b      	lsrs	r3, r3, #8
 8022b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b96:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8022b9a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b9e:	ea43 0e0e 	orr.w	lr, r3, lr
 8022ba2:	9b03      	ldr	r3, [sp, #12]
 8022ba4:	b2a4      	uxth	r4, r4
 8022ba6:	4363      	muls	r3, r4
 8022ba8:	1c5a      	adds	r2, r3, #1
 8022baa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022bae:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022bb2:	9b00      	ldr	r3, [sp, #0]
 8022bb4:	b2d2      	uxtb	r2, r2
 8022bb6:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8022bba:	fb13 f302 	smulbb	r3, r3, r2
 8022bbe:	fb05 3304 	mla	r3, r5, r4, r3
 8022bc2:	b29d      	uxth	r5, r3
 8022bc4:	9b01      	ldr	r3, [sp, #4]
 8022bc6:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8022bca:	fb13 f302 	smulbb	r3, r3, r2
 8022bce:	fb00 3004 	mla	r0, r0, r4, r3
 8022bd2:	9b02      	ldr	r3, [sp, #8]
 8022bd4:	fa5f fe8e 	uxtb.w	lr, lr
 8022bd8:	fb13 f202 	smulbb	r2, r3, r2
 8022bdc:	fb0e 2e04 	mla	lr, lr, r4, r2
 8022be0:	fa1f fe8e 	uxth.w	lr, lr
 8022be4:	b280      	uxth	r0, r0
 8022be6:	f10e 0201 	add.w	r2, lr, #1
 8022bea:	1c6b      	adds	r3, r5, #1
 8022bec:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022bf0:	1c42      	adds	r2, r0, #1
 8022bf2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022bf6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022bfa:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022bfe:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022c02:	0952      	lsrs	r2, r2, #5
 8022c04:	ea43 030e 	orr.w	r3, r3, lr
 8022c08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c0c:	4313      	orrs	r3, r2
 8022c0e:	800b      	strh	r3, [r1, #0]
 8022c10:	b005      	add	sp, #20
 8022c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c16:	bf00      	nop
 8022c18:	0805441c 	.word	0x0805441c
 8022c1c:	08054975 	.word	0x08054975
 8022c20:	080544a4 	.word	0x080544a4

08022c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c28:	ed2d 8b08 	vpush	{d8-d11}
 8022c2c:	b099      	sub	sp, #100	; 0x64
 8022c2e:	eeb0 aa40 	vmov.f32	s20, s0
 8022c32:	9306      	str	r3, [sp, #24]
 8022c34:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8022c38:	9307      	str	r3, [sp, #28]
 8022c3a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022c3e:	9216      	str	r2, [sp, #88]	; 0x58
 8022c40:	9310      	str	r3, [sp, #64]	; 0x40
 8022c42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022c44:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8022c48:	9113      	str	r1, [sp, #76]	; 0x4c
 8022c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8022c4c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022c50:	9017      	str	r0, [sp, #92]	; 0x5c
 8022c52:	6850      	ldr	r0, [r2, #4]
 8022c54:	6812      	ldr	r2, [r2, #0]
 8022c56:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022c58:	fb00 1303 	mla	r3, r0, r3, r1
 8022c5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c60:	930a      	str	r3, [sp, #40]	; 0x28
 8022c62:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022c64:	681b      	ldr	r3, [r3, #0]
 8022c66:	9312      	str	r3, [sp, #72]	; 0x48
 8022c68:	9b07      	ldr	r3, [sp, #28]
 8022c6a:	009b      	lsls	r3, r3, #2
 8022c6c:	eef0 9a60 	vmov.f32	s19, s1
 8022c70:	eeb0 9a41 	vmov.f32	s18, s2
 8022c74:	eeb0 8a62 	vmov.f32	s16, s5
 8022c78:	eef0 8a43 	vmov.f32	s17, s6
 8022c7c:	eef0 ba44 	vmov.f32	s23, s8
 8022c80:	eeb0 ba64 	vmov.f32	s22, s9
 8022c84:	eef0 aa45 	vmov.f32	s21, s10
 8022c88:	930e      	str	r3, [sp, #56]	; 0x38
 8022c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	dc03      	bgt.n	8022c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022c90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	f340 8352 	ble.w	802333c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8022c98:	9b06      	ldr	r3, [sp, #24]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	f340 81a8 	ble.w	8022ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 8022ca0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ca2:	1412      	asrs	r2, r2, #16
 8022ca4:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022ca8:	d430      	bmi.n	8022d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022caa:	9807      	ldr	r0, [sp, #28]
 8022cac:	1c51      	adds	r1, r2, #1
 8022cae:	4288      	cmp	r0, r1
 8022cb0:	dd2f      	ble.n	8022d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022cb2:	2b00      	cmp	r3, #0
 8022cb4:	db2d      	blt.n	8022d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022cb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022cb8:	1c59      	adds	r1, r3, #1
 8022cba:	4288      	cmp	r0, r1
 8022cbc:	dd29      	ble.n	8022d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022cbe:	9b06      	ldr	r3, [sp, #24]
 8022cc0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022cc2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022cc4:	3b01      	subs	r3, #1
 8022cc6:	fb02 1203 	mla	r2, r2, r3, r1
 8022cca:	1412      	asrs	r2, r2, #16
 8022ccc:	d42c      	bmi.n	8022d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022cce:	9907      	ldr	r1, [sp, #28]
 8022cd0:	3201      	adds	r2, #1
 8022cd2:	4291      	cmp	r1, r2
 8022cd4:	dd28      	ble.n	8022d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022cd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022cd8:	fb02 4303 	mla	r3, r2, r3, r4
 8022cdc:	141b      	asrs	r3, r3, #16
 8022cde:	d423      	bmi.n	8022d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ce2:	3301      	adds	r3, #1
 8022ce4:	429a      	cmp	r2, r3
 8022ce6:	dd1f      	ble.n	8022d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022ce8:	9b06      	ldr	r3, [sp, #24]
 8022cea:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8022cee:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8022cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8022cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	f300 81e3 	bgt.w	80230c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 8022cfc:	9b06      	ldr	r3, [sp, #24]
 8022cfe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d04:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022d08:	930a      	str	r3, [sp, #40]	; 0x28
 8022d0a:	e173      	b.n	8022ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022d0c:	1c51      	adds	r1, r2, #1
 8022d0e:	f040 8162 	bne.w	8022fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d12:	9907      	ldr	r1, [sp, #28]
 8022d14:	428a      	cmp	r2, r1
 8022d16:	f280 815e 	bge.w	8022fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d1a:	1c5f      	adds	r7, r3, #1
 8022d1c:	f2c0 815b 	blt.w	8022fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d22:	4293      	cmp	r3, r2
 8022d24:	f280 8157 	bge.w	8022fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d28:	9b06      	ldr	r3, [sp, #24]
 8022d2a:	9314      	str	r3, [sp, #80]	; 0x50
 8022d2c:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8022d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d32:	9311      	str	r3, [sp, #68]	; 0x44
 8022d34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	dde0      	ble.n	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022d3a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d3c:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022d40:	1412      	asrs	r2, r2, #16
 8022d42:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022d46:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022d4a:	f100 81a1 	bmi.w	8023090 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 8022d4e:	9e07      	ldr	r6, [sp, #28]
 8022d50:	1c55      	adds	r5, r2, #1
 8022d52:	42ae      	cmp	r6, r5
 8022d54:	f340 819e 	ble.w	8023094 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	f2c0 819b 	blt.w	8023094 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022d5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022d60:	1c5d      	adds	r5, r3, #1
 8022d62:	42ae      	cmp	r6, r5
 8022d64:	f340 8196 	ble.w	8023094 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022d68:	9d07      	ldr	r5, [sp, #28]
 8022d6a:	fb03 2305 	mla	r3, r3, r5, r2
 8022d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d70:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022d78:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022d7c:	2800      	cmp	r0, #0
 8022d7e:	f000 8178 	beq.w	8023072 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8022d82:	686a      	ldr	r2, [r5, #4]
 8022d84:	920b      	str	r2, [sp, #44]	; 0x2c
 8022d86:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022d8a:	2900      	cmp	r1, #0
 8022d8c:	f000 817a 	beq.w	8023084 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8022d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d92:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8022d94:	18aa      	adds	r2, r5, r2
 8022d96:	59ad      	ldr	r5, [r5, r6]
 8022d98:	6852      	ldr	r2, [r2, #4]
 8022d9a:	9508      	str	r5, [sp, #32]
 8022d9c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022da0:	920c      	str	r2, [sp, #48]	; 0x30
 8022da2:	0e15      	lsrs	r5, r2, #24
 8022da4:	b280      	uxth	r0, r0
 8022da6:	b289      	uxth	r1, r1
 8022da8:	fb00 fb01 	mul.w	fp, r0, r1
 8022dac:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022db0:	0100      	lsls	r0, r0, #4
 8022db2:	eba0 090b 	sub.w	r9, r0, fp
 8022db6:	b289      	uxth	r1, r1
 8022db8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022dbc:	fa1f f989 	uxth.w	r9, r9
 8022dc0:	1a52      	subs	r2, r2, r1
 8022dc2:	b292      	uxth	r2, r2
 8022dc4:	fb09 f008 	mul.w	r0, r9, r8
 8022dc8:	fb02 000c 	mla	r0, r2, ip, r0
 8022dcc:	fb01 000a 	mla	r0, r1, sl, r0
 8022dd0:	fb0b 0005 	mla	r0, fp, r5, r0
 8022dd4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022dd8:	2800      	cmp	r0, #0
 8022dda:	f000 80ef 	beq.w	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8022dde:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022de2:	d01b      	beq.n	8022e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 8022de4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022de8:	fb0c fe0e 	mul.w	lr, ip, lr
 8022dec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022df0:	fb0c fc03 	mul.w	ip, ip, r3
 8022df4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022df8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dfc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e00:	4473      	add	r3, lr
 8022e02:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022e06:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022e0a:	0a1b      	lsrs	r3, r3, #8
 8022e0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e14:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e18:	ea43 030e 	orr.w	r3, r3, lr
 8022e1c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022e20:	d01e      	beq.n	8022e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8022e22:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022e24:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022e28:	fb08 fc0c 	mul.w	ip, r8, ip
 8022e2c:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 8022e30:	fb08 f80e 	mul.w	r8, r8, lr
 8022e34:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e40:	44e6      	add	lr, ip
 8022e42:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022e46:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022e4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e4e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022e52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e56:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022e5a:	ea4e 0608 	orr.w	r6, lr, r8
 8022e5e:	960b      	str	r6, [sp, #44]	; 0x2c
 8022e60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022e64:	d01e      	beq.n	8022ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8022e66:	9e08      	ldr	r6, [sp, #32]
 8022e68:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022e6c:	fb0a f808 	mul.w	r8, sl, r8
 8022e70:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022e74:	fb0a fa0c 	mul.w	sl, sl, ip
 8022e78:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022e7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e80:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022e84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022e88:	44c6      	add	lr, r8
 8022e8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022e8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e9e:	ea4e 060a 	orr.w	r6, lr, sl
 8022ea2:	9608      	str	r6, [sp, #32]
 8022ea4:	2dff      	cmp	r5, #255	; 0xff
 8022ea6:	d01d      	beq.n	8022ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 8022ea8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022eaa:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022eae:	fb05 f808 	mul.w	r8, r5, r8
 8022eb2:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022eb6:	fb05 f50c 	mul.w	r5, r5, ip
 8022eba:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022ebe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ec2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022ec6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022eca:	44c6      	add	lr, r8
 8022ecc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022ed0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ed4:	0a2d      	lsrs	r5, r5, #8
 8022ed6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022eda:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022ede:	ea4e 0505 	orr.w	r5, lr, r5
 8022ee2:	950c      	str	r5, [sp, #48]	; 0x30
 8022ee4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022ee6:	9e08      	ldr	r6, [sp, #32]
 8022ee8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022eec:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022ef0:	fb09 f505 	mul.w	r5, r9, r5
 8022ef4:	fb02 550c 	mla	r5, r2, ip, r5
 8022ef8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022efc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022efe:	fb01 550c 	mla	r5, r1, ip, r5
 8022f02:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022f06:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022f08:	fb0b 550c 	mla	r5, fp, ip, r5
 8022f0c:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022f10:	fb09 f90c 	mul.w	r9, r9, ip
 8022f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f18:	fb02 9303 	mla	r3, r2, r3, r9
 8022f1c:	9a08      	ldr	r2, [sp, #32]
 8022f1e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f24:	fb01 330e 	mla	r3, r1, lr, r3
 8022f28:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022f2c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f32:	0a2d      	lsrs	r5, r5, #8
 8022f34:	f8b3 c000 	ldrh.w	ip, [r3]
 8022f38:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022f3c:	fb00 f307 	mul.w	r3, r0, r7
 8022f40:	1c58      	adds	r0, r3, #1
 8022f42:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f46:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022f4a:	ea45 050b 	orr.w	r5, r5, fp
 8022f4e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022f52:	0c29      	lsrs	r1, r5, #16
 8022f54:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022f58:	ea4f 232c 	mov.w	r3, ip, asr #8
 8022f5c:	b2c0      	uxtb	r0, r0
 8022f5e:	fb11 f107 	smulbb	r1, r1, r7
 8022f62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022f66:	fb03 1300 	mla	r3, r3, r0, r1
 8022f6a:	b299      	uxth	r1, r3
 8022f6c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022f70:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022f74:	fb13 f307 	smulbb	r3, r3, r7
 8022f78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022f7c:	fb02 3200 	mla	r2, r2, r0, r3
 8022f80:	b2ed      	uxtb	r5, r5
 8022f82:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022f86:	b2db      	uxtb	r3, r3
 8022f88:	fb15 f507 	smulbb	r5, r5, r7
 8022f8c:	fb03 5500 	mla	r5, r3, r0, r5
 8022f90:	b292      	uxth	r2, r2
 8022f92:	b2ad      	uxth	r5, r5
 8022f94:	1c4b      	adds	r3, r1, #1
 8022f96:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022f9a:	1c68      	adds	r0, r5, #1
 8022f9c:	1c51      	adds	r1, r2, #1
 8022f9e:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8022fa2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022fa6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022faa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022fae:	0952      	lsrs	r2, r2, #5
 8022fb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fb4:	432b      	orrs	r3, r5
 8022fb6:	4313      	orrs	r3, r2
 8022fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022fba:	8013      	strh	r3, [r2, #0]
 8022fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022fbe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fc0:	3302      	adds	r3, #2
 8022fc2:	9311      	str	r3, [sp, #68]	; 0x44
 8022fc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022fc6:	4413      	add	r3, r2
 8022fc8:	932b      	str	r3, [sp, #172]	; 0xac
 8022fca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022fcc:	441c      	add	r4, r3
 8022fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022fd0:	3b01      	subs	r3, #1
 8022fd2:	9314      	str	r3, [sp, #80]	; 0x50
 8022fd4:	e6ae      	b.n	8022d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022fd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022fd8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fda:	4413      	add	r3, r2
 8022fdc:	932b      	str	r3, [sp, #172]	; 0xac
 8022fde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022fe0:	441c      	add	r4, r3
 8022fe2:	9b06      	ldr	r3, [sp, #24]
 8022fe4:	3b01      	subs	r3, #1
 8022fe6:	9306      	str	r3, [sp, #24]
 8022fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fea:	3302      	adds	r3, #2
 8022fec:	930a      	str	r3, [sp, #40]	; 0x28
 8022fee:	e653      	b.n	8022c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022ff0:	f47f ae65 	bne.w	8022cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	f340 81a0 	ble.w	802333c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8022ffc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023004:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023008:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802300a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802300e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023012:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023016:	eef0 6a48 	vmov.f32	s13, s16
 802301a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802301e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023022:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023026:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802302a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802302e:	eef0 6a68 	vmov.f32	s13, s17
 8023032:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023036:	ee18 2a10 	vmov	r2, s16
 802303a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802303e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023042:	ee18 2a90 	vmov	r2, s17
 8023046:	932d      	str	r3, [sp, #180]	; 0xb4
 8023048:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802304a:	fb92 f3f3 	sdiv	r3, r2, r3
 802304e:	932e      	str	r3, [sp, #184]	; 0xb8
 8023050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023052:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023054:	3b01      	subs	r3, #1
 8023056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802305a:	9313      	str	r3, [sp, #76]	; 0x4c
 802305c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802305e:	bf08      	it	eq
 8023060:	4613      	moveq	r3, r2
 8023062:	ee16 4a90 	vmov	r4, s13
 8023066:	9306      	str	r3, [sp, #24]
 8023068:	eef0 8a67 	vmov.f32	s17, s15
 802306c:	eeb0 8a47 	vmov.f32	s16, s14
 8023070:	e60b      	b.n	8022c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8023072:	b151      	cbz	r1, 802308a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023076:	58aa      	ldr	r2, [r5, r2]
 8023078:	9208      	str	r2, [sp, #32]
 802307a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802307e:	25ff      	movs	r5, #255	; 0xff
 8023080:	46a8      	mov	r8, r5
 8023082:	e68f      	b.n	8022da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 8023084:	25ff      	movs	r5, #255	; 0xff
 8023086:	46aa      	mov	sl, r5
 8023088:	e68c      	b.n	8022da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 802308a:	25ff      	movs	r5, #255	; 0xff
 802308c:	46aa      	mov	sl, r5
 802308e:	e7f7      	b.n	8023080 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8023090:	1c56      	adds	r6, r2, #1
 8023092:	d193      	bne.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8023094:	9d07      	ldr	r5, [sp, #28]
 8023096:	4295      	cmp	r5, r2
 8023098:	dd90      	ble.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802309a:	1c5d      	adds	r5, r3, #1
 802309c:	db8e      	blt.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802309e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80230a0:	429d      	cmp	r5, r3
 80230a2:	dd8b      	ble.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80230a6:	9201      	str	r2, [sp, #4]
 80230a8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80230ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80230ae:	9300      	str	r3, [sp, #0]
 80230b0:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80230b4:	9b07      	ldr	r3, [sp, #28]
 80230b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80230b8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80230bc:	f7ff fc4e 	bl	802295c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80230c0:	e77c      	b.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80230c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80230c6:	9d07      	ldr	r5, [sp, #28]
 80230c8:	1412      	asrs	r2, r2, #16
 80230ca:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80230ce:	1423      	asrs	r3, r4, #16
 80230d0:	fb05 2303 	mla	r3, r5, r3, r2
 80230d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80230d6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80230da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80230de:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80230e2:	0e1e      	lsrs	r6, r3, #24
 80230e4:	2900      	cmp	r1, #0
 80230e6:	f000 811a 	beq.w	802331e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 80230ea:	686a      	ldr	r2, [r5, #4]
 80230ec:	920d      	str	r2, [sp, #52]	; 0x34
 80230ee:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80230f2:	2800      	cmp	r0, #0
 80230f4:	f000 811c 	beq.w	8023330 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 80230f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80230fc:	18aa      	adds	r2, r5, r2
 80230fe:	59ed      	ldr	r5, [r5, r7]
 8023100:	6852      	ldr	r2, [r2, #4]
 8023102:	9509      	str	r5, [sp, #36]	; 0x24
 8023104:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8023108:	920f      	str	r2, [sp, #60]	; 0x3c
 802310a:	0e15      	lsrs	r5, r2, #24
 802310c:	b289      	uxth	r1, r1
 802310e:	b280      	uxth	r0, r0
 8023110:	fb01 f900 	mul.w	r9, r1, r0
 8023114:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023118:	0109      	lsls	r1, r1, #4
 802311a:	eba1 0e09 	sub.w	lr, r1, r9
 802311e:	b280      	uxth	r0, r0
 8023120:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023124:	fa1f fe8e 	uxth.w	lr, lr
 8023128:	1a12      	subs	r2, r2, r0
 802312a:	b292      	uxth	r2, r2
 802312c:	fb0e f10c 	mul.w	r1, lr, ip
 8023130:	fb02 1106 	mla	r1, r2, r6, r1
 8023134:	fb00 1108 	mla	r1, r0, r8, r1
 8023138:	fb09 1105 	mla	r1, r9, r5, r1
 802313c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023140:	2900      	cmp	r1, #0
 8023142:	f000 80e0 	beq.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 8023146:	2eff      	cmp	r6, #255	; 0xff
 8023148:	d016      	beq.n	8023178 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 802314a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802314e:	4377      	muls	r7, r6
 8023150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023154:	435e      	muls	r6, r3
 8023156:	0a3b      	lsrs	r3, r7, #8
 8023158:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802315c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023160:	443b      	add	r3, r7
 8023162:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023166:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802316a:	0a1b      	lsrs	r3, r3, #8
 802316c:	0a3f      	lsrs	r7, r7, #8
 802316e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023172:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023176:	433b      	orrs	r3, r7
 8023178:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802317c:	d01d      	beq.n	80231ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802317e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023180:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023182:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023186:	fb0c f606 	mul.w	r6, ip, r6
 802318a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802318e:	fb0c fc07 	mul.w	ip, ip, r7
 8023192:	0a37      	lsrs	r7, r6, #8
 8023194:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023198:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802319c:	4437      	add	r7, r6
 802319e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80231a2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80231a6:	0a3f      	lsrs	r7, r7, #8
 80231a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80231b4:	ea47 060c 	orr.w	r6, r7, ip
 80231b8:	960d      	str	r6, [sp, #52]	; 0x34
 80231ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80231be:	d01d      	beq.n	80231fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 80231c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80231c2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80231c6:	fb08 fc0c 	mul.w	ip, r8, ip
 80231ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80231ce:	fb08 f806 	mul.w	r8, r8, r6
 80231d2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80231d6:	f508 7680 	add.w	r6, r8, #256	; 0x100
 80231da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80231e2:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 80231e6:	4467      	add	r7, ip
 80231e8:	0a3f      	lsrs	r7, r7, #8
 80231ea:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80231ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231f2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80231f6:	ea47 0608 	orr.w	r6, r7, r8
 80231fa:	9609      	str	r6, [sp, #36]	; 0x24
 80231fc:	2dff      	cmp	r5, #255	; 0xff
 80231fe:	d01a      	beq.n	8023236 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 8023200:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023202:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023206:	fb05 fc0c 	mul.w	ip, r5, ip
 802320a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802320e:	4375      	muls	r5, r6
 8023210:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023214:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023218:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802321c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023220:	4467      	add	r7, ip
 8023222:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023226:	0a3f      	lsrs	r7, r7, #8
 8023228:	0a2d      	lsrs	r5, r5, #8
 802322a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802322e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023232:	433d      	orrs	r5, r7
 8023234:	950f      	str	r5, [sp, #60]	; 0x3c
 8023236:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023238:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802323c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8023240:	fb0e f505 	mul.w	r5, lr, r5
 8023244:	fb02 5506 	mla	r5, r2, r6, r5
 8023248:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802324a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802324e:	fb00 5506 	mla	r5, r0, r6, r5
 8023252:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023254:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023258:	fb09 5506 	mla	r5, r9, r6, r5
 802325c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802325e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023262:	fb0e fe06 	mul.w	lr, lr, r6
 8023266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802326a:	fb02 e303 	mla	r3, r2, r3, lr
 802326e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023270:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023276:	fb00 3307 	mla	r3, r0, r7, r3
 802327a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802327e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023282:	fb01 f10b 	mul.w	r1, r1, fp
 8023286:	0a2d      	lsrs	r5, r5, #8
 8023288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802328c:	f8ba 0000 	ldrh.w	r0, [sl]
 8023290:	1c4b      	adds	r3, r1, #1
 8023292:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023296:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802329a:	ea45 050c 	orr.w	r5, r5, ip
 802329e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80232a2:	1202      	asrs	r2, r0, #8
 80232a4:	0c2b      	lsrs	r3, r5, #16
 80232a6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80232aa:	b2c9      	uxtb	r1, r1
 80232ac:	fb13 f30b 	smulbb	r3, r3, fp
 80232b0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80232b4:	fb02 3201 	mla	r2, r2, r1, r3
 80232b8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80232bc:	10c3      	asrs	r3, r0, #3
 80232be:	b2ed      	uxtb	r5, r5
 80232c0:	00c0      	lsls	r0, r0, #3
 80232c2:	b2c0      	uxtb	r0, r0
 80232c4:	fb15 f50b 	smulbb	r5, r5, fp
 80232c8:	fb00 5001 	mla	r0, r0, r1, r5
 80232cc:	b292      	uxth	r2, r2
 80232ce:	fb16 f60b 	smulbb	r6, r6, fp
 80232d2:	b280      	uxth	r0, r0
 80232d4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80232d8:	fb03 6301 	mla	r3, r3, r1, r6
 80232dc:	1c51      	adds	r1, r2, #1
 80232de:	1c46      	adds	r6, r0, #1
 80232e0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80232e4:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80232e8:	b29b      	uxth	r3, r3
 80232ea:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80232ee:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80232f2:	4332      	orrs	r2, r6
 80232f4:	1c5e      	adds	r6, r3, #1
 80232f6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80232fa:	095b      	lsrs	r3, r3, #5
 80232fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023300:	431a      	orrs	r2, r3
 8023302:	f8aa 2000 	strh.w	r2, [sl]
 8023306:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023308:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802330a:	4413      	add	r3, r2
 802330c:	932b      	str	r3, [sp, #172]	; 0xac
 802330e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023310:	441c      	add	r4, r3
 8023312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023314:	3b01      	subs	r3, #1
 8023316:	f10a 0a02 	add.w	sl, sl, #2
 802331a:	9311      	str	r3, [sp, #68]	; 0x44
 802331c:	e4ea      	b.n	8022cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802331e:	b150      	cbz	r0, 8023336 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 8023320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023322:	58aa      	ldr	r2, [r5, r2]
 8023324:	9209      	str	r2, [sp, #36]	; 0x24
 8023326:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802332a:	25ff      	movs	r5, #255	; 0xff
 802332c:	46ac      	mov	ip, r5
 802332e:	e6ed      	b.n	802310c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8023330:	25ff      	movs	r5, #255	; 0xff
 8023332:	46a8      	mov	r8, r5
 8023334:	e6ea      	b.n	802310c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8023336:	25ff      	movs	r5, #255	; 0xff
 8023338:	46a8      	mov	r8, r5
 802333a:	e7f7      	b.n	802332c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802333c:	b019      	add	sp, #100	; 0x64
 802333e:	ecbd 8b08 	vpop	{d8-d11}
 8023342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023348 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802334c:	8808      	ldrh	r0, [r1, #0]
 802334e:	b085      	sub	sp, #20
 8023350:	1206      	asrs	r6, r0, #8
 8023352:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023356:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802335a:	9600      	str	r6, [sp, #0]
 802335c:	10c6      	asrs	r6, r0, #3
 802335e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023362:	9601      	str	r6, [sp, #4]
 8023364:	00c0      	lsls	r0, r0, #3
 8023366:	fb04 c603 	mla	r6, r4, r3, ip
 802336a:	b2c0      	uxtb	r0, r0
 802336c:	4691      	mov	r9, r2
 802336e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8023372:	9a00      	ldr	r2, [sp, #0]
 8023374:	9002      	str	r0, [sp, #8]
 8023376:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802337a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802337e:	9a01      	ldr	r2, [sp, #4]
 8023380:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023384:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023388:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802338c:	2c00      	cmp	r4, #0
 802338e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023392:	db3a      	blt.n	802340a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8023394:	45a0      	cmp	r8, r4
 8023396:	dd38      	ble.n	802340a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8023398:	f1bc 0f00 	cmp.w	ip, #0
 802339c:	db33      	blt.n	8023406 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 802339e:	4563      	cmp	r3, ip
 80233a0:	dd31      	ble.n	8023406 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 80233a2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80233a6:	f11c 0601 	adds.w	r6, ip, #1
 80233aa:	d431      	bmi.n	8023410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233ac:	42b3      	cmp	r3, r6
 80233ae:	dd2f      	ble.n	8023410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233b0:	b375      	cbz	r5, 8023410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233b2:	f8de 6004 	ldr.w	r6, [lr, #4]
 80233b6:	3401      	adds	r4, #1
 80233b8:	d42e      	bmi.n	8023418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80233ba:	45a0      	cmp	r8, r4
 80233bc:	dd2c      	ble.n	8023418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80233be:	b35f      	cbz	r7, 8023418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 80233c0:	f1bc 0f00 	cmp.w	ip, #0
 80233c4:	db26      	blt.n	8023414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80233c6:	4563      	cmp	r3, ip
 80233c8:	dd24      	ble.n	8023414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 80233ca:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80233ce:	f11c 0c01 	adds.w	ip, ip, #1
 80233d2:	d405      	bmi.n	80233e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 80233d4:	4563      	cmp	r3, ip
 80233d6:	dd03      	ble.n	80233e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 80233d8:	b115      	cbz	r5, 80233e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 80233da:	3301      	adds	r3, #1
 80233dc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80233e0:	2d0f      	cmp	r5, #15
 80233e2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80233e6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80233ea:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80233ee:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80233f2:	d801      	bhi.n	80233f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 80233f4:	2f0f      	cmp	r7, #15
 80233f6:	d911      	bls.n	802341c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 80233f8:	4b7b      	ldr	r3, [pc, #492]	; (80235e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80233fa:	4a7c      	ldr	r2, [pc, #496]	; (80235ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80233fc:	487c      	ldr	r0, [pc, #496]	; (80235f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 80233fe:	f240 210d 	movw	r1, #525	; 0x20d
 8023402:	f001 fcdf 	bl	8024dc4 <__assert_func>
 8023406:	4602      	mov	r2, r0
 8023408:	e7cd      	b.n	80233a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802340a:	4606      	mov	r6, r0
 802340c:	4602      	mov	r2, r0
 802340e:	e7d2      	b.n	80233b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 8023410:	4606      	mov	r6, r0
 8023412:	e7d0      	b.n	80233b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 8023414:	4604      	mov	r4, r0
 8023416:	e7da      	b.n	80233ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 8023418:	4604      	mov	r4, r0
 802341a:	e7e1      	b.n	80233e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802341c:	b2ab      	uxth	r3, r5
 802341e:	b2bf      	uxth	r7, r7
 8023420:	fb03 fe07 	mul.w	lr, r3, r7
 8023424:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023428:	011b      	lsls	r3, r3, #4
 802342a:	eba3 0c0e 	sub.w	ip, r3, lr
 802342e:	b2bf      	uxth	r7, r7
 8023430:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023434:	fa1f fc8c 	uxth.w	ip, ip
 8023438:	1bed      	subs	r5, r5, r7
 802343a:	b2ad      	uxth	r5, r5
 802343c:	fb0c f30a 	mul.w	r3, ip, sl
 8023440:	fb05 330b 	mla	r3, r5, fp, r3
 8023444:	fb07 3309 	mla	r3, r7, r9, r3
 8023448:	fb0e 3308 	mla	r3, lr, r8, r3
 802344c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023450:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023454:	9303      	str	r3, [sp, #12]
 8023456:	d018      	beq.n	802348a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 8023458:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802345c:	fb0b f303 	mul.w	r3, fp, r3
 8023460:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023464:	fb0b fb02 	mul.w	fp, fp, r2
 8023468:	0a1a      	lsrs	r2, r3, #8
 802346a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802346e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023472:	441a      	add	r2, r3
 8023474:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023478:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802347c:	0a12      	lsrs	r2, r2, #8
 802347e:	0a1b      	lsrs	r3, r3, #8
 8023480:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023488:	431a      	orrs	r2, r3
 802348a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802348e:	d019      	beq.n	80234c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 8023490:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023494:	fb0a fb0b 	mul.w	fp, sl, fp
 8023498:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802349c:	fb0a fa06 	mul.w	sl, sl, r6
 80234a0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80234a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234ac:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80234b0:	445e      	add	r6, fp
 80234b2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80234b6:	0a36      	lsrs	r6, r6, #8
 80234b8:	0a1b      	lsrs	r3, r3, #8
 80234ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234c2:	431e      	orrs	r6, r3
 80234c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80234c8:	d019      	beq.n	80234fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 80234ca:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80234ce:	fb09 fa0a 	mul.w	sl, r9, sl
 80234d2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80234d6:	fb09 f904 	mul.w	r9, r9, r4
 80234da:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80234de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80234e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80234e6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80234ea:	4454      	add	r4, sl
 80234ec:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80234f0:	0a24      	lsrs	r4, r4, #8
 80234f2:	0a1b      	lsrs	r3, r3, #8
 80234f4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80234f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234fc:	431c      	orrs	r4, r3
 80234fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023502:	d019      	beq.n	8023538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 8023504:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023508:	fb08 f909 	mul.w	r9, r8, r9
 802350c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023510:	fb08 f800 	mul.w	r8, r8, r0
 8023514:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023518:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802351c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023520:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023524:	4448      	add	r0, r9
 8023526:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802352a:	0a00      	lsrs	r0, r0, #8
 802352c:	0a1b      	lsrs	r3, r3, #8
 802352e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023536:	4318      	orrs	r0, r3
 8023538:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802353c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023540:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023544:	fb0c f808 	mul.w	r8, ip, r8
 8023548:	fb0c f606 	mul.w	r6, ip, r6
 802354c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023550:	fb05 8803 	mla	r8, r5, r3, r8
 8023554:	fb05 6202 	mla	r2, r5, r2, r6
 8023558:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802355c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023560:	fb07 8803 	mla	r8, r7, r3, r8
 8023564:	fb07 2704 	mla	r7, r7, r4, r2
 8023568:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802356c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023570:	fb0e 8303 	mla	r3, lr, r3, r8
 8023574:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023578:	0a1b      	lsrs	r3, r3, #8
 802357a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802357e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023582:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023586:	ea43 0e0e 	orr.w	lr, r3, lr
 802358a:	9b03      	ldr	r3, [sp, #12]
 802358c:	9800      	ldr	r0, [sp, #0]
 802358e:	9c01      	ldr	r4, [sp, #4]
 8023590:	9a02      	ldr	r2, [sp, #8]
 8023592:	43db      	mvns	r3, r3
 8023594:	b2db      	uxtb	r3, r3
 8023596:	4358      	muls	r0, r3
 8023598:	435c      	muls	r4, r3
 802359a:	435a      	muls	r2, r3
 802359c:	1c43      	adds	r3, r0, #1
 802359e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80235a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80235a6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80235aa:	4b12      	ldr	r3, [pc, #72]	; (80235f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 80235ac:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 80235b0:	1c50      	adds	r0, r2, #1
 80235b2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80235b6:	fa5f f28e 	uxtb.w	r2, lr
 80235ba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80235be:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80235c2:	1c62      	adds	r2, r4, #1
 80235c4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80235c8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80235cc:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 80235d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80235d4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80235d8:	ea43 0e0e 	orr.w	lr, r3, lr
 80235dc:	f8a1 e000 	strh.w	lr, [r1]
 80235e0:	b005      	add	sp, #20
 80235e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235e6:	bf00      	nop
 80235e8:	0805441c 	.word	0x0805441c
 80235ec:	08054975 	.word	0x08054975
 80235f0:	080544a4 	.word	0x080544a4
 80235f4:	fffff800 	.word	0xfffff800

080235f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80235f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fc:	ed2d 8b08 	vpush	{d8-d11}
 8023600:	b097      	sub	sp, #92	; 0x5c
 8023602:	eeb0 aa40 	vmov.f32	s20, s0
 8023606:	9306      	str	r3, [sp, #24]
 8023608:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802360c:	9307      	str	r3, [sp, #28]
 802360e:	9214      	str	r2, [sp, #80]	; 0x50
 8023610:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023614:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023616:	9112      	str	r1, [sp, #72]	; 0x48
 8023618:	9310      	str	r3, [sp, #64]	; 0x40
 802361a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802361e:	9015      	str	r0, [sp, #84]	; 0x54
 8023620:	6850      	ldr	r0, [r2, #4]
 8023622:	6812      	ldr	r2, [r2, #0]
 8023624:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8023626:	fb00 1303 	mla	r3, r0, r3, r1
 802362a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802362e:	930a      	str	r3, [sp, #40]	; 0x28
 8023630:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023632:	681b      	ldr	r3, [r3, #0]
 8023634:	9311      	str	r3, [sp, #68]	; 0x44
 8023636:	9b07      	ldr	r3, [sp, #28]
 8023638:	009b      	lsls	r3, r3, #2
 802363a:	eef0 9a60 	vmov.f32	s19, s1
 802363e:	eeb0 9a41 	vmov.f32	s18, s2
 8023642:	eeb0 8a62 	vmov.f32	s16, s5
 8023646:	eef0 8a43 	vmov.f32	s17, s6
 802364a:	eef0 ba44 	vmov.f32	s23, s8
 802364e:	eeb0 ba64 	vmov.f32	s22, s9
 8023652:	eef0 aa45 	vmov.f32	s21, s10
 8023656:	930e      	str	r3, [sp, #56]	; 0x38
 8023658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802365a:	2b00      	cmp	r3, #0
 802365c:	dc03      	bgt.n	8023666 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802365e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023660:	2b00      	cmp	r3, #0
 8023662:	f340 8361 	ble.w	8023d28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 8023666:	9b06      	ldr	r3, [sp, #24]
 8023668:	2b00      	cmp	r3, #0
 802366a:	f340 819b 	ble.w	80239a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802366e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023670:	1412      	asrs	r2, r2, #16
 8023672:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023676:	d42e      	bmi.n	80236d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023678:	9807      	ldr	r0, [sp, #28]
 802367a:	1c51      	adds	r1, r2, #1
 802367c:	4288      	cmp	r0, r1
 802367e:	dd2d      	ble.n	80236dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023680:	2b00      	cmp	r3, #0
 8023682:	db2b      	blt.n	80236dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023684:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023686:	1c59      	adds	r1, r3, #1
 8023688:	4288      	cmp	r0, r1
 802368a:	dd27      	ble.n	80236dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802368c:	9b06      	ldr	r3, [sp, #24]
 802368e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023690:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023692:	3b01      	subs	r3, #1
 8023694:	fb02 1203 	mla	r2, r2, r3, r1
 8023698:	1412      	asrs	r2, r2, #16
 802369a:	d42a      	bmi.n	80236f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802369c:	9907      	ldr	r1, [sp, #28]
 802369e:	3201      	adds	r2, #1
 80236a0:	4291      	cmp	r1, r2
 80236a2:	dd26      	ble.n	80236f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80236a6:	fb02 5303 	mla	r3, r2, r3, r5
 80236aa:	141b      	asrs	r3, r3, #16
 80236ac:	d421      	bmi.n	80236f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236b0:	3301      	adds	r3, #1
 80236b2:	429a      	cmp	r2, r3
 80236b4:	dd1d      	ble.n	80236f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236b6:	9b06      	ldr	r3, [sp, #24]
 80236b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80236bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80236be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	f300 81e3 	bgt.w	8023a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80236c6:	9b06      	ldr	r3, [sp, #24]
 80236c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80236cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236ce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80236d2:	930a      	str	r3, [sp, #40]	; 0x28
 80236d4:	e168      	b.n	80239a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80236d6:	1c51      	adds	r1, r2, #1
 80236d8:	f040 8157 	bne.w	802398a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80236dc:	9907      	ldr	r1, [sp, #28]
 80236de:	428a      	cmp	r2, r1
 80236e0:	f280 8153 	bge.w	802398a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80236e4:	1c5f      	adds	r7, r3, #1
 80236e6:	f2c0 8150 	blt.w	802398a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80236ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236ec:	4293      	cmp	r3, r2
 80236ee:	f280 814c 	bge.w	802398a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80236f2:	9b06      	ldr	r3, [sp, #24]
 80236f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80236f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80236f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80236fa:	2b00      	cmp	r3, #0
 80236fc:	dde3      	ble.n	80236c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80236fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023700:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023702:	1409      	asrs	r1, r1, #16
 8023704:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023708:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802370c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023710:	f100 81a3 	bmi.w	8023a5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8023714:	9c07      	ldr	r4, [sp, #28]
 8023716:	1c4e      	adds	r6, r1, #1
 8023718:	42b4      	cmp	r4, r6
 802371a:	f340 81a0 	ble.w	8023a5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802371e:	2b00      	cmp	r3, #0
 8023720:	f2c0 819d 	blt.w	8023a5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023724:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023726:	1c5e      	adds	r6, r3, #1
 8023728:	42b4      	cmp	r4, r6
 802372a:	f340 8198 	ble.w	8023a5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802372e:	9c07      	ldr	r4, [sp, #28]
 8023730:	fb03 1304 	mla	r3, r3, r4, r1
 8023734:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023736:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802373a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802373e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023742:	2a00      	cmp	r2, #0
 8023744:	f000 816f 	beq.w	8023a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023748:	6871      	ldr	r1, [r6, #4]
 802374a:	910b      	str	r1, [sp, #44]	; 0x2c
 802374c:	ea4f 6811 	mov.w	r8, r1, lsr #24
 8023750:	2800      	cmp	r0, #0
 8023752:	f000 8171 	beq.w	8023a38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8023756:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023758:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802375a:	1871      	adds	r1, r6, r1
 802375c:	5934      	ldr	r4, [r6, r4]
 802375e:	6849      	ldr	r1, [r1, #4]
 8023760:	9408      	str	r4, [sp, #32]
 8023762:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8023766:	910c      	str	r1, [sp, #48]	; 0x30
 8023768:	0e0e      	lsrs	r6, r1, #24
 802376a:	b292      	uxth	r2, r2
 802376c:	b280      	uxth	r0, r0
 802376e:	fb02 fb00 	mul.w	fp, r2, r0
 8023772:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023776:	0112      	lsls	r2, r2, #4
 8023778:	eba2 090b 	sub.w	r9, r2, fp
 802377c:	b280      	uxth	r0, r0
 802377e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023782:	fa1f f989 	uxth.w	r9, r9
 8023786:	1a09      	subs	r1, r1, r0
 8023788:	b289      	uxth	r1, r1
 802378a:	fb09 f208 	mul.w	r2, r9, r8
 802378e:	fb01 220c 	mla	r2, r1, ip, r2
 8023792:	fb00 220a 	mla	r2, r0, sl, r2
 8023796:	fb0b 2206 	mla	r2, fp, r6, r2
 802379a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802379e:	2a00      	cmp	r2, #0
 80237a0:	f000 80e8 	beq.w	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80237a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80237a8:	d01b      	beq.n	80237e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 80237aa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80237ae:	fb0c fe0e 	mul.w	lr, ip, lr
 80237b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237b6:	fb0c fc03 	mul.w	ip, ip, r3
 80237ba:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80237be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237c2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80237c6:	4473      	add	r3, lr
 80237c8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80237cc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80237d0:	0a1b      	lsrs	r3, r3, #8
 80237d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80237d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237da:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80237de:	ea43 030e 	orr.w	r3, r3, lr
 80237e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80237e6:	d01e      	beq.n	8023826 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 80237e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80237ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80237ee:	fb08 fc0c 	mul.w	ip, r8, ip
 80237f2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80237f6:	fb08 f80e 	mul.w	r8, r8, lr
 80237fa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80237fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023802:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023806:	44e6      	add	lr, ip
 8023808:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802380c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023810:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023814:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023818:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802381c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023820:	ea4e 0408 	orr.w	r4, lr, r8
 8023824:	940b      	str	r4, [sp, #44]	; 0x2c
 8023826:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802382a:	d01e      	beq.n	802386a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802382c:	9c08      	ldr	r4, [sp, #32]
 802382e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023832:	fb0a f808 	mul.w	r8, sl, r8
 8023836:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802383a:	fb0a fa0c 	mul.w	sl, sl, ip
 802383e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023842:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023846:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802384a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802384e:	44c6      	add	lr, r8
 8023850:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023854:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023858:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802385c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023860:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023864:	ea4e 040a 	orr.w	r4, lr, sl
 8023868:	9408      	str	r4, [sp, #32]
 802386a:	2eff      	cmp	r6, #255	; 0xff
 802386c:	d01d      	beq.n	80238aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802386e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023870:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023874:	fb06 f808 	mul.w	r8, r6, r8
 8023878:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802387c:	fb06 f60c 	mul.w	r6, r6, ip
 8023880:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023884:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023888:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802388c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023890:	44c6      	add	lr, r8
 8023892:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023896:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802389a:	0a36      	lsrs	r6, r6, #8
 802389c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238a4:	ea4e 0406 	orr.w	r4, lr, r6
 80238a8:	940c      	str	r4, [sp, #48]	; 0x30
 80238aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80238ac:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 80238b0:	9c08      	ldr	r4, [sp, #32]
 80238b2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80238b6:	fb09 f606 	mul.w	r6, r9, r6
 80238ba:	fb01 660c 	mla	r6, r1, ip, r6
 80238be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80238c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80238c4:	fb00 660c 	mla	r6, r0, ip, r6
 80238c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80238cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80238ce:	fb0b 660c 	mla	r6, fp, ip, r6
 80238d2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80238d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238da:	fb09 f90c 	mul.w	r9, r9, ip
 80238de:	fb01 9303 	mla	r3, r1, r3, r9
 80238e2:	9908      	ldr	r1, [sp, #32]
 80238e4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80238e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80238ea:	fb00 330e 	mla	r3, r0, lr, r3
 80238ee:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80238f2:	fb0b 3b00 	mla	fp, fp, r0, r3
 80238f6:	0a36      	lsrs	r6, r6, #8
 80238f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80238fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023900:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023904:	ea46 060b 	orr.w	r6, r6, fp
 8023908:	2aff      	cmp	r2, #255	; 0xff
 802390a:	ea4f 2316 	mov.w	r3, r6, lsr #8
 802390e:	f000 8099 	beq.w	8023a44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8023912:	8839      	ldrh	r1, [r7, #0]
 8023914:	43d2      	mvns	r2, r2
 8023916:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802391a:	fa5f fe82 	uxtb.w	lr, r2
 802391e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023922:	fb0c fc0e 	mul.w	ip, ip, lr
 8023926:	10c8      	asrs	r0, r1, #3
 8023928:	00ca      	lsls	r2, r1, #3
 802392a:	f10c 0101 	add.w	r1, ip, #1
 802392e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8023932:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8023936:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802393a:	b2d2      	uxtb	r2, r2
 802393c:	4952      	ldr	r1, [pc, #328]	; (8023a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 802393e:	fb02 f20e 	mul.w	r2, r2, lr
 8023942:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8023946:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802394a:	1c51      	adds	r1, r2, #1
 802394c:	fb00 f00e 	mul.w	r0, r0, lr
 8023950:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023954:	b2f6      	uxtb	r6, r6
 8023956:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802395a:	1c42      	adds	r2, r0, #1
 802395c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023960:	b2db      	uxtb	r3, r3
 8023962:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023966:	00db      	lsls	r3, r3, #3
 8023968:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 802396c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023970:	431e      	orrs	r6, r3
 8023972:	803e      	strh	r6, [r7, #0]
 8023974:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023976:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023978:	441a      	add	r2, r3
 802397a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802397c:	9229      	str	r2, [sp, #164]	; 0xa4
 802397e:	441d      	add	r5, r3
 8023980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023982:	3b01      	subs	r3, #1
 8023984:	3702      	adds	r7, #2
 8023986:	9313      	str	r3, [sp, #76]	; 0x4c
 8023988:	e6b6      	b.n	80236f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802398a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802398c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802398e:	441a      	add	r2, r3
 8023990:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023992:	9229      	str	r2, [sp, #164]	; 0xa4
 8023994:	441d      	add	r5, r3
 8023996:	9b06      	ldr	r3, [sp, #24]
 8023998:	3b01      	subs	r3, #1
 802399a:	9306      	str	r3, [sp, #24]
 802399c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802399e:	3302      	adds	r3, #2
 80239a0:	930a      	str	r3, [sp, #40]	; 0x28
 80239a2:	e660      	b.n	8023666 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80239a4:	f47f ae72 	bne.w	802368c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80239a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	f340 81bc 	ble.w	8023d28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 80239b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80239b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80239b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80239bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239be:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80239c2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80239c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80239ca:	eef0 6a48 	vmov.f32	s13, s16
 80239ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80239d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80239d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80239da:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80239de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80239e2:	eef0 6a68 	vmov.f32	s13, s17
 80239e6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80239ea:	ee18 2a10 	vmov	r2, s16
 80239ee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80239f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80239f6:	ee18 2a90 	vmov	r2, s17
 80239fa:	932b      	str	r3, [sp, #172]	; 0xac
 80239fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a02:	932c      	str	r3, [sp, #176]	; 0xb0
 8023a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023a06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a08:	3b01      	subs	r3, #1
 8023a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a0e:	9312      	str	r3, [sp, #72]	; 0x48
 8023a10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a12:	bf08      	it	eq
 8023a14:	4613      	moveq	r3, r2
 8023a16:	ee16 5a90 	vmov	r5, s13
 8023a1a:	9306      	str	r3, [sp, #24]
 8023a1c:	eef0 8a67 	vmov.f32	s17, s15
 8023a20:	eeb0 8a47 	vmov.f32	s16, s14
 8023a24:	e618      	b.n	8023658 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8023a26:	b150      	cbz	r0, 8023a3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023a28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023a2a:	5871      	ldr	r1, [r6, r1]
 8023a2c:	9108      	str	r1, [sp, #32]
 8023a2e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023a32:	26ff      	movs	r6, #255	; 0xff
 8023a34:	46b0      	mov	r8, r6
 8023a36:	e698      	b.n	802376a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023a38:	26ff      	movs	r6, #255	; 0xff
 8023a3a:	46b2      	mov	sl, r6
 8023a3c:	e695      	b.n	802376a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023a3e:	26ff      	movs	r6, #255	; 0xff
 8023a40:	46b2      	mov	sl, r6
 8023a42:	e7f7      	b.n	8023a34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8023a44:	0972      	lsrs	r2, r6, #5
 8023a46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023a4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a4e:	f023 0307 	bic.w	r3, r3, #7
 8023a52:	4313      	orrs	r3, r2
 8023a54:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023a58:	e78a      	b.n	8023970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 8023a5a:	1c4e      	adds	r6, r1, #1
 8023a5c:	d18a      	bne.n	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a5e:	9c07      	ldr	r4, [sp, #28]
 8023a60:	428c      	cmp	r4, r1
 8023a62:	dd87      	ble.n	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a64:	1c5c      	adds	r4, r3, #1
 8023a66:	db85      	blt.n	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023a6a:	429c      	cmp	r4, r3
 8023a6c:	dd82      	ble.n	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a6e:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8023a72:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8023a76:	9400      	str	r4, [sp, #0]
 8023a78:	9b07      	ldr	r3, [sp, #28]
 8023a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a7c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023a7e:	4639      	mov	r1, r7
 8023a80:	f7ff fc62 	bl	8023348 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023a84:	e776      	b.n	8023974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a86:	bf00      	nop
 8023a88:	fffff800 	.word	0xfffff800
 8023a8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a8e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023a90:	9c07      	ldr	r4, [sp, #28]
 8023a92:	1409      	asrs	r1, r1, #16
 8023a94:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a98:	142b      	asrs	r3, r5, #16
 8023a9a:	fb04 1303 	mla	r3, r4, r3, r1
 8023a9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023aa0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023aa8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023aac:	0e1f      	lsrs	r7, r3, #24
 8023aae:	2a00      	cmp	r2, #0
 8023ab0:	f000 811d 	beq.w	8023cee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8023ab4:	6871      	ldr	r1, [r6, #4]
 8023ab6:	910d      	str	r1, [sp, #52]	; 0x34
 8023ab8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023abc:	2800      	cmp	r0, #0
 8023abe:	f000 811f 	beq.w	8023d00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 8023ac2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023ac4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ac6:	1871      	adds	r1, r6, r1
 8023ac8:	5934      	ldr	r4, [r6, r4]
 8023aca:	6849      	ldr	r1, [r1, #4]
 8023acc:	9409      	str	r4, [sp, #36]	; 0x24
 8023ace:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023ad2:	910f      	str	r1, [sp, #60]	; 0x3c
 8023ad4:	0e0e      	lsrs	r6, r1, #24
 8023ad6:	b292      	uxth	r2, r2
 8023ad8:	b280      	uxth	r0, r0
 8023ada:	fb02 fb00 	mul.w	fp, r2, r0
 8023ade:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023ae2:	0112      	lsls	r2, r2, #4
 8023ae4:	eba2 080b 	sub.w	r8, r2, fp
 8023ae8:	b280      	uxth	r0, r0
 8023aea:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023aee:	fa1f f888 	uxth.w	r8, r8
 8023af2:	1a09      	subs	r1, r1, r0
 8023af4:	b289      	uxth	r1, r1
 8023af6:	fb08 f20e 	mul.w	r2, r8, lr
 8023afa:	fb01 2207 	mla	r2, r1, r7, r2
 8023afe:	fb00 2209 	mla	r2, r0, r9, r2
 8023b02:	fb0b 2206 	mla	r2, fp, r6, r2
 8023b06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b0a:	2a00      	cmp	r2, #0
 8023b0c:	f000 80e3 	beq.w	8023cd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 8023b10:	2fff      	cmp	r7, #255	; 0xff
 8023b12:	d01a      	beq.n	8023b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 8023b14:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b18:	fb07 fc0c 	mul.w	ip, r7, ip
 8023b1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b20:	435f      	muls	r7, r3
 8023b22:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023b26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b2e:	4463      	add	r3, ip
 8023b30:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023b34:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023b38:	0a1b      	lsrs	r3, r3, #8
 8023b3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b46:	ea43 030c 	orr.w	r3, r3, ip
 8023b4a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b4e:	d01e      	beq.n	8023b8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 8023b50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023b52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023b56:	fb0e f707 	mul.w	r7, lr, r7
 8023b5a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023b5e:	fb0e fe0c 	mul.w	lr, lr, ip
 8023b62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023b66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023b6e:	44bc      	add	ip, r7
 8023b70:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023b74:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023b88:	ea4c 040e 	orr.w	r4, ip, lr
 8023b8c:	940d      	str	r4, [sp, #52]	; 0x34
 8023b8e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b92:	d01e      	beq.n	8023bd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8023b94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023b96:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b9a:	fb09 fe0e 	mul.w	lr, r9, lr
 8023b9e:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023ba2:	fb09 f907 	mul.w	r9, r9, r7
 8023ba6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023baa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023bb2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023bb6:	44f4      	add	ip, lr
 8023bb8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023bbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023bc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bc8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023bcc:	ea4c 0409 	orr.w	r4, ip, r9
 8023bd0:	9409      	str	r4, [sp, #36]	; 0x24
 8023bd2:	2eff      	cmp	r6, #255	; 0xff
 8023bd4:	d01c      	beq.n	8023c10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 8023bd6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023bd8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023bdc:	fb06 fe0e 	mul.w	lr, r6, lr
 8023be0:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023be4:	437e      	muls	r6, r7
 8023be6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023bea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023bf2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023bf6:	44f4      	add	ip, lr
 8023bf8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023bfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c00:	0a36      	lsrs	r6, r6, #8
 8023c02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c0a:	ea4c 0406 	orr.w	r4, ip, r6
 8023c0e:	940f      	str	r4, [sp, #60]	; 0x3c
 8023c10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c12:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 8023c16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023c18:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023c1c:	fb08 f606 	mul.w	r6, r8, r6
 8023c20:	fb01 6607 	mla	r6, r1, r7, r6
 8023c24:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023c28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c2a:	fb00 6607 	mla	r6, r0, r7, r6
 8023c2e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023c32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c34:	fb0b 6607 	mla	r6, fp, r7, r6
 8023c38:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c40:	fb08 f807 	mul.w	r8, r8, r7
 8023c44:	fb01 8303 	mla	r3, r1, r3, r8
 8023c48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023c4a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023c4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023c50:	fb00 330c 	mla	r3, r0, ip, r3
 8023c54:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023c58:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023c5c:	0a36      	lsrs	r6, r6, #8
 8023c5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c66:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023c6a:	ea46 060e 	orr.w	r6, r6, lr
 8023c6e:	2aff      	cmp	r2, #255	; 0xff
 8023c70:	ea4f 2316 	mov.w	r3, r6, lsr #8
 8023c74:	d04a      	beq.n	8023d0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8023c76:	f8ba 1000 	ldrh.w	r1, [sl]
 8023c7a:	43d2      	mvns	r2, r2
 8023c7c:	120f      	asrs	r7, r1, #8
 8023c7e:	fa5f fc82 	uxtb.w	ip, r2
 8023c82:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023c86:	fb07 f70c 	mul.w	r7, r7, ip
 8023c8a:	10c8      	asrs	r0, r1, #3
 8023c8c:	00ca      	lsls	r2, r1, #3
 8023c8e:	1c79      	adds	r1, r7, #1
 8023c90:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8023c94:	0c37      	lsrs	r7, r6, #16
 8023c96:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8023c9a:	b2d2      	uxtb	r2, r2
 8023c9c:	4925      	ldr	r1, [pc, #148]	; (8023d34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 8023c9e:	fb02 f20c 	mul.w	r2, r2, ip
 8023ca2:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 8023ca6:	1c51      	adds	r1, r2, #1
 8023ca8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023cac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023cb0:	b2f6      	uxtb	r6, r6
 8023cb2:	fb00 f00c 	mul.w	r0, r0, ip
 8023cb6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023cba:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 8023cbe:	1c46      	adds	r6, r0, #1
 8023cc0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8023cc4:	b2de      	uxtb	r6, r3
 8023cc6:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8023cca:	00f6      	lsls	r6, r6, #3
 8023ccc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023cd0:	4337      	orrs	r7, r6
 8023cd2:	f8aa 7000 	strh.w	r7, [sl]
 8023cd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023cd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023cda:	441a      	add	r2, r3
 8023cdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cde:	9229      	str	r2, [sp, #164]	; 0xa4
 8023ce0:	441d      	add	r5, r3
 8023ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023ce4:	3b01      	subs	r3, #1
 8023ce6:	f10a 0a02 	add.w	sl, sl, #2
 8023cea:	9313      	str	r3, [sp, #76]	; 0x4c
 8023cec:	e4e7      	b.n	80236be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8023cee:	b150      	cbz	r0, 8023d06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 8023cf0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023cf2:	5871      	ldr	r1, [r6, r1]
 8023cf4:	9109      	str	r1, [sp, #36]	; 0x24
 8023cf6:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023cfa:	26ff      	movs	r6, #255	; 0xff
 8023cfc:	46b6      	mov	lr, r6
 8023cfe:	e6ea      	b.n	8023ad6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8023d00:	26ff      	movs	r6, #255	; 0xff
 8023d02:	46b1      	mov	r9, r6
 8023d04:	e6e7      	b.n	8023ad6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8023d06:	26ff      	movs	r6, #255	; 0xff
 8023d08:	46b1      	mov	r9, r6
 8023d0a:	e7f7      	b.n	8023cfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 8023d0c:	0972      	lsrs	r2, r6, #5
 8023d0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023d12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d16:	f023 0307 	bic.w	r3, r3, #7
 8023d1a:	4313      	orrs	r3, r2
 8023d1c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023d20:	431e      	orrs	r6, r3
 8023d22:	f8aa 6000 	strh.w	r6, [sl]
 8023d26:	e7d6      	b.n	8023cd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 8023d28:	b017      	add	sp, #92	; 0x5c
 8023d2a:	ecbd 8b08 	vpop	{d8-d11}
 8023d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d32:	bf00      	nop
 8023d34:	fffff800 	.word	0xfffff800

08023d38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8023d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d3c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8023d40:	2c00      	cmp	r4, #0
 8023d42:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023d46:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023d4a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023d4e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8023d52:	fb04 ce03 	mla	lr, r4, r3, ip
 8023d56:	db60      	blt.n	8023e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023d58:	45a1      	cmp	r9, r4
 8023d5a:	dd5e      	ble.n	8023e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023d5c:	f1bc 0f00 	cmp.w	ip, #0
 8023d60:	db59      	blt.n	8023e16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023d62:	45e0      	cmp	r8, ip
 8023d64:	dd57      	ble.n	8023e16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023d66:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8023d6a:	f01e 0f01 	tst.w	lr, #1
 8023d6e:	5c16      	ldrb	r6, [r2, r0]
 8023d70:	bf0c      	ite	eq
 8023d72:	f006 060f 	andeq.w	r6, r6, #15
 8023d76:	1136      	asrne	r6, r6, #4
 8023d78:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023d7c:	b2f6      	uxtb	r6, r6
 8023d7e:	f11c 0001 	adds.w	r0, ip, #1
 8023d82:	d44d      	bmi.n	8023e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023d84:	4580      	cmp	r8, r0
 8023d86:	dd4b      	ble.n	8023e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023d88:	2d00      	cmp	r5, #0
 8023d8a:	d04b      	beq.n	8023e24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8023d8c:	f10e 0a01 	add.w	sl, lr, #1
 8023d90:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8023d94:	f01a 0f01 	tst.w	sl, #1
 8023d98:	5c10      	ldrb	r0, [r2, r0]
 8023d9a:	bf0c      	ite	eq
 8023d9c:	f000 000f 	andeq.w	r0, r0, #15
 8023da0:	1100      	asrne	r0, r0, #4
 8023da2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023da6:	b2c0      	uxtb	r0, r0
 8023da8:	3401      	adds	r4, #1
 8023daa:	d43f      	bmi.n	8023e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023dac:	45a1      	cmp	r9, r4
 8023dae:	dd3d      	ble.n	8023e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023db0:	2f00      	cmp	r7, #0
 8023db2:	f000 809e 	beq.w	8023ef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8023db6:	f1bc 0f00 	cmp.w	ip, #0
 8023dba:	db35      	blt.n	8023e28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023dbc:	45e0      	cmp	r8, ip
 8023dbe:	dd33      	ble.n	8023e28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023dc0:	eb03 090e 	add.w	r9, r3, lr
 8023dc4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8023dc8:	f019 0f01 	tst.w	r9, #1
 8023dcc:	5d14      	ldrb	r4, [r2, r4]
 8023dce:	bf0c      	ite	eq
 8023dd0:	f004 040f 	andeq.w	r4, r4, #15
 8023dd4:	1124      	asrne	r4, r4, #4
 8023dd6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023dda:	b2e4      	uxtb	r4, r4
 8023ddc:	f11c 0c01 	adds.w	ip, ip, #1
 8023de0:	d427      	bmi.n	8023e32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023de2:	45e0      	cmp	r8, ip
 8023de4:	dd25      	ble.n	8023e32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023de6:	b335      	cbz	r5, 8023e36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8023de8:	3301      	adds	r3, #1
 8023dea:	449e      	add	lr, r3
 8023dec:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023df0:	f01e 0f01 	tst.w	lr, #1
 8023df4:	5cd2      	ldrb	r2, [r2, r3]
 8023df6:	bf0c      	ite	eq
 8023df8:	f002 020f 	andeq.w	r2, r2, #15
 8023dfc:	1112      	asrne	r2, r2, #4
 8023dfe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023e02:	b2d3      	uxtb	r3, r2
 8023e04:	2d0f      	cmp	r5, #15
 8023e06:	d917      	bls.n	8023e38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8023e08:	4b3c      	ldr	r3, [pc, #240]	; (8023efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8023e0a:	4a3d      	ldr	r2, [pc, #244]	; (8023f00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8023e0c:	483d      	ldr	r0, [pc, #244]	; (8023f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8023e0e:	f240 210d 	movw	r1, #525	; 0x20d
 8023e12:	f000 ffd7 	bl	8024dc4 <__assert_func>
 8023e16:	2600      	movs	r6, #0
 8023e18:	e7b1      	b.n	8023d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8023e1a:	2000      	movs	r0, #0
 8023e1c:	4606      	mov	r6, r0
 8023e1e:	e7c3      	b.n	8023da8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e20:	2000      	movs	r0, #0
 8023e22:	e7c1      	b.n	8023da8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e24:	4628      	mov	r0, r5
 8023e26:	e7bf      	b.n	8023da8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e28:	2400      	movs	r4, #0
 8023e2a:	e7d7      	b.n	8023ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	461c      	mov	r4, r3
 8023e30:	e7e8      	b.n	8023e04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023e32:	2300      	movs	r3, #0
 8023e34:	e7e6      	b.n	8023e04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023e36:	462b      	mov	r3, r5
 8023e38:	2f0f      	cmp	r7, #15
 8023e3a:	d8e5      	bhi.n	8023e08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023e3c:	b2ad      	uxth	r5, r5
 8023e3e:	b2bf      	uxth	r7, r7
 8023e40:	fb05 fc07 	mul.w	ip, r5, r7
 8023e44:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023e48:	012d      	lsls	r5, r5, #4
 8023e4a:	b2bf      	uxth	r7, r7
 8023e4c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8023e50:	eba5 050c 	sub.w	r5, r5, ip
 8023e54:	1bd2      	subs	r2, r2, r7
 8023e56:	b2ad      	uxth	r5, r5
 8023e58:	b292      	uxth	r2, r2
 8023e5a:	4368      	muls	r0, r5
 8023e5c:	fb06 0002 	mla	r0, r6, r2, r0
 8023e60:	fb07 0404 	mla	r4, r7, r4, r0
 8023e64:	fb0c 4303 	mla	r3, ip, r3, r4
 8023e68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d03e      	beq.n	8023eee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8023e70:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8023e74:	4a24      	ldr	r2, [pc, #144]	; (8023f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8023e76:	4343      	muls	r3, r0
 8023e78:	1c58      	adds	r0, r3, #1
 8023e7a:	6816      	ldr	r6, [r2, #0]
 8023e7c:	880a      	ldrh	r2, [r1, #0]
 8023e7e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023e82:	1200      	asrs	r0, r0, #8
 8023e84:	b284      	uxth	r4, r0
 8023e86:	1215      	asrs	r5, r2, #8
 8023e88:	43c0      	mvns	r0, r0
 8023e8a:	b2c3      	uxtb	r3, r0
 8023e8c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023e90:	0a30      	lsrs	r0, r6, #8
 8023e92:	fb15 f503 	smulbb	r5, r5, r3
 8023e96:	10d7      	asrs	r7, r2, #3
 8023e98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023e9c:	fb00 5004 	mla	r0, r0, r4, r5
 8023ea0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023ea4:	08f5      	lsrs	r5, r6, #3
 8023ea6:	00d2      	lsls	r2, r2, #3
 8023ea8:	fb17 f703 	smulbb	r7, r7, r3
 8023eac:	b2d2      	uxtb	r2, r2
 8023eae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023eb2:	00f6      	lsls	r6, r6, #3
 8023eb4:	fb05 7504 	mla	r5, r5, r4, r7
 8023eb8:	fb12 f303 	smulbb	r3, r2, r3
 8023ebc:	b2f6      	uxtb	r6, r6
 8023ebe:	fb06 3304 	mla	r3, r6, r4, r3
 8023ec2:	b2ad      	uxth	r5, r5
 8023ec4:	b29a      	uxth	r2, r3
 8023ec6:	b280      	uxth	r0, r0
 8023ec8:	1c6b      	adds	r3, r5, #1
 8023eca:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8023ece:	1c44      	adds	r4, r0, #1
 8023ed0:	095b      	lsrs	r3, r3, #5
 8023ed2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023ed6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023eda:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ede:	4303      	orrs	r3, r0
 8023ee0:	1c50      	adds	r0, r2, #1
 8023ee2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023ee6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023eea:	4313      	orrs	r3, r2
 8023eec:	800b      	strh	r3, [r1, #0]
 8023eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ef2:	2d0f      	cmp	r5, #15
 8023ef4:	d888      	bhi.n	8023e08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023ef6:	463b      	mov	r3, r7
 8023ef8:	463c      	mov	r4, r7
 8023efa:	e79f      	b.n	8023e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8023efc:	0805441c 	.word	0x0805441c
 8023f00:	08054975 	.word	0x08054975
 8023f04:	080544a4 	.word	0x080544a4
 8023f08:	2000135c 	.word	0x2000135c

08023f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f10:	ed2d 8b08 	vpush	{d8-d11}
 8023f14:	b099      	sub	sp, #100	; 0x64
 8023f16:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 8023f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8023f1c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023f20:	930a      	str	r3, [sp, #40]	; 0x28
 8023f22:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8023f26:	9216      	str	r2, [sp, #88]	; 0x58
 8023f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f2a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023f2c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8023f30:	910f      	str	r1, [sp, #60]	; 0x3c
 8023f32:	9310      	str	r3, [sp, #64]	; 0x40
 8023f34:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023f38:	9017      	str	r0, [sp, #92]	; 0x5c
 8023f3a:	6850      	ldr	r0, [r2, #4]
 8023f3c:	6812      	ldr	r2, [r2, #0]
 8023f3e:	fb00 1303 	mla	r3, r0, r3, r1
 8023f42:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8023f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f48:	3301      	adds	r3, #1
 8023f4a:	f023 0301 	bic.w	r3, r3, #1
 8023f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8023f50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f52:	681f      	ldr	r7, [r3, #0]
 8023f54:	eeb0 aa40 	vmov.f32	s20, s0
 8023f58:	eef0 9a60 	vmov.f32	s19, s1
 8023f5c:	eeb0 9a41 	vmov.f32	s18, s2
 8023f60:	eeb0 8a62 	vmov.f32	s16, s5
 8023f64:	eef0 8a43 	vmov.f32	s17, s6
 8023f68:	eef0 ba44 	vmov.f32	s23, s8
 8023f6c:	eeb0 ba64 	vmov.f32	s22, s9
 8023f70:	eef0 aa45 	vmov.f32	s21, s10
 8023f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	dc03      	bgt.n	8023f82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	f340 8267 	ble.w	8024450 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 8023f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	f340 811e 	ble.w	80241c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8023f8a:	1422      	asrs	r2, r4, #16
 8023f8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023f90:	d42d      	bmi.n	8023fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8023f92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023f94:	1c51      	adds	r1, r2, #1
 8023f96:	4288      	cmp	r0, r1
 8023f98:	dd2c      	ble.n	8023ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	db2a      	blt.n	8023ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023f9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023fa0:	1c59      	adds	r1, r3, #1
 8023fa2:	4288      	cmp	r0, r1
 8023fa4:	dd26      	ble.n	8023ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fa8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023faa:	3b01      	subs	r3, #1
 8023fac:	fb02 4203 	mla	r2, r2, r3, r4
 8023fb0:	1412      	asrs	r2, r2, #16
 8023fb2:	d42a      	bmi.n	802400a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8023fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023fb6:	3201      	adds	r2, #1
 8023fb8:	4291      	cmp	r1, r2
 8023fba:	dd26      	ble.n	802400a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8023fbc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023fbe:	fb02 6303 	mla	r3, r2, r3, r6
 8023fc2:	141b      	asrs	r3, r3, #16
 8023fc4:	d421      	bmi.n	802400a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8023fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023fc8:	3301      	adds	r3, #1
 8023fca:	429a      	cmp	r2, r3
 8023fcc:	dd1d      	ble.n	802400a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8023fce:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8023fd2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8023fd8:	46d1      	mov	r9, sl
 8023fda:	f1bb 0f00 	cmp.w	fp, #0
 8023fde:	f300 8162 	bgt.w	80242a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39a>
 8023fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fe4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023fe8:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8023fec:	e0ed      	b.n	80241ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8023fee:	1c51      	adds	r1, r2, #1
 8023ff0:	f040 80df 	bne.w	80241b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8023ff4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023ff6:	4291      	cmp	r1, r2
 8023ff8:	f340 80db 	ble.w	80241b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8023ffc:	1c5a      	adds	r2, r3, #1
 8023ffe:	f2c0 80d8 	blt.w	80241b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8024002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024004:	4293      	cmp	r3, r2
 8024006:	f280 80d4 	bge.w	80241b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802400a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802400e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8024012:	9311      	str	r3, [sp, #68]	; 0x44
 8024014:	46d0      	mov	r8, sl
 8024016:	f1b9 0f00 	cmp.w	r9, #0
 802401a:	dde2      	ble.n	8023fe2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 802401c:	1420      	asrs	r0, r4, #16
 802401e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024022:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024026:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802402a:	f100 8121 	bmi.w	8024270 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x364>
 802402e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024030:	f100 0c01 	add.w	ip, r0, #1
 8024034:	4565      	cmp	r5, ip
 8024036:	f340 811d 	ble.w	8024274 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802403a:	2b00      	cmp	r3, #0
 802403c:	f2c0 811a 	blt.w	8024274 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8024040:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024042:	f103 0c01 	add.w	ip, r3, #1
 8024046:	4565      	cmp	r5, ip
 8024048:	f340 8114 	ble.w	8024274 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 802404c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802404e:	fb03 0305 	mla	r3, r3, r5, r0
 8024052:	0858      	lsrs	r0, r3, #1
 8024054:	07dd      	lsls	r5, r3, #31
 8024056:	5c38      	ldrb	r0, [r7, r0]
 8024058:	bf54      	ite	pl
 802405a:	f000 000f 	andpl.w	r0, r0, #15
 802405e:	1100      	asrmi	r0, r0, #4
 8024060:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024064:	b2c0      	uxtb	r0, r0
 8024066:	2a00      	cmp	r2, #0
 8024068:	f000 80ee 	beq.w	8024248 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 802406c:	f103 0e01 	add.w	lr, r3, #1
 8024070:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024074:	f01e 0f01 	tst.w	lr, #1
 8024078:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802407c:	bf0c      	ite	eq
 802407e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024082:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024086:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802408a:	fa5f f58c 	uxtb.w	r5, ip
 802408e:	9512      	str	r5, [sp, #72]	; 0x48
 8024090:	b1f9      	cbz	r1, 80240d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8024092:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024094:	442b      	add	r3, r5
 8024096:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802409a:	07dd      	lsls	r5, r3, #31
 802409c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240a0:	bf54      	ite	pl
 80240a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80240a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80240aa:	3301      	adds	r3, #1
 80240ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80240b0:	fa5f f58c 	uxtb.w	r5, ip
 80240b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80240b8:	950d      	str	r5, [sp, #52]	; 0x34
 80240ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240be:	07dd      	lsls	r5, r3, #31
 80240c0:	bf54      	ite	pl
 80240c2:	f00c 030f 	andpl.w	r3, ip, #15
 80240c6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80240ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80240ce:	b2db      	uxtb	r3, r3
 80240d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80240d2:	b292      	uxth	r2, r2
 80240d4:	b289      	uxth	r1, r1
 80240d6:	fb02 f301 	mul.w	r3, r2, r1
 80240da:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80240de:	0112      	lsls	r2, r2, #4
 80240e0:	b289      	uxth	r1, r1
 80240e2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80240e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80240e8:	1ad2      	subs	r2, r2, r3
 80240ea:	ebac 0c01 	sub.w	ip, ip, r1
 80240ee:	b292      	uxth	r2, r2
 80240f0:	436a      	muls	r2, r5
 80240f2:	fa1f fc8c 	uxth.w	ip, ip
 80240f6:	fb00 200c 	mla	r0, r0, ip, r2
 80240fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80240fc:	fb01 0102 	mla	r1, r1, r2, r0
 8024100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024102:	fb03 1302 	mla	r3, r3, r2, r1
 8024106:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802410a:	2b00      	cmp	r3, #0
 802410c:	d048      	beq.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802410e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024110:	4ace      	ldr	r2, [pc, #824]	; (802444c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 8024112:	434b      	muls	r3, r1
 8024114:	1c59      	adds	r1, r3, #1
 8024116:	f8d2 e000 	ldr.w	lr, [r2]
 802411a:	f8b8 2000 	ldrh.w	r2, [r8]
 802411e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024122:	121b      	asrs	r3, r3, #8
 8024124:	b299      	uxth	r1, r3
 8024126:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802412a:	43db      	mvns	r3, r3
 802412c:	b2db      	uxtb	r3, r3
 802412e:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8024132:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024136:	fb1c fc03 	smulbb	ip, ip, r3
 802413a:	ea4f 0be2 	mov.w	fp, r2, asr #3
 802413e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024142:	fb00 c001 	mla	r0, r0, r1, ip
 8024146:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802414a:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802414e:	fb1b fb03 	smulbb	fp, fp, r3
 8024152:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8024156:	00d2      	lsls	r2, r2, #3
 8024158:	fb0c bc01 	mla	ip, ip, r1, fp
 802415c:	b2d2      	uxtb	r2, r2
 802415e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024162:	fb12 f303 	smulbb	r3, r2, r3
 8024166:	fa1f fc8c 	uxth.w	ip, ip
 802416a:	fa5f fe8e 	uxtb.w	lr, lr
 802416e:	b280      	uxth	r0, r0
 8024170:	fb0e 3101 	mla	r1, lr, r1, r3
 8024174:	f10c 0201 	add.w	r2, ip, #1
 8024178:	b289      	uxth	r1, r1
 802417a:	1c43      	adds	r3, r0, #1
 802417c:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8024180:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024184:	0952      	lsrs	r2, r2, #5
 8024186:	1c4b      	adds	r3, r1, #1
 8024188:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802418c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024190:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024194:	4310      	orrs	r0, r2
 8024196:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802419a:	4308      	orrs	r0, r1
 802419c:	f8a8 0000 	strh.w	r0, [r8]
 80241a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80241a2:	441c      	add	r4, r3
 80241a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80241a6:	f108 0802 	add.w	r8, r8, #2
 80241aa:	441e      	add	r6, r3
 80241ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80241b0:	e731      	b.n	8024016 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80241b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80241b4:	441c      	add	r4, r3
 80241b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80241b8:	441e      	add	r6, r3
 80241ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241bc:	3b01      	subs	r3, #1
 80241be:	9309      	str	r3, [sp, #36]	; 0x24
 80241c0:	f10a 0a02 	add.w	sl, sl, #2
 80241c4:	e6dd      	b.n	8023f82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80241c6:	f47f aeee 	bne.w	8023fa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80241ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	f340 813f 	ble.w	8024450 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 80241d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80241d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80241da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80241de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80241e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80241e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80241ec:	eef0 6a48 	vmov.f32	s13, s16
 80241f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80241f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80241fc:	ee16 4a90 	vmov	r4, s13
 8024200:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024204:	eef0 6a68 	vmov.f32	s13, s17
 8024208:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802420c:	ee18 2a10 	vmov	r2, s16
 8024210:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024214:	fb92 f3f3 	sdiv	r3, r2, r3
 8024218:	ee18 2a90 	vmov	r2, s17
 802421c:	932d      	str	r3, [sp, #180]	; 0xb4
 802421e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024220:	fb92 f3f3 	sdiv	r3, r2, r3
 8024224:	932e      	str	r3, [sp, #184]	; 0xb8
 8024226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024228:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802422a:	3b01      	subs	r3, #1
 802422c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024230:	930f      	str	r3, [sp, #60]	; 0x3c
 8024232:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024234:	bf08      	it	eq
 8024236:	4613      	moveq	r3, r2
 8024238:	ee16 6a90 	vmov	r6, s13
 802423c:	9309      	str	r3, [sp, #36]	; 0x24
 802423e:	eef0 8a67 	vmov.f32	s17, s15
 8024242:	eeb0 8a47 	vmov.f32	s16, s14
 8024246:	e695      	b.n	8023f74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024248:	2900      	cmp	r1, #0
 802424a:	f43f af42 	beq.w	80240d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 802424e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024250:	442b      	add	r3, r5
 8024252:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024256:	07db      	lsls	r3, r3, #31
 8024258:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802425c:	bf54      	ite	pl
 802425e:	f00c 030f 	andpl.w	r3, ip, #15
 8024262:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024266:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802426a:	b2db      	uxtb	r3, r3
 802426c:	930d      	str	r3, [sp, #52]	; 0x34
 802426e:	e730      	b.n	80240d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8024270:	1c45      	adds	r5, r0, #1
 8024272:	d195      	bne.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8024274:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024276:	4285      	cmp	r5, r0
 8024278:	dd92      	ble.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802427a:	1c5d      	adds	r5, r3, #1
 802427c:	db90      	blt.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 802427e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024280:	429d      	cmp	r5, r3
 8024282:	dd8d      	ble.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8024284:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024288:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802428a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802428c:	9301      	str	r3, [sp, #4]
 802428e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024290:	9002      	str	r0, [sp, #8]
 8024292:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024296:	9300      	str	r3, [sp, #0]
 8024298:	463a      	mov	r2, r7
 802429a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802429c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802429e:	4641      	mov	r1, r8
 80242a0:	f7ff fd4a 	bl	8023d38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80242a4:	e77c      	b.n	80241a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80242a8:	1422      	asrs	r2, r4, #16
 80242aa:	1433      	asrs	r3, r6, #16
 80242ac:	fb05 2303 	mla	r3, r5, r3, r2
 80242b0:	085a      	lsrs	r2, r3, #1
 80242b2:	07dd      	lsls	r5, r3, #31
 80242b4:	5cba      	ldrb	r2, [r7, r2]
 80242b6:	bf54      	ite	pl
 80242b8:	f002 020f 	andpl.w	r2, r2, #15
 80242bc:	1112      	asrmi	r2, r2, #4
 80242be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80242c2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80242c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80242ca:	b2d2      	uxtb	r2, r2
 80242cc:	2900      	cmp	r1, #0
 80242ce:	f000 80a8 	beq.w	8024422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 80242d2:	f103 0e01 	add.w	lr, r3, #1
 80242d6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80242da:	f01e 0f01 	tst.w	lr, #1
 80242de:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80242e2:	bf0c      	ite	eq
 80242e4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80242e8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80242ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80242f0:	fa5f f58c 	uxtb.w	r5, ip
 80242f4:	9514      	str	r5, [sp, #80]	; 0x50
 80242f6:	b300      	cbz	r0, 802433a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80242f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80242fa:	442b      	add	r3, r5
 80242fc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024300:	07dd      	lsls	r5, r3, #31
 8024302:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024306:	bf54      	ite	pl
 8024308:	f00c 0c0f 	andpl.w	ip, ip, #15
 802430c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024310:	3301      	adds	r3, #1
 8024312:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024316:	fa5f f58c 	uxtb.w	r5, ip
 802431a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802431e:	950e      	str	r5, [sp, #56]	; 0x38
 8024320:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024324:	07dd      	lsls	r5, r3, #31
 8024326:	bf54      	ite	pl
 8024328:	f00c 0c0f 	andpl.w	ip, ip, #15
 802432c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024330:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024334:	fa5f f38c 	uxtb.w	r3, ip
 8024338:	9315      	str	r3, [sp, #84]	; 0x54
 802433a:	b289      	uxth	r1, r1
 802433c:	b280      	uxth	r0, r0
 802433e:	fb01 f300 	mul.w	r3, r1, r0
 8024342:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024346:	0109      	lsls	r1, r1, #4
 8024348:	b280      	uxth	r0, r0
 802434a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802434e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024350:	1ac9      	subs	r1, r1, r3
 8024352:	ebac 0c00 	sub.w	ip, ip, r0
 8024356:	b289      	uxth	r1, r1
 8024358:	4369      	muls	r1, r5
 802435a:	fa1f fc8c 	uxth.w	ip, ip
 802435e:	fb02 120c 	mla	r2, r2, ip, r1
 8024362:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024364:	fb00 2001 	mla	r0, r0, r1, r2
 8024368:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802436a:	fb03 0302 	mla	r3, r3, r2, r0
 802436e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024372:	2b00      	cmp	r3, #0
 8024374:	d04c      	beq.n	8024410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x504>
 8024376:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024378:	4a34      	ldr	r2, [pc, #208]	; (802444c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802437a:	434b      	muls	r3, r1
 802437c:	1c59      	adds	r1, r3, #1
 802437e:	f8d2 e000 	ldr.w	lr, [r2]
 8024382:	f8b9 2000 	ldrh.w	r2, [r9]
 8024386:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802438a:	121b      	asrs	r3, r3, #8
 802438c:	b299      	uxth	r1, r3
 802438e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024392:	43db      	mvns	r3, r3
 8024394:	b2db      	uxtb	r3, r3
 8024396:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802439a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802439e:	fb1c fc03 	smulbb	ip, ip, r3
 80243a2:	ea4f 08e2 	mov.w	r8, r2, asr #3
 80243a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80243aa:	fb00 c001 	mla	r0, r0, r1, ip
 80243ae:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80243b2:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80243b6:	fb18 f803 	smulbb	r8, r8, r3
 80243ba:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80243be:	00d2      	lsls	r2, r2, #3
 80243c0:	fb0c 8c01 	mla	ip, ip, r1, r8
 80243c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80243c8:	b2d2      	uxtb	r2, r2
 80243ca:	fa1f fc8c 	uxth.w	ip, ip
 80243ce:	fa5f fe8e 	uxtb.w	lr, lr
 80243d2:	fb12 f203 	smulbb	r2, r2, r3
 80243d6:	b280      	uxth	r0, r0
 80243d8:	fb0e 2201 	mla	r2, lr, r1, r2
 80243dc:	f10c 0801 	add.w	r8, ip, #1
 80243e0:	b292      	uxth	r2, r2
 80243e2:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 80243e6:	f100 0801 	add.w	r8, r0, #1
 80243ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80243ee:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 80243f2:	1c51      	adds	r1, r2, #1
 80243f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80243f8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80243fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024400:	ea4c 0c00 	orr.w	ip, ip, r0
 8024404:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024408:	ea4c 0c02 	orr.w	ip, ip, r2
 802440c:	f8a9 c000 	strh.w	ip, [r9]
 8024410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024412:	441c      	add	r4, r3
 8024414:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024416:	f109 0902 	add.w	r9, r9, #2
 802441a:	441e      	add	r6, r3
 802441c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024420:	e5db      	b.n	8023fda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8024422:	2800      	cmp	r0, #0
 8024424:	d089      	beq.n	802433a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024426:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024428:	442b      	add	r3, r5
 802442a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802442e:	07db      	lsls	r3, r3, #31
 8024430:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024434:	bf54      	ite	pl
 8024436:	f00c 0c0f 	andpl.w	ip, ip, #15
 802443a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802443e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024442:	fa5f f38c 	uxtb.w	r3, ip
 8024446:	930e      	str	r3, [sp, #56]	; 0x38
 8024448:	e777      	b.n	802433a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802444a:	bf00      	nop
 802444c:	2000135c 	.word	0x2000135c
 8024450:	b019      	add	sp, #100	; 0x64
 8024452:	ecbd 8b08 	vpop	{d8-d11}
 8024456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802445a:	bf00      	nop

0802445c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024460:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8024464:	2c00      	cmp	r4, #0
 8024466:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802446a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802446e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024472:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8024476:	fb04 ce03 	mla	lr, r4, r3, ip
 802447a:	db60      	blt.n	802453e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802447c:	45a1      	cmp	r9, r4
 802447e:	dd5e      	ble.n	802453e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8024480:	f1bc 0f00 	cmp.w	ip, #0
 8024484:	db59      	blt.n	802453a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8024486:	45e0      	cmp	r8, ip
 8024488:	dd57      	ble.n	802453a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802448a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802448e:	f01e 0f01 	tst.w	lr, #1
 8024492:	5c16      	ldrb	r6, [r2, r0]
 8024494:	bf0c      	ite	eq
 8024496:	f006 060f 	andeq.w	r6, r6, #15
 802449a:	1136      	asrne	r6, r6, #4
 802449c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80244a0:	b2f6      	uxtb	r6, r6
 80244a2:	f11c 0001 	adds.w	r0, ip, #1
 80244a6:	d44d      	bmi.n	8024544 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80244a8:	4580      	cmp	r8, r0
 80244aa:	dd4b      	ble.n	8024544 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80244ac:	2d00      	cmp	r5, #0
 80244ae:	d04b      	beq.n	8024548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80244b0:	f10e 0a01 	add.w	sl, lr, #1
 80244b4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80244b8:	f01a 0f01 	tst.w	sl, #1
 80244bc:	5c10      	ldrb	r0, [r2, r0]
 80244be:	bf0c      	ite	eq
 80244c0:	f000 000f 	andeq.w	r0, r0, #15
 80244c4:	1100      	asrne	r0, r0, #4
 80244c6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80244ca:	b2c0      	uxtb	r0, r0
 80244cc:	3401      	adds	r4, #1
 80244ce:	d43f      	bmi.n	8024550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80244d0:	45a1      	cmp	r9, r4
 80244d2:	dd3d      	ble.n	8024550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80244d4:	2f00      	cmp	r7, #0
 80244d6:	f000 8097 	beq.w	8024608 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 80244da:	f1bc 0f00 	cmp.w	ip, #0
 80244de:	db35      	blt.n	802454c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80244e0:	45e0      	cmp	r8, ip
 80244e2:	dd33      	ble.n	802454c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80244e4:	eb03 090e 	add.w	r9, r3, lr
 80244e8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80244ec:	f019 0f01 	tst.w	r9, #1
 80244f0:	5d14      	ldrb	r4, [r2, r4]
 80244f2:	bf0c      	ite	eq
 80244f4:	f004 040f 	andeq.w	r4, r4, #15
 80244f8:	1124      	asrne	r4, r4, #4
 80244fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80244fe:	b2e4      	uxtb	r4, r4
 8024500:	f11c 0c01 	adds.w	ip, ip, #1
 8024504:	d427      	bmi.n	8024556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8024506:	45e0      	cmp	r8, ip
 8024508:	dd25      	ble.n	8024556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802450a:	b335      	cbz	r5, 802455a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802450c:	3301      	adds	r3, #1
 802450e:	449e      	add	lr, r3
 8024510:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024514:	f01e 0f01 	tst.w	lr, #1
 8024518:	5cd2      	ldrb	r2, [r2, r3]
 802451a:	bf0c      	ite	eq
 802451c:	f002 020f 	andeq.w	r2, r2, #15
 8024520:	1112      	asrne	r2, r2, #4
 8024522:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024526:	b2d3      	uxtb	r3, r2
 8024528:	2d0f      	cmp	r5, #15
 802452a:	d917      	bls.n	802455c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802452c:	4b39      	ldr	r3, [pc, #228]	; (8024614 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802452e:	4a3a      	ldr	r2, [pc, #232]	; (8024618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8024530:	483a      	ldr	r0, [pc, #232]	; (802461c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8024532:	f240 210d 	movw	r1, #525	; 0x20d
 8024536:	f000 fc45 	bl	8024dc4 <__assert_func>
 802453a:	2600      	movs	r6, #0
 802453c:	e7b1      	b.n	80244a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802453e:	2000      	movs	r0, #0
 8024540:	4606      	mov	r6, r0
 8024542:	e7c3      	b.n	80244cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024544:	2000      	movs	r0, #0
 8024546:	e7c1      	b.n	80244cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024548:	4628      	mov	r0, r5
 802454a:	e7bf      	b.n	80244cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802454c:	2400      	movs	r4, #0
 802454e:	e7d7      	b.n	8024500 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8024550:	2300      	movs	r3, #0
 8024552:	461c      	mov	r4, r3
 8024554:	e7e8      	b.n	8024528 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8024556:	2300      	movs	r3, #0
 8024558:	e7e6      	b.n	8024528 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802455a:	462b      	mov	r3, r5
 802455c:	2f0f      	cmp	r7, #15
 802455e:	d8e5      	bhi.n	802452c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8024560:	b2ad      	uxth	r5, r5
 8024562:	b2bf      	uxth	r7, r7
 8024564:	fb05 fc07 	mul.w	ip, r5, r7
 8024568:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802456c:	012d      	lsls	r5, r5, #4
 802456e:	b2bf      	uxth	r7, r7
 8024570:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8024574:	eba5 050c 	sub.w	r5, r5, ip
 8024578:	1bd2      	subs	r2, r2, r7
 802457a:	b2ad      	uxth	r5, r5
 802457c:	b292      	uxth	r2, r2
 802457e:	4368      	muls	r0, r5
 8024580:	fb06 0002 	mla	r0, r6, r2, r0
 8024584:	fb07 0404 	mla	r4, r7, r4, r0
 8024588:	fb0c 4303 	mla	r3, ip, r3, r4
 802458c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024590:	2b00      	cmp	r3, #0
 8024592:	d037      	beq.n	8024604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8024594:	4a22      	ldr	r2, [pc, #136]	; (8024620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8024596:	6816      	ldr	r6, [r2, #0]
 8024598:	880a      	ldrh	r2, [r1, #0]
 802459a:	b298      	uxth	r0, r3
 802459c:	1215      	asrs	r5, r2, #8
 802459e:	43db      	mvns	r3, r3
 80245a0:	b2db      	uxtb	r3, r3
 80245a2:	0a34      	lsrs	r4, r6, #8
 80245a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80245a8:	fb15 f503 	smulbb	r5, r5, r3
 80245ac:	10d7      	asrs	r7, r2, #3
 80245ae:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80245b2:	fb04 5400 	mla	r4, r4, r0, r5
 80245b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80245ba:	08f5      	lsrs	r5, r6, #3
 80245bc:	fb17 f703 	smulbb	r7, r7, r3
 80245c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80245c4:	00d2      	lsls	r2, r2, #3
 80245c6:	fb05 7500 	mla	r5, r5, r0, r7
 80245ca:	b2d2      	uxtb	r2, r2
 80245cc:	00f6      	lsls	r6, r6, #3
 80245ce:	fb12 f303 	smulbb	r3, r2, r3
 80245d2:	b2ad      	uxth	r5, r5
 80245d4:	b2f6      	uxtb	r6, r6
 80245d6:	b2a4      	uxth	r4, r4
 80245d8:	fb06 3000 	mla	r0, r6, r0, r3
 80245dc:	1c6b      	adds	r3, r5, #1
 80245de:	b280      	uxth	r0, r0
 80245e0:	1c62      	adds	r2, r4, #1
 80245e2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80245e6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80245ea:	095b      	lsrs	r3, r3, #5
 80245ec:	1c42      	adds	r2, r0, #1
 80245ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80245f2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80245f6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80245fa:	4323      	orrs	r3, r4
 80245fc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024600:	4303      	orrs	r3, r0
 8024602:	800b      	strh	r3, [r1, #0]
 8024604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024608:	2d0f      	cmp	r5, #15
 802460a:	d88f      	bhi.n	802452c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802460c:	463b      	mov	r3, r7
 802460e:	463c      	mov	r4, r7
 8024610:	e7a6      	b.n	8024560 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8024612:	bf00      	nop
 8024614:	0805441c 	.word	0x0805441c
 8024618:	08054975 	.word	0x08054975
 802461c:	080544a4 	.word	0x080544a4
 8024620:	2000135c 	.word	0x2000135c

08024624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024628:	ed2d 8b08 	vpush	{d8-d11}
 802462c:	b095      	sub	sp, #84	; 0x54
 802462e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8024632:	9306      	str	r3, [sp, #24]
 8024634:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8024638:	9307      	str	r3, [sp, #28]
 802463a:	920d      	str	r2, [sp, #52]	; 0x34
 802463c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024640:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024642:	910a      	str	r1, [sp, #40]	; 0x28
 8024644:	9308      	str	r3, [sp, #32]
 8024646:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802464a:	9013      	str	r0, [sp, #76]	; 0x4c
 802464c:	6850      	ldr	r0, [r2, #4]
 802464e:	6812      	ldr	r2, [r2, #0]
 8024650:	fb00 1303 	mla	r3, r0, r3, r1
 8024654:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8024658:	9b07      	ldr	r3, [sp, #28]
 802465a:	3301      	adds	r3, #1
 802465c:	f023 0301 	bic.w	r3, r3, #1
 8024660:	9309      	str	r3, [sp, #36]	; 0x24
 8024662:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024664:	681f      	ldr	r7, [r3, #0]
 8024666:	eeb0 aa40 	vmov.f32	s20, s0
 802466a:	eef0 9a60 	vmov.f32	s19, s1
 802466e:	eeb0 9a41 	vmov.f32	s18, s2
 8024672:	eeb0 8a62 	vmov.f32	s16, s5
 8024676:	eef0 8a43 	vmov.f32	s17, s6
 802467a:	eef0 ba44 	vmov.f32	s23, s8
 802467e:	eeb0 ba64 	vmov.f32	s22, s9
 8024682:	eef0 aa45 	vmov.f32	s21, s10
 8024686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024688:	2b00      	cmp	r3, #0
 802468a:	dc03      	bgt.n	8024694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802468c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802468e:	2b00      	cmp	r3, #0
 8024690:	f340 825c 	ble.w	8024b4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8024694:	9b06      	ldr	r3, [sp, #24]
 8024696:	2b00      	cmp	r3, #0
 8024698:	f340 8119 	ble.w	80248ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2aa>
 802469c:	1422      	asrs	r2, r4, #16
 802469e:	ea4f 4326 	mov.w	r3, r6, asr #16
 80246a2:	d42d      	bmi.n	8024700 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80246a4:	9807      	ldr	r0, [sp, #28]
 80246a6:	1c51      	adds	r1, r2, #1
 80246a8:	4288      	cmp	r0, r1
 80246aa:	dd2c      	ble.n	8024706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	db2a      	blt.n	8024706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80246b0:	9808      	ldr	r0, [sp, #32]
 80246b2:	1c59      	adds	r1, r3, #1
 80246b4:	4288      	cmp	r0, r1
 80246b6:	dd26      	ble.n	8024706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80246b8:	9b06      	ldr	r3, [sp, #24]
 80246ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80246bc:	3b01      	subs	r3, #1
 80246be:	fb02 4203 	mla	r2, r2, r3, r4
 80246c2:	1412      	asrs	r2, r2, #16
 80246c4:	d42a      	bmi.n	802471c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80246c6:	9907      	ldr	r1, [sp, #28]
 80246c8:	3201      	adds	r2, #1
 80246ca:	4291      	cmp	r1, r2
 80246cc:	dd26      	ble.n	802471c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80246ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80246d0:	fb02 6303 	mla	r3, r2, r3, r6
 80246d4:	141b      	asrs	r3, r3, #16
 80246d6:	d421      	bmi.n	802471c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80246d8:	9a08      	ldr	r2, [sp, #32]
 80246da:	3301      	adds	r3, #1
 80246dc:	429a      	cmp	r2, r3
 80246de:	dd1d      	ble.n	802471c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80246e0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80246e4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80246e8:	930e      	str	r3, [sp, #56]	; 0x38
 80246ea:	46d8      	mov	r8, fp
 80246ec:	f1ba 0f00 	cmp.w	sl, #0
 80246f0:	f300 8161 	bgt.w	80249b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80246f4:	9b06      	ldr	r3, [sp, #24]
 80246f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80246fa:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 80246fe:	e0e8      	b.n	80248d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ae>
 8024700:	1c51      	adds	r1, r2, #1
 8024702:	f040 80da 	bne.w	80248ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8024706:	9907      	ldr	r1, [sp, #28]
 8024708:	4291      	cmp	r1, r2
 802470a:	f340 80d6 	ble.w	80248ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802470e:	1c5a      	adds	r2, r3, #1
 8024710:	f2c0 80d3 	blt.w	80248ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8024714:	9a08      	ldr	r2, [sp, #32]
 8024716:	4293      	cmp	r3, r2
 8024718:	f280 80cf 	bge.w	80248ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802471c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8024720:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8024724:	46d8      	mov	r8, fp
 8024726:	f1b9 0f00 	cmp.w	r9, #0
 802472a:	dde3      	ble.n	80246f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802472c:	1420      	asrs	r0, r4, #16
 802472e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024732:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024736:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802473a:	f100 8124 	bmi.w	8024986 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 802473e:	9d07      	ldr	r5, [sp, #28]
 8024740:	f100 0c01 	add.w	ip, r0, #1
 8024744:	4565      	cmp	r5, ip
 8024746:	f340 8120 	ble.w	802498a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802474a:	2b00      	cmp	r3, #0
 802474c:	f2c0 811d 	blt.w	802498a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 8024750:	9d08      	ldr	r5, [sp, #32]
 8024752:	f103 0c01 	add.w	ip, r3, #1
 8024756:	4565      	cmp	r5, ip
 8024758:	f340 8117 	ble.w	802498a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 802475c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802475e:	fb03 0305 	mla	r3, r3, r5, r0
 8024762:	0858      	lsrs	r0, r3, #1
 8024764:	07dd      	lsls	r5, r3, #31
 8024766:	5c38      	ldrb	r0, [r7, r0]
 8024768:	bf54      	ite	pl
 802476a:	f000 000f 	andpl.w	r0, r0, #15
 802476e:	1100      	asrmi	r0, r0, #4
 8024770:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024774:	b2c0      	uxtb	r0, r0
 8024776:	2a00      	cmp	r2, #0
 8024778:	f000 80ea 	beq.w	8024950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32c>
 802477c:	f103 0e01 	add.w	lr, r3, #1
 8024780:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024784:	f01e 0f01 	tst.w	lr, #1
 8024788:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802478c:	bf0c      	ite	eq
 802478e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024792:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024796:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802479a:	fa5f fc8c 	uxtb.w	ip, ip
 802479e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80247a2:	b1f9      	cbz	r1, 80247e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80247a4:	4453      	add	r3, sl
 80247a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247aa:	07dd      	lsls	r5, r3, #31
 80247ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247b0:	bf54      	ite	pl
 80247b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80247ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247be:	3301      	adds	r3, #1
 80247c0:	fa5f fc8c 	uxtb.w	ip, ip
 80247c4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80247c8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247cc:	07dd      	lsls	r5, r3, #31
 80247ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247d2:	bf54      	ite	pl
 80247d4:	f00c 030f 	andpl.w	r3, ip, #15
 80247d8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80247dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80247e0:	b2db      	uxtb	r3, r3
 80247e2:	9310      	str	r3, [sp, #64]	; 0x40
 80247e4:	b292      	uxth	r2, r2
 80247e6:	b289      	uxth	r1, r1
 80247e8:	fb02 f301 	mul.w	r3, r2, r1
 80247ec:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80247f0:	0112      	lsls	r2, r2, #4
 80247f2:	b289      	uxth	r1, r1
 80247f4:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80247f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80247fa:	1ad2      	subs	r2, r2, r3
 80247fc:	ebac 0c01 	sub.w	ip, ip, r1
 8024800:	b292      	uxth	r2, r2
 8024802:	436a      	muls	r2, r5
 8024804:	fa1f fc8c 	uxth.w	ip, ip
 8024808:	fb00 200c 	mla	r0, r0, ip, r2
 802480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802480e:	fb01 0102 	mla	r1, r1, r2, r0
 8024812:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024814:	fb03 1302 	mla	r3, r3, r2, r1
 8024818:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802481c:	2b00      	cmp	r3, #0
 802481e:	d043      	beq.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8024820:	4ac9      	ldr	r2, [pc, #804]	; (8024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 8024822:	6811      	ldr	r1, [r2, #0]
 8024824:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8024828:	08ca      	lsrs	r2, r1, #3
 802482a:	00c9      	lsls	r1, r1, #3
 802482c:	b2c9      	uxtb	r1, r1
 802482e:	2bff      	cmp	r3, #255	; 0xff
 8024830:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024834:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024838:	460d      	mov	r5, r1
 802483a:	f000 809c 	beq.w	8024976 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802483e:	f8b8 c000 	ldrh.w	ip, [r8]
 8024842:	b299      	uxth	r1, r3
 8024844:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024848:	43db      	mvns	r3, r3
 802484a:	b2db      	uxtb	r3, r3
 802484c:	fb1e fe01 	smulbb	lr, lr, r1
 8024850:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024854:	fb00 e003 	mla	r0, r0, r3, lr
 8024858:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802485c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024860:	fb12 f201 	smulbb	r2, r2, r1
 8024864:	fb0e 2203 	mla	r2, lr, r3, r2
 8024868:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802486c:	b292      	uxth	r2, r2
 802486e:	fb15 f101 	smulbb	r1, r5, r1
 8024872:	fa5f fc8c 	uxtb.w	ip, ip
 8024876:	b280      	uxth	r0, r0
 8024878:	fb0c 1303 	mla	r3, ip, r3, r1
 802487c:	f102 0e01 	add.w	lr, r2, #1
 8024880:	b29b      	uxth	r3, r3
 8024882:	1c41      	adds	r1, r0, #1
 8024884:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024888:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802488c:	0952      	lsrs	r2, r2, #5
 802488e:	1c59      	adds	r1, r3, #1
 8024890:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024894:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024898:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802489c:	4310      	orrs	r0, r2
 802489e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80248a2:	4318      	orrs	r0, r3
 80248a4:	f8a8 0000 	strh.w	r0, [r8]
 80248a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248aa:	441c      	add	r4, r3
 80248ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248ae:	f108 0802 	add.w	r8, r8, #2
 80248b2:	441e      	add	r6, r3
 80248b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80248b8:	e735      	b.n	8024726 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80248ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248bc:	441c      	add	r4, r3
 80248be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248c0:	441e      	add	r6, r3
 80248c2:	9b06      	ldr	r3, [sp, #24]
 80248c4:	3b01      	subs	r3, #1
 80248c6:	9306      	str	r3, [sp, #24]
 80248c8:	f10b 0b02 	add.w	fp, fp, #2
 80248cc:	e6e2      	b.n	8024694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80248ce:	f47f aef3 	bne.w	80246b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80248d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	f340 8139 	ble.w	8024b4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80248da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80248de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80248e2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80248e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80248e8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80248ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80248f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80248f4:	eef0 6a48 	vmov.f32	s13, s16
 80248f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80248fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024900:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024904:	ee16 4a90 	vmov	r4, s13
 8024908:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802490c:	eef0 6a68 	vmov.f32	s13, s17
 8024910:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024914:	ee18 2a10 	vmov	r2, s16
 8024918:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802491c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024920:	ee18 2a90 	vmov	r2, s17
 8024924:	9329      	str	r3, [sp, #164]	; 0xa4
 8024926:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024928:	fb92 f3f3 	sdiv	r3, r2, r3
 802492c:	932a      	str	r3, [sp, #168]	; 0xa8
 802492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024932:	3b01      	subs	r3, #1
 8024934:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024938:	930a      	str	r3, [sp, #40]	; 0x28
 802493a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802493c:	bf08      	it	eq
 802493e:	4613      	moveq	r3, r2
 8024940:	ee16 6a90 	vmov	r6, s13
 8024944:	9306      	str	r3, [sp, #24]
 8024946:	eef0 8a67 	vmov.f32	s17, s15
 802494a:	eeb0 8a47 	vmov.f32	s16, s14
 802494e:	e69a      	b.n	8024686 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8024950:	2900      	cmp	r1, #0
 8024952:	f43f af47 	beq.w	80247e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8024956:	4453      	add	r3, sl
 8024958:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802495c:	07db      	lsls	r3, r3, #31
 802495e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024962:	bf54      	ite	pl
 8024964:	f00c 030f 	andpl.w	r3, ip, #15
 8024968:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802496c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024970:	b2db      	uxtb	r3, r3
 8024972:	930b      	str	r3, [sp, #44]	; 0x2c
 8024974:	e736      	b.n	80247e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8024976:	00d2      	lsls	r2, r2, #3
 8024978:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802497c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8024980:	f8a8 1000 	strh.w	r1, [r8]
 8024984:	e790      	b.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8024986:	1c45      	adds	r5, r0, #1
 8024988:	d18e      	bne.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802498a:	9d07      	ldr	r5, [sp, #28]
 802498c:	4285      	cmp	r5, r0
 802498e:	dd8b      	ble.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8024990:	1c5d      	adds	r5, r3, #1
 8024992:	db89      	blt.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8024994:	9d08      	ldr	r5, [sp, #32]
 8024996:	429d      	cmp	r5, r3
 8024998:	dd86      	ble.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 802499a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802499e:	9b07      	ldr	r3, [sp, #28]
 80249a0:	9300      	str	r3, [sp, #0]
 80249a2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80249a6:	9501      	str	r5, [sp, #4]
 80249a8:	4653      	mov	r3, sl
 80249aa:	463a      	mov	r2, r7
 80249ac:	4641      	mov	r1, r8
 80249ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80249b0:	f7ff fd54 	bl	802445c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80249b4:	e778      	b.n	80248a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80249b8:	1422      	asrs	r2, r4, #16
 80249ba:	1433      	asrs	r3, r6, #16
 80249bc:	fb01 2303 	mla	r3, r1, r3, r2
 80249c0:	085a      	lsrs	r2, r3, #1
 80249c2:	07d9      	lsls	r1, r3, #31
 80249c4:	5cba      	ldrb	r2, [r7, r2]
 80249c6:	bf54      	ite	pl
 80249c8:	f002 020f 	andpl.w	r2, r2, #15
 80249cc:	1112      	asrmi	r2, r2, #4
 80249ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80249d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80249d6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80249da:	b2d2      	uxtb	r2, r2
 80249dc:	2800      	cmp	r0, #0
 80249de:	f000 8099 	beq.w	8024b14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>
 80249e2:	f103 0e01 	add.w	lr, r3, #1
 80249e6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80249ea:	f01e 0f01 	tst.w	lr, #1
 80249ee:	5c79      	ldrb	r1, [r7, r1]
 80249f0:	bf0c      	ite	eq
 80249f2:	f001 010f 	andeq.w	r1, r1, #15
 80249f6:	1109      	asrne	r1, r1, #4
 80249f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80249fc:	b2c9      	uxtb	r1, r1
 80249fe:	9111      	str	r1, [sp, #68]	; 0x44
 8024a00:	f1bc 0f00 	cmp.w	ip, #0
 8024a04:	d018      	beq.n	8024a38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024a06:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024a08:	440b      	add	r3, r1
 8024a0a:	0859      	lsrs	r1, r3, #1
 8024a0c:	07dd      	lsls	r5, r3, #31
 8024a0e:	5c79      	ldrb	r1, [r7, r1]
 8024a10:	bf54      	ite	pl
 8024a12:	f001 010f 	andpl.w	r1, r1, #15
 8024a16:	1109      	asrmi	r1, r1, #4
 8024a18:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a1c:	b2c9      	uxtb	r1, r1
 8024a1e:	3301      	adds	r3, #1
 8024a20:	910c      	str	r1, [sp, #48]	; 0x30
 8024a22:	0859      	lsrs	r1, r3, #1
 8024a24:	07dd      	lsls	r5, r3, #31
 8024a26:	5c79      	ldrb	r1, [r7, r1]
 8024a28:	bf54      	ite	pl
 8024a2a:	f001 010f 	andpl.w	r1, r1, #15
 8024a2e:	1109      	asrmi	r1, r1, #4
 8024a30:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a34:	b2c9      	uxtb	r1, r1
 8024a36:	9112      	str	r1, [sp, #72]	; 0x48
 8024a38:	b280      	uxth	r0, r0
 8024a3a:	fa1f fc8c 	uxth.w	ip, ip
 8024a3e:	fb00 f30c 	mul.w	r3, r0, ip
 8024a42:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024a46:	0100      	lsls	r0, r0, #4
 8024a48:	fa1f fc8c 	uxth.w	ip, ip
 8024a4c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024a50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a52:	1ac0      	subs	r0, r0, r3
 8024a54:	eba1 010c 	sub.w	r1, r1, ip
 8024a58:	b280      	uxth	r0, r0
 8024a5a:	b289      	uxth	r1, r1
 8024a5c:	4368      	muls	r0, r5
 8024a5e:	fb02 0201 	mla	r2, r2, r1, r0
 8024a62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024a64:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024a68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024a6a:	fb03 c302 	mla	r3, r3, r2, ip
 8024a6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d045      	beq.n	8024b02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8024a76:	4a34      	ldr	r2, [pc, #208]	; (8024b48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 8024a78:	6811      	ldr	r1, [r2, #0]
 8024a7a:	2bff      	cmp	r3, #255	; 0xff
 8024a7c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8024a80:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8024a84:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8024a88:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024a8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024a90:	b2c9      	uxtb	r1, r1
 8024a92:	d050      	beq.n	8024b36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8024a94:	f8b8 c000 	ldrh.w	ip, [r8]
 8024a98:	fa1f f983 	uxth.w	r9, r3
 8024a9c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024aa0:	43db      	mvns	r3, r3
 8024aa2:	b2db      	uxtb	r3, r3
 8024aa4:	fb1e fe09 	smulbb	lr, lr, r9
 8024aa8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024aac:	fb00 e003 	mla	r0, r0, r3, lr
 8024ab0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8024ab4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024ab8:	fb12 f209 	smulbb	r2, r2, r9
 8024abc:	fb0e 2203 	mla	r2, lr, r3, r2
 8024ac0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024ac4:	b292      	uxth	r2, r2
 8024ac6:	fa5f fc8c 	uxtb.w	ip, ip
 8024aca:	fb11 f109 	smulbb	r1, r1, r9
 8024ace:	b280      	uxth	r0, r0
 8024ad0:	fb0c 1103 	mla	r1, ip, r3, r1
 8024ad4:	f102 0e01 	add.w	lr, r2, #1
 8024ad8:	b289      	uxth	r1, r1
 8024ada:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024ade:	f100 0e01 	add.w	lr, r0, #1
 8024ae2:	0952      	lsrs	r2, r2, #5
 8024ae4:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024ae8:	1c4b      	adds	r3, r1, #1
 8024aea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024aee:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024af2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024af6:	4302      	orrs	r2, r0
 8024af8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024afc:	430a      	orrs	r2, r1
 8024afe:	f8a8 2000 	strh.w	r2, [r8]
 8024b02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b04:	441c      	add	r4, r3
 8024b06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b08:	f108 0802 	add.w	r8, r8, #2
 8024b0c:	441e      	add	r6, r3
 8024b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024b12:	e5eb      	b.n	80246ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8024b14:	f1bc 0f00 	cmp.w	ip, #0
 8024b18:	d08e      	beq.n	8024a38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024b1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b1c:	440b      	add	r3, r1
 8024b1e:	0859      	lsrs	r1, r3, #1
 8024b20:	07db      	lsls	r3, r3, #31
 8024b22:	5c79      	ldrb	r1, [r7, r1]
 8024b24:	bf54      	ite	pl
 8024b26:	f001 010f 	andpl.w	r1, r1, #15
 8024b2a:	1109      	asrmi	r1, r1, #4
 8024b2c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b30:	b2c9      	uxtb	r1, r1
 8024b32:	910c      	str	r1, [sp, #48]	; 0x30
 8024b34:	e780      	b.n	8024a38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024b36:	00d2      	lsls	r2, r2, #3
 8024b38:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8024b3c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8024b40:	f8a8 1000 	strh.w	r1, [r8]
 8024b44:	e7dd      	b.n	8024b02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8024b46:	bf00      	nop
 8024b48:	2000135c 	.word	0x2000135c
 8024b4c:	b015      	add	sp, #84	; 0x54
 8024b4e:	ecbd 8b08 	vpop	{d8-d11}
 8024b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b56:	bf00      	nop

08024b58 <CRC_Lock>:
 8024b58:	b530      	push	{r4, r5, lr}
 8024b5a:	4a1d      	ldr	r2, [pc, #116]	; (8024bd0 <CRC_Lock+0x78>)
 8024b5c:	6813      	ldr	r3, [r2, #0]
 8024b5e:	f023 0301 	bic.w	r3, r3, #1
 8024b62:	6013      	str	r3, [r2, #0]
 8024b64:	4b1b      	ldr	r3, [pc, #108]	; (8024bd4 <CRC_Lock+0x7c>)
 8024b66:	681a      	ldr	r2, [r3, #0]
 8024b68:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024b6c:	4022      	ands	r2, r4
 8024b6e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024b72:	42aa      	cmp	r2, r5
 8024b74:	d005      	beq.n	8024b82 <CRC_Lock+0x2a>
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024b7c:	4023      	ands	r3, r4
 8024b7e:	4293      	cmp	r3, r2
 8024b80:	d11d      	bne.n	8024bbe <CRC_Lock+0x66>
 8024b82:	4b15      	ldr	r3, [pc, #84]	; (8024bd8 <CRC_Lock+0x80>)
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	b9d3      	cbnz	r3, 8024bbe <CRC_Lock+0x66>
 8024b88:	4a14      	ldr	r2, [pc, #80]	; (8024bdc <CRC_Lock+0x84>)
 8024b8a:	6813      	ldr	r3, [r2, #0]
 8024b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024b90:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024b94:	d006      	beq.n	8024ba4 <CRC_Lock+0x4c>
 8024b96:	6813      	ldr	r3, [r2, #0]
 8024b98:	f240 4283 	movw	r2, #1155	; 0x483
 8024b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024ba0:	4293      	cmp	r3, r2
 8024ba2:	d10c      	bne.n	8024bbe <CRC_Lock+0x66>
 8024ba4:	4b0e      	ldr	r3, [pc, #56]	; (8024be0 <CRC_Lock+0x88>)
 8024ba6:	2201      	movs	r2, #1
 8024ba8:	601a      	str	r2, [r3, #0]
 8024baa:	681a      	ldr	r2, [r3, #0]
 8024bac:	2a00      	cmp	r2, #0
 8024bae:	d1fc      	bne.n	8024baa <CRC_Lock+0x52>
 8024bb0:	4b0c      	ldr	r3, [pc, #48]	; (8024be4 <CRC_Lock+0x8c>)
 8024bb2:	6018      	str	r0, [r3, #0]
 8024bb4:	6818      	ldr	r0, [r3, #0]
 8024bb6:	1a43      	subs	r3, r0, r1
 8024bb8:	4258      	negs	r0, r3
 8024bba:	4158      	adcs	r0, r3
 8024bbc:	bd30      	pop	{r4, r5, pc}
 8024bbe:	4b0a      	ldr	r3, [pc, #40]	; (8024be8 <CRC_Lock+0x90>)
 8024bc0:	2201      	movs	r2, #1
 8024bc2:	601a      	str	r2, [r3, #0]
 8024bc4:	681a      	ldr	r2, [r3, #0]
 8024bc6:	2a00      	cmp	r2, #0
 8024bc8:	d1fc      	bne.n	8024bc4 <CRC_Lock+0x6c>
 8024bca:	4b08      	ldr	r3, [pc, #32]	; (8024bec <CRC_Lock+0x94>)
 8024bcc:	e7f1      	b.n	8024bb2 <CRC_Lock+0x5a>
 8024bce:	bf00      	nop
 8024bd0:	e0002000 	.word	0xe0002000
 8024bd4:	e000ed00 	.word	0xe000ed00
 8024bd8:	e0042000 	.word	0xe0042000
 8024bdc:	5c001000 	.word	0x5c001000
 8024be0:	58024c08 	.word	0x58024c08
 8024be4:	58024c00 	.word	0x58024c00
 8024be8:	40023008 	.word	0x40023008
 8024bec:	40023000 	.word	0x40023000

08024bf0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024bf0:	6101      	str	r1, [r0, #16]
 8024bf2:	4770      	bx	lr

08024bf4 <_ZN8touchgfx8Gestures4tickEv>:
 8024bf4:	7b83      	ldrb	r3, [r0, #14]
 8024bf6:	b14b      	cbz	r3, 8024c0c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024bf8:	8903      	ldrh	r3, [r0, #8]
 8024bfa:	3301      	adds	r3, #1
 8024bfc:	b29b      	uxth	r3, r3
 8024bfe:	2b07      	cmp	r3, #7
 8024c00:	8103      	strh	r3, [r0, #8]
 8024c02:	bf81      	itttt	hi
 8024c04:	2300      	movhi	r3, #0
 8024c06:	8143      	strhhi	r3, [r0, #10]
 8024c08:	8183      	strhhi	r3, [r0, #12]
 8024c0a:	7383      	strbhi	r3, [r0, #14]
 8024c0c:	4770      	bx	lr
	...

08024c10 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024c10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024c14:	4604      	mov	r4, r0
 8024c16:	8880      	ldrh	r0, [r0, #4]
 8024c18:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024c1c:	4698      	mov	r8, r3
 8024c1e:	eba8 0000 	sub.w	r0, r8, r0
 8024c22:	4b1c      	ldr	r3, [pc, #112]	; (8024c94 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024c24:	9300      	str	r3, [sp, #0]
 8024c26:	b280      	uxth	r0, r0
 8024c28:	2300      	movs	r3, #0
 8024c2a:	f88d 3004 	strb.w	r3, [sp, #4]
 8024c2e:	b203      	sxth	r3, r0
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	bfb8      	it	lt
 8024c34:	4240      	neglt	r0, r0
 8024c36:	4617      	mov	r7, r2
 8024c38:	8aa2      	ldrh	r2, [r4, #20]
 8024c3a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024c3e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024c42:	bfb8      	it	lt
 8024c44:	b203      	sxthlt	r3, r0
 8024c46:	460e      	mov	r6, r1
 8024c48:	4293      	cmp	r3, r2
 8024c4a:	88e1      	ldrh	r1, [r4, #6]
 8024c4c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024c50:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024c54:	dc08      	bgt.n	8024c68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024c56:	1a69      	subs	r1, r5, r1
 8024c58:	b289      	uxth	r1, r1
 8024c5a:	b20b      	sxth	r3, r1
 8024c5c:	2b00      	cmp	r3, #0
 8024c5e:	bfbc      	itt	lt
 8024c60:	4249      	neglt	r1, r1
 8024c62:	b20b      	sxthlt	r3, r1
 8024c64:	429a      	cmp	r2, r3
 8024c66:	da13      	bge.n	8024c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024c68:	6920      	ldr	r0, [r4, #16]
 8024c6a:	6803      	ldr	r3, [r0, #0]
 8024c6c:	4669      	mov	r1, sp
 8024c6e:	685b      	ldr	r3, [r3, #4]
 8024c70:	4798      	blx	r3
 8024c72:	eba8 0606 	sub.w	r6, r8, r6
 8024c76:	2300      	movs	r3, #0
 8024c78:	1bef      	subs	r7, r5, r7
 8024c7a:	2001      	movs	r0, #1
 8024c7c:	8123      	strh	r3, [r4, #8]
 8024c7e:	8166      	strh	r6, [r4, #10]
 8024c80:	81a7      	strh	r7, [r4, #12]
 8024c82:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024c86:	80e5      	strh	r5, [r4, #6]
 8024c88:	73a0      	strb	r0, [r4, #14]
 8024c8a:	b004      	add	sp, #16
 8024c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c90:	2000      	movs	r0, #0
 8024c92:	e7fa      	b.n	8024c8a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024c94:	080538e8 	.word	0x080538e8

08024c98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c9a:	461e      	mov	r6, r3
 8024c9c:	1e4b      	subs	r3, r1, #1
 8024c9e:	2b01      	cmp	r3, #1
 8024ca0:	b085      	sub	sp, #20
 8024ca2:	4604      	mov	r4, r0
 8024ca4:	460d      	mov	r5, r1
 8024ca6:	4617      	mov	r7, r2
 8024ca8:	d84b      	bhi.n	8024d42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024caa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024cae:	1cd3      	adds	r3, r2, #3
 8024cb0:	b29b      	uxth	r3, r3
 8024cb2:	2b06      	cmp	r3, #6
 8024cb4:	d916      	bls.n	8024ce4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024cb6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024d58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024cba:	f8cd c004 	str.w	ip, [sp, #4]
 8024cbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024cc2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024cc6:	6900      	ldr	r0, [r0, #16]
 8024cc8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024ccc:	f04f 0c00 	mov.w	ip, #0
 8024cd0:	f88d c008 	strb.w	ip, [sp, #8]
 8024cd4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024cd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024cdc:	6803      	ldr	r3, [r0, #0]
 8024cde:	a901      	add	r1, sp, #4
 8024ce0:	689b      	ldr	r3, [r3, #8]
 8024ce2:	4798      	blx	r3
 8024ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ce8:	1cd3      	adds	r3, r2, #3
 8024cea:	b29b      	uxth	r3, r3
 8024cec:	2b06      	cmp	r3, #6
 8024cee:	d916      	bls.n	8024d1e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024cf0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024d58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024cf4:	f8cd c004 	str.w	ip, [sp, #4]
 8024cf8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024cfc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024d00:	6920      	ldr	r0, [r4, #16]
 8024d02:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024d06:	f04f 0c01 	mov.w	ip, #1
 8024d0a:	f88d c008 	strb.w	ip, [sp, #8]
 8024d0e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024d12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d16:	6803      	ldr	r3, [r0, #0]
 8024d18:	a901      	add	r1, sp, #4
 8024d1a:	689b      	ldr	r3, [r3, #8]
 8024d1c:	4798      	blx	r3
 8024d1e:	4b0d      	ldr	r3, [pc, #52]	; (8024d54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024d20:	9301      	str	r3, [sp, #4]
 8024d22:	6920      	ldr	r0, [r4, #16]
 8024d24:	f88d 5008 	strb.w	r5, [sp, #8]
 8024d28:	2300      	movs	r3, #0
 8024d2a:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024d2e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024d32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d36:	6803      	ldr	r3, [r0, #0]
 8024d38:	a901      	add	r1, sp, #4
 8024d3a:	681b      	ldr	r3, [r3, #0]
 8024d3c:	4798      	blx	r3
 8024d3e:	b005      	add	sp, #20
 8024d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d42:	2900      	cmp	r1, #0
 8024d44:	d1eb      	bne.n	8024d1e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d46:	80a2      	strh	r2, [r4, #4]
 8024d48:	80c6      	strh	r6, [r0, #6]
 8024d4a:	60a1      	str	r1, [r4, #8]
 8024d4c:	81a1      	strh	r1, [r4, #12]
 8024d4e:	73a1      	strb	r1, [r4, #14]
 8024d50:	e7e5      	b.n	8024d1e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d52:	bf00      	nop
 8024d54:	080538d4 	.word	0x080538d4
 8024d58:	080538fc 	.word	0x080538fc

08024d5c <__aeabi_atexit>:
 8024d5c:	460b      	mov	r3, r1
 8024d5e:	4601      	mov	r1, r0
 8024d60:	4618      	mov	r0, r3
 8024d62:	f000 b853 	b.w	8024e0c <__cxa_atexit>

08024d66 <__cxa_pure_virtual>:
 8024d66:	b508      	push	{r3, lr}
 8024d68:	f000 f820 	bl	8024dac <_ZSt9terminatev>

08024d6c <_ZdlPvj>:
 8024d6c:	f000 b80f 	b.w	8024d8e <_ZdlPv>

08024d70 <__cxa_guard_acquire>:
 8024d70:	6803      	ldr	r3, [r0, #0]
 8024d72:	07db      	lsls	r3, r3, #31
 8024d74:	d406      	bmi.n	8024d84 <__cxa_guard_acquire+0x14>
 8024d76:	7843      	ldrb	r3, [r0, #1]
 8024d78:	b103      	cbz	r3, 8024d7c <__cxa_guard_acquire+0xc>
 8024d7a:	deff      	udf	#255	; 0xff
 8024d7c:	2301      	movs	r3, #1
 8024d7e:	7043      	strb	r3, [r0, #1]
 8024d80:	4618      	mov	r0, r3
 8024d82:	4770      	bx	lr
 8024d84:	2000      	movs	r0, #0
 8024d86:	4770      	bx	lr

08024d88 <__cxa_guard_release>:
 8024d88:	2301      	movs	r3, #1
 8024d8a:	6003      	str	r3, [r0, #0]
 8024d8c:	4770      	bx	lr

08024d8e <_ZdlPv>:
 8024d8e:	f000 b88f 	b.w	8024eb0 <free>

08024d92 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024d92:	b508      	push	{r3, lr}
 8024d94:	4780      	blx	r0
 8024d96:	f000 f80e 	bl	8024db6 <abort>
	...

08024d9c <_ZSt13get_terminatev>:
 8024d9c:	4b02      	ldr	r3, [pc, #8]	; (8024da8 <_ZSt13get_terminatev+0xc>)
 8024d9e:	6818      	ldr	r0, [r3, #0]
 8024da0:	f3bf 8f5b 	dmb	ish
 8024da4:	4770      	bx	lr
 8024da6:	bf00      	nop
 8024da8:	200000a8 	.word	0x200000a8

08024dac <_ZSt9terminatev>:
 8024dac:	b508      	push	{r3, lr}
 8024dae:	f7ff fff5 	bl	8024d9c <_ZSt13get_terminatev>
 8024db2:	f7ff ffee 	bl	8024d92 <_ZN10__cxxabiv111__terminateEPFvvE>

08024db6 <abort>:
 8024db6:	b508      	push	{r3, lr}
 8024db8:	2006      	movs	r0, #6
 8024dba:	f000 fcb9 	bl	8025730 <raise>
 8024dbe:	2001      	movs	r0, #1
 8024dc0:	f7dc fe78 	bl	8001ab4 <_exit>

08024dc4 <__assert_func>:
 8024dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024dc6:	461c      	mov	r4, r3
 8024dc8:	4b09      	ldr	r3, [pc, #36]	; (8024df0 <__assert_func+0x2c>)
 8024dca:	681b      	ldr	r3, [r3, #0]
 8024dcc:	4605      	mov	r5, r0
 8024dce:	68d8      	ldr	r0, [r3, #12]
 8024dd0:	b152      	cbz	r2, 8024de8 <__assert_func+0x24>
 8024dd2:	4b08      	ldr	r3, [pc, #32]	; (8024df4 <__assert_func+0x30>)
 8024dd4:	9100      	str	r1, [sp, #0]
 8024dd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024dda:	4907      	ldr	r1, [pc, #28]	; (8024df8 <__assert_func+0x34>)
 8024ddc:	462b      	mov	r3, r5
 8024dde:	4622      	mov	r2, r4
 8024de0:	f000 f828 	bl	8024e34 <fiprintf>
 8024de4:	f7ff ffe7 	bl	8024db6 <abort>
 8024de8:	4b04      	ldr	r3, [pc, #16]	; (8024dfc <__assert_func+0x38>)
 8024dea:	461a      	mov	r2, r3
 8024dec:	e7f2      	b.n	8024dd4 <__assert_func+0x10>
 8024dee:	bf00      	nop
 8024df0:	200000ac 	.word	0x200000ac
 8024df4:	08054bb0 	.word	0x08054bb0
 8024df8:	08054bbd 	.word	0x08054bbd
 8024dfc:	08054beb 	.word	0x08054beb

08024e00 <atexit>:
 8024e00:	2300      	movs	r3, #0
 8024e02:	4601      	mov	r1, r0
 8024e04:	461a      	mov	r2, r3
 8024e06:	4618      	mov	r0, r3
 8024e08:	f000 bd6e 	b.w	80258e8 <__register_exitproc>

08024e0c <__cxa_atexit>:
 8024e0c:	b510      	push	{r4, lr}
 8024e0e:	4c05      	ldr	r4, [pc, #20]	; (8024e24 <__cxa_atexit+0x18>)
 8024e10:	4613      	mov	r3, r2
 8024e12:	b12c      	cbz	r4, 8024e20 <__cxa_atexit+0x14>
 8024e14:	460a      	mov	r2, r1
 8024e16:	4601      	mov	r1, r0
 8024e18:	2002      	movs	r0, #2
 8024e1a:	f000 fd65 	bl	80258e8 <__register_exitproc>
 8024e1e:	bd10      	pop	{r4, pc}
 8024e20:	4620      	mov	r0, r4
 8024e22:	e7fc      	b.n	8024e1e <__cxa_atexit+0x12>
 8024e24:	080258e9 	.word	0x080258e9

08024e28 <__errno>:
 8024e28:	4b01      	ldr	r3, [pc, #4]	; (8024e30 <__errno+0x8>)
 8024e2a:	6818      	ldr	r0, [r3, #0]
 8024e2c:	4770      	bx	lr
 8024e2e:	bf00      	nop
 8024e30:	200000ac 	.word	0x200000ac

08024e34 <fiprintf>:
 8024e34:	b40e      	push	{r1, r2, r3}
 8024e36:	b503      	push	{r0, r1, lr}
 8024e38:	4601      	mov	r1, r0
 8024e3a:	ab03      	add	r3, sp, #12
 8024e3c:	4805      	ldr	r0, [pc, #20]	; (8024e54 <fiprintf+0x20>)
 8024e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e42:	6800      	ldr	r0, [r0, #0]
 8024e44:	9301      	str	r3, [sp, #4]
 8024e46:	f000 f921 	bl	802508c <_vfiprintf_r>
 8024e4a:	b002      	add	sp, #8
 8024e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e50:	b003      	add	sp, #12
 8024e52:	4770      	bx	lr
 8024e54:	200000ac 	.word	0x200000ac

08024e58 <__libc_init_array>:
 8024e58:	b570      	push	{r4, r5, r6, lr}
 8024e5a:	4e0d      	ldr	r6, [pc, #52]	; (8024e90 <__libc_init_array+0x38>)
 8024e5c:	4c0d      	ldr	r4, [pc, #52]	; (8024e94 <__libc_init_array+0x3c>)
 8024e5e:	1ba4      	subs	r4, r4, r6
 8024e60:	10a4      	asrs	r4, r4, #2
 8024e62:	2500      	movs	r5, #0
 8024e64:	42a5      	cmp	r5, r4
 8024e66:	d109      	bne.n	8024e7c <__libc_init_array+0x24>
 8024e68:	4e0b      	ldr	r6, [pc, #44]	; (8024e98 <__libc_init_array+0x40>)
 8024e6a:	4c0c      	ldr	r4, [pc, #48]	; (8024e9c <__libc_init_array+0x44>)
 8024e6c:	f001 f82c 	bl	8025ec8 <_init>
 8024e70:	1ba4      	subs	r4, r4, r6
 8024e72:	10a4      	asrs	r4, r4, #2
 8024e74:	2500      	movs	r5, #0
 8024e76:	42a5      	cmp	r5, r4
 8024e78:	d105      	bne.n	8024e86 <__libc_init_array+0x2e>
 8024e7a:	bd70      	pop	{r4, r5, r6, pc}
 8024e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024e80:	4798      	blx	r3
 8024e82:	3501      	adds	r5, #1
 8024e84:	e7ee      	b.n	8024e64 <__libc_init_array+0xc>
 8024e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024e8a:	4798      	blx	r3
 8024e8c:	3501      	adds	r5, #1
 8024e8e:	e7f2      	b.n	8024e76 <__libc_init_array+0x1e>
 8024e90:	0808a248 	.word	0x0808a248
 8024e94:	0808a248 	.word	0x0808a248
 8024e98:	0808a248 	.word	0x0808a248
 8024e9c:	0808a25c 	.word	0x0808a25c

08024ea0 <malloc>:
 8024ea0:	4b02      	ldr	r3, [pc, #8]	; (8024eac <malloc+0xc>)
 8024ea2:	4601      	mov	r1, r0
 8024ea4:	6818      	ldr	r0, [r3, #0]
 8024ea6:	f000 b86d 	b.w	8024f84 <_malloc_r>
 8024eaa:	bf00      	nop
 8024eac:	200000ac 	.word	0x200000ac

08024eb0 <free>:
 8024eb0:	4b02      	ldr	r3, [pc, #8]	; (8024ebc <free+0xc>)
 8024eb2:	4601      	mov	r1, r0
 8024eb4:	6818      	ldr	r0, [r3, #0]
 8024eb6:	f000 b817 	b.w	8024ee8 <_free_r>
 8024eba:	bf00      	nop
 8024ebc:	200000ac 	.word	0x200000ac

08024ec0 <memcpy>:
 8024ec0:	b510      	push	{r4, lr}
 8024ec2:	1e43      	subs	r3, r0, #1
 8024ec4:	440a      	add	r2, r1
 8024ec6:	4291      	cmp	r1, r2
 8024ec8:	d100      	bne.n	8024ecc <memcpy+0xc>
 8024eca:	bd10      	pop	{r4, pc}
 8024ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024ed4:	e7f7      	b.n	8024ec6 <memcpy+0x6>

08024ed6 <memset>:
 8024ed6:	4402      	add	r2, r0
 8024ed8:	4603      	mov	r3, r0
 8024eda:	4293      	cmp	r3, r2
 8024edc:	d100      	bne.n	8024ee0 <memset+0xa>
 8024ede:	4770      	bx	lr
 8024ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8024ee4:	e7f9      	b.n	8024eda <memset+0x4>
	...

08024ee8 <_free_r>:
 8024ee8:	b538      	push	{r3, r4, r5, lr}
 8024eea:	4605      	mov	r5, r0
 8024eec:	2900      	cmp	r1, #0
 8024eee:	d045      	beq.n	8024f7c <_free_r+0x94>
 8024ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024ef4:	1f0c      	subs	r4, r1, #4
 8024ef6:	2b00      	cmp	r3, #0
 8024ef8:	bfb8      	it	lt
 8024efa:	18e4      	addlt	r4, r4, r3
 8024efc:	f000 ff36 	bl	8025d6c <__malloc_lock>
 8024f00:	4a1f      	ldr	r2, [pc, #124]	; (8024f80 <_free_r+0x98>)
 8024f02:	6813      	ldr	r3, [r2, #0]
 8024f04:	4610      	mov	r0, r2
 8024f06:	b933      	cbnz	r3, 8024f16 <_free_r+0x2e>
 8024f08:	6063      	str	r3, [r4, #4]
 8024f0a:	6014      	str	r4, [r2, #0]
 8024f0c:	4628      	mov	r0, r5
 8024f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f12:	f000 bf2c 	b.w	8025d6e <__malloc_unlock>
 8024f16:	42a3      	cmp	r3, r4
 8024f18:	d90c      	bls.n	8024f34 <_free_r+0x4c>
 8024f1a:	6821      	ldr	r1, [r4, #0]
 8024f1c:	1862      	adds	r2, r4, r1
 8024f1e:	4293      	cmp	r3, r2
 8024f20:	bf04      	itt	eq
 8024f22:	681a      	ldreq	r2, [r3, #0]
 8024f24:	685b      	ldreq	r3, [r3, #4]
 8024f26:	6063      	str	r3, [r4, #4]
 8024f28:	bf04      	itt	eq
 8024f2a:	1852      	addeq	r2, r2, r1
 8024f2c:	6022      	streq	r2, [r4, #0]
 8024f2e:	6004      	str	r4, [r0, #0]
 8024f30:	e7ec      	b.n	8024f0c <_free_r+0x24>
 8024f32:	4613      	mov	r3, r2
 8024f34:	685a      	ldr	r2, [r3, #4]
 8024f36:	b10a      	cbz	r2, 8024f3c <_free_r+0x54>
 8024f38:	42a2      	cmp	r2, r4
 8024f3a:	d9fa      	bls.n	8024f32 <_free_r+0x4a>
 8024f3c:	6819      	ldr	r1, [r3, #0]
 8024f3e:	1858      	adds	r0, r3, r1
 8024f40:	42a0      	cmp	r0, r4
 8024f42:	d10b      	bne.n	8024f5c <_free_r+0x74>
 8024f44:	6820      	ldr	r0, [r4, #0]
 8024f46:	4401      	add	r1, r0
 8024f48:	1858      	adds	r0, r3, r1
 8024f4a:	4282      	cmp	r2, r0
 8024f4c:	6019      	str	r1, [r3, #0]
 8024f4e:	d1dd      	bne.n	8024f0c <_free_r+0x24>
 8024f50:	6810      	ldr	r0, [r2, #0]
 8024f52:	6852      	ldr	r2, [r2, #4]
 8024f54:	605a      	str	r2, [r3, #4]
 8024f56:	4401      	add	r1, r0
 8024f58:	6019      	str	r1, [r3, #0]
 8024f5a:	e7d7      	b.n	8024f0c <_free_r+0x24>
 8024f5c:	d902      	bls.n	8024f64 <_free_r+0x7c>
 8024f5e:	230c      	movs	r3, #12
 8024f60:	602b      	str	r3, [r5, #0]
 8024f62:	e7d3      	b.n	8024f0c <_free_r+0x24>
 8024f64:	6820      	ldr	r0, [r4, #0]
 8024f66:	1821      	adds	r1, r4, r0
 8024f68:	428a      	cmp	r2, r1
 8024f6a:	bf04      	itt	eq
 8024f6c:	6811      	ldreq	r1, [r2, #0]
 8024f6e:	6852      	ldreq	r2, [r2, #4]
 8024f70:	6062      	str	r2, [r4, #4]
 8024f72:	bf04      	itt	eq
 8024f74:	1809      	addeq	r1, r1, r0
 8024f76:	6021      	streq	r1, [r4, #0]
 8024f78:	605c      	str	r4, [r3, #4]
 8024f7a:	e7c7      	b.n	8024f0c <_free_r+0x24>
 8024f7c:	bd38      	pop	{r3, r4, r5, pc}
 8024f7e:	bf00      	nop
 8024f80:	20001470 	.word	0x20001470

08024f84 <_malloc_r>:
 8024f84:	b570      	push	{r4, r5, r6, lr}
 8024f86:	1ccd      	adds	r5, r1, #3
 8024f88:	f025 0503 	bic.w	r5, r5, #3
 8024f8c:	3508      	adds	r5, #8
 8024f8e:	2d0c      	cmp	r5, #12
 8024f90:	bf38      	it	cc
 8024f92:	250c      	movcc	r5, #12
 8024f94:	2d00      	cmp	r5, #0
 8024f96:	4606      	mov	r6, r0
 8024f98:	db01      	blt.n	8024f9e <_malloc_r+0x1a>
 8024f9a:	42a9      	cmp	r1, r5
 8024f9c:	d903      	bls.n	8024fa6 <_malloc_r+0x22>
 8024f9e:	230c      	movs	r3, #12
 8024fa0:	6033      	str	r3, [r6, #0]
 8024fa2:	2000      	movs	r0, #0
 8024fa4:	bd70      	pop	{r4, r5, r6, pc}
 8024fa6:	f000 fee1 	bl	8025d6c <__malloc_lock>
 8024faa:	4a21      	ldr	r2, [pc, #132]	; (8025030 <_malloc_r+0xac>)
 8024fac:	6814      	ldr	r4, [r2, #0]
 8024fae:	4621      	mov	r1, r4
 8024fb0:	b991      	cbnz	r1, 8024fd8 <_malloc_r+0x54>
 8024fb2:	4c20      	ldr	r4, [pc, #128]	; (8025034 <_malloc_r+0xb0>)
 8024fb4:	6823      	ldr	r3, [r4, #0]
 8024fb6:	b91b      	cbnz	r3, 8024fc0 <_malloc_r+0x3c>
 8024fb8:	4630      	mov	r0, r6
 8024fba:	f000 fb81 	bl	80256c0 <_sbrk_r>
 8024fbe:	6020      	str	r0, [r4, #0]
 8024fc0:	4629      	mov	r1, r5
 8024fc2:	4630      	mov	r0, r6
 8024fc4:	f000 fb7c 	bl	80256c0 <_sbrk_r>
 8024fc8:	1c43      	adds	r3, r0, #1
 8024fca:	d124      	bne.n	8025016 <_malloc_r+0x92>
 8024fcc:	230c      	movs	r3, #12
 8024fce:	6033      	str	r3, [r6, #0]
 8024fd0:	4630      	mov	r0, r6
 8024fd2:	f000 fecc 	bl	8025d6e <__malloc_unlock>
 8024fd6:	e7e4      	b.n	8024fa2 <_malloc_r+0x1e>
 8024fd8:	680b      	ldr	r3, [r1, #0]
 8024fda:	1b5b      	subs	r3, r3, r5
 8024fdc:	d418      	bmi.n	8025010 <_malloc_r+0x8c>
 8024fde:	2b0b      	cmp	r3, #11
 8024fe0:	d90f      	bls.n	8025002 <_malloc_r+0x7e>
 8024fe2:	600b      	str	r3, [r1, #0]
 8024fe4:	50cd      	str	r5, [r1, r3]
 8024fe6:	18cc      	adds	r4, r1, r3
 8024fe8:	4630      	mov	r0, r6
 8024fea:	f000 fec0 	bl	8025d6e <__malloc_unlock>
 8024fee:	f104 000b 	add.w	r0, r4, #11
 8024ff2:	1d23      	adds	r3, r4, #4
 8024ff4:	f020 0007 	bic.w	r0, r0, #7
 8024ff8:	1ac3      	subs	r3, r0, r3
 8024ffa:	d0d3      	beq.n	8024fa4 <_malloc_r+0x20>
 8024ffc:	425a      	negs	r2, r3
 8024ffe:	50e2      	str	r2, [r4, r3]
 8025000:	e7d0      	b.n	8024fa4 <_malloc_r+0x20>
 8025002:	428c      	cmp	r4, r1
 8025004:	684b      	ldr	r3, [r1, #4]
 8025006:	bf16      	itet	ne
 8025008:	6063      	strne	r3, [r4, #4]
 802500a:	6013      	streq	r3, [r2, #0]
 802500c:	460c      	movne	r4, r1
 802500e:	e7eb      	b.n	8024fe8 <_malloc_r+0x64>
 8025010:	460c      	mov	r4, r1
 8025012:	6849      	ldr	r1, [r1, #4]
 8025014:	e7cc      	b.n	8024fb0 <_malloc_r+0x2c>
 8025016:	1cc4      	adds	r4, r0, #3
 8025018:	f024 0403 	bic.w	r4, r4, #3
 802501c:	42a0      	cmp	r0, r4
 802501e:	d005      	beq.n	802502c <_malloc_r+0xa8>
 8025020:	1a21      	subs	r1, r4, r0
 8025022:	4630      	mov	r0, r6
 8025024:	f000 fb4c 	bl	80256c0 <_sbrk_r>
 8025028:	3001      	adds	r0, #1
 802502a:	d0cf      	beq.n	8024fcc <_malloc_r+0x48>
 802502c:	6025      	str	r5, [r4, #0]
 802502e:	e7db      	b.n	8024fe8 <_malloc_r+0x64>
 8025030:	20001470 	.word	0x20001470
 8025034:	20001474 	.word	0x20001474

08025038 <__sfputc_r>:
 8025038:	6893      	ldr	r3, [r2, #8]
 802503a:	3b01      	subs	r3, #1
 802503c:	2b00      	cmp	r3, #0
 802503e:	b410      	push	{r4}
 8025040:	6093      	str	r3, [r2, #8]
 8025042:	da08      	bge.n	8025056 <__sfputc_r+0x1e>
 8025044:	6994      	ldr	r4, [r2, #24]
 8025046:	42a3      	cmp	r3, r4
 8025048:	db01      	blt.n	802504e <__sfputc_r+0x16>
 802504a:	290a      	cmp	r1, #10
 802504c:	d103      	bne.n	8025056 <__sfputc_r+0x1e>
 802504e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025052:	f000 bb89 	b.w	8025768 <__swbuf_r>
 8025056:	6813      	ldr	r3, [r2, #0]
 8025058:	1c58      	adds	r0, r3, #1
 802505a:	6010      	str	r0, [r2, #0]
 802505c:	7019      	strb	r1, [r3, #0]
 802505e:	4608      	mov	r0, r1
 8025060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025064:	4770      	bx	lr

08025066 <__sfputs_r>:
 8025066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025068:	4606      	mov	r6, r0
 802506a:	460f      	mov	r7, r1
 802506c:	4614      	mov	r4, r2
 802506e:	18d5      	adds	r5, r2, r3
 8025070:	42ac      	cmp	r4, r5
 8025072:	d101      	bne.n	8025078 <__sfputs_r+0x12>
 8025074:	2000      	movs	r0, #0
 8025076:	e007      	b.n	8025088 <__sfputs_r+0x22>
 8025078:	463a      	mov	r2, r7
 802507a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802507e:	4630      	mov	r0, r6
 8025080:	f7ff ffda 	bl	8025038 <__sfputc_r>
 8025084:	1c43      	adds	r3, r0, #1
 8025086:	d1f3      	bne.n	8025070 <__sfputs_r+0xa>
 8025088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802508c <_vfiprintf_r>:
 802508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025090:	460c      	mov	r4, r1
 8025092:	b09d      	sub	sp, #116	; 0x74
 8025094:	4617      	mov	r7, r2
 8025096:	461d      	mov	r5, r3
 8025098:	4606      	mov	r6, r0
 802509a:	b118      	cbz	r0, 80250a4 <_vfiprintf_r+0x18>
 802509c:	6983      	ldr	r3, [r0, #24]
 802509e:	b90b      	cbnz	r3, 80250a4 <_vfiprintf_r+0x18>
 80250a0:	f000 fd76 	bl	8025b90 <__sinit>
 80250a4:	4b7c      	ldr	r3, [pc, #496]	; (8025298 <_vfiprintf_r+0x20c>)
 80250a6:	429c      	cmp	r4, r3
 80250a8:	d158      	bne.n	802515c <_vfiprintf_r+0xd0>
 80250aa:	6874      	ldr	r4, [r6, #4]
 80250ac:	89a3      	ldrh	r3, [r4, #12]
 80250ae:	0718      	lsls	r0, r3, #28
 80250b0:	d55e      	bpl.n	8025170 <_vfiprintf_r+0xe4>
 80250b2:	6923      	ldr	r3, [r4, #16]
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	d05b      	beq.n	8025170 <_vfiprintf_r+0xe4>
 80250b8:	2300      	movs	r3, #0
 80250ba:	9309      	str	r3, [sp, #36]	; 0x24
 80250bc:	2320      	movs	r3, #32
 80250be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80250c2:	2330      	movs	r3, #48	; 0x30
 80250c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80250c8:	9503      	str	r5, [sp, #12]
 80250ca:	f04f 0b01 	mov.w	fp, #1
 80250ce:	46b8      	mov	r8, r7
 80250d0:	4645      	mov	r5, r8
 80250d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80250d6:	b10b      	cbz	r3, 80250dc <_vfiprintf_r+0x50>
 80250d8:	2b25      	cmp	r3, #37	; 0x25
 80250da:	d154      	bne.n	8025186 <_vfiprintf_r+0xfa>
 80250dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80250e0:	d00b      	beq.n	80250fa <_vfiprintf_r+0x6e>
 80250e2:	4653      	mov	r3, sl
 80250e4:	463a      	mov	r2, r7
 80250e6:	4621      	mov	r1, r4
 80250e8:	4630      	mov	r0, r6
 80250ea:	f7ff ffbc 	bl	8025066 <__sfputs_r>
 80250ee:	3001      	adds	r0, #1
 80250f0:	f000 80c2 	beq.w	8025278 <_vfiprintf_r+0x1ec>
 80250f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250f6:	4453      	add	r3, sl
 80250f8:	9309      	str	r3, [sp, #36]	; 0x24
 80250fa:	f898 3000 	ldrb.w	r3, [r8]
 80250fe:	2b00      	cmp	r3, #0
 8025100:	f000 80ba 	beq.w	8025278 <_vfiprintf_r+0x1ec>
 8025104:	2300      	movs	r3, #0
 8025106:	f04f 32ff 	mov.w	r2, #4294967295
 802510a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802510e:	9304      	str	r3, [sp, #16]
 8025110:	9307      	str	r3, [sp, #28]
 8025112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025116:	931a      	str	r3, [sp, #104]	; 0x68
 8025118:	46a8      	mov	r8, r5
 802511a:	2205      	movs	r2, #5
 802511c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025120:	485e      	ldr	r0, [pc, #376]	; (802529c <_vfiprintf_r+0x210>)
 8025122:	f7db f865 	bl	80001f0 <memchr>
 8025126:	9b04      	ldr	r3, [sp, #16]
 8025128:	bb78      	cbnz	r0, 802518a <_vfiprintf_r+0xfe>
 802512a:	06d9      	lsls	r1, r3, #27
 802512c:	bf44      	itt	mi
 802512e:	2220      	movmi	r2, #32
 8025130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025134:	071a      	lsls	r2, r3, #28
 8025136:	bf44      	itt	mi
 8025138:	222b      	movmi	r2, #43	; 0x2b
 802513a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802513e:	782a      	ldrb	r2, [r5, #0]
 8025140:	2a2a      	cmp	r2, #42	; 0x2a
 8025142:	d02a      	beq.n	802519a <_vfiprintf_r+0x10e>
 8025144:	9a07      	ldr	r2, [sp, #28]
 8025146:	46a8      	mov	r8, r5
 8025148:	2000      	movs	r0, #0
 802514a:	250a      	movs	r5, #10
 802514c:	4641      	mov	r1, r8
 802514e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025152:	3b30      	subs	r3, #48	; 0x30
 8025154:	2b09      	cmp	r3, #9
 8025156:	d969      	bls.n	802522c <_vfiprintf_r+0x1a0>
 8025158:	b360      	cbz	r0, 80251b4 <_vfiprintf_r+0x128>
 802515a:	e024      	b.n	80251a6 <_vfiprintf_r+0x11a>
 802515c:	4b50      	ldr	r3, [pc, #320]	; (80252a0 <_vfiprintf_r+0x214>)
 802515e:	429c      	cmp	r4, r3
 8025160:	d101      	bne.n	8025166 <_vfiprintf_r+0xda>
 8025162:	68b4      	ldr	r4, [r6, #8]
 8025164:	e7a2      	b.n	80250ac <_vfiprintf_r+0x20>
 8025166:	4b4f      	ldr	r3, [pc, #316]	; (80252a4 <_vfiprintf_r+0x218>)
 8025168:	429c      	cmp	r4, r3
 802516a:	bf08      	it	eq
 802516c:	68f4      	ldreq	r4, [r6, #12]
 802516e:	e79d      	b.n	80250ac <_vfiprintf_r+0x20>
 8025170:	4621      	mov	r1, r4
 8025172:	4630      	mov	r0, r6
 8025174:	f000 fb4a 	bl	802580c <__swsetup_r>
 8025178:	2800      	cmp	r0, #0
 802517a:	d09d      	beq.n	80250b8 <_vfiprintf_r+0x2c>
 802517c:	f04f 30ff 	mov.w	r0, #4294967295
 8025180:	b01d      	add	sp, #116	; 0x74
 8025182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025186:	46a8      	mov	r8, r5
 8025188:	e7a2      	b.n	80250d0 <_vfiprintf_r+0x44>
 802518a:	4a44      	ldr	r2, [pc, #272]	; (802529c <_vfiprintf_r+0x210>)
 802518c:	1a80      	subs	r0, r0, r2
 802518e:	fa0b f000 	lsl.w	r0, fp, r0
 8025192:	4318      	orrs	r0, r3
 8025194:	9004      	str	r0, [sp, #16]
 8025196:	4645      	mov	r5, r8
 8025198:	e7be      	b.n	8025118 <_vfiprintf_r+0x8c>
 802519a:	9a03      	ldr	r2, [sp, #12]
 802519c:	1d11      	adds	r1, r2, #4
 802519e:	6812      	ldr	r2, [r2, #0]
 80251a0:	9103      	str	r1, [sp, #12]
 80251a2:	2a00      	cmp	r2, #0
 80251a4:	db01      	blt.n	80251aa <_vfiprintf_r+0x11e>
 80251a6:	9207      	str	r2, [sp, #28]
 80251a8:	e004      	b.n	80251b4 <_vfiprintf_r+0x128>
 80251aa:	4252      	negs	r2, r2
 80251ac:	f043 0302 	orr.w	r3, r3, #2
 80251b0:	9207      	str	r2, [sp, #28]
 80251b2:	9304      	str	r3, [sp, #16]
 80251b4:	f898 3000 	ldrb.w	r3, [r8]
 80251b8:	2b2e      	cmp	r3, #46	; 0x2e
 80251ba:	d10e      	bne.n	80251da <_vfiprintf_r+0x14e>
 80251bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80251c0:	2b2a      	cmp	r3, #42	; 0x2a
 80251c2:	d138      	bne.n	8025236 <_vfiprintf_r+0x1aa>
 80251c4:	9b03      	ldr	r3, [sp, #12]
 80251c6:	1d1a      	adds	r2, r3, #4
 80251c8:	681b      	ldr	r3, [r3, #0]
 80251ca:	9203      	str	r2, [sp, #12]
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	bfb8      	it	lt
 80251d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80251d4:	f108 0802 	add.w	r8, r8, #2
 80251d8:	9305      	str	r3, [sp, #20]
 80251da:	4d33      	ldr	r5, [pc, #204]	; (80252a8 <_vfiprintf_r+0x21c>)
 80251dc:	f898 1000 	ldrb.w	r1, [r8]
 80251e0:	2203      	movs	r2, #3
 80251e2:	4628      	mov	r0, r5
 80251e4:	f7db f804 	bl	80001f0 <memchr>
 80251e8:	b140      	cbz	r0, 80251fc <_vfiprintf_r+0x170>
 80251ea:	2340      	movs	r3, #64	; 0x40
 80251ec:	1b40      	subs	r0, r0, r5
 80251ee:	fa03 f000 	lsl.w	r0, r3, r0
 80251f2:	9b04      	ldr	r3, [sp, #16]
 80251f4:	4303      	orrs	r3, r0
 80251f6:	f108 0801 	add.w	r8, r8, #1
 80251fa:	9304      	str	r3, [sp, #16]
 80251fc:	f898 1000 	ldrb.w	r1, [r8]
 8025200:	482a      	ldr	r0, [pc, #168]	; (80252ac <_vfiprintf_r+0x220>)
 8025202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025206:	2206      	movs	r2, #6
 8025208:	f108 0701 	add.w	r7, r8, #1
 802520c:	f7da fff0 	bl	80001f0 <memchr>
 8025210:	2800      	cmp	r0, #0
 8025212:	d037      	beq.n	8025284 <_vfiprintf_r+0x1f8>
 8025214:	4b26      	ldr	r3, [pc, #152]	; (80252b0 <_vfiprintf_r+0x224>)
 8025216:	bb1b      	cbnz	r3, 8025260 <_vfiprintf_r+0x1d4>
 8025218:	9b03      	ldr	r3, [sp, #12]
 802521a:	3307      	adds	r3, #7
 802521c:	f023 0307 	bic.w	r3, r3, #7
 8025220:	3308      	adds	r3, #8
 8025222:	9303      	str	r3, [sp, #12]
 8025224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025226:	444b      	add	r3, r9
 8025228:	9309      	str	r3, [sp, #36]	; 0x24
 802522a:	e750      	b.n	80250ce <_vfiprintf_r+0x42>
 802522c:	fb05 3202 	mla	r2, r5, r2, r3
 8025230:	2001      	movs	r0, #1
 8025232:	4688      	mov	r8, r1
 8025234:	e78a      	b.n	802514c <_vfiprintf_r+0xc0>
 8025236:	2300      	movs	r3, #0
 8025238:	f108 0801 	add.w	r8, r8, #1
 802523c:	9305      	str	r3, [sp, #20]
 802523e:	4619      	mov	r1, r3
 8025240:	250a      	movs	r5, #10
 8025242:	4640      	mov	r0, r8
 8025244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025248:	3a30      	subs	r2, #48	; 0x30
 802524a:	2a09      	cmp	r2, #9
 802524c:	d903      	bls.n	8025256 <_vfiprintf_r+0x1ca>
 802524e:	2b00      	cmp	r3, #0
 8025250:	d0c3      	beq.n	80251da <_vfiprintf_r+0x14e>
 8025252:	9105      	str	r1, [sp, #20]
 8025254:	e7c1      	b.n	80251da <_vfiprintf_r+0x14e>
 8025256:	fb05 2101 	mla	r1, r5, r1, r2
 802525a:	2301      	movs	r3, #1
 802525c:	4680      	mov	r8, r0
 802525e:	e7f0      	b.n	8025242 <_vfiprintf_r+0x1b6>
 8025260:	ab03      	add	r3, sp, #12
 8025262:	9300      	str	r3, [sp, #0]
 8025264:	4622      	mov	r2, r4
 8025266:	4b13      	ldr	r3, [pc, #76]	; (80252b4 <_vfiprintf_r+0x228>)
 8025268:	a904      	add	r1, sp, #16
 802526a:	4630      	mov	r0, r6
 802526c:	f3af 8000 	nop.w
 8025270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025274:	4681      	mov	r9, r0
 8025276:	d1d5      	bne.n	8025224 <_vfiprintf_r+0x198>
 8025278:	89a3      	ldrh	r3, [r4, #12]
 802527a:	065b      	lsls	r3, r3, #25
 802527c:	f53f af7e 	bmi.w	802517c <_vfiprintf_r+0xf0>
 8025280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025282:	e77d      	b.n	8025180 <_vfiprintf_r+0xf4>
 8025284:	ab03      	add	r3, sp, #12
 8025286:	9300      	str	r3, [sp, #0]
 8025288:	4622      	mov	r2, r4
 802528a:	4b0a      	ldr	r3, [pc, #40]	; (80252b4 <_vfiprintf_r+0x228>)
 802528c:	a904      	add	r1, sp, #16
 802528e:	4630      	mov	r0, r6
 8025290:	f000 f888 	bl	80253a4 <_printf_i>
 8025294:	e7ec      	b.n	8025270 <_vfiprintf_r+0x1e4>
 8025296:	bf00      	nop
 8025298:	08054c48 	.word	0x08054c48
 802529c:	08054bf0 	.word	0x08054bf0
 80252a0:	08054c68 	.word	0x08054c68
 80252a4:	08054c28 	.word	0x08054c28
 80252a8:	08054bf6 	.word	0x08054bf6
 80252ac:	08054bfa 	.word	0x08054bfa
 80252b0:	00000000 	.word	0x00000000
 80252b4:	08025067 	.word	0x08025067

080252b8 <_printf_common>:
 80252b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80252bc:	4691      	mov	r9, r2
 80252be:	461f      	mov	r7, r3
 80252c0:	688a      	ldr	r2, [r1, #8]
 80252c2:	690b      	ldr	r3, [r1, #16]
 80252c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80252c8:	4293      	cmp	r3, r2
 80252ca:	bfb8      	it	lt
 80252cc:	4613      	movlt	r3, r2
 80252ce:	f8c9 3000 	str.w	r3, [r9]
 80252d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80252d6:	4606      	mov	r6, r0
 80252d8:	460c      	mov	r4, r1
 80252da:	b112      	cbz	r2, 80252e2 <_printf_common+0x2a>
 80252dc:	3301      	adds	r3, #1
 80252de:	f8c9 3000 	str.w	r3, [r9]
 80252e2:	6823      	ldr	r3, [r4, #0]
 80252e4:	0699      	lsls	r1, r3, #26
 80252e6:	bf42      	ittt	mi
 80252e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80252ec:	3302      	addmi	r3, #2
 80252ee:	f8c9 3000 	strmi.w	r3, [r9]
 80252f2:	6825      	ldr	r5, [r4, #0]
 80252f4:	f015 0506 	ands.w	r5, r5, #6
 80252f8:	d107      	bne.n	802530a <_printf_common+0x52>
 80252fa:	f104 0a19 	add.w	sl, r4, #25
 80252fe:	68e3      	ldr	r3, [r4, #12]
 8025300:	f8d9 2000 	ldr.w	r2, [r9]
 8025304:	1a9b      	subs	r3, r3, r2
 8025306:	42ab      	cmp	r3, r5
 8025308:	dc28      	bgt.n	802535c <_printf_common+0xa4>
 802530a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802530e:	6822      	ldr	r2, [r4, #0]
 8025310:	3300      	adds	r3, #0
 8025312:	bf18      	it	ne
 8025314:	2301      	movne	r3, #1
 8025316:	0692      	lsls	r2, r2, #26
 8025318:	d42d      	bmi.n	8025376 <_printf_common+0xbe>
 802531a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802531e:	4639      	mov	r1, r7
 8025320:	4630      	mov	r0, r6
 8025322:	47c0      	blx	r8
 8025324:	3001      	adds	r0, #1
 8025326:	d020      	beq.n	802536a <_printf_common+0xb2>
 8025328:	6823      	ldr	r3, [r4, #0]
 802532a:	68e5      	ldr	r5, [r4, #12]
 802532c:	f8d9 2000 	ldr.w	r2, [r9]
 8025330:	f003 0306 	and.w	r3, r3, #6
 8025334:	2b04      	cmp	r3, #4
 8025336:	bf08      	it	eq
 8025338:	1aad      	subeq	r5, r5, r2
 802533a:	68a3      	ldr	r3, [r4, #8]
 802533c:	6922      	ldr	r2, [r4, #16]
 802533e:	bf0c      	ite	eq
 8025340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025344:	2500      	movne	r5, #0
 8025346:	4293      	cmp	r3, r2
 8025348:	bfc4      	itt	gt
 802534a:	1a9b      	subgt	r3, r3, r2
 802534c:	18ed      	addgt	r5, r5, r3
 802534e:	f04f 0900 	mov.w	r9, #0
 8025352:	341a      	adds	r4, #26
 8025354:	454d      	cmp	r5, r9
 8025356:	d11a      	bne.n	802538e <_printf_common+0xd6>
 8025358:	2000      	movs	r0, #0
 802535a:	e008      	b.n	802536e <_printf_common+0xb6>
 802535c:	2301      	movs	r3, #1
 802535e:	4652      	mov	r2, sl
 8025360:	4639      	mov	r1, r7
 8025362:	4630      	mov	r0, r6
 8025364:	47c0      	blx	r8
 8025366:	3001      	adds	r0, #1
 8025368:	d103      	bne.n	8025372 <_printf_common+0xba>
 802536a:	f04f 30ff 	mov.w	r0, #4294967295
 802536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025372:	3501      	adds	r5, #1
 8025374:	e7c3      	b.n	80252fe <_printf_common+0x46>
 8025376:	18e1      	adds	r1, r4, r3
 8025378:	1c5a      	adds	r2, r3, #1
 802537a:	2030      	movs	r0, #48	; 0x30
 802537c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025380:	4422      	add	r2, r4
 8025382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802538a:	3302      	adds	r3, #2
 802538c:	e7c5      	b.n	802531a <_printf_common+0x62>
 802538e:	2301      	movs	r3, #1
 8025390:	4622      	mov	r2, r4
 8025392:	4639      	mov	r1, r7
 8025394:	4630      	mov	r0, r6
 8025396:	47c0      	blx	r8
 8025398:	3001      	adds	r0, #1
 802539a:	d0e6      	beq.n	802536a <_printf_common+0xb2>
 802539c:	f109 0901 	add.w	r9, r9, #1
 80253a0:	e7d8      	b.n	8025354 <_printf_common+0x9c>
	...

080253a4 <_printf_i>:
 80253a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80253a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80253ac:	460c      	mov	r4, r1
 80253ae:	7e09      	ldrb	r1, [r1, #24]
 80253b0:	b085      	sub	sp, #20
 80253b2:	296e      	cmp	r1, #110	; 0x6e
 80253b4:	4617      	mov	r7, r2
 80253b6:	4606      	mov	r6, r0
 80253b8:	4698      	mov	r8, r3
 80253ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80253bc:	f000 80b3 	beq.w	8025526 <_printf_i+0x182>
 80253c0:	d822      	bhi.n	8025408 <_printf_i+0x64>
 80253c2:	2963      	cmp	r1, #99	; 0x63
 80253c4:	d036      	beq.n	8025434 <_printf_i+0x90>
 80253c6:	d80a      	bhi.n	80253de <_printf_i+0x3a>
 80253c8:	2900      	cmp	r1, #0
 80253ca:	f000 80b9 	beq.w	8025540 <_printf_i+0x19c>
 80253ce:	2958      	cmp	r1, #88	; 0x58
 80253d0:	f000 8083 	beq.w	80254da <_printf_i+0x136>
 80253d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80253d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80253dc:	e032      	b.n	8025444 <_printf_i+0xa0>
 80253de:	2964      	cmp	r1, #100	; 0x64
 80253e0:	d001      	beq.n	80253e6 <_printf_i+0x42>
 80253e2:	2969      	cmp	r1, #105	; 0x69
 80253e4:	d1f6      	bne.n	80253d4 <_printf_i+0x30>
 80253e6:	6820      	ldr	r0, [r4, #0]
 80253e8:	6813      	ldr	r3, [r2, #0]
 80253ea:	0605      	lsls	r5, r0, #24
 80253ec:	f103 0104 	add.w	r1, r3, #4
 80253f0:	d52a      	bpl.n	8025448 <_printf_i+0xa4>
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	6011      	str	r1, [r2, #0]
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	da03      	bge.n	8025402 <_printf_i+0x5e>
 80253fa:	222d      	movs	r2, #45	; 0x2d
 80253fc:	425b      	negs	r3, r3
 80253fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025402:	486f      	ldr	r0, [pc, #444]	; (80255c0 <_printf_i+0x21c>)
 8025404:	220a      	movs	r2, #10
 8025406:	e039      	b.n	802547c <_printf_i+0xd8>
 8025408:	2973      	cmp	r1, #115	; 0x73
 802540a:	f000 809d 	beq.w	8025548 <_printf_i+0x1a4>
 802540e:	d808      	bhi.n	8025422 <_printf_i+0x7e>
 8025410:	296f      	cmp	r1, #111	; 0x6f
 8025412:	d020      	beq.n	8025456 <_printf_i+0xb2>
 8025414:	2970      	cmp	r1, #112	; 0x70
 8025416:	d1dd      	bne.n	80253d4 <_printf_i+0x30>
 8025418:	6823      	ldr	r3, [r4, #0]
 802541a:	f043 0320 	orr.w	r3, r3, #32
 802541e:	6023      	str	r3, [r4, #0]
 8025420:	e003      	b.n	802542a <_printf_i+0x86>
 8025422:	2975      	cmp	r1, #117	; 0x75
 8025424:	d017      	beq.n	8025456 <_printf_i+0xb2>
 8025426:	2978      	cmp	r1, #120	; 0x78
 8025428:	d1d4      	bne.n	80253d4 <_printf_i+0x30>
 802542a:	2378      	movs	r3, #120	; 0x78
 802542c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025430:	4864      	ldr	r0, [pc, #400]	; (80255c4 <_printf_i+0x220>)
 8025432:	e055      	b.n	80254e0 <_printf_i+0x13c>
 8025434:	6813      	ldr	r3, [r2, #0]
 8025436:	1d19      	adds	r1, r3, #4
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	6011      	str	r1, [r2, #0]
 802543c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025444:	2301      	movs	r3, #1
 8025446:	e08c      	b.n	8025562 <_printf_i+0x1be>
 8025448:	681b      	ldr	r3, [r3, #0]
 802544a:	6011      	str	r1, [r2, #0]
 802544c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025450:	bf18      	it	ne
 8025452:	b21b      	sxthne	r3, r3
 8025454:	e7cf      	b.n	80253f6 <_printf_i+0x52>
 8025456:	6813      	ldr	r3, [r2, #0]
 8025458:	6825      	ldr	r5, [r4, #0]
 802545a:	1d18      	adds	r0, r3, #4
 802545c:	6010      	str	r0, [r2, #0]
 802545e:	0628      	lsls	r0, r5, #24
 8025460:	d501      	bpl.n	8025466 <_printf_i+0xc2>
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	e002      	b.n	802546c <_printf_i+0xc8>
 8025466:	0668      	lsls	r0, r5, #25
 8025468:	d5fb      	bpl.n	8025462 <_printf_i+0xbe>
 802546a:	881b      	ldrh	r3, [r3, #0]
 802546c:	4854      	ldr	r0, [pc, #336]	; (80255c0 <_printf_i+0x21c>)
 802546e:	296f      	cmp	r1, #111	; 0x6f
 8025470:	bf14      	ite	ne
 8025472:	220a      	movne	r2, #10
 8025474:	2208      	moveq	r2, #8
 8025476:	2100      	movs	r1, #0
 8025478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802547c:	6865      	ldr	r5, [r4, #4]
 802547e:	60a5      	str	r5, [r4, #8]
 8025480:	2d00      	cmp	r5, #0
 8025482:	f2c0 8095 	blt.w	80255b0 <_printf_i+0x20c>
 8025486:	6821      	ldr	r1, [r4, #0]
 8025488:	f021 0104 	bic.w	r1, r1, #4
 802548c:	6021      	str	r1, [r4, #0]
 802548e:	2b00      	cmp	r3, #0
 8025490:	d13d      	bne.n	802550e <_printf_i+0x16a>
 8025492:	2d00      	cmp	r5, #0
 8025494:	f040 808e 	bne.w	80255b4 <_printf_i+0x210>
 8025498:	4665      	mov	r5, ip
 802549a:	2a08      	cmp	r2, #8
 802549c:	d10b      	bne.n	80254b6 <_printf_i+0x112>
 802549e:	6823      	ldr	r3, [r4, #0]
 80254a0:	07db      	lsls	r3, r3, #31
 80254a2:	d508      	bpl.n	80254b6 <_printf_i+0x112>
 80254a4:	6923      	ldr	r3, [r4, #16]
 80254a6:	6862      	ldr	r2, [r4, #4]
 80254a8:	429a      	cmp	r2, r3
 80254aa:	bfde      	ittt	le
 80254ac:	2330      	movle	r3, #48	; 0x30
 80254ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80254b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80254b6:	ebac 0305 	sub.w	r3, ip, r5
 80254ba:	6123      	str	r3, [r4, #16]
 80254bc:	f8cd 8000 	str.w	r8, [sp]
 80254c0:	463b      	mov	r3, r7
 80254c2:	aa03      	add	r2, sp, #12
 80254c4:	4621      	mov	r1, r4
 80254c6:	4630      	mov	r0, r6
 80254c8:	f7ff fef6 	bl	80252b8 <_printf_common>
 80254cc:	3001      	adds	r0, #1
 80254ce:	d14d      	bne.n	802556c <_printf_i+0x1c8>
 80254d0:	f04f 30ff 	mov.w	r0, #4294967295
 80254d4:	b005      	add	sp, #20
 80254d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80254da:	4839      	ldr	r0, [pc, #228]	; (80255c0 <_printf_i+0x21c>)
 80254dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80254e0:	6813      	ldr	r3, [r2, #0]
 80254e2:	6821      	ldr	r1, [r4, #0]
 80254e4:	1d1d      	adds	r5, r3, #4
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	6015      	str	r5, [r2, #0]
 80254ea:	060a      	lsls	r2, r1, #24
 80254ec:	d50b      	bpl.n	8025506 <_printf_i+0x162>
 80254ee:	07ca      	lsls	r2, r1, #31
 80254f0:	bf44      	itt	mi
 80254f2:	f041 0120 	orrmi.w	r1, r1, #32
 80254f6:	6021      	strmi	r1, [r4, #0]
 80254f8:	b91b      	cbnz	r3, 8025502 <_printf_i+0x15e>
 80254fa:	6822      	ldr	r2, [r4, #0]
 80254fc:	f022 0220 	bic.w	r2, r2, #32
 8025500:	6022      	str	r2, [r4, #0]
 8025502:	2210      	movs	r2, #16
 8025504:	e7b7      	b.n	8025476 <_printf_i+0xd2>
 8025506:	064d      	lsls	r5, r1, #25
 8025508:	bf48      	it	mi
 802550a:	b29b      	uxthmi	r3, r3
 802550c:	e7ef      	b.n	80254ee <_printf_i+0x14a>
 802550e:	4665      	mov	r5, ip
 8025510:	fbb3 f1f2 	udiv	r1, r3, r2
 8025514:	fb02 3311 	mls	r3, r2, r1, r3
 8025518:	5cc3      	ldrb	r3, [r0, r3]
 802551a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802551e:	460b      	mov	r3, r1
 8025520:	2900      	cmp	r1, #0
 8025522:	d1f5      	bne.n	8025510 <_printf_i+0x16c>
 8025524:	e7b9      	b.n	802549a <_printf_i+0xf6>
 8025526:	6813      	ldr	r3, [r2, #0]
 8025528:	6825      	ldr	r5, [r4, #0]
 802552a:	6961      	ldr	r1, [r4, #20]
 802552c:	1d18      	adds	r0, r3, #4
 802552e:	6010      	str	r0, [r2, #0]
 8025530:	0628      	lsls	r0, r5, #24
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	d501      	bpl.n	802553a <_printf_i+0x196>
 8025536:	6019      	str	r1, [r3, #0]
 8025538:	e002      	b.n	8025540 <_printf_i+0x19c>
 802553a:	066a      	lsls	r2, r5, #25
 802553c:	d5fb      	bpl.n	8025536 <_printf_i+0x192>
 802553e:	8019      	strh	r1, [r3, #0]
 8025540:	2300      	movs	r3, #0
 8025542:	6123      	str	r3, [r4, #16]
 8025544:	4665      	mov	r5, ip
 8025546:	e7b9      	b.n	80254bc <_printf_i+0x118>
 8025548:	6813      	ldr	r3, [r2, #0]
 802554a:	1d19      	adds	r1, r3, #4
 802554c:	6011      	str	r1, [r2, #0]
 802554e:	681d      	ldr	r5, [r3, #0]
 8025550:	6862      	ldr	r2, [r4, #4]
 8025552:	2100      	movs	r1, #0
 8025554:	4628      	mov	r0, r5
 8025556:	f7da fe4b 	bl	80001f0 <memchr>
 802555a:	b108      	cbz	r0, 8025560 <_printf_i+0x1bc>
 802555c:	1b40      	subs	r0, r0, r5
 802555e:	6060      	str	r0, [r4, #4]
 8025560:	6863      	ldr	r3, [r4, #4]
 8025562:	6123      	str	r3, [r4, #16]
 8025564:	2300      	movs	r3, #0
 8025566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802556a:	e7a7      	b.n	80254bc <_printf_i+0x118>
 802556c:	6923      	ldr	r3, [r4, #16]
 802556e:	462a      	mov	r2, r5
 8025570:	4639      	mov	r1, r7
 8025572:	4630      	mov	r0, r6
 8025574:	47c0      	blx	r8
 8025576:	3001      	adds	r0, #1
 8025578:	d0aa      	beq.n	80254d0 <_printf_i+0x12c>
 802557a:	6823      	ldr	r3, [r4, #0]
 802557c:	079b      	lsls	r3, r3, #30
 802557e:	d413      	bmi.n	80255a8 <_printf_i+0x204>
 8025580:	68e0      	ldr	r0, [r4, #12]
 8025582:	9b03      	ldr	r3, [sp, #12]
 8025584:	4298      	cmp	r0, r3
 8025586:	bfb8      	it	lt
 8025588:	4618      	movlt	r0, r3
 802558a:	e7a3      	b.n	80254d4 <_printf_i+0x130>
 802558c:	2301      	movs	r3, #1
 802558e:	464a      	mov	r2, r9
 8025590:	4639      	mov	r1, r7
 8025592:	4630      	mov	r0, r6
 8025594:	47c0      	blx	r8
 8025596:	3001      	adds	r0, #1
 8025598:	d09a      	beq.n	80254d0 <_printf_i+0x12c>
 802559a:	3501      	adds	r5, #1
 802559c:	68e3      	ldr	r3, [r4, #12]
 802559e:	9a03      	ldr	r2, [sp, #12]
 80255a0:	1a9b      	subs	r3, r3, r2
 80255a2:	42ab      	cmp	r3, r5
 80255a4:	dcf2      	bgt.n	802558c <_printf_i+0x1e8>
 80255a6:	e7eb      	b.n	8025580 <_printf_i+0x1dc>
 80255a8:	2500      	movs	r5, #0
 80255aa:	f104 0919 	add.w	r9, r4, #25
 80255ae:	e7f5      	b.n	802559c <_printf_i+0x1f8>
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	d1ac      	bne.n	802550e <_printf_i+0x16a>
 80255b4:	7803      	ldrb	r3, [r0, #0]
 80255b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80255ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80255be:	e76c      	b.n	802549a <_printf_i+0xf6>
 80255c0:	08054c01 	.word	0x08054c01
 80255c4:	08054c12 	.word	0x08054c12

080255c8 <iprintf>:
 80255c8:	b40f      	push	{r0, r1, r2, r3}
 80255ca:	4b0a      	ldr	r3, [pc, #40]	; (80255f4 <iprintf+0x2c>)
 80255cc:	b513      	push	{r0, r1, r4, lr}
 80255ce:	681c      	ldr	r4, [r3, #0]
 80255d0:	b124      	cbz	r4, 80255dc <iprintf+0x14>
 80255d2:	69a3      	ldr	r3, [r4, #24]
 80255d4:	b913      	cbnz	r3, 80255dc <iprintf+0x14>
 80255d6:	4620      	mov	r0, r4
 80255d8:	f000 fada 	bl	8025b90 <__sinit>
 80255dc:	ab05      	add	r3, sp, #20
 80255de:	9a04      	ldr	r2, [sp, #16]
 80255e0:	68a1      	ldr	r1, [r4, #8]
 80255e2:	9301      	str	r3, [sp, #4]
 80255e4:	4620      	mov	r0, r4
 80255e6:	f7ff fd51 	bl	802508c <_vfiprintf_r>
 80255ea:	b002      	add	sp, #8
 80255ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80255f0:	b004      	add	sp, #16
 80255f2:	4770      	bx	lr
 80255f4:	200000ac 	.word	0x200000ac

080255f8 <_puts_r>:
 80255f8:	b570      	push	{r4, r5, r6, lr}
 80255fa:	460e      	mov	r6, r1
 80255fc:	4605      	mov	r5, r0
 80255fe:	b118      	cbz	r0, 8025608 <_puts_r+0x10>
 8025600:	6983      	ldr	r3, [r0, #24]
 8025602:	b90b      	cbnz	r3, 8025608 <_puts_r+0x10>
 8025604:	f000 fac4 	bl	8025b90 <__sinit>
 8025608:	69ab      	ldr	r3, [r5, #24]
 802560a:	68ac      	ldr	r4, [r5, #8]
 802560c:	b913      	cbnz	r3, 8025614 <_puts_r+0x1c>
 802560e:	4628      	mov	r0, r5
 8025610:	f000 fabe 	bl	8025b90 <__sinit>
 8025614:	4b23      	ldr	r3, [pc, #140]	; (80256a4 <_puts_r+0xac>)
 8025616:	429c      	cmp	r4, r3
 8025618:	d117      	bne.n	802564a <_puts_r+0x52>
 802561a:	686c      	ldr	r4, [r5, #4]
 802561c:	89a3      	ldrh	r3, [r4, #12]
 802561e:	071b      	lsls	r3, r3, #28
 8025620:	d51d      	bpl.n	802565e <_puts_r+0x66>
 8025622:	6923      	ldr	r3, [r4, #16]
 8025624:	b1db      	cbz	r3, 802565e <_puts_r+0x66>
 8025626:	3e01      	subs	r6, #1
 8025628:	68a3      	ldr	r3, [r4, #8]
 802562a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802562e:	3b01      	subs	r3, #1
 8025630:	60a3      	str	r3, [r4, #8]
 8025632:	b9e9      	cbnz	r1, 8025670 <_puts_r+0x78>
 8025634:	2b00      	cmp	r3, #0
 8025636:	da2e      	bge.n	8025696 <_puts_r+0x9e>
 8025638:	4622      	mov	r2, r4
 802563a:	210a      	movs	r1, #10
 802563c:	4628      	mov	r0, r5
 802563e:	f000 f893 	bl	8025768 <__swbuf_r>
 8025642:	3001      	adds	r0, #1
 8025644:	d011      	beq.n	802566a <_puts_r+0x72>
 8025646:	200a      	movs	r0, #10
 8025648:	e011      	b.n	802566e <_puts_r+0x76>
 802564a:	4b17      	ldr	r3, [pc, #92]	; (80256a8 <_puts_r+0xb0>)
 802564c:	429c      	cmp	r4, r3
 802564e:	d101      	bne.n	8025654 <_puts_r+0x5c>
 8025650:	68ac      	ldr	r4, [r5, #8]
 8025652:	e7e3      	b.n	802561c <_puts_r+0x24>
 8025654:	4b15      	ldr	r3, [pc, #84]	; (80256ac <_puts_r+0xb4>)
 8025656:	429c      	cmp	r4, r3
 8025658:	bf08      	it	eq
 802565a:	68ec      	ldreq	r4, [r5, #12]
 802565c:	e7de      	b.n	802561c <_puts_r+0x24>
 802565e:	4621      	mov	r1, r4
 8025660:	4628      	mov	r0, r5
 8025662:	f000 f8d3 	bl	802580c <__swsetup_r>
 8025666:	2800      	cmp	r0, #0
 8025668:	d0dd      	beq.n	8025626 <_puts_r+0x2e>
 802566a:	f04f 30ff 	mov.w	r0, #4294967295
 802566e:	bd70      	pop	{r4, r5, r6, pc}
 8025670:	2b00      	cmp	r3, #0
 8025672:	da04      	bge.n	802567e <_puts_r+0x86>
 8025674:	69a2      	ldr	r2, [r4, #24]
 8025676:	429a      	cmp	r2, r3
 8025678:	dc06      	bgt.n	8025688 <_puts_r+0x90>
 802567a:	290a      	cmp	r1, #10
 802567c:	d004      	beq.n	8025688 <_puts_r+0x90>
 802567e:	6823      	ldr	r3, [r4, #0]
 8025680:	1c5a      	adds	r2, r3, #1
 8025682:	6022      	str	r2, [r4, #0]
 8025684:	7019      	strb	r1, [r3, #0]
 8025686:	e7cf      	b.n	8025628 <_puts_r+0x30>
 8025688:	4622      	mov	r2, r4
 802568a:	4628      	mov	r0, r5
 802568c:	f000 f86c 	bl	8025768 <__swbuf_r>
 8025690:	3001      	adds	r0, #1
 8025692:	d1c9      	bne.n	8025628 <_puts_r+0x30>
 8025694:	e7e9      	b.n	802566a <_puts_r+0x72>
 8025696:	6823      	ldr	r3, [r4, #0]
 8025698:	200a      	movs	r0, #10
 802569a:	1c5a      	adds	r2, r3, #1
 802569c:	6022      	str	r2, [r4, #0]
 802569e:	7018      	strb	r0, [r3, #0]
 80256a0:	e7e5      	b.n	802566e <_puts_r+0x76>
 80256a2:	bf00      	nop
 80256a4:	08054c48 	.word	0x08054c48
 80256a8:	08054c68 	.word	0x08054c68
 80256ac:	08054c28 	.word	0x08054c28

080256b0 <puts>:
 80256b0:	4b02      	ldr	r3, [pc, #8]	; (80256bc <puts+0xc>)
 80256b2:	4601      	mov	r1, r0
 80256b4:	6818      	ldr	r0, [r3, #0]
 80256b6:	f7ff bf9f 	b.w	80255f8 <_puts_r>
 80256ba:	bf00      	nop
 80256bc:	200000ac 	.word	0x200000ac

080256c0 <_sbrk_r>:
 80256c0:	b538      	push	{r3, r4, r5, lr}
 80256c2:	4c06      	ldr	r4, [pc, #24]	; (80256dc <_sbrk_r+0x1c>)
 80256c4:	2300      	movs	r3, #0
 80256c6:	4605      	mov	r5, r0
 80256c8:	4608      	mov	r0, r1
 80256ca:	6023      	str	r3, [r4, #0]
 80256cc:	f7dc fa6a 	bl	8001ba4 <_sbrk>
 80256d0:	1c43      	adds	r3, r0, #1
 80256d2:	d102      	bne.n	80256da <_sbrk_r+0x1a>
 80256d4:	6823      	ldr	r3, [r4, #0]
 80256d6:	b103      	cbz	r3, 80256da <_sbrk_r+0x1a>
 80256d8:	602b      	str	r3, [r5, #0]
 80256da:	bd38      	pop	{r3, r4, r5, pc}
 80256dc:	20002b18 	.word	0x20002b18

080256e0 <_raise_r>:
 80256e0:	291f      	cmp	r1, #31
 80256e2:	b538      	push	{r3, r4, r5, lr}
 80256e4:	4604      	mov	r4, r0
 80256e6:	460d      	mov	r5, r1
 80256e8:	d904      	bls.n	80256f4 <_raise_r+0x14>
 80256ea:	2316      	movs	r3, #22
 80256ec:	6003      	str	r3, [r0, #0]
 80256ee:	f04f 30ff 	mov.w	r0, #4294967295
 80256f2:	bd38      	pop	{r3, r4, r5, pc}
 80256f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80256f6:	b112      	cbz	r2, 80256fe <_raise_r+0x1e>
 80256f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80256fc:	b94b      	cbnz	r3, 8025712 <_raise_r+0x32>
 80256fe:	4620      	mov	r0, r4
 8025700:	f000 f830 	bl	8025764 <_getpid_r>
 8025704:	462a      	mov	r2, r5
 8025706:	4601      	mov	r1, r0
 8025708:	4620      	mov	r0, r4
 802570a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802570e:	f000 b817 	b.w	8025740 <_kill_r>
 8025712:	2b01      	cmp	r3, #1
 8025714:	d00a      	beq.n	802572c <_raise_r+0x4c>
 8025716:	1c59      	adds	r1, r3, #1
 8025718:	d103      	bne.n	8025722 <_raise_r+0x42>
 802571a:	2316      	movs	r3, #22
 802571c:	6003      	str	r3, [r0, #0]
 802571e:	2001      	movs	r0, #1
 8025720:	e7e7      	b.n	80256f2 <_raise_r+0x12>
 8025722:	2400      	movs	r4, #0
 8025724:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025728:	4628      	mov	r0, r5
 802572a:	4798      	blx	r3
 802572c:	2000      	movs	r0, #0
 802572e:	e7e0      	b.n	80256f2 <_raise_r+0x12>

08025730 <raise>:
 8025730:	4b02      	ldr	r3, [pc, #8]	; (802573c <raise+0xc>)
 8025732:	4601      	mov	r1, r0
 8025734:	6818      	ldr	r0, [r3, #0]
 8025736:	f7ff bfd3 	b.w	80256e0 <_raise_r>
 802573a:	bf00      	nop
 802573c:	200000ac 	.word	0x200000ac

08025740 <_kill_r>:
 8025740:	b538      	push	{r3, r4, r5, lr}
 8025742:	4c07      	ldr	r4, [pc, #28]	; (8025760 <_kill_r+0x20>)
 8025744:	2300      	movs	r3, #0
 8025746:	4605      	mov	r5, r0
 8025748:	4608      	mov	r0, r1
 802574a:	4611      	mov	r1, r2
 802574c:	6023      	str	r3, [r4, #0]
 802574e:	f7dc f9a1 	bl	8001a94 <_kill>
 8025752:	1c43      	adds	r3, r0, #1
 8025754:	d102      	bne.n	802575c <_kill_r+0x1c>
 8025756:	6823      	ldr	r3, [r4, #0]
 8025758:	b103      	cbz	r3, 802575c <_kill_r+0x1c>
 802575a:	602b      	str	r3, [r5, #0]
 802575c:	bd38      	pop	{r3, r4, r5, pc}
 802575e:	bf00      	nop
 8025760:	20002b18 	.word	0x20002b18

08025764 <_getpid_r>:
 8025764:	f7dc b98e 	b.w	8001a84 <_getpid>

08025768 <__swbuf_r>:
 8025768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802576a:	460e      	mov	r6, r1
 802576c:	4614      	mov	r4, r2
 802576e:	4605      	mov	r5, r0
 8025770:	b118      	cbz	r0, 802577a <__swbuf_r+0x12>
 8025772:	6983      	ldr	r3, [r0, #24]
 8025774:	b90b      	cbnz	r3, 802577a <__swbuf_r+0x12>
 8025776:	f000 fa0b 	bl	8025b90 <__sinit>
 802577a:	4b21      	ldr	r3, [pc, #132]	; (8025800 <__swbuf_r+0x98>)
 802577c:	429c      	cmp	r4, r3
 802577e:	d12a      	bne.n	80257d6 <__swbuf_r+0x6e>
 8025780:	686c      	ldr	r4, [r5, #4]
 8025782:	69a3      	ldr	r3, [r4, #24]
 8025784:	60a3      	str	r3, [r4, #8]
 8025786:	89a3      	ldrh	r3, [r4, #12]
 8025788:	071a      	lsls	r2, r3, #28
 802578a:	d52e      	bpl.n	80257ea <__swbuf_r+0x82>
 802578c:	6923      	ldr	r3, [r4, #16]
 802578e:	b363      	cbz	r3, 80257ea <__swbuf_r+0x82>
 8025790:	6923      	ldr	r3, [r4, #16]
 8025792:	6820      	ldr	r0, [r4, #0]
 8025794:	1ac0      	subs	r0, r0, r3
 8025796:	6963      	ldr	r3, [r4, #20]
 8025798:	b2f6      	uxtb	r6, r6
 802579a:	4283      	cmp	r3, r0
 802579c:	4637      	mov	r7, r6
 802579e:	dc04      	bgt.n	80257aa <__swbuf_r+0x42>
 80257a0:	4621      	mov	r1, r4
 80257a2:	4628      	mov	r0, r5
 80257a4:	f000 f98a 	bl	8025abc <_fflush_r>
 80257a8:	bb28      	cbnz	r0, 80257f6 <__swbuf_r+0x8e>
 80257aa:	68a3      	ldr	r3, [r4, #8]
 80257ac:	3b01      	subs	r3, #1
 80257ae:	60a3      	str	r3, [r4, #8]
 80257b0:	6823      	ldr	r3, [r4, #0]
 80257b2:	1c5a      	adds	r2, r3, #1
 80257b4:	6022      	str	r2, [r4, #0]
 80257b6:	701e      	strb	r6, [r3, #0]
 80257b8:	6963      	ldr	r3, [r4, #20]
 80257ba:	3001      	adds	r0, #1
 80257bc:	4283      	cmp	r3, r0
 80257be:	d004      	beq.n	80257ca <__swbuf_r+0x62>
 80257c0:	89a3      	ldrh	r3, [r4, #12]
 80257c2:	07db      	lsls	r3, r3, #31
 80257c4:	d519      	bpl.n	80257fa <__swbuf_r+0x92>
 80257c6:	2e0a      	cmp	r6, #10
 80257c8:	d117      	bne.n	80257fa <__swbuf_r+0x92>
 80257ca:	4621      	mov	r1, r4
 80257cc:	4628      	mov	r0, r5
 80257ce:	f000 f975 	bl	8025abc <_fflush_r>
 80257d2:	b190      	cbz	r0, 80257fa <__swbuf_r+0x92>
 80257d4:	e00f      	b.n	80257f6 <__swbuf_r+0x8e>
 80257d6:	4b0b      	ldr	r3, [pc, #44]	; (8025804 <__swbuf_r+0x9c>)
 80257d8:	429c      	cmp	r4, r3
 80257da:	d101      	bne.n	80257e0 <__swbuf_r+0x78>
 80257dc:	68ac      	ldr	r4, [r5, #8]
 80257de:	e7d0      	b.n	8025782 <__swbuf_r+0x1a>
 80257e0:	4b09      	ldr	r3, [pc, #36]	; (8025808 <__swbuf_r+0xa0>)
 80257e2:	429c      	cmp	r4, r3
 80257e4:	bf08      	it	eq
 80257e6:	68ec      	ldreq	r4, [r5, #12]
 80257e8:	e7cb      	b.n	8025782 <__swbuf_r+0x1a>
 80257ea:	4621      	mov	r1, r4
 80257ec:	4628      	mov	r0, r5
 80257ee:	f000 f80d 	bl	802580c <__swsetup_r>
 80257f2:	2800      	cmp	r0, #0
 80257f4:	d0cc      	beq.n	8025790 <__swbuf_r+0x28>
 80257f6:	f04f 37ff 	mov.w	r7, #4294967295
 80257fa:	4638      	mov	r0, r7
 80257fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80257fe:	bf00      	nop
 8025800:	08054c48 	.word	0x08054c48
 8025804:	08054c68 	.word	0x08054c68
 8025808:	08054c28 	.word	0x08054c28

0802580c <__swsetup_r>:
 802580c:	4b32      	ldr	r3, [pc, #200]	; (80258d8 <__swsetup_r+0xcc>)
 802580e:	b570      	push	{r4, r5, r6, lr}
 8025810:	681d      	ldr	r5, [r3, #0]
 8025812:	4606      	mov	r6, r0
 8025814:	460c      	mov	r4, r1
 8025816:	b125      	cbz	r5, 8025822 <__swsetup_r+0x16>
 8025818:	69ab      	ldr	r3, [r5, #24]
 802581a:	b913      	cbnz	r3, 8025822 <__swsetup_r+0x16>
 802581c:	4628      	mov	r0, r5
 802581e:	f000 f9b7 	bl	8025b90 <__sinit>
 8025822:	4b2e      	ldr	r3, [pc, #184]	; (80258dc <__swsetup_r+0xd0>)
 8025824:	429c      	cmp	r4, r3
 8025826:	d10f      	bne.n	8025848 <__swsetup_r+0x3c>
 8025828:	686c      	ldr	r4, [r5, #4]
 802582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802582e:	b29a      	uxth	r2, r3
 8025830:	0715      	lsls	r5, r2, #28
 8025832:	d42c      	bmi.n	802588e <__swsetup_r+0x82>
 8025834:	06d0      	lsls	r0, r2, #27
 8025836:	d411      	bmi.n	802585c <__swsetup_r+0x50>
 8025838:	2209      	movs	r2, #9
 802583a:	6032      	str	r2, [r6, #0]
 802583c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025840:	81a3      	strh	r3, [r4, #12]
 8025842:	f04f 30ff 	mov.w	r0, #4294967295
 8025846:	e03e      	b.n	80258c6 <__swsetup_r+0xba>
 8025848:	4b25      	ldr	r3, [pc, #148]	; (80258e0 <__swsetup_r+0xd4>)
 802584a:	429c      	cmp	r4, r3
 802584c:	d101      	bne.n	8025852 <__swsetup_r+0x46>
 802584e:	68ac      	ldr	r4, [r5, #8]
 8025850:	e7eb      	b.n	802582a <__swsetup_r+0x1e>
 8025852:	4b24      	ldr	r3, [pc, #144]	; (80258e4 <__swsetup_r+0xd8>)
 8025854:	429c      	cmp	r4, r3
 8025856:	bf08      	it	eq
 8025858:	68ec      	ldreq	r4, [r5, #12]
 802585a:	e7e6      	b.n	802582a <__swsetup_r+0x1e>
 802585c:	0751      	lsls	r1, r2, #29
 802585e:	d512      	bpl.n	8025886 <__swsetup_r+0x7a>
 8025860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025862:	b141      	cbz	r1, 8025876 <__swsetup_r+0x6a>
 8025864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025868:	4299      	cmp	r1, r3
 802586a:	d002      	beq.n	8025872 <__swsetup_r+0x66>
 802586c:	4630      	mov	r0, r6
 802586e:	f7ff fb3b 	bl	8024ee8 <_free_r>
 8025872:	2300      	movs	r3, #0
 8025874:	6363      	str	r3, [r4, #52]	; 0x34
 8025876:	89a3      	ldrh	r3, [r4, #12]
 8025878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802587c:	81a3      	strh	r3, [r4, #12]
 802587e:	2300      	movs	r3, #0
 8025880:	6063      	str	r3, [r4, #4]
 8025882:	6923      	ldr	r3, [r4, #16]
 8025884:	6023      	str	r3, [r4, #0]
 8025886:	89a3      	ldrh	r3, [r4, #12]
 8025888:	f043 0308 	orr.w	r3, r3, #8
 802588c:	81a3      	strh	r3, [r4, #12]
 802588e:	6923      	ldr	r3, [r4, #16]
 8025890:	b94b      	cbnz	r3, 80258a6 <__swsetup_r+0x9a>
 8025892:	89a3      	ldrh	r3, [r4, #12]
 8025894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802589c:	d003      	beq.n	80258a6 <__swsetup_r+0x9a>
 802589e:	4621      	mov	r1, r4
 80258a0:	4630      	mov	r0, r6
 80258a2:	f000 fa23 	bl	8025cec <__smakebuf_r>
 80258a6:	89a2      	ldrh	r2, [r4, #12]
 80258a8:	f012 0301 	ands.w	r3, r2, #1
 80258ac:	d00c      	beq.n	80258c8 <__swsetup_r+0xbc>
 80258ae:	2300      	movs	r3, #0
 80258b0:	60a3      	str	r3, [r4, #8]
 80258b2:	6963      	ldr	r3, [r4, #20]
 80258b4:	425b      	negs	r3, r3
 80258b6:	61a3      	str	r3, [r4, #24]
 80258b8:	6923      	ldr	r3, [r4, #16]
 80258ba:	b953      	cbnz	r3, 80258d2 <__swsetup_r+0xc6>
 80258bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80258c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80258c4:	d1ba      	bne.n	802583c <__swsetup_r+0x30>
 80258c6:	bd70      	pop	{r4, r5, r6, pc}
 80258c8:	0792      	lsls	r2, r2, #30
 80258ca:	bf58      	it	pl
 80258cc:	6963      	ldrpl	r3, [r4, #20]
 80258ce:	60a3      	str	r3, [r4, #8]
 80258d0:	e7f2      	b.n	80258b8 <__swsetup_r+0xac>
 80258d2:	2000      	movs	r0, #0
 80258d4:	e7f7      	b.n	80258c6 <__swsetup_r+0xba>
 80258d6:	bf00      	nop
 80258d8:	200000ac 	.word	0x200000ac
 80258dc:	08054c48 	.word	0x08054c48
 80258e0:	08054c68 	.word	0x08054c68
 80258e4:	08054c28 	.word	0x08054c28

080258e8 <__register_exitproc>:
 80258e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80258ec:	4d2c      	ldr	r5, [pc, #176]	; (80259a0 <__register_exitproc+0xb8>)
 80258ee:	682c      	ldr	r4, [r5, #0]
 80258f0:	4607      	mov	r7, r0
 80258f2:	460e      	mov	r6, r1
 80258f4:	4691      	mov	r9, r2
 80258f6:	4698      	mov	r8, r3
 80258f8:	b934      	cbnz	r4, 8025908 <__register_exitproc+0x20>
 80258fa:	4b2a      	ldr	r3, [pc, #168]	; (80259a4 <__register_exitproc+0xbc>)
 80258fc:	4c2a      	ldr	r4, [pc, #168]	; (80259a8 <__register_exitproc+0xc0>)
 80258fe:	602c      	str	r4, [r5, #0]
 8025900:	b113      	cbz	r3, 8025908 <__register_exitproc+0x20>
 8025902:	681b      	ldr	r3, [r3, #0]
 8025904:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025908:	6863      	ldr	r3, [r4, #4]
 802590a:	2b1f      	cmp	r3, #31
 802590c:	dd3d      	ble.n	802598a <__register_exitproc+0xa2>
 802590e:	4b27      	ldr	r3, [pc, #156]	; (80259ac <__register_exitproc+0xc4>)
 8025910:	b91b      	cbnz	r3, 802591a <__register_exitproc+0x32>
 8025912:	f04f 30ff 	mov.w	r0, #4294967295
 8025916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802591a:	208c      	movs	r0, #140	; 0x8c
 802591c:	f7ff fac0 	bl	8024ea0 <malloc>
 8025920:	4604      	mov	r4, r0
 8025922:	2800      	cmp	r0, #0
 8025924:	d0f5      	beq.n	8025912 <__register_exitproc+0x2a>
 8025926:	2300      	movs	r3, #0
 8025928:	682a      	ldr	r2, [r5, #0]
 802592a:	6002      	str	r2, [r0, #0]
 802592c:	6043      	str	r3, [r0, #4]
 802592e:	6028      	str	r0, [r5, #0]
 8025930:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025934:	b30f      	cbz	r7, 802597a <__register_exitproc+0x92>
 8025936:	f44f 7084 	mov.w	r0, #264	; 0x108
 802593a:	f7ff fab1 	bl	8024ea0 <malloc>
 802593e:	2800      	cmp	r0, #0
 8025940:	d0e7      	beq.n	8025912 <__register_exitproc+0x2a>
 8025942:	2300      	movs	r3, #0
 8025944:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025948:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802594c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025950:	6862      	ldr	r2, [r4, #4]
 8025952:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8025956:	2301      	movs	r3, #1
 8025958:	4093      	lsls	r3, r2
 802595a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802595e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025962:	431a      	orrs	r2, r3
 8025964:	2f02      	cmp	r7, #2
 8025966:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802596a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802596e:	bf02      	ittt	eq
 8025970:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025974:	4313      	orreq	r3, r2
 8025976:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802597a:	6863      	ldr	r3, [r4, #4]
 802597c:	1c5a      	adds	r2, r3, #1
 802597e:	3302      	adds	r3, #2
 8025980:	6062      	str	r2, [r4, #4]
 8025982:	2000      	movs	r0, #0
 8025984:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025988:	e7c5      	b.n	8025916 <__register_exitproc+0x2e>
 802598a:	2f00      	cmp	r7, #0
 802598c:	d0f5      	beq.n	802597a <__register_exitproc+0x92>
 802598e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025992:	2800      	cmp	r0, #0
 8025994:	d1dc      	bne.n	8025950 <__register_exitproc+0x68>
 8025996:	4b05      	ldr	r3, [pc, #20]	; (80259ac <__register_exitproc+0xc4>)
 8025998:	2b00      	cmp	r3, #0
 802599a:	d0ba      	beq.n	8025912 <__register_exitproc+0x2a>
 802599c:	e7cb      	b.n	8025936 <__register_exitproc+0x4e>
 802599e:	bf00      	nop
 80259a0:	2000160c 	.word	0x2000160c
 80259a4:	08054c24 	.word	0x08054c24
 80259a8:	20001580 	.word	0x20001580
 80259ac:	08024ea1 	.word	0x08024ea1

080259b0 <__sflush_r>:
 80259b0:	898a      	ldrh	r2, [r1, #12]
 80259b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259b6:	4605      	mov	r5, r0
 80259b8:	0710      	lsls	r0, r2, #28
 80259ba:	460c      	mov	r4, r1
 80259bc:	d458      	bmi.n	8025a70 <__sflush_r+0xc0>
 80259be:	684b      	ldr	r3, [r1, #4]
 80259c0:	2b00      	cmp	r3, #0
 80259c2:	dc05      	bgt.n	80259d0 <__sflush_r+0x20>
 80259c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	dc02      	bgt.n	80259d0 <__sflush_r+0x20>
 80259ca:	2000      	movs	r0, #0
 80259cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80259d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80259d2:	2e00      	cmp	r6, #0
 80259d4:	d0f9      	beq.n	80259ca <__sflush_r+0x1a>
 80259d6:	2300      	movs	r3, #0
 80259d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80259dc:	682f      	ldr	r7, [r5, #0]
 80259de:	6a21      	ldr	r1, [r4, #32]
 80259e0:	602b      	str	r3, [r5, #0]
 80259e2:	d032      	beq.n	8025a4a <__sflush_r+0x9a>
 80259e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80259e6:	89a3      	ldrh	r3, [r4, #12]
 80259e8:	075a      	lsls	r2, r3, #29
 80259ea:	d505      	bpl.n	80259f8 <__sflush_r+0x48>
 80259ec:	6863      	ldr	r3, [r4, #4]
 80259ee:	1ac0      	subs	r0, r0, r3
 80259f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80259f2:	b10b      	cbz	r3, 80259f8 <__sflush_r+0x48>
 80259f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80259f6:	1ac0      	subs	r0, r0, r3
 80259f8:	2300      	movs	r3, #0
 80259fa:	4602      	mov	r2, r0
 80259fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80259fe:	6a21      	ldr	r1, [r4, #32]
 8025a00:	4628      	mov	r0, r5
 8025a02:	47b0      	blx	r6
 8025a04:	1c43      	adds	r3, r0, #1
 8025a06:	89a3      	ldrh	r3, [r4, #12]
 8025a08:	d106      	bne.n	8025a18 <__sflush_r+0x68>
 8025a0a:	6829      	ldr	r1, [r5, #0]
 8025a0c:	291d      	cmp	r1, #29
 8025a0e:	d848      	bhi.n	8025aa2 <__sflush_r+0xf2>
 8025a10:	4a29      	ldr	r2, [pc, #164]	; (8025ab8 <__sflush_r+0x108>)
 8025a12:	40ca      	lsrs	r2, r1
 8025a14:	07d6      	lsls	r6, r2, #31
 8025a16:	d544      	bpl.n	8025aa2 <__sflush_r+0xf2>
 8025a18:	2200      	movs	r2, #0
 8025a1a:	6062      	str	r2, [r4, #4]
 8025a1c:	04d9      	lsls	r1, r3, #19
 8025a1e:	6922      	ldr	r2, [r4, #16]
 8025a20:	6022      	str	r2, [r4, #0]
 8025a22:	d504      	bpl.n	8025a2e <__sflush_r+0x7e>
 8025a24:	1c42      	adds	r2, r0, #1
 8025a26:	d101      	bne.n	8025a2c <__sflush_r+0x7c>
 8025a28:	682b      	ldr	r3, [r5, #0]
 8025a2a:	b903      	cbnz	r3, 8025a2e <__sflush_r+0x7e>
 8025a2c:	6560      	str	r0, [r4, #84]	; 0x54
 8025a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025a30:	602f      	str	r7, [r5, #0]
 8025a32:	2900      	cmp	r1, #0
 8025a34:	d0c9      	beq.n	80259ca <__sflush_r+0x1a>
 8025a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025a3a:	4299      	cmp	r1, r3
 8025a3c:	d002      	beq.n	8025a44 <__sflush_r+0x94>
 8025a3e:	4628      	mov	r0, r5
 8025a40:	f7ff fa52 	bl	8024ee8 <_free_r>
 8025a44:	2000      	movs	r0, #0
 8025a46:	6360      	str	r0, [r4, #52]	; 0x34
 8025a48:	e7c0      	b.n	80259cc <__sflush_r+0x1c>
 8025a4a:	2301      	movs	r3, #1
 8025a4c:	4628      	mov	r0, r5
 8025a4e:	47b0      	blx	r6
 8025a50:	1c41      	adds	r1, r0, #1
 8025a52:	d1c8      	bne.n	80259e6 <__sflush_r+0x36>
 8025a54:	682b      	ldr	r3, [r5, #0]
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	d0c5      	beq.n	80259e6 <__sflush_r+0x36>
 8025a5a:	2b1d      	cmp	r3, #29
 8025a5c:	d001      	beq.n	8025a62 <__sflush_r+0xb2>
 8025a5e:	2b16      	cmp	r3, #22
 8025a60:	d101      	bne.n	8025a66 <__sflush_r+0xb6>
 8025a62:	602f      	str	r7, [r5, #0]
 8025a64:	e7b1      	b.n	80259ca <__sflush_r+0x1a>
 8025a66:	89a3      	ldrh	r3, [r4, #12]
 8025a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025a6c:	81a3      	strh	r3, [r4, #12]
 8025a6e:	e7ad      	b.n	80259cc <__sflush_r+0x1c>
 8025a70:	690f      	ldr	r7, [r1, #16]
 8025a72:	2f00      	cmp	r7, #0
 8025a74:	d0a9      	beq.n	80259ca <__sflush_r+0x1a>
 8025a76:	0793      	lsls	r3, r2, #30
 8025a78:	680e      	ldr	r6, [r1, #0]
 8025a7a:	bf08      	it	eq
 8025a7c:	694b      	ldreq	r3, [r1, #20]
 8025a7e:	600f      	str	r7, [r1, #0]
 8025a80:	bf18      	it	ne
 8025a82:	2300      	movne	r3, #0
 8025a84:	eba6 0807 	sub.w	r8, r6, r7
 8025a88:	608b      	str	r3, [r1, #8]
 8025a8a:	f1b8 0f00 	cmp.w	r8, #0
 8025a8e:	dd9c      	ble.n	80259ca <__sflush_r+0x1a>
 8025a90:	4643      	mov	r3, r8
 8025a92:	463a      	mov	r2, r7
 8025a94:	6a21      	ldr	r1, [r4, #32]
 8025a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025a98:	4628      	mov	r0, r5
 8025a9a:	47b0      	blx	r6
 8025a9c:	2800      	cmp	r0, #0
 8025a9e:	dc06      	bgt.n	8025aae <__sflush_r+0xfe>
 8025aa0:	89a3      	ldrh	r3, [r4, #12]
 8025aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025aa6:	81a3      	strh	r3, [r4, #12]
 8025aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8025aac:	e78e      	b.n	80259cc <__sflush_r+0x1c>
 8025aae:	4407      	add	r7, r0
 8025ab0:	eba8 0800 	sub.w	r8, r8, r0
 8025ab4:	e7e9      	b.n	8025a8a <__sflush_r+0xda>
 8025ab6:	bf00      	nop
 8025ab8:	20400001 	.word	0x20400001

08025abc <_fflush_r>:
 8025abc:	b538      	push	{r3, r4, r5, lr}
 8025abe:	690b      	ldr	r3, [r1, #16]
 8025ac0:	4605      	mov	r5, r0
 8025ac2:	460c      	mov	r4, r1
 8025ac4:	b1db      	cbz	r3, 8025afe <_fflush_r+0x42>
 8025ac6:	b118      	cbz	r0, 8025ad0 <_fflush_r+0x14>
 8025ac8:	6983      	ldr	r3, [r0, #24]
 8025aca:	b90b      	cbnz	r3, 8025ad0 <_fflush_r+0x14>
 8025acc:	f000 f860 	bl	8025b90 <__sinit>
 8025ad0:	4b0c      	ldr	r3, [pc, #48]	; (8025b04 <_fflush_r+0x48>)
 8025ad2:	429c      	cmp	r4, r3
 8025ad4:	d109      	bne.n	8025aea <_fflush_r+0x2e>
 8025ad6:	686c      	ldr	r4, [r5, #4]
 8025ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025adc:	b17b      	cbz	r3, 8025afe <_fflush_r+0x42>
 8025ade:	4621      	mov	r1, r4
 8025ae0:	4628      	mov	r0, r5
 8025ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ae6:	f7ff bf63 	b.w	80259b0 <__sflush_r>
 8025aea:	4b07      	ldr	r3, [pc, #28]	; (8025b08 <_fflush_r+0x4c>)
 8025aec:	429c      	cmp	r4, r3
 8025aee:	d101      	bne.n	8025af4 <_fflush_r+0x38>
 8025af0:	68ac      	ldr	r4, [r5, #8]
 8025af2:	e7f1      	b.n	8025ad8 <_fflush_r+0x1c>
 8025af4:	4b05      	ldr	r3, [pc, #20]	; (8025b0c <_fflush_r+0x50>)
 8025af6:	429c      	cmp	r4, r3
 8025af8:	bf08      	it	eq
 8025afa:	68ec      	ldreq	r4, [r5, #12]
 8025afc:	e7ec      	b.n	8025ad8 <_fflush_r+0x1c>
 8025afe:	2000      	movs	r0, #0
 8025b00:	bd38      	pop	{r3, r4, r5, pc}
 8025b02:	bf00      	nop
 8025b04:	08054c48 	.word	0x08054c48
 8025b08:	08054c68 	.word	0x08054c68
 8025b0c:	08054c28 	.word	0x08054c28

08025b10 <std>:
 8025b10:	2300      	movs	r3, #0
 8025b12:	b510      	push	{r4, lr}
 8025b14:	4604      	mov	r4, r0
 8025b16:	e9c0 3300 	strd	r3, r3, [r0]
 8025b1a:	6083      	str	r3, [r0, #8]
 8025b1c:	8181      	strh	r1, [r0, #12]
 8025b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8025b20:	81c2      	strh	r2, [r0, #14]
 8025b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025b26:	6183      	str	r3, [r0, #24]
 8025b28:	4619      	mov	r1, r3
 8025b2a:	2208      	movs	r2, #8
 8025b2c:	305c      	adds	r0, #92	; 0x5c
 8025b2e:	f7ff f9d2 	bl	8024ed6 <memset>
 8025b32:	4b05      	ldr	r3, [pc, #20]	; (8025b48 <std+0x38>)
 8025b34:	6263      	str	r3, [r4, #36]	; 0x24
 8025b36:	4b05      	ldr	r3, [pc, #20]	; (8025b4c <std+0x3c>)
 8025b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8025b3a:	4b05      	ldr	r3, [pc, #20]	; (8025b50 <std+0x40>)
 8025b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025b3e:	4b05      	ldr	r3, [pc, #20]	; (8025b54 <std+0x44>)
 8025b40:	6224      	str	r4, [r4, #32]
 8025b42:	6323      	str	r3, [r4, #48]	; 0x30
 8025b44:	bd10      	pop	{r4, pc}
 8025b46:	bf00      	nop
 8025b48:	08025d71 	.word	0x08025d71
 8025b4c:	08025d93 	.word	0x08025d93
 8025b50:	08025dcb 	.word	0x08025dcb
 8025b54:	08025def 	.word	0x08025def

08025b58 <_cleanup_r>:
 8025b58:	4901      	ldr	r1, [pc, #4]	; (8025b60 <_cleanup_r+0x8>)
 8025b5a:	f000 b885 	b.w	8025c68 <_fwalk_reent>
 8025b5e:	bf00      	nop
 8025b60:	08025abd 	.word	0x08025abd

08025b64 <__sfmoreglue>:
 8025b64:	b570      	push	{r4, r5, r6, lr}
 8025b66:	1e4a      	subs	r2, r1, #1
 8025b68:	2568      	movs	r5, #104	; 0x68
 8025b6a:	4355      	muls	r5, r2
 8025b6c:	460e      	mov	r6, r1
 8025b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025b72:	f7ff fa07 	bl	8024f84 <_malloc_r>
 8025b76:	4604      	mov	r4, r0
 8025b78:	b140      	cbz	r0, 8025b8c <__sfmoreglue+0x28>
 8025b7a:	2100      	movs	r1, #0
 8025b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8025b80:	300c      	adds	r0, #12
 8025b82:	60a0      	str	r0, [r4, #8]
 8025b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025b88:	f7ff f9a5 	bl	8024ed6 <memset>
 8025b8c:	4620      	mov	r0, r4
 8025b8e:	bd70      	pop	{r4, r5, r6, pc}

08025b90 <__sinit>:
 8025b90:	6983      	ldr	r3, [r0, #24]
 8025b92:	b510      	push	{r4, lr}
 8025b94:	4604      	mov	r4, r0
 8025b96:	bb33      	cbnz	r3, 8025be6 <__sinit+0x56>
 8025b98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025b9c:	6503      	str	r3, [r0, #80]	; 0x50
 8025b9e:	4b12      	ldr	r3, [pc, #72]	; (8025be8 <__sinit+0x58>)
 8025ba0:	4a12      	ldr	r2, [pc, #72]	; (8025bec <__sinit+0x5c>)
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	6282      	str	r2, [r0, #40]	; 0x28
 8025ba6:	4298      	cmp	r0, r3
 8025ba8:	bf04      	itt	eq
 8025baa:	2301      	moveq	r3, #1
 8025bac:	6183      	streq	r3, [r0, #24]
 8025bae:	f000 f81f 	bl	8025bf0 <__sfp>
 8025bb2:	6060      	str	r0, [r4, #4]
 8025bb4:	4620      	mov	r0, r4
 8025bb6:	f000 f81b 	bl	8025bf0 <__sfp>
 8025bba:	60a0      	str	r0, [r4, #8]
 8025bbc:	4620      	mov	r0, r4
 8025bbe:	f000 f817 	bl	8025bf0 <__sfp>
 8025bc2:	2200      	movs	r2, #0
 8025bc4:	60e0      	str	r0, [r4, #12]
 8025bc6:	2104      	movs	r1, #4
 8025bc8:	6860      	ldr	r0, [r4, #4]
 8025bca:	f7ff ffa1 	bl	8025b10 <std>
 8025bce:	2201      	movs	r2, #1
 8025bd0:	2109      	movs	r1, #9
 8025bd2:	68a0      	ldr	r0, [r4, #8]
 8025bd4:	f7ff ff9c 	bl	8025b10 <std>
 8025bd8:	2202      	movs	r2, #2
 8025bda:	2112      	movs	r1, #18
 8025bdc:	68e0      	ldr	r0, [r4, #12]
 8025bde:	f7ff ff97 	bl	8025b10 <std>
 8025be2:	2301      	movs	r3, #1
 8025be4:	61a3      	str	r3, [r4, #24]
 8025be6:	bd10      	pop	{r4, pc}
 8025be8:	08054bec 	.word	0x08054bec
 8025bec:	08025b59 	.word	0x08025b59

08025bf0 <__sfp>:
 8025bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bf2:	4b1b      	ldr	r3, [pc, #108]	; (8025c60 <__sfp+0x70>)
 8025bf4:	681e      	ldr	r6, [r3, #0]
 8025bf6:	69b3      	ldr	r3, [r6, #24]
 8025bf8:	4607      	mov	r7, r0
 8025bfa:	b913      	cbnz	r3, 8025c02 <__sfp+0x12>
 8025bfc:	4630      	mov	r0, r6
 8025bfe:	f7ff ffc7 	bl	8025b90 <__sinit>
 8025c02:	3648      	adds	r6, #72	; 0x48
 8025c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025c08:	3b01      	subs	r3, #1
 8025c0a:	d503      	bpl.n	8025c14 <__sfp+0x24>
 8025c0c:	6833      	ldr	r3, [r6, #0]
 8025c0e:	b133      	cbz	r3, 8025c1e <__sfp+0x2e>
 8025c10:	6836      	ldr	r6, [r6, #0]
 8025c12:	e7f7      	b.n	8025c04 <__sfp+0x14>
 8025c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025c18:	b16d      	cbz	r5, 8025c36 <__sfp+0x46>
 8025c1a:	3468      	adds	r4, #104	; 0x68
 8025c1c:	e7f4      	b.n	8025c08 <__sfp+0x18>
 8025c1e:	2104      	movs	r1, #4
 8025c20:	4638      	mov	r0, r7
 8025c22:	f7ff ff9f 	bl	8025b64 <__sfmoreglue>
 8025c26:	6030      	str	r0, [r6, #0]
 8025c28:	2800      	cmp	r0, #0
 8025c2a:	d1f1      	bne.n	8025c10 <__sfp+0x20>
 8025c2c:	230c      	movs	r3, #12
 8025c2e:	603b      	str	r3, [r7, #0]
 8025c30:	4604      	mov	r4, r0
 8025c32:	4620      	mov	r0, r4
 8025c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c36:	4b0b      	ldr	r3, [pc, #44]	; (8025c64 <__sfp+0x74>)
 8025c38:	6665      	str	r5, [r4, #100]	; 0x64
 8025c3a:	e9c4 5500 	strd	r5, r5, [r4]
 8025c3e:	60a5      	str	r5, [r4, #8]
 8025c40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025c44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025c48:	2208      	movs	r2, #8
 8025c4a:	4629      	mov	r1, r5
 8025c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025c50:	f7ff f941 	bl	8024ed6 <memset>
 8025c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025c5c:	e7e9      	b.n	8025c32 <__sfp+0x42>
 8025c5e:	bf00      	nop
 8025c60:	08054bec 	.word	0x08054bec
 8025c64:	ffff0001 	.word	0xffff0001

08025c68 <_fwalk_reent>:
 8025c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c6c:	4680      	mov	r8, r0
 8025c6e:	4689      	mov	r9, r1
 8025c70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025c74:	2600      	movs	r6, #0
 8025c76:	b914      	cbnz	r4, 8025c7e <_fwalk_reent+0x16>
 8025c78:	4630      	mov	r0, r6
 8025c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025c82:	3f01      	subs	r7, #1
 8025c84:	d501      	bpl.n	8025c8a <_fwalk_reent+0x22>
 8025c86:	6824      	ldr	r4, [r4, #0]
 8025c88:	e7f5      	b.n	8025c76 <_fwalk_reent+0xe>
 8025c8a:	89ab      	ldrh	r3, [r5, #12]
 8025c8c:	2b01      	cmp	r3, #1
 8025c8e:	d907      	bls.n	8025ca0 <_fwalk_reent+0x38>
 8025c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025c94:	3301      	adds	r3, #1
 8025c96:	d003      	beq.n	8025ca0 <_fwalk_reent+0x38>
 8025c98:	4629      	mov	r1, r5
 8025c9a:	4640      	mov	r0, r8
 8025c9c:	47c8      	blx	r9
 8025c9e:	4306      	orrs	r6, r0
 8025ca0:	3568      	adds	r5, #104	; 0x68
 8025ca2:	e7ee      	b.n	8025c82 <_fwalk_reent+0x1a>

08025ca4 <__swhatbuf_r>:
 8025ca4:	b570      	push	{r4, r5, r6, lr}
 8025ca6:	460e      	mov	r6, r1
 8025ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cac:	2900      	cmp	r1, #0
 8025cae:	b096      	sub	sp, #88	; 0x58
 8025cb0:	4614      	mov	r4, r2
 8025cb2:	461d      	mov	r5, r3
 8025cb4:	da07      	bge.n	8025cc6 <__swhatbuf_r+0x22>
 8025cb6:	2300      	movs	r3, #0
 8025cb8:	602b      	str	r3, [r5, #0]
 8025cba:	89b3      	ldrh	r3, [r6, #12]
 8025cbc:	061a      	lsls	r2, r3, #24
 8025cbe:	d410      	bmi.n	8025ce2 <__swhatbuf_r+0x3e>
 8025cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025cc4:	e00e      	b.n	8025ce4 <__swhatbuf_r+0x40>
 8025cc6:	466a      	mov	r2, sp
 8025cc8:	f000 f8b8 	bl	8025e3c <_fstat_r>
 8025ccc:	2800      	cmp	r0, #0
 8025cce:	dbf2      	blt.n	8025cb6 <__swhatbuf_r+0x12>
 8025cd0:	9a01      	ldr	r2, [sp, #4]
 8025cd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025cd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025cda:	425a      	negs	r2, r3
 8025cdc:	415a      	adcs	r2, r3
 8025cde:	602a      	str	r2, [r5, #0]
 8025ce0:	e7ee      	b.n	8025cc0 <__swhatbuf_r+0x1c>
 8025ce2:	2340      	movs	r3, #64	; 0x40
 8025ce4:	2000      	movs	r0, #0
 8025ce6:	6023      	str	r3, [r4, #0]
 8025ce8:	b016      	add	sp, #88	; 0x58
 8025cea:	bd70      	pop	{r4, r5, r6, pc}

08025cec <__smakebuf_r>:
 8025cec:	898b      	ldrh	r3, [r1, #12]
 8025cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025cf0:	079d      	lsls	r5, r3, #30
 8025cf2:	4606      	mov	r6, r0
 8025cf4:	460c      	mov	r4, r1
 8025cf6:	d507      	bpl.n	8025d08 <__smakebuf_r+0x1c>
 8025cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025cfc:	6023      	str	r3, [r4, #0]
 8025cfe:	6123      	str	r3, [r4, #16]
 8025d00:	2301      	movs	r3, #1
 8025d02:	6163      	str	r3, [r4, #20]
 8025d04:	b002      	add	sp, #8
 8025d06:	bd70      	pop	{r4, r5, r6, pc}
 8025d08:	ab01      	add	r3, sp, #4
 8025d0a:	466a      	mov	r2, sp
 8025d0c:	f7ff ffca 	bl	8025ca4 <__swhatbuf_r>
 8025d10:	9900      	ldr	r1, [sp, #0]
 8025d12:	4605      	mov	r5, r0
 8025d14:	4630      	mov	r0, r6
 8025d16:	f7ff f935 	bl	8024f84 <_malloc_r>
 8025d1a:	b948      	cbnz	r0, 8025d30 <__smakebuf_r+0x44>
 8025d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d20:	059a      	lsls	r2, r3, #22
 8025d22:	d4ef      	bmi.n	8025d04 <__smakebuf_r+0x18>
 8025d24:	f023 0303 	bic.w	r3, r3, #3
 8025d28:	f043 0302 	orr.w	r3, r3, #2
 8025d2c:	81a3      	strh	r3, [r4, #12]
 8025d2e:	e7e3      	b.n	8025cf8 <__smakebuf_r+0xc>
 8025d30:	4b0d      	ldr	r3, [pc, #52]	; (8025d68 <__smakebuf_r+0x7c>)
 8025d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8025d34:	89a3      	ldrh	r3, [r4, #12]
 8025d36:	6020      	str	r0, [r4, #0]
 8025d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025d3c:	81a3      	strh	r3, [r4, #12]
 8025d3e:	9b00      	ldr	r3, [sp, #0]
 8025d40:	6163      	str	r3, [r4, #20]
 8025d42:	9b01      	ldr	r3, [sp, #4]
 8025d44:	6120      	str	r0, [r4, #16]
 8025d46:	b15b      	cbz	r3, 8025d60 <__smakebuf_r+0x74>
 8025d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d4c:	4630      	mov	r0, r6
 8025d4e:	f000 f887 	bl	8025e60 <_isatty_r>
 8025d52:	b128      	cbz	r0, 8025d60 <__smakebuf_r+0x74>
 8025d54:	89a3      	ldrh	r3, [r4, #12]
 8025d56:	f023 0303 	bic.w	r3, r3, #3
 8025d5a:	f043 0301 	orr.w	r3, r3, #1
 8025d5e:	81a3      	strh	r3, [r4, #12]
 8025d60:	89a3      	ldrh	r3, [r4, #12]
 8025d62:	431d      	orrs	r5, r3
 8025d64:	81a5      	strh	r5, [r4, #12]
 8025d66:	e7cd      	b.n	8025d04 <__smakebuf_r+0x18>
 8025d68:	08025b59 	.word	0x08025b59

08025d6c <__malloc_lock>:
 8025d6c:	4770      	bx	lr

08025d6e <__malloc_unlock>:
 8025d6e:	4770      	bx	lr

08025d70 <__sread>:
 8025d70:	b510      	push	{r4, lr}
 8025d72:	460c      	mov	r4, r1
 8025d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025d78:	f000 f894 	bl	8025ea4 <_read_r>
 8025d7c:	2800      	cmp	r0, #0
 8025d7e:	bfab      	itete	ge
 8025d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025d82:	89a3      	ldrhlt	r3, [r4, #12]
 8025d84:	181b      	addge	r3, r3, r0
 8025d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025d8a:	bfac      	ite	ge
 8025d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8025d8e:	81a3      	strhlt	r3, [r4, #12]
 8025d90:	bd10      	pop	{r4, pc}

08025d92 <__swrite>:
 8025d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d96:	461f      	mov	r7, r3
 8025d98:	898b      	ldrh	r3, [r1, #12]
 8025d9a:	05db      	lsls	r3, r3, #23
 8025d9c:	4605      	mov	r5, r0
 8025d9e:	460c      	mov	r4, r1
 8025da0:	4616      	mov	r6, r2
 8025da2:	d505      	bpl.n	8025db0 <__swrite+0x1e>
 8025da4:	2302      	movs	r3, #2
 8025da6:	2200      	movs	r2, #0
 8025da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dac:	f000 f868 	bl	8025e80 <_lseek_r>
 8025db0:	89a3      	ldrh	r3, [r4, #12]
 8025db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025dba:	81a3      	strh	r3, [r4, #12]
 8025dbc:	4632      	mov	r2, r6
 8025dbe:	463b      	mov	r3, r7
 8025dc0:	4628      	mov	r0, r5
 8025dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025dc6:	f000 b817 	b.w	8025df8 <_write_r>

08025dca <__sseek>:
 8025dca:	b510      	push	{r4, lr}
 8025dcc:	460c      	mov	r4, r1
 8025dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dd2:	f000 f855 	bl	8025e80 <_lseek_r>
 8025dd6:	1c43      	adds	r3, r0, #1
 8025dd8:	89a3      	ldrh	r3, [r4, #12]
 8025dda:	bf15      	itete	ne
 8025ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8025dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025de6:	81a3      	strheq	r3, [r4, #12]
 8025de8:	bf18      	it	ne
 8025dea:	81a3      	strhne	r3, [r4, #12]
 8025dec:	bd10      	pop	{r4, pc}

08025dee <__sclose>:
 8025dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025df2:	f000 b813 	b.w	8025e1c <_close_r>
	...

08025df8 <_write_r>:
 8025df8:	b538      	push	{r3, r4, r5, lr}
 8025dfa:	4c07      	ldr	r4, [pc, #28]	; (8025e18 <_write_r+0x20>)
 8025dfc:	4605      	mov	r5, r0
 8025dfe:	4608      	mov	r0, r1
 8025e00:	4611      	mov	r1, r2
 8025e02:	2200      	movs	r2, #0
 8025e04:	6022      	str	r2, [r4, #0]
 8025e06:	461a      	mov	r2, r3
 8025e08:	f7db fe7b 	bl	8001b02 <_write>
 8025e0c:	1c43      	adds	r3, r0, #1
 8025e0e:	d102      	bne.n	8025e16 <_write_r+0x1e>
 8025e10:	6823      	ldr	r3, [r4, #0]
 8025e12:	b103      	cbz	r3, 8025e16 <_write_r+0x1e>
 8025e14:	602b      	str	r3, [r5, #0]
 8025e16:	bd38      	pop	{r3, r4, r5, pc}
 8025e18:	20002b18 	.word	0x20002b18

08025e1c <_close_r>:
 8025e1c:	b538      	push	{r3, r4, r5, lr}
 8025e1e:	4c06      	ldr	r4, [pc, #24]	; (8025e38 <_close_r+0x1c>)
 8025e20:	2300      	movs	r3, #0
 8025e22:	4605      	mov	r5, r0
 8025e24:	4608      	mov	r0, r1
 8025e26:	6023      	str	r3, [r4, #0]
 8025e28:	f7db fe87 	bl	8001b3a <_close>
 8025e2c:	1c43      	adds	r3, r0, #1
 8025e2e:	d102      	bne.n	8025e36 <_close_r+0x1a>
 8025e30:	6823      	ldr	r3, [r4, #0]
 8025e32:	b103      	cbz	r3, 8025e36 <_close_r+0x1a>
 8025e34:	602b      	str	r3, [r5, #0]
 8025e36:	bd38      	pop	{r3, r4, r5, pc}
 8025e38:	20002b18 	.word	0x20002b18

08025e3c <_fstat_r>:
 8025e3c:	b538      	push	{r3, r4, r5, lr}
 8025e3e:	4c07      	ldr	r4, [pc, #28]	; (8025e5c <_fstat_r+0x20>)
 8025e40:	2300      	movs	r3, #0
 8025e42:	4605      	mov	r5, r0
 8025e44:	4608      	mov	r0, r1
 8025e46:	4611      	mov	r1, r2
 8025e48:	6023      	str	r3, [r4, #0]
 8025e4a:	f7db fe82 	bl	8001b52 <_fstat>
 8025e4e:	1c43      	adds	r3, r0, #1
 8025e50:	d102      	bne.n	8025e58 <_fstat_r+0x1c>
 8025e52:	6823      	ldr	r3, [r4, #0]
 8025e54:	b103      	cbz	r3, 8025e58 <_fstat_r+0x1c>
 8025e56:	602b      	str	r3, [r5, #0]
 8025e58:	bd38      	pop	{r3, r4, r5, pc}
 8025e5a:	bf00      	nop
 8025e5c:	20002b18 	.word	0x20002b18

08025e60 <_isatty_r>:
 8025e60:	b538      	push	{r3, r4, r5, lr}
 8025e62:	4c06      	ldr	r4, [pc, #24]	; (8025e7c <_isatty_r+0x1c>)
 8025e64:	2300      	movs	r3, #0
 8025e66:	4605      	mov	r5, r0
 8025e68:	4608      	mov	r0, r1
 8025e6a:	6023      	str	r3, [r4, #0]
 8025e6c:	f7db fe81 	bl	8001b72 <_isatty>
 8025e70:	1c43      	adds	r3, r0, #1
 8025e72:	d102      	bne.n	8025e7a <_isatty_r+0x1a>
 8025e74:	6823      	ldr	r3, [r4, #0]
 8025e76:	b103      	cbz	r3, 8025e7a <_isatty_r+0x1a>
 8025e78:	602b      	str	r3, [r5, #0]
 8025e7a:	bd38      	pop	{r3, r4, r5, pc}
 8025e7c:	20002b18 	.word	0x20002b18

08025e80 <_lseek_r>:
 8025e80:	b538      	push	{r3, r4, r5, lr}
 8025e82:	4c07      	ldr	r4, [pc, #28]	; (8025ea0 <_lseek_r+0x20>)
 8025e84:	4605      	mov	r5, r0
 8025e86:	4608      	mov	r0, r1
 8025e88:	4611      	mov	r1, r2
 8025e8a:	2200      	movs	r2, #0
 8025e8c:	6022      	str	r2, [r4, #0]
 8025e8e:	461a      	mov	r2, r3
 8025e90:	f7db fe7a 	bl	8001b88 <_lseek>
 8025e94:	1c43      	adds	r3, r0, #1
 8025e96:	d102      	bne.n	8025e9e <_lseek_r+0x1e>
 8025e98:	6823      	ldr	r3, [r4, #0]
 8025e9a:	b103      	cbz	r3, 8025e9e <_lseek_r+0x1e>
 8025e9c:	602b      	str	r3, [r5, #0]
 8025e9e:	bd38      	pop	{r3, r4, r5, pc}
 8025ea0:	20002b18 	.word	0x20002b18

08025ea4 <_read_r>:
 8025ea4:	b538      	push	{r3, r4, r5, lr}
 8025ea6:	4c07      	ldr	r4, [pc, #28]	; (8025ec4 <_read_r+0x20>)
 8025ea8:	4605      	mov	r5, r0
 8025eaa:	4608      	mov	r0, r1
 8025eac:	4611      	mov	r1, r2
 8025eae:	2200      	movs	r2, #0
 8025eb0:	6022      	str	r2, [r4, #0]
 8025eb2:	461a      	mov	r2, r3
 8025eb4:	f7db fe08 	bl	8001ac8 <_read>
 8025eb8:	1c43      	adds	r3, r0, #1
 8025eba:	d102      	bne.n	8025ec2 <_read_r+0x1e>
 8025ebc:	6823      	ldr	r3, [r4, #0]
 8025ebe:	b103      	cbz	r3, 8025ec2 <_read_r+0x1e>
 8025ec0:	602b      	str	r3, [r5, #0]
 8025ec2:	bd38      	pop	{r3, r4, r5, pc}
 8025ec4:	20002b18 	.word	0x20002b18

08025ec8 <_init>:
 8025ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025eca:	bf00      	nop
 8025ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025ece:	bc08      	pop	{r3}
 8025ed0:	469e      	mov	lr, r3
 8025ed2:	4770      	bx	lr

08025ed4 <_fini>:
 8025ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ed6:	bf00      	nop
 8025ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025eda:	bc08      	pop	{r3}
 8025edc:	469e      	mov	lr, r3
 8025ede:	4770      	bx	lr

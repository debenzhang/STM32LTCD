
TestSDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003420  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080035f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080035f8  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234f  00000000  00000000  0002f41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024b8d  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c76e  00000000  00000000  00057d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc2e7  00000000  00000000  000644a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014078a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  00140808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080035b4 	.word	0x080035b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080035b4 	.word	0x080035b4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_FMC_Init+0x98>)
 8000506:	4a20      	ldr	r2, [pc, #128]	; (8000588 <MX_FMC_Init+0x9c>)
 8000508:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_FMC_Init+0x98>)
 800050c:	2201      	movs	r2, #1
 800050e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_FMC_Init+0x98>)
 8000512:	2201      	movs	r2, #1
 8000514:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_FMC_Init+0x98>)
 8000518:	2208      	movs	r2, #8
 800051a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_FMC_Init+0x98>)
 800051e:	2210      	movs	r2, #16
 8000520:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_FMC_Init+0x98>)
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_FMC_Init+0x98>)
 800052a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800052e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_FMC_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_FMC_Init+0x98>)
 8000538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800053c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_FMC_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_FMC_Init+0x98>)
 8000546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000554:	2306      	movs	r3, #6
 8000556:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 800055c:	2305      	movs	r3, #5
 800055e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_FMC_Init+0x98>)
 800056e:	f002 fa29 	bl	80029c4 <HAL_SDRAM_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000578:	f000 fb9a 	bl	8000cb0 <Error_Handler>
  }

}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000002c 	.word	0x2000002c
 8000588:	a0000140 	.word	0xa0000140

0800058c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80005a0:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <HAL_FMC_MspInit+0x104>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d16f      	bne.n	8000688 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80005a8:	4b39      	ldr	r3, [pc, #228]	; (8000690 <HAL_FMC_MspInit+0x104>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	4b38      	ldr	r3, [pc, #224]	; (8000694 <HAL_FMC_MspInit+0x108>)
 80005b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b6:	4a37      	ldr	r2, [pc, #220]	; (8000694 <HAL_FMC_MspInit+0x108>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6393      	str	r3, [r2, #56]	; 0x38
 80005be:	4b35      	ldr	r3, [pc, #212]	; (8000694 <HAL_FMC_MspInit+0x108>)
 80005c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80005ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005dc:	230c      	movs	r3, #12
 80005de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4619      	mov	r1, r3
 80005e4:	482c      	ldr	r0, [pc, #176]	; (8000698 <HAL_FMC_MspInit+0x10c>)
 80005e6:	f000 fe91 	bl	800130c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	2303      	movs	r3, #3
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <HAL_FMC_MspInit+0x110>)
 8000604:	f000 fe82 	bl	800130c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000608:	f248 1337 	movw	r3, #33079	; 0x8137
 800060c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800061a:	230c      	movs	r3, #12
 800061c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	481f      	ldr	r0, [pc, #124]	; (80006a0 <HAL_FMC_MspInit+0x114>)
 8000624:	f000 fe72 	bl	800130c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000628:	f64f 7383 	movw	r3, #65411	; 0xff83
 800062c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063a:	230c      	movs	r3, #12
 800063c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <HAL_FMC_MspInit+0x118>)
 8000644:	f000 fe62 	bl	800130c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000648:	23c0      	movs	r3, #192	; 0xc0
 800064a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000658:	230c      	movs	r3, #12
 800065a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4811      	ldr	r0, [pc, #68]	; (80006a8 <HAL_FMC_MspInit+0x11c>)
 8000662:	f000 fe53 	bl	800130c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000666:	f24c 7303 	movw	r3, #50947	; 0xc703
 800066a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000678:	230c      	movs	r3, #12
 800067a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <HAL_FMC_MspInit+0x120>)
 8000682:	f000 fe43 	bl	800130c <HAL_GPIO_Init>
 8000686:	e000      	b.n	800068a <HAL_FMC_MspInit+0xfe>
    return;
 8000688:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40023800 	.word	0x40023800
 8000698:	40021400 	.word	0x40021400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40021800 	.word	0x40021800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021c00 	.word	0x40021c00
 80006ac:	40020c00 	.word	0x40020c00

080006b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006b8:	f7ff ff68 	bl	800058c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
 80006de:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <MX_GPIO_Init+0x144>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a49      	ldr	r2, [pc, #292]	; (8000808 <MX_GPIO_Init+0x144>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b47      	ldr	r3, [pc, #284]	; (8000808 <MX_GPIO_Init+0x144>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006f2:	623b      	str	r3, [r7, #32]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	4b43      	ldr	r3, [pc, #268]	; (8000808 <MX_GPIO_Init+0x144>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <MX_GPIO_Init+0x144>)
 8000700:	f043 0320 	orr.w	r3, r3, #32
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MX_GPIO_Init+0x144>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_GPIO_Init+0x144>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3b      	ldr	r2, [pc, #236]	; (8000808 <MX_GPIO_Init+0x144>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_GPIO_Init+0x144>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0x144>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a34      	ldr	r2, [pc, #208]	; (8000808 <MX_GPIO_Init+0x144>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0x144>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_GPIO_Init+0x144>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2d      	ldr	r2, [pc, #180]	; (8000808 <MX_GPIO_Init+0x144>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0x144>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_GPIO_Init+0x144>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <MX_GPIO_Init+0x144>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0x144>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0x144>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0x144>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0x144>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0x144>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0x144>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0x144>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x144>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0x144>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x144>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BL_Pin|LED_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f242 0110 	movw	r1, #8208	; 0x2010
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0x148>)
 80007de:	f000 ff3f 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_BL_Pin|LED_Pin;
 80007e2:	f242 0310 	movw	r3, #8208	; 0x2010
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0x148>)
 80007fc:	f000 fd86 	bl	800130c <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3738      	adds	r7, #56	; 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020c00 	.word	0x40020c00

08000810 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09a      	sub	sp, #104	; 0x68
 8000814:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fec0 	bl	80035a4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2234      	movs	r2, #52	; 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f002 feba 	bl	80035a4 <memset>

  hltdc.Instance = LTDC;
 8000830:	4b50      	ldr	r3, [pc, #320]	; (8000974 <MX_LTDC_Init+0x164>)
 8000832:	4a51      	ldr	r2, [pc, #324]	; (8000978 <MX_LTDC_Init+0x168>)
 8000834:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000836:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <MX_LTDC_Init+0x164>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800083c:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <MX_LTDC_Init+0x164>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000842:	4b4c      	ldr	r3, [pc, #304]	; (8000974 <MX_LTDC_Init+0x164>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000848:	4b4a      	ldr	r3, [pc, #296]	; (8000974 <MX_LTDC_Init+0x164>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 87;
 800084e:	4b49      	ldr	r3, [pc, #292]	; (8000974 <MX_LTDC_Init+0x164>)
 8000850:	2257      	movs	r2, #87	; 0x57
 8000852:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 31;
 8000854:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_LTDC_Init+0x164>)
 8000856:	221f      	movs	r2, #31
 8000858:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 175;
 800085a:	4b46      	ldr	r3, [pc, #280]	; (8000974 <MX_LTDC_Init+0x164>)
 800085c:	22af      	movs	r2, #175	; 0xaf
 800085e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 63;
 8000860:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_LTDC_Init+0x164>)
 8000862:	223f      	movs	r2, #63	; 0x3f
 8000864:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 975;
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_LTDC_Init+0x164>)
 8000868:	f240 32cf 	movw	r2, #975	; 0x3cf
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 543;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_LTDC_Init+0x164>)
 8000870:	f240 221f 	movw	r2, #543	; 0x21f
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1015;
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_LTDC_Init+0x164>)
 8000878:	f240 32f7 	movw	r2, #1015	; 0x3f7
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 556;
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_LTDC_Init+0x164>)
 8000880:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_LTDC_Init+0x164>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_LTDC_Init+0x164>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_LTDC_Init+0x164>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800089e:	4835      	ldr	r0, [pc, #212]	; (8000974 <MX_LTDC_Init+0x164>)
 80008a0:	f000 ff12 	bl	80016c8 <HAL_LTDC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008aa:	f000 fa01 	bl	8000cb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 800;
 80008b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 480;
 80008bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008c2:	2302      	movs	r3, #2
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80008c6:	23ff      	movs	r3, #255	; 0xff
 80008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008d4:	2305      	movs	r3, #5
 80008d6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008d8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008dc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 800;
 80008de:	f44f 7348 	mov.w	r3, #800	; 0x320
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 480;
 80008e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_LTDC_Init+0x164>)
 8000906:	f001 f871 	bl	80019ec <HAL_LTDC_ConfigLayer>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000910:	f000 f9ce 	bl	8000cb0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000932:	2305      	movs	r3, #5
 8000934:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_LTDC_Init+0x164>)
 800095c:	f001 f846 	bl	80019ec <HAL_LTDC_ConfigLayer>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000966:	f000 f9a3 	bl	8000cb0 <Error_Handler>
  }

}
 800096a:	bf00      	nop
 800096c:	3768      	adds	r7, #104	; 0x68
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000060 	.word	0x20000060
 8000978:	40016800 	.word	0x40016800

0800097c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a5b      	ldr	r2, [pc, #364]	; (8000b08 <HAL_LTDC_MspInit+0x18c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	f040 80b0 	bne.w	8000b00 <HAL_LTDC_MspInit+0x184>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
 80009a4:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	4a58      	ldr	r2, [pc, #352]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ae:	6453      	str	r3, [r2, #68]	; 0x44
 80009b0:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a51      	ldr	r2, [pc, #324]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	4a43      	ldr	r2, [pc, #268]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_LTDC_MspInit+0x190>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8000a48:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a5a:	230e      	movs	r3, #14
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <HAL_LTDC_MspInit+0x194>)
 8000a66:	f000 fc51 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7c:	230e      	movs	r3, #14
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <HAL_LTDC_MspInit+0x198>)
 8000a88:	f000 fc40 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <HAL_LTDC_MspInit+0x19c>)
 8000aa8:	f000 fc30 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8000aac:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <HAL_LTDC_MspInit+0x1a0>)
 8000aca:	f000 fc1f 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000ace:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <HAL_LTDC_MspInit+0x1a4>)
 8000aec:	f000 fc0e 	bl	800130c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2058      	movs	r0, #88	; 0x58
 8000af6:	f000 fbd2 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000afa:	2058      	movs	r0, #88	; 0x58
 8000afc:	f000 fbeb 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	; 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40016800 	.word	0x40016800
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40022000 	.word	0x40022000
 8000b14:	40021400 	.word	0x40021400
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40021c00 	.word	0x40021c00
 8000b20:	40021800 	.word	0x40021800

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f000 fa49 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2e:	f000 f835 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f7ff fdc7 	bl	80006c4 <MX_GPIO_Init>
  MX_FMC_Init();
 8000b36:	f7ff fcd9 	bl	80004ec <MX_FMC_Init>
  MX_TIM2_Init();
 8000b3a:	f000 f9a3 	bl	8000e84 <MX_TIM2_Init>
  MX_LTDC_Init();
 8000b3e:	f7ff fe67 	bl	8000810 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  // 点亮 LED
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2110      	movs	r1, #16
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <main+0x70>)
 8000b48:	f000 fd8a 	bl	8001660 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 8000b4c:	4812      	ldr	r0, [pc, #72]	; (8000b98 <main+0x74>)
 8000b4e:	f001 ffe3 	bl	8002b18 <HAL_TIM_Base_Start_IT>

  SDRAM_Init();
 8000b52:	f000 f8e5 	bl	8000d20 <SDRAM_Init>

  HAL_Delay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f000 faa3 	bl	80010a4 <HAL_Delay>

  // 点亮 LCD
  HAL_GPIO_WritePin(LED_BL_GPIO_Port, LED_BL_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <main+0x70>)
 8000b66:	f000 fd7b 	bl	8001660 <HAL_GPIO_WritePin>

  uint32_t i;
  uint32_t *pSRAM;

  /* 写SDRAM */
  pSRAM = (uint32_t *)EXT_SDRAM_ADDR;
 8000b6a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b6e:	603b      	str	r3, [r7, #0]
  for (i = 0; i < 800 * 50; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	e007      	b.n	8000b86 <main+0x62>
  {
      *pSRAM++ = 0x33;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	1d1a      	adds	r2, r3, #4
 8000b7a:	603a      	str	r2, [r7, #0]
 8000b7c:	2233      	movs	r2, #51	; 0x33
 8000b7e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 800 * 50; i++)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d9f2      	bls.n	8000b76 <main+0x52>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <main+0x6c>
 8000b92:	bf00      	nop
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	20000108 	.word	0x20000108

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0a0      	sub	sp, #128	; 0x80
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ba6:	2230      	movs	r2, #48	; 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fcfa 	bl	80035a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2230      	movs	r2, #48	; 0x30
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fceb 	bl	80035a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <SystemClock_Config+0x10c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <SystemClock_Config+0x10c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <SystemClock_Config+0x10c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <SystemClock_Config+0x110>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <SystemClock_Config+0x110>)
 8000bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <SystemClock_Config+0x110>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c1e:	23d8      	movs	r3, #216	; 0xd8
 8000c20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f902 	bl	8001e38 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c3a:	f000 f839 	bl	8000cb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c3e:	f001 f8ab 	bl	8001d98 <HAL_PWREx_EnableOverDrive>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c48:	f000 f832 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c68:	2105      	movs	r1, #5
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fb54 	bl	8002318 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000c76:	f000 f81b 	bl	8000cb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8000c7e:	233c      	movs	r3, #60	; 0x3c
 8000c80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fcda 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000c9a:	f000 f809 	bl	8000cb0 <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3780      	adds	r7, #128	; 0x80
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SDRAM_SendCommand>:
 */
#include "main.h"
#include "sdram_fmc_drv.h"

static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd8:	e004      	b.n	8000ce4 <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d101      	bne.n	8000ce4 <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <SDRAM_SendCommand+0x5c>)
 8000d00:	f001 fe94 	bl	8002a2c <HAL_SDRAM_SendCommand>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <SDRAM_SendCommand+0x50>
        return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e000      	b.n	8000d12 <SDRAM_SendCommand+0x52>
    }

    return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <SDRAM_Init>:

void SDRAM_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 2, 1, 0);
 8000d26:	2300      	movs	r3, #0
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ffc7 	bl	8000cc0 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 f9b6 	bl	80010a4 <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 2, 1, 0);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff ffbe 	bl	8000cc0 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 2, 8, 0);
 8000d44:	2300      	movs	r3, #0
 8000d46:	2208      	movs	r2, #8
 8000d48:	2102      	movs	r1, #2
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff ffb8 	bl	8000cc0 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 8000d50:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000d54:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 2, 1, temp);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff ffaf 	bl	8000cc0 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 8000d62:	f240 6184 	movw	r1, #1668	; 0x684
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <SDRAM_Init+0x54>)
 8000d68:	f001 fe8b 	bl	8002a82 <HAL_SDRAM_ProgramRefreshRate>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000002c 	.word	0x2000002c

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f922 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <TIM2_IRQHandler+0x18>)
 8000e2c:	f000 fc31 	bl	8001692 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <TIM2_IRQHandler+0x1c>)
 8000e32:	f001 fe95 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	20000108 	.word	0x20000108

08000e44 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <LTDC_IRQHandler+0x10>)
 8000e4a:	f000 fd0d 	bl	8001868 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000060 	.word	0x20000060

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SystemInit+0x28>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <SystemInit+0x28>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SystemInit+0x28>)
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	609a      	str	r2, [r3, #8]
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 - 1;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000eaa:	f242 3227 	movw	r2, #8999	; 0x2327
 8000eae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000 - 1;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000eb8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000ecc:	f001 fdf9 	bl	8002ac2 <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ed6:	f7ff feeb 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000ee8:	f001 ff42 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ef2:	f7ff fedd 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM2_Init+0x98>)
 8000f04:	f002 f958 	bl	80031b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f0e:	f7ff fecf 	bl	8000cb0 <Error_Handler>
  }

}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000108 	.word	0x20000108

08000f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d115      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x48>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x48>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x48>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 f9a3 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 f9bc 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f72:	e003      	b.n	8000f7c <LoopCopyDataInit>

08000f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f7a:	3104      	adds	r1, #4

08000f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f84:	d3f6      	bcc.n	8000f74 <CopyDataInit>
  ldr  r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f88:	e002      	b.n	8000f90 <LoopFillZerobss>

08000f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f8c:	f842 3b04 	str.w	r3, [r2], #4

08000f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f94:	d3f9      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ff5f 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 fadf 	bl	800355c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fdc1 	bl	8000b24 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000fa8:	080035ec 	.word	0x080035ec
  ldr  r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000fb4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000fb8:	2000014c 	.word	0x2000014c

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94d 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fec0 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f965 	bl	80012f2 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92d 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000148 	.word	0x20000148

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000148 	.word	0x20000148

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_Delay+0x40>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff3e 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff31 	bl	800114c <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e177      	b.n	8001618 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8166 	bne.w	8001612 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d00b      	beq.n	8001366 <HAL_GPIO_Init+0x5a>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800135a:	2b11      	cmp	r3, #17
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b12      	cmp	r3, #18
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0xfc>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80c0 	beq.w	8001612 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_GPIO_Init+0x320>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_GPIO_Init+0x320>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_GPIO_Init+0x320>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a60      	ldr	r2, [pc, #384]	; (8001630 <HAL_GPIO_Init+0x324>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_GPIO_Init+0x328>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d037      	beq.n	800154a <HAL_GPIO_Init+0x23e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_GPIO_Init+0x32c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d031      	beq.n	8001546 <HAL_GPIO_Init+0x23a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_GPIO_Init+0x330>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0x236>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_GPIO_Init+0x334>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x232>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a53      	ldr	r2, [pc, #332]	; (8001644 <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x22e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x22a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a51      	ldr	r2, [pc, #324]	; (800164c <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x226>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x222>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x21e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4e      	ldr	r2, [pc, #312]	; (8001658 <HAL_GPIO_Init+0x34c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x21a>
 8001522:	2309      	movs	r3, #9
 8001524:	e012      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001526:	230a      	movs	r3, #10
 8001528:	e010      	b.n	800154c <HAL_GPIO_Init+0x240>
 800152a:	2308      	movs	r3, #8
 800152c:	e00e      	b.n	800154c <HAL_GPIO_Init+0x240>
 800152e:	2307      	movs	r3, #7
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001532:	2306      	movs	r3, #6
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x240>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x240>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x240>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x240>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4934      	ldr	r1, [pc, #208]	; (8001630 <HAL_GPIO_Init+0x324>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_GPIO_Init+0x350>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800158e:	4a33      	ldr	r2, [pc, #204]	; (800165c <HAL_GPIO_Init+0x350>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_GPIO_Init+0x350>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_GPIO_Init+0x350>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_GPIO_Init+0x350>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <HAL_GPIO_Init+0x350>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_GPIO_Init+0x350>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_GPIO_Init+0x350>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae84 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40022000 	.word	0x40022000
 8001658:	40022400 	.word	0x40022400
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	401a      	ands	r2, r3
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d104      	bne.n	80016b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	041a      	lsls	r2, r3, #16
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0bf      	b.n	800185a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff f944 	bl	800097c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800170a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6999      	ldr	r1, [r3, #24]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001720:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_LTDC_Init+0x19c>)
 800173c:	400b      	ands	r3, r1
 800173e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6899      	ldr	r1, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68d9      	ldr	r1, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_LTDC_Init+0x19c>)
 800176a:	400b      	ands	r3, r1
 800176c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68d9      	ldr	r1, [r3, #12]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_LTDC_Init+0x19c>)
 8001798:	400b      	ands	r3, r1
 800179a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6959      	ldr	r1, [r3, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_LTDC_Init+0x19c>)
 80017c6:	400b      	ands	r3, r1
 80017c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0206 	orr.w	r2, r2, #6
 8001836:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f000f800 	.word	0xf000f800

08001868 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_LTDC_IRQHandler+0x6a>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01e      	beq.n	80018d2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0204 	bic.w	r2, r2, #4
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f86f 	bl	80019b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_LTDC_IRQHandler+0xbc>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01e      	beq.n	8001924 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0202 	bic.w	r2, r2, #2
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2202      	movs	r2, #2
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f846 	bl	80019b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01b      	beq.n	8001966 <HAL_LTDC_IRQHandler+0xfe>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f82f 	bl	80019c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_LTDC_IRQHandler+0x140>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2208      	movs	r2, #8
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f818 	bl	80019d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_LTDC_ConfigLayer+0x1a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e02c      	b.n	8001a60 <HAL_LTDC_ConfigLayer+0x74>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2134      	movs	r1, #52	; 0x34
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f811 	bl	8001a68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}

08001a68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a84:	4413      	add	r3, r2
 8001a86:	041b      	lsls	r3, r3, #16
 8001a88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	4413      	add	r3, r2
 8001a96:	3384      	adds	r3, #132	; 0x84
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	01d2      	lsls	r2, r2, #7
 8001aa4:	440a      	add	r2, r1
 8001aa6:	3284      	adds	r2, #132	; 0x84
 8001aa8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001aac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	4413      	add	r3, r2
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	440b      	add	r3, r1
 8001ace:	3384      	adds	r3, #132	; 0x84
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae6:	4413      	add	r3, r2
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	01db      	lsls	r3, r3, #7
 8001af6:	4413      	add	r3, r2
 8001af8:	3384      	adds	r3, #132	; 0x84
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4611      	mov	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	01d2      	lsls	r2, r2, #7
 8001b06:	440a      	add	r2, r1
 8001b08:	3284      	adds	r2, #132	; 0x84
 8001b0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b1e:	4413      	add	r3, r2
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	01db      	lsls	r3, r3, #7
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3384      	adds	r3, #132	; 0x84
 8001b30:	4619      	mov	r1, r3
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	01db      	lsls	r3, r3, #7
 8001b42:	4413      	add	r3, r2
 8001b44:	3384      	adds	r3, #132	; 0x84
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	01d2      	lsls	r2, r2, #7
 8001b52:	440a      	add	r2, r1
 8001b54:	3284      	adds	r2, #132	; 0x84
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	4413      	add	r3, r2
 8001b68:	3384      	adds	r3, #132	; 0x84
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	061b      	lsls	r3, r3, #24
 8001b8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	01db      	lsls	r3, r3, #7
 8001b98:	4413      	add	r3, r2
 8001b9a:	3384      	adds	r3, #132	; 0x84
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	4413      	add	r3, r2
 8001baa:	3384      	adds	r3, #132	; 0x84
 8001bac:	461a      	mov	r2, r3
 8001bae:	2300      	movs	r3, #0
 8001bb0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb8:	461a      	mov	r2, r3
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	01db      	lsls	r3, r3, #7
 8001bcc:	440b      	add	r3, r1
 8001bce:	3384      	adds	r3, #132	; 0x84
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	4413      	add	r3, r2
 8001be4:	3384      	adds	r3, #132	; 0x84
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4611      	mov	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	01d2      	lsls	r2, r2, #7
 8001bf2:	440a      	add	r2, r1
 8001bf4:	3284      	adds	r2, #132	; 0x84
 8001bf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bfa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	4413      	add	r3, r2
 8001c08:	3384      	adds	r3, #132	; 0x84
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3384      	adds	r3, #132	; 0x84
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4611      	mov	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	01d2      	lsls	r2, r2, #7
 8001c2c:	440a      	add	r2, r1
 8001c2e:	3284      	adds	r2, #132	; 0x84
 8001c30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c34:	f023 0307 	bic.w	r3, r3, #7
 8001c38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	6809      	ldr	r1, [r1, #0]
 8001c46:	4608      	mov	r0, r1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	01c9      	lsls	r1, r1, #7
 8001c4c:	4401      	add	r1, r0
 8001c4e:	3184      	adds	r1, #132	; 0x84
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	01db      	lsls	r3, r3, #7
 8001c5e:	4413      	add	r3, r2
 8001c60:	3384      	adds	r3, #132	; 0x84
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	01db      	lsls	r3, r3, #7
 8001c6e:	4413      	add	r3, r2
 8001c70:	3384      	adds	r3, #132	; 0x84
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	4413      	add	r3, r2
 8001c84:	3384      	adds	r3, #132	; 0x84
 8001c86:	461a      	mov	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001c96:	2304      	movs	r3, #4
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e01b      	b.n	8001cd4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	e014      	b.n	8001cd4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00b      	beq.n	8001cca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d003      	beq.n	8001cca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d102      	bne.n	8001cd0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e001      	b.n	8001cd4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	01db      	lsls	r3, r3, #7
 8001cde:	4413      	add	r3, r2
 8001ce0:	3384      	adds	r3, #132	; 0x84
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	01d2      	lsls	r2, r2, #7
 8001cee:	440a      	add	r2, r1
 8001cf0:	3284      	adds	r2, #132	; 0x84
 8001cf2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1acb      	subs	r3, r1, r3
 8001d0e:	69f9      	ldr	r1, [r7, #28]
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	3303      	adds	r3, #3
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	6809      	ldr	r1, [r1, #0]
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	01c9      	lsls	r1, r1, #7
 8001d20:	4401      	add	r1, r0
 8001d22:	3184      	adds	r1, #132	; 0x84
 8001d24:	4313      	orrs	r3, r2
 8001d26:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4413      	add	r3, r2
 8001d34:	3384      	adds	r3, #132	; 0x84
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	01d2      	lsls	r2, r2, #7
 8001d42:	440a      	add	r2, r1
 8001d44:	3284      	adds	r2, #132	; 0x84
 8001d46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3384      	adds	r3, #132	; 0x84
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	4413      	add	r3, r2
 8001d72:	3384      	adds	r3, #132	; 0x84
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	01d2      	lsls	r2, r2, #7
 8001d80:	440a      	add	r2, r1
 8001d82:	3284      	adds	r2, #132	; 0x84
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_PWREx_EnableOverDrive+0x94>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f962 	bl	800108c <HAL_GetTick>
 8001dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dcc:	f7ff f95e 	bl	800108c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e01f      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff f94a 	bl	800108c <HAL_GetTick>
 8001df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dfa:	e009      	b.n	8001e10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dfc:	f7ff f946 	bl	800108c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0a:	d901      	bls.n	8001e10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e007      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	420e0040 	.word	0x420e0040
 8001e30:	40007000 	.word	0x40007000
 8001e34:	420e0044 	.word	0x420e0044

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e25b      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d075      	beq.n	8001f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e56:	4ba3      	ldr	r3, [pc, #652]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d00c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e62:	4ba0      	ldr	r3, [pc, #640]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d112      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6e:	4b9d      	ldr	r3, [pc, #628]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b99      	ldr	r3, [pc, #612]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d05b      	beq.n	8001f40 <HAL_RCC_OscConfig+0x108>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d157      	bne.n	8001f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e236      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x74>
 8001e9e:	4b91      	ldr	r3, [pc, #580]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a90      	ldr	r2, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a87      	ldr	r2, [pc, #540]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a83      	ldr	r2, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a80      	ldr	r2, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f8cc 	bl	800108c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f8c8 	bl	800108c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1fb      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xc0>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff f8b8 	bl	800108c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f8b4 	bl	800108c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1e7      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0xe8>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4e:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b62      	ldr	r3, [pc, #392]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x152>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1bb      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4952      	ldr	r1, [pc, #328]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x2b0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f86d 	bl	800108c <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f869 	bl	800108c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e19c      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4940      	ldr	r1, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x2b0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f84c 	bl	800108c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f848 	bl	800108c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e17b      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d030      	beq.n	8002084 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_RCC_OscConfig+0x2b4>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f82c 	bl	800108c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f828 	bl	800108c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e15b      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x200>
 8002056:	e015      	b.n	8002084 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x2b4>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff f815 	bl	800108c <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002066:	f7ff f811 	bl	800108c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e144      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a0 	beq.w	80021d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x2b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d121      	bne.n	8002112 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCC_OscConfig+0x2b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_RCC_OscConfig+0x2b8>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7fe ffd7 	bl	800108c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e011      	b.n	8002106 <HAL_RCC_OscConfig+0x2ce>
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470000 	.word	0x42470000
 80020ec:	42470e80 	.word	0x42470e80
 80020f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe ffca 	bl	800108c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0fd      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x4d4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x2f0>
 800211a:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a7c      	ldr	r2, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x32a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 8002130:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a76      	ldr	r2, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x32a>
 800214a:	4b71      	ldr	r3, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a70      	ldr	r2, [pc, #448]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a6d      	ldr	r2, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7fe ff8f 	bl	800108c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe ff8b 	bl	800108c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0bc      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x33a>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe ff79 	bl	800108c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe ff75 	bl	800108c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0a6      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8092 	beq.w	8002300 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d05c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d141      	bne.n	8002274 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_RCC_OscConfig+0x4dc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe ff49 	bl	800108c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe ff45 	bl	800108c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e078      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	019b      	lsls	r3, r3, #6
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	085b      	lsrs	r3, r3, #1
 8002234:	3b01      	subs	r3, #1
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	4933      	ldr	r1, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_RCC_OscConfig+0x4dc>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe ff1e 	bl	800108c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe ff1a 	bl	800108c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e04d      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x41c>
 8002272:	e045      	b.n	8002300 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x4dc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe ff07 	bl	800108c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe ff03 	bl	800108c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e036      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x44a>
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e029      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_OscConfig+0x4d8>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10d      	bne.n	80022fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000
 8002310:	40023800 	.word	0x40023800
 8002314:	42470060 	.word	0x42470060

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cc      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4934      	ldr	r1, [pc, #208]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fe40 	bl	800108c <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fe3c 	bl	800108c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	fa21 f303 	lsr.w	r3, r1, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fda0 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	080035cc 	.word	0x080035cc
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fa:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d007      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x32>
 8002506:	2b08      	cmp	r3, #8
 8002508:	d008      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x38>
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 808d 	bne.w	800262a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002512:	60bb      	str	r3, [r7, #8]
       break;
 8002514:	e08c      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002516:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 8002518:	60bb      	str	r3, [r7, #8]
      break;
 800251a:	e089      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002524:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	f04f 0400 	mov.w	r4, #0
 800253c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	ea03 0501 	and.w	r5, r3, r1
 8002548:	ea04 0602 	and.w	r6, r4, r2
 800254c:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 800254e:	fb02 f106 	mul.w	r1, r2, r6
 8002552:	2200      	movs	r2, #0
 8002554:	fb02 f205 	mul.w	r2, r2, r5
 8002558:	440a      	add	r2, r1
 800255a:	493a      	ldr	r1, [pc, #232]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 800255c:	fba5 0101 	umull	r0, r1, r5, r1
 8002560:	1853      	adds	r3, r2, r1
 8002562:	4619      	mov	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f04f 0400 	mov.w	r4, #0
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	f7fd fe3d 	bl	80001ec <__aeabi_uldivmod>
 8002572:	4603      	mov	r3, r0
 8002574:	460c      	mov	r4, r1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e049      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	ea03 0501 	and.w	r5, r3, r1
 8002590:	ea04 0602 	and.w	r6, r4, r2
 8002594:	4629      	mov	r1, r5
 8002596:	4632      	mov	r2, r6
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	0154      	lsls	r4, r2, #5
 80025a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a6:	014b      	lsls	r3, r1, #5
 80025a8:	4619      	mov	r1, r3
 80025aa:	4622      	mov	r2, r4
 80025ac:	1b49      	subs	r1, r1, r5
 80025ae:	eb62 0206 	sbc.w	r2, r2, r6
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	0194      	lsls	r4, r2, #6
 80025bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025c0:	018b      	lsls	r3, r1, #6
 80025c2:	1a5b      	subs	r3, r3, r1
 80025c4:	eb64 0402 	sbc.w	r4, r4, r2
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	00e2      	lsls	r2, r4, #3
 80025d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025d6:	00d9      	lsls	r1, r3, #3
 80025d8:	460b      	mov	r3, r1
 80025da:	4614      	mov	r4, r2
 80025dc:	195b      	adds	r3, r3, r5
 80025de:	eb44 0406 	adc.w	r4, r4, r6
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	02a2      	lsls	r2, r4, #10
 80025ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025f0:	0299      	lsls	r1, r3, #10
 80025f2:	460b      	mov	r3, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	4621      	mov	r1, r4
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f04f 0400 	mov.w	r4, #0
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	f7fd fdf2 	bl	80001ec <__aeabi_uldivmod>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_GetSysClockFreq+0x158>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	3301      	adds	r3, #1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	60bb      	str	r3, [r7, #8]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x15c>)
 800262c:	60bb      	str	r3, [r7, #8]
      break;
 800262e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002630:	68bb      	ldr	r3, [r7, #8]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	00f42400 	.word	0x00f42400
 8002644:	017d7840 	.word	0x017d7840

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d075      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800267c:	4bad      	ldr	r3, [pc, #692]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002682:	f7fe fd03 	bl	800108c <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800268a:	f7fe fcff 	bl	800108c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e18b      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800269c:	4ba6      	ldr	r3, [pc, #664]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	019a      	lsls	r2, r3, #6
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	071b      	lsls	r3, r3, #28
 80026c0:	499d      	ldr	r1, [pc, #628]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01f      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d4:	4b98      	ldr	r3, [pc, #608]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	0f1b      	lsrs	r3, r3, #28
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	071b      	lsls	r3, r3, #28
 80026f4:	4990      	ldr	r1, [pc, #576]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026fc:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f023 021f 	bic.w	r2, r3, #31
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	3b01      	subs	r3, #1
 800270c:	498a      	ldr	r1, [pc, #552]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	019a      	lsls	r2, r3, #6
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	071b      	lsls	r3, r3, #28
 8002734:	4980      	ldr	r1, [pc, #512]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800273c:	4b7d      	ldr	r3, [pc, #500]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002742:	f7fe fca3 	bl	800108c <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fe fc9f 	bl	800108c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e12b      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	d079      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002780:	4b6e      	ldr	r3, [pc, #440]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002786:	f7fe fc81 	bl	800108c <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800278e:	f7fe fc7d 	bl	800108c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e109      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ac:	d0ef      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d020      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	0f1b      	lsrs	r3, r3, #28
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	019a      	lsls	r2, r3, #6
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	431a      	orrs	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	4957      	ldr	r1, [pc, #348]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027e2:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	4950      	ldr	r1, [pc, #320]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01e      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	0e1b      	lsrs	r3, r3, #24
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	019a      	lsls	r2, r3, #6
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	071b      	lsls	r3, r3, #28
 8002828:	4943      	ldr	r1, [pc, #268]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	493e      	ldr	r1, [pc, #248]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe fc1e 	bl	800108c <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002854:	f7fe fc1a 	bl	800108c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0a6      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002872:	d1ef      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 808d 	beq.w	800299c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028aa:	f7fe fbef 	bl	800108c <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fe fbeb 	bl	800108c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e077      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d039      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d032      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d11e      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fbb9 	bl	800108c <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e014      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fbb5 	bl	800108c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d90b      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e03f      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002934:	42470068 	.word	0x42470068
 8002938:	40023800 	.word	0x40023800
 800293c:	42470070 	.word	0x42470070
 8002940:	40007000 	.word	0x40007000
 8002944:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0e4      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002960:	d10d      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002962:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	4911      	ldr	r1, [pc, #68]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]
 800297c:	e005      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002984:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002988:	6093      	str	r3, [r2, #8]
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800298c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	4909      	ldr	r1, [pc, #36]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002998:	4313      	orrs	r3, r2
 800299a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80029b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	424711e0 	.word	0x424711e0

080029c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e025      	b.n	8002a24 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fd fe5f 	bl	80006b0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f000 fc67 	bl	80032d8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	f000 fcd2 	bl	80033be <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d101      	bne.n	8002a48 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	e018      	b.n	8002a7a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fd2f 	bl	80034bc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d104      	bne.n	8002a70 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002a6e:	e003      	b.n	8002a78 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d101      	bne.n	8002a9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e00e      	b.n	8002aba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fd42 	bl	8003534 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e01d      	b.n	8002b10 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe fa19 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 fa1f 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d007      	beq.n	8002b52 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9af 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9a1 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9b2 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f985 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f977 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f988 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f95b 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f94d 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f95e 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f931 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f923 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f934 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8fd 	bl	8002ede <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fada 	bl	80032c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8f9 	bl	8002f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0220 	mvn.w	r2, #32
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 faa4 	bl	80032b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_TIM_ConfigClockSource+0x18>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0a6      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d067      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x120>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d80b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x6c>
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d073      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0x140>
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d802      	bhi.n	8002dd2 <HAL_TIM_ConfigClockSource+0x62>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06f      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002dd0:	e078      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d06c      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0x140>
 8002dd6:	2b30      	cmp	r3, #48	; 0x30
 8002dd8:	d06a      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002dda:	e073      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d00d      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x8c>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d804      	bhi.n	8002dee <HAL_TIM_ConfigClockSource+0x7e>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d033      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0xe0>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d041      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002dec:	e06a      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	d066      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x152>
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d017      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002dfa:	e063      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f000 f9b4 	bl	8003178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
      break;
 8002e28:	e04c      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f000 f99d 	bl	8003178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4c:	609a      	str	r2, [r3, #8]
      break;
 8002e4e:	e039      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f000 f911 	bl	8003084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2150      	movs	r1, #80	; 0x50
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f96a 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002e6e:	e029      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f000 f930 	bl	80030e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2160      	movs	r1, #96	; 0x60
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f95a 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002e8e:	e019      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f000 f8f1 	bl	8003084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f94a 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002eae:	e009      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 f941 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a40      	ldr	r2, [pc, #256]	; (8003058 <TIM_Base_SetConfig+0x114>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d00f      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3d      	ldr	r2, [pc, #244]	; (800305c <TIM_Base_SetConfig+0x118>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3c      	ldr	r2, [pc, #240]	; (8003060 <TIM_Base_SetConfig+0x11c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <TIM_Base_SetConfig+0x120>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <TIM_Base_SetConfig+0x124>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <TIM_Base_SetConfig+0x114>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d027      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2c      	ldr	r2, [pc, #176]	; (800305c <TIM_Base_SetConfig+0x118>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d023      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <TIM_Base_SetConfig+0x11c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <TIM_Base_SetConfig+0x120>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <TIM_Base_SetConfig+0x124>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d017      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <TIM_Base_SetConfig+0x128>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <TIM_Base_SetConfig+0x12c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00f      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <TIM_Base_SetConfig+0x130>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0x134>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a24      	ldr	r2, [pc, #144]	; (800307c <TIM_Base_SetConfig+0x138>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <TIM_Base_SetConfig+0x13c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <TIM_Base_SetConfig+0x114>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800
 8003078:	40001800 	.word	0x40001800
 800307c:	40001c00 	.word	0x40001c00
 8003080:	40002000 	.word	0x40002000

08003084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 030a 	bic.w	r3, r3, #10
 80030c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0210 	bic.w	r2, r3, #16
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800311e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	f043 0307 	orr.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	431a      	orrs	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e05a      	b.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d01d      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d018      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10c      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800

080032b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d029      	beq.n	8003346 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003302:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800330c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003312:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003318:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800331e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003324:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800332a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003330:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003336:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e034      	b.n	80033b0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003352:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800335c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003362:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003376:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800337a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003384:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800338a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003390:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003396:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800339c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d02e      	beq.n	8003436 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033e4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80033f4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80033fe:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003408:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003412:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	3b01      	subs	r3, #1
 800341a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800341c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	3b01      	subs	r3, #1
 8003424:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003426:	4313      	orrs	r3, r2
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e03b      	b.n	80034ae <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003446:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	3b01      	subs	r3, #1
 8003456:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003458:	4313      	orrs	r3, r2
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800346c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	3b01      	subs	r3, #1
 800347a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800347c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003486:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003490:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	3b01      	subs	r3, #1
 8003498:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800349a:	4313      	orrs	r3, r2
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80034d8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	3b01      	subs	r3, #1
 80034e0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80034e2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034f4:	f7fd fdca 	bl	800108c <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80034fa:	e010      	b.n	800351e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d00c      	beq.n	800351e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <FMC_SDRAM_SendCommand+0x5e>
 800350a:	f7fd fdbf 	bl	800108c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d201      	bcs.n	800351e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e006      	b.n	800352c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d0e8      	beq.n	80034fc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	4e0d      	ldr	r6, [pc, #52]	; (8003594 <__libc_init_array+0x38>)
 8003560:	4c0d      	ldr	r4, [pc, #52]	; (8003598 <__libc_init_array+0x3c>)
 8003562:	1ba4      	subs	r4, r4, r6
 8003564:	10a4      	asrs	r4, r4, #2
 8003566:	2500      	movs	r5, #0
 8003568:	42a5      	cmp	r5, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	4e0b      	ldr	r6, [pc, #44]	; (800359c <__libc_init_array+0x40>)
 800356e:	4c0c      	ldr	r4, [pc, #48]	; (80035a0 <__libc_init_array+0x44>)
 8003570:	f000 f820 	bl	80035b4 <_init>
 8003574:	1ba4      	subs	r4, r4, r6
 8003576:	10a4      	asrs	r4, r4, #2
 8003578:	2500      	movs	r5, #0
 800357a:	42a5      	cmp	r5, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003584:	4798      	blx	r3
 8003586:	3501      	adds	r5, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800358e:	4798      	blx	r3
 8003590:	3501      	adds	r5, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	080035e4 	.word	0x080035e4
 8003598:	080035e4 	.word	0x080035e4
 800359c:	080035e4 	.word	0x080035e4
 80035a0:	080035e8 	.word	0x080035e8

080035a4 <memset>:
 80035a4:	4402      	add	r2, r0
 80035a6:	4603      	mov	r3, r0
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d100      	bne.n	80035ae <memset+0xa>
 80035ac:	4770      	bx	lr
 80035ae:	f803 1b01 	strb.w	r1, [r3], #1
 80035b2:	e7f9      	b.n	80035a8 <memset+0x4>

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

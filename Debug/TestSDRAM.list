
TestSDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025d78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002edc8  08025f28  08025f28  00035f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000ef2  08054cf0  08054cf0  00064cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000014  08055be4  08055be4  00065be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00034650  08055bf8  08055bf8  00065bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000060  0808a248  0808a248  0009a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0808a2a8  0808a2a8  000a0110  2**0
                  CONTENTS
  8 .ARM          00000008  0808a2a8  0808a2a8  0009a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0808a2b0  0808a2b0  000a0110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0808a2b0  0808a2b0  0009a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0808a2c4  0808a2c4  0009a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000110  20000000  0808a2cc  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002a10  20000110  0808a3dc  000a0110  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20002b20  0808a3dc  000a2b20  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000a0110  2**0
                  CONTENTS, READONLY
 16 .debug_info   000abd9f  00000000  00000000  000a0140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 000138ec  00000000  00000000  0014bedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00003bf8  00000000  00000000  0015f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003588  00000000  00000000  001633c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00036905  00000000  00000000  00166950  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0003fe18  00000000  00000000  0019d255  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000ff8f7  00000000  00000000  001dd06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  002dc964  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ffa0  00000000  00000000  002dca60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08025f10 	.word	0x08025f10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08025f10 	.word	0x08025f10

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <Explore_Disk>:
            }
        }
    }
}

FRESULT Explore_Disk(char *path, uint8_t recu_level) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0da      	sub	sp, #360	; 0x168
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	6018      	str	r0, [r3, #0]
 8000d76:	460a      	mov	r2, r1
 8000d78:	1cfb      	adds	r3, r7, #3
 8000d7a:	701a      	strb	r2, [r3, #0]
  FRESULT res = FR_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  FILINFO fno;
  DIR dir;
  char *fn;
  char tmp[14];

  res = f_opendir(&dir, path);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	f107 0218 	add.w	r2, r7, #24
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	f00c fe50 	bl	800da30 <f_opendir>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  printf("res1: %d \r\n", res);
 8000d96:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <Explore_Disk+0x8c>)
 8000d9e:	f024 fc37 	bl	8025610 <iprintf>

  for (;;) {
	  res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000da2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c ff03 	bl	800dbb8 <f_readdir>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	  if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000db8:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10e      	bne.n	8000dde <Explore_Disk+0x72>
 8000dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dc4:	7d9b      	ldrb	r3, [r3, #22]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <Explore_Disk+0x72>
//		  if (res != FR_OK) break;
//		  path[i] = 0;
//	  } else {                                       /* It is a file. */
//		  printf("%s/%s\n", path, fno.fname);
//	  }
	  printf("%s/%s\n", path, fno.fname);
 8000dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dce:	f103 0216 	add.w	r2, r3, #22
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <Explore_Disk+0x90>)
 8000dd8:	f024 fc1a 	bl	8025610 <iprintf>
	  res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ddc:	e7e1      	b.n	8000da2 <Explore_Disk+0x36>
  }
  f_closedir(&dir);
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c fec2 	bl	800db6c <f_closedir>
////        Explore_Disk(fn, 2);
////      }
//    }
//    f_closedir(&dir);
//  }
  return res;
 8000de8:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08025f58 	.word	0x08025f58
 8000dfc:	08025f64 	.word	0x08025f64

08000e00 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MX_CRC_Init+0x24>)
 8000e08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e0c:	f001 fec1 	bl	8002b92 <HAL_CRC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e16:	f000 fd5f 	bl	80018d8 <Error_Handler>
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001e54 	.word	0x20001e54
 8000e24:	40023000 	.word	0x40023000

08000e28 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_CRC_MspInit+0x3c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10d      	bne.n	8000e56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023000 	.word	0x40023000
 8000e68:	40023800 	.word	0x40023800

08000e6c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_DMA2D_Init+0x60>)
 8000e74:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000ea2:	f001 feb4 	bl	8002c0e <HAL_DMA2D_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000eac:	f000 fd14 	bl	80018d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000eb4:	f002 f974 	bl	80031a0 <HAL_DMA2D_ConfigLayer>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ebe:	f000 fd0b 	bl	80018d8 <Error_Handler>
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20001e5c 	.word	0x20001e5c
 8000ecc:	4002b000 	.word	0x4002b000

08000ed0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DMA2D_MspInit+0x48>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d115      	bne.n	8000f0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	205a      	movs	r0, #90	; 0x5a
 8000f04:	f001 fe01 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f08:	205a      	movs	r0, #90	; 0x5a
 8000f0a:	f001 fe1a 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	4002b000 	.word	0x4002b000
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_DMA2D_MspDeInit+0x2c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d108      	bne.n	8000f44 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_DMA2D_MspDeInit+0x30>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_DMA2D_MspDeInit+0x30>)
 8000f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt Deinit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8000f3e:	205a      	movs	r0, #90	; 0x5a
 8000f40:	f001 fe0d 	bl	8002b5e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	4002b000 	.word	0x4002b000
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_FMC_Init+0x98>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <MX_FMC_Init+0x9c>)
 8000f70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_FMC_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_FMC_Init+0x98>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_FMC_Init+0x98>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_FMC_Init+0x98>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_FMC_Init+0x98>)
 8000f8c:	2240      	movs	r2, #64	; 0x40
 8000f8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_FMC_Init+0x98>)
 8000f92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_FMC_Init+0x98>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_FMC_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_FMC_Init+0x98>)
 8000fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_FMC_Init+0x98>)
 8000fd6:	f005 fa6d 	bl	80064b4 <HAL_SDRAM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fe0:	f000 fc7a 	bl	80018d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20001e9c 	.word	0x20001e9c
 8000ff0:	a0000140 	.word	0xa0000140

08000ff4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_FMC_MspInit+0x114>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d177      	bne.n	8001100 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_FMC_MspInit+0x114>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_FMC_MspInit+0x118>)
 800101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101e:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_FMC_MspInit+0x118>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6393      	str	r3, [r2, #56]	; 0x38
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_FMC_MspInit+0x118>)
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001032:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001036:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4830      	ldr	r0, [pc, #192]	; (8001110 <HAL_FMC_MspInit+0x11c>)
 800104e:	f002 f9d5 	bl	80033fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	482a      	ldr	r0, [pc, #168]	; (8001114 <HAL_FMC_MspInit+0x120>)
 800106c:	f002 f9c6 	bl	80033fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001070:	f248 1337 	movw	r3, #33079	; 0x8137
 8001074:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	; (8001118 <HAL_FMC_MspInit+0x124>)
 800108c:	f002 f9b6 	bl	80033fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001090:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001094:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <HAL_FMC_MspInit+0x128>)
 80010ac:	f002 f9a6 	bl	80033fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b0:	23c0      	movs	r3, #192	; 0xc0
 80010b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c0:	230c      	movs	r3, #12
 80010c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <HAL_FMC_MspInit+0x12c>)
 80010ca:	f002 f997 	bl	80033fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e0:	230c      	movs	r3, #12
 80010e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <HAL_FMC_MspInit+0x130>)
 80010ea:	f002 f987 	bl	80033fc <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f001 fd09 	bl	8002b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80010f8:	2030      	movs	r0, #48	; 0x30
 80010fa:	f001 fd22 	bl	8002b42 <HAL_NVIC_EnableIRQ>
 80010fe:	e000      	b.n	8001102 <HAL_FMC_MspInit+0x10e>
    return;
 8001100:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000012c 	.word	0x2000012c
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400
 8001114:	40020800 	.word	0x40020800
 8001118:	40021800 	.word	0x40021800
 800111c:	40021000 	.word	0x40021000
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001130:	f7ff ff60 	bl	8000ff4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	4b79      	ldr	r3, [pc, #484]	; (800133c <MX_GPIO_Init+0x200>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a78      	ldr	r2, [pc, #480]	; (800133c <MX_GPIO_Init+0x200>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <MX_GPIO_Init+0x200>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	623b      	str	r3, [r7, #32]
 800116c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <MX_GPIO_Init+0x200>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a71      	ldr	r2, [pc, #452]	; (800133c <MX_GPIO_Init+0x200>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <MX_GPIO_Init+0x200>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	4b6b      	ldr	r3, [pc, #428]	; (800133c <MX_GPIO_Init+0x200>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a6a      	ldr	r2, [pc, #424]	; (800133c <MX_GPIO_Init+0x200>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b68      	ldr	r3, [pc, #416]	; (800133c <MX_GPIO_Init+0x200>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	4b64      	ldr	r3, [pc, #400]	; (800133c <MX_GPIO_Init+0x200>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a63      	ldr	r2, [pc, #396]	; (800133c <MX_GPIO_Init+0x200>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b61      	ldr	r3, [pc, #388]	; (800133c <MX_GPIO_Init+0x200>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <MX_GPIO_Init+0x200>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <MX_GPIO_Init+0x200>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <MX_GPIO_Init+0x200>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <MX_GPIO_Init+0x200>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a55      	ldr	r2, [pc, #340]	; (800133c <MX_GPIO_Init+0x200>)
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <MX_GPIO_Init+0x200>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <MX_GPIO_Init+0x200>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <MX_GPIO_Init+0x200>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <MX_GPIO_Init+0x200>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <MX_GPIO_Init+0x200>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a47      	ldr	r2, [pc, #284]	; (800133c <MX_GPIO_Init+0x200>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <MX_GPIO_Init+0x200>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <MX_GPIO_Init+0x200>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <MX_GPIO_Init+0x200>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <MX_GPIO_Init+0x200>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001254:	483a      	ldr	r0, [pc, #232]	; (8001340 <MX_GPIO_Init+0x204>)
 8001256:	f002 fa93 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001260:	4838      	ldr	r0, [pc, #224]	; (8001344 <MX_GPIO_Init+0x208>)
 8001262:	f002 fa8d 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2130      	movs	r1, #48	; 0x30
 800126a:	4837      	ldr	r0, [pc, #220]	; (8001348 <MX_GPIO_Init+0x20c>)
 800126c:	f002 fa88 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BL_Pin|LED_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f242 0110 	movw	r1, #8208	; 0x2010
 8001276:	4835      	ldr	r0, [pc, #212]	; (800134c <MX_GPIO_Init+0x210>)
 8001278:	f002 fa82 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2108      	movs	r1, #8
 8001280:	4830      	ldr	r0, [pc, #192]	; (8001344 <MX_GPIO_Init+0x208>)
 8001282:	f002 fa7d 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001290:	2302      	movs	r3, #2
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MX_GPIO_Init+0x204>)
 80012a0:	f002 f8ac 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80012a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_GPIO_Init+0x208>)
 80012be:	f002 f89d 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c2:	2310      	movs	r3, #16
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ce:	2301      	movs	r3, #1
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_GPIO_Init+0x20c>)
 80012da:	f002 f88f 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012de:	2320      	movs	r3, #32
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e2:	2311      	movs	r3, #17
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ea:	2301      	movs	r3, #1
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0x20c>)
 80012f6:	f002 f881 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_BL_Pin|LED_Pin;
 80012fa:	f242 0310 	movw	r3, #8208	; 0x2010
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_GPIO_Init+0x210>)
 8001314:	f002 f872 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_USB_Pin;
 8001318:	2308      	movs	r3, #8
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001324:	2301      	movs	r3, #1
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0x208>)
 8001330:	f002 f864 	bl	80033fc <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020800 	.word	0x40020800
 8001344:	40022000 	.word	0x40022000
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40020c00 	.word	0x40020c00

08001350 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2234      	movs	r2, #52	; 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f023 fdde 	bl	8024f1e <memset>

  hltdc.Instance = LTDC;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_LTDC_Init+0xfc>)
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <MX_LTDC_Init+0x100>)
 8001366:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_LTDC_Init+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <MX_LTDC_Init+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <MX_LTDC_Init+0xfc>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_LTDC_Init+0xfc>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 87;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <MX_LTDC_Init+0xfc>)
 8001382:	2257      	movs	r2, #87	; 0x57
 8001384:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 31;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_LTDC_Init+0xfc>)
 8001388:	221f      	movs	r2, #31
 800138a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 175;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_LTDC_Init+0xfc>)
 800138e:	22af      	movs	r2, #175	; 0xaf
 8001390:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 63;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_LTDC_Init+0xfc>)
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 975;
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_LTDC_Init+0xfc>)
 800139a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 543;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_LTDC_Init+0xfc>)
 80013a2:	f240 221f 	movw	r2, #543	; 0x21f
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1015;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_LTDC_Init+0xfc>)
 80013aa:	f240 32f7 	movw	r2, #1015	; 0x3f7
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 556;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_LTDC_Init+0xfc>)
 80013b2:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_LTDC_Init+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_LTDC_Init+0xfc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_LTDC_Init+0xfc>)
 80013d2:	f003 fedf 	bl	8005194 <HAL_LTDC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013dc:	f000 fa7c 	bl	80018d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80013e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80013ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013f8:	23ff      	movs	r3, #255	; 0xff
 80013fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800140a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001410:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001416:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_LTDC_Init+0xfc>)
 8001436:	f004 f835 	bl	80054a4 <HAL_LTDC_ConfigLayer>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001440:	f000 fa4a 	bl	80018d8 <Error_Handler>
  }

}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	; 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20001ed0 	.word	0x20001ed0
 8001450:	40016800 	.word	0x40016800

08001454 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_LTDC_MspInit+0x18c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	f040 80b0 	bne.w	80015d8 <HAL_LTDC_MspInit+0x184>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 8001482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001486:	6453      	str	r3, [r2, #68]	; 0x44
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 800150e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_LTDC_MspInit+0x190>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001520:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	230e      	movs	r3, #14
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	482a      	ldr	r0, [pc, #168]	; (80015e8 <HAL_LTDC_MspInit+0x194>)
 800153e:	f001 ff5d 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <HAL_LTDC_MspInit+0x198>)
 8001560:	f001 ff4c 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001574:	2309      	movs	r3, #9
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <HAL_LTDC_MspInit+0x19c>)
 8001580:	f001 ff3c 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8001584:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001596:	230e      	movs	r3, #14
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <HAL_LTDC_MspInit+0x1a0>)
 80015a2:	f001 ff2b 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80015a6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b8:	230e      	movs	r3, #14
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <HAL_LTDC_MspInit+0x1a4>)
 80015c4:	f001 ff1a 	bl	80033fc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2058      	movs	r0, #88	; 0x58
 80015ce:	f001 fa9c 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015d2:	2058      	movs	r0, #88	; 0x58
 80015d4:	f001 fab5 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40016800 	.word	0x40016800
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40021800 	.word	0x40021800

080015fc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    while ((USART1->SR & 0X40) == 0);
 8001604:	bf00      	nop
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <__io_putchar+0x2c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f9      	beq.n	8001606 <__io_putchar+0xa>
    USART1->DR = (uint8_t) ch;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__io_putchar+0x2c>)
 8001618:	605a      	str	r2, [r3, #4]
    return ch;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40011000 	.word	0x40011000

0800162c <timer_loop>:

uint8_t rUSB = 0;
uint8_t pre_state;
uint16_t usbCounter = 0;

void timer_loop(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	if(timer_irq == 0) return;
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <timer_loop+0xd8>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d062      	beq.n	80016fe <timer_loop+0xd2>
	timer_irq = 0;
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <timer_loop+0xd8>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

	touch_cnt++;
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <timer_loop+0xdc>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <timer_loop+0xdc>)
 8001648:	701a      	strb	r2, [r3, #0]
	if(touch_cnt > 20) {
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <timer_loop+0xdc>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d904      	bls.n	800165c <timer_loop+0x30>
		touch_cnt = 0;
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <timer_loop+0xdc>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		Touch_Scan();
 8001658:	f000 fd1a 	bl	8002090 <Touch_Scan>
	}

	usbCounter++;
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <timer_loop+0xe0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <timer_loop+0xe0>)
 8001666:	801a      	strh	r2, [r3, #0]
	if(usbCounter > 3000) {
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <timer_loop+0xe0>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001670:	4293      	cmp	r3, r2
 8001672:	d910      	bls.n	8001696 <timer_loop+0x6a>
		usbCounter = 0;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <timer_loop+0xe0>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
		printf("usbCounter. \r\n");
 800167a:	4825      	ldr	r0, [pc, #148]	; (8001710 <timer_loop+0xe4>)
 800167c:	f024 f83c 	bl	80256f8 <puts>
		if(rUSB == 1) {
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <timer_loop+0xe8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <timer_loop+0x6a>
			printf("Explore_Disk. \r\n");
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <timer_loop+0xec>)
 800168a:	f024 f835 	bl	80256f8 <puts>
			Explore_Disk(USBHPath, 1);
 800168e:	2101      	movs	r1, #1
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <timer_loop+0xf0>)
 8001692:	f7ff fb6b 	bl	8000d6c <Explore_Disk>
		}
	}

	MX_USB_HOST_Process();
 8001696:	f012 fb8d 	bl	8013db4 <MX_USB_HOST_Process>

	if (pre_state != Appli_state) {
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <timer_loop+0xf4>)
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <timer_loop+0xf8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d025      	beq.n	80016f2 <timer_loop+0xc6>
		switch(Appli_state) {
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <timer_loop+0xf8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d00b      	beq.n	80016c6 <timer_loop+0x9a>
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d000      	beq.n	80016b4 <timer_loop+0x88>
////					Explore_Disk("0:/", 1);
////					Explore_Disk(USBHPath, 1);
//				}
				break;
			default:
				break;
 80016b2:	e01f      	b.n	80016f4 <timer_loop+0xc8>
				printf("APPLICATION_DISCONNECT. \r\n");
 80016b4:	481c      	ldr	r0, [pc, #112]	; (8001728 <timer_loop+0xfc>)
 80016b6:	f024 f81f 	bl	80256f8 <puts>
				if(f_mount(NULL, "", 0) != FR_OK) {
 80016ba:	2200      	movs	r2, #0
 80016bc:	491b      	ldr	r1, [pc, #108]	; (800172c <timer_loop+0x100>)
 80016be:	2000      	movs	r0, #0
 80016c0:	f00c f970 	bl	800d9a4 <f_mount>
				break;
 80016c4:	e016      	b.n	80016f4 <timer_loop+0xc8>
				printf("APPLICATION_READY. \r\n");
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <timer_loop+0x104>)
 80016c8:	f024 f816 	bl	80256f8 <puts>
				if(f_mount(&USBDISKFatFs, (TCHAR const*)USBHPath, 0) != FR_OK) {
 80016cc:	2200      	movs	r2, #0
 80016ce:	4913      	ldr	r1, [pc, #76]	; (800171c <timer_loop+0xf0>)
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <timer_loop+0x108>)
 80016d2:	f00c f967 	bl	800d9a4 <f_mount>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <timer_loop+0xb8>
					printf("f_mount fails. \r\n");
 80016dc:	4816      	ldr	r0, [pc, #88]	; (8001738 <timer_loop+0x10c>)
 80016de:	f024 f80b 	bl	80256f8 <puts>
					break;
 80016e2:	e007      	b.n	80016f4 <timer_loop+0xc8>
					printf("f_mount success. \r\n");
 80016e4:	4815      	ldr	r0, [pc, #84]	; (800173c <timer_loop+0x110>)
 80016e6:	f024 f807 	bl	80256f8 <puts>
					rUSB = 1;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <timer_loop+0xe8>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
				break;
 80016f0:	e000      	b.n	80016f4 <timer_loop+0xc8>
		}
	}
 80016f2:	bf00      	nop
	pre_state = Appli_state;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <timer_loop+0xf8>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <timer_loop+0xf4>)
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e000      	b.n	8001700 <timer_loop+0xd4>
	if(timer_irq == 0) return;
 80016fe:	bf00      	nop
//			f_mount(NULL, "", 0);
//			break;
//		default:
//			break;
//	}
}
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000130 	.word	0x20000130
 8001708:	20000131 	.word	0x20000131
 800170c:	20000134 	.word	0x20000134
 8001710:	08025fa0 	.word	0x08025fa0
 8001714:	20000132 	.word	0x20000132
 8001718:	08025fb0 	.word	0x08025fb0
 800171c:	20001614 	.word	0x20001614
 8001720:	20001f78 	.word	0x20001f78
 8001724:	20001348 	.word	0x20001348
 8001728:	08025fc0 	.word	0x08025fc0
 800172c:	08025fdc 	.word	0x08025fdc
 8001730:	08025fe0 	.word	0x08025fe0
 8001734:	20001c20 	.word	0x20001c20
 8001738:	08025ff8 	.word	0x08025ff8
 800173c:	0802600c 	.word	0x0802600c

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Appli_state = APPLICATION_IDLE;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <main+0x7c>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
  pre_state = Appli_state;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <main+0x7c>)
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <main+0x80>)
 8001750:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001752:	f001 f849 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001756:	f000 f83b 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175a:	f7ff fcef 	bl	800113c <MX_GPIO_Init>
  MX_FMC_Init();
 800175e:	f7ff fbf9 	bl	8000f54 <MX_FMC_Init>
  MX_TIM2_Init();
 8001762:	f000 fa8f 	bl	8001c84 <MX_TIM2_Init>
  MX_LTDC_Init();
 8001766:	f7ff fdf3 	bl	8001350 <MX_LTDC_Init>
  MX_DMA2D_Init();
 800176a:	f7ff fb7f 	bl	8000e6c <MX_DMA2D_Init>
  MX_CRC_Init();
 800176e:	f7ff fb47 	bl	8000e00 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001772:	f000 ff95 	bl	80026a0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001776:	f012 faf7 	bl	8013d68 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800177a:	f007 f9e1 	bl	8008b40 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 800177e:	f00c fbb9 	bl	800def4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  // 点亮 LED
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2110      	movs	r1, #16
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <main+0x84>)
 8001788:	f001 fffa 	bl	8003780 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <main+0x88>)
 800178e:	f004 ff5f 	bl	8006650 <HAL_TIM_Base_Start_IT>

  SDRAM_Init();
 8001792:	f000 f8d9 	bl	8001948 <SDRAM_Init>

  HAL_Delay(100);
 8001796:	2064      	movs	r0, #100	; 0x64
 8001798:	f001 f898 	bl	80028cc <HAL_Delay>

  // 点亮 LCD
  HAL_GPIO_WritePin(LED_BL_GPIO_Port, LED_BL_Pin, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	4808      	ldr	r0, [pc, #32]	; (80017c4 <main+0x84>)
 80017a4:	f001 ffec 	bl	8003780 <HAL_GPIO_WritePin>

  printf("System running... \r\n");
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <main+0x8c>)
 80017aa:	f023 ffa5 	bl	80256f8 <puts>

  Touch_Init();				// 触摸屏初始化
 80017ae:	f000 fc07 	bl	8001fc0 <Touch_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    // MX_USB_HOST_Process();
	timer_loop();
 80017b2:	f7ff ff3b 	bl	800162c <timer_loop>
    MX_TouchGFX_Process();
 80017b6:	f00c fba3 	bl	800df00 <MX_TouchGFX_Process>
	timer_loop();
 80017ba:	e7fa      	b.n	80017b2 <main+0x72>
 80017bc:	20001348 	.word	0x20001348
 80017c0:	20001f78 	.word	0x20001f78
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	20001f7c 	.word	0x20001f7c
 80017cc:	08026020 	.word	0x08026020

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0a0      	sub	sp, #128	; 0x80
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017da:	2230      	movs	r2, #48	; 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f023 fb9d 	bl	8024f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2230      	movs	r2, #48	; 0x30
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f023 fb8e 	bl	8024f1e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <SystemClock_Config+0x100>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <SystemClock_Config+0x100>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <SystemClock_Config+0x100>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <SystemClock_Config+0x104>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <SystemClock_Config+0x104>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <SystemClock_Config+0x104>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183e:	2301      	movs	r3, #1
 8001840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001850:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001852:	230f      	movs	r3, #15
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001856:	2390      	movs	r3, #144	; 0x90
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800185e:	2305      	movs	r3, #5
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f82a 	bl	80058c0 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001872:	f000 f831 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187a:	2302      	movs	r3, #2
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800188e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001892:	2103      	movs	r1, #3
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fa83 	bl	8005da0 <HAL_RCC_ClockConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018a0:	f000 f81a 	bl	80018d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018a4:	2308      	movs	r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80018a8:	233c      	movs	r3, #60	; 0x3c
 80018aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fc3d 	bl	8006138 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80018c4:	f000 f808 	bl	80018d8 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3780      	adds	r7, #128	; 0x80
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SDRAM_SendCommand>:
 */
#include "main.h"
#include "sdram_fmc_drv.h"

static int SDRAM_SendCommand(uint32_t CommandMode, uint32_t Bank, uint32_t RefreshNum, uint32_t RegVal)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
    uint32_t CommandTarget;
    FMC_SDRAM_CommandTypeDef Command;

    if (Bank == 1) {
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d102      	bne.n	8001902 <SDRAM_SendCommand+0x1a>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80018fc:	2310      	movs	r3, #16
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e004      	b.n	800190c <SDRAM_SendCommand+0x24>
    } else if (Bank == 2) {
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d101      	bne.n	800190c <SDRAM_SendCommand+0x24>
        CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8001908:	2308      	movs	r3, #8
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    Command.CommandMode = CommandMode;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	617b      	str	r3, [r7, #20]
    Command.CommandTarget = CommandTarget;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	61bb      	str	r3, [r7, #24]
    Command.AutoRefreshNumber = RefreshNum;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	61fb      	str	r3, [r7, #28]
    Command.ModeRegisterDefinition = RegVal;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	623b      	str	r3, [r7, #32]

    if (HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK) {
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001924:	4619      	mov	r1, r3
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <SDRAM_SendCommand+0x5c>)
 8001928:	f004 fe1c 	bl	8006564 <HAL_SDRAM_SendCommand>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <SDRAM_SendCommand+0x50>
        return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e000      	b.n	800193a <SDRAM_SendCommand+0x52>
    }

    return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20001e9c 	.word	0x20001e9c

08001948 <SDRAM_Init>:

void SDRAM_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
    uint32_t temp;

    /* 1. 时钟使能命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_CLK_ENABLE, 2, 1, 0);
 800194e:	2300      	movs	r3, #0
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff ffc7 	bl	80018e8 <SDRAM_SendCommand>

    /* 2. 延时，至少100us */
    HAL_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 ffb6 	bl	80028cc <HAL_Delay>

    /* 3. SDRAM全部预充电命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_PALL, 2, 1, 0);
 8001960:	2300      	movs	r3, #0
 8001962:	2201      	movs	r2, #1
 8001964:	2102      	movs	r1, #2
 8001966:	2002      	movs	r0, #2
 8001968:	f7ff ffbe 	bl	80018e8 <SDRAM_SendCommand>

    /* 4. 自动刷新命令 */
    SDRAM_SendCommand(FMC_SDRAM_CMD_AUTOREFRESH_MODE, 2, 8, 0);
 800196c:	2300      	movs	r3, #0
 800196e:	2208      	movs	r2, #8
 8001970:	2102      	movs	r1, #2
 8001972:	2003      	movs	r0, #3
 8001974:	f7ff ffb8 	bl	80018e8 <SDRAM_SendCommand>

    /* 5. 配置SDRAM模式寄存器 */
    temp = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1            |          //设置突发长度：1
 8001978:	f44f 730c 	mov.w	r3, #560	; 0x230
 800197c:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL     |          //设置突发类型：连续
                     SDRAM_MODEREG_CAS_LATENCY_3             |          //设置CL值：3
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD   |          //设置操作模式：标准
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;              //设置突发写模式：单点访问
    SDRAM_SendCommand(FMC_SDRAM_CMD_LOAD_MODE, 2, 1, temp);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	2102      	movs	r1, #2
 8001984:	2004      	movs	r0, #4
 8001986:	f7ff ffaf 	bl	80018e8 <SDRAM_SendCommand>
    /*
        SDRAM refresh period / Number of rows）*SDRAM时钟速度 – 20
      = 64000(64 ms) / 4096 *108MHz - 20
      = 1667.5 取值1668
    */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1668);
 800198a:	f240 6184 	movw	r1, #1668	; 0x684
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <SDRAM_Init+0x54>)
 8001990:	f004 fe13 	bl	80065ba <HAL_SDRAM_ProgramRefreshRate>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20001e9c 	.word	0x20001e9c

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_MspInit+0x4c>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 ff22 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	timer_irq = 1;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <TIM2_IRQHandler+0x14>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <TIM2_IRQHandler+0x18>)
 8001a58:	f004 fe1e 	bl	8006698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000130 	.word	0x20000130
 8001a64:	20001f7c 	.word	0x20001f7c

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f005 fa1d 	bl	8006eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20001fd4 	.word	0x20001fd4

08001a7c <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <FMC_IRQHandler+0x10>)
 8001a82:	f004 fd4b 	bl	800651c <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20001e9c 	.word	0x20001e9c

08001a90 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <OTG_HS_IRQHandler+0x10>)
 8001a96:	f002 f91b 	bl	8003cd0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20002858 	.word	0x20002858

08001aa4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <LTDC_IRQHandler+0x10>)
 8001aaa:	f003 fc43 	bl	8005334 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20001ed0 	.word	0x20001ed0

08001ab8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA2D_IRQHandler+0x10>)
 8001abe:	f001 fa5e 	bl	8002f7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20001e5c 	.word	0x20001e5c

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae6:	f023 f9c3 	bl	8024e70 <__errno>
 8001aea:	4602      	mov	r2, r0
 8001aec:	2316      	movs	r3, #22
 8001aee:	6013      	str	r3, [r2, #0]
	return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
	}

return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fd49 	bl	80015fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
	}
	return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f023 f928 	bl	8024e70 <__errno>
 8001c20:	4602      	mov	r2, r0
 8001c22:	230c      	movs	r3, #12
 8001c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20030000 	.word	0x20030000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20000138 	.word	0x20000138
 8001c54:	20002b20 	.word	0x20002b20

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <SystemInit+0x28>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <SystemInit+0x28>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SystemInit+0x28>)
 8001c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c72:	609a      	str	r2, [r3, #8]
#endif
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90 - 1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001caa:	2259      	movs	r2, #89	; 0x59
 8001cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cca:	f004 fc96 	bl	80065fa <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cd4:	f7ff fe00 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001ce6:	f004 fddf 	bl	80068a8 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cf0:	f7ff fdf2 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001d02:	f004 fff5 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d0c:	f7ff fde4 	bl	80018d8 <Error_Handler>
  }

}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20001f7c 	.word	0x20001f7c

08001d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d115      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_TIM_Base_MspInit+0x48>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	201c      	movs	r0, #28
 8001d50:	f000 fedb 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d54:	201c      	movs	r0, #28
 8001d56:	f000 fef4 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <GT9XX_Reset>:
*	函数功能:	复位GT911
*	说    明:	复位GT911，并将芯片的IIC地址配置为0xBA/0xBB
******************************************************************************************/

void GT9XX_Reset(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	Touch_INT_Out();	//	将INT引脚配置为输出
 8001d6c:	f000 fb0c 	bl	8002388 <Touch_INT_Out>

	// 初始化引脚状态
	HAL_GPIO_WritePin(Touch_INT_PORT,Touch_INT_PIN,GPIO_PIN_RESET);  // INT输出低电平
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <GT9XX_Reset+0x5c>)
 8001d78:	f001 fd02 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);    // RST输出高	电平
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d82:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <GT9XX_Reset+0x60>)
 8001d84:	f001 fcfc 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(10000);
 8001d88:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d8c:	f000 fae2 	bl	8002354 <Touch_IIC_Delay>

	// 开始执行复位
	//	INT引脚保持低电平不变，将器件地址设置为0XBA/0XBB
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_RESET); // 拉低复位引脚，此时芯片执行复位
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <GT9XX_Reset+0x60>)
 8001d98:	f001 fcf2 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(250000);										// 延时
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <GT9XX_Reset+0x64>)
 8001d9e:	f000 fad9 	bl	8002354 <Touch_IIC_Delay>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);			// 拉高复位引脚，复位结束
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <GT9XX_Reset+0x60>)
 8001daa:	f001 fce9 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(450000);										// 延时
 8001dae:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <GT9XX_Reset+0x68>)
 8001db0:	f000 fad0 	bl	8002354 <Touch_IIC_Delay>
	Touch_INT_In();													// INT引脚转为浮空输入
 8001db4:	f000 fb06 	bl	80023c4 <Touch_INT_In>
	Touch_IIC_Delay(350000);										// 延时
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <GT9XX_Reset+0x6c>)
 8001dba:	f000 facb 	bl	8002354 <Touch_IIC_Delay>

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	0003d090 	.word	0x0003d090
 8001dd0:	0006ddd0 	.word	0x0006ddd0
 8001dd4:	00055730 	.word	0x00055730

08001dd8 <GT9XX_WriteHandle>:
*	函数功能:	GT9XX 写操作
*	说    明:	对指定的寄存器执行写操作
******************************************************************************************/

uint8_t GT9XX_WriteHandle (uint16_t addr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
	uint8_t status;				// 状态标志位

	Touch_IIC_Start();	// 启动IIC通信
 8001de2:	f000 fb0d 	bl	8002400 <Touch_IIC_Start>
	if( Touch_IIC_WriteByte(GT9XX_IIC_WADDR) == ACK_OK ) //写数据指令
 8001de6:	20ba      	movs	r0, #186	; 0xba
 8001de8:	f000 fbd6 	bl	8002598 <Touch_IIC_WriteByte>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d113      	bne.n	8001e1a <GT9XX_WriteHandle+0x42>
	{
		if( Touch_IIC_WriteByte((uint8_t)(addr >> 8)) == ACK_OK ) //写入16位地址
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fbcc 	bl	8002598 <Touch_IIC_WriteByte>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d109      	bne.n	8001e1a <GT9XX_WriteHandle+0x42>
		{
			if( Touch_IIC_WriteByte((uint8_t)(addr)) != ACK_OK )
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fbc4 	bl	8002598 <Touch_IIC_WriteByte>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <GT9XX_WriteHandle+0x42>
			{
				status = ERROR;	// 操作失败
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	status = SUCCESS;	// 操作成功
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
	return status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <GT9XX_WriteData>:
*	函数功能:	GT9XX 写一字节数据
*	说    明:	对指定的寄存器写入一字节数据
******************************************************************************************/

uint8_t GT9XX_WriteData (uint16_t addr,uint8_t value)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4613      	mov	r3, r2
 8001e36:	717b      	strb	r3, [r7, #5]
	uint8_t status;

	Touch_IIC_Start(); //启动IIC通讯
 8001e38:	f000 fae2 	bl	8002400 <Touch_IIC_Start>

	if( GT9XX_WriteHandle(addr) == SUCCESS)	//写入要操作的寄存器
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffca 	bl	8001dd8 <GT9XX_WriteHandle>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <GT9XX_WriteData+0x34>
	{
		if (Touch_IIC_WriteByte(value) != ACK_OK) //写数据
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fba3 	bl	8002598 <Touch_IIC_WriteByte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <GT9XX_WriteData+0x34>
		{
			status = ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
		}
	}
	Touch_IIC_Stop(); // 停止通讯
 8001e5c:	f000 faf4 	bl	8002448 <Touch_IIC_Stop>

	status = SUCCESS;	// 写入成功
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
	return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <GT9XX_ReadReg>:
*	函数功能:	GT9XX 读寄存器
*	说    明:	从芯片的寄存器区读取指定长度的数据
******************************************************************************************/

uint8_t GT9XX_ReadReg (uint16_t addr, uint8_t cnt, uint8_t *value)
{
 8001e6e:	b590      	push	{r4, r7, lr}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	603a      	str	r2, [r7, #0]
 8001e78:	80fb      	strh	r3, [r7, #6]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	717b      	strb	r3, [r7, #5]
	uint8_t status;
	uint8_t i;

	status = ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
	Touch_IIC_Start();		// 启动IIC通信
 8001e82:	f000 fabd 	bl	8002400 <Touch_IIC_Start>

	if( GT9XX_WriteHandle(addr) == SUCCESS) //写入要操作的寄存器
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffa5 	bl	8001dd8 <GT9XX_WriteHandle>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d12b      	bne.n	8001eec <GT9XX_ReadReg+0x7e>
	{
		Touch_IIC_Start(); //重新启动IIC通讯
 8001e94:	f000 fab4 	bl	8002400 <Touch_IIC_Start>

		if (Touch_IIC_WriteByte(GT9XX_IIC_RADDR) == ACK_OK)	// 发送读命令
 8001e98:	20bb      	movs	r0, #187	; 0xbb
 8001e9a:	f000 fb7d 	bl	8002598 <Touch_IIC_WriteByte>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d123      	bne.n	8001eec <GT9XX_ReadReg+0x7e>
		{
			for(i = 0 ; i < cnt; i++)	// 计数
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73bb      	strb	r3, [r7, #14]
 8001ea8:	e018      	b.n	8001edc <GT9XX_ReadReg+0x6e>
			{
				if (i == (cnt - 1))
 8001eaa:	7bba      	ldrb	r2, [r7, #14]
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d108      	bne.n	8001ec6 <GT9XX_ReadReg+0x58>
				{
					value[i] = Touch_IIC_ReadByte(0);	// 读到最后一个数据时发送 非应答信号
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	18d4      	adds	r4, r2, r3
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 fbae 	bl	800261c <Touch_IIC_ReadByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	7023      	strb	r3, [r4, #0]
 8001ec4:	e007      	b.n	8001ed6 <GT9XX_ReadReg+0x68>
				}
				else
				{
					value[i] = Touch_IIC_ReadByte(1);	// 发送应答信号
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	18d4      	adds	r4, r2, r3
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 fba5 	bl	800261c <Touch_IIC_ReadByte>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	7023      	strb	r3, [r4, #0]
			for(i = 0 ; i < cnt; i++)	// 计数
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73bb      	strb	r3, [r7, #14]
 8001edc:	7bba      	ldrb	r2, [r7, #14]
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3e2      	bcc.n	8001eaa <GT9XX_ReadReg+0x3c>
				}
			}
			Touch_IIC_Stop();	// 停止IIC通信
 8001ee4:	f000 fab0 	bl	8002448 <Touch_IIC_Stop>
			status = SUCCESS;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
		}
	}
	Touch_IIC_Stop();	// 停止IIC通信
 8001eec:	f000 faac 	bl	8002448 <Touch_IIC_Stop>
	return (status);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
	...

08001efc <PanelRecognition>:
*				 旧版本的RST和INT引脚并没有连接到核心板，因此可以根据这两个引脚的电平状态进行识别，其它版本
*				 的屏幕无需理会此处
******************************************************************************************************************/

void	PanelRecognition (void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]

	Touch_INT_CLK_ENABLE;	//初始化IO口时钟
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
	Touch_RST_CLK_ENABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <PanelRecognition+0xb4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		//	输入模式
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;		 			//	下拉输入
 8001f4e:	2302      	movs	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f5a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4619      	mov	r1, r3
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <PanelRecognition+0xb8>)
 8001f64:	f001 fa4a 	bl	80033fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin  = Touch_RST_PIN; 					//	RST
 8001f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <PanelRecognition+0xb8>)
 8001f76:	f001 fa41 	bl	80033fc <HAL_GPIO_Init>

	Touch_IIC_Delay(4000);		// 延时
 8001f7a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001f7e:	f000 f9e9 	bl	8002354 <Touch_IIC_Delay>

	//	 7寸屏 V1.1 之前版本的RST和INT引脚并没有连接到核心板，因此可以根据这两个引脚的电平状态进行识别，
	//	 其它版本的屏幕无需理会此处
	if( (HAL_GPIO_ReadPin(Touch_RST_PORT,Touch_RST_PIN) != 1) && (HAL_GPIO_ReadPin(Touch_INT_PORT,Touch_INT_PIN) != 1)  )
 8001f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <PanelRecognition+0xbc>)
 8001f88:	f001 fbe2 	bl	8003750 <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00a      	beq.n	8001fa8 <PanelRecognition+0xac>
 8001f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <PanelRecognition+0xb8>)
 8001f98:	f001 fbda 	bl	8003750 <HAL_GPIO_ReadPin>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d002      	beq.n	8001fa8 <PanelRecognition+0xac>
	{
		// 7寸屏 V1.1 之前版本的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
		//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
		//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
		Modify_Flag	= 1;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <PanelRecognition+0xc0>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	2000013c 	.word	0x2000013c

08001fc0 <Touch_Init>:
*	函数功能: 触摸IC初始化，并读取相应信息发送到串口
*	说    明: 初始化触摸面板
******************************************************************************************/

uint8_t Touch_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
	uint8_t GT9XX_Info[11];	// 触摸屏IC信息
	uint8_t cfgVersion = 0;	// 触摸配置版本
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	70fb      	strb	r3, [r7, #3]

	PanelRecognition();			// 识别屏幕面板的版本，在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
 8001fca:	f7ff ff97 	bl	8001efc <PanelRecognition>
	Touch_IIC_GPIO_Config(); 	// 初始化IIC引脚
 8001fce:	f000 f92f 	bl	8002230 <Touch_IIC_GPIO_Config>
	GT9XX_Reset();					// 复位IC
 8001fd2:	f7ff fec9 	bl	8001d68 <GT9XX_Reset>

	GT9XX_ReadReg (GT9XX_ID_ADDR,11,GT9XX_Info);		// 读触摸屏IC信息
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	461a      	mov	r2, r3
 8001fda:	210b      	movs	r1, #11
 8001fdc:	f248 1040 	movw	r0, #33088	; 0x8140
 8001fe0:	f7ff ff45 	bl	8001e6e <GT9XX_ReadReg>
	GT9XX_ReadReg (GT9XX_CFG_ADDR,1,&cfgVersion);	// 读触摸配置版本
 8001fe4:	1cfb      	adds	r3, r7, #3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f248 0047 	movw	r0, #32839	; 0x8047
 8001fee:	f7ff ff3e 	bl	8001e6e <GT9XX_ReadReg>

	if( GT9XX_Info[0] == '9' )		//	判断第一个字符是否为 ‘9’
 8001ff2:	793b      	ldrb	r3, [r7, #4]
 8001ff4:	2b39      	cmp	r3, #57	; 0x39
 8001ff6:	d134      	bne.n	8002062 <Touch_Init+0xa2>
	{
		printf("Touch ID: GT%.4s \r\n",GT9XX_Info);									// 打印触摸芯片的ID
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481d      	ldr	r0, [pc, #116]	; (8002074 <Touch_Init+0xb4>)
 8001ffe:	f023 fb07 	bl	8025610 <iprintf>
		printf("Version: 0X%.4x\r\n",(GT9XX_Info[5]<<8) + GT9XX_Info[4]);	// 芯片固件版本
 8002002:	7a7b      	ldrb	r3, [r7, #9]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	7a3a      	ldrb	r2, [r7, #8]
 8002008:	4413      	add	r3, r2
 800200a:	4619      	mov	r1, r3
 800200c:	481a      	ldr	r0, [pc, #104]	; (8002078 <Touch_Init+0xb8>)
 800200e:	f023 faff 	bl	8025610 <iprintf>
		printf("XY: %d * %d\r\n",(GT9XX_Info[7]<<8) + GT9XX_Info[6],(GT9XX_Info[9]<<8) +GT9XX_Info[8]);	// 当前触摸分辨率
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	7aba      	ldrb	r2, [r7, #10]
 8002018:	1899      	adds	r1, r3, r2
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	7b3a      	ldrb	r2, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	461a      	mov	r2, r3
 8002024:	4815      	ldr	r0, [pc, #84]	; (800207c <Touch_Init+0xbc>)
 8002026:	f023 faf3 	bl	8025610 <iprintf>
		printf("Touch V: 0X%.2x \r\n",cfgVersion);	// 触摸配置版本
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	4619      	mov	r1, r3
 800202e:	4814      	ldr	r0, [pc, #80]	; (8002080 <Touch_Init+0xc0>)
 8002030:	f023 faee 	bl	8025610 <iprintf>

		if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 1024 )		// 判断触摸屏的X轴分辨率是否为1024
 8002034:	7afb      	ldrb	r3, [r7, #11]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	7aba      	ldrb	r2, [r7, #10]
 800203a:	4413      	add	r3, r2
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002040:	d103      	bne.n	800204a <Touch_Init+0x8a>
		{
			// 在 7寸屏 V1.1 之前的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
			//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
			//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
			Modify_Flag	= 1;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <Touch_Init+0xc4>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e009      	b.n	800205e <Touch_Init+0x9e>
		}
		else if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 800 )	// 触摸屏的X轴分辨率为800
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	7aba      	ldrb	r2, [r7, #10]
 8002050:	4413      	add	r3, r2
 8002052:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002056:	d102      	bne.n	800205e <Touch_Init+0x9e>
		{
			Modify_Flag	= 0;	// 置0标志位，无需做处理
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <Touch_Init+0xc4>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
		}

		return SUCCESS;
 800205e:	2300      	movs	r3, #0
 8002060:	e003      	b.n	800206a <Touch_Init+0xaa>
	}
	else
	{
		printf("未检测到触摸IC\r\n");			//错误，未检测到触摸屏
 8002062:	4809      	ldr	r0, [pc, #36]	; (8002088 <Touch_Init+0xc8>)
 8002064:	f023 fb48 	bl	80256f8 <puts>
		return ERROR;
 8002068:	2301      	movs	r3, #1
	}

}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	08026038 	.word	0x08026038
 8002078:	0802604c 	.word	0x0802604c
 800207c:	08026060 	.word	0x08026060
 8002080:	08026070 	.word	0x08026070
 8002084:	2000013c 	.word	0x2000013c
 8002088:	08026084 	.word	0x08026084
 800208c:	00000000 	.word	0x00000000

08002090 <Touch_Scan>:
*	函数功能: 触摸扫描
*	说    明: 在程序里周期性的调用该函数，用以检测触摸操作，触摸信息存储在 touchInfo 结构体
******************************************************************************************/

void Touch_Scan(void)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b08d      	sub	sp, #52	; 0x34
 8002094:	af00      	add	r7, sp, #0
 	uint8_t  touchData[2 + 8 * TOUCH_MAX ]; 		// 用于存储触摸数据
	uint8_t  i = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	GT9XX_ReadReg (GT9XX_READ_ADDR,2 + 8 * TOUCH_MAX ,touchData);		// 读数据
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	461a      	mov	r2, r3
 80020a0:	212a      	movs	r1, #42	; 0x2a
 80020a2:	f248 104e 	movw	r0, #33102	; 0x814e
 80020a6:	f7ff fee2 	bl	8001e6e <GT9XX_ReadReg>
	GT9XX_WriteData (GT9XX_READ_ADDR,0);								//	清除触摸芯片的寄存器标志位
 80020aa:	2100      	movs	r1, #0
 80020ac:	f248 104e 	movw	r0, #33102	; 0x814e
 80020b0:	f7ff feba 	bl	8001e28 <GT9XX_WriteData>
//	for(i = 0; i < 8; i++) {
//		printf("%x ", touchData[i]);
//	}
//	printf("\r\n");

	touchInfo.num = touchData[0] & 0x0f;								// 取当前的触摸点数
 80020b4:	793b      	ldrb	r3, [r7, #4]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <Touch_Scan+0x198>)
 80020be:	705a      	strb	r2, [r3, #1]


	if ( (touchInfo.num >= 1) && (touchInfo.num <=5) ) 					// 当触摸数在 1-5 之间时
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <Touch_Scan+0x198>)
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 809d 	beq.w	8002204 <Touch_Scan+0x174>
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <Touch_Scan+0x198>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	f200 8098 	bhi.w	8002204 <Touch_Scan+0x174>
	{
		for(i=0;i<touchInfo.num;i++)									// 取相应的触摸坐标
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020da:	e088      	b.n	80021ee <Touch_Scan+0x15e>
		{
			touchInfo.y[i] = (touchData[5+8*i]<<8) | touchData[4+8*i];	// 获取Y坐标
 80020dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	3305      	adds	r3, #5
 80020e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020e8:	4413      	add	r3, r2
 80020ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	3304      	adds	r3, #4
 80020fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020fe:	440b      	add	r3, r1
 8002100:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21a      	sxth	r2, r3
 800210a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800210e:	b291      	uxth	r1, r2
 8002110:	4a45      	ldr	r2, [pc, #276]	; (8002228 <Touch_Scan+0x198>)
 8002112:	3304      	adds	r3, #4
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	460a      	mov	r2, r1
 800211a:	809a      	strh	r2, [r3, #4]
			touchInfo.x[i] = (touchData[3+8*i]<<8) | touchData[2+8*i];	//	获取X坐标
 800211c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	3303      	adds	r3, #3
 8002124:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002128:	4413      	add	r3, r2
 800212a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	3302      	adds	r3, #2
 800213a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800213e:	440b      	add	r3, r1
 8002140:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21a      	sxth	r2, r3
 800214a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800214e:	b291      	uxth	r1, r2
 8002150:	4a35      	ldr	r2, [pc, #212]	; (8002228 <Touch_Scan+0x198>)
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	460a      	mov	r2, r1
 8002158:	805a      	strh	r2, [r3, #2]

			// 在 7寸屏 V1.1 之前的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
			//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
			//	在 7寸屏 V1.1开始以及其它尺寸的面板，无需理会此段代码
			if( Modify_Flag == 1)
 800215a:	4b34      	ldr	r3, [pc, #208]	; (800222c <Touch_Scan+0x19c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d13f      	bne.n	80021e4 <Touch_Scan+0x154>
			{
				touchInfo.y[i] *= 0.8;		// 将1024*600分辨率的触摸坐标换算成800*480的分辨率
 8002164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <Touch_Scan+0x198>)
 800216a:	3304      	adds	r3, #4
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	889b      	ldrh	r3, [r3, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9de 	bl	8000534 <__aeabi_i2d>
 8002178:	a327      	add	r3, pc, #156	; (adr r3, 8002218 <Touch_Scan+0x188>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa43 	bl	8000608 <__aeabi_dmul>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fc4b 	bl	8000a2c <__aeabi_d2uiz>
 8002196:	4603      	mov	r3, r0
 8002198:	b299      	uxth	r1, r3
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <Touch_Scan+0x198>)
 800219c:	1d23      	adds	r3, r4, #4
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	460a      	mov	r2, r1
 80021a4:	809a      	strh	r2, [r3, #4]
				touchInfo.x[i] *= 0.78;		// 将1024*600分辨率的触摸坐标换算成800*480的分辨率
 80021a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <Touch_Scan+0x198>)
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	885b      	ldrh	r3, [r3, #2]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9be 	bl	8000534 <__aeabi_i2d>
 80021b8:	a319      	add	r3, pc, #100	; (adr r3, 8002220 <Touch_Scan+0x190>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe fa23 	bl	8000608 <__aeabi_dmul>
 80021c2:	4603      	mov	r3, r0
 80021c4:	460c      	mov	r4, r1
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fc2b 	bl	8000a2c <__aeabi_d2uiz>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b299      	uxth	r1, r3
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <Touch_Scan+0x198>)
 80021dc:	0063      	lsls	r3, r4, #1
 80021de:	4413      	add	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	805a      	strh	r2, [r3, #2]
		for(i=0;i<touchInfo.num;i++)									// 取相应的触摸坐标
 80021e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <Touch_Scan+0x198>)
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021f6:	429a      	cmp	r2, r3
 80021f8:	f4ff af70 	bcc.w	80020dc <Touch_Scan+0x4c>
			}
		}
		touchInfo.flag = 1;		// 触摸标志位置1，代表有触摸动作发生
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <Touch_Scan+0x198>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e002      	b.n	800220a <Touch_Scan+0x17a>
	}
	else
	{
		touchInfo.flag = 0;		// 触摸标志位置0，无触摸动作
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <Touch_Scan+0x198>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
	}
}
 800220a:	bf00      	nop
 800220c:	3734      	adds	r7, #52	; 0x34
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	9999999a 	.word	0x9999999a
 800221c:	3fe99999 	.word	0x3fe99999
 8002220:	8f5c28f6 	.word	0x8f5c28f6
 8002224:	3fe8f5c2 	.word	0x3fe8f5c2
 8002228:	20001fbc 	.word	0x20001fbc
 800222c:	2000013c 	.word	0x2000013c

08002230 <Touch_IIC_GPIO_Config>:
*	函数功能: 初始化IIC的GPIO口,推挽输出
*	说    明: 由于IIC通信速度不高，这里的IO口速度配置为2M即可
******************************************************************************************/

void Touch_IIC_GPIO_Config (void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]

	Touch_IIC_SCL_CLK_ENABLE;	//初始化IO口时钟
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
	Touch_IIC_SDA_CLK_ENABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a36      	ldr	r2, [pc, #216]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
	Touch_INT_CLK_ENABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
	Touch_RST_CLK_ENABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <Touch_IIC_GPIO_Config+0x114>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 			= Touch_IIC_SCL_PIN;				// SCL引脚
 80022b6:	2310      	movs	r3, #16
 80022b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_OD;			// 开漏输出
 80022ba:	2311      	movs	r3, #17
 80022bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;						// 不带上下拉
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;			// 速度等级
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Touch_IIC_SCL_PORT, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	481e      	ldr	r0, [pc, #120]	; (8002348 <Touch_IIC_GPIO_Config+0x118>)
 80022ce:	f001 f895 	bl	80033fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= Touch_IIC_SDA_PIN;				// SDA引脚
 80022d2:	2320      	movs	r3, #32
 80022d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_IIC_SDA_PORT, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	481a      	ldr	r0, [pc, #104]	; (8002348 <Touch_IIC_GPIO_Config+0x118>)
 80022de:	f001 f88d 	bl	80033fc <HAL_GPIO_Init>


	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;      			// 推挽输出
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 					// 上拉
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Pin = Touch_INT_PIN; 							//	INT
 80022ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4815      	ldr	r0, [pc, #84]	; (800234c <Touch_IIC_GPIO_Config+0x11c>)
 80022f8:	f001 f880 	bl	80033fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Touch_RST_PIN; 							//	RST
 80022fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002300:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <Touch_IIC_GPIO_Config+0x120>)
 800230a:	f001 f877 	bl	80033fc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(Touch_IIC_SCL_PORT, Touch_IIC_SCL_PIN, GPIO_PIN_SET);		// SCL输出高电平
 800230e:	2201      	movs	r2, #1
 8002310:	2110      	movs	r1, #16
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <Touch_IIC_GPIO_Config+0x118>)
 8002314:	f001 fa34 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_IIC_SDA_PORT, Touch_IIC_SDA_PIN, GPIO_PIN_SET);    // SDA输出高电平
 8002318:	2201      	movs	r2, #1
 800231a:	2120      	movs	r1, #32
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <Touch_IIC_GPIO_Config+0x118>)
 800231e:	f001 fa2f 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_INT_PORT, 	  Touch_INT_PIN,     GPIO_PIN_RESET);  // INT输出低电平
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <Touch_IIC_GPIO_Config+0x11c>)
 800232a:	f001 fa29 	bl	8003780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,     Touch_RST_PIN,     GPIO_PIN_SET);    // RST输出高	电平
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <Touch_IIC_GPIO_Config+0x120>)
 8002336:	f001 fa23 	bl	8003780 <HAL_GPIO_WritePin>

}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40021c00 	.word	0x40021c00
 800234c:	40022000 	.word	0x40022000
 8002350:	40020800 	.word	0x40020800

08002354 <Touch_IIC_Delay>:
*	函数功能: 简单延时函数
*	说    明: 为了移植的简便性且对延时精度要求不高，所以不需要使用定时器做延时
******************************************************************************************/

void Touch_IIC_Delay(uint32_t a)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	int i;
	while (a --)
 800235c:	e008      	b.n	8002370 <Touch_IIC_Delay+0x1c>
	{
		for (i = 0; i < 10; i++);
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e002      	b.n	800236a <Touch_IIC_Delay+0x16>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b09      	cmp	r3, #9
 800236e:	ddf9      	ble.n	8002364 <Touch_IIC_Delay+0x10>
	while (a --)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <Touch_IIC_Delay+0xa>
	}
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <Touch_INT_Out>:
*	函数功能: 配置IIC的INT脚为输出模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_Out(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;      	// 输出模式
 800239c:	2301      	movs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 			// 上拉
 80023a0:	2301      	movs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 80023a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ac:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <Touch_INT_Out+0x38>)
 80023b4:	f001 f822 	bl	80033fc <HAL_GPIO_Init>
}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40022000 	.word	0x40022000

080023c4 <Touch_INT_In>:
*	函数功能: 配置IIC的INT脚为输入模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_In(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		// 输入模式
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;		 			// 浮空
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 80023e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <Touch_INT_In+0x38>)
 80023f0:	f001 f804 	bl	80033fc <HAL_GPIO_Init>

}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40022000 	.word	0x40022000

08002400 <Touch_IIC_Start>:
*	函数功能: IIC起始信号
*	说    明: 在SCL处于高电平期间，SDA由高到低跳变为起始信号
******************************************************************************************/

void Touch_IIC_Start(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	Touch_IIC_SDA(1);
 8002404:	2201      	movs	r2, #1
 8002406:	2120      	movs	r1, #32
 8002408:	480e      	ldr	r0, [pc, #56]	; (8002444 <Touch_IIC_Start+0x44>)
 800240a:	f001 f9b9 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_SCL(1);
 800240e:	2201      	movs	r2, #1
 8002410:	2110      	movs	r1, #16
 8002412:	480c      	ldr	r0, [pc, #48]	; (8002444 <Touch_IIC_Start+0x44>)
 8002414:	f001 f9b4 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002418:	2014      	movs	r0, #20
 800241a:	f7ff ff9b 	bl	8002354 <Touch_IIC_Delay>

	Touch_IIC_SDA(0);
 800241e:	2200      	movs	r2, #0
 8002420:	2120      	movs	r1, #32
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <Touch_IIC_Start+0x44>)
 8002424:	f001 f9ac 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002428:	2014      	movs	r0, #20
 800242a:	f7ff ff93 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SCL(0);
 800242e:	2200      	movs	r2, #0
 8002430:	2110      	movs	r1, #16
 8002432:	4804      	ldr	r0, [pc, #16]	; (8002444 <Touch_IIC_Start+0x44>)
 8002434:	f001 f9a4 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002438:	2014      	movs	r0, #20
 800243a:	f7ff ff8b 	bl	8002354 <Touch_IIC_Delay>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021c00 	.word	0x40021c00

08002448 <Touch_IIC_Stop>:
*	函数功能: IIC停止信号
*	说    明: 在SCL处于高电平期间，SDA由低到高跳变为起始信号
******************************************************************************************/

void Touch_IIC_Stop(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 800244c:	2200      	movs	r2, #0
 800244e:	2110      	movs	r1, #16
 8002450:	480f      	ldr	r0, [pc, #60]	; (8002490 <Touch_IIC_Stop+0x48>)
 8002452:	f001 f995 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002456:	2014      	movs	r0, #20
 8002458:	f7ff ff7c 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SDA(0);
 800245c:	2200      	movs	r2, #0
 800245e:	2120      	movs	r1, #32
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <Touch_IIC_Stop+0x48>)
 8002462:	f001 f98d 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002466:	2014      	movs	r0, #20
 8002468:	f7ff ff74 	bl	8002354 <Touch_IIC_Delay>

	Touch_IIC_SCL(1);
 800246c:	2201      	movs	r2, #1
 800246e:	2110      	movs	r1, #16
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <Touch_IIC_Stop+0x48>)
 8002472:	f001 f985 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002476:	2014      	movs	r0, #20
 8002478:	f7ff ff6c 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SDA(1);
 800247c:	2201      	movs	r2, #1
 800247e:	2120      	movs	r1, #32
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <Touch_IIC_Stop+0x48>)
 8002482:	f001 f97d 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002486:	2014      	movs	r0, #20
 8002488:	f7ff ff64 	bl	8002354 <Touch_IIC_Delay>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021c00 	.word	0x40021c00

08002494 <Touch_IIC_ACK>:
*	函数功能: IIC应答信号
*	说    明: 在SCL为高电平期间，SDA引脚输出为低电平，产生应答信号
******************************************************************************************/

void Touch_IIC_ACK(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 8002498:	2200      	movs	r2, #0
 800249a:	2110      	movs	r1, #16
 800249c:	4812      	ldr	r0, [pc, #72]	; (80024e8 <Touch_IIC_ACK+0x54>)
 800249e:	f001 f96f 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024a2:	2014      	movs	r0, #20
 80024a4:	f7ff ff56 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SDA(0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	480e      	ldr	r0, [pc, #56]	; (80024e8 <Touch_IIC_ACK+0x54>)
 80024ae:	f001 f967 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024b2:	2014      	movs	r0, #20
 80024b4:	f7ff ff4e 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2110      	movs	r1, #16
 80024bc:	480a      	ldr	r0, [pc, #40]	; (80024e8 <Touch_IIC_ACK+0x54>)
 80024be:	f001 f95f 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024c2:	2014      	movs	r0, #20
 80024c4:	f7ff ff46 	bl	8002354 <Touch_IIC_Delay>

	Touch_IIC_SCL(0);		// SCL输出低时，SDA应立即拉高，释放总线
 80024c8:	2200      	movs	r2, #0
 80024ca:	2110      	movs	r1, #16
 80024cc:	4806      	ldr	r0, [pc, #24]	; (80024e8 <Touch_IIC_ACK+0x54>)
 80024ce:	f001 f957 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_SDA(1);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2120      	movs	r1, #32
 80024d6:	4804      	ldr	r0, [pc, #16]	; (80024e8 <Touch_IIC_ACK+0x54>)
 80024d8:	f001 f952 	bl	8003780 <HAL_GPIO_WritePin>

	Touch_IIC_Delay(IIC_DelayVaule);
 80024dc:	2014      	movs	r0, #20
 80024de:	f7ff ff39 	bl	8002354 <Touch_IIC_Delay>

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40021c00 	.word	0x40021c00

080024ec <Touch_IIC_NoACK>:
*	函数功能: IIC非应答信号
*	说    明: 在SCL为高电平期间，若SDA引脚为高电平，产生非应答信号
******************************************************************************************/

void Touch_IIC_NoACK(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	Touch_IIC_SCL(0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2110      	movs	r1, #16
 80024f4:	480f      	ldr	r0, [pc, #60]	; (8002534 <Touch_IIC_NoACK+0x48>)
 80024f6:	f001 f943 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 80024fa:	2014      	movs	r0, #20
 80024fc:	f7ff ff2a 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SDA(1);
 8002500:	2201      	movs	r2, #1
 8002502:	2120      	movs	r1, #32
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <Touch_IIC_NoACK+0x48>)
 8002506:	f001 f93b 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800250a:	2014      	movs	r0, #20
 800250c:	f7ff ff22 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 8002510:	2201      	movs	r2, #1
 8002512:	2110      	movs	r1, #16
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <Touch_IIC_NoACK+0x48>)
 8002516:	f001 f933 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800251a:	2014      	movs	r0, #20
 800251c:	f7ff ff1a 	bl	8002354 <Touch_IIC_Delay>

	Touch_IIC_SCL(0);
 8002520:	2200      	movs	r2, #0
 8002522:	2110      	movs	r1, #16
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <Touch_IIC_NoACK+0x48>)
 8002526:	f001 f92b 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 800252a:	2014      	movs	r0, #20
 800252c:	f7ff ff12 	bl	8002354 <Touch_IIC_Delay>
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021c00 	.word	0x40021c00

08002538 <Touch_IIC_WaitACK>:
*	函数功能: 等待接收设备发出应答信号
*	说    明: 在SCL为高电平期间，若检测到SDA引脚为低电平，则接收设备响应正常
******************************************************************************************/

uint8_t Touch_IIC_WaitACK(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	Touch_IIC_SDA(1);
 800253c:	2201      	movs	r2, #1
 800253e:	2120      	movs	r1, #32
 8002540:	4814      	ldr	r0, [pc, #80]	; (8002594 <Touch_IIC_WaitACK+0x5c>)
 8002542:	f001 f91d 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002546:	2014      	movs	r0, #20
 8002548:	f7ff ff04 	bl	8002354 <Touch_IIC_Delay>
	Touch_IIC_SCL(1);
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	4810      	ldr	r0, [pc, #64]	; (8002594 <Touch_IIC_WaitACK+0x5c>)
 8002552:	f001 f915 	bl	8003780 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(IIC_DelayVaule);
 8002556:	2014      	movs	r0, #20
 8002558:	f7ff fefc 	bl	8002354 <Touch_IIC_Delay>

	if( HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) != 0) //判断设备是否有做出响应
 800255c:	2120      	movs	r1, #32
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <Touch_IIC_WaitACK+0x5c>)
 8002560:	f001 f8f6 	bl	8003750 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <Touch_IIC_WaitACK+0x46>
	{
		Touch_IIC_SCL(0);
 800256a:	2200      	movs	r2, #0
 800256c:	2110      	movs	r1, #16
 800256e:	4809      	ldr	r0, [pc, #36]	; (8002594 <Touch_IIC_WaitACK+0x5c>)
 8002570:	f001 f906 	bl	8003780 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 8002574:	2014      	movs	r0, #20
 8002576:	f7ff feed 	bl	8002354 <Touch_IIC_Delay>
		return ACK_ERR;	//无应答
 800257a:	2300      	movs	r3, #0
 800257c:	e008      	b.n	8002590 <Touch_IIC_WaitACK+0x58>
	}
	else
	{
		Touch_IIC_SCL(0);
 800257e:	2200      	movs	r2, #0
 8002580:	2110      	movs	r1, #16
 8002582:	4804      	ldr	r0, [pc, #16]	; (8002594 <Touch_IIC_WaitACK+0x5c>)
 8002584:	f001 f8fc 	bl	8003780 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 8002588:	2014      	movs	r0, #20
 800258a:	f7ff fee3 	bl	8002354 <Touch_IIC_Delay>
		return ACK_OK;	//应答正常
 800258e:	2301      	movs	r3, #1
	}
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021c00 	.word	0x40021c00

08002598 <Touch_IIC_WriteByte>:
*	函数功能:	写一字节数据
*	说    明:高位在前
******************************************************************************************/

uint8_t Touch_IIC_WriteByte(uint8_t IIC_Data)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e02c      	b.n	8002602 <Touch_IIC_WriteByte+0x6a>
	{
		Touch_IIC_SDA(IIC_Data & 0x80);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da05      	bge.n	80025bc <Touch_IIC_WriteByte+0x24>
 80025b0:	2201      	movs	r2, #1
 80025b2:	2120      	movs	r1, #32
 80025b4:	4818      	ldr	r0, [pc, #96]	; (8002618 <Touch_IIC_WriteByte+0x80>)
 80025b6:	f001 f8e3 	bl	8003780 <HAL_GPIO_WritePin>
 80025ba:	e004      	b.n	80025c6 <Touch_IIC_WriteByte+0x2e>
 80025bc:	2200      	movs	r2, #0
 80025be:	2120      	movs	r1, #32
 80025c0:	4815      	ldr	r0, [pc, #84]	; (8002618 <Touch_IIC_WriteByte+0x80>)
 80025c2:	f001 f8dd 	bl	8003780 <HAL_GPIO_WritePin>

		Touch_IIC_Delay( IIC_DelayVaule );
 80025c6:	2014      	movs	r0, #20
 80025c8:	f7ff fec4 	bl	8002354 <Touch_IIC_Delay>
		Touch_IIC_SCL(1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2110      	movs	r1, #16
 80025d0:	4811      	ldr	r0, [pc, #68]	; (8002618 <Touch_IIC_WriteByte+0x80>)
 80025d2:	f001 f8d5 	bl	8003780 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 80025d6:	2014      	movs	r0, #20
 80025d8:	f7ff febc 	bl	8002354 <Touch_IIC_Delay>
		Touch_IIC_SCL(0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2110      	movs	r1, #16
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <Touch_IIC_WriteByte+0x80>)
 80025e2:	f001 f8cd 	bl	8003780 <HAL_GPIO_WritePin>
		if(i == 7)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d104      	bne.n	80025f6 <Touch_IIC_WriteByte+0x5e>
		{
			Touch_IIC_SDA(1);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2120      	movs	r1, #32
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <Touch_IIC_WriteByte+0x80>)
 80025f2:	f001 f8c5 	bl	8003780 <HAL_GPIO_WritePin>
		}
		IIC_Data <<= 1;
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b07      	cmp	r3, #7
 8002606:	d9cf      	bls.n	80025a8 <Touch_IIC_WriteByte+0x10>
	}

	return Touch_IIC_WaitACK(); //等待设备响应
 8002608:	f7ff ff96 	bl	8002538 <Touch_IIC_WaitACK>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021c00 	.word	0x40021c00

0800261c <Touch_IIC_ReadByte>:
*	说    明:1.高位在前
*				2.应在主机接收最后一字节数据时发送非应答信号
******************************************************************************************/

uint8_t Touch_IIC_ReadByte(uint8_t ACK_Mode)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
	uint8_t IIC_Data = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < 8; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	73bb      	strb	r3, [r7, #14]
 8002632:	e022      	b.n	800267a <Touch_IIC_ReadByte+0x5e>
	{
		IIC_Data <<= 1;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]

		Touch_IIC_SCL(1);
 800263a:	2201      	movs	r2, #1
 800263c:	2110      	movs	r1, #16
 800263e:	4817      	ldr	r0, [pc, #92]	; (800269c <Touch_IIC_ReadByte+0x80>)
 8002640:	f001 f89e 	bl	8003780 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 8002644:	2014      	movs	r0, #20
 8002646:	f7ff fe85 	bl	8002354 <Touch_IIC_Delay>
		IIC_Data |= (HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) & 0x01);
 800264a:	2120      	movs	r1, #32
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <Touch_IIC_ReadByte+0x80>)
 800264e:	f001 f87f 	bl	8003750 <HAL_GPIO_ReadPin>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	b25a      	sxtb	r2, r3
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4313      	orrs	r3, r2
 8002660:	b25b      	sxtb	r3, r3
 8002662:	73fb      	strb	r3, [r7, #15]
		Touch_IIC_SCL(0);
 8002664:	2200      	movs	r2, #0
 8002666:	2110      	movs	r1, #16
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <Touch_IIC_ReadByte+0x80>)
 800266a:	f001 f889 	bl	8003780 <HAL_GPIO_WritePin>
		Touch_IIC_Delay( IIC_DelayVaule );
 800266e:	2014      	movs	r0, #20
 8002670:	f7ff fe70 	bl	8002354 <Touch_IIC_Delay>
	for (i = 0; i < 8; i++)
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	3301      	adds	r3, #1
 8002678:	73bb      	strb	r3, [r7, #14]
 800267a:	7bbb      	ldrb	r3, [r7, #14]
 800267c:	2b07      	cmp	r3, #7
 800267e:	d9d9      	bls.n	8002634 <Touch_IIC_ReadByte+0x18>
	}

	if ( ACK_Mode == 1 )				//	应答信号
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <Touch_IIC_ReadByte+0x70>
		Touch_IIC_ACK();
 8002686:	f7ff ff05 	bl	8002494 <Touch_IIC_ACK>
 800268a:	e001      	b.n	8002690 <Touch_IIC_ReadByte+0x74>
	else
		Touch_IIC_NoACK();		 	// 非应答信号
 800268c:	f7ff ff2e 	bl	80024ec <Touch_IIC_NoACK>

	return IIC_Data;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021c00 	.word	0x40021c00

080026a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <MX_USART1_UART_Init+0x50>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_USART1_UART_Init+0x4c>)
 80026d8:	f004 fb9a 	bl	8006e10 <HAL_UART_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026e2:	f7ff f8f9 	bl	80018d8 <Error_Handler>
  }

}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20001fd4 	.word	0x20001fd4
 80026f0:	40011000 	.word	0x40011000

080026f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_UART_MspInit+0x94>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d134      	bne.n	8002780 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_UART_MspInit+0x98>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_UART_MspInit+0x98>)
 8002720:	f043 0310 	orr.w	r3, r3, #16
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_UART_MspInit+0x98>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_UART_MspInit+0x98>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_UART_MspInit+0x98>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_UART_MspInit+0x98>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800274e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002760:	2307      	movs	r3, #7
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	4809      	ldr	r0, [pc, #36]	; (8002790 <HAL_UART_MspInit+0x9c>)
 800276c:	f000 fe46 	bl	80033fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	2025      	movs	r0, #37	; 0x25
 8002776:	f000 f9c8 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277a:	2025      	movs	r0, #37	; 0x25
 800277c:	f000 f9e1 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40011000 	.word	0x40011000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000

08002794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800279a:	e003      	b.n	80027a4 <LoopCopyDataInit>

0800279c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800279e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027a2:	3104      	adds	r1, #4

080027a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027ac:	d3f6      	bcc.n	800279c <CopyDataInit>
  ldr  r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027b0:	e002      	b.n	80027b8 <LoopFillZerobss>

080027b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027b4:	f842 3b04 	str.w	r3, [r2], #4

080027b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027bc:	d3f9      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027be:	f7ff fa4b 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f022 fb6d 	bl	8024ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c6:	f7fe ffbb 	bl	8001740 <main>
  bx  lr    
 80027ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027cc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80027d0:	0808a2cc 	.word	0x0808a2cc
  ldr  r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027d8:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 80027dc:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 80027e0:	20002b20 	.word	0x20002b20

080027e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC_IRQHandler>
	...

080027e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_Init+0x40>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_Init+0x40>)
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x40>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f96f 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	2000      	movs	r0, #0
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff f8c0 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f995 	bl	8002b7a <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 f94f 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000004 	.word	0x20000004
 8002884:	2000000c 	.word	0x2000000c
 8002888:	20000008 	.word	0x20000008

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20002014 	.word	0x20002014

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20002014 	.word	0x20002014

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff ffee 	bl	80028b4 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_Delay+0x40>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000000c 	.word	0x2000000c

08002910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60d3      	str	r3, [r2, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <__NVIC_GetPriorityGrouping+0x18>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0307 	and.w	r3, r3, #7
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	2b00      	cmp	r3, #0
 8002984:	db0b      	blt.n	800299e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f003 021f 	and.w	r2, r3, #31
 800298c:	4907      	ldr	r1, [pc, #28]	; (80029ac <__NVIC_EnableIRQ+0x38>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2001      	movs	r0, #1
 8002996:	fa00 f202 	lsl.w	r2, r0, r2
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000e100 	.word	0xe000e100

080029b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db10      	blt.n	80029e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4909      	ldr	r1, [pc, #36]	; (80029f0 <__NVIC_DisableIRQ+0x40>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	3320      	adds	r3, #32
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff07 	bl	8002910 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff1c 	bl	8002958 <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff8e 	bl	8002a48 <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff0f 	bl	8002974 <__NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff1f 	bl	80029b0 <__NVIC_DisableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff94 	bl	8002ab0 <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e00e      	b.n	8002bc2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	795b      	ldrb	r3, [r3, #5]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fe f937 	bl	8000e28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00c      	b.n	8002c02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e03b      	b.n	8002c98 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe f94b 	bl	8000ed0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	f023 0107 	bic.w	r1, r3, #7
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68d1      	ldr	r1, [r2, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e05f      	b.n	8002d72 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_DMA2D_DeInit+0xdc>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02e      	beq.n	8002d1c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8c1 	bl	8002e54 <HAL_DMA2D_Abort>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e04a      	b.n	8002d72 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d108      	bne.n	8002cfc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002cea:	2100      	movs	r1, #0
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8f7 	bl	8002ee0 <HAL_DMA2D_CLUTLoading_Abort>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d011      	beq.n	8002d1c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03a      	b.n	8002d72 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d108      	bne.n	8002d1c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8e7 	bl	8002ee0 <HAL_DMA2D_CLUTLoading_Abort>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e02a      	b.n	8002d72 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	223f      	movs	r2, #63	; 0x3f
 8002d2a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe f8e3 	bl	8000f20 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA2D_Start_IT+0x1c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e020      	b.n	8002dde <HAL_DMA2D_Start_IT+0x5e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa84 	bl	80032c4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002dca:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af02      	add	r7, sp, #8
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e024      	b.n	8002e4c <HAL_DMA2D_BlendingStart_IT+0x66>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fa4d 	bl	80032c4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002e38:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0205 	bic.w	r2, r3, #5
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0204 	orr.w	r2, r2, #4
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e70:	f7ff fd20 	bl	80028b4 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e76:	e017      	b.n	8002ea8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002e78:	f7ff fd1c 	bl	80028b4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e86:	d90f      	bls.n	8002ea8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e017      	b.n	8002ed8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e0      	bne.n	8002e78 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3324      	adds	r3, #36	; 0x24
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0204 	orr.w	r2, r2, #4
 8002f00:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d103      	bne.n	8002f10 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	331c      	adds	r3, #28
 8002f0e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002f10:	f7ff fcd0 	bl	80028b4 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002f16:	e017      	b.n	8002f48 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f18:	f7ff fccc 	bl	80028b4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f26:	d90f      	bls.n	8002f48 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2203      	movs	r2, #3
 8002f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e016      	b.n	8002f76 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e1      	bne.n	8002f18 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002f62:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d026      	beq.n	8002fee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d021      	beq.n	8002fee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d026      	beq.n	8003046 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d021      	beq.n	8003046 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003010:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2204      	movs	r2, #4
 800302a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d026      	beq.n	800309e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003056:	2b00      	cmp	r3, #0
 8003058:	d021      	beq.n	800309e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2204      	movs	r2, #4
 80030c8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f853 	bl	8003176 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d024      	beq.n	8003124 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01f      	beq.n	8003124 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01f      	beq.n	800316e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01a      	beq.n	800316e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003146:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2210      	movs	r2, #16
 800314e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f80e 	bl	800318a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA2D_ConfigLayer+0x20>
 80031bc:	2302      	movs	r3, #2
 80031be:	e079      	b.n	80032b4 <HAL_DMA2D_ConfigLayer+0x114>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	3318      	adds	r3, #24
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_DMA2D_ConfigLayer+0x120>)
 80031ec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b0a      	cmp	r3, #10
 80031f4:	d003      	beq.n	80031fe <HAL_DMA2D_ConfigLayer+0x5e>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b09      	cmp	r3, #9
 80031fc:	d107      	bne.n	800320e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e005      	b.n	800321a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d120      	bne.n	8003262 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	ea02 0103 	and.w	r1, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	430a      	orrs	r2, r1
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b0a      	cmp	r3, #10
 8003248:	d003      	beq.n	8003252 <HAL_DMA2D_ConfigLayer+0xb2>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b09      	cmp	r3, #9
 8003250:	d127      	bne.n	80032a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
 8003260:	e01f      	b.n	80032a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	ea02 0103 	and.w	r1, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	430a      	orrs	r2, r1
 8003278:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b0a      	cmp	r3, #10
 800328a:	d003      	beq.n	8003294 <HAL_DMA2D_ConfigLayer+0xf4>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b09      	cmp	r3, #9
 8003292:	d106      	bne.n	80032a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032a0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	ff03000f 	.word	0xff03000f

080032c4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b08b      	sub	sp, #44	; 0x2c
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	041a      	lsls	r2, r3, #16
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032fc:	d174      	bne.n	80033e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003304:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800330c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003314:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	431a      	orrs	r2, r3
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	e053      	b.n	80033de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d106      	bne.n	800334c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4313      	orrs	r3, r2
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e048      	b.n	80033de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d111      	bne.n	8003378 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	0cdb      	lsrs	r3, r3, #19
 8003358:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	0a9b      	lsrs	r3, r3, #10
 800335e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	02db      	lsls	r3, r3, #11
 800336e:	4313      	orrs	r3, r2
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e032      	b.n	80033de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d117      	bne.n	80033b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	0fdb      	lsrs	r3, r3, #31
 8003384:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	0cdb      	lsrs	r3, r3, #19
 800338a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	0adb      	lsrs	r3, r3, #11
 8003390:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	431a      	orrs	r2, r3
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	03db      	lsls	r3, r3, #15
 80033a6:	4313      	orrs	r3, r2
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e016      	b.n	80033de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	0f1b      	lsrs	r3, r3, #28
 80033b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	0b1b      	lsrs	r3, r3, #12
 80033c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	431a      	orrs	r2, r3
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	031b      	lsls	r3, r3, #12
 80033d6:	4313      	orrs	r3, r2
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80033e6:	e003      	b.n	80033f0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	60da      	str	r2, [r3, #12]
}
 80033f0:	bf00      	nop
 80033f2:	372c      	adds	r7, #44	; 0x2c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e177      	b.n	8003708 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 8166 	bne.w	8003702 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d00b      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800344a:	2b11      	cmp	r3, #17
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b12      	cmp	r3, #18
 8003454:	d130      	bne.n	80034b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0201 	and.w	r2, r3, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0xfc>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b12      	cmp	r3, #18
 80034f6:	d123      	bne.n	8003540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	08da      	lsrs	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80c0 	beq.w	8003702 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b65      	ldr	r3, [pc, #404]	; (800371c <HAL_GPIO_Init+0x320>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	4a64      	ldr	r2, [pc, #400]	; (800371c <HAL_GPIO_Init+0x320>)
 800358c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003590:	6453      	str	r3, [r2, #68]	; 0x44
 8003592:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_GPIO_Init+0x320>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359e:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_GPIO_Init+0x324>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x328>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d037      	beq.n	800363a <HAL_GPIO_Init+0x23e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x32c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_GPIO_Init+0x23a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x330>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02b      	beq.n	8003632 <HAL_GPIO_Init+0x236>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x334>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d025      	beq.n	800362e <HAL_GPIO_Init+0x232>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x338>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01f      	beq.n	800362a <HAL_GPIO_Init+0x22e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x33c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d019      	beq.n	8003626 <HAL_GPIO_Init+0x22a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x340>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0x226>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x344>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00d      	beq.n	800361e <HAL_GPIO_Init+0x222>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x348>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <HAL_GPIO_Init+0x21e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_GPIO_Init+0x34c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_GPIO_Init+0x21a>
 8003612:	2309      	movs	r3, #9
 8003614:	e012      	b.n	800363c <HAL_GPIO_Init+0x240>
 8003616:	230a      	movs	r3, #10
 8003618:	e010      	b.n	800363c <HAL_GPIO_Init+0x240>
 800361a:	2308      	movs	r3, #8
 800361c:	e00e      	b.n	800363c <HAL_GPIO_Init+0x240>
 800361e:	2307      	movs	r3, #7
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x240>
 8003622:	2306      	movs	r3, #6
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x240>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x240>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x240>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x240>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x240>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x240>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364c:	4934      	ldr	r1, [pc, #208]	; (8003720 <HAL_GPIO_Init+0x324>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800365a:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_GPIO_Init+0x350>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367e:	4a33      	ldr	r2, [pc, #204]	; (800374c <HAL_GPIO_Init+0x350>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_GPIO_Init+0x350>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a8:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_GPIO_Init+0x350>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_GPIO_Init+0x350>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_GPIO_Init+0x350>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_GPIO_Init+0x350>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_GPIO_Init+0x350>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae84 	bls.w	8003418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003710:	bf00      	nop
 8003712:	3724      	adds	r7, #36	; 0x24
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40023800 	.word	0x40023800
 8003720:	40013800 	.word	0x40013800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400
 800372c:	40020800 	.word	0x40020800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021000 	.word	0x40021000
 8003738:	40021400 	.word	0x40021400
 800373c:	40021800 	.word	0x40021800
 8003740:	40021c00 	.word	0x40021c00
 8003744:	40022000 	.word	0x40022000
 8003748:	40022400 	.word	0x40022400
 800374c:	40013c00 	.word	0x40013c00

08003750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e001      	b.n	8003772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800379c:	e003      	b.n	80037a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	041a      	lsls	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80037b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b4:	b08f      	sub	sp, #60	; 0x3c
 80037b6:	af0a      	add	r7, sp, #40	; 0x28
 80037b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e054      	b.n	800386e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f010 fb20 	bl	8013e24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2203      	movs	r2, #3
 80037e8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 fac1 	bl	8007d8a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	687e      	ldr	r6, [r7, #4]
 8003810:	466d      	mov	r5, sp
 8003812:	f106 0410 	add.w	r4, r6, #16
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003822:	e885 0003 	stmia.w	r5, {r0, r1}
 8003826:	1d33      	adds	r3, r6, #4
 8003828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f004 fa3b 	bl	8007ca6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f004 fab8 	bl	8007dac <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	687e      	ldr	r6, [r7, #4]
 8003844:	466d      	mov	r5, sp
 8003846:	f106 0410 	add.w	r4, r6, #16
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003856:	e885 0003 	stmia.w	r5, {r0, r1}
 800385a:	1d33      	adds	r3, r6, #4
 800385c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385e:	6838      	ldr	r0, [r7, #0]
 8003860:	f004 fbca 	bl	8007ff8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003876 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003876:	b590      	push	{r4, r7, lr}
 8003878:	b089      	sub	sp, #36	; 0x24
 800387a:	af04      	add	r7, sp, #16
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	461a      	mov	r2, r3
 8003884:	4603      	mov	r3, r0
 8003886:	70fb      	strb	r3, [r7, #3]
 8003888:	460b      	mov	r3, r1
 800388a:	70bb      	strb	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_HCD_HC_Init+0x28>
 800389a:	2302      	movs	r3, #2
 800389c:	e07f      	b.n	800399e <HAL_HCD_HC_Init+0x128>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	440b      	add	r3, r1
 80038b4:	333d      	adds	r3, #61	; 0x3d
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	787a      	ldrb	r2, [r7, #1]
 80038cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	440b      	add	r3, r1
 80038dc:	3340      	adds	r3, #64	; 0x40
 80038de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	440b      	add	r3, r1
 80038f0:	3339      	adds	r3, #57	; 0x39
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	333f      	adds	r3, #63	; 0x3f
 8003906:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800390a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	78bb      	ldrb	r3, [r7, #2]
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	b2d8      	uxtb	r0, r3
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	333a      	adds	r3, #58	; 0x3a
 8003924:	4602      	mov	r2, r0
 8003926:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0a      	bge.n	8003946 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	333b      	adds	r3, #59	; 0x3b
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e009      	b.n	800395a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	333b      	adds	r3, #59	; 0x3b
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	440b      	add	r3, r1
 8003968:	333c      	adds	r3, #60	; 0x3c
 800396a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800396e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	787c      	ldrb	r4, [r7, #1]
 8003976:	78ba      	ldrb	r2, [r7, #2]
 8003978:	78f9      	ldrb	r1, [r7, #3]
 800397a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4623      	mov	r3, r4
 800398c:	f004 fcb6 	bl	80082fc <USB_HC_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}

080039a6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_HCD_HC_Halt+0x1e>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e00f      	b.n	80039e4 <HAL_HCD_HC_Halt+0x3e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fef2 	bl	80087be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	70fb      	strb	r3, [r7, #3]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70bb      	strb	r3, [r7, #2]
 8003a02:	4613      	mov	r3, r2
 8003a04:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	333b      	adds	r3, #59	; 0x3b
 8003a16:	78ba      	ldrb	r2, [r7, #2]
 8003a18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	333f      	adds	r3, #63	; 0x3f
 8003a2a:	787a      	ldrb	r2, [r7, #1]
 8003a2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a2e:	7c3b      	ldrb	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	3342      	adds	r3, #66	; 0x42
 8003a44:	2203      	movs	r2, #3
 8003a46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	333d      	adds	r3, #61	; 0x3d
 8003a58:	7f3a      	ldrb	r2, [r7, #28]
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e009      	b.n	8003a72 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3342      	adds	r3, #66	; 0x42
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a72:	787b      	ldrb	r3, [r7, #1]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	f200 80d6 	bhi.w	8003c26 <HAL_HCD_HC_SubmitRequest+0x23a>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003c11 	.word	0x08003c11
 8003a88:	08003afd 	.word	0x08003afd
 8003a8c:	08003b87 	.word	0x08003b87
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a90:	7c3b      	ldrb	r3, [r7, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 80c9 	bne.w	8003c2a <HAL_HCD_HC_SubmitRequest+0x23e>
 8003a98:	78bb      	ldrb	r3, [r7, #2]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 80c5 	bne.w	8003c2a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003aa0:	8b3b      	ldrh	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3351      	adds	r3, #81	; 0x51
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3351      	adds	r3, #81	; 0x51
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3342      	adds	r3, #66	; 0x42
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ae4:	e0a1      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	440b      	add	r3, r1
 8003af4:	3342      	adds	r3, #66	; 0x42
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	e096      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d120      	bne.n	8003b44 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3351      	adds	r3, #81	; 0x51
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	3342      	adds	r3, #66	; 0x42
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b2c:	e07e      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3342      	adds	r3, #66	; 0x42
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
      break;
 8003b42:	e073      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3342      	adds	r3, #66	; 0x42
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
      break;
 8003b6e:	e05d      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3342      	adds	r3, #66	; 0x42
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]
      break;
 8003b84:	e052      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b86:	78bb      	ldrb	r3, [r7, #2]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d120      	bne.n	8003bce <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3351      	adds	r3, #81	; 0x51
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	3342      	adds	r3, #66	; 0x42
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bb6:	e039      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3342      	adds	r3, #66	; 0x42
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
      break;
 8003bcc:	e02e      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3350      	adds	r3, #80	; 0x50
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3342      	adds	r3, #66	; 0x42
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
      break;
 8003bf8:	e018      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	3342      	adds	r3, #66	; 0x42
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e00d      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3342      	adds	r3, #66	; 0x42
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
      break;
 8003c24:	e002      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003c2a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	3344      	adds	r3, #68	; 0x44
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	8b39      	ldrh	r1, [r7, #24]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4403      	add	r3, r0
 8003c50:	3348      	adds	r3, #72	; 0x48
 8003c52:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	440b      	add	r3, r1
 8003c62:	335c      	adds	r3, #92	; 0x5c
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	334c      	adds	r3, #76	; 0x4c
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3339      	adds	r3, #57	; 0x39
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	335d      	adds	r3, #93	; 0x5d
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	18d1      	adds	r1, r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f004 fc26 	bl	8008510 <USB_HC_StartXfer>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 f943 	bl	8007f72 <USB_GetMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	f040 80ef 	bne.w	8003ed2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 f927 	bl	8007f4c <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80e5 	beq.w	8003ed0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 f91e 	bl	8007f4c <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1a:	d104      	bne.n	8003d26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 f90e 	bl	8007f4c <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d104      	bne.n	8003d46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f004 f8fe 	bl	8007f4c <USB_ReadInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5a:	d104      	bne.n	8003d66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 f8ee 	bl	8007f4c <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d103      	bne.n	8003d82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 f8e0 	bl	8007f4c <USB_ReadInterrupts>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d115      	bne.n	8003dc4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003da0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f010 f8a2 	bl	8013efc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 f9d6 	bl	8008170 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f004 f8bf 	bl	8007f4c <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd8:	d102      	bne.n	8003de0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f001 f966 	bl	80050ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 f8b1 	bl	8007f4c <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d106      	bne.n	8003e02 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f010 f865 	bl	8013ec4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 f8a0 	bl	8007f4c <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e16:	d138      	bne.n	8003e8a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 fcbd 	bl	800879c <USB_HC_ReadInterrupt>
 8003e22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e025      	b.n	8003e76 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d106      	bne.n	8003e64 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8cf 	bl	8004000 <HCD_HC_IN_IRQHandler>
 8003e62:	e005      	b.n	8003e70 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fcfd 	bl	800486a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3d4      	bcc.n	8003e2a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 f85c 	bl	8007f4c <USB_ReadInterrupts>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d101      	bne.n	8003ea2 <HAL_HCD_IRQHandler+0x1d2>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_HCD_IRQHandler+0x1d4>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0210 	bic.w	r2, r2, #16
 8003eb6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f001 f84b 	bl	8004f54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0210 	orr.w	r2, r2, #16
 8003ecc:	619a      	str	r2, [r3, #24]
 8003ece:	e000      	b.n	8003ed2 <HAL_HCD_IRQHandler+0x202>
      return;
 8003ed0:	bf00      	nop
    }
  }
}
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_HCD_Start+0x16>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e013      	b.n	8003f16 <HAL_HCD_Start+0x3e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 ff34 	bl	8007d68 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 f996 	bl	8008238 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_HCD_Stop+0x16>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e00d      	b.n	8003f50 <HAL_HCD_Stop+0x32>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f004 fd77 	bl	8008a34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 f93d 	bl	80081e4 <USB_ResetPort>
 8003f6a:	4603      	mov	r3, r0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	335c      	adds	r3, #92	; 0x5c
 8003f90:	781b      	ldrb	r3, [r3, #0]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334c      	adds	r3, #76	; 0x4c
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f004 f97f 	bl	80082d8 <USB_GetCurrentFrame>
 8003fda:	4603      	mov	r3, r0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 f95a 	bl	80082aa <USB_GetHostSpeed>
 8003ff6:	4603      	mov	r3, r0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d119      	bne.n	8004064 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	2304      	movs	r3, #4
 8004040:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	440a      	add	r2, r1
 8004058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	60d3      	str	r3, [r2, #12]
 8004062:	e0ce      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d12c      	bne.n	80040d6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004088:	461a      	mov	r2, r3
 800408a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	335d      	adds	r3, #93	; 0x5d
 80040a0:	2207      	movs	r2, #7
 80040a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040be:	f043 0302 	orr.w	r3, r3, #2
 80040c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fb75 	bl	80087be <USB_HC_Halt>
 80040d4:	e095      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d109      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2320      	movs	r3, #32
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e080      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d134      	bne.n	8004180 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	440a      	add	r2, r1
 800412c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	335d      	adds	r3, #93	; 0x5d
 8004146:	2205      	movs	r2, #5
 8004148:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	2310      	movs	r3, #16
 800415a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	2308      	movs	r3, #8
 800416c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fb20 	bl	80087be <USB_HC_Halt>
 800417e:	e040      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d134      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fafb 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d4:	461a      	mov	r2, r3
 80041d6:	2310      	movs	r3, #16
 80041d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	335d      	adds	r3, #93	; 0x5d
 80041ea:	2208      	movs	r2, #8
 80041ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	461a      	mov	r2, r3
 80041fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004200:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d122      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	440a      	add	r2, r1
 8004230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f004 faba 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800425c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800425e:	e300      	b.n	8004862 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	f040 80fd 	bne.w	8004472 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	3348      	adds	r3, #72	; 0x48
 8004290:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	440b      	add	r3, r1
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80042a4:	1ad1      	subs	r1, r2, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4403      	add	r3, r0
 80042b4:	334c      	adds	r3, #76	; 0x4c
 80042b6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	440b      	add	r3, r1
 80042c6:	335d      	adds	r3, #93	; 0x5d
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3358      	adds	r3, #88	; 0x58
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	2301      	movs	r3, #1
 80042f0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	333f      	adds	r3, #63	; 0x3f
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	333f      	adds	r3, #63	; 0x3f
 8004318:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800431a:	2b02      	cmp	r3, #2
 800431c:	d121      	bne.n	8004362 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	440a      	add	r2, r1
 8004334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fa38 	bl	80087be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	461a      	mov	r2, r3
 800435c:	2310      	movs	r3, #16
 800435e:	6093      	str	r3, [r2, #8]
 8004360:	e070      	b.n	8004444 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	333f      	adds	r3, #63	; 0x3f
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d12a      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	440a      	add	r2, r1
 800438e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004396:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	335c      	adds	r3, #92	; 0x5c
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	b2d8      	uxtb	r0, r3
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	335c      	adds	r3, #92	; 0x5c
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	4601      	mov	r1, r0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f00f fda6 	bl	8013f18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043cc:	e03a      	b.n	8004444 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	333f      	adds	r3, #63	; 0x3f
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d12f      	bne.n	8004444 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	440b      	add	r3, r1
 80043f2:	335c      	adds	r3, #92	; 0x5c
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	440b      	add	r3, r1
 8004406:	3350      	adds	r3, #80	; 0x50
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f083 0301 	eor.w	r3, r3, #1
 800440e:	b2d8      	uxtb	r0, r3
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	3350      	adds	r3, #80	; 0x50
 8004420:	4602      	mov	r2, r0
 8004422:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	b2d8      	uxtb	r0, r3
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	335c      	adds	r3, #92	; 0x5c
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	4601      	mov	r1, r0
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f00f fd6a 	bl	8013f18 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	3350      	adds	r3, #80	; 0x50
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	3350      	adds	r3, #80	; 0x50
 800446c:	4602      	mov	r2, r0
 800446e:	701a      	strb	r2, [r3, #0]
}
 8004470:	e1f7      	b.n	8004862 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	f040 811a 	bne.w	80046be <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	335d      	adds	r3, #93	; 0x5d
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d10a      	bne.n	80044d6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e0d9      	b.n	800468a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	440b      	add	r3, r1
 80044e4:	335d      	adds	r3, #93	; 0x5d
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d10a      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	335c      	adds	r3, #92	; 0x5c
 80044fc:	2205      	movs	r2, #5
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e0c3      	b.n	800468a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	335d      	adds	r3, #93	; 0x5d
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d00a      	beq.n	800452e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	335d      	adds	r3, #93	; 0x5d
 8004528:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800452a:	2b08      	cmp	r3, #8
 800452c:	d156      	bne.n	80045dc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	3358      	adds	r3, #88	; 0x58
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4403      	add	r3, r0
 8004550:	3358      	adds	r3, #88	; 0x58
 8004552:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	3358      	adds	r3, #88	; 0x58
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d914      	bls.n	8004594 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	3358      	adds	r3, #88	; 0x58
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	335c      	adds	r3, #92	; 0x5c
 800458e:	2204      	movs	r2, #4
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e009      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	440b      	add	r3, r1
 80045a2:	335c      	adds	r3, #92	; 0x5c
 80045a4:	2202      	movs	r2, #2
 80045a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e056      	b.n	800468a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	335d      	adds	r3, #93	; 0x5d
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d123      	bne.n	800463a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	335c      	adds	r3, #92	; 0x5c
 8004602:	2202      	movs	r2, #2
 8004604:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800461c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004624:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e027      	b.n	800468a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	335d      	adds	r3, #93	; 0x5d
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b07      	cmp	r3, #7
 800464e:	d11c      	bne.n	800468a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	3358      	adds	r3, #88	; 0x58
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4403      	add	r3, r0
 8004672:	3358      	adds	r3, #88	; 0x58
 8004674:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	335c      	adds	r3, #92	; 0x5c
 8004686:	2204      	movs	r2, #4
 8004688:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	461a      	mov	r2, r3
 8004698:	2302      	movs	r3, #2
 800469a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b2d8      	uxtb	r0, r3
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	440b      	add	r3, r1
 80046ae:	335c      	adds	r3, #92	; 0x5c
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	4601      	mov	r1, r0
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f00f fc2e 	bl	8013f18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046bc:	e0d1      	b.n	8004862 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d13e      	bne.n	8004752 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	440b      	add	r3, r1
 8004702:	3358      	adds	r3, #88	; 0x58
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4403      	add	r3, r0
 8004716:	3358      	adds	r3, #88	; 0x58
 8004718:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	335d      	adds	r3, #93	; 0x5d
 800472a:	2206      	movs	r2, #6
 800472c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f004 f840 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	461a      	mov	r2, r3
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	6093      	str	r3, [r2, #8]
}
 8004750:	e087      	b.n	8004862 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d17c      	bne.n	8004862 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	333f      	adds	r3, #63	; 0x3f
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d122      	bne.n	80047c4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	3358      	adds	r3, #88	; 0x58
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 fffe 	bl	80087be <USB_HC_Halt>
 80047c2:	e045      	b.n	8004850 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	333f      	adds	r3, #63	; 0x3f
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	440b      	add	r3, r1
 80047e8:	333f      	adds	r3, #63	; 0x3f
 80047ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d12f      	bne.n	8004850 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	440b      	add	r3, r1
 80047fe:	3358      	adds	r3, #88	; 0x58
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d121      	bne.n	8004850 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	335d      	adds	r3, #93	; 0x5d
 800481c:	2203      	movs	r2, #3
 800481e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	440a      	add	r2, r1
 8004836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800483a:	f043 0302 	orr.w	r3, r3, #2
 800483e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	4611      	mov	r1, r2
 800484a:	4618      	mov	r0, r3
 800484c:	f003 ffb7 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485c:	461a      	mov	r2, r3
 800485e:	2310      	movs	r3, #16
 8004860:	6093      	str	r3, [r2, #8]
}
 8004862:	bf00      	nop
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b04      	cmp	r3, #4
 8004898:	d119      	bne.n	80048ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	461a      	mov	r2, r3
 80048a8:	2304      	movs	r3, #4
 80048aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80048cc:	e33e      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d141      	bne.n	8004968 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	2320      	movs	r3, #32
 80048f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	333d      	adds	r3, #61	; 0x3d
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	f040 831f 	bne.w	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	333d      	adds	r3, #61	; 0x3d
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	335c      	adds	r3, #92	; 0x5c
 8004932:	2202      	movs	r2, #2
 8004934:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	440a      	add	r2, r1
 800494c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f003 ff2c 	bl	80087be <USB_HC_Halt>
}
 8004966:	e2f1      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d13f      	bne.n	80049fe <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	335d      	adds	r3, #93	; 0x5d
 800498e:	2204      	movs	r2, #4
 8004990:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	440b      	add	r3, r1
 80049a0:	333d      	adds	r3, #61	; 0x3d
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	440b      	add	r3, r1
 80049b4:	3358      	adds	r3, #88	; 0x58
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 feea 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f6:	461a      	mov	r2, r3
 80049f8:	2340      	movs	r3, #64	; 0x40
 80049fa:	6093      	str	r3, [r2, #8]
}
 80049fc:	e2a6      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d122      	bne.n	8004a5c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 febc 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	461a      	mov	r2, r3
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	6093      	str	r3, [r2, #8]
}
 8004a5a:	e277      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d135      	bne.n	8004ade <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	3358      	adds	r3, #88	; 0x58
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f003 fe84 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	440b      	add	r3, r1
 8004ad6:	335d      	adds	r3, #93	; 0x5d
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
}
 8004adc:	e236      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d12b      	bne.n	8004b4c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	2308      	movs	r3, #8
 8004b04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f003 fe44 	bl	80087be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	335d      	adds	r3, #93	; 0x5d
 8004b46:	2205      	movs	r2, #5
 8004b48:	701a      	strb	r2, [r3, #0]
}
 8004b4a:	e1ff      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d155      	bne.n	8004c0e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	3358      	adds	r3, #88	; 0x58
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	335d      	adds	r3, #93	; 0x5d
 8004b86:	2203      	movs	r2, #3
 8004b88:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	333d      	adds	r3, #61	; 0x3d
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d114      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	440b      	add	r3, r1
 8004bae:	333c      	adds	r3, #60	; 0x3c
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	333d      	adds	r3, #61	; 0x3d
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f003 fde2 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	461a      	mov	r2, r3
 8004c08:	2310      	movs	r3, #16
 8004c0a:	6093      	str	r3, [r2, #8]
}
 8004c0c:	e19e      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d12b      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 fdb5 	bl	80087be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	335d      	adds	r3, #93	; 0x5d
 8004c64:	2206      	movs	r2, #6
 8004c66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	461a      	mov	r2, r3
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	6093      	str	r3, [r2, #8]
}
 8004c7a:	e167      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d135      	bne.n	8004d00 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cae:	f043 0302 	orr.w	r3, r3, #2
 8004cb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 fd7d 	bl	80087be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	335d      	adds	r3, #93	; 0x5d
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	701a      	strb	r2, [r3, #0]
}
 8004cfe:	e125      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	f040 811a 	bne.w	8004f4c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d32:	f023 0302 	bic.w	r3, r3, #2
 8004d36:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	335d      	adds	r3, #93	; 0x5d
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d137      	bne.n	8004dbe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	335c      	adds	r3, #92	; 0x5c
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	440b      	add	r3, r1
 8004d70:	333f      	adds	r3, #63	; 0x3f
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d00b      	beq.n	8004d90 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	333f      	adds	r3, #63	; 0x3f
 8004d88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	f040 80c5 	bne.w	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3351      	adds	r3, #81	; 0x51
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f083 0301 	eor.w	r3, r3, #1
 8004da6:	b2d8      	uxtb	r0, r3
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	440b      	add	r3, r1
 8004db6:	3351      	adds	r3, #81	; 0x51
 8004db8:	4602      	mov	r2, r0
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e0ad      	b.n	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	440b      	add	r3, r1
 8004dcc:	335d      	adds	r3, #93	; 0x5d
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d10a      	bne.n	8004dea <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	335c      	adds	r3, #92	; 0x5c
 8004de4:	2202      	movs	r2, #2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e097      	b.n	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	335d      	adds	r3, #93	; 0x5d
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d10a      	bne.n	8004e16 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	440b      	add	r3, r1
 8004e0e:	335c      	adds	r3, #92	; 0x5c
 8004e10:	2202      	movs	r2, #2
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e081      	b.n	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	335d      	adds	r3, #93	; 0x5d
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d10a      	bne.n	8004e42 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	335c      	adds	r3, #92	; 0x5c
 8004e3c:	2205      	movs	r2, #5
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e06b      	b.n	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	335d      	adds	r3, #93	; 0x5d
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d00a      	beq.n	8004e6e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	440b      	add	r3, r1
 8004e66:	335d      	adds	r3, #93	; 0x5d
 8004e68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d155      	bne.n	8004f1a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3358      	adds	r3, #88	; 0x58
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1c59      	adds	r1, r3, #1
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4403      	add	r3, r0
 8004e90:	3358      	adds	r3, #88	; 0x58
 8004e92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3358      	adds	r3, #88	; 0x58
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d914      	bls.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3358      	adds	r3, #88	; 0x58
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	440b      	add	r3, r1
 8004ecc:	335c      	adds	r3, #92	; 0x5c
 8004ece:	2204      	movs	r2, #4
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e009      	b.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	335c      	adds	r3, #92	; 0x5c
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004efe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	2302      	movs	r3, #2
 8004f2a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	b2d8      	uxtb	r0, r3
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	335c      	adds	r3, #92	; 0x5c
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4601      	mov	r1, r0
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00e ffe6 	bl	8013f18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f4c:	bf00      	nop
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	0c5b      	lsrs	r3, r3, #17
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d003      	beq.n	8004f98 <HCD_RXQLVL_IRQHandler+0x44>
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	f000 8082 	beq.w	800509a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f96:	e083      	b.n	80050a0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07f      	beq.n	800509e <HCD_RXQLVL_IRQHandler+0x14a>
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	440b      	add	r3, r1
 8004fac:	3344      	adds	r3, #68	; 0x44
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d074      	beq.n	800509e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3344      	adds	r3, #68	; 0x44
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f002 ff93 	bl	8007efa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3344      	adds	r3, #68	; 0x44
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	18d1      	adds	r1, r2, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4403      	add	r3, r0
 8004ff8:	3344      	adds	r3, #68	; 0x44
 8004ffa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	334c      	adds	r3, #76	; 0x4c
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	18d1      	adds	r1, r2, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4403      	add	r3, r0
 8005020:	334c      	adds	r3, #76	; 0x4c
 8005022:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HCD_RXQLVL_IRQHandler+0x154>)
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d031      	beq.n	800509e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005050:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005058:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	3350      	adds	r3, #80	; 0x50
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f083 0301 	eor.w	r3, r3, #1
 8005082:	b2d8      	uxtb	r0, r3
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	440b      	add	r3, r1
 8005092:	3350      	adds	r3, #80	; 0x50
 8005094:	4602      	mov	r2, r0
 8005096:	701a      	strb	r2, [r3, #0]
      break;
 8005098:	e001      	b.n	800509e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800509e:	bf00      	nop
  }
}
 80050a0:	bf00      	nop
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	1ff80000 	.word	0x1ff80000

080050ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d10b      	bne.n	80050fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d102      	bne.n	80050f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f00e fef6 	bl	8013ee0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f043 0302 	orr.w	r3, r3, #2
 80050fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b08      	cmp	r3, #8
 8005104:	d132      	bne.n	800516c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f043 0308 	orr.w	r3, r3, #8
 800510c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d126      	bne.n	8005166 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d113      	bne.n	8005148 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800512a:	d106      	bne.n	800513a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f003 f81c 	bl	8008170 <USB_InitFSLSPClkSel>
 8005138:	e011      	b.n	800515e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f003 f815 	bl	8008170 <USB_InitFSLSPClkSel>
 8005146:	e00a      	b.n	800515e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d106      	bne.n	800515e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005156:	461a      	mov	r2, r3
 8005158:	f64e 2360 	movw	r3, #60000	; 0xea60
 800515c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f00e fee8 	bl	8013f34 <HAL_HCD_PortEnabled_Callback>
 8005164:	e002      	b.n	800516c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f00e fef2 	bl	8013f50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d103      	bne.n	800517e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f043 0320 	orr.w	r3, r3, #32
 800517c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0bf      	b.n	8005326 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc f94a 	bl	8001454 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <HAL_LTDC_Init+0x19c>)
 8005208:	400b      	ands	r3, r1
 800520a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6899      	ldr	r1, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68d9      	ldr	r1, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <HAL_LTDC_Init+0x19c>)
 8005236:	400b      	ands	r3, r1
 8005238:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68d9      	ldr	r1, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6919      	ldr	r1, [r3, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b33      	ldr	r3, [pc, #204]	; (8005330 <HAL_LTDC_Init+0x19c>)
 8005264:	400b      	ands	r3, r1
 8005266:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6919      	ldr	r1, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6959      	ldr	r1, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <HAL_LTDC_Init+0x19c>)
 8005292:	400b      	ands	r3, r1
 8005294:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6959      	ldr	r1, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0206 	orr.w	r2, r2, #6
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	f000f800 	.word	0xf000f800

08005334 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d023      	beq.n	800539e <HAL_LTDC_IRQHandler+0x6a>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01e      	beq.n	800539e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2204      	movs	r2, #4
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800537e:	f043 0201 	orr.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f86f 	bl	800547c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d023      	beq.n	80053f0 <HAL_LTDC_IRQHandler+0xbc>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01e      	beq.n	80053f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0202 	bic.w	r2, r2, #2
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2202      	movs	r2, #2
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053d0:	f043 0202 	orr.w	r2, r3, #2
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f846 	bl	800547c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <HAL_LTDC_IRQHandler+0xfe>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d016      	beq.n	8005432 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2201      	movs	r2, #1
 800541a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f00e fc5b 	bl	8013ce8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01b      	beq.n	8005474 <HAL_LTDC_IRQHandler+0x140>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2208      	movs	r2, #8
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f80e 	bl	8005490 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_LTDC_ConfigLayer+0x1a>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e02c      	b.n	8005518 <HAL_LTDC_ConfigLayer+0x74>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2134      	movs	r1, #52	; 0x34
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	4413      	add	r3, r2
 80054da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4614      	mov	r4, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f849 	bl	8005590 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bdb0      	pop	{r4, r5, r7, pc}

08005520 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_LTDC_ProgramLineEvent+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e023      	b.n	8005580 <HAL_LTDC_ProgramLineEvent+0x60>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005558:	4a0c      	ldr	r2, [pc, #48]	; (800558c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40016800 	.word	0x40016800

08005590 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ac:	4413      	add	r3, r2
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	01db      	lsls	r3, r3, #7
 80055bc:	4413      	add	r3, r2
 80055be:	3384      	adds	r3, #132	; 0x84
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	4611      	mov	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	01d2      	lsls	r2, r2, #7
 80055cc:	440a      	add	r2, r1
 80055ce:	3284      	adds	r2, #132	; 0x84
 80055d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e6:	4413      	add	r3, r2
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	01db      	lsls	r3, r3, #7
 80055f4:	440b      	add	r3, r1
 80055f6:	3384      	adds	r3, #132	; 0x84
 80055f8:	4619      	mov	r1, r3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800560e:	4413      	add	r3, r2
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	01db      	lsls	r3, r3, #7
 800561e:	4413      	add	r3, r2
 8005620:	3384      	adds	r3, #132	; 0x84
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	4611      	mov	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	01d2      	lsls	r2, r2, #7
 800562e:	440a      	add	r2, r1
 8005630:	3284      	adds	r2, #132	; 0x84
 8005632:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005636:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005646:	4413      	add	r3, r2
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	01db      	lsls	r3, r3, #7
 8005654:	440b      	add	r3, r1
 8005656:	3384      	adds	r3, #132	; 0x84
 8005658:	4619      	mov	r1, r3
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4313      	orrs	r3, r2
 800565e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	3384      	adds	r3, #132	; 0x84
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	4611      	mov	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	01d2      	lsls	r2, r2, #7
 800567a:	440a      	add	r2, r1
 800567c:	3284      	adds	r2, #132	; 0x84
 800567e:	f023 0307 	bic.w	r3, r3, #7
 8005682:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	01db      	lsls	r3, r3, #7
 800568e:	4413      	add	r3, r2
 8005690:	3384      	adds	r3, #132	; 0x84
 8005692:	461a      	mov	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	061b      	lsls	r3, r3, #24
 80056b4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	4413      	add	r3, r2
 80056c2:	3384      	adds	r3, #132	; 0x84
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	01db      	lsls	r3, r3, #7
 80056d0:	4413      	add	r3, r2
 80056d2:	3384      	adds	r3, #132	; 0x84
 80056d4:	461a      	mov	r2, r3
 80056d6:	2300      	movs	r3, #0
 80056d8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e0:	461a      	mov	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	440b      	add	r3, r1
 80056f6:	3384      	adds	r3, #132	; 0x84
 80056f8:	4619      	mov	r1, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	01db      	lsls	r3, r3, #7
 800570a:	4413      	add	r3, r2
 800570c:	3384      	adds	r3, #132	; 0x84
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	4611      	mov	r1, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	01d2      	lsls	r2, r2, #7
 800571a:	440a      	add	r2, r1
 800571c:	3284      	adds	r2, #132	; 0x84
 800571e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005722:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	01db      	lsls	r3, r3, #7
 800572e:	4413      	add	r3, r2
 8005730:	3384      	adds	r3, #132	; 0x84
 8005732:	461a      	mov	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	01db      	lsls	r3, r3, #7
 8005744:	4413      	add	r3, r2
 8005746:	3384      	adds	r3, #132	; 0x84
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	4611      	mov	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	01d2      	lsls	r2, r2, #7
 8005754:	440a      	add	r2, r1
 8005756:	3284      	adds	r2, #132	; 0x84
 8005758:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	6809      	ldr	r1, [r1, #0]
 800576e:	4608      	mov	r0, r1
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	01c9      	lsls	r1, r1, #7
 8005774:	4401      	add	r1, r0
 8005776:	3184      	adds	r1, #132	; 0x84
 8005778:	4313      	orrs	r3, r2
 800577a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	4413      	add	r3, r2
 8005788:	3384      	adds	r3, #132	; 0x84
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	01db      	lsls	r3, r3, #7
 8005796:	4413      	add	r3, r2
 8005798:	3384      	adds	r3, #132	; 0x84
 800579a:	461a      	mov	r2, r3
 800579c:	2300      	movs	r3, #0
 800579e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	01db      	lsls	r3, r3, #7
 80057aa:	4413      	add	r3, r2
 80057ac:	3384      	adds	r3, #132	; 0x84
 80057ae:	461a      	mov	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80057be:	2304      	movs	r3, #4
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e01b      	b.n	80057fc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d102      	bne.n	80057d2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80057cc:	2303      	movs	r3, #3
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	e014      	b.n	80057fc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d00b      	beq.n	80057f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d007      	beq.n	80057f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d003      	beq.n	80057f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057ee:	2b07      	cmp	r3, #7
 80057f0:	d102      	bne.n	80057f8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80057f2:	2302      	movs	r3, #2
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e001      	b.n	80057fc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057f8:	2301      	movs	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	; 0x84
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	4611      	mov	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	01d2      	lsls	r2, r2, #7
 8005816:	440a      	add	r2, r1
 8005818:	3284      	adds	r2, #132	; 0x84
 800581a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	041a      	lsls	r2, r3, #16
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6859      	ldr	r1, [r3, #4]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	1acb      	subs	r3, r1, r3
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	3303      	adds	r3, #3
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	6809      	ldr	r1, [r1, #0]
 8005842:	4608      	mov	r0, r1
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	01c9      	lsls	r1, r1, #7
 8005848:	4401      	add	r1, r0
 800584a:	3184      	adds	r1, #132	; 0x84
 800584c:	4313      	orrs	r3, r2
 800584e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	01db      	lsls	r3, r3, #7
 800585a:	4413      	add	r3, r2
 800585c:	3384      	adds	r3, #132	; 0x84
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	4611      	mov	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	01d2      	lsls	r2, r2, #7
 800586a:	440a      	add	r2, r1
 800586c:	3284      	adds	r2, #132	; 0x84
 800586e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005872:	f023 0307 	bic.w	r3, r3, #7
 8005876:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	01db      	lsls	r3, r3, #7
 8005882:	4413      	add	r3, r2
 8005884:	3384      	adds	r3, #132	; 0x84
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	01db      	lsls	r3, r3, #7
 8005898:	4413      	add	r3, r2
 800589a:	3384      	adds	r3, #132	; 0x84
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	4611      	mov	r1, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	01d2      	lsls	r2, r2, #7
 80058a8:	440a      	add	r2, r1
 80058aa:	3284      	adds	r2, #132	; 0x84
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6013      	str	r3, [r2, #0]
}
 80058b2:	bf00      	nop
 80058b4:	3724      	adds	r7, #36	; 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e25b      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d075      	beq.n	80059ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058de:	4ba3      	ldr	r3, [pc, #652]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d00c      	beq.n	8005904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ea:	4ba0      	ldr	r3, [pc, #640]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d112      	bne.n	800591c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f6:	4b9d      	ldr	r3, [pc, #628]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005902:	d10b      	bne.n	800591c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	4b99      	ldr	r3, [pc, #612]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d05b      	beq.n	80059c8 <HAL_RCC_OscConfig+0x108>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d157      	bne.n	80059c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e236      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d106      	bne.n	8005934 <HAL_RCC_OscConfig+0x74>
 8005926:	4b91      	ldr	r3, [pc, #580]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a90      	ldr	r2, [pc, #576]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e01d      	b.n	8005970 <HAL_RCC_OscConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593c:	d10c      	bne.n	8005958 <HAL_RCC_OscConfig+0x98>
 800593e:	4b8b      	ldr	r3, [pc, #556]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a8a      	ldr	r2, [pc, #552]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4b88      	ldr	r3, [pc, #544]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a87      	ldr	r2, [pc, #540]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e00b      	b.n	8005970 <HAL_RCC_OscConfig+0xb0>
 8005958:	4b84      	ldr	r3, [pc, #528]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a83      	ldr	r2, [pc, #524]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 800595e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	4b81      	ldr	r3, [pc, #516]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a80      	ldr	r2, [pc, #512]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 800596a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d013      	beq.n	80059a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005978:	f7fc ff9c 	bl	80028b4 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005980:	f7fc ff98 	bl	80028b4 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e1fb      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b76      	ldr	r3, [pc, #472]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0xc0>
 800599e:	e014      	b.n	80059ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fc ff88 	bl	80028b4 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fc ff84 	bl	80028b4 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	; 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e1e7      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	4b6c      	ldr	r3, [pc, #432]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0xe8>
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d063      	beq.n	8005a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059d6:	4b65      	ldr	r3, [pc, #404]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e2:	4b62      	ldr	r3, [pc, #392]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d11c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ee:	4b5f      	ldr	r3, [pc, #380]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	4b5c      	ldr	r3, [pc, #368]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCC_OscConfig+0x152>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e1bb      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a12:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4952      	ldr	r1, [pc, #328]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	e03a      	b.n	8005a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d020      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a30:	4b4f      	ldr	r3, [pc, #316]	; (8005b70 <HAL_RCC_OscConfig+0x2b0>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fc ff3d 	bl	80028b4 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fc ff39 	bl	80028b4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e19c      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	4b46      	ldr	r3, [pc, #280]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5c:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4940      	ldr	r1, [pc, #256]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	e015      	b.n	8005a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <HAL_RCC_OscConfig+0x2b0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fc ff1c 	bl	80028b4 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a80:	f7fc ff18 	bl	80028b4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e17b      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d030      	beq.n	8005b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab2:	4b30      	ldr	r3, [pc, #192]	; (8005b74 <HAL_RCC_OscConfig+0x2b4>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fc fefc 	bl	80028b4 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac0:	f7fc fef8 	bl	80028b4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e15b      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad2:	4b26      	ldr	r3, [pc, #152]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x200>
 8005ade:	e015      	b.n	8005b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae0:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <HAL_RCC_OscConfig+0x2b4>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae6:	f7fc fee5 	bl	80028b4 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fc fee1 	bl	80028b4 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e144      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80a0 	beq.w	8005c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10f      	bne.n	8005b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b38:	6413      	str	r3, [r2, #64]	; 0x40
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_OscConfig+0x2b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d121      	bne.n	8005b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_RCC_OscConfig+0x2b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <HAL_RCC_OscConfig+0x2b8>)
 8005b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b62:	f7fc fea7 	bl	80028b4 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b68:	e011      	b.n	8005b8e <HAL_RCC_OscConfig+0x2ce>
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	42470000 	.word	0x42470000
 8005b74:	42470e80 	.word	0x42470e80
 8005b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7c:	f7fc fe9a 	bl	80028b4 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e0fd      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8e:	4b81      	ldr	r3, [pc, #516]	; (8005d94 <HAL_RCC_OscConfig+0x4d4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x2f0>
 8005ba2:	4b7d      	ldr	r3, [pc, #500]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a7c      	ldr	r2, [pc, #496]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	e01c      	b.n	8005bea <HAL_RCC_OscConfig+0x32a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x312>
 8005bb8:	4b77      	ldr	r3, [pc, #476]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	4a76      	ldr	r2, [pc, #472]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc4:	4b74      	ldr	r3, [pc, #464]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4a73      	ldr	r2, [pc, #460]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd0:	e00b      	b.n	8005bea <HAL_RCC_OscConfig+0x32a>
 8005bd2:	4b71      	ldr	r3, [pc, #452]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a70      	ldr	r2, [pc, #448]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bde:	4b6e      	ldr	r3, [pc, #440]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a6d      	ldr	r2, [pc, #436]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d015      	beq.n	8005c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf2:	f7fc fe5f 	bl	80028b4 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfa:	f7fc fe5b 	bl	80028b4 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0bc      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c10:	4b61      	ldr	r3, [pc, #388]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ee      	beq.n	8005bfa <HAL_RCC_OscConfig+0x33a>
 8005c1c:	e014      	b.n	8005c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1e:	f7fc fe49 	bl	80028b4 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fc fe45 	bl	80028b4 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e0a6      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3c:	4b56      	ldr	r3, [pc, #344]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ee      	bne.n	8005c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4e:	4b52      	ldr	r3, [pc, #328]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	4a51      	ldr	r2, [pc, #324]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8092 	beq.w	8005d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c64:	4b4c      	ldr	r3, [pc, #304]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d05c      	beq.n	8005d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d141      	bne.n	8005cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b48      	ldr	r3, [pc, #288]	; (8005d9c <HAL_RCC_OscConfig+0x4dc>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fc fe19 	bl	80028b4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fc fe15 	bl	80028b4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e078      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c98:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	019b      	lsls	r3, r3, #6
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	4933      	ldr	r1, [pc, #204]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cce:	4b33      	ldr	r3, [pc, #204]	; (8005d9c <HAL_RCC_OscConfig+0x4dc>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fc fdee 	bl	80028b4 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cdc:	f7fc fdea 	bl	80028b4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e04d      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cee:	4b2a      	ldr	r3, [pc, #168]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0x41c>
 8005cfa:	e045      	b.n	8005d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfc:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <HAL_RCC_OscConfig+0x4dc>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d02:	f7fc fdd7 	bl	80028b4 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0a:	f7fc fdd3 	bl	80028b4 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e036      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f0      	bne.n	8005d0a <HAL_RCC_OscConfig+0x44a>
 8005d28:	e02e      	b.n	8005d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e029      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <HAL_RCC_OscConfig+0x4d8>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d11c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d115      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d5e:	4013      	ands	r3, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d001      	beq.n	8005d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40007000 	.word	0x40007000
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	42470060 	.word	0x42470060

08005da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0cc      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db4:	4b68      	ldr	r3, [pc, #416]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d90c      	bls.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0b8      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df4:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a52      	ldr	r2, [pc, #328]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	494d      	ldr	r1, [pc, #308]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d044      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d119      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5e:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e06f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e067      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4934      	ldr	r1, [pc, #208]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e90:	f7fc fd10 	bl	80028b4 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7fc fd0c 	bl	80028b4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e04f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20c      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e032      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4916      	ldr	r1, [pc, #88]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	490e      	ldr	r1, [pc, #56]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f26:	f000 f821 	bl	8005f6c <HAL_RCC_GetSysClockFreq>
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	4a0a      	ldr	r2, [pc, #40]	; (8005f60 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	5cd3      	ldrb	r3, [r2, r3]
 8005f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1c4>)
 8005f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x1c8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc fc70 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40023c00 	.word	0x40023c00
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	080265f8 	.word	0x080265f8
 8005f64:	20000004 	.word	0x20000004
 8005f68:	20000008 	.word	0x20000008

08005f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f82:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d007      	beq.n	8005f9e <HAL_RCC_GetSysClockFreq+0x32>
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d008      	beq.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 808d 	bne.w	80060b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f98:	4b4b      	ldr	r3, [pc, #300]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f9a:	60bb      	str	r3, [r7, #8]
       break;
 8005f9c:	e08c      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f9e:	4b4b      	ldr	r3, [pc, #300]	; (80060cc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fa0:	60bb      	str	r3, [r7, #8]
      break;
 8005fa2:	e089      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa4:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fae:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d023      	beq.n	8006002 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fba:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	f04f 0400 	mov.w	r4, #0
 8005fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	ea03 0501 	and.w	r5, r3, r1
 8005fd0:	ea04 0602 	and.w	r6, r4, r2
 8005fd4:	4a3d      	ldr	r2, [pc, #244]	; (80060cc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fd6:	fb02 f106 	mul.w	r1, r2, r6
 8005fda:	2200      	movs	r2, #0
 8005fdc:	fb02 f205 	mul.w	r2, r2, r5
 8005fe0:	440a      	add	r2, r1
 8005fe2:	493a      	ldr	r1, [pc, #232]	; (80060cc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fe4:	fba5 0101 	umull	r0, r1, r5, r1
 8005fe8:	1853      	adds	r3, r2, r1
 8005fea:	4619      	mov	r1, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	f7fa fd39 	bl	8000a6c <__aeabi_uldivmod>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e049      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006002:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	f04f 0400 	mov.w	r4, #0
 800600c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	ea03 0501 	and.w	r5, r3, r1
 8006018:	ea04 0602 	and.w	r6, r4, r2
 800601c:	4629      	mov	r1, r5
 800601e:	4632      	mov	r2, r6
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f04f 0400 	mov.w	r4, #0
 8006028:	0154      	lsls	r4, r2, #5
 800602a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800602e:	014b      	lsls	r3, r1, #5
 8006030:	4619      	mov	r1, r3
 8006032:	4622      	mov	r2, r4
 8006034:	1b49      	subs	r1, r1, r5
 8006036:	eb62 0206 	sbc.w	r2, r2, r6
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	f04f 0400 	mov.w	r4, #0
 8006042:	0194      	lsls	r4, r2, #6
 8006044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006048:	018b      	lsls	r3, r1, #6
 800604a:	1a5b      	subs	r3, r3, r1
 800604c:	eb64 0402 	sbc.w	r4, r4, r2
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	00e2      	lsls	r2, r4, #3
 800605a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800605e:	00d9      	lsls	r1, r3, #3
 8006060:	460b      	mov	r3, r1
 8006062:	4614      	mov	r4, r2
 8006064:	195b      	adds	r3, r3, r5
 8006066:	eb44 0406 	adc.w	r4, r4, r6
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	02a2      	lsls	r2, r4, #10
 8006074:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006078:	0299      	lsls	r1, r3, #10
 800607a:	460b      	mov	r3, r1
 800607c:	4614      	mov	r4, r2
 800607e:	4618      	mov	r0, r3
 8006080:	4621      	mov	r1, r4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	461a      	mov	r2, r3
 800608a:	4623      	mov	r3, r4
 800608c:	f7fa fcee 	bl	8000a6c <__aeabi_uldivmod>
 8006090:	4603      	mov	r3, r0
 8006092:	460c      	mov	r4, r1
 8006094:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	3301      	adds	r3, #1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	60bb      	str	r3, [r7, #8]
      break;
 80060b0:	e002      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80060b4:	60bb      	str	r3, [r7, #8]
      break;
 80060b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b8:	68bb      	ldr	r3, [r7, #8]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	017d7840 	.word	0x017d7840

080060d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000004 	.word	0x20000004

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060ec:	f7ff fff0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 80060f0:	4601      	mov	r1, r0
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0a9b      	lsrs	r3, r3, #10
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4a03      	ldr	r2, [pc, #12]	; (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060fe:	5cd3      	ldrb	r3, [r2, r3]
 8006100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40023800 	.word	0x40023800
 800610c:	08026608 	.word	0x08026608

08006110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006114:	f7ff ffdc 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 8006118:	4601      	mov	r1, r0
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	0b5b      	lsrs	r3, r3, #13
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4a03      	ldr	r2, [pc, #12]	; (8006134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006126:	5cd3      	ldrb	r3, [r2, r3]
 8006128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800612c:	4618      	mov	r0, r3
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40023800 	.word	0x40023800
 8006134:	08026608 	.word	0x08026608

08006138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006168:	2b00      	cmp	r3, #0
 800616a:	d075      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800616c:	4bad      	ldr	r3, [pc, #692]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006172:	f7fc fb9f 	bl	80028b4 <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006178:	e008      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800617a:	f7fc fb9b 	bl	80028b4 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e18b      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800618c:	4ba6      	ldr	r3, [pc, #664]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	019a      	lsls	r2, r3, #6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	071b      	lsls	r3, r3, #28
 80061b0:	499d      	ldr	r1, [pc, #628]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01f      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061c4:	4b98      	ldr	r3, [pc, #608]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	0f1b      	lsrs	r3, r3, #28
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	019a      	lsls	r2, r3, #6
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	431a      	orrs	r2, r3
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	071b      	lsls	r3, r3, #28
 80061e4:	4990      	ldr	r1, [pc, #576]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061ec:	4b8e      	ldr	r3, [pc, #568]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f2:	f023 021f 	bic.w	r2, r3, #31
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	498a      	ldr	r1, [pc, #552]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	019a      	lsls	r2, r3, #6
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	061b      	lsls	r3, r3, #24
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	071b      	lsls	r3, r3, #28
 8006224:	4980      	ldr	r1, [pc, #512]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800622c:	4b7d      	ldr	r3, [pc, #500]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006232:	f7fc fb3f 	bl	80028b4 <HAL_GetTick>
 8006236:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800623a:	f7fc fb3b 	bl	80028b4 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e12b      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800624c:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800626c:	2b00      	cmp	r3, #0
 800626e:	d079      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006270:	4b6e      	ldr	r3, [pc, #440]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006276:	f7fc fb1d 	bl	80028b4 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800627e:	f7fc fb19 	bl	80028b4 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e109      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006290:	4b65      	ldr	r3, [pc, #404]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629c:	d0ef      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062aa:	4b5f      	ldr	r3, [pc, #380]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	0f1b      	lsrs	r3, r3, #28
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	019a      	lsls	r2, r3, #6
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	431a      	orrs	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	071b      	lsls	r3, r3, #28
 80062ca:	4957      	ldr	r1, [pc, #348]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062d2:	4b55      	ldr	r3, [pc, #340]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	4950      	ldr	r1, [pc, #320]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	0e1b      	lsrs	r3, r3, #24
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	019a      	lsls	r2, r3, #6
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	061b      	lsls	r3, r3, #24
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	071b      	lsls	r3, r3, #28
 8006318:	4943      	ldr	r1, [pc, #268]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006320:	4b41      	ldr	r3, [pc, #260]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006326:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	493e      	ldr	r1, [pc, #248]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006336:	4b3d      	ldr	r3, [pc, #244]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633c:	f7fc faba 	bl	80028b4 <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006344:	f7fc fab6 	bl	80028b4 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0a6      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006356:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006362:	d1ef      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 808d 	beq.w	800648c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006380:	6413      	str	r3, [r2, #64]	; 0x40
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800638e:	4b28      	ldr	r3, [pc, #160]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a27      	ldr	r2, [pc, #156]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639a:	f7fc fa8b 	bl	80028b4 <HAL_GetTick>
 800639e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fc fa87 	bl	80028b4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e077      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063b4:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063c0:	4b19      	ldr	r3, [pc, #100]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d039      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d032      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063f4:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d11e      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006406:	f7fc fa55 	bl	80028b4 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	e014      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fc fa51 	bl	80028b4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	; 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d90b      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e03f      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006424:	42470068 	.word	0x42470068
 8006428:	40023800 	.word	0x40023800
 800642c:	42470070 	.word	0x42470070
 8006430:	40007000 	.word	0x40007000
 8006434:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0e4      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006450:	d10d      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	4911      	ldr	r1, [pc, #68]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006468:	4313      	orrs	r3, r2
 800646a:	608b      	str	r3, [r1, #8]
 800646c:	e005      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006474:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006478:	6093      	str	r3, [r2, #8]
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800647c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006486:	4909      	ldr	r1, [pc, #36]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006488:	4313      	orrs	r3, r2
 800648a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40023800 	.word	0x40023800
 80064b0:	424711e0 	.word	0x424711e0

080064b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e025      	b.n	8006514 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fa fe23 	bl	8001128 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f001 fa95 	bl	8007a24 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	461a      	mov	r2, r3
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	f001 fb00 	bl	8007b0a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10a      	bne.n	8006548 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f80c 	bl	8006550 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695a      	ldr	r2, [r3, #20]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	615a      	str	r2, [r3, #20]
  }
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d101      	bne.n	8006580 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	e018      	b.n	80065b2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fb39 	bl	8007c08 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d104      	bne.n	80065a8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2205      	movs	r2, #5
 80065a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80065a6:	e003      	b.n	80065b0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d101      	bne.n	80065d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
 80065d2:	e00e      	b.n	80065f2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fb4c 	bl	8007c80 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e01d      	b.n	8006648 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fb fb7b 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 fa1f 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b06      	cmp	r3, #6
 8006678:	d007      	beq.n	800668a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d122      	bne.n	80066f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d11b      	bne.n	80066f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0202 	mvn.w	r2, #2
 80066c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9af 	bl	8006a3e <HAL_TIM_IC_CaptureCallback>
 80066e0:	e005      	b.n	80066ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9a1 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f9b2 	bl	8006a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d122      	bne.n	8006748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b04      	cmp	r3, #4
 800670e:	d11b      	bne.n	8006748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0204 	mvn.w	r2, #4
 8006718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f985 	bl	8006a3e <HAL_TIM_IC_CaptureCallback>
 8006734:	e005      	b.n	8006742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f977 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f988 	bl	8006a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b08      	cmp	r3, #8
 8006754:	d122      	bne.n	800679c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d11b      	bne.n	800679c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0208 	mvn.w	r2, #8
 800676c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2204      	movs	r2, #4
 8006772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f95b 	bl	8006a3e <HAL_TIM_IC_CaptureCallback>
 8006788:	e005      	b.n	8006796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f94d 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f95e 	bl	8006a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0210 	mvn.w	r2, #16
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2208      	movs	r2, #8
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f931 	bl	8006a3e <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f923 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f934 	bl	8006a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0201 	mvn.w	r2, #1
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8fd 	bl	8006a16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b80      	cmp	r3, #128	; 0x80
 8006828:	d10e      	bne.n	8006848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	d107      	bne.n	8006848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fada 	bl	8006dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d10e      	bne.n	8006874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d107      	bne.n	8006874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8f9 	bl	8006a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b20      	cmp	r3, #32
 8006880:	d10e      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b20      	cmp	r3, #32
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0220 	mvn.w	r2, #32
 8006898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 faa4 	bl	8006de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIM_ConfigClockSource+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e0a6      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x166>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	d067      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0x120>
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d80b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x6c>
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d073      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x140>
 8006900:	2b10      	cmp	r3, #16
 8006902:	d802      	bhi.n	800690a <HAL_TIM_ConfigClockSource+0x62>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d06f      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006908:	e078      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800690a:	2b20      	cmp	r3, #32
 800690c:	d06c      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x140>
 800690e:	2b30      	cmp	r3, #48	; 0x30
 8006910:	d06a      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006912:	e073      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006914:	2b70      	cmp	r3, #112	; 0x70
 8006916:	d00d      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x8c>
 8006918:	2b70      	cmp	r3, #112	; 0x70
 800691a:	d804      	bhi.n	8006926 <HAL_TIM_ConfigClockSource+0x7e>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d033      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0xe0>
 8006920:	2b60      	cmp	r3, #96	; 0x60
 8006922:	d041      	beq.n	80069a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006924:	e06a      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	d066      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x152>
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d017      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006932:	e063      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6899      	ldr	r1, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f000 f9b4 	bl	8006cb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006956:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e04c      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6899      	ldr	r1, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f000 f99d 	bl	8006cb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006984:	609a      	str	r2, [r3, #8]
      break;
 8006986:	e039      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	461a      	mov	r2, r3
 8006996:	f000 f911 	bl	8006bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2150      	movs	r1, #80	; 0x50
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f96a 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80069a6:	e029      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f000 f930 	bl	8006c1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2160      	movs	r1, #96	; 0x60
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 f95a 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80069c6:	e019      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f000 f8f1 	bl	8006bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2140      	movs	r1, #64	; 0x40
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f94a 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80069e6:	e009      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 f941 	bl	8006c7a <TIM_ITRx_SetConfig>
      break;
 80069f8:	e000      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80069fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d00f      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3d      	ldr	r2, [pc, #244]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3a      	ldr	r2, [pc, #232]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006adc:	d027      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d023      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d017      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <TIM_Base_SetConfig+0x128>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <TIM_Base_SetConfig+0x12c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a26      	ldr	r2, [pc, #152]	; (8006bac <TIM_Base_SetConfig+0x130>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <TIM_Base_SetConfig+0x134>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a24      	ldr	r2, [pc, #144]	; (8006bb4 <TIM_Base_SetConfig+0x138>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <TIM_Base_SetConfig+0x13c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_Base_SetConfig+0xf8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d103      	bne.n	8006b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	615a      	str	r2, [r3, #20]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800
 8006bb0:	40001800 	.word	0x40001800
 8006bb4:	40001c00 	.word	0x40001c00
 8006bb8:	40002000 	.word	0x40002000

08006bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 030a 	bic.w	r3, r3, #10
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0210 	bic.w	r2, r3, #16
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	031b      	lsls	r3, r3, #12
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f043 0307 	orr.w	r3, r3, #7
 8006c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e05a      	b.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a21      	ldr	r2, [pc, #132]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d01d      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1a      	ldr	r2, [pc, #104]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10c      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40001800 	.word	0x40001800

08006de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e03f      	b.n	8006ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb fc5c 	bl	80026f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa69 	bl	800732c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_UART_IRQHandler+0x52>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f996 	bl	8007228 <UART_Receive_IT>
      return;
 8006efc:	e0d1      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80b0 	beq.w	8007066 <HAL_UART_IRQHandler+0x1ba>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_UART_IRQHandler+0x70>
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a5 	beq.w	8007066 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_UART_IRQHandler+0x90>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <HAL_UART_IRQHandler+0xb0>
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	f043 0202 	orr.w	r2, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_UART_IRQHandler+0xd0>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	f043 0204 	orr.w	r2, r3, #4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00f      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xfa>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <HAL_UART_IRQHandler+0xee>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	f043 0208 	orr.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d078      	beq.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f930 	bl	8007228 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <HAL_UART_IRQHandler+0x144>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d031      	beq.n	8007054 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f879 	bl	80070e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d123      	bne.n	800704c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007012:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	2b00      	cmp	r3, #0
 800701a:	d013      	beq.n	8007044 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <HAL_UART_IRQHandler+0x1fc>)
 8007022:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	4618      	mov	r0, r3
 800702a:	f7fb fdce 	bl	8002bca <HAL_DMA_Abort_IT>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007042:	e00e      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f845 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704a:	e00a      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f841 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007052:	e006      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f83d 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007060:	e01e      	b.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007062:	bf00      	nop
    return;
 8007064:	e01c      	b.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_UART_IRQHandler+0x1d6>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f866 	bl	800714c <UART_Transmit_IT>
    return;
 8007080:	e00f      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8ae 	bl	80071f8 <UART_EndTransmit_IT>
    return;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80070a0:	bf00      	nop
  }
}
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	08007125 	.word	0x08007125

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff ffc8 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b21      	cmp	r3, #33	; 0x21
 800715e:	d144      	bne.n	80071ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d11a      	bne.n	80071a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]
 8007192:	e00e      	b.n	80071b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]
 800719e:	e008      	b.n	80071b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6211      	str	r1, [r2, #32]
 80071aa:	781a      	ldrb	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4619      	mov	r1, r3
 80071c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff47 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b22      	cmp	r3, #34	; 0x22
 800723a:	d171      	bne.n	8007320 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d123      	bne.n	800728e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10e      	bne.n	8007272 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	1c9a      	adds	r2, r3, #2
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
 8007270:	e029      	b.n	80072c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	b29b      	uxth	r3, r3
 800727a:	b2db      	uxtb	r3, r3
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	; 0x28
 800728c:	e01b      	b.n	80072c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6858      	ldr	r0, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	1c59      	adds	r1, r3, #1
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6291      	str	r1, [r2, #40]	; 0x28
 80072a6:	b2c2      	uxtb	r2, r0
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e00c      	b.n	80072c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	1c58      	adds	r0, r3, #1
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	6288      	str	r0, [r1, #40]	; 0x28
 80072be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d120      	bne.n	800731c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0220 	bic.w	r2, r2, #32
 80072e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fed4 	bl	80070c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e002      	b.n	8007322 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800736e:	f023 030c 	bic.w	r3, r3, #12
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	430b      	orrs	r3, r1
 800737a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739a:	f040 818b 	bne.w	80076b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4ac1      	ldr	r2, [pc, #772]	; (80076a8 <UART_SetConfig+0x37c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d005      	beq.n	80073b4 <UART_SetConfig+0x88>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4abf      	ldr	r2, [pc, #764]	; (80076ac <UART_SetConfig+0x380>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	f040 80bd 	bne.w	800752e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073b4:	f7fe feac 	bl	8006110 <HAL_RCC_GetPCLK2Freq>
 80073b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	461d      	mov	r5, r3
 80073be:	f04f 0600 	mov.w	r6, #0
 80073c2:	46a8      	mov	r8, r5
 80073c4:	46b1      	mov	r9, r6
 80073c6:	eb18 0308 	adds.w	r3, r8, r8
 80073ca:	eb49 0409 	adc.w	r4, r9, r9
 80073ce:	4698      	mov	r8, r3
 80073d0:	46a1      	mov	r9, r4
 80073d2:	eb18 0805 	adds.w	r8, r8, r5
 80073d6:	eb49 0906 	adc.w	r9, r9, r6
 80073da:	f04f 0100 	mov.w	r1, #0
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073ee:	4688      	mov	r8, r1
 80073f0:	4691      	mov	r9, r2
 80073f2:	eb18 0005 	adds.w	r0, r8, r5
 80073f6:	eb49 0106 	adc.w	r1, r9, r6
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	461d      	mov	r5, r3
 8007400:	f04f 0600 	mov.w	r6, #0
 8007404:	196b      	adds	r3, r5, r5
 8007406:	eb46 0406 	adc.w	r4, r6, r6
 800740a:	461a      	mov	r2, r3
 800740c:	4623      	mov	r3, r4
 800740e:	f7f9 fb2d 	bl	8000a6c <__aeabi_uldivmod>
 8007412:	4603      	mov	r3, r0
 8007414:	460c      	mov	r4, r1
 8007416:	461a      	mov	r2, r3
 8007418:	4ba5      	ldr	r3, [pc, #660]	; (80076b0 <UART_SetConfig+0x384>)
 800741a:	fba3 2302 	umull	r2, r3, r3, r2
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	461d      	mov	r5, r3
 8007428:	f04f 0600 	mov.w	r6, #0
 800742c:	46a9      	mov	r9, r5
 800742e:	46b2      	mov	sl, r6
 8007430:	eb19 0309 	adds.w	r3, r9, r9
 8007434:	eb4a 040a 	adc.w	r4, sl, sl
 8007438:	4699      	mov	r9, r3
 800743a:	46a2      	mov	sl, r4
 800743c:	eb19 0905 	adds.w	r9, r9, r5
 8007440:	eb4a 0a06 	adc.w	sl, sl, r6
 8007444:	f04f 0100 	mov.w	r1, #0
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007458:	4689      	mov	r9, r1
 800745a:	4692      	mov	sl, r2
 800745c:	eb19 0005 	adds.w	r0, r9, r5
 8007460:	eb4a 0106 	adc.w	r1, sl, r6
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	461d      	mov	r5, r3
 800746a:	f04f 0600 	mov.w	r6, #0
 800746e:	196b      	adds	r3, r5, r5
 8007470:	eb46 0406 	adc.w	r4, r6, r6
 8007474:	461a      	mov	r2, r3
 8007476:	4623      	mov	r3, r4
 8007478:	f7f9 faf8 	bl	8000a6c <__aeabi_uldivmod>
 800747c:	4603      	mov	r3, r0
 800747e:	460c      	mov	r4, r1
 8007480:	461a      	mov	r2, r3
 8007482:	4b8b      	ldr	r3, [pc, #556]	; (80076b0 <UART_SetConfig+0x384>)
 8007484:	fba3 1302 	umull	r1, r3, r3, r2
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	2164      	movs	r1, #100	; 0x64
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	3332      	adds	r3, #50	; 0x32
 8007496:	4a86      	ldr	r2, [pc, #536]	; (80076b0 <UART_SetConfig+0x384>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074a4:	4498      	add	r8, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	461d      	mov	r5, r3
 80074aa:	f04f 0600 	mov.w	r6, #0
 80074ae:	46a9      	mov	r9, r5
 80074b0:	46b2      	mov	sl, r6
 80074b2:	eb19 0309 	adds.w	r3, r9, r9
 80074b6:	eb4a 040a 	adc.w	r4, sl, sl
 80074ba:	4699      	mov	r9, r3
 80074bc:	46a2      	mov	sl, r4
 80074be:	eb19 0905 	adds.w	r9, r9, r5
 80074c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074da:	4689      	mov	r9, r1
 80074dc:	4692      	mov	sl, r2
 80074de:	eb19 0005 	adds.w	r0, r9, r5
 80074e2:	eb4a 0106 	adc.w	r1, sl, r6
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	461d      	mov	r5, r3
 80074ec:	f04f 0600 	mov.w	r6, #0
 80074f0:	196b      	adds	r3, r5, r5
 80074f2:	eb46 0406 	adc.w	r4, r6, r6
 80074f6:	461a      	mov	r2, r3
 80074f8:	4623      	mov	r3, r4
 80074fa:	f7f9 fab7 	bl	8000a6c <__aeabi_uldivmod>
 80074fe:	4603      	mov	r3, r0
 8007500:	460c      	mov	r4, r1
 8007502:	461a      	mov	r2, r3
 8007504:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <UART_SetConfig+0x384>)
 8007506:	fba3 1302 	umull	r1, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	2164      	movs	r1, #100	; 0x64
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	3332      	adds	r3, #50	; 0x32
 8007518:	4a65      	ldr	r2, [pc, #404]	; (80076b0 <UART_SetConfig+0x384>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	f003 0207 	and.w	r2, r3, #7
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4442      	add	r2, r8
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	e26f      	b.n	8007a0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800752e:	f7fe fddb 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 8007532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	461d      	mov	r5, r3
 8007538:	f04f 0600 	mov.w	r6, #0
 800753c:	46a8      	mov	r8, r5
 800753e:	46b1      	mov	r9, r6
 8007540:	eb18 0308 	adds.w	r3, r8, r8
 8007544:	eb49 0409 	adc.w	r4, r9, r9
 8007548:	4698      	mov	r8, r3
 800754a:	46a1      	mov	r9, r4
 800754c:	eb18 0805 	adds.w	r8, r8, r5
 8007550:	eb49 0906 	adc.w	r9, r9, r6
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007568:	4688      	mov	r8, r1
 800756a:	4691      	mov	r9, r2
 800756c:	eb18 0005 	adds.w	r0, r8, r5
 8007570:	eb49 0106 	adc.w	r1, r9, r6
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	461d      	mov	r5, r3
 800757a:	f04f 0600 	mov.w	r6, #0
 800757e:	196b      	adds	r3, r5, r5
 8007580:	eb46 0406 	adc.w	r4, r6, r6
 8007584:	461a      	mov	r2, r3
 8007586:	4623      	mov	r3, r4
 8007588:	f7f9 fa70 	bl	8000a6c <__aeabi_uldivmod>
 800758c:	4603      	mov	r3, r0
 800758e:	460c      	mov	r4, r1
 8007590:	461a      	mov	r2, r3
 8007592:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <UART_SetConfig+0x384>)
 8007594:	fba3 2302 	umull	r2, r3, r3, r2
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	461d      	mov	r5, r3
 80075a2:	f04f 0600 	mov.w	r6, #0
 80075a6:	46a9      	mov	r9, r5
 80075a8:	46b2      	mov	sl, r6
 80075aa:	eb19 0309 	adds.w	r3, r9, r9
 80075ae:	eb4a 040a 	adc.w	r4, sl, sl
 80075b2:	4699      	mov	r9, r3
 80075b4:	46a2      	mov	sl, r4
 80075b6:	eb19 0905 	adds.w	r9, r9, r5
 80075ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80075be:	f04f 0100 	mov.w	r1, #0
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075d2:	4689      	mov	r9, r1
 80075d4:	4692      	mov	sl, r2
 80075d6:	eb19 0005 	adds.w	r0, r9, r5
 80075da:	eb4a 0106 	adc.w	r1, sl, r6
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	461d      	mov	r5, r3
 80075e4:	f04f 0600 	mov.w	r6, #0
 80075e8:	196b      	adds	r3, r5, r5
 80075ea:	eb46 0406 	adc.w	r4, r6, r6
 80075ee:	461a      	mov	r2, r3
 80075f0:	4623      	mov	r3, r4
 80075f2:	f7f9 fa3b 	bl	8000a6c <__aeabi_uldivmod>
 80075f6:	4603      	mov	r3, r0
 80075f8:	460c      	mov	r4, r1
 80075fa:	461a      	mov	r2, r3
 80075fc:	4b2c      	ldr	r3, [pc, #176]	; (80076b0 <UART_SetConfig+0x384>)
 80075fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	2164      	movs	r1, #100	; 0x64
 8007606:	fb01 f303 	mul.w	r3, r1, r3
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	3332      	adds	r3, #50	; 0x32
 8007610:	4a27      	ldr	r2, [pc, #156]	; (80076b0 <UART_SetConfig+0x384>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800761e:	4498      	add	r8, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	461d      	mov	r5, r3
 8007624:	f04f 0600 	mov.w	r6, #0
 8007628:	46a9      	mov	r9, r5
 800762a:	46b2      	mov	sl, r6
 800762c:	eb19 0309 	adds.w	r3, r9, r9
 8007630:	eb4a 040a 	adc.w	r4, sl, sl
 8007634:	4699      	mov	r9, r3
 8007636:	46a2      	mov	sl, r4
 8007638:	eb19 0905 	adds.w	r9, r9, r5
 800763c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800764c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007654:	4689      	mov	r9, r1
 8007656:	4692      	mov	sl, r2
 8007658:	eb19 0005 	adds.w	r0, r9, r5
 800765c:	eb4a 0106 	adc.w	r1, sl, r6
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	461d      	mov	r5, r3
 8007666:	f04f 0600 	mov.w	r6, #0
 800766a:	196b      	adds	r3, r5, r5
 800766c:	eb46 0406 	adc.w	r4, r6, r6
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	f7f9 f9fa 	bl	8000a6c <__aeabi_uldivmod>
 8007678:	4603      	mov	r3, r0
 800767a:	460c      	mov	r4, r1
 800767c:	461a      	mov	r2, r3
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <UART_SetConfig+0x384>)
 8007680:	fba3 1302 	umull	r1, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	2164      	movs	r1, #100	; 0x64
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3332      	adds	r3, #50	; 0x32
 8007692:	4a07      	ldr	r2, [pc, #28]	; (80076b0 <UART_SetConfig+0x384>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	f003 0207 	and.w	r2, r3, #7
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4442      	add	r2, r8
 80076a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80076a6:	e1b2      	b.n	8007a0e <UART_SetConfig+0x6e2>
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4ad7      	ldr	r2, [pc, #860]	; (8007a18 <UART_SetConfig+0x6ec>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d005      	beq.n	80076ca <UART_SetConfig+0x39e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4ad6      	ldr	r2, [pc, #856]	; (8007a1c <UART_SetConfig+0x6f0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	f040 80d1 	bne.w	800786c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80076ca:	f7fe fd21 	bl	8006110 <HAL_RCC_GetPCLK2Freq>
 80076ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	469a      	mov	sl, r3
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	46d0      	mov	r8, sl
 80076da:	46d9      	mov	r9, fp
 80076dc:	eb18 0308 	adds.w	r3, r8, r8
 80076e0:	eb49 0409 	adc.w	r4, r9, r9
 80076e4:	4698      	mov	r8, r3
 80076e6:	46a1      	mov	r9, r4
 80076e8:	eb18 080a 	adds.w	r8, r8, sl
 80076ec:	eb49 090b 	adc.w	r9, r9, fp
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007704:	4688      	mov	r8, r1
 8007706:	4691      	mov	r9, r2
 8007708:	eb1a 0508 	adds.w	r5, sl, r8
 800770c:	eb4b 0609 	adc.w	r6, fp, r9
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4619      	mov	r1, r3
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	0094      	lsls	r4, r2, #2
 8007724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007728:	008b      	lsls	r3, r1, #2
 800772a:	461a      	mov	r2, r3
 800772c:	4623      	mov	r3, r4
 800772e:	4628      	mov	r0, r5
 8007730:	4631      	mov	r1, r6
 8007732:	f7f9 f99b 	bl	8000a6c <__aeabi_uldivmod>
 8007736:	4603      	mov	r3, r0
 8007738:	460c      	mov	r4, r1
 800773a:	461a      	mov	r2, r3
 800773c:	4bb8      	ldr	r3, [pc, #736]	; (8007a20 <UART_SetConfig+0x6f4>)
 800773e:	fba3 2302 	umull	r2, r3, r3, r2
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	469b      	mov	fp, r3
 800774c:	f04f 0c00 	mov.w	ip, #0
 8007750:	46d9      	mov	r9, fp
 8007752:	46e2      	mov	sl, ip
 8007754:	eb19 0309 	adds.w	r3, r9, r9
 8007758:	eb4a 040a 	adc.w	r4, sl, sl
 800775c:	4699      	mov	r9, r3
 800775e:	46a2      	mov	sl, r4
 8007760:	eb19 090b 	adds.w	r9, r9, fp
 8007764:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800777c:	4689      	mov	r9, r1
 800777e:	4692      	mov	sl, r2
 8007780:	eb1b 0509 	adds.w	r5, fp, r9
 8007784:	eb4c 060a 	adc.w	r6, ip, sl
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4619      	mov	r1, r3
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	f04f 0400 	mov.w	r4, #0
 800779a:	0094      	lsls	r4, r2, #2
 800779c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077a0:	008b      	lsls	r3, r1, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	4623      	mov	r3, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	4631      	mov	r1, r6
 80077aa:	f7f9 f95f 	bl	8000a6c <__aeabi_uldivmod>
 80077ae:	4603      	mov	r3, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	461a      	mov	r2, r3
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <UART_SetConfig+0x6f4>)
 80077b6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	2164      	movs	r1, #100	; 0x64
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	3332      	adds	r3, #50	; 0x32
 80077c8:	4a95      	ldr	r2, [pc, #596]	; (8007a20 <UART_SetConfig+0x6f4>)
 80077ca:	fba2 2303 	umull	r2, r3, r2, r3
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d4:	4498      	add	r8, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	469b      	mov	fp, r3
 80077da:	f04f 0c00 	mov.w	ip, #0
 80077de:	46d9      	mov	r9, fp
 80077e0:	46e2      	mov	sl, ip
 80077e2:	eb19 0309 	adds.w	r3, r9, r9
 80077e6:	eb4a 040a 	adc.w	r4, sl, sl
 80077ea:	4699      	mov	r9, r3
 80077ec:	46a2      	mov	sl, r4
 80077ee:	eb19 090b 	adds.w	r9, r9, fp
 80077f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077f6:	f04f 0100 	mov.w	r1, #0
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800780a:	4689      	mov	r9, r1
 800780c:	4692      	mov	sl, r2
 800780e:	eb1b 0509 	adds.w	r5, fp, r9
 8007812:	eb4c 060a 	adc.w	r6, ip, sl
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4619      	mov	r1, r3
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	f04f 0400 	mov.w	r4, #0
 8007828:	0094      	lsls	r4, r2, #2
 800782a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800782e:	008b      	lsls	r3, r1, #2
 8007830:	461a      	mov	r2, r3
 8007832:	4623      	mov	r3, r4
 8007834:	4628      	mov	r0, r5
 8007836:	4631      	mov	r1, r6
 8007838:	f7f9 f918 	bl	8000a6c <__aeabi_uldivmod>
 800783c:	4603      	mov	r3, r0
 800783e:	460c      	mov	r4, r1
 8007840:	461a      	mov	r2, r3
 8007842:	4b77      	ldr	r3, [pc, #476]	; (8007a20 <UART_SetConfig+0x6f4>)
 8007844:	fba3 1302 	umull	r1, r3, r3, r2
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	3332      	adds	r3, #50	; 0x32
 8007856:	4a72      	ldr	r2, [pc, #456]	; (8007a20 <UART_SetConfig+0x6f4>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f003 020f 	and.w	r2, r3, #15
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4442      	add	r2, r8
 8007868:	609a      	str	r2, [r3, #8]
 800786a:	e0d0      	b.n	8007a0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800786c:	f7fe fc3c 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 8007870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	469a      	mov	sl, r3
 8007876:	f04f 0b00 	mov.w	fp, #0
 800787a:	46d0      	mov	r8, sl
 800787c:	46d9      	mov	r9, fp
 800787e:	eb18 0308 	adds.w	r3, r8, r8
 8007882:	eb49 0409 	adc.w	r4, r9, r9
 8007886:	4698      	mov	r8, r3
 8007888:	46a1      	mov	r9, r4
 800788a:	eb18 080a 	adds.w	r8, r8, sl
 800788e:	eb49 090b 	adc.w	r9, r9, fp
 8007892:	f04f 0100 	mov.w	r1, #0
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800789e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078a6:	4688      	mov	r8, r1
 80078a8:	4691      	mov	r9, r2
 80078aa:	eb1a 0508 	adds.w	r5, sl, r8
 80078ae:	eb4b 0609 	adc.w	r6, fp, r9
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	4619      	mov	r1, r3
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	0094      	lsls	r4, r2, #2
 80078c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078ca:	008b      	lsls	r3, r1, #2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4623      	mov	r3, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	4631      	mov	r1, r6
 80078d4:	f7f9 f8ca 	bl	8000a6c <__aeabi_uldivmod>
 80078d8:	4603      	mov	r3, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	461a      	mov	r2, r3
 80078de:	4b50      	ldr	r3, [pc, #320]	; (8007a20 <UART_SetConfig+0x6f4>)
 80078e0:	fba3 2302 	umull	r2, r3, r3, r2
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	469b      	mov	fp, r3
 80078ee:	f04f 0c00 	mov.w	ip, #0
 80078f2:	46d9      	mov	r9, fp
 80078f4:	46e2      	mov	sl, ip
 80078f6:	eb19 0309 	adds.w	r3, r9, r9
 80078fa:	eb4a 040a 	adc.w	r4, sl, sl
 80078fe:	4699      	mov	r9, r3
 8007900:	46a2      	mov	sl, r4
 8007902:	eb19 090b 	adds.w	r9, r9, fp
 8007906:	eb4a 0a0c 	adc.w	sl, sl, ip
 800790a:	f04f 0100 	mov.w	r1, #0
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800791a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800791e:	4689      	mov	r9, r1
 8007920:	4692      	mov	sl, r2
 8007922:	eb1b 0509 	adds.w	r5, fp, r9
 8007926:	eb4c 060a 	adc.w	r6, ip, sl
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	4619      	mov	r1, r3
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	0094      	lsls	r4, r2, #2
 800793e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007942:	008b      	lsls	r3, r1, #2
 8007944:	461a      	mov	r2, r3
 8007946:	4623      	mov	r3, r4
 8007948:	4628      	mov	r0, r5
 800794a:	4631      	mov	r1, r6
 800794c:	f7f9 f88e 	bl	8000a6c <__aeabi_uldivmod>
 8007950:	4603      	mov	r3, r0
 8007952:	460c      	mov	r4, r1
 8007954:	461a      	mov	r2, r3
 8007956:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <UART_SetConfig+0x6f4>)
 8007958:	fba3 1302 	umull	r1, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2164      	movs	r1, #100	; 0x64
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	3332      	adds	r3, #50	; 0x32
 800796a:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <UART_SetConfig+0x6f4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007976:	4498      	add	r8, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	469b      	mov	fp, r3
 800797c:	f04f 0c00 	mov.w	ip, #0
 8007980:	46d9      	mov	r9, fp
 8007982:	46e2      	mov	sl, ip
 8007984:	eb19 0309 	adds.w	r3, r9, r9
 8007988:	eb4a 040a 	adc.w	r4, sl, sl
 800798c:	4699      	mov	r9, r3
 800798e:	46a2      	mov	sl, r4
 8007990:	eb19 090b 	adds.w	r9, r9, fp
 8007994:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079ac:	4689      	mov	r9, r1
 80079ae:	4692      	mov	sl, r2
 80079b0:	eb1b 0509 	adds.w	r5, fp, r9
 80079b4:	eb4c 060a 	adc.w	r6, ip, sl
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f04f 0400 	mov.w	r4, #0
 80079ca:	0094      	lsls	r4, r2, #2
 80079cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079d0:	008b      	lsls	r3, r1, #2
 80079d2:	461a      	mov	r2, r3
 80079d4:	4623      	mov	r3, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	4631      	mov	r1, r6
 80079da:	f7f9 f847 	bl	8000a6c <__aeabi_uldivmod>
 80079de:	4603      	mov	r3, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <UART_SetConfig+0x6f4>)
 80079e6:	fba3 1302 	umull	r1, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2164      	movs	r1, #100	; 0x64
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	; 0x32
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <UART_SetConfig+0x6f4>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4442      	add	r2, r8
 8007a0a:	609a      	str	r2, [r3, #8]
}
 8007a0c:	e7ff      	b.n	8007a0e <UART_SetConfig+0x6e2>
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	40011000 	.word	0x40011000
 8007a1c:	40011400 	.word	0x40011400
 8007a20:	51eb851f 	.word	0x51eb851f

08007a24 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d029      	beq.n	8007a92 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a4e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a58:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007a5e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007a64:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007a6a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007a70:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007a76:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007a7c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007a82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e034      	b.n	8007afc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a9e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aa8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007aae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ac6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ad0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007ad6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007adc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007ae2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ae8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b087      	sub	sp, #28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d02e      	beq.n	8007b82 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b30:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b40:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b4a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b54:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b5e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b72:	4313      	orrs	r3, r2
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	e03b      	b.n	8007bfa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b92:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bb8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bc8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bd2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bdc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007be6:	4313      	orrs	r3, r2
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c24:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007c2e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007c40:	f7fa fe38 	bl	80028b4 <HAL_GetTick>
 8007c44:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c46:	e010      	b.n	8007c6a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d00c      	beq.n	8007c6a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <FMC_SDRAM_SendCommand+0x5e>
 8007c56:	f7fa fe2d 	bl	80028b4 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d201      	bcs.n	8007c6a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e006      	b.n	8007c78 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d0e8      	beq.n	8007c48 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	f107 001c 	add.w	r0, r7, #28
 8007cb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d122      	bne.n	8007d04 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d105      	bne.n	8007cf8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f949 	bl	8007f90 <USB_CoreReset>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
 8007d02:	e01a      	b.n	8007d3a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f93d 	bl	8007f90 <USB_CoreReset>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d2c:	e005      	b.n	8007d3a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10b      	bne.n	8007d58 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f043 0206 	orr.w	r2, r3, #6
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f043 0220 	orr.w	r2, r3, #32
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr

08007d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f043 0201 	orr.w	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d106      	bne.n	8007dd8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	e00b      	b.n	8007df0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e003      	b.n	8007df8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007df0:	2032      	movs	r0, #50	; 0x32
 8007df2:	f7fa fd6b 	bl	80028cc <HAL_Delay>

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	019b      	lsls	r3, r3, #6
 8007e12:	f043 0220 	orr.w	r2, r3, #32
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <USB_FlushTxFifo+0x48>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d0f0      	beq.n	8007e1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	00030d40 	.word	0x00030d40

08007e4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <USB_FlushRxFifo+0x40>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d901      	bls.n	8007e70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e006      	b.n	8007e7e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d0f0      	beq.n	8007e5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	00030d40 	.word	0x00030d40

08007e90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	71fb      	strb	r3, [r7, #7]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11a      	bne.n	8007eec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eb6:	88bb      	ldrh	r3, [r7, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e00f      	b.n	8007ee4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	031a      	lsls	r2, r3, #12
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3304      	adds	r3, #4
 8007edc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d3eb      	bcc.n	8007ec4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3724      	adds	r7, #36	; 0x24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b089      	sub	sp, #36	; 0x24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	3303      	adds	r3, #3
 8007f14:	089b      	lsrs	r3, r3, #2
 8007f16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e00b      	b.n	8007f36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	3301      	adds	r3, #1
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d3ef      	bcc.n	8007f1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007f3e:	69fb      	ldr	r3, [r7, #28]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3724      	adds	r7, #36	; 0x24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4013      	ands	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f64:	68fb      	ldr	r3, [r7, #12]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e01b      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	daf2      	bge.n	8007f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d0f0      	beq.n	8007fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	00030d40 	.word	0x00030d40

08007ff8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	f107 001c 	add.w	r0, r7, #28
 8008006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008014:	461a      	mov	r2, r3
 8008016:	2300      	movs	r3, #0
 8008018:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d018      	beq.n	800807c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b01      	cmp	r3, #1
 800804e:	d10a      	bne.n	8008066 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800805e:	f043 0304 	orr.w	r3, r3, #4
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	e014      	b.n	8008090 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008074:	f023 0304 	bic.w	r3, r3, #4
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e009      	b.n	8008090 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800808a:	f023 0304 	bic.w	r3, r3, #4
 800808e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008090:	2110      	movs	r1, #16
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff feb4 	bl	8007e00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fed7 	bl	8007e4c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	e015      	b.n	80080d0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b0:	461a      	mov	r2, r3
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c4:	461a      	mov	r2, r3
 80080c6:	2300      	movs	r3, #0
 80080c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3301      	adds	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3e5      	bcc.n	80080a4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80080d8:	2101      	movs	r1, #1
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8ac 	bl	8008238 <USB_DriveVbus>

  HAL_Delay(200U);
 80080e0:	20c8      	movs	r0, #200	; 0xc8
 80080e2:	f7fa fbf3 	bl	80028cc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008106:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a14      	ldr	r2, [pc, #80]	; (800815c <USB_HostInit+0x164>)
 800810c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <USB_HostInit+0x168>)
 8008112:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008116:	e009      	b.n	800812c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a10      	ldr	r2, [pc, #64]	; (8008164 <USB_HostInit+0x16c>)
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a10      	ldr	r2, [pc, #64]	; (8008168 <USB_HostInit+0x170>)
 8008128:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d105      	bne.n	800813e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f043 0210 	orr.w	r2, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <USB_HostInit+0x174>)
 8008144:	4313      	orrs	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008156:	b004      	add	sp, #16
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	01000200 	.word	0x01000200
 8008160:	00e00300 	.word	0x00e00300
 8008164:	00600080 	.word	0x00600080
 8008168:	004000e0 	.word	0x004000e0
 800816c:	a3200008 	.word	0xa3200008

08008170 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d107      	bne.n	80081c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b8:	461a      	mov	r2, r3
 80081ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081be:	6053      	str	r3, [r2, #4]
 80081c0:	e009      	b.n	80081d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d106      	bne.n	80081d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ce:	461a      	mov	r2, r3
 80081d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80081d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008204:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800820e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008212:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008214:	2064      	movs	r0, #100	; 0x64
 8008216:	f7fa fb59 	bl	80028cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008226:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008228:	200a      	movs	r0, #10
 800822a:	f7fa fb4f 	bl	80028cc <HAL_Delay>

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800825c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <USB_DriveVbus+0x44>
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d106      	bne.n	800827c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800827a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008286:	d109      	bne.n	800829c <USB_DriveVbus+0x64>
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800829a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	0c5b      	lsrs	r3, r3, #17
 80082c8:	f003 0303 	and.w	r3, r3, #3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	b29b      	uxth	r3, r3
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
	...

080082fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	4608      	mov	r0, r1
 8008306:	4611      	mov	r1, r2
 8008308:	461a      	mov	r2, r3
 800830a:	4603      	mov	r3, r0
 800830c:	70fb      	strb	r3, [r7, #3]
 800830e:	460b      	mov	r3, r1
 8008310:	70bb      	strb	r3, [r7, #2]
 8008312:	4613      	mov	r3, r2
 8008314:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	461a      	mov	r2, r3
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008336:	2b03      	cmp	r3, #3
 8008338:	d87e      	bhi.n	8008438 <USB_HC_Init+0x13c>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <USB_HC_Init+0x44>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008351 	.word	0x08008351
 8008344:	080083fb 	.word	0x080083fb
 8008348:	08008351 	.word	0x08008351
 800834c:	080083bd 	.word	0x080083bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835c:	461a      	mov	r2, r3
 800835e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008362:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	da10      	bge.n	800838e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	440a      	add	r2, r1
 8008382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800838c:	e057      	b.n	800843e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008396:	2b00      	cmp	r3, #0
 8008398:	d051      	beq.n	800843e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083b8:	60d3      	str	r3, [r2, #12]
      break;
 80083ba:	e040      	b.n	800843e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	461a      	mov	r2, r3
 80083ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80083ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da34      	bge.n	8008442 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80083f8:	e023      	b.n	8008442 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	461a      	mov	r2, r3
 8008408:	f240 2325 	movw	r3, #549	; 0x225
 800840c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800840e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da17      	bge.n	8008446 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008430:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008434:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008436:	e006      	b.n	8008446 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
      break;
 800843c:	e004      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 800843e:	bf00      	nop
 8008440:	e002      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 8008446:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	2101      	movs	r1, #1
 8008458:	fa01 f303 	lsl.w	r3, r1, r3
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008462:	4313      	orrs	r3, r2
 8008464:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008472:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da03      	bge.n	8008482 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800847a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	e001      	b.n	8008486 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d103      	bne.n	8008496 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800848e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e001      	b.n	800849a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800849a:	787b      	ldrb	r3, [r7, #1]
 800849c:	059b      	lsls	r3, r3, #22
 800849e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084a2:	78bb      	ldrb	r3, [r7, #2]
 80084a4:	02db      	lsls	r3, r3, #11
 80084a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084b0:	049b      	lsls	r3, r3, #18
 80084b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	0159      	lsls	r1, r3, #5
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	440b      	add	r3, r1
 80084cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80084d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d10f      	bne.n	8008500 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop

08008510 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	; 0x30
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800852c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d028      	beq.n	800858c <USB_HC_StartXfer+0x7c>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d124      	bne.n	800858c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <USB_HC_StartXfer+0x50>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	795b      	ldrb	r3, [r3, #5]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d107      	bne.n	8008560 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	4619      	mov	r1, r3
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fa30 	bl	80089bc <USB_DoPing>
      return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e114      	b.n	800878a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d112      	bne.n	800858c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	6a3a      	ldr	r2, [r7, #32]
 800857a:	440a      	add	r2, r1
 800857c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008580:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008584:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d018      	beq.n	80085c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	8912      	ldrh	r2, [r2, #8]
 800859c:	4413      	add	r3, r2
 800859e:	3b01      	subs	r3, #1
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	8912      	ldrh	r2, [r2, #8]
 80085a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80085aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085ac:	8b7b      	ldrh	r3, [r7, #26]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d90b      	bls.n	80085ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80085b2:	8b7b      	ldrh	r3, [r7, #26]
 80085b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80085b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	8912      	ldrh	r2, [r2, #8]
 80085bc:	fb02 f203 	mul.w	r2, r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	611a      	str	r2, [r3, #16]
 80085c4:	e001      	b.n	80085ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80085c6:	2301      	movs	r3, #1
 80085c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	78db      	ldrb	r3, [r3, #3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d006      	beq.n	80085e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80085d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	8912      	ldrh	r2, [r2, #8]
 80085d8:	fb02 f203 	mul.w	r2, r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085ea:	04d9      	lsls	r1, r3, #19
 80085ec:	4b69      	ldr	r3, [pc, #420]	; (8008794 <USB_HC_StartXfer+0x284>)
 80085ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	7a9b      	ldrb	r3, [r3, #10]
 80085f6:	075b      	lsls	r3, r3, #29
 80085f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80085fc:	69f9      	ldr	r1, [r7, #28]
 80085fe:	0148      	lsls	r0, r1, #5
 8008600:	6a39      	ldr	r1, [r7, #32]
 8008602:	4401      	add	r1, r0
 8008604:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008608:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800860a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	68d9      	ldr	r1, [r3, #12]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	460a      	mov	r2, r1
 8008624:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	6a3a      	ldr	r2, [r7, #32]
 8008652:	440a      	add	r2, r1
 8008654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008658:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800865c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	7e7b      	ldrb	r3, [r7, #25]
 800866e:	075b      	lsls	r3, r3, #29
 8008670:	69f9      	ldr	r1, [r7, #28]
 8008672:	0148      	lsls	r0, r1, #5
 8008674:	6a39      	ldr	r1, [r7, #32]
 8008676:	4401      	add	r1, r0
 8008678:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800867c:	4313      	orrs	r3, r2
 800867e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	4413      	add	r3, r2
 8008688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a42      	ldr	r2, [pc, #264]	; (8008798 <USB_HC_StartXfer+0x288>)
 8008690:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008692:	4b41      	ldr	r3, [pc, #260]	; (8008798 <USB_HC_StartXfer+0x288>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800869a:	4a3f      	ldr	r2, [pc, #252]	; (8008798 <USB_HC_StartXfer+0x288>)
 800869c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	78db      	ldrb	r3, [r3, #3]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086a6:	4b3c      	ldr	r3, [pc, #240]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ae:	4a3a      	ldr	r2, [pc, #232]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	e005      	b.n	80086c0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086b4:	4b38      	ldr	r3, [pc, #224]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086bc:	4a36      	ldr	r2, [pc, #216]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086be:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086c0:	4b35      	ldr	r3, [pc, #212]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c8:	4a33      	ldr	r2, [pc, #204]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086ca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d8:	461a      	mov	r2, r3
 80086da:	4b2f      	ldr	r3, [pc, #188]	; (8008798 <USB_HC_StartXfer+0x288>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e04f      	b.n	800878a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	78db      	ldrb	r3, [r3, #3]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d14a      	bne.n	8008788 <USB_HC_StartXfer+0x278>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d046      	beq.n	8008788 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	79db      	ldrb	r3, [r3, #7]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d830      	bhi.n	8008764 <USB_HC_StartXfer+0x254>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USB_HC_StartXfer+0x1f8>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008719 	.word	0x08008719
 800870c:	0800873d 	.word	0x0800873d
 8008710:	08008719 	.word	0x08008719
 8008714:	0800873d 	.word	0x0800873d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	3303      	adds	r3, #3
 800871e:	089b      	lsrs	r3, r3, #2
 8008720:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008722:	8afa      	ldrh	r2, [r7, #22]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	b29b      	uxth	r3, r3
 800872a:	429a      	cmp	r2, r3
 800872c:	d91c      	bls.n	8008768 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f043 0220 	orr.w	r2, r3, #32
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	619a      	str	r2, [r3, #24]
        }
        break;
 800873a:	e015      	b.n	8008768 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	3303      	adds	r3, #3
 8008742:	089b      	lsrs	r3, r3, #2
 8008744:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008746:	8afa      	ldrh	r2, [r7, #22]
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	b29b      	uxth	r3, r3
 8008752:	429a      	cmp	r2, r3
 8008754:	d90a      	bls.n	800876c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	619a      	str	r2, [r3, #24]
        }
        break;
 8008762:	e003      	b.n	800876c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <USB_HC_StartXfer+0x25e>
        break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <USB_HC_StartXfer+0x25e>
        break;
 800876c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	68d9      	ldr	r1, [r3, #12]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	785a      	ldrb	r2, [r3, #1]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	b298      	uxth	r0, r3
 800877c:	2300      	movs	r3, #0
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4603      	mov	r3, r0
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fb84 	bl	8007e90 <USB_WritePacket>
  }

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3728      	adds	r7, #40	; 0x28
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	1ff80000 	.word	0x1ff80000
 8008798:	20000140 	.word	0x20000140

0800879c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	b29b      	uxth	r3, r3
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087be:	b480      	push	{r7}
 80087c0:	b087      	sub	sp, #28
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	0c9b      	lsrs	r3, r3, #18
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <USB_HC_Halt+0x3a>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d16c      	bne.n	80088d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	440a      	add	r2, r1
 800880e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008816:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d143      	bne.n	80088ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	4413      	add	r3, r2
 800882c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	440a      	add	r2, r1
 800883a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800883e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008842:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	440a      	add	r2, r1
 800885a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800885e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008862:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4413      	add	r3, r2
 800886c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	440a      	add	r2, r1
 800887a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800887e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008882:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	3301      	adds	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008890:	d81d      	bhi.n	80088ce <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a8:	d0ec      	beq.n	8008884 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088aa:	e080      	b.n	80089ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088cc:	e06f      	b.n	80089ae <USB_HC_Halt+0x1f0>
          break;
 80088ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088d0:	e06d      	b.n	80089ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d143      	bne.n	800898a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	440a      	add	r2, r1
 8008918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800891c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008920:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	440a      	add	r2, r1
 8008938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800893c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008940:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	440a      	add	r2, r1
 8008958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008960:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	3301      	adds	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d81d      	bhi.n	80089ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008986:	d0ec      	beq.n	8008962 <USB_HC_Halt+0x1a4>
 8008988:	e011      	b.n	80089ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e000      	b.n	80089ae <USB_HC_Halt+0x1f0>
          break;
 80089ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80089d0:	2301      	movs	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	04da      	lsls	r2, r3, #19
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <USB_DoPing+0x74>)
 80089da:	4013      	ands	r3, r2
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	1ff80000 	.word	0x1ff80000

08008a34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff f9a0 	bl	8007d8a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008a4a:	2110      	movs	r1, #16
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff f9d7 	bl	8007e00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff f9fa 	bl	8007e4c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	e01f      	b.n	8008a9e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a92:	461a      	mov	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b0f      	cmp	r3, #15
 8008aa2:	d9dc      	bls.n	8008a5e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	e034      	b.n	8008b14 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ac8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ad0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008af0:	d80c      	bhi.n	8008b0c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b08:	d0ec      	beq.n	8008ae4 <USB_StopHost+0xb0>
 8008b0a:	e000      	b.n	8008b0e <USB_StopHost+0xda>
        break;
 8008b0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	3301      	adds	r3, #1
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	d9c7      	bls.n	8008aaa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b20:	461a      	mov	r2, r3
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295
 8008b26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff f919 	bl	8007d68 <USB_EnableGlobalInt>

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008b44:	4904      	ldr	r1, [pc, #16]	; (8008b58 <MX_FATFS_Init+0x18>)
 8008b46:	4805      	ldr	r0, [pc, #20]	; (8008b5c <MX_FATFS_Init+0x1c>)
 8008b48:	f005 f8da 	bl	800dd00 <FATFS_LinkDriver>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b03      	ldr	r3, [pc, #12]	; (8008b60 <MX_FATFS_Init+0x20>)
 8008b52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b54:	bf00      	nop
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20001614 	.word	0x20001614
 8008b5c:	08026610 	.word	0x08026610
 8008b60:	2000247c 	.word	0x2000247c

08008b64 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4808      	ldr	r0, [pc, #32]	; (8008bb0 <USBH_status+0x34>)
 8008b90:	f000 fe11 	bl	80097b6 <USBH_MSC_UnitIsReady>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
 8008b9e:	e001      	b.n	8008ba4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20002480 	.word	0x20002480

08008bb4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b094      	sub	sp, #80	; 0x50
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008bca:	7bf9      	ldrb	r1, [r7, #15]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4812      	ldr	r0, [pc, #72]	; (8008c20 <USBH_read+0x6c>)
 8008bd6:	f000 fe38 	bl	800984a <USBH_MSC_Read>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d103      	bne.n	8008be8 <USBH_read+0x34>
  {
    res = RES_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008be6:	e015      	b.n	8008c14 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008be8:	f107 0210 	add.w	r2, r7, #16
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	480b      	ldr	r0, [pc, #44]	; (8008c20 <USBH_read+0x6c>)
 8008bf2:	f000 fe06 	bl	8009802 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008bf6:	7f7b      	ldrb	r3, [r7, #29]
 8008bf8:	2b28      	cmp	r3, #40	; 0x28
 8008bfa:	d003      	beq.n	8008c04 <USBH_read+0x50>
 8008bfc:	2b3a      	cmp	r3, #58	; 0x3a
 8008bfe:	d001      	beq.n	8008c04 <USBH_read+0x50>
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d103      	bne.n	8008c0c <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008c04:	2303      	movs	r3, #3
 8008c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c0a:	e003      	b.n	8008c14 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c12:	bf00      	nop
    }
  }

  return res;
 8008c14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3748      	adds	r7, #72	; 0x48
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20002480 	.word	0x20002480

08008c24 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b094      	sub	sp, #80	; 0x50
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008c3a:	7bf9      	ldrb	r1, [r7, #15]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4817      	ldr	r0, [pc, #92]	; (8008ca4 <USBH_write+0x80>)
 8008c46:	f000 fe69 	bl	800991c <USBH_MSC_Write>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d103      	bne.n	8008c58 <USBH_write+0x34>
  {
    res = RES_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c56:	e01f      	b.n	8008c98 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008c58:	f107 0210 	add.w	r2, r7, #16
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4810      	ldr	r0, [pc, #64]	; (8008ca4 <USBH_write+0x80>)
 8008c62:	f000 fdce 	bl	8009802 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008c66:	7f7b      	ldrb	r3, [r7, #29]
 8008c68:	2b27      	cmp	r3, #39	; 0x27
 8008c6a:	d009      	beq.n	8008c80 <USBH_write+0x5c>
 8008c6c:	2b27      	cmp	r3, #39	; 0x27
 8008c6e:	dc02      	bgt.n	8008c76 <USBH_write+0x52>
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d009      	beq.n	8008c88 <USBH_write+0x64>
 8008c74:	e00c      	b.n	8008c90 <USBH_write+0x6c>
 8008c76:	2b28      	cmp	r3, #40	; 0x28
 8008c78:	d006      	beq.n	8008c88 <USBH_write+0x64>
 8008c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8008c7c:	d004      	beq.n	8008c88 <USBH_write+0x64>
 8008c7e:	e007      	b.n	8008c90 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008c80:	2302      	movs	r3, #2
 8008c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c86:	e007      	b.n	8008c98 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c8e:	e003      	b.n	8008c98 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008c96:	bf00      	nop
    }
  }

  return res;
 8008c98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3748      	adds	r7, #72	; 0x48
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20002480 	.word	0x20002480

08008ca8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b090      	sub	sp, #64	; 0x40
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	603a      	str	r2, [r7, #0]
 8008cb2:	71fb      	strb	r3, [r7, #7]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008cbe:	79bb      	ldrb	r3, [r7, #6]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d852      	bhi.n	8008d6a <USBH_ioctl+0xc2>
 8008cc4:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <USBH_ioctl+0x24>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008d0f 	.word	0x08008d0f
 8008cd8:	08008d3b 	.word	0x08008d3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ce2:	e045      	b.n	8008d70 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ce4:	f107 0208 	add.w	r2, r7, #8
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	4619      	mov	r1, r3
 8008cec:	4823      	ldr	r0, [pc, #140]	; (8008d7c <USBH_ioctl+0xd4>)
 8008cee:	f000 fd88 	bl	8009802 <USBH_MSC_GetLUNInfo>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008d04:	e034      	b.n	8008d70 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008d0c:	e030      	b.n	8008d70 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008d0e:	f107 0208 	add.w	r2, r7, #8
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	4619      	mov	r1, r3
 8008d16:	4819      	ldr	r0, [pc, #100]	; (8008d7c <USBH_ioctl+0xd4>)
 8008d18:	f000 fd73 	bl	8009802 <USBH_MSC_GetLUNInfo>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008d22:	8a3b      	ldrh	r3, [r7, #16]
 8008d24:	461a      	mov	r2, r3
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008d30:	e01e      	b.n	8008d70 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008d38:	e01a      	b.n	8008d70 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008d3a:	f107 0208 	add.w	r2, r7, #8
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	4619      	mov	r1, r3
 8008d42:	480e      	ldr	r0, [pc, #56]	; (8008d7c <USBH_ioctl+0xd4>)
 8008d44:	f000 fd5d 	bl	8009802 <USBH_MSC_GetLUNInfo>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008d4e:	8a3b      	ldrh	r3, [r7, #16]
 8008d50:	0a5b      	lsrs	r3, r3, #9
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008d60:	e006      	b.n	8008d70 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008d68:	e002      	b.n	8008d70 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008d6a:	2304      	movs	r3, #4
 8008d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3740      	adds	r7, #64	; 0x40
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20002480 	.word	0x20002480

08008d80 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8e:	7919      	ldrb	r1, [r3, #4]
 8008d90:	2350      	movs	r3, #80	; 0x50
 8008d92:	2206      	movs	r2, #6
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fc4f 	bl	800a638 <USBH_FindInterface>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2bff      	cmp	r3, #255	; 0xff
 8008da2:	d002      	beq.n	8008daa <USBH_MSC_InterfaceInit+0x2a>
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d901      	bls.n	8008dae <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008daa:	2302      	movs	r3, #2
 8008dac:	e0ef      	b.n	8008f8e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc24 	bl	800a600 <USBH_SelectInterface>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e0e3      	b.n	8008f8e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008dcc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008dd0:	f01c f88a 	bl	8024ee8 <malloc>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008de8:	2302      	movs	r3, #2
 8008dea:	e0d0      	b.n	8008f8e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df0:	2100      	movs	r1, #0
 8008df2:	68b8      	ldr	r0, [r7, #8]
 8008df4:	f01c f893 	bl	8024f1e <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	211a      	movs	r1, #26
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da16      	bge.n	8008e3e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	211a      	movs	r1, #26
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	211a      	movs	r1, #26
 8008e2c:	fb01 f303 	mul.w	r3, r1, r3
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e36:	881a      	ldrh	r2, [r3, #0]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	815a      	strh	r2, [r3, #10]
 8008e3c:	e015      	b.n	8008e6a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	211a      	movs	r1, #26
 8008e44:	fb01 f303 	mul.w	r3, r1, r3
 8008e48:	4413      	add	r3, r2
 8008e4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	211a      	movs	r1, #26
 8008e5a:	fb01 f303 	mul.w	r3, r1, r3
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e64:	881a      	ldrh	r2, [r3, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	211a      	movs	r1, #26
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da16      	bge.n	8008eb0 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	211a      	movs	r1, #26
 8008e88:	fb01 f303 	mul.w	r3, r1, r3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	211a      	movs	r1, #26
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ea8:	881a      	ldrh	r2, [r3, #0]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	815a      	strh	r2, [r3, #10]
 8008eae:	e015      	b.n	8008edc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	211a      	movs	r1, #26
 8008eb6:	fb01 f303 	mul.w	r3, r1, r3
 8008eba:	4413      	add	r3, r2
 8008ebc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	211a      	movs	r1, #26
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ed6:	881a      	ldrh	r2, [r3, #0]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2200      	movs	r2, #0
 8008eec:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	799b      	ldrb	r3, [r3, #6]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f002 fdc2 	bl	800ba7e <USBH_AllocPipe>
 8008efa:	4603      	mov	r3, r0
 8008efc:	461a      	mov	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	79db      	ldrb	r3, [r3, #7]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f002 fdb8 	bl	800ba7e <USBH_AllocPipe>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fda4 	bl	8009a64 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	7959      	ldrb	r1, [r3, #5]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	7998      	ldrb	r0, [r3, #6]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	8912      	ldrh	r2, [r2, #8]
 8008f34:	9202      	str	r2, [sp, #8]
 8008f36:	2202      	movs	r2, #2
 8008f38:	9201      	str	r2, [sp, #4]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f002 fd6d 	bl	800ba20 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	7919      	ldrb	r1, [r3, #4]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	79d8      	ldrb	r0, [r3, #7]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	8952      	ldrh	r2, [r2, #10]
 8008f5e:	9202      	str	r2, [sp, #8]
 8008f60:	2202      	movs	r2, #2
 8008f62:	9201      	str	r2, [sp, #4]
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	4623      	mov	r3, r4
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f002 fd58 	bl	800ba20 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	791b      	ldrb	r3, [r3, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f00b f96f 	bl	801425c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	2200      	movs	r2, #0
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f00b f968 	bl	801425c <USBH_LL_SetToggle>

  return USBH_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd90      	pop	{r4, r7, pc}

08008f96 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	795b      	ldrb	r3, [r3, #5]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00e      	beq.n	8008fce <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	795b      	ldrb	r3, [r3, #5]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f002 fd51 	bl	800ba5e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	795b      	ldrb	r3, [r3, #5]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fd7c 	bl	800bac0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	791b      	ldrb	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	791b      	ldrb	r3, [r3, #4]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f002 fd3e 	bl	800ba5e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	791b      	ldrb	r3, [r3, #4]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f002 fd69 	bl	800bac0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	4618      	mov	r0, r3
 800900a:	f01b ff75 	bl	8024ef8 <free>
    phost->pActiveClass->pData = 0U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009014:	2200      	movs	r2, #0
 8009016:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009034:	2301      	movs	r3, #1
 8009036:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	7b9b      	ldrb	r3, [r3, #14]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d004      	beq.n	800904a <USBH_MSC_ClassRequest+0x28>
 8009040:	2b03      	cmp	r3, #3
 8009042:	d03e      	beq.n	80090c2 <USBH_MSC_ClassRequest+0xa0>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d000      	beq.n	800904a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8009048:	e04a      	b.n	80090e0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fcea 	bl	8009a28 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	2b03      	cmp	r3, #3
 800905c:	d104      	bne.n	8009068 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d135      	bne.n	80090da <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d804      	bhi.n	8009080 <USBH_MSC_ClassRequest+0x5e>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	3301      	adds	r3, #1
 800907c:	b2da      	uxtb	r2, r3
 800907e:	e000      	b.n	8009082 <USBH_MSC_ClassRequest+0x60>
 8009080:	2202      	movs	r2, #2
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009086:	2300      	movs	r3, #0
 8009088:	73bb      	strb	r3, [r7, #14]
 800908a:	e014      	b.n	80090b6 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2134      	movs	r1, #52	; 0x34
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	3392      	adds	r3, #146	; 0x92
 800909a:	2202      	movs	r2, #2
 800909c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	2134      	movs	r1, #52	; 0x34
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	33c1      	adds	r3, #193	; 0xc1
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	3301      	adds	r3, #1
 80090b4:	73bb      	strb	r3, [r7, #14]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	7bba      	ldrb	r2, [r7, #14]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3e5      	bcc.n	800908c <USBH_MSC_ClassRequest+0x6a>
      break;
 80090c0:	e00b      	b.n	80090da <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80090c2:	2100      	movs	r1, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f002 f878 	bl	800b1ba <USBH_ClrFeature>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	7bda      	ldrb	r2, [r3, #15]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	739a      	strb	r2, [r3, #14]
      break;
 80090d8:	e001      	b.n	80090de <USBH_MSC_ClassRequest+0xbc>
      break;
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <USBH_MSC_ClassRequest+0xbe>
      break;
 80090de:	bf00      	nop
  }

  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80090fe:	2301      	movs	r3, #1
 8009100:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009102:	2301      	movs	r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009106:	2301      	movs	r3, #1
 8009108:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	7b1b      	ldrb	r3, [r3, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <USBH_MSC_Process+0x2e>
 8009112:	2b01      	cmp	r3, #1
 8009114:	f000 8271 	beq.w	80095fa <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009118:	e272      	b.n	8009600 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	429a      	cmp	r2, r3
 8009128:	f080 824f 	bcs.w	80095ca <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009132:	4619      	mov	r1, r3
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	2334      	movs	r3, #52	; 0x34
 8009138:	fb03 f301 	mul.w	r3, r3, r1
 800913c:	4413      	add	r3, r2
 800913e:	3391      	adds	r3, #145	; 0x91
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914a:	4619      	mov	r1, r3
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	2334      	movs	r3, #52	; 0x34
 8009150:	fb03 f301 	mul.w	r3, r3, r1
 8009154:	4413      	add	r3, r2
 8009156:	3390      	adds	r3, #144	; 0x90
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b08      	cmp	r3, #8
 800915c:	f200 8243 	bhi.w	80095e6 <USBH_MSC_Process+0x4fa>
 8009160:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <USBH_MSC_Process+0x7c>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	0800918d 	.word	0x0800918d
 800916c:	080095e7 	.word	0x080095e7
 8009170:	08009255 	.word	0x08009255
 8009174:	080093d9 	.word	0x080093d9
 8009178:	080091b3 	.word	0x080091b3
 800917c:	080094a5 	.word	0x080094a5
 8009180:	080095e7 	.word	0x080095e7
 8009184:	080095e7 	.word	0x080095e7
 8009188:	080095b9 	.word	0x080095b9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009192:	4619      	mov	r1, r3
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	2334      	movs	r3, #52	; 0x34
 8009198:	fb03 f301 	mul.w	r3, r3, r1
 800919c:	4413      	add	r3, r2
 800919e:	3390      	adds	r3, #144	; 0x90
 80091a0:	2204      	movs	r2, #4
 80091a2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80091b0:	e222      	b.n	80095f8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b8:	b2d9      	uxtb	r1, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c0:	461a      	mov	r2, r3
 80091c2:	2334      	movs	r3, #52	; 0x34
 80091c4:	fb03 f302 	mul.w	r3, r3, r2
 80091c8:	3398      	adds	r3, #152	; 0x98
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4413      	add	r3, r2
 80091ce:	3307      	adds	r3, #7
 80091d0:	461a      	mov	r2, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 ff68 	bl	800a0a8 <USBH_MSC_SCSI_Inquiry>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10b      	bne.n	80091fa <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e8:	4619      	mov	r1, r3
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	2334      	movs	r3, #52	; 0x34
 80091ee:	fb03 f301 	mul.w	r3, r3, r1
 80091f2:	4413      	add	r3, r2
 80091f4:	3390      	adds	r3, #144	; 0x90
 80091f6:	2202      	movs	r2, #2
 80091f8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d10c      	bne.n	800921a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009206:	4619      	mov	r1, r3
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2334      	movs	r3, #52	; 0x34
 800920c:	fb03 f301 	mul.w	r3, r3, r1
 8009210:	4413      	add	r3, r2
 8009212:	3390      	adds	r3, #144	; 0x90
 8009214:	2205      	movs	r2, #5
 8009216:	701a      	strb	r2, [r3, #0]
            break;
 8009218:	e1e7      	b.n	80095ea <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b04      	cmp	r3, #4
 800921e:	f040 81e4 	bne.w	80095ea <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009228:	4619      	mov	r1, r3
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	2334      	movs	r3, #52	; 0x34
 800922e:	fb03 f301 	mul.w	r3, r3, r1
 8009232:	4413      	add	r3, r2
 8009234:	3390      	adds	r3, #144	; 0x90
 8009236:	2201      	movs	r2, #1
 8009238:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009240:	4619      	mov	r1, r3
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	2334      	movs	r3, #52	; 0x34
 8009246:	fb03 f301 	mul.w	r3, r3, r1
 800924a:	4413      	add	r3, r2
 800924c:	3391      	adds	r3, #145	; 0x91
 800924e:	2202      	movs	r2, #2
 8009250:	701a      	strb	r2, [r3, #0]
            break;
 8009252:	e1ca      	b.n	80095ea <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fe64 	bl	8009f2c <USBH_MSC_SCSI_TestUnitReady>
 8009264:	4603      	mov	r3, r0
 8009266:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d149      	bne.n	8009302 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009274:	4619      	mov	r1, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	2334      	movs	r3, #52	; 0x34
 800927a:	fb03 f301 	mul.w	r3, r3, r1
 800927e:	4413      	add	r3, r2
 8009280:	3392      	adds	r3, #146	; 0x92
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800928e:	4619      	mov	r1, r3
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	2334      	movs	r3, #52	; 0x34
 8009294:	fb03 f301 	mul.w	r3, r3, r1
 8009298:	4413      	add	r3, r2
 800929a:	33c1      	adds	r3, #193	; 0xc1
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	e00b      	b.n	80092ba <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a8:	4619      	mov	r1, r3
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	2334      	movs	r3, #52	; 0x34
 80092ae:	fb03 f301 	mul.w	r3, r3, r1
 80092b2:	4413      	add	r3, r2
 80092b4:	33c1      	adds	r3, #193	; 0xc1
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c0:	4619      	mov	r1, r3
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	2334      	movs	r3, #52	; 0x34
 80092c6:	fb03 f301 	mul.w	r3, r3, r1
 80092ca:	4413      	add	r3, r2
 80092cc:	3390      	adds	r3, #144	; 0x90
 80092ce:	2203      	movs	r2, #3
 80092d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d8:	4619      	mov	r1, r3
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	2334      	movs	r3, #52	; 0x34
 80092de:	fb03 f301 	mul.w	r3, r3, r1
 80092e2:	4413      	add	r3, r2
 80092e4:	3391      	adds	r3, #145	; 0x91
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f0:	4619      	mov	r1, r3
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	2334      	movs	r3, #52	; 0x34
 80092f6:	fb03 f301 	mul.w	r3, r3, r1
 80092fa:	4413      	add	r3, r2
 80092fc:	3392      	adds	r3, #146	; 0x92
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d14a      	bne.n	800939e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800930e:	4619      	mov	r1, r3
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	2334      	movs	r3, #52	; 0x34
 8009314:	fb03 f301 	mul.w	r3, r3, r1
 8009318:	4413      	add	r3, r2
 800931a:	3392      	adds	r3, #146	; 0x92
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d00c      	beq.n	800933c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	4413      	add	r3, r2
 8009334:	33c1      	adds	r3, #193	; 0xc1
 8009336:	2201      	movs	r2, #1
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e00b      	b.n	8009354 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009342:	4619      	mov	r1, r3
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	2334      	movs	r3, #52	; 0x34
 8009348:	fb03 f301 	mul.w	r3, r3, r1
 800934c:	4413      	add	r3, r2
 800934e:	33c1      	adds	r3, #193	; 0xc1
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935a:	4619      	mov	r1, r3
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	2334      	movs	r3, #52	; 0x34
 8009360:	fb03 f301 	mul.w	r3, r3, r1
 8009364:	4413      	add	r3, r2
 8009366:	3390      	adds	r3, #144	; 0x90
 8009368:	2205      	movs	r2, #5
 800936a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009372:	4619      	mov	r1, r3
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	2334      	movs	r3, #52	; 0x34
 8009378:	fb03 f301 	mul.w	r3, r3, r1
 800937c:	4413      	add	r3, r2
 800937e:	3391      	adds	r3, #145	; 0x91
 8009380:	2201      	movs	r2, #1
 8009382:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800938a:	4619      	mov	r1, r3
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	2334      	movs	r3, #52	; 0x34
 8009390:	fb03 f301 	mul.w	r3, r3, r1
 8009394:	4413      	add	r3, r2
 8009396:	3392      	adds	r3, #146	; 0x92
 8009398:	2202      	movs	r2, #2
 800939a:	701a      	strb	r2, [r3, #0]
            break;
 800939c:	e127      	b.n	80095ee <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	f040 8124 	bne.w	80095ee <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ac:	4619      	mov	r1, r3
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	2334      	movs	r3, #52	; 0x34
 80093b2:	fb03 f301 	mul.w	r3, r3, r1
 80093b6:	4413      	add	r3, r2
 80093b8:	3390      	adds	r3, #144	; 0x90
 80093ba:	2201      	movs	r2, #1
 80093bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c4:	4619      	mov	r1, r3
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	2334      	movs	r3, #52	; 0x34
 80093ca:	fb03 f301 	mul.w	r3, r3, r1
 80093ce:	4413      	add	r3, r2
 80093d0:	3391      	adds	r3, #145	; 0x91
 80093d2:	2202      	movs	r2, #2
 80093d4:	701a      	strb	r2, [r3, #0]
            break;
 80093d6:	e10a      	b.n	80095ee <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093de:	b2d9      	uxtb	r1, r3
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e6:	461a      	mov	r2, r3
 80093e8:	2334      	movs	r3, #52	; 0x34
 80093ea:	fb03 f302 	mul.w	r3, r3, r2
 80093ee:	3390      	adds	r3, #144	; 0x90
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	3304      	adds	r3, #4
 80093f6:	461a      	mov	r2, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fdda 	bl	8009fb2 <USBH_MSC_SCSI_ReadCapacity>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d120      	bne.n	800944a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800940e:	4619      	mov	r1, r3
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	2334      	movs	r3, #52	; 0x34
 8009414:	fb03 f301 	mul.w	r3, r3, r1
 8009418:	4413      	add	r3, r2
 800941a:	3390      	adds	r3, #144	; 0x90
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009426:	4619      	mov	r1, r3
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	2334      	movs	r3, #52	; 0x34
 800942c:	fb03 f301 	mul.w	r3, r3, r1
 8009430:	4413      	add	r3, r2
 8009432:	3391      	adds	r3, #145	; 0x91
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800943e:	3301      	adds	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009448:	e0d3      	b.n	80095f2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d10c      	bne.n	800946a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009456:	4619      	mov	r1, r3
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	2334      	movs	r3, #52	; 0x34
 800945c:	fb03 f301 	mul.w	r3, r3, r1
 8009460:	4413      	add	r3, r2
 8009462:	3390      	adds	r3, #144	; 0x90
 8009464:	2205      	movs	r2, #5
 8009466:	701a      	strb	r2, [r3, #0]
            break;
 8009468:	e0c3      	b.n	80095f2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b04      	cmp	r3, #4
 800946e:	f040 80c0 	bne.w	80095f2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009478:	4619      	mov	r1, r3
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	2334      	movs	r3, #52	; 0x34
 800947e:	fb03 f301 	mul.w	r3, r3, r1
 8009482:	4413      	add	r3, r2
 8009484:	3390      	adds	r3, #144	; 0x90
 8009486:	2201      	movs	r2, #1
 8009488:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009490:	4619      	mov	r1, r3
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	2334      	movs	r3, #52	; 0x34
 8009496:	fb03 f301 	mul.w	r3, r3, r1
 800949a:	4413      	add	r3, r2
 800949c:	3391      	adds	r3, #145	; 0x91
 800949e:	2202      	movs	r2, #2
 80094a0:	701a      	strb	r2, [r3, #0]
            break;
 80094a2:	e0a6      	b.n	80095f2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094aa:	b2d9      	uxtb	r1, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b2:	461a      	mov	r2, r3
 80094b4:	2334      	movs	r3, #52	; 0x34
 80094b6:	fb03 f302 	mul.w	r3, r3, r2
 80094ba:	3398      	adds	r3, #152	; 0x98
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	3304      	adds	r3, #4
 80094c2:	461a      	mov	r2, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fe94 	bl	800a1f2 <USBH_MSC_SCSI_RequestSense>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d145      	bne.n	8009560 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094da:	4619      	mov	r1, r3
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	2334      	movs	r3, #52	; 0x34
 80094e0:	fb03 f301 	mul.w	r3, r3, r1
 80094e4:	4413      	add	r3, r2
 80094e6:	339c      	adds	r3, #156	; 0x9c
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d00c      	beq.n	8009508 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094f4:	4619      	mov	r1, r3
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	2334      	movs	r3, #52	; 0x34
 80094fa:	fb03 f301 	mul.w	r3, r3, r1
 80094fe:	4413      	add	r3, r2
 8009500:	339c      	adds	r3, #156	; 0x9c
 8009502:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009504:	2b02      	cmp	r3, #2
 8009506:	d117      	bne.n	8009538 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f242 720f 	movw	r2, #9999	; 0x270f
 800951a:	4293      	cmp	r3, r2
 800951c:	d80c      	bhi.n	8009538 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009524:	4619      	mov	r1, r3
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	2334      	movs	r3, #52	; 0x34
 800952a:	fb03 f301 	mul.w	r3, r3, r1
 800952e:	4413      	add	r3, r2
 8009530:	3390      	adds	r3, #144	; 0x90
 8009532:	2202      	movs	r2, #2
 8009534:	701a      	strb	r2, [r3, #0]
                  break;
 8009536:	e05f      	b.n	80095f8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800953e:	4619      	mov	r1, r3
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	2334      	movs	r3, #52	; 0x34
 8009544:	fb03 f301 	mul.w	r3, r3, r1
 8009548:	4413      	add	r3, r2
 800954a:	3390      	adds	r3, #144	; 0x90
 800954c:	2201      	movs	r2, #1
 800954e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009556:	3301      	adds	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d10c      	bne.n	8009580 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800956c:	4619      	mov	r1, r3
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	2334      	movs	r3, #52	; 0x34
 8009572:	fb03 f301 	mul.w	r3, r3, r1
 8009576:	4413      	add	r3, r2
 8009578:	3390      	adds	r3, #144	; 0x90
 800957a:	2208      	movs	r2, #8
 800957c:	701a      	strb	r2, [r3, #0]
            break;
 800957e:	e03a      	b.n	80095f6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b04      	cmp	r3, #4
 8009584:	d137      	bne.n	80095f6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800958c:	4619      	mov	r1, r3
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	2334      	movs	r3, #52	; 0x34
 8009592:	fb03 f301 	mul.w	r3, r3, r1
 8009596:	4413      	add	r3, r2
 8009598:	3390      	adds	r3, #144	; 0x90
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095a4:	4619      	mov	r1, r3
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	2334      	movs	r3, #52	; 0x34
 80095aa:	fb03 f301 	mul.w	r3, r3, r1
 80095ae:	4413      	add	r3, r2
 80095b0:	3391      	adds	r3, #145	; 0x91
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
            break;
 80095b6:	e01e      	b.n	80095f6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095be:	3301      	adds	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80095c8:	e016      	b.n	80095f8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2201      	movs	r2, #1
 80095d6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095de:	2102      	movs	r1, #2
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      break;
 80095e4:	e00c      	b.n	8009600 <USBH_MSC_Process+0x514>
            break;
 80095e6:	bf00      	nop
 80095e8:	e00a      	b.n	8009600 <USBH_MSC_Process+0x514>
            break;
 80095ea:	bf00      	nop
 80095ec:	e008      	b.n	8009600 <USBH_MSC_Process+0x514>
            break;
 80095ee:	bf00      	nop
 80095f0:	e006      	b.n	8009600 <USBH_MSC_Process+0x514>
            break;
 80095f2:	bf00      	nop
 80095f4:	e004      	b.n	8009600 <USBH_MSC_Process+0x514>
            break;
 80095f6:	bf00      	nop
      break;
 80095f8:	e002      	b.n	8009600 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
      break;
 80095fe:	bf00      	nop
  }
  return error;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop

0800960c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b088      	sub	sp, #32
 8009626:	af02      	add	r7, sp, #8
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009638:	2301      	movs	r3, #1
 800963a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	2134      	movs	r1, #52	; 0x34
 8009646:	fb01 f303 	mul.w	r3, r1, r3
 800964a:	4413      	add	r3, r2
 800964c:	3390      	adds	r3, #144	; 0x90
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b06      	cmp	r3, #6
 8009652:	d004      	beq.n	800965e <USBH_MSC_RdWrProcess+0x3c>
 8009654:	2b07      	cmp	r3, #7
 8009656:	d037      	beq.n	80096c8 <USBH_MSC_RdWrProcess+0xa6>
 8009658:	2b05      	cmp	r3, #5
 800965a:	d06a      	beq.n	8009732 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800965c:	e0a6      	b.n	80097ac <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800965e:	78f9      	ldrb	r1, [r7, #3]
 8009660:	2300      	movs	r3, #0
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	2200      	movs	r2, #0
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fea6 	bl	800a3ba <USBH_MSC_SCSI_Read>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10b      	bne.n	8009690 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	2134      	movs	r1, #52	; 0x34
 800967e:	fb01 f303 	mul.w	r3, r1, r3
 8009682:	4413      	add	r3, r2
 8009684:	3390      	adds	r3, #144	; 0x90
 8009686:	2201      	movs	r2, #1
 8009688:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
      break;
 800968e:	e088      	b.n	80097a2 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	2b02      	cmp	r3, #2
 8009694:	d109      	bne.n	80096aa <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	2134      	movs	r1, #52	; 0x34
 800969c:	fb01 f303 	mul.w	r3, r1, r3
 80096a0:	4413      	add	r3, r2
 80096a2:	3390      	adds	r3, #144	; 0x90
 80096a4:	2205      	movs	r2, #5
 80096a6:	701a      	strb	r2, [r3, #0]
      break;
 80096a8:	e07b      	b.n	80097a2 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d178      	bne.n	80097a2 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	2134      	movs	r1, #52	; 0x34
 80096b6:	fb01 f303 	mul.w	r3, r1, r3
 80096ba:	4413      	add	r3, r2
 80096bc:	3390      	adds	r3, #144	; 0x90
 80096be:	2208      	movs	r2, #8
 80096c0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096c2:	2302      	movs	r3, #2
 80096c4:	75fb      	strb	r3, [r7, #23]
      break;
 80096c6:	e06c      	b.n	80097a2 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80096c8:	78f9      	ldrb	r1, [r7, #3]
 80096ca:	2300      	movs	r3, #0
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	2200      	movs	r2, #0
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fe06 	bl	800a2e4 <USBH_MSC_SCSI_Write>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	2134      	movs	r1, #52	; 0x34
 80096e8:	fb01 f303 	mul.w	r3, r1, r3
 80096ec:	4413      	add	r3, r2
 80096ee:	3390      	adds	r3, #144	; 0x90
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	e055      	b.n	80097a6 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d109      	bne.n	8009714 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	2134      	movs	r1, #52	; 0x34
 8009706:	fb01 f303 	mul.w	r3, r1, r3
 800970a:	4413      	add	r3, r2
 800970c:	3390      	adds	r3, #144	; 0x90
 800970e:	2205      	movs	r2, #5
 8009710:	701a      	strb	r2, [r3, #0]
      break;
 8009712:	e048      	b.n	80097a6 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d145      	bne.n	80097a6 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	2134      	movs	r1, #52	; 0x34
 8009720:	fb01 f303 	mul.w	r3, r1, r3
 8009724:	4413      	add	r3, r2
 8009726:	3390      	adds	r3, #144	; 0x90
 8009728:	2208      	movs	r2, #8
 800972a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800972c:	2302      	movs	r3, #2
 800972e:	75fb      	strb	r3, [r7, #23]
      break;
 8009730:	e039      	b.n	80097a6 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	2234      	movs	r2, #52	; 0x34
 8009736:	fb02 f303 	mul.w	r3, r2, r3
 800973a:	3398      	adds	r3, #152	; 0x98
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	1d1a      	adds	r2, r3, #4
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fd53 	bl	800a1f2 <USBH_MSC_SCSI_RequestSense>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d113      	bne.n	800977e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	2134      	movs	r1, #52	; 0x34
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	3390      	adds	r3, #144	; 0x90
 8009764:	2201      	movs	r2, #1
 8009766:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	2134      	movs	r1, #52	; 0x34
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	4413      	add	r3, r2
 8009774:	3391      	adds	r3, #145	; 0x91
 8009776:	2202      	movs	r2, #2
 8009778:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800977a:	2302      	movs	r3, #2
 800977c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d012      	beq.n	80097aa <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b04      	cmp	r3, #4
 8009788:	d10f      	bne.n	80097aa <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	2134      	movs	r1, #52	; 0x34
 8009790:	fb01 f303 	mul.w	r3, r1, r3
 8009794:	4413      	add	r3, r2
 8009796:	3390      	adds	r3, #144	; 0x90
 8009798:	2208      	movs	r2, #8
 800979a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800979c:	2302      	movs	r3, #2
 800979e:	75fb      	strb	r3, [r7, #23]
      break;
 80097a0:	e003      	b.n	80097aa <USBH_MSC_RdWrProcess+0x188>
      break;
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <USBH_MSC_RdWrProcess+0x18a>
      break;
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <USBH_MSC_RdWrProcess+0x18a>
      break;
 80097aa:	bf00      	nop

  }
  return error;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b0b      	cmp	r3, #11
 80097d4:	d10c      	bne.n	80097f0 <USBH_MSC_UnitIsReady+0x3a>
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	2134      	movs	r1, #52	; 0x34
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	3391      	adds	r3, #145	; 0x91
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80097ea:	2301      	movs	r3, #1
 80097ec:	73fb      	strb	r3, [r7, #15]
 80097ee:	e001      	b.n	80097f4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	460b      	mov	r3, r1
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b0b      	cmp	r3, #11
 8009822:	d10d      	bne.n	8009840 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	2234      	movs	r2, #52	; 0x34
 8009828:	fb02 f303 	mul.w	r3, r2, r3
 800982c:	3390      	adds	r3, #144	; 0x90
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	2234      	movs	r2, #52	; 0x34
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f01b fb66 	bl	8024f08 <memcpy>
    return USBH_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af02      	add	r7, sp, #8
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	460b      	mov	r3, r1
 8009858:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00e      	beq.n	800988e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009876:	2b0b      	cmp	r3, #11
 8009878:	d109      	bne.n	800988e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	2134      	movs	r1, #52	; 0x34
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	3390      	adds	r3, #144	; 0x90
 8009888:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800988a:	2b01      	cmp	r3, #1
 800988c:	d001      	beq.n	8009892 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800988e:	2302      	movs	r3, #2
 8009890:	e040      	b.n	8009914 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2206      	movs	r2, #6
 8009896:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	2134      	movs	r1, #52	; 0x34
 800989e:	fb01 f303 	mul.w	r3, r1, r3
 80098a2:	4413      	add	r3, r2
 80098a4:	3390      	adds	r3, #144	; 0x90
 80098a6:	2206      	movs	r2, #6
 80098a8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80098b4:	7af9      	ldrb	r1, [r7, #11]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fd7b 	bl	800a3ba <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ca:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098cc:	e016      	b.n	80098fc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	f242 7110 	movw	r1, #10000	; 0x2710
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d805      	bhi.n	80098f2 <USBH_MSC_Read+0xa8>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2201      	movs	r2, #1
 80098f6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	e00b      	b.n	8009914 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	4619      	mov	r1, r3
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff fe8e 	bl	8009622 <USBH_MSC_RdWrProcess>
 8009906:	4603      	mov	r3, r0
 8009908:	2b01      	cmp	r3, #1
 800990a:	d0e0      	beq.n	80098ce <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2201      	movs	r2, #1
 8009910:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	607a      	str	r2, [r7, #4]
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	460b      	mov	r3, r1
 800992a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009948:	2b0b      	cmp	r3, #11
 800994a:	d109      	bne.n	8009960 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	2134      	movs	r1, #52	; 0x34
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	4413      	add	r3, r2
 8009958:	3390      	adds	r3, #144	; 0x90
 800995a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800995c:	2b01      	cmp	r3, #1
 800995e:	d001      	beq.n	8009964 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009960:	2302      	movs	r3, #2
 8009962:	e040      	b.n	80099e6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2207      	movs	r2, #7
 8009968:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	2134      	movs	r1, #52	; 0x34
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3390      	adds	r3, #144	; 0x90
 8009978:	2207      	movs	r2, #7
 800997a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800997c:	7afb      	ldrb	r3, [r7, #11]
 800997e:	b29a      	uxth	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009986:	7af9      	ldrb	r1, [r7, #11]
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fca7 	bl	800a2e4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800999c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800999e:	e016      	b.n	80099ce <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad2      	subs	r2, r2, r3
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80099b0:	fb01 f303 	mul.w	r3, r1, r3
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d805      	bhi.n	80099c4 <USBH_MSC_Write+0xa8>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2201      	movs	r2, #1
 80099c8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80099ca:	2302      	movs	r3, #2
 80099cc:	e00b      	b.n	80099e6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fe25 	bl	8009622 <USBH_MSC_RdWrProcess>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d0e0      	beq.n	80099a0 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2201      	movs	r2, #1
 80099e2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2221      	movs	r2, #33	; 0x21
 80099fa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	22ff      	movs	r2, #255	; 0xff
 8009a00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fdae 	bl	800b57a <USBH_CtlReq>
 8009a1e:	4603      	mov	r3, r0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	22a1      	movs	r2, #161	; 0xa1
 8009a36:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	22fe      	movs	r2, #254	; 0xfe
 8009a3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009a50:	2201      	movs	r2, #1
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fd90 	bl	800b57a <USBH_CtlReq>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <USBH_MSC_BOT_Init+0x3c>)
 8009a7a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <USBH_MSC_BOT_Init+0x40>)
 8009a80:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	43425355 	.word	0x43425355
 8009aa4:	20304050 	.word	0x20304050

08009aa8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009abc:	2301      	movs	r3, #1
 8009abe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	2b0a      	cmp	r3, #10
 8009adc:	f200 81a1 	bhi.w	8009e22 <USBH_MSC_BOT_Process+0x37a>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USBH_MSC_BOT_Process+0x40>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	08009b3f 	.word	0x08009b3f
 8009af0:	08009ba9 	.word	0x08009ba9
 8009af4:	08009bc7 	.word	0x08009bc7
 8009af8:	08009c4b 	.word	0x08009c4b
 8009afc:	08009c6f 	.word	0x08009c6f
 8009b00:	08009d09 	.word	0x08009d09
 8009b04:	08009d25 	.word	0x08009d25
 8009b08:	08009d77 	.word	0x08009d77
 8009b0c:	08009da7 	.word	0x08009da7
 8009b10:	08009e09 	.word	0x08009e09
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	795a      	ldrb	r2, [r3, #5]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	221f      	movs	r2, #31
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 ff2f 	bl	800b99a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009b3c:	e180      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	795b      	ldrb	r3, [r3, #5]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f00a fb5f 	bl	8014208 <USBH_LL_GetURBState>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b4e:	7d3b      	ldrb	r3, [r7, #20]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d118      	bne.n	8009b86 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00f      	beq.n	8009b7c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b62:	b25b      	sxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da04      	bge.n	8009b72 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2203      	movs	r2, #3
 8009b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b70:	e159      	b.n	8009e26 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2205      	movs	r2, #5
 8009b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b7a:	e154      	b.n	8009e26 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2207      	movs	r2, #7
 8009b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b84:	e14f      	b.n	8009e26 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b86:	7d3b      	ldrb	r3, [r7, #20]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d104      	bne.n	8009b96 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b94:	e147      	b.n	8009e26 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009b96:	7d3b      	ldrb	r3, [r7, #20]
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	f040 8144 	bne.w	8009e26 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ba6:	e13e      	b.n	8009e26 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	895a      	ldrh	r2, [r3, #10]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	791b      	ldrb	r3, [r3, #4]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 ff14 	bl	800b9e4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2204      	movs	r2, #4
 8009bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009bc4:	e13c      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	791b      	ldrb	r3, [r3, #4]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f00a fb1b 	bl	8014208 <USBH_LL_GetURBState>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009bd6:	7d3b      	ldrb	r3, [r7, #20]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d12d      	bne.n	8009c38 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	8952      	ldrh	r2, [r2, #10]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d910      	bls.n	8009c0a <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	8952      	ldrh	r2, [r2, #10]
 8009bf2:	441a      	add	r2, r3
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	8952      	ldrh	r2, [r2, #10]
 8009c02:	1a9a      	subs	r2, r3, r2
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c08:	e002      	b.n	8009c10 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	895a      	ldrh	r2, [r3, #10]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	791b      	ldrb	r3, [r3, #4]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 fedc 	bl	800b9e4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009c2c:	e0fd      	b.n	8009e2a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2207      	movs	r2, #7
 8009c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c36:	e0f8      	b.n	8009e2a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8009c38:	7d3b      	ldrb	r3, [r7, #20]
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	f040 80f5 	bne.w	8009e2a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2209      	movs	r2, #9
 8009c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c48:	e0ef      	b.n	8009e2a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	891a      	ldrh	r2, [r3, #8]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	7958      	ldrb	r0, [r3, #5]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 fe9b 	bl	800b99a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2206      	movs	r2, #6
 8009c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c6c:	e0e8      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	795b      	ldrb	r3, [r3, #5]
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f00a fac7 	bl	8014208 <USBH_LL_GetURBState>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c7e:	7d3b      	ldrb	r3, [r7, #20]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d130      	bne.n	8009ce6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	8912      	ldrh	r2, [r2, #8]
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d910      	bls.n	8009cb2 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	8912      	ldrh	r2, [r2, #8]
 8009c9a:	441a      	add	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	8912      	ldrh	r2, [r2, #8]
 8009caa:	1a9a      	subs	r2, r3, r2
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cb0:	e002      	b.n	8009cb8 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	891a      	ldrh	r2, [r3, #8]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	7958      	ldrb	r0, [r3, #5]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 fe60 	bl	800b99a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009cda:	e0a8      	b.n	8009e2e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2207      	movs	r2, #7
 8009ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ce4:	e0a3      	b.n	8009e2e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ce6:	7d3b      	ldrb	r3, [r7, #20]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d104      	bne.n	8009cf6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2205      	movs	r2, #5
 8009cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cf4:	e09b      	b.n	8009e2e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009cf6:	7d3b      	ldrb	r3, [r7, #20]
 8009cf8:	2b05      	cmp	r3, #5
 8009cfa:	f040 8098 	bne.w	8009e2e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	220a      	movs	r2, #10
 8009d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d06:	e092      	b.n	8009e2e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	791b      	ldrb	r3, [r3, #4]
 8009d12:	220d      	movs	r2, #13
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fe65 	bl	800b9e4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d22:	e08d      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	791b      	ldrb	r3, [r3, #4]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f00a fa6c 	bl	8014208 <USBH_LL_GetURBState>
 8009d30:	4603      	mov	r3, r0
 8009d32:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009d34:	7d3b      	ldrb	r3, [r7, #20]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d115      	bne.n	8009d66 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8aa 	bl	8009ea4 <USBH_MSC_DecodeCSW>
 8009d50:	4603      	mov	r3, r0
 8009d52:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009d54:	7d7b      	ldrb	r3, [r7, #21]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009d5e:	e068      	b.n	8009e32 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009d60:	2302      	movs	r3, #2
 8009d62:	75fb      	strb	r3, [r7, #23]
      break;
 8009d64:	e065      	b.n	8009e32 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009d66:	7d3b      	ldrb	r3, [r7, #20]
 8009d68:	2b05      	cmp	r3, #5
 8009d6a:	d162      	bne.n	8009e32 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2209      	movs	r2, #9
 8009d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d74:	e05d      	b.n	8009e32 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f865 	bl	8009e4c <USBH_MSC_BOT_Abort>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d86:	7dbb      	ldrb	r3, [r7, #22]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d104      	bne.n	8009d96 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2207      	movs	r2, #7
 8009d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009d94:	e04f      	b.n	8009e36 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009d96:	7dbb      	ldrb	r3, [r7, #22]
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	d14c      	bne.n	8009e36 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	220b      	movs	r2, #11
 8009da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009da4:	e047      	b.n	8009e36 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	2201      	movs	r2, #1
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f84d 	bl	8009e4c <USBH_MSC_BOT_Abort>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009db6:	7dbb      	ldrb	r3, [r7, #22]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d11d      	bne.n	8009df8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	795b      	ldrb	r3, [r3, #5]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f00a fa7d 	bl	80142c2 <USBH_LL_GetToggle>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	7959      	ldrb	r1, [r3, #5]
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	f1c3 0301 	rsb	r3, r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f00a fa3e 	bl	801425c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f00a fa37 	bl	801425c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2209      	movs	r2, #9
 8009df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009df6:	e020      	b.n	8009e3a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009df8:	7dbb      	ldrb	r3, [r7, #22]
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	d11d      	bne.n	8009e3a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	220b      	movs	r2, #11
 8009e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e06:	e018      	b.n	8009e3a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff fdf0 	bl	80099ee <USBH_MSC_BOT_REQ_Reset>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d112      	bne.n	8009e3e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009e20:	e00d      	b.n	8009e3e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009e22:	bf00      	nop
 8009e24:	e00c      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e26:	bf00      	nop
 8009e28:	e00a      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e2a:	bf00      	nop
 8009e2c:	e008      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e2e:	bf00      	nop
 8009e30:	e006      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e32:	bf00      	nop
 8009e34:	e004      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e36:	bf00      	nop
 8009e38:	e002      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <USBH_MSC_BOT_Process+0x398>
      break;
 8009e3e:	bf00      	nop
  }
  return status;
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop

08009e4c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009e6a:	78bb      	ldrb	r3, [r7, #2]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <USBH_MSC_BOT_Abort+0x2a>
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d009      	beq.n	8009e88 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009e74:	e011      	b.n	8009e9a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	79db      	ldrb	r3, [r3, #7]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f99c 	bl	800b1ba <USBH_ClrFeature>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73fb      	strb	r3, [r7, #15]
      break;
 8009e86:	e008      	b.n	8009e9a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	799b      	ldrb	r3, [r3, #6]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 f993 	bl	800b1ba <USBH_ClrFeature>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
      break;
 8009e98:	bf00      	nop
  }
  return status;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	791b      	ldrb	r3, [r3, #4]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f00a f90f 	bl	80140e4 <USBH_LL_GetLastXferSize>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b0d      	cmp	r3, #13
 8009eca:	d002      	beq.n	8009ed2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	e024      	b.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ed6:	4a14      	ldr	r2, [pc, #80]	; (8009f28 <USBH_MSC_DecodeCSW+0x84>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d11d      	bne.n	8009f18 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d119      	bne.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
 8009ef6:	e011      	b.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d102      	bne.n	8009f08 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009f02:	2301      	movs	r3, #1
 8009f04:	73fb      	strb	r3, [r7, #15]
 8009f06:	e009      	b.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d104      	bne.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009f12:	2302      	movs	r3, #2
 8009f14:	73fb      	strb	r3, [r7, #15]
 8009f16:	e001      	b.n	8009f1c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	53425355 	.word	0x53425355

08009f2c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f38:	2302      	movs	r3, #2
 8009f3a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d002      	beq.n	8009f56 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d021      	beq.n	8009f98 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009f54:	e028      	b.n	8009fa8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	220a      	movs	r2, #10
 8009f68:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3363      	adds	r3, #99	; 0x63
 8009f70:	2210      	movs	r2, #16
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f01a ffd2 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009f92:	2301      	movs	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
      break;
 8009f96:	e007      	b.n	8009fa8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fd83 	bl	8009aa8 <USBH_MSC_BOT_Process>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa6:	bf00      	nop
  }

  return error;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b086      	sub	sp, #24
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d002      	beq.n	8009fde <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d027      	beq.n	800a02c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009fdc:	e05f      	b.n	800a09e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2280      	movs	r2, #128	; 0x80
 8009fe8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	220a      	movs	r2, #10
 8009ff0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3363      	adds	r3, #99	; 0x63
 8009ff8:	2210      	movs	r2, #16
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f01a ff8e 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2225      	movs	r2, #37	; 0x25
 800a006:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f103 0210 	add.w	r2, r3, #16
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a026:	2301      	movs	r3, #1
 800a028:	75fb      	strb	r3, [r7, #23]
      break;
 800a02a:	e038      	b.n	800a09e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	4619      	mov	r1, r3
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff fd39 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d12d      	bne.n	800a09c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a046:	3303      	adds	r3, #3
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a052:	3302      	adds	r3, #2
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a060:	3301      	adds	r3, #1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a066:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	061b      	lsls	r3, r3, #24
 800a072:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07e:	3307      	adds	r3, #7
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b29a      	uxth	r2, r3
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a08a:	3306      	adds	r3, #6
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	b29b      	uxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	809a      	strh	r2, [r3, #4]
      break;
 800a09c:	bf00      	nop
  }

  return error;
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d002      	beq.n	800a0d4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d03d      	beq.n	800a14e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a0d2:	e089      	b.n	800a1e8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2224      	movs	r2, #36	; 0x24
 800a0d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2280      	movs	r2, #128	; 0x80
 800a0de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	3363      	adds	r3, #99	; 0x63
 800a0ee:	220a      	movs	r2, #10
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f01a ff13 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2212      	movs	r2, #18
 800a0fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	015b      	lsls	r3, r3, #5
 800a104:	b2da      	uxtb	r2, r3
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2224      	movs	r2, #36	; 0x24
 800a120:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f103 0210 	add.w	r2, r3, #16
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
      break;
 800a14c:	e04c      	b.n	800a1e8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a14e:	7afb      	ldrb	r3, [r7, #11]
 800a150:	4619      	mov	r1, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fca8 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d141      	bne.n	800a1e6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a162:	2222      	movs	r2, #34	; 0x22
 800a164:	2100      	movs	r1, #0
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f01a fed9 	bl	8024f1e <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 031f 	and.w	r3, r3, #31
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a194:	3301      	adds	r3, #1
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	b25b      	sxtb	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da03      	bge.n	800a1a6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	709a      	strb	r2, [r3, #2]
 800a1a4:	e002      	b.n	800a1ac <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1cd8      	adds	r0, r3, #3
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f01a fea4 	bl	8024f08 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f103 000c 	add.w	r0, r3, #12
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1cc:	3310      	adds	r3, #16
 800a1ce:	2210      	movs	r2, #16
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	f01a fe99 	bl	8024f08 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	331d      	adds	r3, #29
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a1e0:	3220      	adds	r2, #32
 800a1e2:	6812      	ldr	r2, [r2, #0]
 800a1e4:	601a      	str	r2, [r3, #0]
      break;
 800a1e6:	bf00      	nop
  }

  return error;
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b086      	sub	sp, #24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a200:	2302      	movs	r3, #2
 800a202:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a214:	2b01      	cmp	r3, #1
 800a216:	d002      	beq.n	800a21e <USBH_MSC_SCSI_RequestSense+0x2c>
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d03d      	beq.n	800a298 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a21c:	e05d      	b.n	800a2da <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	220e      	movs	r2, #14
 800a222:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	2280      	movs	r2, #128	; 0x80
 800a228:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	220a      	movs	r2, #10
 800a230:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	3363      	adds	r3, #99	; 0x63
 800a238:	2210      	movs	r2, #16
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f01a fe6e 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2203      	movs	r2, #3
 800a246:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	015b      	lsls	r3, r3, #5
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	220e      	movs	r2, #14
 800a26a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f103 0210 	add.w	r2, r3, #16
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
      break;
 800a296:	e020      	b.n	800a2da <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fc03 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d115      	bne.n	800a2d8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b2:	3302      	adds	r3, #2
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	f003 030f 	and.w	r3, r3, #15
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c6:	7b1a      	ldrb	r2, [r3, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2d2:	7b5a      	ldrb	r2, [r3, #13]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	709a      	strb	r2, [r3, #2]
      break;
 800a2d8:	bf00      	nop
  }

  return error;
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d002      	beq.n	800a312 <USBH_MSC_SCSI_Write+0x2e>
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d047      	beq.n	800a3a0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a310:	e04e      	b.n	800a3b0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a318:	461a      	mov	r2, r3
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	fb03 f202 	mul.w	r2, r3, r2
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	220a      	movs	r2, #10
 800a330:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3363      	adds	r3, #99	; 0x63
 800a338:	2210      	movs	r2, #16
 800a33a:	2100      	movs	r1, #0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f01a fdee 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	222a      	movs	r2, #42	; 0x2a
 800a346:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a34a:	79fa      	ldrb	r2, [r7, #7]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a352:	79ba      	ldrb	r2, [r7, #6]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a35a:	797a      	ldrb	r2, [r7, #5]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a362:	1d3b      	adds	r3, r7, #4
 800a364:	781a      	ldrb	r2, [r3, #0]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a36c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a376:	f107 0320 	add.w	r3, r7, #32
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
      break;
 800a39e:	e007      	b.n	800a3b0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff fb7f 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	bf00      	nop
  }

  return error;
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b086      	sub	sp, #24
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	603b      	str	r3, [r7, #0]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d002      	beq.n	800a3e8 <USBH_MSC_SCSI_Read+0x2e>
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d047      	beq.n	800a476 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a3e6:	e04e      	b.n	800a486 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	fb03 f202 	mul.w	r2, r3, r2
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2280      	movs	r2, #128	; 0x80
 800a3fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	220a      	movs	r2, #10
 800a406:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	3363      	adds	r3, #99	; 0x63
 800a40e:	2210      	movs	r2, #16
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f01a fd83 	bl	8024f1e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2228      	movs	r2, #40	; 0x28
 800a41c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a420:	79fa      	ldrb	r2, [r7, #7]
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a428:	79ba      	ldrb	r2, [r7, #6]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a430:	797a      	ldrb	r2, [r7, #5]
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a438:	1d3b      	adds	r3, r7, #4
 800a43a:	781a      	ldrb	r2, [r3, #0]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a442:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a44c:	f107 0320 	add.w	r3, r7, #32
 800a450:	781a      	ldrb	r2, [r3, #0]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
      break;
 800a474:	e007      	b.n	800a486 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	4619      	mov	r1, r3
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fb14 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a480:	4603      	mov	r3, r0
 800a482:	75fb      	strb	r3, [r7, #23]
      break;
 800a484:	bf00      	nop
  }

  return error;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e029      	b.n	800a4fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	79fa      	ldrb	r2, [r7, #7]
 800a4ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f81f 	bl	800a504 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f009 fd39 	bl	8013f6c <USBH_LL_Init>

  return USBH_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e009      	b.n	800a52a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	33e0      	adds	r3, #224	; 0xe0
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3301      	adds	r3, #1
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b0e      	cmp	r3, #14
 800a52e:	d9f2      	bls.n	800a516 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a530:	2300      	movs	r3, #0
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e009      	b.n	800a54a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a550:	d3f1      	bcc.n	800a536 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2240      	movs	r2, #64	; 0x40
 800a576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d016      	beq.n	800a5ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10e      	bne.n	800a5e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	33de      	adds	r3, #222	; 0xde
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]
 800a5e6:	e004      	b.n	800a5f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	73fb      	strb	r3, [r7, #15]
 800a5ec:	e001      	b.n	800a5f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a616:	78fa      	ldrb	r2, [r7, #3]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d204      	bcs.n	800a626 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a624:	e001      	b.n	800a62a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a626:	2302      	movs	r3, #2
 800a628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4603      	mov	r3, r0
 800a648:	70fb      	strb	r3, [r7, #3]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70bb      	strb	r3, [r7, #2]
 800a64e:	4613      	mov	r3, r2
 800a650:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a660:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a662:	e025      	b.n	800a6b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	221a      	movs	r2, #26
 800a668:	fb02 f303 	mul.w	r3, r2, r3
 800a66c:	3308      	adds	r3, #8
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	3302      	adds	r3, #2
 800a674:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	795b      	ldrb	r3, [r3, #5]
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d002      	beq.n	800a686 <USBH_FindInterface+0x4e>
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	2bff      	cmp	r3, #255	; 0xff
 800a684:	d111      	bne.n	800a6aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a68a:	78ba      	ldrb	r2, [r7, #2]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d002      	beq.n	800a696 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a690:	78bb      	ldrb	r3, [r7, #2]
 800a692:	2bff      	cmp	r3, #255	; 0xff
 800a694:	d109      	bne.n	800a6aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a69a:	787a      	ldrb	r2, [r7, #1]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6a0:	787b      	ldrb	r3, [r7, #1]
 800a6a2:	2bff      	cmp	r3, #255	; 0xff
 800a6a4:	d101      	bne.n	800a6aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	e006      	b.n	800a6b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d9d6      	bls.n	800a664 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a6b6:	23ff      	movs	r3, #255	; 0xff
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f009 fc93 	bl	8013ff8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f009 fdaa 	bl	801422e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af04      	add	r7, sp, #16
 800a6ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d102      	bne.n	800a706 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2203      	movs	r2, #3
 800a704:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b0b      	cmp	r3, #11
 800a70e:	f200 81b3 	bhi.w	800aa78 <USBH_Process+0x394>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBH_Process+0x34>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a77b 	.word	0x0800a77b
 800a720:	0800a7e3 	.word	0x0800a7e3
 800a724:	0800aa13 	.word	0x0800aa13
 800a728:	0800aa79 	.word	0x0800aa79
 800a72c:	0800a887 	.word	0x0800a887
 800a730:	0800a9b9 	.word	0x0800a9b9
 800a734:	0800a8bd 	.word	0x0800a8bd
 800a738:	0800a8dd 	.word	0x0800a8dd
 800a73c:	0800a8fd 	.word	0x0800a8fd
 800a740:	0800a92b 	.word	0x0800a92b
 800a744:	0800a9fb 	.word	0x0800a9fb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 8193 	beq.w	800aa7c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a75c:	20c8      	movs	r0, #200	; 0xc8
 800a75e:	f009 fde3 	bl	8014328 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f009 fca3 	bl	80140ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a778:	e180      	b.n	800aa7c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a780:	2b01      	cmp	r3, #1
 800a782:	d107      	bne.n	800a794 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a792:	e182      	b.n	800aa9a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a79a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a79e:	d914      	bls.n	800a7ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d903      	bls.n	800a7c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	220d      	movs	r2, #13
 800a7be:	701a      	strb	r2, [r3, #0]
      break;
 800a7c0:	e16b      	b.n	800aa9a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	701a      	strb	r2, [r3, #0]
      break;
 800a7c8:	e167      	b.n	800aa9a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7d0:	f103 020a 	add.w	r2, r3, #10
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a7da:	200a      	movs	r0, #10
 800a7dc:	f009 fda4 	bl	8014328 <USBH_Delay>
      break;
 800a7e0:	e15b      	b.n	800aa9a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7f8:	2064      	movs	r0, #100	; 0x64
 800a7fa:	f009 fd95 	bl	8014328 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f009 fc30 	bl	8014064 <USBH_LL_GetSpeed>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2205      	movs	r2, #5
 800a812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f931 	bl	800ba7e <USBH_AllocPipe>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a824:	2180      	movs	r1, #128	; 0x80
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f001 f929 	bl	800ba7e <USBH_AllocPipe>
 800a82c:	4603      	mov	r3, r0
 800a82e:	461a      	mov	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	7919      	ldrb	r1, [r3, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a848:	b292      	uxth	r2, r2
 800a84a:	9202      	str	r2, [sp, #8]
 800a84c:	2200      	movs	r2, #0
 800a84e:	9201      	str	r2, [sp, #4]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	4603      	mov	r3, r0
 800a854:	2280      	movs	r2, #128	; 0x80
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f001 f8e2 	bl	800ba20 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7959      	ldrb	r1, [r3, #5]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a870:	b292      	uxth	r2, r2
 800a872:	9202      	str	r2, [sp, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	9201      	str	r2, [sp, #4]
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	4603      	mov	r3, r0
 800a87c:	2200      	movs	r2, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 f8ce 	bl	800ba20 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a884:	e109      	b.n	800aa9a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f90c 	bl	800aaa4 <USBH_HandleEnum>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	f040 80f3 	bne.w	800aa80 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d103      	bne.n	800a8b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8b2:	e0e5      	b.n	800aa80 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2207      	movs	r2, #7
 800a8b8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ba:	e0e1      	b.n	800aa80 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 80de 	beq.w	800aa84 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a8da:	e0d3      	b.n	800aa84 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fc20 	bl	800b12c <USBH_SetCfg>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f040 80ca 	bne.w	800aa88 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2209      	movs	r2, #9
 800a8f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8fa:	e0c5      	b.n	800aa88 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00b      	beq.n	800a922 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a90a:	2101      	movs	r1, #1
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fc30 	bl	800b172 <USBH_SetFeature>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	f040 80b9 	bne.w	800aa8c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	220a      	movs	r2, #10
 800a91e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a920:	e0b4      	b.n	800aa8c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	220a      	movs	r2, #10
 800a926:	701a      	strb	r2, [r3, #0]
      break;
 800a928:	e0b0      	b.n	800aa8c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 80ad 	beq.w	800aa90 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]
 800a942:	e016      	b.n	800a972 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a944:	7bfa      	ldrb	r2, [r7, #15]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	32de      	adds	r2, #222	; 0xde
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	791a      	ldrb	r2, [r3, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a956:	429a      	cmp	r2, r3
 800a958:	d108      	bne.n	800a96c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a95a:	7bfa      	ldrb	r2, [r7, #15]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	32de      	adds	r2, #222	; 0xde
 800a960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a96a:	e005      	b.n	800a978 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	3301      	adds	r3, #1
 800a970:	73fb      	strb	r3, [r7, #15]
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0e5      	beq.n	800a944 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d016      	beq.n	800a9b0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4798      	blx	r3
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d109      	bne.n	800a9a8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2206      	movs	r2, #6
 800a998:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9a0:	2103      	movs	r1, #3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9a6:	e073      	b.n	800aa90 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	220d      	movs	r2, #13
 800a9ac:	701a      	strb	r2, [r3, #0]
      break;
 800a9ae:	e06f      	b.n	800aa90 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	220d      	movs	r2, #13
 800a9b4:	701a      	strb	r2, [r3, #0]
      break;
 800a9b6:	e06b      	b.n	800aa90 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d017      	beq.n	800a9f2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	4798      	blx	r3
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	220b      	movs	r2, #11
 800a9de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9e0:	e058      	b.n	800aa94 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d154      	bne.n	800aa94 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	220d      	movs	r2, #13
 800a9ee:	701a      	strb	r2, [r3, #0]
      break;
 800a9f0:	e050      	b.n	800aa94 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	220d      	movs	r2, #13
 800a9f6:	701a      	strb	r2, [r3, #0]
      break;
 800a9f8:	e04c      	b.n	800aa94 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d049      	beq.n	800aa98 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
      }
      break;
 800aa10:	e042      	b.n	800aa98 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fd72 	bl	800a504 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d009      	beq.n	800aa3e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa4e:	2105      	movs	r1, #5
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d107      	bne.n	800aa70 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7ff fe2b 	bl	800a6c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa6e:	e014      	b.n	800aa9a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f009 fac1 	bl	8013ff8 <USBH_LL_Start>
      break;
 800aa76:	e010      	b.n	800aa9a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa78:	bf00      	nop
 800aa7a:	e00e      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa7c:	bf00      	nop
 800aa7e:	e00c      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa80:	bf00      	nop
 800aa82:	e00a      	b.n	800aa9a <USBH_Process+0x3b6>
    break;
 800aa84:	bf00      	nop
 800aa86:	e008      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa88:	bf00      	nop
 800aa8a:	e006      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa8c:	bf00      	nop
 800aa8e:	e004      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa90:	bf00      	nop
 800aa92:	e002      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa94:	bf00      	nop
 800aa96:	e000      	b.n	800aa9a <USBH_Process+0x3b6>
      break;
 800aa98:	bf00      	nop
  }
  return USBH_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aab0:	2301      	movs	r3, #1
 800aab2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	2b07      	cmp	r3, #7
 800aaba:	f200 81c1 	bhi.w	800ae40 <USBH_HandleEnum+0x39c>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <USBH_HandleEnum+0x20>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800aba3 	.word	0x0800aba3
 800aacc:	0800ac0d 	.word	0x0800ac0d
 800aad0:	0800ac9b 	.word	0x0800ac9b
 800aad4:	0800ad05 	.word	0x0800ad05
 800aad8:	0800ad75 	.word	0x0800ad75
 800aadc:	0800adbb 	.word	0x0800adbb
 800aae0:	0800ae01 	.word	0x0800ae01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aae4:	2108      	movs	r1, #8
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fa50 	bl	800af8c <USBH_Get_DevDesc>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d130      	bne.n	800ab58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	7919      	ldrb	r1, [r3, #4]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab1a:	b292      	uxth	r2, r2
 800ab1c:	9202      	str	r2, [sp, #8]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	9201      	str	r2, [sp, #4]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4603      	mov	r3, r0
 800ab26:	2280      	movs	r2, #128	; 0x80
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 ff79 	bl	800ba20 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7959      	ldrb	r1, [r3, #5]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab42:	b292      	uxth	r2, r2
 800ab44:	9202      	str	r2, [sp, #8]
 800ab46:	2200      	movs	r2, #0
 800ab48:	9201      	str	r2, [sp, #4]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 ff65 	bl	800ba20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab56:	e175      	b.n	800ae44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	f040 8172 	bne.w	800ae44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab66:	3301      	adds	r3, #1
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d903      	bls.n	800ab82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	220d      	movs	r2, #13
 800ab7e:	701a      	strb	r2, [r3, #0]
      break;
 800ab80:	e160      	b.n	800ae44 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	795b      	ldrb	r3, [r3, #5]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 ff99 	bl	800bac0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	791b      	ldrb	r3, [r3, #4]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 ff93 	bl	800bac0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	701a      	strb	r2, [r3, #0]
      break;
 800aba0:	e150      	b.n	800ae44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aba2:	2112      	movs	r1, #18
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f9f1 	bl	800af8c <USBH_Get_DevDesc>
 800abaa:	4603      	mov	r3, r0
 800abac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d103      	bne.n	800abbc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abba:	e145      	b.n	800ae48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	f040 8142 	bne.w	800ae48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abca:	3301      	adds	r3, #1
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d903      	bls.n	800abe6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	220d      	movs	r2, #13
 800abe2:	701a      	strb	r2, [r3, #0]
      break;
 800abe4:	e130      	b.n	800ae48 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	795b      	ldrb	r3, [r3, #5]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 ff67 	bl	800bac0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	791b      	ldrb	r3, [r3, #4]
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 ff61 	bl	800bac0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	701a      	strb	r2, [r3, #0]
      break;
 800ac0a:	e11d      	b.n	800ae48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa68 	bl	800b0e4 <USBH_SetAddress>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d132      	bne.n	800ac84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ac1e:	2002      	movs	r0, #2
 800ac20:	f009 fb82 	bl	8014328 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2203      	movs	r2, #3
 800ac30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7919      	ldrb	r1, [r3, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac46:	b292      	uxth	r2, r2
 800ac48:	9202      	str	r2, [sp, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	9201      	str	r2, [sp, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4603      	mov	r3, r0
 800ac52:	2280      	movs	r2, #128	; 0x80
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fee3 	bl	800ba20 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7959      	ldrb	r1, [r3, #5]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	9202      	str	r2, [sp, #8]
 800ac72:	2200      	movs	r2, #0
 800ac74:	9201      	str	r2, [sp, #4]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fecf 	bl	800ba20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac82:	e0e3      	b.n	800ae4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	f040 80e0 	bne.w	800ae4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	220d      	movs	r2, #13
 800ac90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	705a      	strb	r2, [r3, #1]
      break;
 800ac98:	e0d8      	b.n	800ae4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac9a:	2109      	movs	r1, #9
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f99d 	bl	800afdc <USBH_Get_CfgDesc>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2204      	movs	r2, #4
 800acb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acb2:	e0cd      	b.n	800ae50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	f040 80ca 	bne.w	800ae50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acc2:	3301      	adds	r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d903      	bls.n	800acde <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	220d      	movs	r2, #13
 800acda:	701a      	strb	r2, [r3, #0]
      break;
 800acdc:	e0b8      	b.n	800ae50 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	795b      	ldrb	r3, [r3, #5]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 feeb 	bl	800bac0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	791b      	ldrb	r3, [r3, #4]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fee5 	bl	800bac0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	701a      	strb	r2, [r3, #0]
      break;
 800ad02:	e0a5      	b.n	800ae50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f965 	bl	800afdc <USBH_Get_CfgDesc>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d103      	bne.n	800ad24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2205      	movs	r2, #5
 800ad20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad22:	e097      	b.n	800ae54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	f040 8094 	bne.w	800ae54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d903      	bls.n	800ad4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	220d      	movs	r2, #13
 800ad4a:	701a      	strb	r2, [r3, #0]
      break;
 800ad4c:	e082      	b.n	800ae54 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	795b      	ldrb	r3, [r3, #5]
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 feb3 	bl	800bac0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	791b      	ldrb	r3, [r3, #4]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fead 	bl	800bac0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
      break;
 800ad72:	e06f      	b.n	800ae54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d019      	beq.n	800adb2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad8a:	23ff      	movs	r3, #255	; 0xff
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f949 	bl	800b024 <USBH_Get_StringDesc>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d103      	bne.n	800ada4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2206      	movs	r2, #6
 800ada0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ada2:	e059      	b.n	800ae58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d156      	bne.n	800ae58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2206      	movs	r2, #6
 800adae:	705a      	strb	r2, [r3, #1]
      break;
 800adb0:	e052      	b.n	800ae58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2206      	movs	r2, #6
 800adb6:	705a      	strb	r2, [r3, #1]
      break;
 800adb8:	e04e      	b.n	800ae58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d019      	beq.n	800adf8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800add0:	23ff      	movs	r3, #255	; 0xff
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f926 	bl	800b024 <USBH_Get_StringDesc>
 800add8:	4603      	mov	r3, r0
 800adda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2207      	movs	r2, #7
 800ade6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ade8:	e038      	b.n	800ae5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b03      	cmp	r3, #3
 800adee:	d135      	bne.n	800ae5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2207      	movs	r2, #7
 800adf4:	705a      	strb	r2, [r3, #1]
      break;
 800adf6:	e031      	b.n	800ae5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2207      	movs	r2, #7
 800adfc:	705a      	strb	r2, [r3, #1]
      break;
 800adfe:	e02d      	b.n	800ae5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d017      	beq.n	800ae3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae16:	23ff      	movs	r3, #255	; 0xff
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f903 	bl	800b024 <USBH_Get_StringDesc>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ae2c:	e018      	b.n	800ae60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d115      	bne.n	800ae60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
      break;
 800ae38:	e012      	b.n	800ae60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3e:	e00f      	b.n	800ae60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ae40:	bf00      	nop
 800ae42:	e00e      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae44:	bf00      	nop
 800ae46:	e00c      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae48:	bf00      	nop
 800ae4a:	e00a      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae4c:	bf00      	nop
 800ae4e:	e008      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae50:	bf00      	nop
 800ae52:	e006      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae54:	bf00      	nop
 800ae56:	e004      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae58:	bf00      	nop
 800ae5a:	e002      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae5c:	bf00      	nop
 800ae5e:	e000      	b.n	800ae62 <USBH_HandleEnum+0x3be>
      break;
 800ae60:	bf00      	nop
  }
  return Status;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae98:	1c5a      	adds	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f804 	bl	800aeae <USBH_HandleSof>
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b0b      	cmp	r3, #11
 800aebe:	d10a      	bne.n	800aed6 <USBH_HandleSof+0x28>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d005      	beq.n	800aed6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	4798      	blx	r3
  }
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aeee:	bf00      	nop
}
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800af0a:	bf00      	nop
}
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f009 f862 	bl	801402e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	791b      	ldrb	r3, [r3, #4]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fda5 	bl	800bac0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	795b      	ldrb	r3, [r3, #5]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fd9f 	bl	800bac0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af02      	add	r7, sp, #8
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	4613      	mov	r3, r2
 800afa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afaa:	2100      	movs	r1, #0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f864 	bl	800b07a <USBH_GetDescriptor>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afc8:	78fa      	ldrb	r2, [r7, #3]
 800afca:	b292      	uxth	r2, r2
 800afcc:	4619      	mov	r1, r3
 800afce:	f000 f918 	bl	800b202 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	331c      	adds	r3, #28
 800afec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afee:	887b      	ldrh	r3, [r7, #2]
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aff8:	2100      	movs	r1, #0
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f83d 	bl	800b07a <USBH_GetDescriptor>
 800b000:	4603      	mov	r3, r0
 800b002:	72fb      	strb	r3, [r7, #11]
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d107      	bne.n	800b01a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b010:	887a      	ldrh	r2, [r7, #2]
 800b012:	68f9      	ldr	r1, [r7, #12]
 800b014:	4618      	mov	r0, r3
 800b016:	f000 f964 	bl	800b2e2 <USBH_ParseCfgDesc>
  }

  return status;
 800b01a:	7afb      	ldrb	r3, [r7, #11]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	461a      	mov	r2, r3
 800b030:	460b      	mov	r3, r1
 800b032:	72fb      	strb	r3, [r7, #11]
 800b034:	4613      	mov	r3, r2
 800b036:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b040:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b048:	893b      	ldrh	r3, [r7, #8]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	460b      	mov	r3, r1
 800b04e:	2100      	movs	r1, #0
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 f812 	bl	800b07a <USBH_GetDescriptor>
 800b056:	4603      	mov	r3, r0
 800b058:	75fb      	strb	r3, [r7, #23]
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d107      	bne.n	800b070 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b066:	893a      	ldrh	r2, [r7, #8]
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fa37 	bl	800b4de <USBH_ParseStringDesc>
  }

  return status;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	72fb      	strb	r3, [r7, #11]
 800b088:	4613      	mov	r3, r2
 800b08a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	789b      	ldrb	r3, [r3, #2]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d11c      	bne.n	800b0ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b094:	7afb      	ldrb	r3, [r7, #11]
 800b096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2206      	movs	r2, #6
 800b0a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	893a      	ldrh	r2, [r7, #8]
 800b0aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b0ac:	893b      	ldrh	r3, [r7, #8]
 800b0ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0b6:	d104      	bne.n	800b0c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f240 4209 	movw	r2, #1033	; 0x409
 800b0be:	829a      	strh	r2, [r3, #20]
 800b0c0:	e002      	b.n	800b0c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	8b3a      	ldrh	r2, [r7, #24]
 800b0cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b0ce:	8b3b      	ldrh	r3, [r7, #24]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fa50 	bl	800b57a <USBH_CtlReq>
 800b0da:	4603      	mov	r3, r0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	789b      	ldrb	r3, [r3, #2]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d10f      	bne.n	800b118 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2205      	movs	r2, #5
 800b102:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b118:	2200      	movs	r2, #0
 800b11a:	2100      	movs	r1, #0
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fa2c 	bl	800b57a <USBH_CtlReq>
 800b122:	4603      	mov	r3, r0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10e      	bne.n	800b15e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2209      	movs	r2, #9
 800b14a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	887a      	ldrh	r2, [r7, #2]
 800b150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fa09 	bl	800b57a <USBH_CtlReq>
 800b168:	4603      	mov	r3, r0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	789b      	ldrb	r3, [r3, #2]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d10f      	bne.n	800b1a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2203      	movs	r2, #3
 800b190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	b29a      	uxth	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9e5 	bl	800b57a <USBH_CtlReq>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	789b      	ldrb	r3, [r3, #2]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d10f      	bne.n	800b1ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9c1 	bl	800b57a <USBH_CtlReq>
 800b1f8:	4603      	mov	r3, r0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b202:	b480      	push	{r7}
 800b204:	b085      	sub	sp, #20
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	4613      	mov	r3, r2
 800b20e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	785a      	ldrb	r2, [r3, #1]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	3302      	adds	r3, #2
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b29a      	uxth	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3303      	adds	r3, #3
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	021b      	lsls	r3, r3, #8
 800b232:	b29b      	uxth	r3, r3
 800b234:	4313      	orrs	r3, r2
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	791a      	ldrb	r2, [r3, #4]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	795a      	ldrb	r2, [r3, #5]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	799a      	ldrb	r2, [r3, #6]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	79da      	ldrb	r2, [r3, #7]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b25c:	88fb      	ldrh	r3, [r7, #6]
 800b25e:	2b08      	cmp	r3, #8
 800b260:	d939      	bls.n	800b2d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	3308      	adds	r3, #8
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3309      	adds	r3, #9
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b29b      	uxth	r3, r3
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	b29b      	uxth	r3, r3
 800b276:	4313      	orrs	r3, r2
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	330a      	adds	r3, #10
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	b29a      	uxth	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	330b      	adds	r3, #11
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b29a      	uxth	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	330c      	adds	r3, #12
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	330d      	adds	r3, #13
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	021b      	lsls	r3, r3, #8
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	7b9a      	ldrb	r2, [r3, #14]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	7bda      	ldrb	r2, [r3, #15]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	7c1a      	ldrb	r2, [r3, #16]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	7c5a      	ldrb	r2, [r3, #17]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	745a      	strb	r2, [r3, #17]
  }
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b08a      	sub	sp, #40	; 0x28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	785a      	ldrb	r2, [r3, #1]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3302      	adds	r3, #2
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3303      	adds	r3, #3
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	b29b      	uxth	r3, r3
 800b328:	4313      	orrs	r3, r2
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	791a      	ldrb	r2, [r3, #4]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	795a      	ldrb	r2, [r3, #5]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	799a      	ldrb	r2, [r3, #6]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	79da      	ldrb	r2, [r3, #7]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	7a1a      	ldrb	r2, [r3, #8]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	2b09      	cmp	r3, #9
 800b35c:	d95f      	bls.n	800b41e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b35e:	2309      	movs	r3, #9
 800b360:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b362:	2300      	movs	r3, #0
 800b364:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b366:	e051      	b.n	800b40c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b368:	f107 0316 	add.w	r3, r7, #22
 800b36c:	4619      	mov	r1, r3
 800b36e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b370:	f000 f8e8 	bl	800b544 <USBH_GetNextDesc>
 800b374:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	d146      	bne.n	800b40c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b37e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b382:	221a      	movs	r2, #26
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	3308      	adds	r3, #8
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4413      	add	r3, r2
 800b38e:	3302      	adds	r3, #2
 800b390:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b394:	69f8      	ldr	r0, [r7, #28]
 800b396:	f000 f846 	bl	800b426 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3a4:	e022      	b.n	800b3ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b3a6:	f107 0316 	add.w	r3, r7, #22
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ae:	f000 f8c9 	bl	800b544 <USBH_GetNextDesc>
 800b3b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	2b05      	cmp	r3, #5
 800b3ba:	d117      	bne.n	800b3ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b3bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3c4:	3201      	adds	r2, #1
 800b3c6:	00d2      	lsls	r2, r2, #3
 800b3c8:	211a      	movs	r1, #26
 800b3ca:	fb01 f303 	mul.w	r3, r1, r3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b3da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3dc:	69b8      	ldr	r0, [r7, #24]
 800b3de:	f000 f851 	bl	800b484 <USBH_ParseEPDesc>
            ep_ix++;
 800b3e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	791b      	ldrb	r3, [r3, #4]
 800b3f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d204      	bcs.n	800b402 <USBH_ParseCfgDesc+0x120>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	885a      	ldrh	r2, [r3, #2]
 800b3fc:	8afb      	ldrh	r3, [r7, #22]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d8d1      	bhi.n	800b3a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b406:	3301      	adds	r3, #1
 800b408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b40c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b410:	2b01      	cmp	r3, #1
 800b412:	d804      	bhi.n	800b41e <USBH_ParseCfgDesc+0x13c>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	885a      	ldrh	r2, [r3, #2]
 800b418:	8afb      	ldrh	r3, [r7, #22]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d8a4      	bhi.n	800b368 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b41e:	bf00      	nop
 800b420:	3728      	adds	r7, #40	; 0x28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	785a      	ldrb	r2, [r3, #1]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	789a      	ldrb	r2, [r3, #2]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	78da      	ldrb	r2, [r3, #3]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	791a      	ldrb	r2, [r3, #4]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	795a      	ldrb	r2, [r3, #5]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	799a      	ldrb	r2, [r3, #6]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	79da      	ldrb	r2, [r3, #7]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	7a1a      	ldrb	r2, [r3, #8]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	721a      	strb	r2, [r3, #8]
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781a      	ldrb	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	785a      	ldrb	r2, [r3, #1]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	789a      	ldrb	r2, [r3, #2]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	78da      	ldrb	r2, [r3, #3]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	3305      	adds	r3, #5
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	799a      	ldrb	r2, [r3, #6]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	719a      	strb	r2, [r3, #6]
}
 800b4d2:	bf00      	nop
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d120      	bne.n	800b538 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	1e9a      	subs	r2, r3, #2
 800b4fc:	88fb      	ldrh	r3, [r7, #6]
 800b4fe:	4293      	cmp	r3, r2
 800b500:	bf28      	it	cs
 800b502:	4613      	movcs	r3, r2
 800b504:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3302      	adds	r3, #2
 800b50a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b50c:	2300      	movs	r3, #0
 800b50e:	82fb      	strh	r3, [r7, #22]
 800b510:	e00b      	b.n	800b52a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b512:	8afb      	ldrh	r3, [r7, #22]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	3301      	adds	r3, #1
 800b522:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b524:	8afb      	ldrh	r3, [r7, #22]
 800b526:	3302      	adds	r3, #2
 800b528:	82fb      	strh	r3, [r7, #22]
 800b52a:	8afa      	ldrh	r2, [r7, #22]
 800b52c:	8abb      	ldrh	r3, [r7, #20]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d3ef      	bcc.n	800b512 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
  }
}
 800b538:	bf00      	nop
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	881a      	ldrh	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4413      	add	r3, r2
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b56c:	68fb      	ldr	r3, [r7, #12]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b086      	sub	sp, #24
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	4613      	mov	r3, r2
 800b586:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b588:	2301      	movs	r3, #1
 800b58a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	789b      	ldrb	r3, [r3, #2]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d002      	beq.n	800b59a <USBH_CtlReq+0x20>
 800b594:	2b02      	cmp	r3, #2
 800b596:	d00f      	beq.n	800b5b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b598:	e027      	b.n	800b5ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	88fa      	ldrh	r2, [r7, #6]
 800b5a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b5b6:	e018      	b.n	800b5ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f81b 	bl	800b5f4 <USBH_HandleControl>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <USBH_CtlReq+0x54>
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d106      	bne.n	800b5dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	761a      	strb	r2, [r3, #24]
      break;
 800b5da:	e005      	b.n	800b5e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d102      	bne.n	800b5e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	709a      	strb	r2, [r3, #2]
      break;
 800b5e8:	bf00      	nop
  }
  return status;
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b600:	2300      	movs	r3, #0
 800b602:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7e1b      	ldrb	r3, [r3, #24]
 800b608:	3b01      	subs	r3, #1
 800b60a:	2b0a      	cmp	r3, #10
 800b60c:	f200 8158 	bhi.w	800b8c0 <USBH_HandleControl+0x2cc>
 800b610:	a201      	add	r2, pc, #4	; (adr r2, 800b618 <USBH_HandleControl+0x24>)
 800b612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b616:	bf00      	nop
 800b618:	0800b645 	.word	0x0800b645
 800b61c:	0800b65f 	.word	0x0800b65f
 800b620:	0800b6c9 	.word	0x0800b6c9
 800b624:	0800b6ef 	.word	0x0800b6ef
 800b628:	0800b727 	.word	0x0800b727
 800b62c:	0800b753 	.word	0x0800b753
 800b630:	0800b7a5 	.word	0x0800b7a5
 800b634:	0800b7c7 	.word	0x0800b7c7
 800b638:	0800b803 	.word	0x0800b803
 800b63c:	0800b82b 	.word	0x0800b82b
 800b640:	0800b869 	.word	0x0800b869
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f103 0110 	add.w	r1, r3, #16
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	795b      	ldrb	r3, [r3, #5]
 800b64e:	461a      	mov	r2, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f945 	bl	800b8e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	761a      	strb	r2, [r3, #24]
      break;
 800b65c:	e13b      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	795b      	ldrb	r3, [r3, #5]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f008 fdcf 	bl	8014208 <USBH_LL_GetURBState>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d11e      	bne.n	800b6b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	7c1b      	ldrb	r3, [r3, #16]
 800b678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b67c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	8adb      	ldrh	r3, [r3, #22]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00a      	beq.n	800b69c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b686:	7b7b      	ldrb	r3, [r7, #13]
 800b688:	2b80      	cmp	r3, #128	; 0x80
 800b68a:	d103      	bne.n	800b694 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2203      	movs	r2, #3
 800b690:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b692:	e117      	b.n	800b8c4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2205      	movs	r2, #5
 800b698:	761a      	strb	r2, [r3, #24]
      break;
 800b69a:	e113      	b.n	800b8c4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b69c:	7b7b      	ldrb	r3, [r7, #13]
 800b69e:	2b80      	cmp	r3, #128	; 0x80
 800b6a0:	d103      	bne.n	800b6aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2209      	movs	r2, #9
 800b6a6:	761a      	strb	r2, [r3, #24]
      break;
 800b6a8:	e10c      	b.n	800b8c4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2207      	movs	r2, #7
 800b6ae:	761a      	strb	r2, [r3, #24]
      break;
 800b6b0:	e108      	b.n	800b8c4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	d003      	beq.n	800b6c0 <USBH_HandleControl+0xcc>
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	f040 8102 	bne.w	800b8c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	220b      	movs	r2, #11
 800b6c4:	761a      	strb	r2, [r3, #24]
      break;
 800b6c6:	e0fd      	b.n	800b8c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6899      	ldr	r1, [r3, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	899a      	ldrh	r2, [r3, #12]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	791b      	ldrb	r3, [r3, #4]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f93c 	bl	800b95e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2204      	movs	r2, #4
 800b6ea:	761a      	strb	r2, [r3, #24]
      break;
 800b6ec:	e0f3      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	791b      	ldrb	r3, [r3, #4]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f008 fd87 	bl	8014208 <USBH_LL_GetURBState>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d102      	bne.n	800b70a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2209      	movs	r2, #9
 800b708:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b05      	cmp	r3, #5
 800b70e:	d102      	bne.n	800b716 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b710:	2303      	movs	r3, #3
 800b712:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b714:	e0d8      	b.n	800b8c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	2b04      	cmp	r3, #4
 800b71a:	f040 80d5 	bne.w	800b8c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	220b      	movs	r2, #11
 800b722:	761a      	strb	r2, [r3, #24]
      break;
 800b724:	e0d0      	b.n	800b8c8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6899      	ldr	r1, [r3, #8]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	899a      	ldrh	r2, [r3, #12]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	7958      	ldrb	r0, [r3, #5]
 800b732:	2301      	movs	r3, #1
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	4603      	mov	r3, r0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f8eb 	bl	800b914 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b744:	b29a      	uxth	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2206      	movs	r2, #6
 800b74e:	761a      	strb	r2, [r3, #24]
      break;
 800b750:	e0c1      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	795b      	ldrb	r3, [r3, #5]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f008 fd55 	bl	8014208 <USBH_LL_GetURBState>
 800b75e:	4603      	mov	r3, r0
 800b760:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d103      	bne.n	800b770 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2207      	movs	r2, #7
 800b76c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b76e:	e0ad      	b.n	800b8cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b05      	cmp	r3, #5
 800b774:	d105      	bne.n	800b782 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	220c      	movs	r2, #12
 800b77a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b77c:	2303      	movs	r3, #3
 800b77e:	73fb      	strb	r3, [r7, #15]
      break;
 800b780:	e0a4      	b.n	800b8cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b02      	cmp	r3, #2
 800b786:	d103      	bne.n	800b790 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2205      	movs	r2, #5
 800b78c:	761a      	strb	r2, [r3, #24]
      break;
 800b78e:	e09d      	b.n	800b8cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b04      	cmp	r3, #4
 800b794:	f040 809a 	bne.w	800b8cc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	220b      	movs	r2, #11
 800b79c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b79e:	2302      	movs	r3, #2
 800b7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a2:	e093      	b.n	800b8cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	791b      	ldrb	r3, [r3, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f8d6 	bl	800b95e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	761a      	strb	r2, [r3, #24]

      break;
 800b7c4:	e087      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f008 fd1b 	bl	8014208 <USBH_LL_GetURBState>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d105      	bne.n	800b7e8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	220d      	movs	r2, #13
 800b7e0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7e6:	e073      	b.n	800b8d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d103      	bne.n	800b7f6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	220b      	movs	r2, #11
 800b7f2:	761a      	strb	r2, [r3, #24]
      break;
 800b7f4:	e06c      	b.n	800b8d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b05      	cmp	r3, #5
 800b7fa:	d169      	bne.n	800b8d0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b800:	e066      	b.n	800b8d0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	795a      	ldrb	r2, [r3, #5]
 800b806:	2301      	movs	r3, #1
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	4613      	mov	r3, r2
 800b80c:	2200      	movs	r2, #0
 800b80e:	2100      	movs	r1, #0
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f87f 	bl	800b914 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	220a      	movs	r2, #10
 800b826:	761a      	strb	r2, [r3, #24]
      break;
 800b828:	e055      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	795b      	ldrb	r3, [r3, #5]
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f008 fce9 	bl	8014208 <USBH_LL_GetURBState>
 800b836:	4603      	mov	r3, r0
 800b838:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d105      	bne.n	800b84c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	220d      	movs	r2, #13
 800b848:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b84a:	e043      	b.n	800b8d4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d103      	bne.n	800b85a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2209      	movs	r2, #9
 800b856:	761a      	strb	r2, [r3, #24]
      break;
 800b858:	e03c      	b.n	800b8d4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d139      	bne.n	800b8d4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	220b      	movs	r2, #11
 800b864:	761a      	strb	r2, [r3, #24]
      break;
 800b866:	e035      	b.n	800b8d4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7e5b      	ldrb	r3, [r3, #25]
 800b86c:	3301      	adds	r3, #1
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	765a      	strb	r2, [r3, #25]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7e5b      	ldrb	r3, [r3, #25]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d806      	bhi.n	800b88a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b888:	e025      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b890:	2106      	movs	r1, #6
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	795b      	ldrb	r3, [r3, #5]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f90c 	bl	800bac0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	791b      	ldrb	r3, [r3, #4]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f906 	bl	800bac0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b8be:	e00a      	b.n	800b8d6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b8c0:	bf00      	nop
 800b8c2:	e008      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
      break;
 800b8c4:	bf00      	nop
 800b8c6:	e006      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
      break;
 800b8c8:	bf00      	nop
 800b8ca:	e004      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
      break;
 800b8cc:	bf00      	nop
 800b8ce:	e002      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
      break;
 800b8d0:	bf00      	nop
 800b8d2:	e000      	b.n	800b8d6 <USBH_HandleControl+0x2e2>
      break;
 800b8d4:	bf00      	nop
  }

  return status;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8ee:	79f9      	ldrb	r1, [r7, #7]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9303      	str	r3, [sp, #12]
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	9302      	str	r3, [sp, #8]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f008 fc4e 	bl	80141a6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af04      	add	r7, sp, #16
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4611      	mov	r1, r2
 800b920:	461a      	mov	r2, r3
 800b922:	460b      	mov	r3, r1
 800b924:	80fb      	strh	r3, [r7, #6]
 800b926:	4613      	mov	r3, r2
 800b928:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b938:	7979      	ldrb	r1, [r7, #5]
 800b93a:	7e3b      	ldrb	r3, [r7, #24]
 800b93c:	9303      	str	r3, [sp, #12]
 800b93e:	88fb      	ldrh	r3, [r7, #6]
 800b940:	9302      	str	r3, [sp, #8]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	2301      	movs	r3, #1
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	2200      	movs	r2, #0
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f008 fc29 	bl	80141a6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b088      	sub	sp, #32
 800b962:	af04      	add	r7, sp, #16
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	4611      	mov	r1, r2
 800b96a:	461a      	mov	r2, r3
 800b96c:	460b      	mov	r3, r1
 800b96e:	80fb      	strh	r3, [r7, #6]
 800b970:	4613      	mov	r3, r2
 800b972:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b974:	7979      	ldrb	r1, [r7, #5]
 800b976:	2300      	movs	r3, #0
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	88fb      	ldrh	r3, [r7, #6]
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	2301      	movs	r3, #1
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	2300      	movs	r3, #0
 800b988:	2201      	movs	r2, #1
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f008 fc0b 	bl	80141a6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b990:	2300      	movs	r3, #0

}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b088      	sub	sp, #32
 800b99e:	af04      	add	r7, sp, #16
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	80fb      	strh	r3, [r7, #6]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9be:	7979      	ldrb	r1, [r7, #5]
 800b9c0:	7e3b      	ldrb	r3, [r7, #24]
 800b9c2:	9303      	str	r3, [sp, #12]
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	9302      	str	r3, [sp, #8]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f008 fbe6 	bl	80141a6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af04      	add	r7, sp, #16
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	80fb      	strh	r3, [r7, #6]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9fa:	7979      	ldrb	r1, [r7, #5]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9303      	str	r3, [sp, #12]
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	9302      	str	r3, [sp, #8]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	2201      	movs	r2, #1
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f008 fbc8 	bl	80141a6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af04      	add	r7, sp, #16
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	4608      	mov	r0, r1
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4603      	mov	r3, r0
 800ba30:	70fb      	strb	r3, [r7, #3]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70bb      	strb	r3, [r7, #2]
 800ba36:	4613      	mov	r3, r2
 800ba38:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ba3a:	7878      	ldrb	r0, [r7, #1]
 800ba3c:	78ba      	ldrb	r2, [r7, #2]
 800ba3e:	78f9      	ldrb	r1, [r7, #3]
 800ba40:	8b3b      	ldrh	r3, [r7, #24]
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	7d3b      	ldrb	r3, [r7, #20]
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	7c3b      	ldrb	r3, [r7, #16]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f008 fb5b 	bl	801410a <USBH_LL_OpenPipe>

  return USBH_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	460b      	mov	r3, r1
 800ba68:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f008 fb7a 	bl	8014168 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f836 	bl	800bafc <USBH_GetFreePipe>
 800ba90:	4603      	mov	r3, r0
 800ba92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba94:	89fb      	ldrh	r3, [r7, #14]
 800ba96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00a      	beq.n	800bab4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ba9e:	78fa      	ldrb	r2, [r7, #3]
 800baa0:	89fb      	ldrh	r3, [r7, #14]
 800baa2:	f003 030f 	and.w	r3, r3, #15
 800baa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	33e0      	adds	r3, #224	; 0xe0
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	440b      	add	r3, r1
 800bab2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bab4:	89fb      	ldrh	r3, [r7, #14]
 800bab6:	b2db      	uxtb	r3, r3
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	2b0a      	cmp	r3, #10
 800bad0:	d80d      	bhi.n	800baee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bad2:	78fb      	ldrb	r3, [r7, #3]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	33e0      	adds	r3, #224	; 0xe0
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	78fb      	ldrb	r3, [r7, #3]
 800bae0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	33e0      	adds	r3, #224	; 0xe0
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	440b      	add	r3, r1
 800baec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	e00f      	b.n	800bb2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	33e0      	adds	r3, #224	; 0xe0
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d102      	bne.n	800bb28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	e007      	b.n	800bb38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	73fb      	strb	r3, [r7, #15]
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	2b0a      	cmp	r3, #10
 800bb32:	d9ec      	bls.n	800bb0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bb34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	4a08      	ldr	r2, [pc, #32]	; (800bb74 <disk_status+0x30>)
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	79fa      	ldrb	r2, [r7, #7]
 800bb5c:	4905      	ldr	r1, [pc, #20]	; (800bb74 <disk_status+0x30>)
 800bb5e:	440a      	add	r2, r1
 800bb60:	7a12      	ldrb	r2, [r2, #8]
 800bb62:	4610      	mov	r0, r2
 800bb64:	4798      	blx	r3
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	2000016c 	.word	0x2000016c

0800bb78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	4a0d      	ldr	r2, [pc, #52]	; (800bbc0 <disk_initialize+0x48>)
 800bb8a:	5cd3      	ldrb	r3, [r2, r3]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d111      	bne.n	800bbb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	4a0b      	ldr	r2, [pc, #44]	; (800bbc0 <disk_initialize+0x48>)
 800bb94:	2101      	movs	r1, #1
 800bb96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <disk_initialize+0x48>)
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	79fa      	ldrb	r2, [r7, #7]
 800bba6:	4906      	ldr	r1, [pc, #24]	; (800bbc0 <disk_initialize+0x48>)
 800bba8:	440a      	add	r2, r1
 800bbaa:	7a12      	ldrb	r2, [r2, #8]
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	2000016c 	.word	0x2000016c

0800bbc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	607a      	str	r2, [r7, #4]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
 800bbd6:	4a0a      	ldr	r2, [pc, #40]	; (800bc00 <disk_read+0x3c>)
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	689c      	ldr	r4, [r3, #8]
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	4a07      	ldr	r2, [pc, #28]	; (800bc00 <disk_read+0x3c>)
 800bbe4:	4413      	add	r3, r2
 800bbe6:	7a18      	ldrb	r0, [r3, #8]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	47a0      	blx	r4
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	371c      	adds	r7, #28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd90      	pop	{r4, r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	2000016c 	.word	0x2000016c

0800bc04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	4a0a      	ldr	r2, [pc, #40]	; (800bc40 <disk_write+0x3c>)
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	68dc      	ldr	r4, [r3, #12]
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
 800bc22:	4a07      	ldr	r2, [pc, #28]	; (800bc40 <disk_write+0x3c>)
 800bc24:	4413      	add	r3, r2
 800bc26:	7a18      	ldrb	r0, [r3, #8]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	47a0      	blx	r4
 800bc30:	4603      	mov	r3, r0
 800bc32:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd90      	pop	{r4, r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	2000016c 	.word	0x2000016c

0800bc44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	b21a      	sxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b21b      	sxth	r3, r3
 800bc60:	4313      	orrs	r3, r2
 800bc62:	b21b      	sxth	r3, r3
 800bc64:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc66:	89fb      	ldrh	r3, [r7, #14]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3303      	adds	r3, #3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	021b      	lsls	r3, r3, #8
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	3202      	adds	r2, #2
 800bc8c:	7812      	ldrb	r2, [r2, #0]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	3201      	adds	r2, #1
 800bc9a:	7812      	ldrb	r2, [r2, #0]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	021b      	lsls	r3, r3, #8
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
	return rv;
 800bcac:	68fb      	ldr	r3, [r7, #12]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b083      	sub	sp, #12
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	887a      	ldrh	r2, [r7, #2]
 800bcce:	b2d2      	uxtb	r2, r2
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	887b      	ldrh	r3, [r7, #2]
 800bcd4:	0a1b      	lsrs	r3, r3, #8
 800bcd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	607a      	str	r2, [r7, #4]
 800bcde:	887a      	ldrh	r2, [r7, #2]
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	607a      	str	r2, [r7, #4]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	b2d2      	uxtb	r2, r2
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	0a1b      	lsrs	r3, r3, #8
 800bd1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	b2d2      	uxtb	r2, r2
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	b2d2      	uxtb	r2, r2
 800bd3a:	701a      	strb	r2, [r3, #0]
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	617a      	str	r2, [r7, #20]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	b2d2      	uxtb	r2, r2
 800bd62:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	607b      	str	r3, [r7, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1f3      	bne.n	800bd58 <mem_set+0x10>
}
 800bd70:	bf00      	nop
 800bd72:	371c      	adds	r7, #28
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd7c:	b480      	push	{r7}
 800bd7e:	b089      	sub	sp, #36	; 0x24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	61fb      	str	r3, [r7, #28]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	61fa      	str	r2, [r7, #28]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	61ba      	str	r2, [r7, #24]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	1acb      	subs	r3, r1, r3
 800bda8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	607b      	str	r3, [r7, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <mem_cmp+0x40>
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0eb      	beq.n	800bd94 <mem_cmp+0x18>

	return r;
 800bdbc:	697b      	ldr	r3, [r7, #20]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3724      	adds	r7, #36	; 0x24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdd4:	e002      	b.n	800bddc <chk_chr+0x12>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	607b      	str	r3, [r7, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <chk_chr+0x26>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d1f2      	bne.n	800bdd6 <chk_chr+0xc>
	return *str;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	e01f      	b.n	800be50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800be10:	4a41      	ldr	r2, [pc, #260]	; (800bf18 <inc_lock+0x118>)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	4413      	add	r3, r2
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d113      	bne.n	800be4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800be22:	4a3d      	ldr	r2, [pc, #244]	; (800bf18 <inc_lock+0x118>)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	4413      	add	r3, r2
 800be2a:	3304      	adds	r3, #4
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800be32:	429a      	cmp	r2, r3
 800be34:	d109      	bne.n	800be4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800be36:	4a38      	ldr	r2, [pc, #224]	; (800bf18 <inc_lock+0x118>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	4413      	add	r3, r2
 800be3e:	3308      	adds	r3, #8
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800be46:	429a      	cmp	r2, r3
 800be48:	d006      	beq.n	800be58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d9dc      	bls.n	800be10 <inc_lock+0x10>
 800be56:	e000      	b.n	800be5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800be58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d132      	bne.n	800bec6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	e002      	b.n	800be6c <inc_lock+0x6c>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3301      	adds	r3, #1
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d806      	bhi.n	800be80 <inc_lock+0x80>
 800be72:	4a29      	ldr	r2, [pc, #164]	; (800bf18 <inc_lock+0x118>)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	4413      	add	r3, r2
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1f2      	bne.n	800be66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b02      	cmp	r3, #2
 800be84:	d101      	bne.n	800be8a <inc_lock+0x8a>
 800be86:	2300      	movs	r3, #0
 800be88:	e040      	b.n	800bf0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	4922      	ldr	r1, [pc, #136]	; (800bf18 <inc_lock+0x118>)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	011b      	lsls	r3, r3, #4
 800be94:	440b      	add	r3, r1
 800be96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	491e      	ldr	r1, [pc, #120]	; (800bf18 <inc_lock+0x118>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	440b      	add	r3, r1
 800bea4:	3304      	adds	r3, #4
 800bea6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695a      	ldr	r2, [r3, #20]
 800beac:	491a      	ldr	r1, [pc, #104]	; (800bf18 <inc_lock+0x118>)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	011b      	lsls	r3, r3, #4
 800beb2:	440b      	add	r3, r1
 800beb4:	3308      	adds	r3, #8
 800beb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800beb8:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <inc_lock+0x118>)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	4413      	add	r3, r2
 800bec0:	330c      	adds	r3, #12
 800bec2:	2200      	movs	r2, #0
 800bec4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d009      	beq.n	800bee0 <inc_lock+0xe0>
 800becc:	4a12      	ldr	r2, [pc, #72]	; (800bf18 <inc_lock+0x118>)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	4413      	add	r3, r2
 800bed4:	330c      	adds	r3, #12
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d001      	beq.n	800bee0 <inc_lock+0xe0>
 800bedc:	2300      	movs	r3, #0
 800bede:	e015      	b.n	800bf0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d108      	bne.n	800bef8 <inc_lock+0xf8>
 800bee6:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <inc_lock+0x118>)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	4413      	add	r3, r2
 800beee:	330c      	adds	r3, #12
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	e001      	b.n	800befc <inc_lock+0xfc>
 800bef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800befc:	4906      	ldr	r1, [pc, #24]	; (800bf18 <inc_lock+0x118>)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	440b      	add	r3, r1
 800bf04:	330c      	adds	r3, #12
 800bf06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3301      	adds	r3, #1
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	2000014c 	.word	0x2000014c

0800bf1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d825      	bhi.n	800bf7c <dec_lock+0x60>
		n = Files[i].ctr;
 800bf30:	4a17      	ldr	r2, [pc, #92]	; (800bf90 <dec_lock+0x74>)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	4413      	add	r3, r2
 800bf38:	330c      	adds	r3, #12
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf3e:	89fb      	ldrh	r3, [r7, #14]
 800bf40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf44:	d101      	bne.n	800bf4a <dec_lock+0x2e>
 800bf46:	2300      	movs	r3, #0
 800bf48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf4a:	89fb      	ldrh	r3, [r7, #14]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <dec_lock+0x3a>
 800bf50:	89fb      	ldrh	r3, [r7, #14]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf56:	4a0e      	ldr	r2, [pc, #56]	; (800bf90 <dec_lock+0x74>)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	4413      	add	r3, r2
 800bf5e:	330c      	adds	r3, #12
 800bf60:	89fa      	ldrh	r2, [r7, #14]
 800bf62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf64:	89fb      	ldrh	r3, [r7, #14]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d105      	bne.n	800bf76 <dec_lock+0x5a>
 800bf6a:	4a09      	ldr	r2, [pc, #36]	; (800bf90 <dec_lock+0x74>)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	4413      	add	r3, r2
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	737b      	strb	r3, [r7, #13]
 800bf7a:	e001      	b.n	800bf80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bf80:	7b7b      	ldrb	r3, [r7, #13]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	2000014c 	.word	0x2000014c

0800bf94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e010      	b.n	800bfc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfa2:	4a0d      	ldr	r2, [pc, #52]	; (800bfd8 <clear_lock+0x44>)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	4413      	add	r3, r2
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d105      	bne.n	800bfbe <clear_lock+0x2a>
 800bfb2:	4a09      	ldr	r2, [pc, #36]	; (800bfd8 <clear_lock+0x44>)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	011b      	lsls	r3, r3, #4
 800bfb8:	4413      	add	r3, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d9eb      	bls.n	800bfa2 <clear_lock+0xe>
	}
}
 800bfca:	bf00      	nop
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	2000014c 	.word	0x2000014c

0800bfdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	78db      	ldrb	r3, [r3, #3]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d034      	beq.n	800c05a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7858      	ldrb	r0, [r3, #1]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c000:	2301      	movs	r3, #1
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	f7ff fdfe 	bl	800bc04 <disk_write>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c00e:	2301      	movs	r3, #1
 800c010:	73fb      	strb	r3, [r7, #15]
 800c012:	e022      	b.n	800c05a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	1ad2      	subs	r2, r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	429a      	cmp	r2, r3
 800c028:	d217      	bcs.n	800c05a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	789b      	ldrb	r3, [r3, #2]
 800c02e:	613b      	str	r3, [r7, #16]
 800c030:	e010      	b.n	800c054 <sync_window+0x78>
					wsect += fs->fsize;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	4413      	add	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7858      	ldrb	r0, [r3, #1]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c046:	2301      	movs	r3, #1
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	f7ff fddb 	bl	800bc04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	3b01      	subs	r3, #1
 800c052:	613b      	str	r3, [r7, #16]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d8eb      	bhi.n	800c032 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d01b      	beq.n	800c0b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff ffad 	bl	800bfdc <sync_window>
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d113      	bne.n	800c0b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	7858      	ldrb	r0, [r3, #1]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c096:	2301      	movs	r3, #1
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	f7ff fd93 	bl	800bbc4 <disk_read>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	3b02      	subs	r3, #2
 800c0cc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	3b02      	subs	r3, #2
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d301      	bcc.n	800c0de <clust2sect+0x20>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e008      	b.n	800c0f0 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	895b      	ldrh	r3, [r3, #10]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	fb03 f202 	mul.w	r2, r3, r2
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	4413      	add	r3, r2
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d904      	bls.n	800c11c <get_fat+0x20>
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d302      	bcc.n	800c122 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c11c:	2301      	movs	r3, #1
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	e08c      	b.n	800c23c <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
 800c126:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d045      	beq.n	800c1bc <get_fat+0xc0>
 800c130:	2b03      	cmp	r3, #3
 800c132:	d05d      	beq.n	800c1f0 <get_fat+0xf4>
 800c134:	2b01      	cmp	r3, #1
 800c136:	d177      	bne.n	800c228 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	085b      	lsrs	r3, r3, #1
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4413      	add	r3, r2
 800c144:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	0a5b      	lsrs	r3, r3, #9
 800c14e:	4413      	add	r3, r2
 800c150:	4619      	mov	r1, r3
 800c152:	6938      	ldr	r0, [r7, #16]
 800c154:	f7ff ff86 	bl	800c064 <move_window>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d167      	bne.n	800c22e <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	60fa      	str	r2, [r7, #12]
 800c164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	4413      	add	r3, r2
 800c16c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c170:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	0a5b      	lsrs	r3, r3, #9
 800c17a:	4413      	add	r3, r2
 800c17c:	4619      	mov	r1, r3
 800c17e:	6938      	ldr	r0, [r7, #16]
 800c180:	f7ff ff70 	bl	800c064 <move_window>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d153      	bne.n	800c232 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4413      	add	r3, r2
 800c194:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c198:	021b      	lsls	r3, r3, #8
 800c19a:	461a      	mov	r2, r3
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <get_fat+0xb6>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	091b      	lsrs	r3, r3, #4
 800c1b0:	e002      	b.n	800c1b8 <get_fat+0xbc>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1b8:	617b      	str	r3, [r7, #20]
			break;
 800c1ba:	e03f      	b.n	800c23c <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6938      	ldr	r0, [r7, #16]
 800c1ca:	f7ff ff4b 	bl	800c064 <move_window>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d130      	bne.n	800c236 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1e2:	4413      	add	r3, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff fd2d 	bl	800bc44 <ld_word>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	617b      	str	r3, [r7, #20]
			break;
 800c1ee:	e025      	b.n	800c23c <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	09db      	lsrs	r3, r3, #7
 800c1f8:	4413      	add	r3, r2
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6938      	ldr	r0, [r7, #16]
 800c1fe:	f7ff ff31 	bl	800c064 <move_window>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d118      	bne.n	800c23a <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c216:	4413      	add	r3, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fd2b 	bl	800bc74 <ld_dword>
 800c21e:	4603      	mov	r3, r0
 800c220:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c224:	617b      	str	r3, [r7, #20]
			break;
 800c226:	e009      	b.n	800c23c <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c228:	2301      	movs	r3, #1
 800c22a:	617b      	str	r3, [r7, #20]
 800c22c:	e006      	b.n	800c23c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c22e:	bf00      	nop
 800c230:	e004      	b.n	800c23c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c232:	bf00      	nop
 800c234:	e002      	b.n	800c23c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c236:	bf00      	nop
 800c238:	e000      	b.n	800c23c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c23a:	bf00      	nop
		}
	}

	return val;
 800c23c:	697b      	ldr	r3, [r7, #20]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c246:	b590      	push	{r4, r7, lr}
 800c248:	b089      	sub	sp, #36	; 0x24
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c252:	2302      	movs	r3, #2
 800c254:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	f240 80d6 	bls.w	800c40a <put_fat+0x1c4>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	429a      	cmp	r2, r3
 800c266:	f080 80d0 	bcs.w	800c40a <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d073      	beq.n	800c35a <put_fat+0x114>
 800c272:	2b03      	cmp	r3, #3
 800c274:	f000 8091 	beq.w	800c39a <put_fat+0x154>
 800c278:	2b01      	cmp	r3, #1
 800c27a:	f040 80c6 	bne.w	800c40a <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	085b      	lsrs	r3, r3, #1
 800c286:	69ba      	ldr	r2, [r7, #24]
 800c288:	4413      	add	r3, r2
 800c28a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	0a5b      	lsrs	r3, r3, #9
 800c294:	4413      	add	r3, r2
 800c296:	4619      	mov	r1, r3
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff fee3 	bl	800c064 <move_window>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2a2:	7ffb      	ldrb	r3, [r7, #31]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f040 80a9 	bne.w	800c3fc <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	1c59      	adds	r1, r3, #1
 800c2b4:	61b9      	str	r1, [r7, #24]
 800c2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ba:	4413      	add	r3, r2
 800c2bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00d      	beq.n	800c2e4 <put_fat+0x9e>
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	b25b      	sxtb	r3, r3
 800c2ce:	f003 030f 	and.w	r3, r3, #15
 800c2d2:	b25a      	sxtb	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	b25b      	sxtb	r3, r3
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	e001      	b.n	800c2e8 <put_fat+0xa2>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	0a5b      	lsrs	r3, r3, #9
 800c2fa:	4413      	add	r3, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f7ff feb0 	bl	800c064 <move_window>
 800c304:	4603      	mov	r3, r0
 800c306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c308:	7ffb      	ldrb	r3, [r7, #31]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d178      	bne.n	800c400 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	4413      	add	r3, r2
 800c31c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	f003 0301 	and.w	r3, r3, #1
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <put_fat+0xea>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	091b      	lsrs	r3, r3, #4
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	e00e      	b.n	800c34e <put_fat+0x108>
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	b25b      	sxtb	r3, r3
 800c336:	f023 030f 	bic.w	r3, r3, #15
 800c33a:	b25a      	sxtb	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	0a1b      	lsrs	r3, r3, #8
 800c340:	b25b      	sxtb	r3, r3
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	b25b      	sxtb	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b25b      	sxtb	r3, r3
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	70da      	strb	r2, [r3, #3]
			break;
 800c358:	e057      	b.n	800c40a <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	0a1b      	lsrs	r3, r3, #8
 800c362:	4413      	add	r3, r2
 800c364:	4619      	mov	r1, r3
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f7ff fe7c 	bl	800c064 <move_window>
 800c36c:	4603      	mov	r3, r0
 800c36e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c370:	7ffb      	ldrb	r3, [r7, #31]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d146      	bne.n	800c404 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c384:	4413      	add	r3, r2
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	b292      	uxth	r2, r2
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff fc94 	bl	800bcba <st_word>
			fs->wflag = 1;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2201      	movs	r2, #1
 800c396:	70da      	strb	r2, [r3, #3]
			break;
 800c398:	e037      	b.n	800c40a <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	09db      	lsrs	r3, r3, #7
 800c3a2:	4413      	add	r3, r2
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff fe5c 	bl	800c064 <move_window>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3b0:	7ffb      	ldrb	r3, [r7, #31]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d128      	bne.n	800c408 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3ca:	4413      	add	r3, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fc51 	bl	800bc74 <ld_dword>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3d8:	4323      	orrs	r3, r4
 800c3da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3ea:	4413      	add	r3, r2
 800c3ec:	6879      	ldr	r1, [r7, #4]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fc7e 	bl	800bcf0 <st_dword>
			fs->wflag = 1;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	70da      	strb	r2, [r3, #3]
			break;
 800c3fa:	e006      	b.n	800c40a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3fc:	bf00      	nop
 800c3fe:	e004      	b.n	800c40a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c400:	bf00      	nop
 800c402:	e002      	b.n	800c40a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c404:	bf00      	nop
 800c406:	e000      	b.n	800c40a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c408:	bf00      	nop
		}
	}
	return res;
 800c40a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3724      	adds	r7, #36	; 0x24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd90      	pop	{r4, r7, pc}

0800c414 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10d      	bne.n	800c446 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d004      	beq.n	800c440 <create_chain+0x2c>
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d31b      	bcc.n	800c478 <create_chain+0x64>
 800c440:	2301      	movs	r3, #1
 800c442:	61bb      	str	r3, [r7, #24]
 800c444:	e018      	b.n	800c478 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fe57 	bl	800c0fc <get_fat>
 800c44e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d801      	bhi.n	800c45a <create_chain+0x46>
 800c456:	2301      	movs	r3, #1
 800c458:	e070      	b.n	800c53c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d101      	bne.n	800c466 <create_chain+0x52>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	e06a      	b.n	800c53c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d201      	bcs.n	800c474 <create_chain+0x60>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	e063      	b.n	800c53c <create_chain+0x128>
		scl = clst;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	3301      	adds	r3, #1
 800c480:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d307      	bcc.n	800c49c <create_chain+0x88>
				ncl = 2;
 800c48c:	2302      	movs	r3, #2
 800c48e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c490:	69fa      	ldr	r2, [r7, #28]
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	429a      	cmp	r2, r3
 800c496:	d901      	bls.n	800c49c <create_chain+0x88>
 800c498:	2300      	movs	r3, #0
 800c49a:	e04f      	b.n	800c53c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c49c:	69f9      	ldr	r1, [r7, #28]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff fe2c 	bl	800c0fc <get_fat>
 800c4a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00e      	beq.n	800c4ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d003      	beq.n	800c4ba <create_chain+0xa6>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b8:	d101      	bne.n	800c4be <create_chain+0xaa>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	e03e      	b.n	800c53c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c4be:	69fa      	ldr	r2, [r7, #28]
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d1da      	bne.n	800c47c <create_chain+0x68>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e038      	b.n	800c53c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c4ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	69f9      	ldr	r1, [r7, #28]
 800c4d2:	6938      	ldr	r0, [r7, #16]
 800c4d4:	f7ff feb7 	bl	800c246 <put_fat>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d109      	bne.n	800c4f6 <create_chain+0xe2>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6938      	ldr	r0, [r7, #16]
 800c4ee:	f7ff feaa 	bl	800c246 <put_fat>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d116      	bne.n	800c52a <create_chain+0x116>
		fs->last_clst = ncl;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	695a      	ldr	r2, [r3, #20]
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	3b02      	subs	r3, #2
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d804      	bhi.n	800c51a <create_chain+0x106>
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	695b      	ldr	r3, [r3, #20]
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	791b      	ldrb	r3, [r3, #4]
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	711a      	strb	r2, [r3, #4]
 800c528:	e007      	b.n	800c53a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c52a:	7dfb      	ldrb	r3, [r7, #23]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d102      	bne.n	800c536 <create_chain+0x122>
 800c530:	f04f 33ff 	mov.w	r3, #4294967295
 800c534:	e000      	b.n	800c538 <create_chain+0x124>
 800c536:	2301      	movs	r3, #1
 800c538:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c53a:	69fb      	ldr	r3, [r7, #28]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c55a:	d204      	bcs.n	800c566 <dir_sdi+0x22>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	f003 031f 	and.w	r3, r3, #31
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c566:	2302      	movs	r3, #2
 800c568:	e063      	b.n	800c632 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <dir_sdi+0x46>
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d902      	bls.n	800c58a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c588:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10c      	bne.n	800c5aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	095b      	lsrs	r3, r3, #5
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	8912      	ldrh	r2, [r2, #8]
 800c598:	4293      	cmp	r3, r2
 800c59a:	d301      	bcc.n	800c5a0 <dir_sdi+0x5c>
 800c59c:	2302      	movs	r3, #2
 800c59e:	e048      	b.n	800c632 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	61da      	str	r2, [r3, #28]
 800c5a8:	e029      	b.n	800c5fe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	025b      	lsls	r3, r3, #9
 800c5b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5b2:	e019      	b.n	800c5e8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6979      	ldr	r1, [r7, #20]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fd9f 	bl	800c0fc <get_fat>
 800c5be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c6:	d101      	bne.n	800c5cc <dir_sdi+0x88>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e032      	b.n	800c632 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d904      	bls.n	800c5dc <dir_sdi+0x98>
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d301      	bcc.n	800c5e0 <dir_sdi+0x9c>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e028      	b.n	800c632 <dir_sdi+0xee>
			ofs -= csz;
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d2e1      	bcs.n	800c5b4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c5f0:	6979      	ldr	r1, [r7, #20]
 800c5f2:	6938      	ldr	r0, [r7, #16]
 800c5f4:	f7ff fd63 	bl	800c0be <clust2sect>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <dir_sdi+0xcc>
 800c60c:	2302      	movs	r3, #2
 800c60e:	e010      	b.n	800c632 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	69da      	ldr	r2, [r3, #28]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	0a5b      	lsrs	r3, r3, #9
 800c618:	441a      	add	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62a:	441a      	add	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b086      	sub	sp, #24
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	3320      	adds	r3, #32
 800c650:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <dir_next+0x28>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c660:	d301      	bcc.n	800c666 <dir_next+0x2c>
 800c662:	2304      	movs	r3, #4
 800c664:	e0aa      	b.n	800c7bc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8098 	bne.w	800c7a2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	69db      	ldr	r3, [r3, #28]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10b      	bne.n	800c69c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	095b      	lsrs	r3, r3, #5
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	8912      	ldrh	r2, [r2, #8]
 800c68c:	4293      	cmp	r3, r2
 800c68e:	f0c0 8088 	bcc.w	800c7a2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	61da      	str	r2, [r3, #28]
 800c698:	2304      	movs	r3, #4
 800c69a:	e08f      	b.n	800c7bc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	0a5b      	lsrs	r3, r3, #9
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	8952      	ldrh	r2, [r2, #10]
 800c6a4:	3a01      	subs	r2, #1
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d17a      	bne.n	800c7a2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f7ff fd21 	bl	800c0fc <get_fat>
 800c6ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d801      	bhi.n	800c6c6 <dir_next+0x8c>
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	e07a      	b.n	800c7bc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6cc:	d101      	bne.n	800c6d2 <dir_next+0x98>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e074      	b.n	800c7bc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d358      	bcc.n	800c78e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d104      	bne.n	800c6ec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	61da      	str	r2, [r3, #28]
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	e067      	b.n	800c7bc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f7ff fe8d 	bl	800c414 <create_chain>
 800c6fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <dir_next+0xcc>
 800c702:	2307      	movs	r3, #7
 800c704:	e05a      	b.n	800c7bc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <dir_next+0xd6>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e055      	b.n	800c7bc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c716:	d101      	bne.n	800c71c <dir_next+0xe2>
 800c718:	2301      	movs	r3, #1
 800c71a:	e04f      	b.n	800c7bc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f7ff fc5d 	bl	800bfdc <sync_window>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <dir_next+0xf2>
 800c728:	2301      	movs	r3, #1
 800c72a:	e047      	b.n	800c7bc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3334      	adds	r3, #52	; 0x34
 800c730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c734:	2100      	movs	r1, #0
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fb06 	bl	800bd48 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c73c:	2300      	movs	r3, #0
 800c73e:	613b      	str	r3, [r7, #16]
 800c740:	6979      	ldr	r1, [r7, #20]
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff fcbb 	bl	800c0be <clust2sect>
 800c748:	4602      	mov	r2, r0
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	631a      	str	r2, [r3, #48]	; 0x30
 800c74e:	e012      	b.n	800c776 <dir_next+0x13c>
						fs->wflag = 1;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fc40 	bl	800bfdc <sync_window>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <dir_next+0x12c>
 800c762:	2301      	movs	r3, #1
 800c764:	e02a      	b.n	800c7bc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	3301      	adds	r3, #1
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	631a      	str	r2, [r3, #48]	; 0x30
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	895b      	ldrh	r3, [r3, #10]
 800c77a:	461a      	mov	r2, r3
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	4293      	cmp	r3, r2
 800c780:	d3e6      	bcc.n	800c750 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	1ad2      	subs	r2, r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c794:	6979      	ldr	r1, [r7, #20]
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f7ff fc91 	bl	800c0be <clust2sect>
 800c79c:	4602      	mov	r2, r0
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b4:	441a      	add	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	331a      	adds	r3, #26
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fa36 	bl	800bc44 <ld_word>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d109      	bne.n	800c7f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff fa2b 	bl	800bc44 <ld_word>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	041b      	lsls	r3, r3, #16
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c804:	b590      	push	{r4, r7, lr}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	331a      	adds	r3, #26
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fa16 	bl	800bc44 <ld_word>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <cmp_lfn+0x1e>
 800c81e:	2300      	movs	r3, #0
 800c820:	e059      	b.n	800c8d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c82a:	1e5a      	subs	r2, r3, #1
 800c82c:	4613      	mov	r3, r2
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c838:	2301      	movs	r3, #1
 800c83a:	81fb      	strh	r3, [r7, #14]
 800c83c:	2300      	movs	r3, #0
 800c83e:	613b      	str	r3, [r7, #16]
 800c840:	e033      	b.n	800c8aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c842:	4a27      	ldr	r2, [pc, #156]	; (800c8e0 <cmp_lfn+0xdc>)
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	4413      	add	r3, r2
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	4413      	add	r3, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f7ff f9f7 	bl	800bc44 <ld_word>
 800c856:	4603      	mov	r3, r0
 800c858:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c85a:	89fb      	ldrh	r3, [r7, #14]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01a      	beq.n	800c896 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2bfe      	cmp	r3, #254	; 0xfe
 800c864:	d812      	bhi.n	800c88c <cmp_lfn+0x88>
 800c866:	89bb      	ldrh	r3, [r7, #12]
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 fab9 	bl	800dde0 <ff_wtoupper>
 800c86e:	4603      	mov	r3, r0
 800c870:	461c      	mov	r4, r3
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	617a      	str	r2, [r7, #20]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	4618      	mov	r0, r3
 800c882:	f001 faad 	bl	800dde0 <ff_wtoupper>
 800c886:	4603      	mov	r3, r0
 800c888:	429c      	cmp	r4, r3
 800c88a:	d001      	beq.n	800c890 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c88c:	2300      	movs	r3, #0
 800c88e:	e022      	b.n	800c8d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c890:	89bb      	ldrh	r3, [r7, #12]
 800c892:	81fb      	strh	r3, [r7, #14]
 800c894:	e006      	b.n	800c8a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c896:	89bb      	ldrh	r3, [r7, #12]
 800c898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d001      	beq.n	800c8a4 <cmp_lfn+0xa0>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e018      	b.n	800c8d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2b0c      	cmp	r3, #12
 800c8ae:	d9c8      	bls.n	800c842 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00b      	beq.n	800c8d4 <cmp_lfn+0xd0>
 800c8bc:	89fb      	ldrh	r3, [r7, #14]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d008      	beq.n	800c8d4 <cmp_lfn+0xd0>
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <cmp_lfn+0xd0>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e000      	b.n	800c8d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c8d4:	2301      	movs	r3, #1
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd90      	pop	{r4, r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	08026624 	.word	0x08026624

0800c8e4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	331a      	adds	r3, #26
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff f9a6 	bl	800bc44 <ld_word>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <pick_lfn+0x1e>
 800c8fe:	2300      	movs	r3, #0
 800c900:	e04d      	b.n	800c99e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c90a:	1e5a      	subs	r2, r3, #1
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c918:	2301      	movs	r3, #1
 800c91a:	81fb      	strh	r3, [r7, #14]
 800c91c:	2300      	movs	r3, #0
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	e028      	b.n	800c974 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c922:	4a21      	ldr	r2, [pc, #132]	; (800c9a8 <pick_lfn+0xc4>)
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	4413      	add	r3, r2
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	4413      	add	r3, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff f987 	bl	800bc44 <ld_word>
 800c936:	4603      	mov	r3, r0
 800c938:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00f      	beq.n	800c960 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2bfe      	cmp	r3, #254	; 0xfe
 800c944:	d901      	bls.n	800c94a <pick_lfn+0x66>
 800c946:	2300      	movs	r3, #0
 800c948:	e029      	b.n	800c99e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c94a:	89bb      	ldrh	r3, [r7, #12]
 800c94c:	81fb      	strh	r3, [r7, #14]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	617a      	str	r2, [r7, #20]
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4413      	add	r3, r2
 800c95a:	89fa      	ldrh	r2, [r7, #14]
 800c95c:	801a      	strh	r2, [r3, #0]
 800c95e:	e006      	b.n	800c96e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c960:	89bb      	ldrh	r3, [r7, #12]
 800c962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c966:	4293      	cmp	r3, r2
 800c968:	d001      	beq.n	800c96e <pick_lfn+0x8a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e017      	b.n	800c99e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3301      	adds	r3, #1
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b0c      	cmp	r3, #12
 800c978:	d9d3      	bls.n	800c922 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00a      	beq.n	800c99c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2bfe      	cmp	r3, #254	; 0xfe
 800c98a:	d901      	bls.n	800c990 <pick_lfn+0xac>
 800c98c:	2300      	movs	r3, #0
 800c98e:	e006      	b.n	800c99e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	4413      	add	r3, r2
 800c998:	2200      	movs	r2, #0
 800c99a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c99c:	2301      	movs	r3, #1
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	08026624 	.word	0x08026624

0800c9ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c9b8:	230b      	movs	r3, #11
 800c9ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	0852      	lsrs	r2, r2, #1
 800c9c2:	01db      	lsls	r3, r3, #7
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	1c59      	adds	r1, r3, #1
 800c9cc:	6079      	str	r1, [r7, #4]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	60bb      	str	r3, [r7, #8]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1ed      	bne.n	800c9bc <sum_sfn+0x10>
	return sum;
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ca02:	23ff      	movs	r3, #255	; 0xff
 800ca04:	757b      	strb	r3, [r7, #21]
 800ca06:	23ff      	movs	r3, #255	; 0xff
 800ca08:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ca0a:	e081      	b.n	800cb10 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6938      	ldr	r0, [r7, #16]
 800ca14:	f7ff fb26 	bl	800c064 <move_window>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d17c      	bne.n	800cb1c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ca2a:	7dbb      	ldrb	r3, [r7, #22]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca30:	2304      	movs	r3, #4
 800ca32:	75fb      	strb	r3, [r7, #23]
 800ca34:	e077      	b.n	800cb26 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	330b      	adds	r3, #11
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca42:	73fb      	strb	r3, [r7, #15]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7bfa      	ldrb	r2, [r7, #15]
 800ca48:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca4a:	7dbb      	ldrb	r3, [r7, #22]
 800ca4c:	2be5      	cmp	r3, #229	; 0xe5
 800ca4e:	d00e      	beq.n	800ca6e <dir_read+0x80>
 800ca50:	7dbb      	ldrb	r3, [r7, #22]
 800ca52:	2b2e      	cmp	r3, #46	; 0x2e
 800ca54:	d00b      	beq.n	800ca6e <dir_read+0x80>
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	f023 0320 	bic.w	r3, r3, #32
 800ca5c:	2b08      	cmp	r3, #8
 800ca5e:	bf0c      	ite	eq
 800ca60:	2301      	moveq	r3, #1
 800ca62:	2300      	movne	r3, #0
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	461a      	mov	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d002      	beq.n	800ca74 <dir_read+0x86>
				ord = 0xFF;
 800ca6e:	23ff      	movs	r3, #255	; 0xff
 800ca70:	757b      	strb	r3, [r7, #21]
 800ca72:	e044      	b.n	800cafe <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b0f      	cmp	r3, #15
 800ca78:	d12f      	bne.n	800cada <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca7a:	7dbb      	ldrb	r3, [r7, #22]
 800ca7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00d      	beq.n	800caa0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	7b5b      	ldrb	r3, [r3, #13]
 800ca8a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca8c:	7dbb      	ldrb	r3, [r7, #22]
 800ca8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca92:	75bb      	strb	r3, [r7, #22]
 800ca94:	7dbb      	ldrb	r3, [r7, #22]
 800ca96:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	695a      	ldr	r2, [r3, #20]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800caa0:	7dba      	ldrb	r2, [r7, #22]
 800caa2:	7d7b      	ldrb	r3, [r7, #21]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d115      	bne.n	800cad4 <dir_read+0xe6>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	330d      	adds	r3, #13
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	7d3a      	ldrb	r2, [r7, #20]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d10e      	bne.n	800cad4 <dir_read+0xe6>
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	68da      	ldr	r2, [r3, #12]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	4619      	mov	r1, r3
 800cac0:	4610      	mov	r0, r2
 800cac2:	f7ff ff0f 	bl	800c8e4 <pick_lfn>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <dir_read+0xe6>
 800cacc:	7d7b      	ldrb	r3, [r7, #21]
 800cace:	3b01      	subs	r3, #1
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	e000      	b.n	800cad6 <dir_read+0xe8>
 800cad4:	23ff      	movs	r3, #255	; 0xff
 800cad6:	757b      	strb	r3, [r7, #21]
 800cad8:	e011      	b.n	800cafe <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cada:	7d7b      	ldrb	r3, [r7, #21]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d109      	bne.n	800caf4 <dir_read+0x106>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a1b      	ldr	r3, [r3, #32]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff ff61 	bl	800c9ac <sum_sfn>
 800caea:	4603      	mov	r3, r0
 800caec:	461a      	mov	r2, r3
 800caee:	7d3b      	ldrb	r3, [r7, #20]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d015      	beq.n	800cb20 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cafa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cafc:	e010      	b.n	800cb20 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cafe:	2100      	movs	r1, #0
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff fd9a 	bl	800c63a <dir_next>
 800cb06:	4603      	mov	r3, r0
 800cb08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <dir_read+0x136>
	while (dp->sect) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	69db      	ldr	r3, [r3, #28]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f47f af79 	bne.w	800ca0c <dir_read+0x1e>
 800cb1a:	e004      	b.n	800cb26 <dir_read+0x138>
		if (res != FR_OK) break;
 800cb1c:	bf00      	nop
 800cb1e:	e002      	b.n	800cb26 <dir_read+0x138>
					break;
 800cb20:	bf00      	nop
 800cb22:	e000      	b.n	800cb26 <dir_read+0x138>
		if (res != FR_OK) break;
 800cb24:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <dir_read+0x144>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	61da      	str	r2, [r3, #28]
	return res;
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fcf9 	bl	800c544 <dir_sdi>
 800cb52:	4603      	mov	r3, r0
 800cb54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb56:	7dfb      	ldrb	r3, [r7, #23]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <dir_find+0x24>
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
 800cb5e:	e0a9      	b.n	800ccb4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb60:	23ff      	movs	r3, #255	; 0xff
 800cb62:	753b      	strb	r3, [r7, #20]
 800cb64:	7d3b      	ldrb	r3, [r7, #20]
 800cb66:	757b      	strb	r3, [r7, #21]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	69db      	ldr	r3, [r3, #28]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6938      	ldr	r0, [r7, #16]
 800cb78:	f7ff fa74 	bl	800c064 <move_window>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f040 8090 	bne.w	800cca8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb90:	7dbb      	ldrb	r3, [r7, #22]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d102      	bne.n	800cb9c <dir_find+0x60>
 800cb96:	2304      	movs	r3, #4
 800cb98:	75fb      	strb	r3, [r7, #23]
 800cb9a:	e08a      	b.n	800ccb2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	330b      	adds	r3, #11
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cba8:	73fb      	strb	r3, [r7, #15]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	7bfa      	ldrb	r2, [r7, #15]
 800cbae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cbb0:	7dbb      	ldrb	r3, [r7, #22]
 800cbb2:	2be5      	cmp	r3, #229	; 0xe5
 800cbb4:	d007      	beq.n	800cbc6 <dir_find+0x8a>
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	f003 0308 	and.w	r3, r3, #8
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <dir_find+0x98>
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b0f      	cmp	r3, #15
 800cbc4:	d006      	beq.n	800cbd4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbc6:	23ff      	movs	r3, #255	; 0xff
 800cbc8:	757b      	strb	r3, [r7, #21]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30
 800cbd2:	e05e      	b.n	800cc92 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	2b0f      	cmp	r3, #15
 800cbd8:	d136      	bne.n	800cc48 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d154      	bne.n	800cc92 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cbe8:	7dbb      	ldrb	r3, [r7, #22]
 800cbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00d      	beq.n	800cc0e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	7b5b      	ldrb	r3, [r3, #13]
 800cbf8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbfa:	7dbb      	ldrb	r3, [r7, #22]
 800cbfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc00:	75bb      	strb	r3, [r7, #22]
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695a      	ldr	r2, [r3, #20]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc0e:	7dba      	ldrb	r2, [r7, #22]
 800cc10:	7d7b      	ldrb	r3, [r7, #21]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d115      	bne.n	800cc42 <dir_find+0x106>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	330d      	adds	r3, #13
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	7d3a      	ldrb	r2, [r7, #20]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d10e      	bne.n	800cc42 <dir_find+0x106>
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a1b      	ldr	r3, [r3, #32]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	4610      	mov	r0, r2
 800cc30:	f7ff fde8 	bl	800c804 <cmp_lfn>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <dir_find+0x106>
 800cc3a:	7d7b      	ldrb	r3, [r7, #21]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	e000      	b.n	800cc44 <dir_find+0x108>
 800cc42:	23ff      	movs	r3, #255	; 0xff
 800cc44:	757b      	strb	r3, [r7, #21]
 800cc46:	e024      	b.n	800cc92 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc48:	7d7b      	ldrb	r3, [r7, #21]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d109      	bne.n	800cc62 <dir_find+0x126>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff feaa 	bl	800c9ac <sum_sfn>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	7d3b      	ldrb	r3, [r7, #20]
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d024      	beq.n	800ccac <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <dir_find+0x14a>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a18      	ldr	r0, [r3, #32]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3324      	adds	r3, #36	; 0x24
 800cc78:	220b      	movs	r2, #11
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	f7ff f87e 	bl	800bd7c <mem_cmp>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d014      	beq.n	800ccb0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc86:	23ff      	movs	r3, #255	; 0xff
 800cc88:	757b      	strb	r3, [r7, #21]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc90:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc92:	2100      	movs	r1, #0
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff fcd0 	bl	800c63a <dir_next>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f43f af65 	beq.w	800cb70 <dir_find+0x34>
 800cca6:	e004      	b.n	800ccb2 <dir_find+0x176>
		if (res != FR_OK) break;
 800cca8:	bf00      	nop
 800ccaa:	e002      	b.n	800ccb2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ccac:	bf00      	nop
 800ccae:	e000      	b.n	800ccb2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ccb0:	bf00      	nop

	return res;
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	69db      	ldr	r3, [r3, #28]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80d7 	beq.w	800ce8a <get_fileinfo+0x1ce>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce4:	d040      	beq.n	800cd68 <get_fileinfo+0xac>
			i = j = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ccee:	e029      	b.n	800cd44 <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 f813 	bl	800dd20 <ff_convert>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ccfe:	89fb      	ldrh	r3, [r7, #14]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <get_fileinfo+0x4e>
 800cd04:	2300      	movs	r3, #0
 800cd06:	61fb      	str	r3, [r7, #28]
 800cd08:	e028      	b.n	800cd5c <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	2bff      	cmp	r3, #255	; 0xff
 800cd0e:	d90a      	bls.n	800cd26 <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 800cd10:	89fb      	ldrh	r3, [r7, #14]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	b299      	uxth	r1, r3
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	61fa      	str	r2, [r7, #28]
 800cd1c:	b2c9      	uxtb	r1, r1
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	4413      	add	r3, r2
 800cd22:	460a      	mov	r2, r1
 800cd24:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	2bfe      	cmp	r3, #254	; 0xfe
 800cd2a:	d902      	bls.n	800cd32 <get_fileinfo+0x76>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	61fb      	str	r3, [r7, #28]
 800cd30:	e014      	b.n	800cd5c <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	61fa      	str	r2, [r7, #28]
 800cd38:	89fa      	ldrh	r2, [r7, #14]
 800cd3a:	b2d1      	uxtb	r1, r2
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	4413      	add	r3, r2
 800cd40:	460a      	mov	r2, r1
 800cd42:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	1c59      	adds	r1, r3, #1
 800cd4c:	61b9      	str	r1, [r7, #24]
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	881b      	ldrh	r3, [r3, #0]
 800cd54:	81fb      	strh	r3, [r7, #14]
 800cd56:	89fb      	ldrh	r3, [r7, #14]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1c9      	bne.n	800ccf0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	4413      	add	r3, r2
 800cd62:	3316      	adds	r3, #22
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61bb      	str	r3, [r7, #24]
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	4413      	add	r3, r2
 800cd76:	3316      	adds	r3, #22
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cd7c:	e04c      	b.n	800ce18 <get_fileinfo+0x15c>
		c = (TCHAR)dp->dir[i++];
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1a      	ldr	r2, [r3, #32]
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	1c59      	adds	r1, r3, #1
 800cd86:	61f9      	str	r1, [r7, #28]
 800cd88:	4413      	add	r3, r2
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	d100      	bne.n	800cd96 <get_fileinfo+0xda>
 800cd94:	e040      	b.n	800ce18 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
 800cd98:	2b05      	cmp	r3, #5
 800cd9a:	d101      	bne.n	800cda0 <get_fileinfo+0xe4>
 800cd9c:	23e5      	movs	r3, #229	; 0xe5
 800cd9e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	2b09      	cmp	r3, #9
 800cda4:	d10f      	bne.n	800cdc6 <get_fileinfo+0x10a>
			if (!lfv) fno->fname[j] = '.';
 800cda6:	89bb      	ldrh	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d105      	bne.n	800cdb8 <get_fileinfo+0xfc>
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3316      	adds	r3, #22
 800cdb4:	222e      	movs	r2, #46	; 0x2e
 800cdb6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	61ba      	str	r2, [r7, #24]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	222e      	movs	r2, #46	; 0x2e
 800cdc4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	4413      	add	r3, r2
 800cdcc:	3309      	adds	r3, #9
 800cdce:	7dfa      	ldrb	r2, [r7, #23]
 800cdd0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cdd2:	89bb      	ldrh	r3, [r7, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11c      	bne.n	800ce12 <get_fileinfo+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	2b40      	cmp	r3, #64	; 0x40
 800cddc:	d913      	bls.n	800ce06 <get_fileinfo+0x14a>
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
 800cde0:	2b5a      	cmp	r3, #90	; 0x5a
 800cde2:	d810      	bhi.n	800ce06 <get_fileinfo+0x14a>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	330c      	adds	r3, #12
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	2b08      	cmp	r3, #8
 800cdf2:	d901      	bls.n	800cdf8 <get_fileinfo+0x13c>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	e000      	b.n	800cdfa <get_fileinfo+0x13e>
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <get_fileinfo+0x14a>
				c += 0x20;			/* To lower */
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
 800ce02:	3320      	adds	r3, #32
 800ce04:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3316      	adds	r3, #22
 800ce0e:	7dfa      	ldrb	r2, [r7, #23]
 800ce10:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	3301      	adds	r3, #1
 800ce16:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	2b0a      	cmp	r3, #10
 800ce1c:	d9af      	bls.n	800cd7e <get_fileinfo+0xc2>
	}
	if (!lfv) {
 800ce1e:	89bb      	ldrh	r3, [r7, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10d      	bne.n	800ce40 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	4413      	add	r3, r2
 800ce2a:	3316      	adds	r3, #22
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6a1b      	ldr	r3, [r3, #32]
 800ce34:	330c      	adds	r3, #12
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <get_fileinfo+0x184>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	4413      	add	r3, r2
 800ce46:	3309      	adds	r3, #9
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	7ada      	ldrb	r2, [r3, #11]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	331c      	adds	r3, #28
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe ff09 	bl	800bc74 <ld_dword>
 800ce62:	4602      	mov	r2, r0
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	3316      	adds	r3, #22
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe ff00 	bl	800bc74 <ld_dword>
 800ce74:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	80da      	strh	r2, [r3, #6]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	0c1b      	lsrs	r3, r3, #16
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	809a      	strh	r2, [r3, #4]
 800ce88:	e000      	b.n	800ce8c <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce8a:	bf00      	nop
}
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08a      	sub	sp, #40	; 0x28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	2300      	movs	r3, #0
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	61ba      	str	r2, [r7, #24]
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	4413      	add	r3, r2
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec4:	2b1f      	cmp	r3, #31
 800cec6:	d96a      	bls.n	800cf9e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceca:	2b2f      	cmp	r3, #47	; 0x2f
 800cecc:	d006      	beq.n	800cedc <create_name+0x48>
 800cece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ced0:	2b5c      	cmp	r3, #92	; 0x5c
 800ced2:	d110      	bne.n	800cef6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ced4:	e002      	b.n	800cedc <create_name+0x48>
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	3301      	adds	r3, #1
 800ceda:	61bb      	str	r3, [r7, #24]
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	4413      	add	r3, r2
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	2b2f      	cmp	r3, #47	; 0x2f
 800cee6:	d0f6      	beq.n	800ced6 <create_name+0x42>
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	4413      	add	r3, r2
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b5c      	cmp	r3, #92	; 0x5c
 800cef2:	d0f0      	beq.n	800ced6 <create_name+0x42>
			break;
 800cef4:	e054      	b.n	800cfa0 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2bfe      	cmp	r3, #254	; 0xfe
 800cefa:	d901      	bls.n	800cf00 <create_name+0x6c>
 800cefc:	2306      	movs	r3, #6
 800cefe:	e1bf      	b.n	800d280 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cf00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800cf06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b80      	cmp	r3, #128	; 0x80
 800cf0c:	d925      	bls.n	800cf5a <create_name+0xc6>
 800cf0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2bff      	cmp	r3, #255	; 0xff
 800cf14:	d021      	beq.n	800cf5a <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	61ba      	str	r2, [r7, #24]
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800cf26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf28:	021b      	lsls	r3, r3, #8
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4413      	add	r3, r2
 800cf34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800cf36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf3a:	2b3f      	cmp	r3, #63	; 0x3f
 800cf3c:	d903      	bls.n	800cf46 <create_name+0xb2>
 800cf3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf42:	2b7e      	cmp	r3, #126	; 0x7e
 800cf44:	d909      	bls.n	800cf5a <create_name+0xc6>
 800cf46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da03      	bge.n	800cf56 <create_name+0xc2>
 800cf4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf52:	2bff      	cmp	r3, #255	; 0xff
 800cf54:	d101      	bne.n	800cf5a <create_name+0xc6>
 800cf56:	2306      	movs	r3, #6
 800cf58:	e192      	b.n	800d280 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cf5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fede 	bl	800dd20 <ff_convert>
 800cf64:	4603      	mov	r3, r0
 800cf66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cf68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <create_name+0xde>
 800cf6e:	2306      	movs	r3, #6
 800cf70:	e186      	b.n	800d280 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cf72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf74:	2b7f      	cmp	r3, #127	; 0x7f
 800cf76:	d809      	bhi.n	800cf8c <create_name+0xf8>
 800cf78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	489a      	ldr	r0, [pc, #616]	; (800d1e8 <create_name+0x354>)
 800cf7e:	f7fe ff24 	bl	800bdca <chk_chr>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <create_name+0xf8>
 800cf88:	2306      	movs	r3, #6
 800cf8a:	e179      	b.n	800d280 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	617a      	str	r2, [r7, #20]
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4413      	add	r3, r2
 800cf98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cf9c:	e78a      	b.n	800ceb4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cf9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	441a      	add	r2, r3
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cfaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfac:	2b1f      	cmp	r3, #31
 800cfae:	d801      	bhi.n	800cfb4 <create_name+0x120>
 800cfb0:	2304      	movs	r3, #4
 800cfb2:	e000      	b.n	800cfb6 <create_name+0x122>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cfba:	e011      	b.n	800cfe0 <create_name+0x14c>
		w = lfn[di - 1];
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	4413      	add	r3, r2
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cfce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	d002      	beq.n	800cfda <create_name+0x146>
 800cfd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd8:	d106      	bne.n	800cfe8 <create_name+0x154>
		di--;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1ea      	bne.n	800cfbc <create_name+0x128>
 800cfe6:	e000      	b.n	800cfea <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800cfe8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	4413      	add	r3, r2
 800cff2:	2200      	movs	r2, #0
 800cff4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <create_name+0x16c>
 800cffc:	2306      	movs	r3, #6
 800cffe:	e13f      	b.n	800d280 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	3324      	adds	r3, #36	; 0x24
 800d004:	220b      	movs	r2, #11
 800d006:	2120      	movs	r1, #32
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fe9d 	bl	800bd48 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d00e:	2300      	movs	r3, #0
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	e002      	b.n	800d01a <create_name+0x186>
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	3301      	adds	r3, #1
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4413      	add	r3, r2
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	2b20      	cmp	r3, #32
 800d026:	d0f5      	beq.n	800d014 <create_name+0x180>
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4413      	add	r3, r2
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	2b2e      	cmp	r3, #46	; 0x2e
 800d034:	d0ee      	beq.n	800d014 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d009      	beq.n	800d050 <create_name+0x1bc>
 800d03c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d040:	f043 0303 	orr.w	r3, r3, #3
 800d044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d048:	e002      	b.n	800d050 <create_name+0x1bc>
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	617b      	str	r3, [r7, #20]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d009      	beq.n	800d06a <create_name+0x1d6>
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d05c:	3b01      	subs	r3, #1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	4413      	add	r3, r2
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	2b2e      	cmp	r3, #46	; 0x2e
 800d068:	d1ef      	bne.n	800d04a <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d06a:	2300      	movs	r3, #0
 800d06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d070:	2300      	movs	r3, #0
 800d072:	623b      	str	r3, [r7, #32]
 800d074:	2308      	movs	r3, #8
 800d076:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	61ba      	str	r2, [r7, #24]
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	4413      	add	r3, r2
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 80aa 	beq.w	800d1e4 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d092:	2b20      	cmp	r3, #32
 800d094:	d006      	beq.n	800d0a4 <create_name+0x210>
 800d096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d098:	2b2e      	cmp	r3, #46	; 0x2e
 800d09a:	d10a      	bne.n	800d0b2 <create_name+0x21e>
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d006      	beq.n	800d0b2 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0a8:	f043 0303 	orr.w	r3, r3, #3
 800d0ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0b0:	e097      	b.n	800d1e2 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d0b2:	6a3a      	ldr	r2, [r7, #32]
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d203      	bcs.n	800d0c2 <create_name+0x22e>
 800d0ba:	69ba      	ldr	r2, [r7, #24]
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d123      	bne.n	800d10a <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	2b0b      	cmp	r3, #11
 800d0c6:	d106      	bne.n	800d0d6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0cc:	f043 0303 	orr.w	r3, r3, #3
 800d0d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d0d4:	e08d      	b.n	800d1f2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d0d6:	69ba      	ldr	r2, [r7, #24]
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d005      	beq.n	800d0ea <create_name+0x256>
 800d0de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0e2:	f043 0303 	orr.w	r3, r3, #3
 800d0e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d87e      	bhi.n	800d1f0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	2308      	movs	r3, #8
 800d0f8:	623b      	str	r3, [r7, #32]
 800d0fa:	230b      	movs	r3, #11
 800d0fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d108:	e06b      	b.n	800d1e2 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d10a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10c:	2b7f      	cmp	r3, #127	; 0x7f
 800d10e:	d910      	bls.n	800d132 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800d110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d112:	4618      	mov	r0, r3
 800d114:	f000 fe64 	bl	800dde0 <ff_wtoupper>
 800d118:	4603      	mov	r3, r0
 800d11a:	2100      	movs	r1, #0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fdff 	bl	800dd20 <ff_convert>
 800d122:	4603      	mov	r3, r0
 800d124:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d126:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d12a:	f043 0302 	orr.w	r3, r3, #2
 800d12e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800d132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d134:	2bff      	cmp	r3, #255	; 0xff
 800d136:	d91a      	bls.n	800d16e <create_name+0x2da>
			if (i >= ni - 1) {
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	6a3a      	ldr	r2, [r7, #32]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d308      	bcc.n	800d154 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800d142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d146:	f043 0303 	orr.w	r3, r3, #3
 800d14a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	623b      	str	r3, [r7, #32]
 800d152:	e046      	b.n	800d1e2 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800d154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d156:	0a1b      	lsrs	r3, r3, #8
 800d158:	b299      	uxth	r1, r3
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	623a      	str	r2, [r7, #32]
 800d160:	b2c9      	uxtb	r1, r1
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	4413      	add	r3, r2
 800d166:	460a      	mov	r2, r1
 800d168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d16c:	e02f      	b.n	800d1ce <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d170:	2b00      	cmp	r3, #0
 800d172:	d007      	beq.n	800d184 <create_name+0x2f0>
 800d174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d176:	4619      	mov	r1, r3
 800d178:	481c      	ldr	r0, [pc, #112]	; (800d1ec <create_name+0x358>)
 800d17a:	f7fe fe26 	bl	800bdca <chk_chr>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d008      	beq.n	800d196 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d184:	235f      	movs	r3, #95	; 0x5f
 800d186:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d18c:	f043 0303 	orr.w	r3, r3, #3
 800d190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d194:	e01b      	b.n	800d1ce <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d198:	2b40      	cmp	r3, #64	; 0x40
 800d19a:	d909      	bls.n	800d1b0 <create_name+0x31c>
 800d19c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d19e:	2b5a      	cmp	r3, #90	; 0x5a
 800d1a0:	d806      	bhi.n	800d1b0 <create_name+0x31c>
					b |= 2;
 800d1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a6:	f043 0302 	orr.w	r3, r3, #2
 800d1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1ae:	e00e      	b.n	800d1ce <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d1b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1b2:	2b60      	cmp	r3, #96	; 0x60
 800d1b4:	d90b      	bls.n	800d1ce <create_name+0x33a>
 800d1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1b8:	2b7a      	cmp	r3, #122	; 0x7a
 800d1ba:	d808      	bhi.n	800d1ce <create_name+0x33a>
						b |= 1; w -= 0x20;
 800d1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c0:	f043 0301 	orr.w	r3, r3, #1
 800d1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ca:	3b20      	subs	r3, #32
 800d1cc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	623a      	str	r2, [r7, #32]
 800d1d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1d6:	b2d1      	uxtb	r1, r2
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	4413      	add	r3, r2
 800d1dc:	460a      	mov	r2, r1
 800d1de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d1e2:	e749      	b.n	800d078 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800d1e4:	bf00      	nop
 800d1e6:	e004      	b.n	800d1f2 <create_name+0x35e>
 800d1e8:	080260a0 	.word	0x080260a0
 800d1ec:	080260ac 	.word	0x080260ac
			if (si > di) break;			/* No extension */
 800d1f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d1f8:	2be5      	cmp	r3, #229	; 0xe5
 800d1fa:	d103      	bne.n	800d204 <create_name+0x370>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2205      	movs	r2, #5
 800d200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b08      	cmp	r3, #8
 800d208:	d104      	bne.n	800d214 <create_name+0x380>
 800d20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d218:	f003 030c 	and.w	r3, r3, #12
 800d21c:	2b0c      	cmp	r3, #12
 800d21e:	d005      	beq.n	800d22c <create_name+0x398>
 800d220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d105      	bne.n	800d238 <create_name+0x3a4>
 800d22c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d230:	f043 0302 	orr.w	r3, r3, #2
 800d234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d23c:	f003 0302 	and.w	r3, r3, #2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d117      	bne.n	800d274 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d105      	bne.n	800d25c <create_name+0x3c8>
 800d250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d254:	f043 0310 	orr.w	r3, r3, #16
 800d258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	f003 030c 	and.w	r3, r3, #12
 800d264:	2b04      	cmp	r3, #4
 800d266:	d105      	bne.n	800d274 <create_name+0x3e0>
 800d268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d26c:	f043 0308 	orr.w	r3, r3, #8
 800d270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d27a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d27e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d280:	4618      	mov	r0, r3
 800d282:	3728      	adds	r7, #40	; 0x28
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d29c:	e002      	b.n	800d2a4 <follow_path+0x1c>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b2f      	cmp	r3, #47	; 0x2f
 800d2aa:	d0f8      	beq.n	800d29e <follow_path+0x16>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d2b2:	d0f4      	beq.n	800d29e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2b1f      	cmp	r3, #31
 800d2c0:	d80a      	bhi.n	800d2d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2280      	movs	r2, #128	; 0x80
 800d2c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff f939 	bl	800c544 <dir_sdi>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	75fb      	strb	r3, [r7, #23]
 800d2d6:	e043      	b.n	800d360 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2d8:	463b      	mov	r3, r7
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fdd9 	bl	800ce94 <create_name>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d134      	bne.n	800d356 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff fc25 	bl	800cb3c <dir_find>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00a      	beq.n	800d31a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d304:	7dfb      	ldrb	r3, [r7, #23]
 800d306:	2b04      	cmp	r3, #4
 800d308:	d127      	bne.n	800d35a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d30a:	7afb      	ldrb	r3, [r7, #11]
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	d122      	bne.n	800d35a <follow_path+0xd2>
 800d314:	2305      	movs	r3, #5
 800d316:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d318:	e01f      	b.n	800d35a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d31a:	7afb      	ldrb	r3, [r7, #11]
 800d31c:	f003 0304 	and.w	r3, r3, #4
 800d320:	2b00      	cmp	r3, #0
 800d322:	d11c      	bne.n	800d35e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	799b      	ldrb	r3, [r3, #6]
 800d328:	f003 0310 	and.w	r3, r3, #16
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d102      	bne.n	800d336 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d330:	2305      	movs	r3, #5
 800d332:	75fb      	strb	r3, [r7, #23]
 800d334:	e014      	b.n	800d360 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d344:	4413      	add	r3, r2
 800d346:	4619      	mov	r1, r3
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff fa3b 	bl	800c7c4 <ld_clust>
 800d34e:	4602      	mov	r2, r0
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d354:	e7c0      	b.n	800d2d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800d356:	bf00      	nop
 800d358:	e002      	b.n	800d360 <follow_path+0xd8>
				break;
 800d35a:	bf00      	nop
 800d35c:	e000      	b.n	800d360 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d35e:	bf00      	nop
			}
		}
	}

	return res;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d36a:	b480      	push	{r7}
 800d36c:	b087      	sub	sp, #28
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d372:	f04f 33ff 	mov.w	r3, #4294967295
 800d376:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d031      	beq.n	800d3e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e002      	b.n	800d38e <get_ldnumber+0x24>
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	3301      	adds	r3, #1
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b1f      	cmp	r3, #31
 800d394:	d903      	bls.n	800d39e <get_ldnumber+0x34>
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	2b3a      	cmp	r3, #58	; 0x3a
 800d39c:	d1f4      	bne.n	800d388 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b3a      	cmp	r3, #58	; 0x3a
 800d3a4:	d11c      	bne.n	800d3e0 <get_ldnumber+0x76>
			tp = *path;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	60fa      	str	r2, [r7, #12]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	3b30      	subs	r3, #48	; 0x30
 800d3b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b09      	cmp	r3, #9
 800d3bc:	d80e      	bhi.n	800d3dc <get_ldnumber+0x72>
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d10a      	bne.n	800d3dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d107      	bne.n	800d3dc <get_ldnumber+0x72>
					vol = (int)i;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	e002      	b.n	800d3e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d3e4:	693b      	ldr	r3, [r7, #16]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	371c      	adds	r7, #28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
	...

0800d3f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	70da      	strb	r2, [r3, #3]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f04f 32ff 	mov.w	r2, #4294967295
 800d40a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7fe fe28 	bl	800c064 <move_window>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <check_fs+0x2a>
 800d41a:	2304      	movs	r3, #4
 800d41c:	e038      	b.n	800d490 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3334      	adds	r3, #52	; 0x34
 800d422:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fc0c 	bl	800bc44 <ld_word>
 800d42c:	4603      	mov	r3, r0
 800d42e:	461a      	mov	r2, r3
 800d430:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d434:	429a      	cmp	r2, r3
 800d436:	d001      	beq.n	800d43c <check_fs+0x48>
 800d438:	2303      	movs	r3, #3
 800d43a:	e029      	b.n	800d490 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d442:	2be9      	cmp	r3, #233	; 0xe9
 800d444:	d009      	beq.n	800d45a <check_fs+0x66>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d44c:	2beb      	cmp	r3, #235	; 0xeb
 800d44e:	d11e      	bne.n	800d48e <check_fs+0x9a>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d456:	2b90      	cmp	r3, #144	; 0x90
 800d458:	d119      	bne.n	800d48e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3334      	adds	r3, #52	; 0x34
 800d45e:	3336      	adds	r3, #54	; 0x36
 800d460:	4618      	mov	r0, r3
 800d462:	f7fe fc07 	bl	800bc74 <ld_dword>
 800d466:	4603      	mov	r3, r0
 800d468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d46c:	4a0a      	ldr	r2, [pc, #40]	; (800d498 <check_fs+0xa4>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d101      	bne.n	800d476 <check_fs+0x82>
 800d472:	2300      	movs	r3, #0
 800d474:	e00c      	b.n	800d490 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3334      	adds	r3, #52	; 0x34
 800d47a:	3352      	adds	r3, #82	; 0x52
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fbf9 	bl	800bc74 <ld_dword>
 800d482:	4602      	mov	r2, r0
 800d484:	4b05      	ldr	r3, [pc, #20]	; (800d49c <check_fs+0xa8>)
 800d486:	429a      	cmp	r2, r3
 800d488:	d101      	bne.n	800d48e <check_fs+0x9a>
 800d48a:	2300      	movs	r3, #0
 800d48c:	e000      	b.n	800d490 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d48e:	2302      	movs	r3, #2
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	00544146 	.word	0x00544146
 800d49c:	33544146 	.word	0x33544146

0800d4a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b096      	sub	sp, #88	; 0x58
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff ff58 	bl	800d36a <get_ldnumber>
 800d4ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da01      	bge.n	800d4c6 <find_volume+0x26>
 800d4c2:	230b      	movs	r3, #11
 800d4c4:	e22e      	b.n	800d924 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d4c6:	4aa8      	ldr	r2, [pc, #672]	; (800d768 <find_volume+0x2c8>)
 800d4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <find_volume+0x3a>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	e224      	b.n	800d924 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	f023 0301 	bic.w	r3, r3, #1
 800d4e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01a      	beq.n	800d526 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fe fb25 	bl	800bb44 <disk_status>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10c      	bne.n	800d526 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d007      	beq.n	800d522 <find_volume+0x82>
 800d512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d001      	beq.n	800d522 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d51e:	230a      	movs	r3, #10
 800d520:	e200      	b.n	800d924 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d522:	2300      	movs	r3, #0
 800d524:	e1fe      	b.n	800d924 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	785b      	ldrb	r3, [r3, #1]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe fb1d 	bl	800bb78 <disk_initialize>
 800d53e:	4603      	mov	r3, r0
 800d540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d001      	beq.n	800d554 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d550:	2303      	movs	r3, #3
 800d552:	e1e7      	b.n	800d924 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d007      	beq.n	800d56a <find_volume+0xca>
 800d55a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d55e:	f003 0304 	and.w	r3, r3, #4
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d566:	230a      	movs	r3, #10
 800d568:	e1dc      	b.n	800d924 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d56e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d572:	f7ff ff3f 	bl	800d3f4 <check_fs>
 800d576:	4603      	mov	r3, r0
 800d578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d57c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d580:	2b02      	cmp	r3, #2
 800d582:	d14b      	bne.n	800d61c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d584:	2300      	movs	r3, #0
 800d586:	643b      	str	r3, [r7, #64]	; 0x40
 800d588:	e01f      	b.n	800d5ca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d592:	011b      	lsls	r3, r3, #4
 800d594:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d598:	4413      	add	r3, r2
 800d59a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59e:	3304      	adds	r3, #4
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d006      	beq.n	800d5b4 <find_volume+0x114>
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fb62 	bl	800bc74 <ld_dword>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	e000      	b.n	800d5b6 <find_volume+0x116>
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d5be:	440b      	add	r3, r1
 800d5c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	643b      	str	r3, [r7, #64]	; 0x40
 800d5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d9dc      	bls.n	800d58a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d002      	beq.n	800d5e0 <find_volume+0x140>
 800d5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d5ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d005      	beq.n	800d602 <find_volume+0x162>
 800d5f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5fa:	f7ff fefb 	bl	800d3f4 <check_fs>
 800d5fe:	4603      	mov	r3, r0
 800d600:	e000      	b.n	800d604 <find_volume+0x164>
 800d602:	2303      	movs	r3, #3
 800d604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d905      	bls.n	800d61c <find_volume+0x17c>
 800d610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d612:	3301      	adds	r3, #1
 800d614:	643b      	str	r3, [r7, #64]	; 0x40
 800d616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d9e1      	bls.n	800d5e0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d61c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d620:	2b04      	cmp	r3, #4
 800d622:	d101      	bne.n	800d628 <find_volume+0x188>
 800d624:	2301      	movs	r3, #1
 800d626:	e17d      	b.n	800d924 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d901      	bls.n	800d634 <find_volume+0x194>
 800d630:	230d      	movs	r3, #13
 800d632:	e177      	b.n	800d924 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	3334      	adds	r3, #52	; 0x34
 800d638:	330b      	adds	r3, #11
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fb02 	bl	800bc44 <ld_word>
 800d640:	4603      	mov	r3, r0
 800d642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d646:	d001      	beq.n	800d64c <find_volume+0x1ac>
 800d648:	230d      	movs	r3, #13
 800d64a:	e16b      	b.n	800d924 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	3334      	adds	r3, #52	; 0x34
 800d650:	3316      	adds	r3, #22
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe faf6 	bl	800bc44 <ld_word>
 800d658:	4603      	mov	r3, r0
 800d65a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <find_volume+0x1d0>
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	3334      	adds	r3, #52	; 0x34
 800d666:	3324      	adds	r3, #36	; 0x24
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe fb03 	bl	800bc74 <ld_dword>
 800d66e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d674:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	789b      	ldrb	r3, [r3, #2]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d005      	beq.n	800d694 <find_volume+0x1f4>
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	789b      	ldrb	r3, [r3, #2]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d001      	beq.n	800d694 <find_volume+0x1f4>
 800d690:	230d      	movs	r3, #13
 800d692:	e147      	b.n	800d924 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d696:	789b      	ldrb	r3, [r3, #2]
 800d698:	461a      	mov	r2, r3
 800d69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d69c:	fb02 f303 	mul.w	r3, r2, r3
 800d6a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	895b      	ldrh	r3, [r3, #10]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d008      	beq.n	800d6c8 <find_volume+0x228>
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	895b      	ldrh	r3, [r3, #10]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6be:	895b      	ldrh	r3, [r3, #10]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <find_volume+0x22c>
 800d6c8:	230d      	movs	r3, #13
 800d6ca:	e12b      	b.n	800d924 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	3334      	adds	r3, #52	; 0x34
 800d6d0:	3311      	adds	r3, #17
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe fab6 	bl	800bc44 <ld_word>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e2:	891b      	ldrh	r3, [r3, #8]
 800d6e4:	f003 030f 	and.w	r3, r3, #15
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <find_volume+0x252>
 800d6ee:	230d      	movs	r3, #13
 800d6f0:	e118      	b.n	800d924 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f4:	3334      	adds	r3, #52	; 0x34
 800d6f6:	3313      	adds	r3, #19
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe faa3 	bl	800bc44 <ld_word>
 800d6fe:	4603      	mov	r3, r0
 800d700:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d704:	2b00      	cmp	r3, #0
 800d706:	d106      	bne.n	800d716 <find_volume+0x276>
 800d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70a:	3334      	adds	r3, #52	; 0x34
 800d70c:	3320      	adds	r3, #32
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fab0 	bl	800bc74 <ld_dword>
 800d714:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	3334      	adds	r3, #52	; 0x34
 800d71a:	330e      	adds	r3, #14
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe fa91 	bl	800bc44 <ld_word>
 800d722:	4603      	mov	r3, r0
 800d724:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <find_volume+0x290>
 800d72c:	230d      	movs	r3, #13
 800d72e:	e0f9      	b.n	800d924 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d730:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d734:	4413      	add	r3, r2
 800d736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d738:	8912      	ldrh	r2, [r2, #8]
 800d73a:	0912      	lsrs	r2, r2, #4
 800d73c:	b292      	uxth	r2, r2
 800d73e:	4413      	add	r3, r2
 800d740:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	429a      	cmp	r2, r3
 800d748:	d201      	bcs.n	800d74e <find_volume+0x2ae>
 800d74a:	230d      	movs	r3, #13
 800d74c:	e0ea      	b.n	800d924 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d74e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d756:	8952      	ldrh	r2, [r2, #10]
 800d758:	fbb3 f3f2 	udiv	r3, r3, r2
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d103      	bne.n	800d76c <find_volume+0x2cc>
 800d764:	230d      	movs	r3, #13
 800d766:	e0dd      	b.n	800d924 <find_volume+0x484>
 800d768:	20000144 	.word	0x20000144
		fmt = FS_FAT32;
 800d76c:	2303      	movs	r3, #3
 800d76e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d778:	4293      	cmp	r3, r2
 800d77a:	d802      	bhi.n	800d782 <find_volume+0x2e2>
 800d77c:	2302      	movs	r3, #2
 800d77e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d788:	4293      	cmp	r3, r2
 800d78a:	d802      	bhi.n	800d792 <find_volume+0x2f2>
 800d78c:	2301      	movs	r3, #1
 800d78e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	1c9a      	adds	r2, r3, #2
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d79e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d7a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a4:	441a      	add	r2, r3
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d7aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	441a      	add	r2, r3
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d7b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	d11e      	bne.n	800d7fa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	3334      	adds	r3, #52	; 0x34
 800d7c0:	332a      	adds	r3, #42	; 0x2a
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe fa3e 	bl	800bc44 <ld_word>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <find_volume+0x332>
 800d7ce:	230d      	movs	r3, #13
 800d7d0:	e0a8      	b.n	800d924 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	891b      	ldrh	r3, [r3, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <find_volume+0x33e>
 800d7da:	230d      	movs	r3, #13
 800d7dc:	e0a2      	b.n	800d924 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	3334      	adds	r3, #52	; 0x34
 800d7e2:	332c      	adds	r3, #44	; 0x2c
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe fa45 	bl	800bc74 <ld_dword>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d7f8:	e01f      	b.n	800d83a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	891b      	ldrh	r3, [r3, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <find_volume+0x366>
 800d802:	230d      	movs	r3, #13
 800d804:	e08e      	b.n	800d924 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	441a      	add	r2, r3
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d816:	2b02      	cmp	r3, #2
 800d818:	d103      	bne.n	800d822 <find_volume+0x382>
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	e00a      	b.n	800d838 <find_volume+0x398>
 800d822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	085a      	lsrs	r2, r3, #1
 800d82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d838:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	69da      	ldr	r2, [r3, #28]
 800d83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d840:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d844:	0a5b      	lsrs	r3, r3, #9
 800d846:	429a      	cmp	r2, r3
 800d848:	d201      	bcs.n	800d84e <find_volume+0x3ae>
 800d84a:	230d      	movs	r3, #13
 800d84c:	e06a      	b.n	800d924 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	f04f 32ff 	mov.w	r2, #4294967295
 800d854:	615a      	str	r2, [r3, #20]
 800d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d858:	695a      	ldr	r2, [r3, #20]
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	2280      	movs	r2, #128	; 0x80
 800d862:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d868:	2b03      	cmp	r3, #3
 800d86a:	d149      	bne.n	800d900 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	3334      	adds	r3, #52	; 0x34
 800d870:	3330      	adds	r3, #48	; 0x30
 800d872:	4618      	mov	r0, r3
 800d874:	f7fe f9e6 	bl	800bc44 <ld_word>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d140      	bne.n	800d900 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d880:	3301      	adds	r3, #1
 800d882:	4619      	mov	r1, r3
 800d884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d886:	f7fe fbed 	bl	800c064 <move_window>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d137      	bne.n	800d900 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	2200      	movs	r2, #0
 800d894:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d898:	3334      	adds	r3, #52	; 0x34
 800d89a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe f9d0 	bl	800bc44 <ld_word>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d127      	bne.n	800d900 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	3334      	adds	r3, #52	; 0x34
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe f9dd 	bl	800bc74 <ld_dword>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	4b1b      	ldr	r3, [pc, #108]	; (800d92c <find_volume+0x48c>)
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d11e      	bne.n	800d900 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	3334      	adds	r3, #52	; 0x34
 800d8c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe f9d2 	bl	800bc74 <ld_dword>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	4b17      	ldr	r3, [pc, #92]	; (800d930 <find_volume+0x490>)
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d113      	bne.n	800d900 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	3334      	adds	r3, #52	; 0x34
 800d8dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe f9c7 	bl	800bc74 <ld_dword>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	3334      	adds	r3, #52	; 0x34
 800d8f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fe f9bd 	bl	800bc74 <ld_dword>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d906:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d908:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <find_volume+0x494>)
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	b29a      	uxth	r2, r3
 800d910:	4b08      	ldr	r3, [pc, #32]	; (800d934 <find_volume+0x494>)
 800d912:	801a      	strh	r2, [r3, #0]
 800d914:	4b07      	ldr	r3, [pc, #28]	; (800d934 <find_volume+0x494>)
 800d916:	881a      	ldrh	r2, [r3, #0]
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d91c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d91e:	f7fe fb39 	bl	800bf94 <clear_lock>
#endif
	return FR_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3758      	adds	r7, #88	; 0x58
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	41615252 	.word	0x41615252
 800d930:	61417272 	.word	0x61417272
 800d934:	20000148 	.word	0x20000148

0800d938 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d942:	2309      	movs	r3, #9
 800d944:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01c      	beq.n	800d986 <validate+0x4e>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d018      	beq.n	800d986 <validate+0x4e>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d013      	beq.n	800d986 <validate+0x4e>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	889a      	ldrh	r2, [r3, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	88db      	ldrh	r3, [r3, #6]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d10c      	bne.n	800d986 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	4618      	mov	r0, r3
 800d974:	f7fe f8e6 	bl	800bb44 <disk_status>
 800d978:	4603      	mov	r3, r0
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <validate+0x4e>
			res = FR_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <validate+0x5a>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	e000      	b.n	800d994 <validate+0x5c>
 800d992:	2300      	movs	r3, #0
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	6013      	str	r3, [r2, #0]
	return res;
 800d998:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d9b6:	f107 0310 	add.w	r3, r7, #16
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff fcd5 	bl	800d36a <get_ldnumber>
 800d9c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	da01      	bge.n	800d9cc <f_mount+0x28>
 800d9c8:	230b      	movs	r3, #11
 800d9ca:	e02b      	b.n	800da24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d9cc:	4a17      	ldr	r2, [pc, #92]	; (800da2c <f_mount+0x88>)
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d9dc:	69b8      	ldr	r0, [r7, #24]
 800d9de:	f7fe fad9 	bl	800bf94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	490d      	ldr	r1, [pc, #52]	; (800da2c <f_mount+0x88>)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d002      	beq.n	800da0a <f_mount+0x66>
 800da04:	79fb      	ldrb	r3, [r7, #7]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d001      	beq.n	800da0e <f_mount+0x6a>
 800da0a:	2300      	movs	r3, #0
 800da0c:	e00a      	b.n	800da24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800da0e:	f107 010c 	add.w	r1, r7, #12
 800da12:	f107 0308 	add.w	r3, r7, #8
 800da16:	2200      	movs	r2, #0
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff fd41 	bl	800d4a0 <find_volume>
 800da1e:	4603      	mov	r3, r0
 800da20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da22:	7dfb      	ldrb	r3, [r7, #23]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3720      	adds	r7, #32
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	20000144 	.word	0x20000144

0800da30 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800da36:	af00      	add	r7, sp, #0
 800da38:	1d3b      	adds	r3, r7, #4
 800da3a:	6018      	str	r0, [r3, #0]
 800da3c:	463b      	mov	r3, r7
 800da3e:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800da40:	1d3b      	adds	r3, r7, #4
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d101      	bne.n	800da4c <f_opendir+0x1c>
 800da48:	2309      	movs	r3, #9
 800da4a:	e08a      	b.n	800db62 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 800da4c:	1d3b      	adds	r3, r7, #4
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800da54:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800da58:	463b      	mov	r3, r7
 800da5a:	2200      	movs	r2, #0
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff fd1f 	bl	800d4a0 <find_volume>
 800da62:	4603      	mov	r3, r0
 800da64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800da68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d16e      	bne.n	800db4e <f_opendir+0x11e>
		obj->fs = fs;
 800da70:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800da74:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800da78:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800da7a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800da7e:	f107 020c 	add.w	r2, r7, #12
 800da82:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800da84:	463b      	mov	r3, r7
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	1d3b      	adds	r3, r7, #4
 800da8a:	4611      	mov	r1, r2
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f7ff fbfb 	bl	800d288 <follow_path>
 800da92:	4603      	mov	r3, r0
 800da94:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800da98:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d14f      	bne.n	800db40 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800daa0:	1d3b      	adds	r3, r7, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800daa8:	b25b      	sxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	db17      	blt.n	800dade <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800daae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800dab2:	799b      	ldrb	r3, [r3, #6]
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00d      	beq.n	800dad8 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800dabc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800dac0:	1d3b      	adds	r3, r7, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7fe fe7b 	bl	800c7c4 <ld_clust>
 800dace:	4602      	mov	r2, r0
 800dad0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800dad4:	609a      	str	r2, [r3, #8]
 800dad6:	e002      	b.n	800dade <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800dad8:	2305      	movs	r3, #5
 800dada:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800dade:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d12c      	bne.n	800db40 <f_opendir+0x110>
				obj->id = fs->id;
 800dae6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800daea:	88da      	ldrh	r2, [r3, #6]
 800daec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800daf0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800daf2:	1d3b      	adds	r3, r7, #4
 800daf4:	2100      	movs	r1, #0
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	f7fe fd24 	bl	800c544 <dir_sdi>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800db02:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800db06:	2b00      	cmp	r3, #0
 800db08:	d11a      	bne.n	800db40 <f_opendir+0x110>
					if (obj->sclust) {
 800db0a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d011      	beq.n	800db38 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800db14:	1d3b      	adds	r3, r7, #4
 800db16:	2100      	movs	r1, #0
 800db18:	6818      	ldr	r0, [r3, #0]
 800db1a:	f7fe f971 	bl	800be00 <inc_lock>
 800db1e:	4602      	mov	r2, r0
 800db20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db24:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800db26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d107      	bne.n	800db40 <f_opendir+0x110>
 800db30:	2312      	movs	r3, #18
 800db32:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800db36:	e003      	b.n	800db40 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800db38:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db3c:	2200      	movs	r2, #0
 800db3e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800db40:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800db44:	2b04      	cmp	r3, #4
 800db46:	d102      	bne.n	800db4e <f_opendir+0x11e>
 800db48:	2305      	movs	r3, #5
 800db4a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800db4e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <f_opendir+0x12e>
 800db56:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800db5a:	2200      	movs	r2, #0
 800db5c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db5e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800db62:	4618      	mov	r0, r3
 800db64:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f107 0208 	add.w	r2, r7, #8
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fedb 	bl	800d938 <validate>
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db86:	7bfb      	ldrb	r3, [r7, #15]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d110      	bne.n	800dbae <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d006      	beq.n	800dba2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe f9bf 	bl	800bf1c <dec_lock>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	1d3b      	adds	r3, r7, #4
 800dbc2:	6018      	str	r0, [r3, #0]
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800dbc8:	1d3b      	adds	r3, r7, #4
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff feb0 	bl	800d938 <validate>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800dbde:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d139      	bne.n	800dc5a <f_readdir+0xa2>
		if (!fno) {
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d108      	bne.n	800dc00 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dbee:	1d3b      	adds	r3, r7, #4
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	6818      	ldr	r0, [r3, #0]
 800dbf4:	f7fe fca6 	bl	800c544 <dir_sdi>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800dbfe:	e02c      	b.n	800dc5a <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 800dc00:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800dc04:	f107 0208 	add.w	r2, r7, #8
 800dc08:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800dc0a:	1d3b      	adds	r3, r7, #4
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	6818      	ldr	r0, [r3, #0]
 800dc10:	f7fe feed 	bl	800c9ee <dir_read>
 800dc14:	4603      	mov	r3, r0
 800dc16:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800dc1a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d102      	bne.n	800dc28 <f_readdir+0x70>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800dc28:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d114      	bne.n	800dc5a <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800dc30:	463a      	mov	r2, r7
 800dc32:	1d3b      	adds	r3, r7, #4
 800dc34:	6811      	ldr	r1, [r2, #0]
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	f7ff f840 	bl	800ccbc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dc3c:	1d3b      	adds	r3, r7, #4
 800dc3e:	2100      	movs	r1, #0
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	f7fe fcfa 	bl	800c63a <dir_next>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800dc4c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d102      	bne.n	800dc5a <f_readdir+0xa2>
 800dc54:	2300      	movs	r3, #0
 800dc56:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800dc5a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b087      	sub	sp, #28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	4613      	mov	r3, r2
 800dc74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc76:	2301      	movs	r3, #1
 800dc78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc7e:	4b1f      	ldr	r3, [pc, #124]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dc80:	7a5b      	ldrb	r3, [r3, #9]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d131      	bne.n	800dcec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc88:	4b1c      	ldr	r3, [pc, #112]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dc8a:	7a5b      	ldrb	r3, [r3, #9]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4b1a      	ldr	r3, [pc, #104]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dc92:	2100      	movs	r1, #0
 800dc94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc96:	4b19      	ldr	r3, [pc, #100]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dc98:	7a5b      	ldrb	r3, [r3, #9]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	4a17      	ldr	r2, [pc, #92]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dca6:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dca8:	7a5b      	ldrb	r3, [r3, #9]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	461a      	mov	r2, r3
 800dcae:	4b13      	ldr	r3, [pc, #76]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dcb0:	4413      	add	r3, r2
 800dcb2:	79fa      	ldrb	r2, [r7, #7]
 800dcb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcb6:	4b11      	ldr	r3, [pc, #68]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dcb8:	7a5b      	ldrb	r3, [r3, #9]
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	b2d1      	uxtb	r1, r2
 800dcc0:	4a0e      	ldr	r2, [pc, #56]	; (800dcfc <FATFS_LinkDriverEx+0x94>)
 800dcc2:	7251      	strb	r1, [r2, #9]
 800dcc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcc6:	7dbb      	ldrb	r3, [r7, #22]
 800dcc8:	3330      	adds	r3, #48	; 0x30
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	223a      	movs	r2, #58	; 0x3a
 800dcd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	3302      	adds	r3, #2
 800dcdc:	222f      	movs	r2, #47	; 0x2f
 800dcde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	3303      	adds	r3, #3
 800dce4:	2200      	movs	r2, #0
 800dce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dcec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	2000016c 	.word	0x2000016c

0800dd00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	6839      	ldr	r1, [r7, #0]
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff ffaa 	bl	800dc68 <FATFS_LinkDriverEx>
 800dd14:	4603      	mov	r3, r0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b089      	sub	sp, #36	; 0x24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	6039      	str	r1, [r7, #0]
 800dd2a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800dd2c:	88fb      	ldrh	r3, [r7, #6]
 800dd2e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd30:	d802      	bhi.n	800dd38 <ff_convert+0x18>
		c = chr;
 800dd32:	88fb      	ldrh	r3, [r7, #6]
 800dd34:	837b      	strh	r3, [r7, #26]
 800dd36:	e047      	b.n	800ddc8 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d005      	beq.n	800dd4a <ff_convert+0x2a>
			p = oem2uni;
 800dd3e:	4b26      	ldr	r3, [pc, #152]	; (800ddd8 <ff_convert+0xb8>)
 800dd40:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800dd42:	f245 5320 	movw	r3, #21792	; 0x5520
 800dd46:	60bb      	str	r3, [r7, #8]
 800dd48:	e004      	b.n	800dd54 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800dd4a:	4b24      	ldr	r3, [pc, #144]	; (800dddc <ff_convert+0xbc>)
 800dd4c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800dd4e:	f245 5320 	movw	r3, #21792	; 0x5520
 800dd52:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800dd58:	2310      	movs	r3, #16
 800dd5a:	613b      	str	r3, [r7, #16]
 800dd5c:	e023      	b.n	800dda6 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	0fda      	lsrs	r2, r3, #31
 800dd66:	4413      	add	r3, r2
 800dd68:	105b      	asrs	r3, r3, #1
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4413      	add	r3, r2
 800dd70:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	461a      	mov	r2, r3
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	881b      	ldrh	r3, [r3, #0]
 800dd7e:	88fa      	ldrh	r2, [r7, #6]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d014      	beq.n	800ddae <ff_convert+0x8e>
			if (chr > p[i * 2])
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	461a      	mov	r2, r3
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	88fa      	ldrh	r2, [r7, #6]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d902      	bls.n	800dd9c <ff_convert+0x7c>
				li = i;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	60fb      	str	r3, [r7, #12]
 800dd9a:	e001      	b.n	800dda0 <ff_convert+0x80>
			else
				hi = i;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1d8      	bne.n	800dd5e <ff_convert+0x3e>
 800ddac:	e000      	b.n	800ddb0 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800ddae:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d006      	beq.n	800ddc4 <ff_convert+0xa4>
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	3302      	adds	r3, #2
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	e000      	b.n	800ddc6 <ff_convert+0xa6>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800ddc8:	8b7b      	ldrh	r3, [r7, #26]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3724      	adds	r7, #36	; 0x24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	0803bab8 	.word	0x0803bab8
 800dddc:	08026634 	.word	0x08026634

0800dde0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ddea:	88fb      	ldrh	r3, [r7, #6]
 800ddec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddf0:	d201      	bcs.n	800ddf6 <ff_wtoupper+0x16>
 800ddf2:	4b3e      	ldr	r3, [pc, #248]	; (800deec <ff_wtoupper+0x10c>)
 800ddf4:	e000      	b.n	800ddf8 <ff_wtoupper+0x18>
 800ddf6:	4b3e      	ldr	r3, [pc, #248]	; (800def0 <ff_wtoupper+0x110>)
 800ddf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	1c9a      	adds	r2, r3, #2
 800ddfe:	617a      	str	r2, [r7, #20]
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800de04:	8a7b      	ldrh	r3, [r7, #18]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d068      	beq.n	800dedc <ff_wtoupper+0xfc>
 800de0a:	88fa      	ldrh	r2, [r7, #6]
 800de0c:	8a7b      	ldrh	r3, [r7, #18]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d364      	bcc.n	800dedc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	1c9a      	adds	r2, r3, #2
 800de16:	617a      	str	r2, [r7, #20]
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	823b      	strh	r3, [r7, #16]
 800de1c:	8a3b      	ldrh	r3, [r7, #16]
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	81fb      	strh	r3, [r7, #14]
 800de22:	8a3b      	ldrh	r3, [r7, #16]
 800de24:	b2db      	uxtb	r3, r3
 800de26:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800de28:	88fa      	ldrh	r2, [r7, #6]
 800de2a:	8a79      	ldrh	r1, [r7, #18]
 800de2c:	8a3b      	ldrh	r3, [r7, #16]
 800de2e:	440b      	add	r3, r1
 800de30:	429a      	cmp	r2, r3
 800de32:	da49      	bge.n	800dec8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800de34:	89fb      	ldrh	r3, [r7, #14]
 800de36:	2b08      	cmp	r3, #8
 800de38:	d84f      	bhi.n	800deda <ff_wtoupper+0xfa>
 800de3a:	a201      	add	r2, pc, #4	; (adr r2, 800de40 <ff_wtoupper+0x60>)
 800de3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de40:	0800de65 	.word	0x0800de65
 800de44:	0800de77 	.word	0x0800de77
 800de48:	0800de8d 	.word	0x0800de8d
 800de4c:	0800de95 	.word	0x0800de95
 800de50:	0800de9d 	.word	0x0800de9d
 800de54:	0800dea5 	.word	0x0800dea5
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800deb5 	.word	0x0800deb5
 800de60:	0800debd 	.word	0x0800debd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de64:	88fa      	ldrh	r2, [r7, #6]
 800de66:	8a7b      	ldrh	r3, [r7, #18]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	697a      	ldr	r2, [r7, #20]
 800de6e:	4413      	add	r3, r2
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	80fb      	strh	r3, [r7, #6]
 800de74:	e027      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de76:	88fa      	ldrh	r2, [r7, #6]
 800de78:	8a7b      	ldrh	r3, [r7, #18]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	b29b      	uxth	r3, r3
 800de84:	88fa      	ldrh	r2, [r7, #6]
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	80fb      	strh	r3, [r7, #6]
 800de8a:	e01c      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	3b10      	subs	r3, #16
 800de90:	80fb      	strh	r3, [r7, #6]
 800de92:	e018      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800de94:	88fb      	ldrh	r3, [r7, #6]
 800de96:	3b20      	subs	r3, #32
 800de98:	80fb      	strh	r3, [r7, #6]
 800de9a:	e014      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	3b30      	subs	r3, #48	; 0x30
 800dea0:	80fb      	strh	r3, [r7, #6]
 800dea2:	e010      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dea4:	88fb      	ldrh	r3, [r7, #6]
 800dea6:	3b1a      	subs	r3, #26
 800dea8:	80fb      	strh	r3, [r7, #6]
 800deaa:	e00c      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	3308      	adds	r3, #8
 800deb0:	80fb      	strh	r3, [r7, #6]
 800deb2:	e008      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800deb4:	88fb      	ldrh	r3, [r7, #6]
 800deb6:	3b50      	subs	r3, #80	; 0x50
 800deb8:	80fb      	strh	r3, [r7, #6]
 800deba:	e004      	b.n	800dec6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800debc:	88fb      	ldrh	r3, [r7, #6]
 800debe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dec2:	80fb      	strh	r3, [r7, #6]
 800dec4:	bf00      	nop
			}
			break;
 800dec6:	e008      	b.n	800deda <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dec8:	89fb      	ldrh	r3, [r7, #14]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d195      	bne.n	800ddfa <ff_wtoupper+0x1a>
 800dece:	8a3b      	ldrh	r3, [r7, #16]
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	4413      	add	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ded8:	e78f      	b.n	800ddfa <ff_wtoupper+0x1a>
			break;
 800deda:	bf00      	nop
	}

	return chr;
 800dedc:	88fb      	ldrh	r3, [r7, #6]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	08050f3c 	.word	0x08050f3c
 800def0:	08051130 	.word	0x08051130

0800def4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800def8:	f005 fb04 	bl	8013504 <touchgfx_init>
}
 800defc:	bf00      	nop
 800defe:	bd80      	pop	{r7, pc}

0800df00 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800df04:	f005 fb28 	bl	8013558 <touchgfx_taskEntry>
}
 800df08:	bf00      	nop
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
    {
 800df14:	4a04      	ldr	r2, [pc, #16]	; (800df28 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	601a      	str	r2, [r3, #0]
    }
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4618      	mov	r0, r3
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	08051208 	.word	0x08051208

0800df2c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
    }
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ffe9 	bl	800df0c <_ZN8touchgfx12FontProviderD1Ev>
 800df3a:	2104      	movs	r1, #4
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f016 ff39 	bl	8024db4 <_ZdlPvj>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	460b      	mov	r3, r1
 800df56:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800df58:	887b      	ldrh	r3, [r7, #2]
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d81e      	bhi.n	800df9c <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800df5e:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800df60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800df7f 	.word	0x0800df7f
 800df6c:	0800df89 	.word	0x0800df89
 800df70:	0800df93 	.word	0x0800df93
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800df74:	f003 fda8 	bl	8011ac8 <_ZN17TypedTextDatabase8getFontsEv>
 800df78:	4603      	mov	r3, r0
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	e00f      	b.n	800df9e <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800df7e:	f003 fda3 	bl	8011ac8 <_ZN17TypedTextDatabase8getFontsEv>
 800df82:	4603      	mov	r3, r0
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	e00a      	b.n	800df9e <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800df88:	f003 fd9e 	bl	8011ac8 <_ZN17TypedTextDatabase8getFontsEv>
 800df8c:	4603      	mov	r3, r0
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	e005      	b.n	800df9e <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::TYPOGRAPHY_00:
        // SIMYOU_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800df92:	f003 fd99 	bl	8011ac8 <_ZN17TypedTextDatabase8getFontsEv>
 800df96:	4603      	mov	r3, r0
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	e000      	b.n	800df9e <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800df9c:	2300      	movs	r3, #0
    }
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop

0800dfa8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // SIMYOU_TTF_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	4a05      	ldr	r2, [pc, #20]	; (800dfc8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff ffa7 	bl	800df0c <_ZN8touchgfx12FontProviderD1Ev>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	080511f4 	.word	0x080511f4

0800dfcc <_ZN23ApplicationFontProviderD0Ev>:
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff ffe7 	bl	800dfa8 <_ZN23ApplicationFontProviderD1Ev>
 800dfda:	2104      	movs	r1, #4
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f016 fee9 	bl	8024db4 <_ZdlPvj>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
    {
 800dff4:	4a04      	ldr	r2, [pc, #16]	; (800e008 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	601a      	str	r2, [r3, #0]
    }
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4618      	mov	r0, r3
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	08051b34 	.word	0x08051b34

0800e00c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
    }
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff ffe9 	bl	800dfec <_ZN8touchgfx4FontD1Ev>
 800e01a:	2110      	movs	r1, #16
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f016 fec9 	bl	8024db4 <_ZdlPvj>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4618      	mov	r0, r3
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e02c:	b590      	push	{r4, r7, lr}
 800e02e:	b087      	sub	sp, #28
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800e038:	887b      	ldrh	r3, [r7, #2]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	e010      	b.n	800e064 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3308      	adds	r3, #8
 800e050:	681c      	ldr	r4, [r3, #0]
 800e052:	f107 030f 	add.w	r3, r7, #15
 800e056:	f107 0210 	add.w	r2, r7, #16
 800e05a:	8879      	ldrh	r1, [r7, #2]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	47a0      	blx	r4
 800e060:	6178      	str	r0, [r7, #20]
        return glyph;
 800e062:	697b      	ldr	r3, [r7, #20]
    }
 800e064:	4618      	mov	r0, r3
 800e066:	371c      	adds	r7, #28
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd90      	pop	{r4, r7, pc}

0800e06c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	895b      	ldrh	r3, [r3, #10]
    }
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	899b      	ldrh	r3, [r3, #12]
    }
 800e090:	4618      	mov	r0, r3
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	889b      	ldrh	r3, [r3, #4]
    }
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	889a      	ldrh	r2, [r3, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	799b      	ldrb	r3, [r3, #6]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	4413      	add	r3, r2
 800e0c8:	b29b      	uxth	r3, r3
    }
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800e0d6:	b480      	push	{r7}
 800e0d8:	b083      	sub	sp, #12
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	79db      	ldrb	r3, [r3, #7]
 800e0e2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e0e6:	b2db      	uxtb	r3, r3
    }
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	79db      	ldrb	r3, [r3, #7]
 800e100:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e104:	b2db      	uxtb	r3, r3
    }
 800e106:	4618      	mov	r0, r3
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
	...

0800e114 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	4a05      	ldr	r2, [pc, #20]	; (800e134 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4618      	mov	r0, r3
 800e126:	f7ff ff61 	bl	800dfec <_ZN8touchgfx4FontD1Ev>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4618      	mov	r0, r3
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	080538e8 	.word	0x080538e8

0800e138 <_ZN8touchgfx9ConstFontD0Ev>:
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7ff ffe7 	bl	800e114 <_ZN8touchgfx9ConstFontD1Ev>
 800e146:	2118      	movs	r1, #24
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f016 fe33 	bl	8024db4 <_ZdlPvj>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	4a05      	ldr	r2, [pc, #20]	; (800e178 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff ffd3 	bl	800e114 <_ZN8touchgfx9ConstFontD1Ev>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	0805122c 	.word	0x0805122c

0800e17c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff ffe7 	bl	800e158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e18a:	2124      	movs	r1, #36	; 0x24
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f016 fe11 	bl	8024db4 <_ZdlPvj>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
    {
 800e1a4:	4a04      	ldr	r2, [pc, #16]	; (800e1b8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	601a      	str	r2, [r3, #0]
    }
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	0805121c 	.word	0x0805121c

0800e1bc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
    }
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7ff ffe9 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>
 800e1ca:	2108      	movs	r1, #8
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f016 fdf1 	bl	8024db4 <_ZdlPvj>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a1b      	ldr	r3, [r3, #32]
    }
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08c      	sub	sp, #48	; 0x30
 800e1f8:	af08      	add	r7, sp, #32
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4611      	mov	r1, r2
 800e200:	461a      	mov	r2, r3
 800e202:	460b      	mov	r3, r1
 800e204:	80fb      	strh	r3, [r7, #6]
 800e206:	4613      	mov	r3, r2
 800e208:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	88b9      	ldrh	r1, [r7, #4]
 800e20e:	88fa      	ldrh	r2, [r7, #6]
 800e210:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e212:	9306      	str	r3, [sp, #24]
 800e214:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e216:	9305      	str	r3, [sp, #20]
 800e218:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e21c:	9304      	str	r3, [sp, #16]
 800e21e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e222:	9303      	str	r3, [sp, #12]
 800e224:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e228:	9302      	str	r3, [sp, #8]
 800e22a:	7f3b      	ldrb	r3, [r7, #28]
 800e22c:	9301      	str	r3, [sp, #4]
 800e22e:	7e3b      	ldrb	r3, [r7, #24]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	460b      	mov	r3, r1
 800e234:	68b9      	ldr	r1, [r7, #8]
 800e236:	f009 fed1 	bl	8017fdc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e23a:	4a08      	ldr	r2, [pc, #32]	; (800e25c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e244:	619a      	str	r2, [r3, #24]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24a:	61da      	str	r2, [r3, #28]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e250:	621a      	str	r2, [r3, #32]
{
}
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	0805122c 	.word	0x0805122c

0800e260 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	889b      	ldrh	r3, [r3, #4]
 800e274:	0adb      	lsrs	r3, r3, #11
 800e276:	b29b      	uxth	r3, r3
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	4413      	add	r3, r2
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4413      	add	r3, r2
}
 800e286:	4618      	mov	r0, r3
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e292:	b480      	push	{r7}
 800e294:	b089      	sub	sp, #36	; 0x24
 800e296:	af00      	add	r7, sp, #0
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	460b      	mov	r3, r1
 800e29c:	607a      	str	r2, [r7, #4]
 800e29e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	7b1b      	ldrb	r3, [r3, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d101      	bne.n	800e2b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e030      	b.n	800e314 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	69da      	ldr	r2, [r3, #28]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	7b5b      	ldrb	r3, [r3, #13]
 800e2be:	021b      	lsls	r3, r3, #8
 800e2c0:	b21b      	sxth	r3, r3
 800e2c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2c6:	b219      	sxth	r1, r3
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	7adb      	ldrb	r3, [r3, #11]
 800e2cc:	b21b      	sxth	r3, r3
 800e2ce:	430b      	orrs	r3, r1
 800e2d0:	b21b      	sxth	r3, r3
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	7b1b      	ldrb	r3, [r3, #12]
 800e2de:	837b      	strh	r3, [r7, #26]
 800e2e0:	8b7b      	ldrh	r3, [r7, #26]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d015      	beq.n	800e312 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	897a      	ldrh	r2, [r7, #10]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d103      	bne.n	800e2f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e2f6:	e00d      	b.n	800e314 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	897a      	ldrh	r2, [r7, #10]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d306      	bcc.n	800e310 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e302:	8b7b      	ldrh	r3, [r7, #26]
 800e304:	3b01      	subs	r3, #1
 800e306:	837b      	strh	r3, [r7, #26]
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	3304      	adds	r3, #4
 800e30c:	61fb      	str	r3, [r7, #28]
 800e30e:	e7e7      	b.n	800e2e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e310:	bf00      	nop
        }
    }
    return 0;
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3724      	adds	r7, #36	; 0x24
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <__tcf_0>:

touchgfx::GeneratedFont& getFont_SIMYOU_TTF_14_4bpp();

touchgfx::GeneratedFont& getFont_SIMYOU_TTF_14_4bpp()
{
    static touchgfx::GeneratedFont SIMYOU_TTF_14_4bpp(glyphs_SIMYOU_TTF_14_4bpp, 23, 14, 3, 4, 1, 0, 0, unicodes_SIMYOU_TTF_14_4bpp, kerning_SIMYOU_TTF_14_4bpp, 63, 0, 0);
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
 800e324:	4801      	ldr	r0, [pc, #4]	; (800e32c <__tcf_0+0xc>)
 800e326:	f7ff ff17 	bl	800e158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	20000178 	.word	0x20000178

0800e330 <_Z26getFont_SIMYOU_TTF_14_4bppv>:
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08a      	sub	sp, #40	; 0x28
 800e334:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont SIMYOU_TTF_14_4bpp(glyphs_SIMYOU_TTF_14_4bpp, 23, 14, 3, 4, 1, 0, 0, unicodes_SIMYOU_TTF_14_4bpp, kerning_SIMYOU_TTF_14_4bpp, 63, 0, 0);
 800e336:	4b1e      	ldr	r3, [pc, #120]	; (800e3b0 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	f3bf 8f5b 	dmb	ish
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	f003 0301 	and.w	r3, r3, #1
 800e344:	2b00      	cmp	r3, #0
 800e346:	bf0c      	ite	eq
 800e348:	2301      	moveq	r3, #1
 800e34a:	2300      	movne	r3, #0
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d02a      	beq.n	800e3a8 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x78>
 800e352:	4817      	ldr	r0, [pc, #92]	; (800e3b0 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e354:	f016 fd30 	bl	8024db8 <__cxa_guard_acquire>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bf14      	ite	ne
 800e35e:	2301      	movne	r3, #1
 800e360:	2300      	moveq	r3, #0
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d01f      	beq.n	800e3a8 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x78>
 800e368:	2300      	movs	r3, #0
 800e36a:	9309      	str	r3, [sp, #36]	; 0x24
 800e36c:	2300      	movs	r3, #0
 800e36e:	9308      	str	r3, [sp, #32]
 800e370:	233f      	movs	r3, #63	; 0x3f
 800e372:	9307      	str	r3, [sp, #28]
 800e374:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x84>)
 800e376:	9306      	str	r3, [sp, #24]
 800e378:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x88>)
 800e37a:	9305      	str	r3, [sp, #20]
 800e37c:	2300      	movs	r3, #0
 800e37e:	9304      	str	r3, [sp, #16]
 800e380:	2300      	movs	r3, #0
 800e382:	9303      	str	r3, [sp, #12]
 800e384:	2301      	movs	r3, #1
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	2304      	movs	r3, #4
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	2303      	movs	r3, #3
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	230e      	movs	r3, #14
 800e392:	2217      	movs	r2, #23
 800e394:	4909      	ldr	r1, [pc, #36]	; (800e3bc <_Z26getFont_SIMYOU_TTF_14_4bppv+0x8c>)
 800e396:	480a      	ldr	r0, [pc, #40]	; (800e3c0 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x90>)
 800e398:	f7ff ff2c 	bl	800e1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e39c:	4804      	ldr	r0, [pc, #16]	; (800e3b0 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x80>)
 800e39e:	f016 fd17 	bl	8024dd0 <__cxa_guard_release>
 800e3a2:	4808      	ldr	r0, [pc, #32]	; (800e3c4 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x94>)
 800e3a4:	f016 fd50 	bl	8024e48 <atexit>
    return SIMYOU_TTF_14_4bpp;
 800e3a8:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <_Z26getFont_SIMYOU_TTF_14_4bppv+0x90>)
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	2000019c 	.word	0x2000019c
 800e3b4:	08055be4 	.word	0x08055be4
 800e3b8:	08051278 	.word	0x08051278
 800e3bc:	080559ac 	.word	0x080559ac
 800e3c0:	20000178 	.word	0x20000178
 800e3c4:	0800e321 	.word	0x0800e321

0800e3c8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__tcf_0+0xc>)
 800e3ce:	f7ff fec3 	bl	800e158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	200001a0 	.word	0x200001a0

0800e3d8 <_Z23getFont_verdana_10_4bppv>:
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08a      	sub	sp, #40	; 0x28
 800e3dc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800e3de:	4b1e      	ldr	r3, [pc, #120]	; (800e458 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f3bf 8f5b 	dmb	ish
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bf0c      	ite	eq
 800e3f0:	2301      	moveq	r3, #1
 800e3f2:	2300      	movne	r3, #0
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d02a      	beq.n	800e450 <_Z23getFont_verdana_10_4bppv+0x78>
 800e3fa:	4817      	ldr	r0, [pc, #92]	; (800e458 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e3fc:	f016 fcdc 	bl	8024db8 <__cxa_guard_acquire>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	bf14      	ite	ne
 800e406:	2301      	movne	r3, #1
 800e408:	2300      	moveq	r3, #0
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01f      	beq.n	800e450 <_Z23getFont_verdana_10_4bppv+0x78>
 800e410:	2300      	movs	r3, #0
 800e412:	9309      	str	r3, [sp, #36]	; 0x24
 800e414:	2300      	movs	r3, #0
 800e416:	9308      	str	r3, [sp, #32]
 800e418:	233f      	movs	r3, #63	; 0x3f
 800e41a:	9307      	str	r3, [sp, #28]
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <_Z23getFont_verdana_10_4bppv+0x84>)
 800e41e:	9306      	str	r3, [sp, #24]
 800e420:	4b0f      	ldr	r3, [pc, #60]	; (800e460 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e422:	9305      	str	r3, [sp, #20]
 800e424:	2300      	movs	r3, #0
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	2300      	movs	r3, #0
 800e42a:	9303      	str	r3, [sp, #12]
 800e42c:	2301      	movs	r3, #1
 800e42e:	9302      	str	r3, [sp, #8]
 800e430:	2304      	movs	r3, #4
 800e432:	9301      	str	r3, [sp, #4]
 800e434:	2300      	movs	r3, #0
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	230a      	movs	r3, #10
 800e43a:	2201      	movs	r2, #1
 800e43c:	4909      	ldr	r1, [pc, #36]	; (800e464 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e43e:	480a      	ldr	r0, [pc, #40]	; (800e468 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e440:	f7ff fed8 	bl	800e1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e444:	4804      	ldr	r0, [pc, #16]	; (800e458 <_Z23getFont_verdana_10_4bppv+0x80>)
 800e446:	f016 fcc3 	bl	8024dd0 <__cxa_guard_release>
 800e44a:	4808      	ldr	r0, [pc, #32]	; (800e46c <_Z23getFont_verdana_10_4bppv+0x94>)
 800e44c:	f016 fcfc 	bl	8024e48 <atexit>
    return verdana_10_4bpp;
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800e452:	4618      	mov	r0, r3
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	200001c4 	.word	0x200001c4
 800e45c:	08055be8 	.word	0x08055be8
 800e460:	080512c8 	.word	0x080512c8
 800e464:	08055af0 	.word	0x08055af0
 800e468:	200001a0 	.word	0x200001a0
 800e46c:	0800e3c9 	.word	0x0800e3c9

0800e470 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
 800e474:	4801      	ldr	r0, [pc, #4]	; (800e47c <__tcf_0+0xc>)
 800e476:	f7ff fe6f 	bl	800e158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	200001c8 	.word	0x200001c8

0800e480 <_Z23getFont_verdana_20_4bppv>:
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	; 0x28
 800e484:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800e486:	4b1e      	ldr	r3, [pc, #120]	; (800e500 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	f3bf 8f5b 	dmb	ish
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	f003 0301 	and.w	r3, r3, #1
 800e494:	2b00      	cmp	r3, #0
 800e496:	bf0c      	ite	eq
 800e498:	2301      	moveq	r3, #1
 800e49a:	2300      	movne	r3, #0
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d02a      	beq.n	800e4f8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e4a2:	4817      	ldr	r0, [pc, #92]	; (800e500 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e4a4:	f016 fc88 	bl	8024db8 <__cxa_guard_acquire>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	bf14      	ite	ne
 800e4ae:	2301      	movne	r3, #1
 800e4b0:	2300      	moveq	r3, #0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01f      	beq.n	800e4f8 <_Z23getFont_verdana_20_4bppv+0x78>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e4bc:	2300      	movs	r3, #0
 800e4be:	9308      	str	r3, [sp, #32]
 800e4c0:	233f      	movs	r3, #63	; 0x3f
 800e4c2:	9307      	str	r3, [sp, #28]
 800e4c4:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <_Z23getFont_verdana_20_4bppv+0x84>)
 800e4c6:	9306      	str	r3, [sp, #24]
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e4ca:	9305      	str	r3, [sp, #20]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	9303      	str	r3, [sp, #12]
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	9302      	str	r3, [sp, #8]
 800e4d8:	2304      	movs	r3, #4
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	2304      	movs	r3, #4
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	2314      	movs	r3, #20
 800e4e2:	2209      	movs	r2, #9
 800e4e4:	4909      	ldr	r1, [pc, #36]	; (800e50c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e4e6:	480a      	ldr	r0, [pc, #40]	; (800e510 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e4e8:	f7ff fe84 	bl	800e1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e4ec:	4804      	ldr	r0, [pc, #16]	; (800e500 <_Z23getFont_verdana_20_4bppv+0x80>)
 800e4ee:	f016 fc6f 	bl	8024dd0 <__cxa_guard_release>
 800e4f2:	4808      	ldr	r0, [pc, #32]	; (800e514 <_Z23getFont_verdana_20_4bppv+0x94>)
 800e4f4:	f016 fca8 	bl	8024e48 <atexit>
    return verdana_20_4bpp;
 800e4f8:	4b05      	ldr	r3, [pc, #20]	; (800e510 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	200001ec 	.word	0x200001ec
 800e504:	08055bec 	.word	0x08055bec
 800e508:	080512cc 	.word	0x080512cc
 800e50c:	08055b00 	.word	0x08055b00
 800e510:	200001c8 	.word	0x200001c8
 800e514:	0800e471 	.word	0x0800e471

0800e518 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	4801      	ldr	r0, [pc, #4]	; (800e524 <__tcf_0+0xc>)
 800e51e:	f7ff fe1b 	bl	800e158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e522:	bd80      	pop	{r7, pc}
 800e524:	200001f0 	.word	0x200001f0

0800e528 <_Z23getFont_verdana_40_4bppv>:
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b08a      	sub	sp, #40	; 0x28
 800e52c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800e52e:	4b1e      	ldr	r3, [pc, #120]	; (800e5a8 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	f3bf 8f5b 	dmb	ish
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	bf0c      	ite	eq
 800e540:	2301      	moveq	r3, #1
 800e542:	2300      	movne	r3, #0
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d02a      	beq.n	800e5a0 <_Z23getFont_verdana_40_4bppv+0x78>
 800e54a:	4817      	ldr	r0, [pc, #92]	; (800e5a8 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e54c:	f016 fc34 	bl	8024db8 <__cxa_guard_acquire>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	bf14      	ite	ne
 800e556:	2301      	movne	r3, #1
 800e558:	2300      	moveq	r3, #0
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01f      	beq.n	800e5a0 <_Z23getFont_verdana_40_4bppv+0x78>
 800e560:	2300      	movs	r3, #0
 800e562:	9309      	str	r3, [sp, #36]	; 0x24
 800e564:	2300      	movs	r3, #0
 800e566:	9308      	str	r3, [sp, #32]
 800e568:	233f      	movs	r3, #63	; 0x3f
 800e56a:	9307      	str	r3, [sp, #28]
 800e56c:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <_Z23getFont_verdana_40_4bppv+0x84>)
 800e56e:	9306      	str	r3, [sp, #24]
 800e570:	4b0f      	ldr	r3, [pc, #60]	; (800e5b0 <_Z23getFont_verdana_40_4bppv+0x88>)
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	2300      	movs	r3, #0
 800e576:	9304      	str	r3, [sp, #16]
 800e578:	2300      	movs	r3, #0
 800e57a:	9303      	str	r3, [sp, #12]
 800e57c:	2301      	movs	r3, #1
 800e57e:	9302      	str	r3, [sp, #8]
 800e580:	2304      	movs	r3, #4
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	2308      	movs	r3, #8
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	2328      	movs	r3, #40	; 0x28
 800e58a:	2207      	movs	r2, #7
 800e58c:	4909      	ldr	r1, [pc, #36]	; (800e5b4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e58e:	480a      	ldr	r0, [pc, #40]	; (800e5b8 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e590:	f7ff fe30 	bl	800e1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e594:	4804      	ldr	r0, [pc, #16]	; (800e5a8 <_Z23getFont_verdana_40_4bppv+0x80>)
 800e596:	f016 fc1b 	bl	8024dd0 <__cxa_guard_release>
 800e59a:	4808      	ldr	r0, [pc, #32]	; (800e5bc <_Z23getFont_verdana_40_4bppv+0x94>)
 800e59c:	f016 fc54 	bl	8024e48 <atexit>
    return verdana_40_4bpp;
 800e5a0:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20000214 	.word	0x20000214
 800e5ac:	08055bf0 	.word	0x08055bf0
 800e5b0:	080512d0 	.word	0x080512d0
 800e5b4:	08055b80 	.word	0x08055b80
 800e5b8:	200001f0 	.word	0x200001f0
 800e5bc:	0800e519 	.word	0x0800e519

0800e5c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	80da      	strh	r2, [r3, #6]
    }
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e606:	b480      	push	{r7}
 800e608:	b085      	sub	sp, #20
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	60f8      	str	r0, [r7, #12]
 800e60e:	4608      	mov	r0, r1
 800e610:	4611      	mov	r1, r2
 800e612:	461a      	mov	r2, r3
 800e614:	4603      	mov	r3, r0
 800e616:	817b      	strh	r3, [r7, #10]
 800e618:	460b      	mov	r3, r1
 800e61a:	813b      	strh	r3, [r7, #8]
 800e61c:	4613      	mov	r3, r2
 800e61e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	897a      	ldrh	r2, [r7, #10]
 800e624:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	893a      	ldrh	r2, [r7, #8]
 800e62a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	88fa      	ldrh	r2, [r7, #6]
 800e630:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	8b3a      	ldrh	r2, [r7, #24]
 800e636:	80da      	strh	r2, [r3, #6]
    }
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e646:	b480      	push	{r7}
 800e648:	b083      	sub	sp, #12
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	6039      	str	r1, [r7, #0]
    {
    }
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
    {
    }
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	6039      	str	r1, [r7, #0]
    {
    }
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e694:	bf00      	nop
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    {
    }
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
    {
    }
 800e6bc:	bf00      	nop
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
    {
 800e6d0:	4a04      	ldr	r2, [pc, #16]	; (800e6e4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	601a      	str	r2, [r3, #0]
    }
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	08051594 	.word	0x08051594

0800e6e8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
    }
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff ffe9 	bl	800e6c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e6f6:	2104      	movs	r1, #4
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f016 fb5b 	bl	8024db4 <_ZdlPvj>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	70fb      	strb	r3, [r7, #3]
    {
    }
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e732:	6810      	ldr	r0, [r2, #0]
 800e734:	6851      	ldr	r1, [r2, #4]
 800e736:	c303      	stmia	r3!, {r0, r1}
    };
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    {
 800e74c:	4a04      	ldr	r2, [pc, #16]	; (800e760 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	601a      	str	r2, [r3, #0]
    }
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4618      	mov	r0, r3
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	0805157c 	.word	0x0805157c

0800e764 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
    }
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7ff ffe9 	bl	800e744 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e772:	2104      	movs	r1, #4
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f016 fb1d 	bl	8024db4 <_ZdlPvj>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4618      	mov	r0, r3
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af02      	add	r7, sp, #8
 800e78a:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800e78c:	4a13      	ldr	r2, [pc, #76]	; (800e7dc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	601a      	str	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	1d18      	adds	r0, r3, #4
 800e796:	2300      	movs	r3, #0
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	2300      	movs	r3, #0
 800e79c:	2200      	movs	r2, #0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	f7ff ff31 	bl	800e606 <_ZN8touchgfx4RectC1Essss>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	330c      	adds	r3, #12
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff ff15 	bl	800e5d8 <_ZN8touchgfx4RectC1Ev>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	615a      	str	r2, [r3, #20]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	619a      	str	r2, [r3, #24]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	61da      	str	r2, [r3, #28]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	08053880 	.word	0x08053880

0800e7e0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
    {
 800e7e8:	4a04      	ldr	r2, [pc, #16]	; (800e7fc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	601a      	str	r2, [r3, #0]
    }
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	08053880 	.word	0x08053880

0800e800 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
    }
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff ffe9 	bl	800e7e0 <_ZN8touchgfx8DrawableD1Ev>
 800e80e:	2128      	movs	r1, #40	; 0x28
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f016 facf 	bl	8024db4 <_ZdlPvj>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	3304      	adds	r3, #4
    }
 800e82c:	4618      	mov	r0, r3
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	4608      	mov	r0, r1
 800e842:	4611      	mov	r1, r2
 800e844:	461a      	mov	r2, r3
 800e846:	4603      	mov	r3, r0
 800e848:	817b      	strh	r3, [r7, #10]
 800e84a:	460b      	mov	r3, r1
 800e84c:	813b      	strh	r3, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3334      	adds	r3, #52	; 0x34
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e85e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	4798      	blx	r3
        setWidth(width);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3338      	adds	r3, #56	; 0x38
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e872:	4611      	mov	r1, r2
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	4798      	blx	r3
        setHeight(height);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	333c      	adds	r3, #60	; 0x3c
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e884:	4611      	mov	r1, r2
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	4798      	blx	r3
    }
 800e88a:	bf00      	nop
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	887a      	ldrh	r2, [r7, #2]
 800e8bc:	809a      	strh	r2, [r3, #4]
    }
 800e8be:	bf00      	nop
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	887a      	ldrh	r2, [r7, #2]
 800e8da:	80da      	strh	r2, [r3, #6]
    }
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	807b      	strh	r3, [r7, #2]
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	332c      	adds	r3, #44	; 0x2c
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e904:	4611      	mov	r1, r2
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4798      	blx	r3
        setY(y);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3330      	adds	r3, #48	; 0x30
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e916:	4611      	mov	r1, r2
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	4798      	blx	r3
    }
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	887a      	ldrh	r2, [r7, #2]
 800e934:	811a      	strh	r2, [r3, #8]
    }
 800e936:	bf00      	nop
 800e938:	370c      	adds	r7, #12
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e942:	b480      	push	{r7}
 800e944:	b083      	sub	sp, #12
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	887a      	ldrh	r2, [r7, #2]
 800e952:	815a      	strh	r2, [r3, #10]
    }
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    {
    }
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
    {
    }
 800e97e:	bf00      	nop
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800e98a:	b480      	push	{r7}
 800e98c:	b083      	sub	sp, #12
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
    {
    }
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
    {
    }
 800e9aa:	bf00      	nop
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
    {
    }
 800e9be:	bf00      	nop
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b082      	sub	sp, #8
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
 800ea06:	460b      	mov	r3, r1
 800ea08:	807b      	strh	r3, [r7, #2]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	3354      	adds	r3, #84	; 0x54
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	8879      	ldrh	r1, [r7, #2]
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	1a8a      	subs	r2, r1, r2
 800ea22:	b292      	uxth	r2, r2
 800ea24:	b210      	sxth	r0, r2
 800ea26:	8839      	ldrh	r1, [r7, #0]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ea2e:	b292      	uxth	r2, r2
 800ea30:	1a8a      	subs	r2, r1, r2
 800ea32:	b292      	uxth	r2, r2
 800ea34:	b212      	sxth	r2, r2
 800ea36:	4601      	mov	r1, r0
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	4798      	blx	r3
    }
 800ea3c:	bf00      	nop
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea52:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea5a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea62:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff ffe1 	bl	800ea44 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	601a      	str	r2, [r3, #0]
    }
 800ea90:	bf00      	nop
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ea98:	b480      	push	{r7}
 800ea9a:	af00      	add	r7, sp, #0
    {
        return instance;
 800ea9c:	4b03      	ldr	r3, [pc, #12]	; (800eaac <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
    }
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	20001358 	.word	0x20001358

0800eab0 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800eab0:	b480      	push	{r7}
 800eab2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800eab4:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800eac0:	4b08      	ldr	r3, [pc, #32]	; (800eae4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800eaca:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead0:	e002      	b.n	800ead8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800ead2:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	689b      	ldr	r3, [r3, #8]
        }
    }
 800ead8:	4618      	mov	r0, r3
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	20001358 	.word	0x20001358

0800eae8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800eaf0:	4a07      	ldr	r2, [pc, #28]	; (800eb10 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	605a      	str	r2, [r3, #4]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	721a      	strb	r2, [r3, #8]
    {
    }
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	08051558 	.word	0x08051558

0800eb14 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    {
 800eb1c:	4a04      	ldr	r2, [pc, #16]	; (800eb30 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	601a      	str	r2, [r3, #0]
    }
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	08051558 	.word	0x08051558

0800eb34 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
    }
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff ffe9 	bl	800eb14 <_ZN8touchgfx10TransitionD1Ev>
 800eb42:	210c      	movs	r1, #12
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f016 f935 	bl	8024db4 <_ZdlPvj>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
    {
    }
 800eb5c:	bf00      	nop
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
    {
    }
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
    {
    }
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800eb98:	f008 fc96 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	6813      	ldr	r3, [r2, #0]
 800eba0:	3330      	adds	r3, #48	; 0x30
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4610      	mov	r0, r2
 800eba6:	4798      	blx	r3
    }
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	683a      	ldr	r2, [r7, #0]
 800ebbe:	605a      	str	r2, [r3, #4]
    }
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	4a05      	ldr	r2, [pc, #20]	; (800ebec <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fd73 	bl	800e6c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	08053790 	.word	0x08053790

0800ebf0 <_ZN8touchgfx11ApplicationD0Ev>:
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff ffe7 	bl	800ebcc <_ZN8touchgfx11ApplicationD1Ev>
 800ebfe:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f016 f8d6 	bl	8024db4 <_ZdlPvj>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
	...

0800ec14 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f008 fc72 	bl	8017508 <_ZN8touchgfx11ApplicationC1Ev>
 800ec24:	4a09      	ldr	r2, [pc, #36]	; (800ec4c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a04      	ldr	r2, [pc, #16]	; (800ec50 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ec3e:	6013      	str	r3, [r2, #0]
    }
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08051514 	.word	0x08051514
 800ec50:	200013c4 	.word	0x200013c4

0800ec54 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f804 	bl	800ec6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00f      	beq.n	800ec9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	330c      	adds	r3, #12
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4610      	mov	r0, r2
 800ec90:	4798      	blx	r3
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e000      	b.n	800ec9e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00e      	beq.n	800ecc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	3308      	adds	r3, #8
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4610      	mov	r0, r2
 800ecb6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	601a      	str	r2, [r3, #0]
    }
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	4a05      	ldr	r2, [pc, #20]	; (800ed04 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff ff69 	bl	800ebcc <_ZN8touchgfx11ApplicationD1Ev>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	08051514 	.word	0x08051514

0800ed08 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7ff ffe7 	bl	800ece4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ed16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f016 f84a 	bl	8024db4 <_ZdlPvj>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
	...

0800ed2c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	4a08      	ldr	r2, [pc, #32]	; (800ed58 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ed40:	4618      	mov	r0, r3
 800ed42:	f001 f883 	bl	800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff ffcb 	bl	800ece4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	080514b8 	.word	0x080514b8

0800ed5c <_ZN23FrontendApplicationBaseD0Ev>:
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff ffe1 	bl	800ed2c <_ZN23FrontendApplicationBaseD1Ev>
 800ed6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f016 f820 	bl	8024db4 <_ZdlPvj>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4618      	mov	r0, r3
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ed7e:	b480      	push	{r7}
 800ed80:	b083      	sub	sp, #12
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	721a      	strb	r2, [r3, #8]
    }
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	607b      	str	r3, [r7, #4]
 800eda2:	460b      	mov	r3, r1
 800eda4:	817b      	strh	r3, [r7, #10]
 800eda6:	4613      	mov	r3, r2
 800eda8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff fe0c 	bl	800e9ca <_ZNK8touchgfx8Drawable9isVisibleEv>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d008      	beq.n	800edca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff fe12 	bl	800e9e4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e000      	b.n	800edcc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800edca:	2300      	movs	r3, #0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	601a      	str	r2, [r3, #0]
        }
    }
 800edd6:	bf00      	nop
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800edde:	b480      	push	{r7}
 800ede0:	b083      	sub	sp, #12
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	605a      	str	r2, [r3, #4]
    }
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
	...

0800edfc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fcbc 	bl	800e784 <_ZN8touchgfx8DrawableC1Ev>
 800ee0c:	4a03      	ldr	r2, [pc, #12]	; (800ee1c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	0805142c 	.word	0x0805142c

0800ee20 <_ZN8touchgfx6WidgetD1Ev>:
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	4a05      	ldr	r2, [pc, #20]	; (800ee40 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff fcd5 	bl	800e7e0 <_ZN8touchgfx8DrawableD1Ev>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	0805142c 	.word	0x0805142c

0800ee44 <_ZN8touchgfx6WidgetD0Ev>:
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ffe7 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 800ee52:	2128      	movs	r1, #40	; 0x28
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f015 ffad 	bl	8024db4 <_ZdlPvj>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff fece 	bl	800ec14 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ee78:	4a13      	ldr	r2, [pc, #76]	; (800eec8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	601a      	str	r2, [r3, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 f92b 	bl	800f0e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ee9a:	f7ff fdfd 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	6813      	ldr	r3, [r2, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2100      	movs	r1, #0
 800eea8:	4610      	mov	r0, r2
 800eeaa:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800eeac:	2000      	movs	r0, #0
 800eeae:	f002 fd93 	bl	80119d8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800eeb2:	f7ff fdfd 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f00e ff1e 	bl	801dcfa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	4618      	mov	r0, r3
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	080514b8 	.word	0x080514b8

0800eecc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	4611      	mov	r1, r2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff ffe9 	bl	800eecc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	685a      	ldr	r2, [r3, #4]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	605a      	str	r2, [r3, #4]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	3308      	adds	r3, #8
 800ef08:	3208      	adds	r2, #8
 800ef0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800ef1c:	b590      	push	{r4, r7, lr}
 800ef1e:	b089      	sub	sp, #36	; 0x24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ef2a:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800ef2c:	61bb      	str	r3, [r7, #24]
 800ef2e:	2300      	movs	r3, #0
 800ef30:	61fb      	str	r3, [r7, #28]
 800ef32:	f107 0008 	add.w	r0, r7, #8
 800ef36:	f107 0318 	add.w	r3, r7, #24
 800ef3a:	cb0c      	ldmia	r3, {r2, r3}
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	f000 f8eb 	bl	800f118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ef42:	f107 0308 	add.w	r3, r7, #8
 800ef46:	4619      	mov	r1, r3
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff ffcb 	bl	800eee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ef4e:	f107 0308 	add.w	r3, r7, #8
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 ff7a 	bl	800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ef64:	bf00      	nop
 800ef66:	3724      	adds	r7, #36	; 0x24
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	0800ef71 	.word	0x0800ef71

0800ef70 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af02      	add	r7, sp, #8
 800ef76:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ef84:	461a      	mov	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	4b04      	ldr	r3, [pc, #16]	; (800efa0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800ef90:	4804      	ldr	r0, [pc, #16]	; (800efa4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800ef92:	f000 f8f3 	bl	800f17c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ef96:	bf00      	nop
 800ef98:	3708      	adds	r7, #8
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	200013b8 	.word	0x200013b8
 800efa4:	200013b4 	.word	0x200013b4

0800efa8 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b089      	sub	sp, #36	; 0x24
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800efb6:	4b10      	ldr	r3, [pc, #64]	; (800eff8 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800efb8:	61bb      	str	r3, [r7, #24]
 800efba:	2300      	movs	r3, #0
 800efbc:	61fb      	str	r3, [r7, #28]
 800efbe:	f107 0008 	add.w	r0, r7, #8
 800efc2:	f107 0318 	add.w	r3, r7, #24
 800efc6:	cb0c      	ldmia	r3, {r2, r3}
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	f000 f8a5 	bl	800f118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800efce:	f107 0308 	add.w	r3, r7, #8
 800efd2:	4619      	mov	r1, r3
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7ff ff85 	bl	800eee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800efda:	f107 0308 	add.w	r3, r7, #8
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 ff34 	bl	800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800eff0:	bf00      	nop
 800eff2:	3724      	adds	r7, #36	; 0x24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}
 800eff8:	0800effd 	.word	0x0800effd

0800effc <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af02      	add	r7, sp, #8
 800f002:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800f010:	461a      	mov	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	4b04      	ldr	r3, [pc, #16]	; (800f02c <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800f01c:	4804      	ldr	r0, [pc, #16]	; (800f030 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800f01e:	f000 f9d7 	bl	800f3d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f022:	bf00      	nop
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	200013b8 	.word	0x200013b8
 800f030:	200013b4 	.word	0x200013b4

0800f034 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWest()
{
 800f034:	b590      	push	{r4, r7, lr}
 800f036:	b089      	sub	sp, #36	; 0x24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenWipeTransitionWestImpl);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800f042:	4b10      	ldr	r3, [pc, #64]	; (800f084 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv+0x50>)
 800f044:	61bb      	str	r3, [r7, #24]
 800f046:	2300      	movs	r3, #0
 800f048:	61fb      	str	r3, [r7, #28]
 800f04a:	f107 0008 	add.w	r0, r7, #8
 800f04e:	f107 0318 	add.w	r3, r7, #24
 800f052:	cb0c      	ldmia	r3, {r2, r3}
 800f054:	6879      	ldr	r1, [r7, #4]
 800f056:	f000 f85f 	bl	800f118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f05a:	f107 0308 	add.w	r3, r7, #8
 800f05e:	4619      	mov	r1, r3
 800f060:	4620      	mov	r0, r4
 800f062:	f7ff ff3f 	bl	800eee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f066:	f107 0308 	add.w	r3, r7, #8
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 feee 	bl	800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800f07c:	bf00      	nop
 800f07e:	3724      	adds	r7, #36	; 0x24
 800f080:	46bd      	mov	sp, r7
 800f082:	bd90      	pop	{r4, r7, pc}
 800f084:	0800f089 	.word	0x0800f089

0800f088 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWestImpl()
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	4b04      	ldr	r3, [pc, #16]	; (800f0b8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x30>)
 800f0a8:	4804      	ldr	r0, [pc, #16]	; (800f0bc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x34>)
 800f0aa:	f000 fabb 	bl	800f624 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f0ae:	bf00      	nop
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	200013b8 	.word	0x200013b8
 800f0bc:	200013b4 	.word	0x200013b4

0800f0c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a04      	ldr	r2, [pc, #16]	; (800f0dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	0805157c 	.word	0x0805157c

0800f0e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7ff ffe8 	bl	800f0c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f0f0:	4a08      	ldr	r2, [pc, #32]	; (800f114 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	601a      	str	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	605a      	str	r2, [r3, #4]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	609a      	str	r2, [r3, #8]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	60da      	str	r2, [r3, #12]
    {
    }
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	080514fc 	.word	0x080514fc

0800f118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	4639      	mov	r1, r7
 800f124:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff ffc8 	bl	800f0c0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f130:	4a08      	ldr	r2, [pc, #32]	; (800f154 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3308      	adds	r3, #8
 800f140:	463a      	mov	r2, r7
 800f142:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f146:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	080514fc 	.word	0x080514fc

0800f158 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	f7ff fcc0 	bl	800eae8 <_ZN8touchgfx10TransitionC1Ev>
 800f168:	4a03      	ldr	r2, [pc, #12]	; (800f178 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	08051494 	.word	0x08051494

0800f17c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b08f      	sub	sp, #60	; 0x3c
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	3320      	adds	r3, #32
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4610      	mov	r0, r2
 800f19a:	4798      	blx	r3
 800f19c:	4603      	mov	r3, r0
 800f19e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800f1a2:	d205      	bcs.n	800f1b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f1a4:	4b85      	ldr	r3, [pc, #532]	; (800f3bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f1a6:	4a86      	ldr	r2, [pc, #536]	; (800f3c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f1a8:	21a7      	movs	r1, #167	; 0xa7
 800f1aa:	4886      	ldr	r0, [pc, #536]	; (800f3c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f1ac:	f015 fe2e 	bl	8024e0c <__assert_func>
 800f1b0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3320      	adds	r3, #32
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	4798      	blx	r3
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b0f      	cmp	r3, #15
 800f1c8:	d805      	bhi.n	800f1d6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f1ca:	4b7f      	ldr	r3, [pc, #508]	; (800f3c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f1cc:	4a7c      	ldr	r2, [pc, #496]	; (800f3c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f1ce:	21a8      	movs	r1, #168	; 0xa8
 800f1d0:	487c      	ldr	r0, [pc, #496]	; (800f3c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f1d2:	f015 fe1b 	bl	8024e0c <__assert_func>
 800f1d6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	68da      	ldr	r2, [r3, #12]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3320      	adds	r3, #32
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	4798      	blx	r3
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b0b      	cmp	r3, #11
 800f1ee:	d805      	bhi.n	800f1fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f1f0:	4b76      	ldr	r3, [pc, #472]	; (800f3cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f1f2:	4a73      	ldr	r2, [pc, #460]	; (800f3c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f1f4:	21a9      	movs	r1, #169	; 0xa9
 800f1f6:	4873      	ldr	r0, [pc, #460]	; (800f3c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f1f8:	f015 fe08 	bl	8024e0c <__assert_func>
 800f1fc:	bf00      	nop
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	62bb      	str	r3, [r7, #40]	; 0x28
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f20a:	f008 f95d 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 800f20e:	4603      	mov	r3, r0
 800f210:	4618      	mov	r0, r3
 800f212:	f008 f95f 	bl	80174d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d008      	beq.n	800f230 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f21e:	6a3b      	ldr	r3, [r7, #32]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	330c      	adds	r3, #12
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4610      	mov	r0, r2
 800f22e:	4798      	blx	r3
    if (*currentTrans)
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d007      	beq.n	800f248 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4610      	mov	r0, r2
 800f246:	4798      	blx	r3
    if (*currentScreen)
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d008      	beq.n	800f262 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3314      	adds	r3, #20
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4610      	mov	r0, r2
 800f260:	4798      	blx	r3
    if (*currentPresenter)
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d008      	beq.n	800f27c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	3304      	adds	r3, #4
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4610      	mov	r0, r2
 800f27a:	4798      	blx	r3
    if (*currentScreen)
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d007      	beq.n	800f294 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4610      	mov	r0, r2
 800f292:	4798      	blx	r3
    if (*currentPresenter)
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d008      	beq.n	800f2ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 fadf 	bl	800f878 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	4619      	mov	r1, r3
 800f2be:	200c      	movs	r0, #12
 800f2c0:	f7ff f97e 	bl	800e5c0 <_ZnwjPv>
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	2c00      	cmp	r4, #0
 800f2c8:	d004      	beq.n	800f2d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f7ff ff44 	bl	800f158 <_ZN8touchgfx12NoTransitionC1Ev>
 800f2d0:	4623      	mov	r3, r4
 800f2d2:	e000      	b.n	800f2d6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f2d4:	4623      	mov	r3, r4
 800f2d6:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fadd 	bl	800f89e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	f44f 709e 	mov.w	r0, #316	; 0x13c
 800f2ec:	f7ff f968 	bl	800e5c0 <_ZnwjPv>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	2c00      	cmp	r4, #0
 800f2f4:	d004      	beq.n	800f300 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f002 fe3e 	bl	8011f78 <_ZN10screenViewC1Ev>
 800f2fc:	4623      	mov	r3, r4
 800f2fe:	e000      	b.n	800f302 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f300:	4623      	mov	r3, r4
 800f302:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	2100      	movs	r1, #0
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fada 	bl	800f8c4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800f310:	4603      	mov	r3, r0
 800f312:	4619      	mov	r1, r3
 800f314:	2010      	movs	r0, #16
 800f316:	f7ff f953 	bl	800e5c0 <_ZnwjPv>
 800f31a:	4604      	mov	r4, r0
 800f31c:	2c00      	cmp	r4, #0
 800f31e:	d005      	beq.n	800f32c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800f320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f322:	4620      	mov	r0, r4
 800f324:	f002 fdd0 	bl	8011ec8 <_ZN15screenPresenterC1ER10screenView>
 800f328:	4623      	mov	r3, r4
 800f32a:	e000      	b.n	800f32e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f32c:	4623      	mov	r3, r4
 800f32e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f334:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f340:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	3304      	adds	r3, #4
 800f34c:	e000      	b.n	800f350 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f34e:	2300      	movs	r3, #0
 800f350:	4619      	mov	r1, r3
 800f352:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f354:	f7ff fcb8 	bl	800ecc8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	3304      	adds	r3, #4
 800f35c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f35e:	4618      	mov	r0, r3
 800f360:	f7ff fd3d 	bl	800edde <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fabe 	bl	800f8ea <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800f36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f370:	61fb      	str	r3, [r7, #28]
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	61bb      	str	r3, [r7, #24]
 800f376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f378:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	330c      	adds	r3, #12
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	69f8      	ldr	r0, [r7, #28]
 800f384:	4798      	blx	r3
    newPresenter->activate();
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	69b8      	ldr	r0, [r7, #24]
 800f38e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f390:	6979      	ldr	r1, [r7, #20]
 800f392:	69f8      	ldr	r0, [r7, #28]
 800f394:	f009 fa16 	bl	80187c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3310      	adds	r3, #16
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6978      	ldr	r0, [r7, #20]
 800f3a2:	4798      	blx	r3
    newTransition->invalidate();
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3314      	adds	r3, #20
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	6978      	ldr	r0, [r7, #20]
 800f3ae:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	373c      	adds	r7, #60	; 0x3c
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd90      	pop	{r4, r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	080260e8 	.word	0x080260e8
 800f3c0:	080515b4 	.word	0x080515b4
 800f3c4:	08026178 	.word	0x08026178
 800f3c8:	080261bc 	.word	0x080261bc
 800f3cc:	08026260 	.word	0x08026260

0800f3d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f3d0:	b590      	push	{r4, r7, lr}
 800f3d2:	b08f      	sub	sp, #60	; 0x3c
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689a      	ldr	r2, [r3, #8]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3320      	adds	r3, #32
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	4798      	blx	r3
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800f3f6:	d205      	bcs.n	800f404 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f3f8:	4b85      	ldr	r3, [pc, #532]	; (800f610 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f3fa:	4a86      	ldr	r2, [pc, #536]	; (800f614 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f3fc:	21a7      	movs	r1, #167	; 0xa7
 800f3fe:	4886      	ldr	r0, [pc, #536]	; (800f618 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f400:	f015 fd04 	bl	8024e0c <__assert_func>
 800f404:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	3320      	adds	r3, #32
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4610      	mov	r0, r2
 800f416:	4798      	blx	r3
 800f418:	4603      	mov	r3, r0
 800f41a:	2b0f      	cmp	r3, #15
 800f41c:	d805      	bhi.n	800f42a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f41e:	4b7f      	ldr	r3, [pc, #508]	; (800f61c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f420:	4a7c      	ldr	r2, [pc, #496]	; (800f614 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f422:	21a8      	movs	r1, #168	; 0xa8
 800f424:	487c      	ldr	r0, [pc, #496]	; (800f618 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f426:	f015 fcf1 	bl	8024e0c <__assert_func>
 800f42a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68da      	ldr	r2, [r3, #12]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	3320      	adds	r3, #32
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4610      	mov	r0, r2
 800f43c:	4798      	blx	r3
 800f43e:	4603      	mov	r3, r0
 800f440:	2b4f      	cmp	r3, #79	; 0x4f
 800f442:	d805      	bhi.n	800f450 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f444:	4b76      	ldr	r3, [pc, #472]	; (800f620 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f446:	4a73      	ldr	r2, [pc, #460]	; (800f614 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f448:	21a9      	movs	r1, #169	; 0xa9
 800f44a:	4873      	ldr	r0, [pc, #460]	; (800f618 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f44c:	f015 fcde 	bl	8024e0c <__assert_func>
 800f450:	bf00      	nop
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	62bb      	str	r3, [r7, #40]	; 0x28
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	627b      	str	r3, [r7, #36]	; 0x24
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f45e:	f008 f833 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 800f462:	4603      	mov	r3, r0
 800f464:	4618      	mov	r0, r3
 800f466:	f008 f835 	bl	80174d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d008      	beq.n	800f484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f472:	6a3b      	ldr	r3, [r7, #32]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	330c      	adds	r3, #12
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4610      	mov	r0, r2
 800f482:	4798      	blx	r3
    if (*currentTrans)
 800f484:	6a3b      	ldr	r3, [r7, #32]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d007      	beq.n	800f49c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4610      	mov	r0, r2
 800f49a:	4798      	blx	r3
    if (*currentScreen)
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d008      	beq.n	800f4b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3314      	adds	r3, #20
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	4798      	blx	r3
    if (*currentPresenter)
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d008      	beq.n	800f4d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4798      	blx	r3
    if (*currentScreen)
 800f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	4798      	blx	r3
    if (*currentPresenter)
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d008      	beq.n	800f502 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4610      	mov	r0, r2
 800f500:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	2100      	movs	r1, #0
 800f508:	4618      	mov	r0, r3
 800f50a:	f000 f9fc 	bl	800f906 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800f50e:	4603      	mov	r3, r0
 800f510:	4619      	mov	r1, r3
 800f512:	2050      	movs	r0, #80	; 0x50
 800f514:	f7ff f854 	bl	800e5c0 <_ZnwjPv>
 800f518:	4604      	mov	r4, r0
 800f51a:	2c00      	cmp	r4, #0
 800f51c:	d005      	beq.n	800f52a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f51e:	2114      	movs	r1, #20
 800f520:	4620      	mov	r0, r4
 800f522:	f000 fa59 	bl	800f9d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800f526:	4623      	mov	r3, r4
 800f528:	e000      	b.n	800f52c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800f52a:	4623      	mov	r3, r4
 800f52c:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	2100      	movs	r1, #0
 800f534:	4618      	mov	r0, r3
 800f536:	f000 f9b2 	bl	800f89e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800f53a:	4603      	mov	r3, r0
 800f53c:	4619      	mov	r1, r3
 800f53e:	f44f 709e 	mov.w	r0, #316	; 0x13c
 800f542:	f7ff f83d 	bl	800e5c0 <_ZnwjPv>
 800f546:	4604      	mov	r4, r0
 800f548:	2c00      	cmp	r4, #0
 800f54a:	d004      	beq.n	800f556 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f54c:	4620      	mov	r0, r4
 800f54e:	f002 fd13 	bl	8011f78 <_ZN10screenViewC1Ev>
 800f552:	4623      	mov	r3, r4
 800f554:	e000      	b.n	800f558 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800f556:	4623      	mov	r3, r4
 800f558:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	2100      	movs	r1, #0
 800f560:	4618      	mov	r0, r3
 800f562:	f000 f9af 	bl	800f8c4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800f566:	4603      	mov	r3, r0
 800f568:	4619      	mov	r1, r3
 800f56a:	2010      	movs	r0, #16
 800f56c:	f7ff f828 	bl	800e5c0 <_ZnwjPv>
 800f570:	4604      	mov	r4, r0
 800f572:	2c00      	cmp	r4, #0
 800f574:	d005      	beq.n	800f582 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f578:	4620      	mov	r0, r4
 800f57a:	f002 fca5 	bl	8011ec8 <_ZN15screenPresenterC1ER10screenView>
 800f57e:	4623      	mov	r3, r4
 800f580:	e000      	b.n	800f584 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800f582:	4623      	mov	r3, r4
 800f584:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f58a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f590:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f596:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d002      	beq.n	800f5a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a0:	3304      	adds	r3, #4
 800f5a2:	e000      	b.n	800f5a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f5aa:	f7ff fb8d 	bl	800ecc8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b0:	3304      	adds	r3, #4
 800f5b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7ff fc12 	bl	800edde <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 f993 	bl	800f8ea <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	61fb      	str	r3, [r7, #28]
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	61bb      	str	r3, [r7, #24]
 800f5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ce:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	330c      	adds	r3, #12
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	69f8      	ldr	r0, [r7, #28]
 800f5da:	4798      	blx	r3
    newPresenter->activate();
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	69b8      	ldr	r0, [r7, #24]
 800f5e4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f5e6:	6979      	ldr	r1, [r7, #20]
 800f5e8:	69f8      	ldr	r0, [r7, #28]
 800f5ea:	f009 f8eb 	bl	80187c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	3310      	adds	r3, #16
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6978      	ldr	r0, [r7, #20]
 800f5f8:	4798      	blx	r3
    newTransition->invalidate();
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3314      	adds	r3, #20
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	6978      	ldr	r0, [r7, #20]
 800f604:	4798      	blx	r3
    return newPresenter;
 800f606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f608:	4618      	mov	r0, r3
 800f60a:	373c      	adds	r7, #60	; 0x3c
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd90      	pop	{r4, r7, pc}
 800f610:	080260e8 	.word	0x080260e8
 800f614:	080516b8 	.word	0x080516b8
 800f618:	08026178 	.word	0x08026178
 800f61c:	080261bc 	.word	0x080261bc
 800f620:	08026260 	.word	0x08026260

0800f624 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b08f      	sub	sp, #60	; 0x3c
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	689a      	ldr	r2, [r3, #8]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3320      	adds	r3, #32
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4610      	mov	r0, r2
 800f642:	4798      	blx	r3
 800f644:	4603      	mov	r3, r0
 800f646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f64a:	d205      	bcs.n	800f658 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f64c:	4b85      	ldr	r3, [pc, #532]	; (800f864 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800f64e:	4a86      	ldr	r2, [pc, #536]	; (800f868 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f650:	21a7      	movs	r1, #167	; 0xa7
 800f652:	4886      	ldr	r0, [pc, #536]	; (800f86c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f654:	f015 fbda 	bl	8024e0c <__assert_func>
 800f658:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3320      	adds	r3, #32
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4610      	mov	r0, r2
 800f66a:	4798      	blx	r3
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b0f      	cmp	r3, #15
 800f670:	d805      	bhi.n	800f67e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f672:	4b7f      	ldr	r3, [pc, #508]	; (800f870 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800f674:	4a7c      	ldr	r2, [pc, #496]	; (800f868 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f676:	21a8      	movs	r1, #168	; 0xa8
 800f678:	487c      	ldr	r0, [pc, #496]	; (800f86c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f67a:	f015 fbc7 	bl	8024e0c <__assert_func>
 800f67e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	68da      	ldr	r2, [r3, #12]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	3320      	adds	r3, #32
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4610      	mov	r0, r2
 800f690:	4798      	blx	r3
 800f692:	4603      	mov	r3, r0
 800f694:	2b37      	cmp	r3, #55	; 0x37
 800f696:	d805      	bhi.n	800f6a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f698:	4b76      	ldr	r3, [pc, #472]	; (800f874 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800f69a:	4a73      	ldr	r2, [pc, #460]	; (800f868 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800f69c:	21a9      	movs	r1, #169	; 0xa9
 800f69e:	4873      	ldr	r0, [pc, #460]	; (800f86c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800f6a0:	f015 fbb4 	bl	8024e0c <__assert_func>
 800f6a4:	bf00      	nop
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f6b2:	f007 ff09 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f007 ff0b 	bl	80174d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d008      	beq.n	800f6d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	6a3b      	ldr	r3, [r7, #32]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	330c      	adds	r3, #12
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	4798      	blx	r3
    if (*currentTrans)
 800f6d8:	6a3b      	ldr	r3, [r7, #32]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d007      	beq.n	800f6f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f6e0:	6a3b      	ldr	r3, [r7, #32]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
    if (*currentScreen)
 800f6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d008      	beq.n	800f70a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	3314      	adds	r3, #20
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4610      	mov	r0, r2
 800f708:	4798      	blx	r3
    if (*currentPresenter)
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d008      	beq.n	800f724 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3304      	adds	r3, #4
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4610      	mov	r0, r2
 800f722:	4798      	blx	r3
    if (*currentScreen)
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
    if (*currentPresenter)
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d008      	beq.n	800f756 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4610      	mov	r0, r2
 800f754:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	2100      	movs	r1, #0
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 f9bf 	bl	800fae0 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 800f762:	4603      	mov	r3, r0
 800f764:	4619      	mov	r1, r3
 800f766:	2038      	movs	r0, #56	; 0x38
 800f768:	f7fe ff2a 	bl	800e5c0 <_ZnwjPv>
 800f76c:	4604      	mov	r4, r0
 800f76e:	2c00      	cmp	r4, #0
 800f770:	d005      	beq.n	800f77e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800f772:	2114      	movs	r1, #20
 800f774:	4620      	mov	r0, r4
 800f776:	f000 f9fb 	bl	800fb70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 800f77a:	4623      	mov	r3, r4
 800f77c:	e000      	b.n	800f780 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800f77e:	4623      	mov	r3, r4
 800f780:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	2100      	movs	r1, #0
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 fa33 	bl	800fbf4 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800f78e:	4603      	mov	r3, r0
 800f790:	4619      	mov	r1, r3
 800f792:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f796:	f7fe ff13 	bl	800e5c0 <_ZnwjPv>
 800f79a:	4604      	mov	r4, r0
 800f79c:	2c00      	cmp	r4, #0
 800f79e:	d004      	beq.n	800f7aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f002 fb33 	bl	8011e0c <_ZN11Screen1ViewC1Ev>
 800f7a6:	4623      	mov	r3, r4
 800f7a8:	e000      	b.n	800f7ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800f7aa:	4623      	mov	r3, r4
 800f7ac:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fa30 	bl	800fc1a <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	4619      	mov	r1, r3
 800f7be:	2010      	movs	r0, #16
 800f7c0:	f7fe fefe 	bl	800e5c0 <_ZnwjPv>
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	2c00      	cmp	r4, #0
 800f7c8:	d005      	beq.n	800f7d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800f7ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f002 fac5 	bl	8011d5c <_ZN16Screen1PresenterC1ER11Screen1View>
 800f7d2:	4623      	mov	r3, r4
 800f7d4:	e000      	b.n	800f7d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800f7d6:	4623      	mov	r3, r4
 800f7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7de:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7e4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ea:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d002      	beq.n	800f7f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	e000      	b.n	800f7fa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f7fe:	f7ff fa63 	bl	800ecc8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f804:	3304      	adds	r3, #4
 800f806:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff fae8 	bl	800edde <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f812:	4618      	mov	r0, r3
 800f814:	f000 fa14 	bl	800fc40 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81a:	61fb      	str	r3, [r7, #28]
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	61bb      	str	r3, [r7, #24]
 800f820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f822:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	330c      	adds	r3, #12
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	69f8      	ldr	r0, [r7, #28]
 800f82e:	4798      	blx	r3
    newPresenter->activate();
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	69b8      	ldr	r0, [r7, #24]
 800f838:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f83a:	6979      	ldr	r1, [r7, #20]
 800f83c:	69f8      	ldr	r0, [r7, #28]
 800f83e:	f008 ffc1 	bl	80187c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3310      	adds	r3, #16
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6978      	ldr	r0, [r7, #20]
 800f84c:	4798      	blx	r3
    newTransition->invalidate();
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3314      	adds	r3, #20
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6978      	ldr	r0, [r7, #20]
 800f858:	4798      	blx	r3
    return newPresenter;
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	373c      	adds	r7, #60	; 0x3c
 800f860:	46bd      	mov	sp, r7
 800f862:	bd90      	pop	{r4, r7, pc}
 800f864:	080260e8 	.word	0x080260e8
 800f868:	080517d8 	.word	0x080517d8
 800f86c:	08026178 	.word	0x08026178
 800f870:	080261bc 	.word	0x080261bc
 800f874:	08026260 	.word	0x08026260

0800f878 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	460b      	mov	r3, r1
 800f882:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3324      	adds	r3, #36	; 0x24
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	887a      	ldrh	r2, [r7, #2]
 800f88e:	4611      	mov	r1, r2
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	4798      	blx	r3
 800f894:	4603      	mov	r3, r0
    }
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	3324      	adds	r3, #36	; 0x24
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	887a      	ldrh	r2, [r7, #2]
 800f8b4:	4611      	mov	r1, r2
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	4798      	blx	r3
 800f8ba:	4603      	mov	r3, r0
    }
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3324      	adds	r3, #36	; 0x24
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	887a      	ldrh	r2, [r7, #2]
 800f8da:	4611      	mov	r1, r2
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	4798      	blx	r3
 800f8e0:	4603      	mov	r3, r0
    }
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3708      	adds	r7, #8
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f8ea:	b480      	push	{r7}
 800f8ec:	b083      	sub	sp, #12
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	460b      	mov	r3, r1
 800f910:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3324      	adds	r3, #36	; 0x24
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	887a      	ldrh	r2, [r7, #2]
 800f91c:	4611      	mov	r1, r2
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	4798      	blx	r3
 800f922:	4603      	mov	r3, r0
    }
 800f924:	4618      	mov	r0, r3
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	4a05      	ldr	r2, [pc, #20]	; (800f94c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	601a      	str	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 f9ef 	bl	800fd20 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	08051370 	.word	0x08051370

0800f950 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff ffe7 	bl	800f92c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800f95e:	2110      	movs	r1, #16
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f015 fa27 	bl	8024db4 <_ZdlPvj>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff fa3e 	bl	800edfc <_ZN8touchgfx6WidgetC1Ev>
 800f980:	4a03      	ldr	r2, [pc, #12]	; (800f990 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	08051308 	.word	0x08051308

0800f994 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	4a05      	ldr	r2, [pc, #20]	; (800f9b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	601a      	str	r2, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fa3b 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	08051308 	.word	0x08051308

0800f9b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff ffe7 	bl	800f994 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f9c6:	2128      	movs	r1, #40	; 0x28
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f015 f9f3 	bl	8024db4 <_ZdlPvj>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800f9d8:	b590      	push	{r4, r7, lr}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af02      	add	r7, sp, #8
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7ff f87e 	bl	800eae8 <_ZN8touchgfx10TransitionC1Ev>
 800f9ec:	4a38      	ldr	r2, [pc, #224]	; (800fad0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f103 040c 	add.w	r4, r3, #12
 800f9f8:	4a36      	ldr	r2, [pc, #216]	; (800fad4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800f9fa:	f107 0308 	add.w	r3, r7, #8
 800f9fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa02:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa06:	f107 0308 	add.w	r3, r7, #8
 800fa0a:	cb0c      	ldmia	r3, {r2, r3}
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f000 f966 	bl	800fce0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2202      	movs	r2, #2
 800fa18:	771a      	strb	r2, [r3, #28]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	78fa      	ldrb	r2, [r7, #3]
 800fa1e:	775a      	strb	r2, [r3, #29]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	779a      	strb	r2, [r3, #30]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	845a      	strh	r2, [r3, #34]	; 0x22
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	849a      	strh	r2, [r3, #36]	; 0x24
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3328      	adds	r3, #40	; 0x28
 800fa36:	2228      	movs	r2, #40	; 0x28
 800fa38:	2100      	movs	r1, #0
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f015 fa6f 	bl	8024f1e <memset>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	3328      	adds	r3, #40	; 0x28
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7ff ff93 	bl	800f970 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	7f1b      	ldrb	r3, [r3, #28]
 800fa4e:	2b03      	cmp	r3, #3
 800fa50:	d826      	bhi.n	800faa0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800fa52:	a201      	add	r2, pc, #4	; (adr r2, 800fa58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800fa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa58:	0800fa85 	.word	0x0800fa85
 800fa5c:	0800fa91 	.word	0x0800fa91
 800fa60:	0800fa69 	.word	0x0800fa69
 800fa64:	0800fa79 	.word	0x0800fa79
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800fa68:	4b1b      	ldr	r3, [pc, #108]	; (800fad8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fa6a:	881b      	ldrh	r3, [r3, #0]
 800fa6c:	425b      	negs	r3, r3
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	b21a      	sxth	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	841a      	strh	r2, [r3, #32]
            break;
 800fa76:	e017      	b.n	800faa8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800fa78:	4b17      	ldr	r3, [pc, #92]	; (800fad8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	b21a      	sxth	r2, r3
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	841a      	strh	r2, [r3, #32]
            break;
 800fa82:	e011      	b.n	800faa8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800fa84:	4b15      	ldr	r3, [pc, #84]	; (800fadc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	b21a      	sxth	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	841a      	strh	r2, [r3, #32]
            break;
 800fa8e:	e00b      	b.n	800faa8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800fa90:	4b12      	ldr	r3, [pc, #72]	; (800fadc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fa92:	881b      	ldrh	r3, [r3, #0]
 800fa94:	425b      	negs	r3, r3
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	b21a      	sxth	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	841a      	strh	r2, [r3, #32]
            break;
 800fa9e:	e003      	b.n	800faa8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2201      	movs	r2, #1
 800faa4:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800faa6:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800faae:	4b0a      	ldr	r3, [pc, #40]	; (800fad8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	b21a      	sxth	r2, r3
 800fab4:	4b09      	ldr	r3, [pc, #36]	; (800fadc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	b21b      	sxth	r3, r3
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	4613      	mov	r3, r2
 800fabe:	2200      	movs	r2, #0
 800fac0:	2100      	movs	r1, #0
 800fac2:	f7fe feb9 	bl	800e838 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	bd90      	pop	{r4, r7, pc}
 800fad0:	080512dc 	.word	0x080512dc
 800fad4:	08026304 	.word	0x08026304
 800fad8:	2000134a 	.word	0x2000134a
 800fadc:	2000134c 	.word	0x2000134c

0800fae0 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	460b      	mov	r3, r1
 800faea:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3324      	adds	r3, #36	; 0x24
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	887a      	ldrh	r2, [r7, #2]
 800faf6:	4611      	mov	r1, r2
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	4798      	blx	r3
 800fafc:	4603      	mov	r3, r0
    }
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff f972 	bl	800edfc <_ZN8touchgfx6WidgetC1Ev>
 800fb18:	4a03      	ldr	r2, [pc, #12]	; (800fb28 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev+0x20>)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	080513c4 	.word	0x080513c4

0800fb2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>:
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	4a05      	ldr	r2, [pc, #20]	; (800fb4c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev+0x20>)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7ff f96f 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	080513c4 	.word	0x080513c4

0800fb50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD0Ev>:
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff ffe7 	bl	800fb2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 800fb5e:	2128      	movs	r1, #40	; 0x28
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f015 f927 	bl	8024db4 <_ZdlPvj>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af02      	add	r7, sp, #8
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe ffb2 	bl	800eae8 <_ZN8touchgfx10TransitionC1Ev>
 800fb84:	4a18      	ldr	r2, [pc, #96]	; (800fbe8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	601a      	str	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	78fa      	ldrb	r2, [r7, #3]
 800fb8e:	725a      	strb	r2, [r3, #9]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	729a      	strb	r2, [r3, #10]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	81da      	strh	r2, [r3, #14]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	3310      	adds	r3, #16
 800fba0:	2228      	movs	r2, #40	; 0x28
 800fba2:	2100      	movs	r1, #0
 800fba4:	4618      	mov	r0, r3
 800fba6:	f015 f9ba 	bl	8024f1e <memset>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	3310      	adds	r3, #16
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff ffaa 	bl	800fb08 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800fbb4:	4b0d      	ldr	r3, [pc, #52]	; (800fbec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	b21a      	sxth	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	819a      	strh	r2, [r3, #12]
            break;
 800fbbe:	bf00      	nop
            // Nothing to do here
            break;
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f103 0010 	add.w	r0, r3, #16
 800fbc6:	4b09      	ldr	r3, [pc, #36]	; (800fbec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	b21a      	sxth	r2, r3
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	b21b      	sxth	r3, r3
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	2100      	movs	r1, #0
 800fbda:	f7fe fe2d 	bl	800e838 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	080513a0 	.word	0x080513a0
 800fbec:	2000134a 	.word	0x2000134a
 800fbf0:	2000134c 	.word	0x2000134c

0800fbf4 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	3324      	adds	r3, #36	; 0x24
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	887a      	ldrh	r2, [r7, #2]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	4798      	blx	r3
 800fc10:	4603      	mov	r3, r0
    }
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b082      	sub	sp, #8
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3324      	adds	r3, #36	; 0x24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	887a      	ldrh	r2, [r7, #2]
 800fc30:	4611      	mov	r1, r2
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	4798      	blx	r3
 800fc36:	4603      	mov	r3, r0
    }
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	7f1b      	ldrb	r3, [r3, #28]
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d820      	bhi.n	800fcb0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800fc6e:	a201      	add	r2, pc, #4	; (adr r2, 800fc74 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800fc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc74:	0800fc9b 	.word	0x0800fc9b
 800fc78:	0800fc9b 	.word	0x0800fc9b
 800fc7c:	0800fc85 	.word	0x0800fc85
 800fc80:	0800fc85 	.word	0x0800fc85
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3354      	adds	r3, #84	; 0x54
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800fc92:	2200      	movs	r2, #0
 800fc94:	6838      	ldr	r0, [r7, #0]
 800fc96:	4798      	blx	r3
            break;
 800fc98:	e00e      	b.n	800fcb8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3354      	adds	r3, #84	; 0x54
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800fca8:	2100      	movs	r1, #0
 800fcaa:	6838      	ldr	r0, [r7, #0]
 800fcac:	4798      	blx	r3
            break;
 800fcae:	e003      	b.n	800fcb8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	721a      	strb	r2, [r3, #8]
            break;
 800fcb6:	bf00      	nop
        }
    }
 800fcb8:	bf00      	nop
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	4a04      	ldr	r2, [pc, #16]	; (800fcdc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	08051388 	.word	0x08051388

0800fce0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4639      	mov	r1, r7
 800fcec:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7ff ffe4 	bl	800fcc0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800fcf8:	4a08      	ldr	r2, [pc, #32]	; (800fd1c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	3308      	adds	r3, #8
 800fd08:	463a      	mov	r2, r7
 800fd0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	08051370 	.word	0x08051370

0800fd20 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    }
 800fd28:	4a04      	ldr	r2, [pc, #16]	; (800fd3c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	601a      	str	r2, [r3, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	08051388 	.word	0x08051388

0800fd40 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    }
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff ffe9 	bl	800fd20 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800fd4e:	2104      	movs	r1, #4
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f015 f82f 	bl	8024db4 <_ZdlPvj>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	4a0a      	ldr	r2, [pc, #40]	; (800fd94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	3328      	adds	r3, #40	; 0x28
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff fe0e 	bl	800f994 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	330c      	adds	r3, #12
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff fdd5 	bl	800f92c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe fec5 	bl	800eb14 <_ZN8touchgfx10TransitionD1Ev>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	080512dc 	.word	0x080512dc

0800fd98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ffdd 	bl	800fd60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800fda6:	2150      	movs	r1, #80	; 0x50
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f015 f803 	bl	8024db4 <_ZdlPvj>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
class WipeTransition : public Transition
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	4a08      	ldr	r2, [pc, #32]	; (800fde4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	3310      	adds	r3, #16
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff feae 	bl	800fb2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fe9e 	bl	800eb14 <_ZN8touchgfx10TransitionD1Ev>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	080513a0 	.word	0x080513a0

0800fde8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7ff ffe1 	bl	800fdb8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 800fdf6:	2138      	movs	r1, #56	; 0x38
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f014 ffdb 	bl	8024db4 <_ZdlPvj>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <_ZN8touchgfx12NoTransitionD1Ev>:
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	4a05      	ldr	r2, [pc, #20]	; (800fe28 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fe fe7b 	bl	800eb14 <_ZN8touchgfx10TransitionD1Ev>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	08051494 	.word	0x08051494

0800fe2c <_ZN8touchgfx12NoTransitionD0Ev>:
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7ff ffe7 	bl	800fe08 <_ZN8touchgfx12NoTransitionD1Ev>
 800fe3a:	210c      	movs	r1, #12
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f014 ffb9 	bl	8024db4 <_ZdlPvj>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	4a05      	ldr	r2, [pc, #20]	; (800fe6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fe fc71 	bl	800e744 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4618      	mov	r0, r3
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	080514fc 	.word	0x080514fc

0800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff ffe7 	bl	800fe4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fe7e:	2110      	movs	r1, #16
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f014 ff97 	bl	8024db4 <_ZdlPvj>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	b08b      	sub	sp, #44	; 0x2c
 800fe94:	af02      	add	r7, sp, #8
 800fe96:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fe fe5a 	bl	800eb54 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7f9b      	ldrb	r3, [r3, #30]
 800fea4:	3301      	adds	r3, #1
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	7f9a      	ldrb	r2, [r3, #30]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	7f5b      	ldrb	r3, [r3, #29]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d82b      	bhi.n	800ff10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	7f9b      	ldrb	r3, [r3, #30]
 800febc:	b298      	uxth	r0, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7f5b      	ldrb	r3, [r3, #29]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	2100      	movs	r1, #0
 800fecc:	f008 fc80 	bl	80187d0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800fed0:	4603      	mov	r3, r0
 800fed2:	461a      	mov	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fede:	b29b      	uxth	r3, r3
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d019      	beq.n	800ff1e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800fef8:	2a00      	cmp	r2, #0
 800fefa:	dd01      	ble.n	800ff00 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800fefc:	2201      	movs	r2, #1
 800fefe:	e001      	b.n	800ff04 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800ff00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff04:	4413      	add	r3, r2
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ff0e:	e006      	b.n	800ff1e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	779a      	strb	r2, [r3, #30]
            return;
 800ff1c:	e0c0      	b.n	80100a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	b21a      	sxth	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	4413      	add	r3, r2
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	b21a      	sxth	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	7f9b      	ldrb	r3, [r3, #30]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	f040 8097 	bne.w	801008a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800ff5c:	4b52      	ldr	r3, [pc, #328]	; (80100a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 8092 	beq.w	801008a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800ff66:	f107 0314 	add.w	r3, r7, #20
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fe fb34 	bl	800e5d8 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	7f1b      	ldrb	r3, [r3, #28]
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d85b      	bhi.n	8010030 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800ff78:	a201      	add	r2, pc, #4	; (adr r2, 800ff80 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800ff7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff7e:	bf00      	nop
 800ff80:	0800ffe1 	.word	0x0800ffe1
 800ff84:	0801000b 	.word	0x0801000b
 800ff88:	0800ff91 	.word	0x0800ff91
 800ff8c:	0800ffb7 	.word	0x0800ffb7
                rect.x = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	4b42      	ldr	r3, [pc, #264]	; (80100ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	b21b      	sxth	r3, r3
 800ffaa:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800ffac:	4b40      	ldr	r3, [pc, #256]	; (80100b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	b21b      	sxth	r3, r3
 800ffb2:	837b      	strh	r3, [r7, #26]
                break;
 800ffb4:	e03d      	b.n	8010032 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffbc:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800ffc2:	4b3a      	ldr	r3, [pc, #232]	; (80100ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ffc4:	881a      	ldrh	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	1ad3      	subs	r3, r2, r3
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	b21b      	sxth	r3, r3
 800ffd4:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800ffd6:	4b36      	ldr	r3, [pc, #216]	; (80100b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	b21b      	sxth	r3, r3
 800ffdc:	837b      	strh	r3, [r7, #26]
                break;
 800ffde:	e028      	b.n	8010032 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ffea:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800ffec:	4b2f      	ldr	r3, [pc, #188]	; (80100ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	b21b      	sxth	r3, r3
 800fff2:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800fff4:	4b2e      	ldr	r3, [pc, #184]	; (80100b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800fff6:	881a      	ldrh	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800fffe:	b29b      	uxth	r3, r3
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	b29b      	uxth	r3, r3
 8010004:	b21b      	sxth	r3, r3
 8010006:	837b      	strh	r3, [r7, #26]
                break;
 8010008:	e013      	b.n	8010032 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8010012:	4b26      	ldr	r3, [pc, #152]	; (80100ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	b21b      	sxth	r3, r3
 8010018:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8010020:	b29a      	uxth	r2, r3
 8010022:	4b23      	ldr	r3, [pc, #140]	; (80100b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	4413      	add	r3, r2
 8010028:	b29b      	uxth	r3, r3
 801002a:	b21b      	sxth	r3, r3
 801002c:	837b      	strh	r3, [r7, #26]
                break;
 801002e:	e000      	b.n	8010032 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 8010030:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8010032:	f7fe fd31 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8010036:	4602      	mov	r2, r0
 8010038:	6813      	ldr	r3, [r2, #0]
 801003a:	3328      	adds	r3, #40	; 0x28
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4610      	mov	r0, r2
 8010040:	4798      	blx	r3
 8010042:	61f8      	str	r0, [r7, #28]
            Rect source;
 8010044:	f107 030c 	add.w	r3, r7, #12
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe fac5 	bl	800e5d8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8010056:	4b15      	ldr	r3, [pc, #84]	; (80100ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8010058:	881b      	ldrh	r3, [r3, #0]
 801005a:	b21b      	sxth	r3, r3
 801005c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 801005e:	4b14      	ldr	r3, [pc, #80]	; (80100b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	b21b      	sxth	r3, r3
 8010064:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8010066:	f7fe fd17 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 801006a:	f7fe fd21 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 801006e:	6803      	ldr	r3, [r0, #0]
 8010070:	330c      	adds	r3, #12
 8010072:	681c      	ldr	r4, [r3, #0]
 8010074:	f107 0114 	add.w	r1, r7, #20
 8010078:	f107 020c 	add.w	r2, r7, #12
 801007c:	2300      	movs	r3, #0
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	23ff      	movs	r3, #255	; 0xff
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	460b      	mov	r3, r1
 8010086:	69f9      	ldr	r1, [r7, #28]
 8010088:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6858      	ldr	r0, [r3, #4]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	3378      	adds	r3, #120	; 0x78
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	320c      	adds	r2, #12
 801009c:	4611      	mov	r1, r2
 801009e:	4798      	blx	r3
    }
 80100a0:	3724      	adds	r7, #36	; 0x24
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd90      	pop	{r4, r7, pc}
 80100a6:	bf00      	nop
 80100a8:	20001354 	.word	0x20001354
 80100ac:	2000134a 	.word	0x2000134a
 80100b0:	2000134c 	.word	0x2000134c

080100b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6858      	ldr	r0, [r3, #4]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	3364      	adds	r3, #100	; 0x64
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	3228      	adds	r2, #40	; 0x28
 80100ce:	4611      	mov	r1, r2
 80100d0:	4798      	blx	r3
    }
 80100d2:	bf00      	nop
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
	...

080100dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80100dc:	b580      	push	{r7, lr}
 80100de:	b088      	sub	sp, #32
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
        Transition::init();
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fe fd48 	bl	800eb7c <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80100ec:	4a16      	ldr	r2, [pc, #88]	; (8010148 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 80100ee:	f107 0318 	add.w	r3, r7, #24
 80100f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80100fa:	f107 0008 	add.w	r0, r7, #8
 80100fe:	f107 0318 	add.w	r3, r7, #24
 8010102:	cb0c      	ldmia	r3, {r2, r3}
 8010104:	6879      	ldr	r1, [r7, #4]
 8010106:	f7ff fdeb 	bl	800fce0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3378      	adds	r3, #120	; 0x78
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f107 0108 	add.w	r1, r7, #8
 801011c:	4610      	mov	r0, r2
 801011e:	4798      	blx	r3
        screenContainer->add(solid);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6858      	ldr	r0, [r3, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3360      	adds	r3, #96	; 0x60
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	3228      	adds	r2, #40	; 0x28
 8010132:	4611      	mov	r1, r2
 8010134:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8010136:	f107 0308 	add.w	r3, r7, #8
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fbf6 	bl	800f92c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8010140:	bf00      	nop
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	0802630c 	.word	0x0802630c

0801014c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
        switch (direction)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	7f1b      	ldrb	r3, [r3, #28]
 801015a:	2b03      	cmp	r3, #3
 801015c:	d83a      	bhi.n	80101d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 801015e:	a201      	add	r2, pc, #4	; (adr r2, 8010164 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8010160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010164:	080101a5 	.word	0x080101a5
 8010168:	080101bf 	.word	0x080101bf
 801016c:	08010175 	.word	0x08010175
 8010170:	0801018b 	.word	0x0801018b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3354      	adds	r3, #84	; 0x54
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a18      	ldr	r2, [pc, #96]	; (80101e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 801017e:	8812      	ldrh	r2, [r2, #0]
 8010180:	b211      	sxth	r1, r2
 8010182:	2200      	movs	r2, #0
 8010184:	6838      	ldr	r0, [r7, #0]
 8010186:	4798      	blx	r3
            break;
 8010188:	e025      	b.n	80101d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	3354      	adds	r3, #84	; 0x54
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a13      	ldr	r2, [pc, #76]	; (80101e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8010194:	8812      	ldrh	r2, [r2, #0]
 8010196:	4252      	negs	r2, r2
 8010198:	b292      	uxth	r2, r2
 801019a:	b211      	sxth	r1, r2
 801019c:	2200      	movs	r2, #0
 801019e:	6838      	ldr	r0, [r7, #0]
 80101a0:	4798      	blx	r3
            break;
 80101a2:	e018      	b.n	80101d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3354      	adds	r3, #84	; 0x54
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a0d      	ldr	r2, [pc, #52]	; (80101e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80101ae:	8812      	ldrh	r2, [r2, #0]
 80101b0:	4252      	negs	r2, r2
 80101b2:	b292      	uxth	r2, r2
 80101b4:	b212      	sxth	r2, r2
 80101b6:	2100      	movs	r1, #0
 80101b8:	6838      	ldr	r0, [r7, #0]
 80101ba:	4798      	blx	r3
            break;
 80101bc:	e00b      	b.n	80101d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3354      	adds	r3, #84	; 0x54
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a07      	ldr	r2, [pc, #28]	; (80101e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80101c8:	8812      	ldrh	r2, [r2, #0]
 80101ca:	b212      	sxth	r2, r2
 80101cc:	2100      	movs	r1, #0
 80101ce:	6838      	ldr	r0, [r7, #0]
 80101d0:	4798      	blx	r3
            break;
 80101d2:	e000      	b.n	80101d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 80101d4:	bf00      	nop
    }
 80101d6:	bf00      	nop
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	2000134a 	.word	0x2000134a
 80101e4:	2000134c 	.word	0x2000134c

080101e8 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
        }
 80101f2:	bf00      	nop
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
	...

08010200 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af02      	add	r7, sp, #8
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801020a:	4b08      	ldr	r3, [pc, #32]	; (801022c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 801020c:	881b      	ldrh	r3, [r3, #0]
 801020e:	b21a      	sxth	r2, r3
 8010210:	4b07      	ldr	r3, [pc, #28]	; (8010230 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 8010212:	881b      	ldrh	r3, [r3, #0]
 8010214:	b21b      	sxth	r3, r3
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	4613      	mov	r3, r2
 801021a:	2200      	movs	r2, #0
 801021c:	2100      	movs	r1, #0
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7fe f9f1 	bl	800e606 <_ZN8touchgfx4RectC1Essss>
        }
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	3708      	adds	r7, #8
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	2000134a 	.word	0x2000134a
 8010230:	2000134c 	.word	0x2000134c

08010234 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	68d2      	ldr	r2, [r2, #12]
 8010246:	1052      	asrs	r2, r2, #1
 8010248:	1898      	adds	r0, r3, r2
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b00      	cmp	r3, #0
 8010254:	d102      	bne.n	801025c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	e00a      	b.n	8010272 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	68d2      	ldr	r2, [r2, #12]
 8010264:	1052      	asrs	r2, r2, #1
 8010266:	4413      	add	r3, r2
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	6892      	ldr	r2, [r2, #8]
 801026e:	4413      	add	r3, r2
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6839      	ldr	r1, [r7, #0]
 8010274:	4798      	blx	r3
    }
 8010276:	bf00      	nop
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801027e:	b480      	push	{r7}
 8010280:	b083      	sub	sp, #12
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d010      	beq.n	80102b0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d107      	bne.n	80102a6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	f003 0301 	and.w	r3, r3, #1
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e000      	b.n	80102a8 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80102a6:	2300      	movs	r3, #0
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d001      	beq.n	80102b0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80102ac:	2301      	movs	r3, #1
 80102ae:	e000      	b.n	80102b2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80102b0:	2300      	movs	r3, #0
    }
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr
	...

080102c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 80102c0:	b590      	push	{r4, r7, lr}
 80102c2:	b093      	sub	sp, #76	; 0x4c
 80102c4:	af02      	add	r7, sp, #8
 80102c6:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fe fc42 	bl	800eb54 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7a9b      	ldrb	r3, [r3, #10]
 80102d4:	3301      	adds	r3, #1
 80102d6:	b2da      	uxtb	r2, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7a9a      	ldrb	r2, [r3, #10]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	7a5b      	ldrb	r3, [r3, #9]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d82b      	bhi.n	8010340 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	7a9b      	ldrb	r3, [r3, #10]
 80102ec:	b298      	uxth	r0, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	7a5b      	ldrb	r3, [r3, #9]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	2100      	movs	r1, #0
 80102fc:	f008 fa68 	bl	80187d0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8010300:	4603      	mov	r3, r0
 8010302:	461a      	mov	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801030e:	b29b      	uxth	r3, r3
 8010310:	f003 0301 	and.w	r3, r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d019      	beq.n	801034e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010320:	b29b      	uxth	r3, r3
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8010328:	2a00      	cmp	r2, #0
 801032a:	dd01      	ble.n	8010330 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x70>
 801032c:	2201      	movs	r2, #1
 801032e:	e001      	b.n	8010334 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
 8010330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010334:	4413      	add	r3, r2
 8010336:	b29b      	uxth	r3, r3
 8010338:	b21a      	sxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	81da      	strh	r2, [r3, #14]
 801033e:	e006      	b.n	801034e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	729a      	strb	r2, [r3, #10]
            return;
 801034c:	e080      	b.n	8010450 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
                break;
            }
        case WEST:
            {
                //cover must have width of remaining part and start after uncovered
                const uint16_t prevSolidPos = solid.getX();
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3310      	adds	r3, #16
 8010352:	4618      	mov	r0, r3
 8010354:	f7fe fa9d 	bl	800e892 <_ZNK8touchgfx8Drawable4getXEv>
 8010358:	4603      	mov	r3, r0
 801035a:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f103 0010 	add.w	r0, r3, #16
 8010362:	4b3d      	ldr	r3, [pc, #244]	; (8010458 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 8010364:	881a      	ldrh	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801036c:	b29b      	uxth	r3, r3
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	b29b      	uxth	r3, r3
 8010372:	b21b      	sxth	r3, r3
 8010374:	4619      	mov	r1, r3
 8010376:	f7fe fad5 	bl	800e924 <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f103 0210 	add.w	r2, r3, #16
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010386:	4619      	mov	r1, r3
 8010388:	4610      	mov	r0, r2
 801038a:	f7fe fa8f 	bl	800e8ac <_ZN8touchgfx8Drawable4setXEs>

                //invalidate the uncovered part
                const uint16_t delta = calculatedValue - prevSolidPos;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010394:	b29a      	uxth	r2, r3
 8010396:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010398:	1ad3      	subs	r3, r2, r3
 801039a:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 801039c:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80103a0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80103a4:	4b2d      	ldr	r3, [pc, #180]	; (801045c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x19c>)
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	b21b      	sxth	r3, r3
 80103aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	4613      	mov	r3, r2
 80103b2:	2200      	movs	r2, #0
 80103b4:	f7fe f927 	bl	800e606 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	4618      	mov	r0, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3310      	adds	r3, #16
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80103cc:	4611      	mov	r1, r2
 80103ce:	4798      	blx	r3
                break;
 80103d0:	bf00      	nop
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        //
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	7a9b      	ldrb	r3, [r3, #10]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d13a      	bne.n	8010450 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
 80103da:	4b21      	ldr	r3, [pc, #132]	; (8010460 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a0>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d036      	beq.n	8010450 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x190>
        {
            Rect rect = solid.getRect(); //part to copy between buffers
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	3310      	adds	r3, #16
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fe fa1a 	bl	800e820 <_ZNK8touchgfx8Drawable7getRectEv>
 80103ec:	4602      	mov	r2, r0
 80103ee:	f107 0310 	add.w	r3, r7, #16
 80103f2:	6810      	ldr	r0, [r2, #0]
 80103f4:	6851      	ldr	r1, [r2, #4]
 80103f6:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80103f8:	f7fe fb4e 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 80103fc:	4602      	mov	r2, r0
 80103fe:	6813      	ldr	r3, [r2, #0]
 8010400:	3328      	adds	r3, #40	; 0x28
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4610      	mov	r0, r2
 8010406:	4798      	blx	r3
 8010408:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 801040a:	f107 0308 	add.w	r3, r7, #8
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe f8e2 	bl	800e5d8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8010418:	2300      	movs	r3, #0
 801041a:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 801041c:	4b0e      	ldr	r3, [pc, #56]	; (8010458 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	b21b      	sxth	r3, r3
 8010422:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x19c>)
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	b21b      	sxth	r3, r3
 801042a:	81fb      	strh	r3, [r7, #14]

            //Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 801042c:	f7fe fb34 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8010430:	f7fe fb3e 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8010434:	6803      	ldr	r3, [r0, #0]
 8010436:	330c      	adds	r3, #12
 8010438:	681c      	ldr	r4, [r3, #0]
 801043a:	f107 0110 	add.w	r1, r7, #16
 801043e:	f107 0208 	add.w	r2, r7, #8
 8010442:	2300      	movs	r3, #0
 8010444:	9301      	str	r3, [sp, #4]
 8010446:	23ff      	movs	r3, #255	; 0xff
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	460b      	mov	r3, r1
 801044c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801044e:	47a0      	blx	r4
        }
    }
 8010450:	3744      	adds	r7, #68	; 0x44
 8010452:	46bd      	mov	sp, r7
 8010454:	bd90      	pop	{r4, r7, pc}
 8010456:	bf00      	nop
 8010458:	2000134a 	.word	0x2000134a
 801045c:	2000134c 	.word	0x2000134c
 8010460:	20001354 	.word	0x20001354

08010464 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6858      	ldr	r0, [r3, #4]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	3364      	adds	r3, #100	; 0x64
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	3210      	adds	r2, #16
 801047e:	4611      	mov	r1, r2
 8010480:	4798      	blx	r3
    }
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fb71 	bl	800eb7c <_ZN8touchgfx10Transition4initEv>
        //add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6858      	ldr	r0, [r3, #4]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3360      	adds	r3, #96	; 0x60
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	3210      	adds	r2, #16
 80104ac:	4611      	mov	r1, r2
 80104ae:	4798      	blx	r3
    }
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
    {
        //nop
    }
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
        }
 80104d6:	bf00      	nop
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b084      	sub	sp, #16
 80104e6:	af02      	add	r7, sp, #8
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	4613      	mov	r3, r2
 80104fc:	2200      	movs	r2, #0
 80104fe:	2100      	movs	r1, #0
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7fe f880 	bl	800e606 <_ZN8touchgfx4RectC1Essss>
        }
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801050e:	b580      	push	{r7, lr}
 8010510:	b082      	sub	sp, #8
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	68d2      	ldr	r2, [r2, #12]
 801051e:	1052      	asrs	r2, r2, #1
 8010520:	1899      	adds	r1, r3, r2
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	d102      	bne.n	8010534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	e00a      	b.n	801054a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	68d2      	ldr	r2, [r2, #12]
 801053c:	1052      	asrs	r2, r2, #1
 801053e:	4413      	add	r3, r2
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	6892      	ldr	r2, [r2, #8]
 8010546:	4413      	add	r3, r2
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4608      	mov	r0, r1
 801054c:	4798      	blx	r3
    }
 801054e:	bf00      	nop
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010556:	b480      	push	{r7}
 8010558:	b083      	sub	sp, #12
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d010      	beq.n	8010588 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d107      	bne.n	801057e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801057a:	2301      	movs	r3, #1
 801057c:	e000      	b.n	8010580 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801057e:	2300      	movs	r3, #0
 8010580:	2b01      	cmp	r3, #1
 8010582:	d001      	beq.n	8010588 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010584:	2301      	movs	r3, #1
 8010586:	e000      	b.n	801058a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010588:	2300      	movs	r3, #0
    }
 801058a:	4618      	mov	r0, r3
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8010596:	b480      	push	{r7}
 8010598:	b083      	sub	sp, #12
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	6039      	str	r1, [r7, #0]
        color = col;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	601a      	str	r2, [r3, #0]
    }
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	887a      	ldrh	r2, [r7, #2]
 80105c4:	801a      	strh	r2, [r3, #0]
    {
    }
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    {
 80105dc:	4a06      	ldr	r2, [pc, #24]	; (80105f8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3304      	adds	r3, #4
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 fc5c 	bl	8010ea4 <_ZN8touchgfx9ContainerD1Ev>
    }
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4618      	mov	r0, r3
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08053978 	.word	0x08053978

080105fc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
    }
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7ff ffe5 	bl	80105d4 <_ZN8touchgfx6ScreenD1Ev>
 801060a:	213c      	movs	r1, #60	; 0x3c
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f014 fbd1 	bl	8024db4 <_ZdlPvj>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
    {
    }
 8010624:	bf00      	nop
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
    {
    }
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
    {
    }
 801064c:	bf00      	nop
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr

08010658 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
    {
    }
 8010660:	bf00      	nop
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	460b      	mov	r3, r1
 8010676:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	3304      	adds	r3, #4
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f003 ffc1 	bl	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801069a:	bf00      	nop
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80106b2:	bf00      	nop
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
	...

080106c0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	4a05      	ldr	r2, [pc, #20]	; (80106e0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fe fba5 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4618      	mov	r0, r3
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	080531f4 	.word	0x080531f4

080106e4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f7ff ffe7 	bl	80106c0 <_ZN8touchgfx14AbstractButtonD1Ev>
 80106f2:	2130      	movs	r1, #48	; 0x30
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f014 fb5d 	bl	8024db4 <_ZdlPvj>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4618      	mov	r0, r3
 8010710:	2326      	movs	r3, #38	; 0x26
 8010712:	461a      	mov	r2, r3
 8010714:	2100      	movs	r1, #0
 8010716:	f014 fc02 	bl	8024f1e <memset>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe fb6d 	bl	800edfc <_ZN8touchgfx6WidgetC1Ev>
 8010722:	4a0b      	ldr	r2, [pc, #44]	; (8010750 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	22ff      	movs	r2, #255	; 0xff
 801072c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3328      	adds	r3, #40	; 0x28
 8010734:	2100      	movs	r1, #0
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff ff2d 	bl	8010596 <_ZN8touchgfx9colortypeC1Em>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	0805343c 	.word	0x0805343c

08010754 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	460b      	mov	r3, r1
 801077a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 801077c:	4a06      	ldr	r2, [pc, #24]	; (8010798 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	887a      	ldrh	r2, [r7, #2]
 8010786:	809a      	strh	r2, [r3, #4]
    }
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4618      	mov	r0, r3
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop
 8010798:	0805121c 	.word	0x0805121c

0801079c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4618      	mov	r0, r3
 80107a8:	2326      	movs	r3, #38	; 0x26
 80107aa:	461a      	mov	r2, r3
 80107ac:	2100      	movs	r1, #0
 80107ae:	f014 fbb6 	bl	8024f1e <memset>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe fb21 	bl	800edfc <_ZN8touchgfx6WidgetC1Ev>
 80107ba:	4a14      	ldr	r2, [pc, #80]	; (801080c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	3328      	adds	r3, #40	; 0x28
 80107c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff ffd1 	bl	8010770 <_ZN8touchgfx9TypedTextC1Et>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	3330      	adds	r3, #48	; 0x30
 80107d2:	2100      	movs	r1, #0
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7ff fede 	bl	8010596 <_ZN8touchgfx9colortypeC1Em>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	869a      	strh	r2, [r3, #52]	; 0x34
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	22ff      	movs	r2, #255	; 0xff
 80107e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	08053390 	.word	0x08053390

08010810 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	889a      	ldrh	r2, [r3, #4]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	809a      	strh	r2, [r3, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3334      	adds	r3, #52	; 0x34
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff ffe5 	bl	8010810 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f820 	bl	801088c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 801084c:	bf00      	nop
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010864:	bf00      	nop
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	683a      	ldr	r2, [r7, #0]
 801087e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010880:	bf00      	nop
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 801088c:	b590      	push	{r4, r7, lr}
 801088e:	b08b      	sub	sp, #44	; 0x2c
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	3334      	adds	r3, #52	; 0x34
 8010898:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	889b      	ldrh	r3, [r3, #4]
 801089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108a2:	4293      	cmp	r3, r2
 80108a4:	bf14      	ite	ne
 80108a6:	2301      	movne	r3, #1
 80108a8:	2300      	moveq	r3, #0
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d06f      	beq.n	8010990 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	3334      	adds	r3, #52	; 0x34
 80108b4:	613b      	str	r3, [r7, #16]
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80108ba:	4b39      	ldr	r3, [pc, #228]	; (80109a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d105      	bne.n	80108ce <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80108c2:	4b38      	ldr	r3, [pc, #224]	; (80109a4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80108c4:	4a38      	ldr	r2, [pc, #224]	; (80109a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80108c6:	21b1      	movs	r1, #177	; 0xb1
 80108c8:	4838      	ldr	r0, [pc, #224]	; (80109ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80108ca:	f014 fa9f 	bl	8024e0c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	889a      	ldrh	r2, [r3, #4]
 80108d2:	4b37      	ldr	r3, [pc, #220]	; (80109b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d305      	bcc.n	80108e6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 80108da:	4b36      	ldr	r3, [pc, #216]	; (80109b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80108dc:	4a32      	ldr	r2, [pc, #200]	; (80109a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80108de:	21b2      	movs	r1, #178	; 0xb2
 80108e0:	4832      	ldr	r0, [pc, #200]	; (80109ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80108e2:	f014 fa93 	bl	8024e0c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80108e6:	4b34      	ldr	r3, [pc, #208]	; (80109b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	4b2d      	ldr	r3, [pc, #180]	; (80109a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	889b      	ldrh	r3, [r3, #4]
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	440b      	add	r3, r1
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	009b      	lsls	r3, r3, #2
 80108fa:	4413      	add	r3, r2
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3334      	adds	r3, #52	; 0x34
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801090a:	4b25      	ldr	r3, [pc, #148]	; (80109a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d105      	bne.n	801091e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 8010912:	4b24      	ldr	r3, [pc, #144]	; (80109a4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 8010914:	4a24      	ldr	r2, [pc, #144]	; (80109a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010916:	21b1      	movs	r1, #177	; 0xb1
 8010918:	4824      	ldr	r0, [pc, #144]	; (80109ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801091a:	f014 fa77 	bl	8024e0c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	889a      	ldrh	r2, [r3, #4]
 8010922:	4b23      	ldr	r3, [pc, #140]	; (80109b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	429a      	cmp	r2, r3
 8010928:	d305      	bcc.n	8010936 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 801092a:	4b22      	ldr	r3, [pc, #136]	; (80109b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 801092c:	4a1e      	ldr	r2, [pc, #120]	; (80109a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 801092e:	21b2      	movs	r1, #178	; 0xb2
 8010930:	481e      	ldr	r0, [pc, #120]	; (80109ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010932:	f014 fa6b 	bl	8024e0c <__assert_func>
        return texts->getText(typedTextId);
 8010936:	4b21      	ldr	r3, [pc, #132]	; (80109bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	889b      	ldrh	r3, [r3, #4]
 801093e:	4619      	mov	r1, r3
 8010940:	4610      	mov	r0, r2
 8010942:	f001 f89f 	bl	8011a84 <_ZNK8touchgfx5Texts7getTextEt>
 8010946:	4603      	mov	r3, r0
 8010948:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3328      	adds	r3, #40	; 0x28
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	6a39      	ldr	r1, [r7, #32]
 8010954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010956:	4798      	blx	r3
 8010958:	4603      	mov	r3, r0
 801095a:	b2dc      	uxtb	r4, r3
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3340      	adds	r3, #64	; 0x40
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6a39      	ldr	r1, [r7, #32]
 8010966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010968:	4798      	blx	r3
 801096a:	4603      	mov	r3, r0
 801096c:	b2db      	uxtb	r3, r3
 801096e:	fb14 f303 	smulbb	r3, r4, r3
 8010972:	b2dc      	uxtb	r4, r3
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	3324      	adds	r3, #36	; 0x24
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	6a39      	ldr	r1, [r7, #32]
 801097e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010980:	4798      	blx	r3
 8010982:	4603      	mov	r3, r0
 8010984:	4423      	add	r3, r4
 8010986:	b2da      	uxtb	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 801098e:	e003      	b.n	8010998 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8010998:	bf00      	nop
 801099a:	372c      	adds	r7, #44	; 0x2c
 801099c:	46bd      	mov	sp, r7
 801099e:	bd90      	pop	{r4, r7, pc}
 80109a0:	200013c8 	.word	0x200013c8
 80109a4:	08026314 	.word	0x08026314
 80109a8:	08051990 	.word	0x08051990
 80109ac:	08026358 	.word	0x08026358
 80109b0:	200013cc 	.word	0x200013cc
 80109b4:	0802639c 	.word	0x0802639c
 80109b8:	200013d0 	.word	0x200013d0
 80109bc:	200013d4 	.word	0x200013d4

080109c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	4a05      	ldr	r2, [pc, #20]	; (80109e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7ff fdff 	bl	80105d4 <_ZN8touchgfx6ScreenD1Ev>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0805194c 	.word	0x0805194c

080109e4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7ff ffe7 	bl	80109c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80109f2:	2140      	movs	r1, #64	; 0x40
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f014 f9dd 	bl	8024db4 <_ZdlPvj>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	4a12      	ldr	r2, [pc, #72]	; (8010a58 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f000 fa21 	bl	8010e60 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	33f4      	adds	r3, #244	; 0xf4
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 fb16 	bl	8011054 <_ZN8touchgfx6SliderD1Ev>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	33ac      	adds	r3, #172	; 0xac
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 fac7 	bl	8010fc0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3370      	adds	r3, #112	; 0x70
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fa78 	bl	8010f2c <_ZN8touchgfx8TextAreaD1Ev>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3340      	adds	r3, #64	; 0x40
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 fa51 	bl	8010ee8 <_ZN8touchgfx3BoxD1Ev>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ff ffb9 	bl	80109c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	08051900 	.word	0x08051900

08010a5c <_ZN15Screen1ViewBaseD0Ev>:
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7ff ffcd 	bl	8010a04 <_ZN15Screen1ViewBaseD1Ev>
 8010a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f014 f9a0 	bl	8024db4 <_ZdlPvj>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b082      	sub	sp, #8
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010a86:	f006 fd1f 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8010a8a:	4603      	mov	r3, r0
    }
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010a94:	b590      	push	{r4, r7, lr}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	71fb      	strb	r3, [r7, #7]
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	71bb      	strb	r3, [r7, #6]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010aa6:	f7fd fff7 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d105      	bne.n	8010abc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	; (8010adc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010ab2:	4a0b      	ldr	r2, [pc, #44]	; (8010ae0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010ab4:	2135      	movs	r1, #53	; 0x35
 8010ab6:	480b      	ldr	r0, [pc, #44]	; (8010ae4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010ab8:	f014 f9a8 	bl	8024e0c <__assert_func>
 8010abc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010abe:	f7fd fff7 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8010ac2:	6803      	ldr	r3, [r0, #0]
 8010ac4:	3328      	adds	r3, #40	; 0x28
 8010ac6:	681c      	ldr	r4, [r3, #0]
 8010ac8:	797b      	ldrb	r3, [r7, #5]
 8010aca:	79ba      	ldrb	r2, [r7, #6]
 8010acc:	79f9      	ldrb	r1, [r7, #7]
 8010ace:	47a0      	blx	r4
 8010ad0:	4603      	mov	r3, r0
    }
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	370c      	adds	r7, #12
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd90      	pop	{r4, r7, pc}
 8010ada:	bf00      	nop
 8010adc:	080263f0 	.word	0x080263f0
 8010ae0:	080519c0 	.word	0x080519c0
 8010ae4:	08026434 	.word	0x08026434

08010ae8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase() :
 8010ae8:	b590      	push	{r4, r7, lr}
 8010aea:	b095      	sub	sp, #84	; 0x54
 8010aec:	af02      	add	r7, sp, #8
 8010aee:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 f94e 	bl	8010d94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8010af8:	4a94      	ldr	r2, [pc, #592]	; (8010d4c <_ZN15Screen1ViewBaseC1Ev+0x264>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3340      	adds	r3, #64	; 0x40
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7ff fdfe 	bl	8010704 <_ZN8touchgfx3BoxC1Ev>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3370      	adds	r3, #112	; 0x70
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff fe45 	bl	801079c <_ZN8touchgfx8TextAreaC1Ev>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	33ac      	adds	r3, #172	; 0xac
 8010b16:	4618      	mov	r0, r3
 8010b18:	f005 fccc 	bl	80164b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	33f4      	adds	r3, #244	; 0xf4
 8010b20:	4618      	mov	r0, r3
 8010b22:	f004 f92d 	bl	8014d80 <_ZN8touchgfx6SliderC1Ev>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8010b2c:	4b88      	ldr	r3, [pc, #544]	; (8010d50 <_ZN15Screen1ViewBaseC1Ev+0x268>)
 8010b2e:	613b      	str	r3, [r7, #16]
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	f107 0310 	add.w	r3, r7, #16
 8010b38:	cb0c      	ldmia	r3, {r2, r3}
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	f000 f950 	bl	8010de0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010b46:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010b50:	2200      	movs	r2, #0
 8010b52:	2100      	movs	r1, #0
 8010b54:	f7fd fe70 	bl	800e838 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2100      	movs	r1, #0
 8010b62:	2000      	movs	r0, #0
 8010b64:	f7ff ff96 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	f7ff fdf1 	bl	8010754 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(247, 94);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	3370      	adds	r3, #112	; 0x70
 8010b76:	225e      	movs	r2, #94	; 0x5e
 8010b78:	21f7      	movs	r1, #247	; 0xf7
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fd feb4 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(242, 12, 12));
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010b86:	220c      	movs	r2, #12
 8010b88:	210c      	movs	r1, #12
 8010b8a:	20f2      	movs	r0, #242	; 0xf2
 8010b8c:	f7ff ff82 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b90:	4603      	mov	r3, r0
 8010b92:	63fc      	str	r4, [r7, #60]	; 0x3c
 8010b94:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8010b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b98:	68fa      	ldr	r2, [r7, #12]
 8010b9a:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3370      	adds	r3, #112	; 0x70
 8010ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8010ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010baa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bae:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010bb6:	f107 0318 	add.w	r3, r7, #24
 8010bba:	2102      	movs	r1, #2
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff fdd7 	bl	8010770 <_ZN8touchgfx9TypedTextC1Et>
 8010bc2:	f107 0318 	add.w	r3, r7, #24
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f005 fa49 	bl	8016060 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010bce:	f107 0318 	add.w	r3, r7, #24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fd fae2 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>

    btnHome.setXY(630, 420);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	33ac      	adds	r3, #172	; 0xac
 8010bdc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8010be0:	f240 2176 	movw	r1, #630	; 0x276
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fd fe7f 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    btnHome.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010bf0:	f107 0320 	add.w	r3, r7, #32
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff fcdc 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8010bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c00:	2101      	movs	r1, #1
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fcd6 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8010c08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010c0c:	f107 0320 	add.w	r3, r7, #32
 8010c10:	4619      	mov	r1, r3
 8010c12:	4620      	mov	r0, r4
 8010c14:	f005 fa5e 	bl	80160d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnHome.setLabelText(touchgfx::TypedText(T_SINGLEUSEID6));
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c22:	2103      	movs	r1, #3
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff fda3 	bl	8010770 <_ZN8touchgfx9TypedTextC1Et>
 8010c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7ff fdfd 	bl	8010830 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fd faae 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>
    btnHome.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010c46:	22ff      	movs	r2, #255	; 0xff
 8010c48:	21ff      	movs	r1, #255	; 0xff
 8010c4a:	20ff      	movs	r0, #255	; 0xff
 8010c4c:	f7ff ff22 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c50:	4603      	mov	r3, r0
 8010c52:	4619      	mov	r1, r3
 8010c54:	4620      	mov	r0, r4
 8010c56:	f7ff fdfd 	bl	8010854 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    btnHome.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010c60:	22ff      	movs	r2, #255	; 0xff
 8010c62:	21ff      	movs	r1, #255	; 0xff
 8010c64:	20ff      	movs	r0, #255	; 0xff
 8010c66:	f7ff ff15 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f7ff fdfe 	bl	8010870 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    btnHome.setAction(buttonCallback);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8010c80:	4619      	mov	r1, r3
 8010c82:	4610      	mov	r0, r2
 8010c84:	f7ff fd0d 	bl	80106a2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    slider1.setXY(71, 305);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	33f4      	adds	r3, #244	; 0xf4
 8010c8c:	f240 1231 	movw	r2, #305	; 0x131
 8010c90:	2147      	movs	r1, #71	; 0x47
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fd fe28 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8010c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ca2:	2103      	movs	r1, #3
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fc85 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8010caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010cae:	2104      	movs	r1, #4
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ff fc7f 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8010cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010cba:	2102      	movs	r1, #2
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fc79 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8010cc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010cc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010cca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f004 f8aa 	bl	8014e28 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(2, 22, 0, 0, 621);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8010cda:	f240 236d 	movw	r3, #621	; 0x26d
 8010cde:	9301      	str	r3, [sp, #4]
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	2216      	movs	r2, #22
 8010ce8:	2102      	movs	r1, #2
 8010cea:	f003 fedf 	bl	8014aac <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 100);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	33f4      	adds	r3, #244	; 0xf4
 8010cf2:	2264      	movs	r2, #100	; 0x64
 8010cf4:	2100      	movs	r1, #0
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f003 fe43 	bl	8014982 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	33f4      	adds	r3, #244	; 0xf4
 8010d00:	2100      	movs	r1, #0
 8010d02:	4618      	mov	r0, r3
 8010d04:	f003 fdc9 	bl	801489a <_ZN8touchgfx6Slider8setValueEi>

    add(__background);
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	3340      	adds	r3, #64	; 0x40
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4610      	mov	r0, r2
 8010d12:	f7ff fcb7 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	3370      	adds	r3, #112	; 0x70
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4610      	mov	r0, r2
 8010d20:	f7ff fcb0 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnHome);
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	33ac      	adds	r3, #172	; 0xac
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	f7ff fca9 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider1);
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	33f4      	adds	r3, #244	; 0xf4
 8010d38:	4619      	mov	r1, r3
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	f7ff fca2 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4618      	mov	r0, r3
 8010d44:	374c      	adds	r7, #76	; 0x4c
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd90      	pop	{r4, r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	08051900 	.word	0x08051900
 8010d50:	08010d69 	.word	0x08010d69

08010d54 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]

}
 8010d5c:	bf00      	nop
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
    if (&src == &btnHome)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	33ac      	adds	r3, #172	; 0xac
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d106      	bne.n	8010d8a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When btnHome clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fe7e 	bl	8010a7e <_ZN15Screen1ViewBase11applicationEv>
 8010d82:	4603      	mov	r3, r0
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fe f90f 	bl	800efa8 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 8010d8a:	bf00      	nop
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
	...

08010d94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f007 fb94 	bl	80184cc <_ZN8touchgfx6ScreenC1Ev>
 8010da4:	4a05      	ldr	r2, [pc, #20]	; (8010dbc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	601a      	str	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2200      	movs	r2, #0
 8010dae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4618      	mov	r0, r3
 8010db4:	3708      	adds	r7, #8
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	0805194c 	.word	0x0805194c

08010dc0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	4a04      	ldr	r2, [pc, #16]	; (8010ddc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	601a      	str	r2, [r3, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	08051980 	.word	0x08051980

08010de0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	4639      	mov	r1, r7
 8010dec:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff ffe4 	bl	8010dc0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010df8:	4a08      	ldr	r2, [pc, #32]	; (8010e1c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	3308      	adds	r3, #8
 8010e08:	463a      	mov	r2, r7
 8010e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	4618      	mov	r0, r3
 8010e16:	3710      	adds	r7, #16
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	08051934 	.word	0x08051934

08010e20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
    }
 8010e28:	4a04      	ldr	r2, [pc, #16]	; (8010e3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	08051980 	.word	0x08051980

08010e40 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
    }
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff ffe9 	bl	8010e20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010e4e:	2104      	movs	r1, #4
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f013 ffaf 	bl	8024db4 <_ZdlPvj>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	4a05      	ldr	r2, [pc, #20]	; (8010e80 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff ffd5 	bl	8010e20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	08051934 	.word	0x08051934

08010e84 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7ff ffe7 	bl	8010e60 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010e92:	2110      	movs	r1, #16
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f013 ff8d 	bl	8024db4 <_ZdlPvj>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	4a05      	ldr	r2, [pc, #20]	; (8010ec4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fd fc93 	bl	800e7e0 <_ZN8touchgfx8DrawableD1Ev>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	08052558 	.word	0x08052558

08010ec8 <_ZN8touchgfx9ContainerD0Ev>:
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7ff ffe7 	bl	8010ea4 <_ZN8touchgfx9ContainerD1Ev>
 8010ed6:	212c      	movs	r1, #44	; 0x2c
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f013 ff6b 	bl	8024db4 <_ZdlPvj>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	4a05      	ldr	r2, [pc, #20]	; (8010f08 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fd ff91 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	0805343c 	.word	0x0805343c

08010f0c <_ZN8touchgfx3BoxD0Ev>:
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f7ff ffe7 	bl	8010ee8 <_ZN8touchgfx3BoxD1Ev>
 8010f1a:	2130      	movs	r1, #48	; 0x30
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f013 ff49 	bl	8024db4 <_ZdlPvj>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	4a08      	ldr	r2, [pc, #32]	; (8010f58 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3328      	adds	r3, #40	; 0x28
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fd f92c 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fd ff6a 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	08053390 	.word	0x08053390

08010f5c <_ZN8touchgfx8TextAreaD0Ev>:
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7ff ffe1 	bl	8010f2c <_ZN8touchgfx8TextAreaD1Ev>
 8010f6a:	213c      	movs	r1, #60	; 0x3c
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f013 ff21 	bl	8024db4 <_ZdlPvj>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	4a05      	ldr	r2, [pc, #20]	; (8010f9c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	601a      	str	r2, [r3, #0]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff fb97 	bl	80106c0 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	08053508 	.word	0x08053508

08010fa0 <_ZN8touchgfx6ButtonD0Ev>:
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7ff ffe7 	bl	8010f7c <_ZN8touchgfx6ButtonD1Ev>
 8010fae:	2134      	movs	r1, #52	; 0x34
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f013 feff 	bl	8024db4 <_ZdlPvj>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	4a08      	ldr	r2, [pc, #32]	; (8010fec <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	601a      	str	r2, [r3, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	3334      	adds	r3, #52	; 0x34
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fd f8e2 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff ffce 	bl	8010f7c <_ZN8touchgfx6ButtonD1Ev>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	08053618 	.word	0x08053618

08010ff0 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff ffe1 	bl	8010fc0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010ffe:	2148      	movs	r1, #72	; 0x48
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f013 fed7 	bl	8024db4 <_ZdlPvj>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	4618      	mov	r0, r3
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	4a05      	ldr	r2, [pc, #20]	; (8011030 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	601a      	str	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	f7fd fefd 	bl	800ee20 <_ZN8touchgfx6WidgetD1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	080535ac 	.word	0x080535ac

08011034 <_ZN8touchgfx5ImageD0Ev>:
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7ff ffe7 	bl	8011010 <_ZN8touchgfx5ImageD1Ev>
 8011042:	212c      	movs	r1, #44	; 0x2c
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f013 feb5 	bl	8024db4 <_ZdlPvj>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN8touchgfx6SliderD1Ev>:
 * indicator. The other is used on the other side. They can be used in indicating the
 * part of the slider value range that is currently selected.
 *
 * The slider operates on an integer value range that can be set by the user.
 */
class Slider : public Container
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	4a0f      	ldr	r2, [pc, #60]	; (801109c <_ZN8touchgfx6SliderD1Ev+0x48>)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	33c0      	adds	r3, #192	; 0xc0
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff ff1c 	bl	8010ea4 <_ZN8touchgfx9ContainerD1Ev>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3394      	adds	r3, #148	; 0x94
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff ffcd 	bl	8011010 <_ZN8touchgfx5ImageD1Ev>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3368      	adds	r3, #104	; 0x68
 801107a:	4618      	mov	r0, r3
 801107c:	f7ff ffc8 	bl	8011010 <_ZN8touchgfx5ImageD1Ev>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	333c      	adds	r3, #60	; 0x3c
 8011084:	4618      	mov	r0, r3
 8011086:	f7ff ffc3 	bl	8011010 <_ZN8touchgfx5ImageD1Ev>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff ff09 	bl	8010ea4 <_ZN8touchgfx9ContainerD1Ev>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	0805286c 	.word	0x0805286c

080110a0 <_ZN8touchgfx6SliderD0Ev>:
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7ff ffd3 	bl	8011054 <_ZN8touchgfx6SliderD1Ev>
 80110ae:	21fc      	movs	r1, #252	; 0xfc
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f013 fe7f 	bl	8024db4 <_ZdlPvj>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	68d2      	ldr	r2, [r2, #12]
 80110d2:	1052      	asrs	r2, r2, #1
 80110d4:	1898      	adds	r0, r3, r2
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d102      	bne.n	80110e8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	e00a      	b.n	80110fe <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	68d2      	ldr	r2, [r2, #12]
 80110f0:	1052      	asrs	r2, r2, #1
 80110f2:	4413      	add	r3, r2
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	6892      	ldr	r2, [r2, #8]
 80110fa:	4413      	add	r3, r2
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	4798      	blx	r3
    }
 8011102:	bf00      	nop
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d010      	beq.n	801113c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d107      	bne.n	8011132 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	f003 0301 	and.w	r3, r3, #1
 801112a:	2b00      	cmp	r3, #0
 801112c:	d101      	bne.n	8011132 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801112e:	2301      	movs	r3, #1
 8011130:	e000      	b.n	8011134 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011132:	2300      	movs	r3, #0
 8011134:	2b01      	cmp	r3, #1
 8011136:	d001      	beq.n	801113c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011138:	2301      	movs	r3, #1
 801113a:	e000      	b.n	801113e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801113c:	2300      	movs	r3, #0
    }
 801113e:	4618      	mov	r0, r3
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 801114a:	b480      	push	{r7}
 801114c:	b083      	sub	sp, #12
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	460b      	mov	r3, r1
 8011154:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801115e:	bf00      	nop
 8011160:	370c      	adds	r7, #12
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr
	...

0801116c <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4618      	mov	r0, r3
 8011178:	2326      	movs	r3, #38	; 0x26
 801117a:	461a      	mov	r2, r3
 801117c:	2100      	movs	r1, #0
 801117e:	f013 fece 	bl	8024f1e <memset>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4618      	mov	r0, r3
 8011186:	f7fd fe39 	bl	800edfc <_ZN8touchgfx6WidgetC1Ev>
 801118a:	4a0a      	ldr	r2, [pc, #40]	; (80111b4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	601a      	str	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	629a      	str	r2, [r3, #40]	; 0x28
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2200      	movs	r2, #0
 801119a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2101      	movs	r1, #1
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff ffd1 	bl	801114a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	080531f4 	.word	0x080531f4

080111b8 <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff ffd2 	bl	801116c <_ZN8touchgfx14AbstractButtonC1Ev>
 80111c8:	4a0c      	ldr	r2, [pc, #48]	; (80111fc <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	332e      	adds	r3, #46	; 0x2e
 80111d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff f9ec 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	3330      	adds	r3, #48	; 0x30
 80111e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff f9e5 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	22ff      	movs	r2, #255	; 0xff
 80111ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	08053508 	.word	0x08053508

08011200 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	8812      	ldrh	r2, [r2, #0]
 8011212:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	4618      	mov	r0, r3
 801121c:	f004 ff5a 	bl	80160d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8011220:	bf00      	nop
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	4a05      	ldr	r2, [pc, #20]	; (8011248 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f7ff f9cb 	bl	80105d4 <_ZN8touchgfx6ScreenD1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	08051a74 	.word	0x08051a74

0801124c <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ffe7 	bl	8011228 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801125a:	2140      	movs	r1, #64	; 0x40
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f013 fda9 	bl	8024db4 <_ZdlPvj>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	4a12      	ldr	r2, [pc, #72]	; (80112c0 <_ZN14screenViewBaseD1Ev+0x54>)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011280:	4618      	mov	r0, r3
 8011282:	f000 f9dd 	bl	8011640 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	33f0      	adds	r3, #240	; 0xf0
 801128a:	4618      	mov	r0, r3
 801128c:	f7ff fe4e 	bl	8010f2c <_ZN8touchgfx8TextAreaD1Ev>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	33a8      	adds	r3, #168	; 0xa8
 8011294:	4618      	mov	r0, r3
 8011296:	f7ff fe93 	bl	8010fc0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3370      	adds	r3, #112	; 0x70
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 f9f0 	bl	8011684 <_ZN8touchgfx12ToggleButtonD1Ev>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	3340      	adds	r3, #64	; 0x40
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7ff fe1d 	bl	8010ee8 <_ZN8touchgfx3BoxD1Ev>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ff ffb9 	bl	8011228 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	08051a24 	.word	0x08051a24

080112c4 <_ZN14screenViewBaseD0Ev>:
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff ffcd 	bl	801126c <_ZN14screenViewBaseD1Ev>
 80112d2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f013 fd6c 	bl	8024db4 <_ZdlPvj>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4618      	mov	r0, r3
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <_ZN14screenViewBase11clickBtnTogEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void clickBtnTog()
 80112e6:	b480      	push	{r7}
 80112e8:	b083      	sub	sp, #12
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 80112ee:	bf00      	nop
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <_ZN14screenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80112fa:	b580      	push	{r7, lr}
 80112fc:	b082      	sub	sp, #8
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8011302:	f006 f8e1 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8011306:	4603      	mov	r3, r0
    }
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	f7ff ff4c 	bl	80111b8 <_ZN8touchgfx6ButtonC1Ev>
 8011320:	4a07      	ldr	r2, [pc, #28]	; (8011340 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	601a      	str	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	3334      	adds	r3, #52	; 0x34
 801132a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff f940 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4618      	mov	r0, r3
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	08053260 	.word	0x08053260

08011344 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b093      	sub	sp, #76	; 0x4c
 8011348:	af02      	add	r7, sp, #8
 801134a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	f000 f940 	bl	80115d4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8011354:	4a87      	ldr	r2, [pc, #540]	; (8011574 <_ZN14screenViewBaseC1Ev+0x230>)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	601a      	str	r2, [r3, #0]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	3340      	adds	r3, #64	; 0x40
 801135e:	4618      	mov	r0, r3
 8011360:	f7ff f9d0 	bl	8010704 <_ZN8touchgfx3BoxC1Ev>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	3370      	adds	r3, #112	; 0x70
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff ffd1 	bl	8011310 <_ZN8touchgfx12ToggleButtonC1Ev>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	33a8      	adds	r3, #168	; 0xa8
 8011372:	4618      	mov	r0, r3
 8011374:	f005 f89e 	bl	80164b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	33f0      	adds	r3, #240	; 0xf0
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fa0d 	bl	801079c <_ZN8touchgfx8TextAreaC1Ev>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8011388:	4b7b      	ldr	r3, [pc, #492]	; (8011578 <_ZN14screenViewBaseC1Ev+0x234>)
 801138a:	60fb      	str	r3, [r7, #12]
 801138c:	2300      	movs	r3, #0
 801138e:	613b      	str	r3, [r7, #16]
 8011390:	f107 030c 	add.w	r3, r7, #12
 8011394:	cb0c      	ldmia	r3, {r2, r3}
 8011396:	6879      	ldr	r1, [r7, #4]
 8011398:	f000 f932 	bl	8011600 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80113a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80113ac:	2200      	movs	r2, #0
 80113ae:	2100      	movs	r1, #0
 80113b0:	f7fd fa42 	bl	800e838 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80113ba:	2200      	movs	r2, #0
 80113bc:	2100      	movs	r1, #0
 80113be:	2000      	movs	r0, #0
 80113c0:	f7ff fb68 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113c4:	4603      	mov	r3, r0
 80113c6:	4619      	mov	r1, r3
 80113c8:	4620      	mov	r0, r4
 80113ca:	f7ff f9c3 	bl	8010754 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    btnTog.setXY(580, 118);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	3370      	adds	r3, #112	; 0x70
 80113d2:	2276      	movs	r2, #118	; 0x76
 80113d4:	f44f 7111 	mov.w	r1, #580	; 0x244
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fd fa85 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    btnTog.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_ON_ID));
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80113e4:	f107 0314 	add.w	r3, r7, #20
 80113e8:	2105      	movs	r1, #5
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff f8e2 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 80113f0:	f107 0318 	add.w	r3, r7, #24
 80113f4:	2106      	movs	r1, #6
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7ff f8dc 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 80113fc:	f107 0218 	add.w	r2, r7, #24
 8011400:	f107 0314 	add.w	r3, r7, #20
 8011404:	4619      	mov	r1, r3
 8011406:	4620      	mov	r0, r4
 8011408:	f7ff fefa 	bl	8011200 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    btnTog.setAction(buttonCallback);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	f7ff f941 	bl	80106a2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    btnPage2.setXY(630, 420);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	33a8      	adds	r3, #168	; 0xa8
 8011424:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011428:	f240 2176 	movw	r1, #630	; 0x276
 801142c:	4618      	mov	r0, r3
 801142e:	f7fd fa5b 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    btnPage2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8011438:	f107 031c 	add.w	r3, r7, #28
 801143c:	2100      	movs	r1, #0
 801143e:	4618      	mov	r0, r3
 8011440:	f7ff f8b8 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8011444:	f107 0320 	add.w	r3, r7, #32
 8011448:	2101      	movs	r1, #1
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff f8b2 	bl	80105b4 <_ZN8touchgfx6BitmapC1Et>
 8011450:	f107 0220 	add.w	r2, r7, #32
 8011454:	f107 031c 	add.w	r3, r7, #28
 8011458:	4619      	mov	r1, r3
 801145a:	4620      	mov	r0, r4
 801145c:	f004 fe3a 	bl	80160d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btnPage2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8011466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801146a:	2100      	movs	r1, #0
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff f97f 	bl	8010770 <_ZN8touchgfx9TypedTextC1Et>
 8011472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011476:	4619      	mov	r1, r3
 8011478:	4620      	mov	r0, r4
 801147a:	f7ff f9d9 	bl	8010830 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011482:	4618      	mov	r0, r3
 8011484:	f7fc fe8a 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>
    btnPage2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(219, 219, 219));
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 801148e:	22db      	movs	r2, #219	; 0xdb
 8011490:	21db      	movs	r1, #219	; 0xdb
 8011492:	20db      	movs	r0, #219	; 0xdb
 8011494:	f7ff fafe 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011498:	4603      	mov	r3, r0
 801149a:	4619      	mov	r1, r3
 801149c:	4620      	mov	r0, r4
 801149e:	f7ff f9d9 	bl	8010854 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    btnPage2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80114a8:	22ff      	movs	r2, #255	; 0xff
 80114aa:	21ff      	movs	r1, #255	; 0xff
 80114ac:	20ff      	movs	r0, #255	; 0xff
 80114ae:	f7ff faf1 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114b2:	4603      	mov	r3, r0
 80114b4:	4619      	mov	r1, r3
 80114b6:	4620      	mov	r0, r4
 80114b8:	f7ff f9da 	bl	8010870 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    btnPage2.setAction(buttonCallback);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80114c8:	4619      	mov	r1, r3
 80114ca:	4610      	mov	r0, r2
 80114cc:	f7ff f8e9 	bl	80106a2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(229, 26);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	33f0      	adds	r3, #240	; 0xf0
 80114d4:	221a      	movs	r2, #26
 80114d6:	21e5      	movs	r1, #229	; 0xe5
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fd fa05 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(245, 245, 245));
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80114e4:	22f5      	movs	r2, #245	; 0xf5
 80114e6:	21f5      	movs	r1, #245	; 0xf5
 80114e8:	20f5      	movs	r0, #245	; 0xf5
 80114ea:	f7ff fad3 	bl	8010a94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114ee:	4603      	mov	r3, r0
 80114f0:	637c      	str	r4, [r7, #52]	; 0x34
 80114f2:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	68ba      	ldr	r2, [r7, #8]
 80114f8:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	33f0      	adds	r3, #240	; 0xf0
 80114fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011500:	2300      	movs	r3, #0
 8011502:	877b      	strh	r3, [r7, #58]	; 0x3a
        linespace = space;
 8011504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011506:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011508:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8011510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011514:	2101      	movs	r1, #1
 8011516:	4618      	mov	r0, r3
 8011518:	f7ff f92a 	bl	8010770 <_ZN8touchgfx9TypedTextC1Et>
 801151c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011520:	4619      	mov	r1, r3
 8011522:	4620      	mov	r0, r4
 8011524:	f004 fd9c 	bl	8016060 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801152c:	4618      	mov	r0, r3
 801152e:	f7fc fe35 	bl	800e19c <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	3340      	adds	r3, #64	; 0x40
 8011538:	4619      	mov	r1, r3
 801153a:	4610      	mov	r0, r2
 801153c:	f7ff f8a2 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnTog);
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	3370      	adds	r3, #112	; 0x70
 8011546:	4619      	mov	r1, r3
 8011548:	4610      	mov	r0, r2
 801154a:	f7ff f89b 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btnPage2);
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	33a8      	adds	r3, #168	; 0xa8
 8011554:	4619      	mov	r1, r3
 8011556:	4610      	mov	r0, r2
 8011558:	f7ff f894 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	33f0      	adds	r3, #240	; 0xf0
 8011562:	4619      	mov	r1, r3
 8011564:	4610      	mov	r0, r2
 8011566:	f7ff f88d 	bl	8010684 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4618      	mov	r0, r3
 801156e:	3744      	adds	r7, #68	; 0x44
 8011570:	46bd      	mov	sp, r7
 8011572:	bd90      	pop	{r4, r7, pc}
 8011574:	08051a24 	.word	0x08051a24
 8011578:	08011591 	.word	0x08011591

0801157c <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]

}
 8011584:	bf00      	nop
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
    if (&src == &btnTog)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	3370      	adds	r3, #112	; 0x70
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d106      	bne.n	80115b2 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When btnTog clicked call virtual function
        //Call clickBtnTog
        clickBtnTog();
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	332c      	adds	r3, #44	; 0x2c
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	4798      	blx	r3
        //Interaction1
        //When btnPage2 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenWipeTransitionWest();
    }
}
 80115b0:	e00b      	b.n	80115ca <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    else if (&src == &btnPage2)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	33a8      	adds	r3, #168	; 0xa8
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d106      	bne.n	80115ca <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        application().gotoScreen1ScreenWipeTransitionWest();
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff fe9c 	bl	80112fa <_ZN14screenViewBase11applicationEv>
 80115c2:	4603      	mov	r3, r0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fd fd35 	bl	800f034 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>
}
 80115ca:	bf00      	nop
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4618      	mov	r0, r3
 80115e0:	f006 ff74 	bl	80184cc <_ZN8touchgfx6ScreenC1Ev>
 80115e4:	4a05      	ldr	r2, [pc, #20]	; (80115fc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2200      	movs	r2, #0
 80115ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	4618      	mov	r0, r3
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	08051a74 	.word	0x08051a74

08011600 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	4639      	mov	r1, r7
 801160c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	4618      	mov	r0, r3
 8011614:	f7ff fbd4 	bl	8010dc0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011618:	4a08      	ldr	r2, [pc, #32]	; (801163c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	3308      	adds	r3, #8
 8011628:	463a      	mov	r2, r7
 801162a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801162e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	4618      	mov	r0, r3
 8011636:	3710      	adds	r7, #16
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	08051a5c 	.word	0x08051a5c

08011640 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	4a05      	ldr	r2, [pc, #20]	; (8011660 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	601a      	str	r2, [r3, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff fbe5 	bl	8010e20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	3708      	adds	r7, #8
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	08051a5c 	.word	0x08051a5c

08011664 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7ff ffe7 	bl	8011640 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011672:	2110      	movs	r1, #16
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f013 fb9d 	bl	8024db4 <_ZdlPvj>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4618      	mov	r0, r3
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	4a05      	ldr	r2, [pc, #20]	; (80116a4 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	601a      	str	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4618      	mov	r0, r3
 8011696:	f7ff fc71 	bl	8010f7c <_ZN8touchgfx6ButtonD1Ev>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	08053260 	.word	0x08053260

080116a8 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7ff ffe7 	bl	8011684 <_ZN8touchgfx12ToggleButtonD1Ev>
 80116b6:	2138      	movs	r1, #56	; 0x38
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f013 fb7b 	bl	8024db4 <_ZdlPvj>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	68d2      	ldr	r2, [r2, #12]
 80116da:	1052      	asrs	r2, r2, #1
 80116dc:	1898      	adds	r0, r3, r2
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d102      	bne.n	80116f0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	e00a      	b.n	8011706 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	68d2      	ldr	r2, [r2, #12]
 80116f8:	1052      	asrs	r2, r2, #1
 80116fa:	4413      	add	r3, r2
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	6892      	ldr	r2, [r2, #8]
 8011702:	4413      	add	r3, r2
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	4798      	blx	r3
    }
 801170a:	bf00      	nop
 801170c:	3708      	adds	r7, #8
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d010      	beq.n	8011744 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d107      	bne.n	801173a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011736:	2301      	movs	r3, #1
 8011738:	e000      	b.n	801173c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801173a:	2300      	movs	r3, #0
 801173c:	2b01      	cmp	r3, #1
 801173e:	d001      	beq.n	8011744 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011740:	2301      	movs	r3, #1
 8011742:	e000      	b.n	8011746 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011744:	2300      	movs	r3, #0
    }
 8011746:	4618      	mov	r0, r3
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
	...

08011754 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011754:	b480      	push	{r7}
 8011756:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011758:	4b02      	ldr	r3, [pc, #8]	; (8011764 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801175a:	4618      	mov	r0, r3
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	08051aa0 	.word	0x08051aa0

08011768 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011768:	b480      	push	{r7}
 801176a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801176c:	2307      	movs	r3, #7
}
 801176e:	4618      	mov	r0, r3
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011778:	b480      	push	{r7}
 801177a:	b085      	sub	sp, #20
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	460b      	mov	r3, r1
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8011786:	2300      	movs	r3, #0
    }
 8011788:	4618      	mov	r0, r3
 801178a:	3714      	adds	r7, #20
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801179c:	2300      	movs	r3, #0
    }
 801179e:	4618      	mov	r0, r3
 80117a0:	370c      	adds	r7, #12
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr
	...

080117ac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	4613      	mov	r3, r2
 80117b8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80117ba:	4a07      	ldr	r2, [pc, #28]	; (80117d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6013      	str	r3, [r2, #0]
        fonts = f;
 80117c0:	4a06      	ldr	r2, [pc, #24]	; (80117dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80117c6:	4a06      	ldr	r2, [pc, #24]	; (80117e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80117c8:	88fb      	ldrh	r3, [r7, #6]
 80117ca:	8013      	strh	r3, [r2, #0]
    }
 80117cc:	bf00      	nop
 80117ce:	3714      	adds	r7, #20
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr
 80117d8:	200013c8 	.word	0x200013c8
 80117dc:	200013d0 	.word	0x200013d0
 80117e0:	200013cc 	.word	0x200013cc

080117e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80117e4:	b40e      	push	{r1, r2, r3}
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b085      	sub	sp, #20
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80117ee:	f107 0320 	add.w	r3, r7, #32
 80117f2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	69fa      	ldr	r2, [r7, #28]
 80117f8:	2100      	movs	r1, #0
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f006 fa2a 	bl	8017c54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011800:	4603      	mov	r3, r0
 8011802:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011804:	89fb      	ldrh	r3, [r7, #14]
}
 8011806:	4618      	mov	r0, r3
 8011808:	3714      	adds	r7, #20
 801180a:	46bd      	mov	sp, r7
 801180c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011810:	b003      	add	sp, #12
 8011812:	4770      	bx	lr

08011814 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011814:	b40c      	push	{r2, r3}
 8011816:	b580      	push	{r7, lr}
 8011818:	b084      	sub	sp, #16
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
 801181e:	460b      	mov	r3, r1
 8011820:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011822:	f107 031c 	add.w	r3, r7, #28
 8011826:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011828:	78f9      	ldrb	r1, [r7, #3]
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	69ba      	ldr	r2, [r7, #24]
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f006 fa10 	bl	8017c54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011834:	4603      	mov	r3, r0
 8011836:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011838:	89fb      	ldrh	r3, [r7, #14]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011844:	b002      	add	sp, #8
 8011846:	4770      	bx	lr

08011848 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b08a      	sub	sp, #40	; 0x28
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	460b      	mov	r3, r1
 8011852:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011858:	2b00      	cmp	r3, #0
 801185a:	d016      	beq.n	801188a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	331a      	adds	r3, #26
 8011860:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011864:	8adb      	ldrh	r3, [r3, #22]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d105      	bne.n	8011876 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801186a:	4b42      	ldr	r3, [pc, #264]	; (8011974 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 801186c:	4a42      	ldr	r2, [pc, #264]	; (8011978 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801186e:	21c0      	movs	r1, #192	; 0xc0
 8011870:	4842      	ldr	r0, [pc, #264]	; (801197c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011872:	f013 facb 	bl	8024e0c <__assert_func>
            return buffer[pos];
 8011876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011878:	8a9b      	ldrh	r3, [r3, #20]
 801187a:	461a      	mov	r2, r3
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011886:	2301      	movs	r3, #1
 8011888:	e000      	b.n	801188c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801188a:	2300      	movs	r3, #0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d068      	beq.n	8011962 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f007 fd25 	bl	80192e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	331a      	adds	r3, #26
 801189a:	623b      	str	r3, [r7, #32]
 801189c:	2301      	movs	r3, #1
 801189e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	8adb      	ldrh	r3, [r3, #22]
 80118a4:	8bfa      	ldrh	r2, [r7, #30]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d305      	bcc.n	80118b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80118aa:	4b35      	ldr	r3, [pc, #212]	; (8011980 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80118ac:	4a35      	ldr	r2, [pc, #212]	; (8011984 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80118ae:	21c5      	movs	r1, #197	; 0xc5
 80118b0:	4832      	ldr	r0, [pc, #200]	; (801197c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80118b2:	f013 faab 	bl	8024e0c <__assert_func>
            const uint16_t index = pos + offset;
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	8a9a      	ldrh	r2, [r3, #20]
 80118ba:	8bfb      	ldrh	r3, [r7, #30]
 80118bc:	4413      	add	r3, r2
 80118be:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80118c0:	8bbb      	ldrh	r3, [r7, #28]
 80118c2:	2b09      	cmp	r3, #9
 80118c4:	d801      	bhi.n	80118ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80118c6:	8bbb      	ldrh	r3, [r7, #28]
 80118c8:	e001      	b.n	80118ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80118ca:	8bbb      	ldrh	r3, [r7, #28]
 80118cc:	3b0a      	subs	r3, #10
 80118ce:	6a3a      	ldr	r2, [r7, #32]
 80118d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118d4:	f640 123f 	movw	r2, #2367	; 0x93f
 80118d8:	4293      	cmp	r3, r2
 80118da:	bf0c      	ite	eq
 80118dc:	2301      	moveq	r3, #1
 80118de:	2300      	movne	r3, #0
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d03d      	beq.n	8011962 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	331a      	adds	r3, #26
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	321a      	adds	r2, #26
 80118ee:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	8ad2      	ldrh	r2, [r2, #22]
 80118f4:	2a00      	cmp	r2, #0
 80118f6:	d105      	bne.n	8011904 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80118f8:	4b1e      	ldr	r3, [pc, #120]	; (8011974 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80118fa:	4a1f      	ldr	r2, [pc, #124]	; (8011978 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80118fc:	21c0      	movs	r1, #192	; 0xc0
 80118fe:	481f      	ldr	r0, [pc, #124]	; (801197c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011900:	f013 fa84 	bl	8024e0c <__assert_func>
            return buffer[pos];
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	8a92      	ldrh	r2, [r2, #20]
 8011908:	4611      	mov	r1, r2
 801190a:	68ba      	ldr	r2, [r7, #8]
 801190c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011910:	613b      	str	r3, [r7, #16]
 8011912:	4613      	mov	r3, r2
 8011914:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	8adb      	ldrh	r3, [r3, #22]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d806      	bhi.n	801192c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801191e:	4b1a      	ldr	r3, [pc, #104]	; (8011988 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011920:	4a1a      	ldr	r2, [pc, #104]	; (801198c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011922:	f240 110d 	movw	r1, #269	; 0x10d
 8011926:	4815      	ldr	r0, [pc, #84]	; (801197c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011928:	f013 fa70 	bl	8024e0c <__assert_func>
            const uint16_t index = pos + 1;
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	8a9b      	ldrh	r3, [r3, #20]
 8011930:	3301      	adds	r3, #1
 8011932:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011934:	89bb      	ldrh	r3, [r7, #12]
 8011936:	2b09      	cmp	r3, #9
 8011938:	d801      	bhi.n	801193e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801193a:	89bb      	ldrh	r3, [r7, #12]
 801193c:	e000      	b.n	8011940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801193e:	2300      	movs	r3, #0
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	89f9      	ldrh	r1, [r7, #14]
 8011944:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	331a      	adds	r3, #26
 801194c:	61bb      	str	r3, [r7, #24]
 801194e:	f640 133f 	movw	r3, #2367	; 0x93f
 8011952:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	8a9b      	ldrh	r3, [r3, #20]
 8011958:	4619      	mov	r1, r3
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	8afa      	ldrh	r2, [r7, #22]
 801195e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f007 fba0 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011968:	4603      	mov	r3, r0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3728      	adds	r7, #40	; 0x28
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08026474 	.word	0x08026474
 8011978:	08051c50 	.word	0x08051c50
 801197c:	08026480 	.word	0x08026480
 8011980:	080264c8 	.word	0x080264c8
 8011984:	08051b7c 	.word	0x08051b7c
 8011988:	080264d8 	.word	0x080264d8
 801198c:	08051cfc 	.word	0x08051cfc

08011990 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f007 fb3f 	bl	801901c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801199e:	bf00      	nop
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b088      	sub	sp, #32
 80119aa:	af02      	add	r7, sp, #8
 80119ac:	60f8      	str	r0, [r7, #12]
 80119ae:	1d38      	adds	r0, r7, #4
 80119b0:	e880 0006 	stmia.w	r0, {r1, r2}
 80119b4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80119b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80119ba:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80119bc:	1d39      	adds	r1, r7, #4
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	9301      	str	r3, [sp, #4]
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c4:	9300      	str	r3, [sp, #0]
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	683a      	ldr	r2, [r7, #0]
 80119ca:	68f8      	ldr	r0, [r7, #12]
 80119cc:	f005 f995 	bl	8016cfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80119d0:	bf00      	nop
 80119d2:	3718      	adds	r7, #24
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80119e6:	88fb      	ldrh	r3, [r7, #6]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d127      	bne.n	8011a3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	4a1e      	ldr	r2, [pc, #120]	; (8011a68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d016      	beq.n	8011a26 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80119f8:	88fb      	ldrh	r3, [r7, #6]
 80119fa:	4a1b      	ldr	r2, [pc, #108]	; (8011a68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a00:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	4413      	add	r3, r2
 8011a0a:	4a18      	ldr	r2, [pc, #96]	; (8011a6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011a0c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	4413      	add	r3, r2
 8011a16:	4a16      	ldr	r2, [pc, #88]	; (8011a70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011a18:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	4413      	add	r3, r2
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	e00a      	b.n	8011a3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011a26:	4b11      	ldr	r3, [pc, #68]	; (8011a6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011a28:	4a12      	ldr	r2, [pc, #72]	; (8011a74 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011a2a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011a2c:	4a12      	ldr	r2, [pc, #72]	; (8011a78 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011a2e:	4b10      	ldr	r3, [pc, #64]	; (8011a70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011a30:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011a32:	88fb      	ldrh	r3, [r7, #6]
 8011a34:	4a11      	ldr	r2, [pc, #68]	; (8011a7c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a3a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00d      	beq.n	8011a5e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011a42:	4a0f      	ldr	r2, [pc, #60]	; (8011a80 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011a44:	88fb      	ldrh	r3, [r7, #6]
 8011a46:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011a48:	f000 f83e 	bl	8011ac8 <_ZN17TypedTextDatabase8getFontsEv>
 8011a4c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011a4e:	f000 f833 	bl	8011ab8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011a52:	4603      	mov	r3, r0
 8011a54:	461a      	mov	r2, r3
 8011a56:	4621      	mov	r1, r4
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f7ff fea7 	bl	80117ac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011a5e:	bf00      	nop
 8011a60:	3714      	adds	r7, #20
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd90      	pop	{r4, r7, pc}
 8011a66:	bf00      	nop
 8011a68:	20000218 	.word	0x20000218
 8011a6c:	20000220 	.word	0x20000220
 8011a70:	20000224 	.word	0x20000224
 8011a74:	0808a258 	.word	0x0808a258
 8011a78:	0808a248 	.word	0x0808a248
 8011a7c:	0808a2a4 	.word	0x0808a2a4
 8011a80:	2000021c 	.word	0x2000021c

08011a84 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011a90:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	4b07      	ldr	r3, [pc, #28]	; (8011ab4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011a96:	6819      	ldr	r1, [r3, #0]
 8011a98:	887b      	ldrh	r3, [r7, #2]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	440b      	add	r3, r1
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	370c      	adds	r7, #12
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr
 8011ab0:	20000220 	.word	0x20000220
 8011ab4:	20000224 	.word	0x20000224

08011ab8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011ab8:	b480      	push	{r7}
 8011aba:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011abc:	2304      	movs	r3, #4
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011ac8:	b480      	push	{r7}
 8011aca:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011acc:	4b02      	ldr	r3, [pc, #8]	; (8011ad8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	20000228 	.word	0x20000228

08011adc <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_SIMYOU_TTF_14_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d118      	bne.n	8011b1e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d113      	bne.n	8011b1e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8011af6:	f7fc fcc3 	bl	800e480 <_Z23getFont_verdana_20_4bppv>
 8011afa:	4602      	mov	r2, r0
};
 8011afc:	4b0a      	ldr	r3, [pc, #40]	; (8011b28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011afe:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8011b00:	f7fc fd12 	bl	800e528 <_Z23getFont_verdana_40_4bppv>
 8011b04:	4602      	mov	r2, r0
};
 8011b06:	4b08      	ldr	r3, [pc, #32]	; (8011b28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011b08:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp()),
 8011b0a:	f7fc fc65 	bl	800e3d8 <_Z23getFont_verdana_10_4bppv>
 8011b0e:	4602      	mov	r2, r0
};
 8011b10:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011b12:	609a      	str	r2, [r3, #8]
    &(getFont_SIMYOU_TTF_14_4bpp())
 8011b14:	f7fc fc0c 	bl	800e330 <_Z26getFont_SIMYOU_TTF_14_4bppv>
 8011b18:	4602      	mov	r2, r0
};
 8011b1a:	4b03      	ldr	r3, [pc, #12]	; (8011b28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011b1c:	60da      	str	r2, [r3, #12]
}  // namespace TypedTextDatabase
 8011b1e:	bf00      	nop
 8011b20:	3708      	adds	r7, #8
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	20000228 	.word	0x20000228

08011b2c <_GLOBAL__sub_I_touchgfx_fonts>:
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b34:	2001      	movs	r0, #1
 8011b36:	f7ff ffd1 	bl	8011adc <_Z41__static_initialization_and_destruction_0ii>
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	4a05      	ldr	r2, [pc, #20]	; (8011b5c <_ZN19FrontendApplicationD1Ev+0x20>)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fd f8ed 	bl	800ed2c <_ZN23FrontendApplicationBaseD1Ev>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}
 8011b5c:	08051db8 	.word	0x08051db8

08011b60 <_ZN19FrontendApplicationD0Ev>:
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff ffe7 	bl	8011b3c <_ZN19FrontendApplicationD1Ev>
 8011b6e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f013 f91e 	bl	8024db4 <_ZdlPvj>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b082      	sub	sp, #8
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f82d 	bl	8011bf0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f005 fb77 	bl	801728c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011b9e:	bf00      	nop
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	68b9      	ldr	r1, [r7, #8]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fd f952 	bl	800ee64 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011bc0:	4a03      	ldr	r2, [pc, #12]	; (8011bd0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	601a      	str	r2, [r3, #0]
{

}
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3710      	adds	r7, #16
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	08051db8 	.word	0x08051db8

08011bd4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	601a      	str	r2, [r3, #0]
{

}
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4618      	mov	r0, r3
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]

}
 8011bf8:	bf00      	nop
 8011bfa:	370c      	adds	r7, #12
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr

08011c04 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
    {
    }
 8011c0c:	bf00      	nop
 8011c0e:	370c      	adds	r7, #12
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
    {
    }
 8011c20:	bf00      	nop
 8011c22:	370c      	adds	r7, #12
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
    {
 8011c34:	4a04      	ldr	r2, [pc, #16]	; (8011c48 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	601a      	str	r2, [r3, #0]
    }
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr
 8011c48:	08051e34 	.word	0x08051e34

08011c4c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
    }
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ffe9 	bl	8011c2c <_ZN8touchgfx9PresenterD1Ev>
 8011c5a:	2104      	movs	r1, #4
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f013 f8a9 	bl	8024db4 <_ZdlPvj>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
    {
 8011c74:	4a04      	ldr	r2, [pc, #16]	; (8011c88 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	601a      	str	r2, [r3, #0]
    }
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr
 8011c88:	08051e34 	.word	0x08051e34

08011c8c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	4a06      	ldr	r2, [pc, #24]	; (8011cb0 <_ZN13ModelListenerC1Ev+0x24>)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	601a      	str	r2, [r3, #0]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	605a      	str	r2, [r3, #4]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	08051e24 	.word	0x08051e24

08011cb4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	4a04      	ldr	r2, [pc, #16]	; (8011cd0 <_ZN13ModelListenerD1Ev+0x1c>)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr
 8011cd0:	08051e24 	.word	0x08051e24

08011cd4 <_ZN13ModelListenerD0Ev>:
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff ffe9 	bl	8011cb4 <_ZN13ModelListenerD1Ev>
 8011ce2:	2108      	movs	r1, #8
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f013 f865 	bl	8024db4 <_ZdlPvj>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4618      	mov	r0, r3
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	4a09      	ldr	r2, [pc, #36]	; (8011d24 <_ZN16Screen1PresenterD1Ev+0x30>)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	4a09      	ldr	r2, [pc, #36]	; (8011d28 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	605a      	str	r2, [r3, #4]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7ff ffd1 	bl	8011cb4 <_ZN13ModelListenerD1Ev>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7ff ff89 	bl	8011c2c <_ZN8touchgfx9PresenterD1Ev>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	08051dfc 	.word	0x08051dfc
 8011d28:	08051e14 	.word	0x08051e14

08011d2c <_ZThn4_N16Screen1PresenterD1Ev>:
 8011d2c:	f1a0 0004 	sub.w	r0, r0, #4
 8011d30:	e7e0      	b.n	8011cf4 <_ZN16Screen1PresenterD1Ev>
 8011d32:	bf00      	nop

08011d34 <_ZN16Screen1PresenterD0Ev>:
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff ffd9 	bl	8011cf4 <_ZN16Screen1PresenterD1Ev>
 8011d42:	2110      	movs	r1, #16
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f013 f835 	bl	8024db4 <_ZdlPvj>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <_ZThn4_N16Screen1PresenterD0Ev>:
 8011d54:	f1a0 0004 	sub.w	r0, r0, #4
 8011d58:	e7ec      	b.n	8011d34 <_ZN16Screen1PresenterD0Ev>
	...

08011d5c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
    : view(v)
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7ff ff7f 	bl	8011c6c <_ZN8touchgfx9PresenterC1Ev>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	3304      	adds	r3, #4
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7ff ff8a 	bl	8011c8c <_ZN13ModelListenerC1Ev>
 8011d78:	4a06      	ldr	r2, [pc, #24]	; (8011d94 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	4a06      	ldr	r2, [pc, #24]	; (8011d98 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	605a      	str	r2, [r3, #4]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	60da      	str	r2, [r3, #12]
{

}
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}
 8011d94:	08051dfc 	.word	0x08051dfc
 8011d98:	08051e14 	.word	0x08051e14

08011d9c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]

}
 8011da4:	bf00      	nop
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]

}
 8011db8:	bf00      	nop
 8011dba:	370c      	adds	r7, #12
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	4a05      	ldr	r2, [pc, #20]	; (8011de4 <_ZN11Screen1ViewD1Ev+0x20>)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fe fe15 	bl	8010a04 <_ZN15Screen1ViewBaseD1Ev>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	08051e4c 	.word	0x08051e4c

08011de8 <_ZN11Screen1ViewD0Ev>:
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff ffe7 	bl	8011dc4 <_ZN11Screen1ViewD1Ev>
 8011df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f012 ffda 	bl	8024db4 <_ZdlPvj>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	4618      	mov	r0, r3
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
	...

08011e0c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fe fe66 	bl	8010ae8 <_ZN15Screen1ViewBaseC1Ev>
 8011e1c:	4a03      	ldr	r2, [pc, #12]	; (8011e2c <_ZN11Screen1ViewC1Ev+0x20>)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	601a      	str	r2, [r3, #0]
{

}
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	08051e4c 	.word	0x08051e4c

08011e30 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fe ff8a 	bl	8010d54 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fe fbf6 	bl	8010644 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	4a09      	ldr	r2, [pc, #36]	; (8011e90 <_ZN15screenPresenterD1Ev+0x30>)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	4a09      	ldr	r2, [pc, #36]	; (8011e94 <_ZN15screenPresenterD1Ev+0x34>)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	605a      	str	r2, [r3, #4]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3304      	adds	r3, #4
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7ff ff1b 	bl	8011cb4 <_ZN13ModelListenerD1Ev>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7ff fed3 	bl	8011c2c <_ZN8touchgfx9PresenterD1Ev>
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3708      	adds	r7, #8
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	08051e80 	.word	0x08051e80
 8011e94:	08051e98 	.word	0x08051e98

08011e98 <_ZThn4_N15screenPresenterD1Ev>:
 8011e98:	f1a0 0004 	sub.w	r0, r0, #4
 8011e9c:	e7e0      	b.n	8011e60 <_ZN15screenPresenterD1Ev>
 8011e9e:	bf00      	nop

08011ea0 <_ZN15screenPresenterD0Ev>:
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7ff ffd9 	bl	8011e60 <_ZN15screenPresenterD1Ev>
 8011eae:	2110      	movs	r1, #16
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f012 ff7f 	bl	8024db4 <_ZdlPvj>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <_ZThn4_N15screenPresenterD0Ev>:
 8011ec0:	f1a0 0004 	sub.w	r0, r0, #4
 8011ec4:	e7ec      	b.n	8011ea0 <_ZN15screenPresenterD0Ev>
	...

08011ec8 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
    : view(v)
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fec9 	bl	8011c6c <_ZN8touchgfx9PresenterC1Ev>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	3304      	adds	r3, #4
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7ff fed4 	bl	8011c8c <_ZN13ModelListenerC1Ev>
 8011ee4:	4a06      	ldr	r2, [pc, #24]	; (8011f00 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	601a      	str	r2, [r3, #0]
 8011eea:	4a06      	ldr	r2, [pc, #24]	; (8011f04 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	605a      	str	r2, [r3, #4]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	60da      	str	r2, [r3, #12]
{

}
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	08051e80 	.word	0x08051e80
 8011f04:	08051e98 	.word	0x08051e98

08011f08 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]

}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]

}
 8011f24:	bf00      	nop
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	4a05      	ldr	r2, [pc, #20]	; (8011f50 <_ZN10screenViewD1Ev+0x20>)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff f993 	bl	801126c <_ZN14screenViewBaseD1Ev>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	08051ea8 	.word	0x08051ea8

08011f54 <_ZN10screenViewD0Ev>:
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ffe7 	bl	8011f30 <_ZN10screenViewD1Ev>
 8011f62:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f012 ff24 	bl	8024db4 <_ZdlPvj>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
	...

08011f78 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff f9de 	bl	8011344 <_ZN14screenViewBaseC1Ev>
 8011f88:	4a03      	ldr	r2, [pc, #12]	; (8011f98 <_ZN10screenViewC1Ev+0x20>)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	601a      	str	r2, [r3, #0]
{

}
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	08051ea8 	.word	0x08051ea8

08011f9c <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7ff fae8 	bl	801157c <_ZN14screenViewBase11setupScreenEv>
}
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fb40 	bl	8010644 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011fc4:	bf00      	nop
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
    {
 8011fd4:	4a04      	ldr	r2, [pc, #16]	; (8011fe8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	601a      	str	r2, [r3, #0]
    }
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr
 8011fe8:	08051ef8 	.word	0x08051ef8

08011fec <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
    }
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7ff ffe9 	bl	8011fcc <_ZN8touchgfx15TouchControllerD1Ev>
 8011ffa:	2104      	movs	r1, #4
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f012 fed9 	bl	8024db4 <_ZdlPvj>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "touch_800x480.h"

void STM32TouchController::init()
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if(touchInfo.flag == 1) {
 801202c:	4b0b      	ldr	r3, [pc, #44]	; (801205c <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d10b      	bne.n	801204c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>
		x = touchInfo.x[0];
 8012034:	4b09      	ldr	r3, [pc, #36]	; (801205c <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 8012036:	885b      	ldrh	r3, [r3, #2]
 8012038:	461a      	mov	r2, r3
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	601a      	str	r2, [r3, #0]
		y = touchInfo.y[0];
 801203e:	4b07      	ldr	r3, [pc, #28]	; (801205c <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 8012040:	899b      	ldrh	r3, [r3, #12]
 8012042:	461a      	mov	r2, r3
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	601a      	str	r2, [r3, #0]
		return true;
 8012048:	2301      	movs	r3, #1
 801204a:	e000      	b.n	801204e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2e>
	}

    return false;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3714      	adds	r7, #20
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr
 801205a:	bf00      	nop
 801205c:	20001fbc 	.word	0x20001fbc

08012060 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	4a05      	ldr	r2, [pc, #20]	; (8012080 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4618      	mov	r0, r3
 8012072:	f7ff ffab 	bl	8011fcc <_ZN8touchgfx15TouchControllerD1Ev>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	08051ee0 	.word	0x08051ee0

08012084 <_ZN20STM32TouchControllerD0Ev>:
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff ffe7 	bl	8012060 <_ZN20STM32TouchControllerD1Ev>
 8012092:	2104      	movs	r1, #4
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f012 fe8d 	bl	8024db4 <_ZdlPvj>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	71fb      	strb	r3, [r7, #7]

}
 80120ae:	bf00      	nop
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	4603      	mov	r3, r0
 80120c2:	71fb      	strb	r3, [r7, #7]

}
 80120c4:	bf00      	nop
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	4603      	mov	r3, r0
 80120d8:	71fb      	strb	r3, [r7, #7]

}
 80120da:	bf00      	nop
 80120dc:	370c      	adds	r7, #12
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr
	...

080120e8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
    {
 80120f0:	4a04      	ldr	r2, [pc, #16]	; (8012104 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	601a      	str	r2, [r3, #0]
    }
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4618      	mov	r0, r3
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	08052c88 	.word	0x08052c88

08012108 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
    }
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff ffe9 	bl	80120e8 <_ZN8touchgfx3HALD1Ev>
 8012116:	2178      	movs	r1, #120	; 0x78
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f012 fe4b 	bl	8024db4 <_ZdlPvj>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	78fa      	ldrb	r2, [r7, #3]
 8012138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801215e:	2b00      	cmp	r3, #0
 8012160:	d009      	beq.n	8012176 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	685a      	ldr	r2, [r3, #4]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	4610      	mov	r0, r2
 8012170:	4798      	blx	r3
 8012172:	4603      	mov	r3, r0
 8012174:	e000      	b.n	8012178 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8012176:	2300      	movs	r3, #0
        }
    }
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f003 fc17 	bl	80159bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3394      	adds	r3, #148	; 0x94
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	4798      	blx	r3
    }
 801219a:	bf00      	nop
 801219c:	3708      	adds	r7, #8
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80121a2:	b480      	push	{r7}
 80121a4:	b083      	sub	sp, #12
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
 80121aa:	6039      	str	r1, [r7, #0]
    {
        return false;
 80121ac:	2300      	movs	r3, #0
    }
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
	...

080121bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 80121bc:	b590      	push	{r4, r7, lr}
 80121be:	b08b      	sub	sp, #44	; 0x2c
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	4611      	mov	r1, r2
 80121c8:	461a      	mov	r2, r3
 80121ca:	460b      	mov	r3, r1
 80121cc:	80fb      	strh	r3, [r7, #6]
 80121ce:	4613      	mov	r3, r2
 80121d0:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 80121d2:	f7fc fc6d 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 80121d6:	4602      	mov	r2, r0
 80121d8:	6813      	ldr	r3, [r2, #0]
 80121da:	3324      	adds	r3, #36	; 0x24
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4610      	mov	r0, r2
 80121e0:	4798      	blx	r3
 80121e2:	4603      	mov	r3, r0
 80121e4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80121e6:	8b7b      	ldrh	r3, [r7, #26]
 80121e8:	4a3d      	ldr	r2, [pc, #244]	; (80122e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80121ea:	8812      	ldrh	r2, [r2, #0]
 80121ec:	fb02 f303 	mul.w	r3, r2, r3
 80121f0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80121fe:	797b      	ldrb	r3, [r7, #5]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d005      	beq.n	8012210 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	4413      	add	r3, r2
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012210:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012214:	2b00      	cmp	r3, #0
 8012216:	d005      	beq.n	8012224 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	4413      	add	r3, r2
 801221e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012222:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012224:	88fb      	ldrh	r3, [r7, #6]
 8012226:	3b01      	subs	r3, #1
 8012228:	2b1f      	cmp	r3, #31
 801222a:	d84d      	bhi.n	80122c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 801222c:	a201      	add	r2, pc, #4	; (adr r2, 8012234 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012232:	bf00      	nop
 8012234:	080122b5 	.word	0x080122b5
 8012238:	080122b5 	.word	0x080122b5
 801223c:	080122c9 	.word	0x080122c9
 8012240:	080122b5 	.word	0x080122b5
 8012244:	080122c9 	.word	0x080122c9
 8012248:	080122c9 	.word	0x080122c9
 801224c:	080122c9 	.word	0x080122c9
 8012250:	080122b5 	.word	0x080122b5
 8012254:	080122c9 	.word	0x080122c9
 8012258:	080122c9 	.word	0x080122c9
 801225c:	080122c9 	.word	0x080122c9
 8012260:	080122c9 	.word	0x080122c9
 8012264:	080122c9 	.word	0x080122c9
 8012268:	080122c9 	.word	0x080122c9
 801226c:	080122c9 	.word	0x080122c9
 8012270:	080122b5 	.word	0x080122b5
 8012274:	080122c9 	.word	0x080122c9
 8012278:	080122c9 	.word	0x080122c9
 801227c:	080122c9 	.word	0x080122c9
 8012280:	080122c9 	.word	0x080122c9
 8012284:	080122c9 	.word	0x080122c9
 8012288:	080122c9 	.word	0x080122c9
 801228c:	080122c9 	.word	0x080122c9
 8012290:	080122b5 	.word	0x080122b5
 8012294:	080122c9 	.word	0x080122c9
 8012298:	080122c9 	.word	0x080122c9
 801229c:	080122c9 	.word	0x080122c9
 80122a0:	080122c9 	.word	0x080122c9
 80122a4:	080122c9 	.word	0x080122c9
 80122a8:	080122c9 	.word	0x080122c9
 80122ac:	080122c9 	.word	0x080122c9
 80122b0:	080122b5 	.word	0x080122b5
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	3374      	adds	r3, #116	; 0x74
 80122ba:	681c      	ldr	r4, [r3, #0]
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	6a3a      	ldr	r2, [r7, #32]
 80122c0:	68b9      	ldr	r1, [r7, #8]
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	47a0      	blx	r4
            break;
 80122c6:	e006      	b.n	80122d6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80122c8:	4b06      	ldr	r3, [pc, #24]	; (80122e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80122ca:	4a07      	ldr	r2, [pc, #28]	; (80122e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80122cc:	f240 2189 	movw	r1, #649	; 0x289
 80122d0:	4806      	ldr	r0, [pc, #24]	; (80122ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80122d2:	f012 fd9b 	bl	8024e0c <__assert_func>
            break;
        }
    }
 80122d6:	bf00      	nop
 80122d8:	372c      	adds	r7, #44	; 0x2c
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd90      	pop	{r4, r7, pc}
 80122de:	bf00      	nop
 80122e0:	20001352 	.word	0x20001352
 80122e4:	080264e4 	.word	0x080264e4
 80122e8:	08052010 	.word	0x08052010
 80122ec:	08026504 	.word	0x08026504

080122f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	60b9      	str	r1, [r7, #8]
 80122fa:	607a      	str	r2, [r7, #4]
 80122fc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d106      	bne.n	8012312 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012304:	4b11      	ldr	r3, [pc, #68]	; (801234c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012306:	4a12      	ldr	r2, [pc, #72]	; (8012350 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012308:	f44f 7127 	mov.w	r1, #668	; 0x29c
 801230c:	4811      	ldr	r0, [pc, #68]	; (8012354 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801230e:	f012 fd7d 	bl	8024e0c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	683a      	ldr	r2, [r7, #0]
 8012322:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	bf14      	ite	ne
 801232a:	2301      	movne	r3, #1
 801232c:	2300      	moveq	r3, #0
 801232e:	b2da      	uxtb	r2, r3
 8012330:	4b09      	ldr	r3, [pc, #36]	; (8012358 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012332:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	bf14      	ite	ne
 801233a:	2301      	movne	r3, #1
 801233c:	2300      	moveq	r3, #0
 801233e:	b2da      	uxtb	r2, r3
 8012340:	4b06      	ldr	r3, [pc, #24]	; (801235c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012342:	701a      	strb	r2, [r3, #0]
    }
 8012344:	bf00      	nop
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	08026548 	.word	0x08026548
 8012350:	08051fc0 	.word	0x08051fc0
 8012354:	08026504 	.word	0x08026504
 8012358:	20001354 	.word	0x20001354
 801235c:	20001355 	.word	0x20001355

08012360 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012368:	2300      	movs	r3, #0
    }
 801236a:	4618      	mov	r0, r3
 801236c:	370c      	adds	r7, #12
 801236e:	46bd      	mov	sp, r7
 8012370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012374:	4770      	bx	lr

08012376 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8012376:	b580      	push	{r7, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	460b      	mov	r3, r1
 8012380:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012386:	2b00      	cmp	r3, #0
 8012388:	d004      	beq.n	8012394 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238e:	887a      	ldrh	r2, [r7, #2]
 8012390:	4610      	mov	r0, r2
 8012392:	4798      	blx	r3
        }
    }
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	685a      	ldr	r2, [r3, #4]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	3318      	adds	r3, #24
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	4610      	mov	r0, r2
 80123b4:	4798      	blx	r3
 80123b6:	4603      	mov	r3, r0
    }
 80123b8:	4618      	mov	r0, r3
 80123ba:	3708      	adds	r7, #8
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d017      	beq.n	8012408 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80123d8:	4b1a      	ldr	r3, [pc, #104]	; (8012444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d12a      	bne.n	8012436 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80123e0:	4b19      	ldr	r3, [pc, #100]	; (8012448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80123e2:	881a      	ldrh	r2, [r3, #0]
 80123e4:	4b19      	ldr	r3, [pc, #100]	; (801244c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80123e6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80123e8:	4b19      	ldr	r3, [pc, #100]	; (8012450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123ea:	881a      	ldrh	r2, [r3, #0]
 80123ec:	4b19      	ldr	r3, [pc, #100]	; (8012454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123ee:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80123f0:	4b16      	ldr	r3, [pc, #88]	; (801244c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80123f2:	881a      	ldrh	r2, [r3, #0]
 80123f4:	4b16      	ldr	r3, [pc, #88]	; (8012450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80123f6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80123f8:	4b16      	ldr	r3, [pc, #88]	; (8012454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80123fa:	881a      	ldrh	r2, [r3, #0]
 80123fc:	4b12      	ldr	r3, [pc, #72]	; (8012448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80123fe:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8012400:	4b10      	ldr	r3, [pc, #64]	; (8012444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012402:	2201      	movs	r2, #1
 8012404:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8012406:	e016      	b.n	8012436 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8012408:	4b0e      	ldr	r3, [pc, #56]	; (8012444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d012      	beq.n	8012436 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8012410:	4b0f      	ldr	r3, [pc, #60]	; (8012450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012412:	881a      	ldrh	r2, [r3, #0]
 8012414:	4b0d      	ldr	r3, [pc, #52]	; (801244c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012416:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012418:	4b0b      	ldr	r3, [pc, #44]	; (8012448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801241a:	881a      	ldrh	r2, [r3, #0]
 801241c:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801241e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8012420:	4b0c      	ldr	r3, [pc, #48]	; (8012454 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012422:	881a      	ldrh	r2, [r3, #0]
 8012424:	4b0a      	ldr	r3, [pc, #40]	; (8012450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012426:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012428:	4b08      	ldr	r3, [pc, #32]	; (801244c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801242a:	881a      	ldrh	r2, [r3, #0]
 801242c:	4b06      	ldr	r3, [pc, #24]	; (8012448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801242e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8012430:	4b04      	ldr	r3, [pc, #16]	; (8012444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012432:	2200      	movs	r2, #0
 8012434:	701a      	strb	r2, [r3, #0]
    }
 8012436:	bf00      	nop
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop
 8012444:	2000134e 	.word	0x2000134e
 8012448:	2000134a 	.word	0x2000134a
 801244c:	20001350 	.word	0x20001350
 8012450:	2000134c 	.word	0x2000134c
 8012454:	20001352 	.word	0x20001352

08012458 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4618      	mov	r0, r3
 8012464:	f002 fd2c 	bl	8014ec0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	4a05      	ldr	r2, [pc, #20]	; (8012490 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	601a      	str	r2, [r3, #0]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4618      	mov	r0, r3
 8012482:	f7ff fe31 	bl	80120e8 <_ZN8touchgfx3HALD1Ev>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	080521e8 	.word	0x080521e8

08012494 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff ffe7 	bl	8012470 <_ZN20TouchGFXGeneratedHALD1Ev>
 80124a2:	2178      	movs	r1, #120	; 0x78
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f012 fc85 	bl	8024db4 <_ZdlPvj>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7ff ffca 	bl	8012458 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80124c4:	bf00      	nop
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f001 fb08 	bl	8013aec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80124dc:	bf00      	nop
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f001 fb94 	bl	8013c1c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80124f4:	4603      	mov	r3, r0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
 8012506:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6839      	ldr	r1, [r7, #0]
 801250c:	4618      	mov	r0, r3
 801250e:	f001 fb93 	bl	8013c38 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012512:	bf00      	nop
 8012514:	3708      	adds	r7, #8
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b082      	sub	sp, #8
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6839      	ldr	r1, [r7, #0]
 8012528:	4618      	mov	r0, r3
 801252a:	f001 fb9b 	bl	8013c64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801252e:	bf00      	nop
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}

08012536 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b084      	sub	sp, #16
 801253a:	af00      	add	r7, sp, #0
 801253c:	60f8      	str	r0, [r7, #12]
 801253e:	60b9      	str	r1, [r7, #8]
 8012540:	607a      	str	r2, [r7, #4]
 8012542:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	68b9      	ldr	r1, [r7, #8]
 801254c:	f001 fb98 	bl	8013c80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012550:	4603      	mov	r3, r0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b082      	sub	sp, #8
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	f001 faff 	bl	8013b68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b082      	sub	sp, #8
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4618      	mov	r0, r3
 801257e:	f001 fb03 	bl	8013b88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012582:	bf00      	nop
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}

0801258a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801258a:	b580      	push	{r7, lr}
 801258c:	b082      	sub	sp, #8
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4618      	mov	r0, r3
 8012596:	f001 fb05 	bl	8013ba4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801259a:	bf00      	nop
 801259c:	3708      	adds	r7, #8
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b082      	sub	sp, #8
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f001 fb07 	bl	8013bc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80125b2:	bf00      	nop
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
	...

080125bc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	4a05      	ldr	r2, [pc, #20]	; (80125dc <_ZN11TouchGFXHALD1Ev+0x20>)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff ff4f 	bl	8012470 <_ZN20TouchGFXGeneratedHALD1Ev>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	08051f10 	.word	0x08051f10

080125e0 <_ZN11TouchGFXHALD0Ev>:
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff ffe7 	bl	80125bc <_ZN11TouchGFXHALD1Ev>
 80125ee:	2178      	movs	r1, #120	; 0x78
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f012 fbdf 	bl	8024db4 <_ZdlPvj>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	4618      	mov	r0, r3
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012600:	b480      	push	{r7}
 8012602:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8012604:	4b05      	ldr	r3, [pc, #20]	; (801261c <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 8012606:	2200      	movs	r2, #0
 8012608:	601a      	str	r2, [r3, #0]
  vsync_sem = 0;
 801260a:	4b05      	ldr	r3, [pc, #20]	; (8012620 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 801260c:	2200      	movs	r2, #0
 801260e:	601a      	str	r2, [r3, #0]
}
 8012610:	bf00      	nop
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	20000238 	.word	0x20000238
 8012620:	2000023c 	.word	0x2000023c

08012624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012624:	b480      	push	{r7}
 8012626:	af00      	add	r7, sp, #0
  while(fb_sem);
 8012628:	4b08      	ldr	r3, [pc, #32]	; (801264c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	bf14      	ite	ne
 8012630:	2301      	movne	r3, #1
 8012632:	2300      	moveq	r3, #0
 8012634:	b2db      	uxtb	r3, r3
 8012636:	2b00      	cmp	r3, #0
 8012638:	d000      	beq.n	801263c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 801263a:	e7f5      	b.n	8012628 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
  fb_sem = 1;
 801263c:	4b03      	ldr	r3, [pc, #12]	; (801264c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 801263e:	2201      	movs	r2, #1
 8012640:	601a      	str	r2, [r3, #0]
}
 8012642:	bf00      	nop
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	20000238 	.word	0x20000238

08012650 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012650:	b480      	push	{r7}
 8012652:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8012654:	4b03      	ldr	r3, [pc, #12]	; (8012664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012656:	2200      	movs	r2, #0
 8012658:	601a      	str	r2, [r3, #0]
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	20000238 	.word	0x20000238

08012668 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012668:	b480      	push	{r7}
 801266a:	af00      	add	r7, sp, #0
  fb_sem = 1;
 801266c:	4b03      	ldr	r3, [pc, #12]	; (801267c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801266e:	2201      	movs	r2, #1
 8012670:	601a      	str	r2, [r3, #0]
}
 8012672:	bf00      	nop
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	20000238 	.word	0x20000238

08012680 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012680:	b480      	push	{r7}
 8012682:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8012684:	4b03      	ldr	r3, [pc, #12]	; (8012694 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012686:	2200      	movs	r2, #0
 8012688:	601a      	str	r2, [r3, #0]
}
 801268a:	bf00      	nop
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr
 8012694:	20000238 	.word	0x20000238

08012698 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012698:	b480      	push	{r7}
 801269a:	af00      	add	r7, sp, #0
  vsync_sem = 1;
 801269c:	4b03      	ldr	r3, [pc, #12]	; (80126ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801269e:	2201      	movs	r2, #1
 80126a0:	601a      	str	r2, [r3, #0]
}
 80126a2:	bf00      	nop
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	2000023c 	.word	0x2000023c

080126b0 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 80126b0:	b480      	push	{r7}
 80126b2:	af00      	add	r7, sp, #0
  return vsync_sem;
 80126b4:	4b05      	ldr	r3, [pc, #20]	; (80126cc <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	bf14      	ite	ne
 80126bc:	2301      	movne	r3, #1
 80126be:	2300      	moveq	r3, #0
 80126c0:	b2db      	uxtb	r3, r3
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr
 80126cc:	2000023c 	.word	0x2000023c

080126d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  if(vsync_sem)
 80126d4:	4b0a      	ldr	r3, [pc, #40]	; (8012700 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bf14      	ite	ne
 80126dc:	2301      	movne	r3, #1
 80126de:	2300      	moveq	r3, #0
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00a      	beq.n	80126fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
  {
    vsync_sem = 0;
 80126e6:	4b06      	ldr	r3, [pc, #24]	; (8012700 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 80126e8:	2200      	movs	r2, #0
 80126ea:	601a      	str	r2, [r3, #0]
    HAL::getInstance()->backPorchExited();
 80126ec:	f7fc f9d4 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 80126f0:	4602      	mov	r2, r0
 80126f2:	6813      	ldr	r3, [r2, #0]
 80126f4:	3358      	adds	r3, #88	; 0x58
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4610      	mov	r0, r2
 80126fa:	4798      	blx	r3
  }
}
 80126fc:	bf00      	nop
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	2000023c 	.word	0x2000023c

08012704 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 801270e:	88fb      	ldrh	r3, [r7, #6]
 8012710:	4618      	mov	r0, r3
 8012712:	f7f0 f8db 	bl	80028cc <HAL_Delay>
}
 8012716:	bf00      	nop
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
	...

08012720 <__NVIC_EnableIRQ>:
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	4603      	mov	r3, r0
 8012728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801272e:	2b00      	cmp	r3, #0
 8012730:	db0d      	blt.n	801274e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012736:	b2db      	uxtb	r3, r3
 8012738:	f003 021f 	and.w	r2, r3, #31
 801273c:	4907      	ldr	r1, [pc, #28]	; (801275c <__NVIC_EnableIRQ+0x3c>)
 801273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012742:	095b      	lsrs	r3, r3, #5
 8012744:	2001      	movs	r0, #1
 8012746:	fa00 f202 	lsl.w	r2, r0, r2
 801274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801274e:	bf00      	nop
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	e000e100 	.word	0xe000e100

08012760 <__NVIC_DisableIRQ>:
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	4603      	mov	r3, r0
 8012768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801276e:	2b00      	cmp	r3, #0
 8012770:	db12      	blt.n	8012798 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012776:	b2db      	uxtb	r3, r3
 8012778:	f003 021f 	and.w	r2, r3, #31
 801277c:	4909      	ldr	r1, [pc, #36]	; (80127a4 <__NVIC_DisableIRQ+0x44>)
 801277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012782:	095b      	lsrs	r3, r3, #5
 8012784:	2001      	movs	r0, #1
 8012786:	fa00 f202 	lsl.w	r2, r0, r2
 801278a:	3320      	adds	r3, #32
 801278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012794:	f3bf 8f6f 	isb	sy
}
 8012798:	bf00      	nop
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	e000e100 	.word	0xe000e100

080127a8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
        : color(0)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2200      	movs	r2, #0
 80127b4:	601a      	str	r2, [r3, #0]
    }
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4618      	mov	r0, r3
 80127ba:	370c      	adds	r7, #12
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr

080127c4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
        return color;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
    }
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
    {
 80127e4:	4a04      	ldr	r2, [pc, #16]	; (80127f8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	601a      	str	r2, [r3, #0]
    }
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4618      	mov	r0, r3
 80127ee:	370c      	adds	r7, #12
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	080520bc 	.word	0x080520bc

080127fc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    }
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f7ff ffe9 	bl	80127dc <_ZN8touchgfx9DMA_QueueD1Ev>
 801280a:	2104      	movs	r1, #4
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f012 fad1 	bl	8024db4 <_ZdlPvj>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	3344      	adds	r3, #68	; 0x44
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	4798      	blx	r3
    }
 8012830:	bf00      	nop
 8012832:	3708      	adds	r7, #8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8012840:	2300      	movs	r3, #0
    }
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
	...

08012850 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    {
 8012858:	4a04      	ldr	r2, [pc, #16]	; (801286c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	601a      	str	r2, [r3, #0]
    }
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	080530d0 	.word	0x080530d0

08012870 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    }
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff ffe9 	bl	8012850 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801287e:	210c      	movs	r1, #12
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f012 fa97 	bl	8024db4 <_ZdlPvj>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801289a:	4a09      	ldr	r2, [pc, #36]	; (80128c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	683a      	ldr	r2, [r7, #0]
 80128a4:	605a      	str	r2, [r3, #4]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2200      	movs	r2, #0
 80128aa:	721a      	strb	r2, [r3, #8]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	725a      	strb	r2, [r3, #9]
    {
    }
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4618      	mov	r0, r3
 80128b6:	370c      	adds	r7, #12
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	080530d0 	.word	0x080530d0

080128c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	685a      	ldr	r2, [r3, #4]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	3314      	adds	r3, #20
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4610      	mov	r0, r2
 80128dc:	4798      	blx	r3
    }
 80128de:	bf00      	nop
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b082      	sub	sp, #8
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3328      	adds	r3, #40	; 0x28
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4610      	mov	r0, r2
 80128fa:	4798      	blx	r3
    }
 80128fc:	bf00      	nop
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
 8012910:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801291c:	68ba      	ldr	r2, [r7, #8]
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	430a      	orrs	r2, r1
 8012924:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292c:	f023 0107 	bic.w	r1, r3, #7
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	430a      	orrs	r2, r1
 8012938:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012940:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8012944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012948:	6839      	ldr	r1, [r7, #0]
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	6812      	ldr	r2, [r2, #0]
 801294e:	430b      	orrs	r3, r1
 8012950:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8012952:	2300      	movs	r3, #0
}
 8012954:	4618      	mov	r0, r3
 8012956:	3714      	adds	r7, #20
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012968:	f7fc f896 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 801296c:	4603      	mov	r3, r0
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff ffa8 	bl	80128c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
    assert(0);
 8012984:	4b02      	ldr	r3, [pc, #8]	; (8012990 <DMA2D_XferErrorCallback+0x14>)
 8012986:	4a03      	ldr	r2, [pc, #12]	; (8012994 <DMA2D_XferErrorCallback+0x18>)
 8012988:	2136      	movs	r1, #54	; 0x36
 801298a:	4803      	ldr	r0, [pc, #12]	; (8012998 <DMA2D_XferErrorCallback+0x1c>)
 801298c:	f012 fa3e 	bl	8024e0c <__assert_func>
 8012990:	08026580 	.word	0x08026580
 8012994:	080520d8 	.word	0x080520d8
 8012998:	08026584 	.word	0x08026584

0801299c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	3318      	adds	r3, #24
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7ff fefd 	bl	80127a8 <_ZN8touchgfx9colortypeC1Ev>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4618      	mov	r0, r3
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 80129b8:	b5b0      	push	{r4, r5, r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	330c      	adds	r3, #12
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7ff ff61 	bl	8012890 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80129ce:	4a0e      	ldr	r2, [pc, #56]	; (8012a08 <_ZN10STM32F4DMAC1Ev+0x50>)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	601a      	str	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f103 000c 	add.w	r0, r3, #12
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	3320      	adds	r3, #32
 80129de:	2260      	movs	r2, #96	; 0x60
 80129e0:	4619      	mov	r1, r3
 80129e2:	f003 f911 	bl	8015c08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	3320      	adds	r3, #32
 80129ea:	245f      	movs	r4, #95	; 0x5f
 80129ec:	461d      	mov	r5, r3
 80129ee:	2c00      	cmp	r4, #0
 80129f0:	db05      	blt.n	80129fe <_ZN10STM32F4DMAC1Ev+0x46>
 80129f2:	4628      	mov	r0, r5
 80129f4:	f7ff ffd2 	bl	801299c <_ZN8touchgfx6BlitOpC1Ev>
 80129f8:	3520      	adds	r5, #32
 80129fa:	3c01      	subs	r4, #1
 80129fc:	e7f7      	b.n	80129ee <_ZN10STM32F4DMAC1Ev+0x36>
{}
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4618      	mov	r0, r3
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bdb0      	pop	{r4, r5, r7, pc}
 8012a08:	0805206c 	.word	0x0805206c

08012a0c <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	4a0b      	ldr	r2, [pc, #44]	; (8012a44 <_ZN10STM32F4DMAD1Ev+0x38>)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8012a1a:	480b      	ldr	r0, [pc, #44]	; (8012a48 <_ZN10STM32F4DMAD1Ev+0x3c>)
 8012a1c:	f7f0 f940 	bl	8002ca0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012a20:	205a      	movs	r0, #90	; 0x5a
 8012a22:	f7ff fe9d 	bl	8012760 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	330c      	adds	r3, #12
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f000 faa4 	bl	8012f78 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff ff0c 	bl	8012850 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3708      	adds	r7, #8
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	0805206c 	.word	0x0805206c
 8012a48:	20001e5c 	.word	0x20001e5c

08012a4c <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
}
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7ff ffd9 	bl	8012a0c <_ZN10STM32F4DMAD1Ev>
 8012a5a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f012 f9a8 	bl	8024db4 <_ZdlPvj>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
	...

08012a70 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8012a78:	4b09      	ldr	r3, [pc, #36]	; (8012aa0 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a7a:	4a0a      	ldr	r2, [pc, #40]	; (8012aa4 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8012a7c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8012a7e:	4808      	ldr	r0, [pc, #32]	; (8012aa0 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a80:	f7f0 f8c5 	bl	8002c0e <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012a84:	4b06      	ldr	r3, [pc, #24]	; (8012aa0 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a86:	4a08      	ldr	r2, [pc, #32]	; (8012aa8 <_ZN10STM32F4DMA10initializeEv+0x38>)
 8012a88:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012a8a:	4b05      	ldr	r3, [pc, #20]	; (8012aa0 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8012a8c:	4a07      	ldr	r2, [pc, #28]	; (8012aac <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8012a8e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8012a90:	205a      	movs	r0, #90	; 0x5a
 8012a92:	f7ff fe45 	bl	8012720 <__NVIC_EnableIRQ>
}
 8012a96:	bf00      	nop
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20001e5c 	.word	0x20001e5c
 8012aa4:	4002b000 	.word	0x4002b000
 8012aa8:	08012961 	.word	0x08012961
 8012aac:	0801297d 	.word	0x0801297d

08012ab0 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8012ab8:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012ac8:	b590      	push	{r4, r7, lr}
 8012aca:	b08d      	sub	sp, #52	; 0x34
 8012acc:	af02      	add	r7, sp, #8
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8012ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ad6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012ae0:	2b20      	cmp	r3, #32
 8012ae2:	d007      	beq.n	8012af4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b40      	cmp	r3, #64	; 0x40
 8012aea:	d003      	beq.n	8012af4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2b04      	cmp	r3, #4
 8012af2:	d101      	bne.n	8012af8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8012af4:	2301      	movs	r3, #1
 8012af6:	e000      	b.n	8012afa <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8012af8:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012afa:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8012b00:	2b80      	cmp	r3, #128	; 0x80
 8012b02:	d004      	beq.n	8012b0e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b0c:	d101      	bne.n	8012b12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e000      	b.n	8012b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8012b12:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012b14:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012b16:	f7fb ffcb 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	6813      	ldr	r3, [r2, #0]
 8012b1e:	331c      	adds	r3, #28
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	4610      	mov	r0, r2
 8012b24:	4798      	blx	r3
 8012b26:	4603      	mov	r3, r0
 8012b28:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b40      	cmp	r3, #64	; 0x40
 8012b30:	d01d      	beq.n	8012b6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012b32:	2b40      	cmp	r3, #64	; 0x40
 8012b34:	d804      	bhi.n	8012b40 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8012b36:	2b04      	cmp	r3, #4
 8012b38:	d00e      	beq.n	8012b58 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8012b3a:	2b20      	cmp	r3, #32
 8012b3c:	d017      	beq.n	8012b6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012b3e:	e019      	b.n	8012b74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8012b40:	2b80      	cmp	r3, #128	; 0x80
 8012b42:	d003      	beq.n	8012b4c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8012b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b48:	d003      	beq.n	8012b52 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8012b4a:	e013      	b.n	8012b74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8012b4c:	230a      	movs	r3, #10
 8012b4e:	623b      	str	r3, [r7, #32]
        break;
 8012b50:	e01a      	b.n	8012b88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8012b52:	2309      	movs	r3, #9
 8012b54:	623b      	str	r3, [r7, #32]
        break;
 8012b56:	e017      	b.n	8012b88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012b5e:	7f7b      	ldrb	r3, [r7, #29]
 8012b60:	2b10      	cmp	r3, #16
 8012b62:	d101      	bne.n	8012b68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8012b64:	2302      	movs	r3, #2
 8012b66:	e000      	b.n	8012b6a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	623b      	str	r3, [r7, #32]
        break;
 8012b6c:	e00c      	b.n	8012b88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	623b      	str	r3, [r7, #32]
        break;
 8012b72:	e009      	b.n	8012b88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8012b74:	2300      	movs	r3, #0
 8012b76:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012b78:	7f7b      	ldrb	r3, [r7, #29]
 8012b7a:	2b10      	cmp	r3, #16
 8012b7c:	d101      	bne.n	8012b82 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8012b7e:	2302      	movs	r3, #2
 8012b80:	e000      	b.n	8012b84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8012b82:	2301      	movs	r3, #1
 8012b84:	623b      	str	r3, [r7, #32]
        break;
 8012b86:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012b88:	4a75      	ldr	r2, [pc, #468]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012b8e:	7f7b      	ldrb	r3, [r7, #29]
 8012b90:	2b10      	cmp	r3, #16
 8012b92:	d101      	bne.n	8012b98 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8012b94:	2302      	movs	r3, #2
 8012b96:	e000      	b.n	8012b9a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8012b98:	2301      	movs	r3, #1
 8012b9a:	4a71      	ldr	r2, [pc, #452]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b9c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	8adb      	ldrh	r3, [r3, #22]
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	8a1b      	ldrh	r3, [r3, #16]
 8012ba8:	1ad3      	subs	r3, r2, r3
 8012baa:	461a      	mov	r2, r3
 8012bac:	4b6c      	ldr	r3, [pc, #432]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bae:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012bb0:	7f7b      	ldrb	r3, [r7, #29]
 8012bb2:	2b10      	cmp	r3, #16
 8012bb4:	d101      	bne.n	8012bba <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	e000      	b.n	8012bbc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8012bba:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	8adb      	ldrh	r3, [r3, #22]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	8a1b      	ldrh	r3, [r3, #16]
 8012bc6:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bca:	4865      	ldr	r0, [pc, #404]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bcc:	f7ff fe9a 	bl	8012904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012bd0:	4a63      	ldr	r2, [pc, #396]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	8a9b      	ldrh	r3, [r3, #20]
 8012bda:	461a      	mov	r2, r3
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	8a1b      	ldrh	r3, [r3, #16]
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	461a      	mov	r2, r3
 8012be4:	4b5e      	ldr	r3, [pc, #376]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012be6:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8012be8:	7ffb      	ldrb	r3, [r7, #31]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d103      	bne.n	8012bf6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8012bee:	7fbb      	ldrb	r3, [r7, #30]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f000 8081 	beq.w	8012cf8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	7f1b      	ldrb	r3, [r3, #28]
 8012bfa:	2bff      	cmp	r3, #255	; 0xff
 8012bfc:	d008      	beq.n	8012c10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8012bfe:	4b58      	ldr	r3, [pc, #352]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c00:	2202      	movs	r2, #2
 8012c02:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	7f1b      	ldrb	r3, [r3, #28]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	4b55      	ldr	r3, [pc, #340]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8012c0e:	e002      	b.n	8012c16 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012c10:	4b53      	ldr	r3, [pc, #332]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8012c16:	7fbb      	ldrb	r3, [r7, #30]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d058      	beq.n	8012cce <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8012c1c:	7f7b      	ldrb	r3, [r7, #29]
 8012c1e:	2b10      	cmp	r3, #16
 8012c20:	d14a      	bne.n	8012cb8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	3318      	adds	r3, #24
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7ff fdcc 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	0adb      	lsrs	r3, r3, #11
 8012c30:	f003 021f 	and.w	r2, r3, #31
 8012c34:	4613      	mov	r3, r2
 8012c36:	021b      	lsls	r3, r3, #8
 8012c38:	1a9a      	subs	r2, r3, r2
 8012c3a:	4b4a      	ldr	r3, [pc, #296]	; (8012d64 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8012c40:	1ad2      	subs	r2, r2, r3
 8012c42:	0852      	lsrs	r2, r2, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	091b      	lsrs	r3, r3, #4
 8012c48:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	3318      	adds	r3, #24
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff fdb8 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012c54:	4603      	mov	r3, r0
 8012c56:	095b      	lsrs	r3, r3, #5
 8012c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012c5c:	4613      	mov	r3, r2
 8012c5e:	021b      	lsls	r3, r3, #8
 8012c60:	1a9a      	subs	r2, r3, r2
 8012c62:	4b41      	ldr	r3, [pc, #260]	; (8012d68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012c64:	fba3 1302 	umull	r1, r3, r3, r2
 8012c68:	1ad2      	subs	r2, r2, r3
 8012c6a:	0852      	lsrs	r2, r2, #1
 8012c6c:	4413      	add	r3, r2
 8012c6e:	095b      	lsrs	r3, r3, #5
 8012c70:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	3318      	adds	r3, #24
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7ff fda4 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	f003 021f 	and.w	r2, r3, #31
 8012c82:	4613      	mov	r3, r2
 8012c84:	021b      	lsls	r3, r3, #8
 8012c86:	1a9a      	subs	r2, r3, r2
 8012c88:	4b36      	ldr	r3, [pc, #216]	; (8012d64 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8012c8e:	1ad2      	subs	r2, r2, r3
 8012c90:	0852      	lsrs	r2, r2, #1
 8012c92:	4413      	add	r3, r2
 8012c94:	091b      	lsrs	r3, r3, #4
 8012c96:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	7f1b      	ldrb	r3, [r3, #28]
 8012c9c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	061a      	lsls	r2, r3, #24
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	041b      	lsls	r3, r3, #16
 8012ca6:	431a      	orrs	r2, r3
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	021b      	lsls	r3, r3, #8
 8012cac:	431a      	orrs	r2, r3
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	4a2b      	ldr	r2, [pc, #172]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8012cb6:	e00a      	b.n	8012cce <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	3318      	adds	r3, #24
 8012cbc:	60bb      	str	r3, [r7, #8]
        return color;
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	683a      	ldr	r2, [r7, #0]
 8012cc4:	7f12      	ldrb	r2, [r2, #28]
 8012cc6:	0612      	lsls	r2, r2, #24
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	4a25      	ldr	r2, [pc, #148]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012ccc:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	8adb      	ldrh	r3, [r3, #22]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	8a1b      	ldrh	r3, [r3, #16]
 8012cd8:	1ad3      	subs	r3, r2, r3
 8012cda:	461a      	mov	r2, r3
 8012cdc:	4b20      	ldr	r3, [pc, #128]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cde:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012ce0:	7f7b      	ldrb	r3, [r7, #29]
 8012ce2:	2b10      	cmp	r3, #16
 8012ce4:	d101      	bne.n	8012cea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 8012ce6:	2302      	movs	r3, #2
 8012ce8:	e000      	b.n	8012cec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8012cea:	2301      	movs	r3, #1
 8012cec:	4a1c      	ldr	r2, [pc, #112]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cee:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012cf0:	2100      	movs	r1, #0
 8012cf2:	481b      	ldr	r0, [pc, #108]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cf4:	f7f0 fa54 	bl	80031a0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012cf8:	2101      	movs	r1, #1
 8012cfa:	4819      	ldr	r0, [pc, #100]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cfc:	f7f0 fa50 	bl	80031a0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8012d00:	7ffb      	ldrb	r3, [r7, #31]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d102      	bne.n	8012d0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012d06:	7fbb      	ldrb	r3, [r7, #30]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d015      	beq.n	8012d38 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d10:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d16:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d1c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d22:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d28:	9301      	str	r3, [sp, #4]
 8012d2a:	9200      	str	r2, [sp, #0]
 8012d2c:	4623      	mov	r3, r4
 8012d2e:	4602      	mov	r2, r0
 8012d30:	480b      	ldr	r0, [pc, #44]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d32:	f7f0 f858 	bl	8002de6 <HAL_DMA2D_BlendingStart_IT>
 8012d36:	e00f      	b.n	8012d58 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d3c:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d42:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d48:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	4603      	mov	r3, r0
 8012d52:	4803      	ldr	r0, [pc, #12]	; (8012d60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d54:	f7f0 f814 	bl	8002d80 <HAL_DMA2D_Start_IT>
    }
}
 8012d58:	bf00      	nop
 8012d5a:	372c      	adds	r7, #44	; 0x2c
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd90      	pop	{r4, r7, pc}
 8012d60:	20001e5c 	.word	0x20001e5c
 8012d64:	08421085 	.word	0x08421085
 8012d68:	04104105 	.word	0x04104105

08012d6c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8012d6c:	b590      	push	{r4, r7, lr}
 8012d6e:	b08f      	sub	sp, #60	; 0x3c
 8012d70:	af02      	add	r7, sp, #8
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012d76:	f7fb fe9b 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	6813      	ldr	r3, [r2, #0]
 8012d7e:	331c      	adds	r3, #28
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4610      	mov	r0, r2
 8012d84:	4798      	blx	r3
 8012d86:	4603      	mov	r3, r0
 8012d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d90:	2b10      	cmp	r3, #16
 8012d92:	d101      	bne.n	8012d98 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8012d94:	2302      	movs	r3, #2
 8012d96:	e000      	b.n	8012d9a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8012d98:	2301      	movs	r3, #1
 8012d9a:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8012da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012da4:	2b10      	cmp	r3, #16
 8012da6:	d149      	bne.n	8012e3c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	3318      	adds	r3, #24
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff fd09 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012db2:	4603      	mov	r3, r0
 8012db4:	0adb      	lsrs	r3, r3, #11
 8012db6:	f003 021f 	and.w	r2, r3, #31
 8012dba:	4613      	mov	r3, r2
 8012dbc:	021b      	lsls	r3, r3, #8
 8012dbe:	1a9a      	subs	r2, r3, r2
 8012dc0:	4b6a      	ldr	r3, [pc, #424]	; (8012f6c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8012dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8012dc6:	1ad2      	subs	r2, r2, r3
 8012dc8:	0852      	lsrs	r2, r2, #1
 8012dca:	4413      	add	r3, r2
 8012dcc:	091b      	lsrs	r3, r3, #4
 8012dce:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	3318      	adds	r3, #24
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff fcf5 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	095b      	lsrs	r3, r3, #5
 8012dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012de2:	4613      	mov	r3, r2
 8012de4:	021b      	lsls	r3, r3, #8
 8012de6:	1a9a      	subs	r2, r3, r2
 8012de8:	4b61      	ldr	r3, [pc, #388]	; (8012f70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 8012dea:	fba3 1302 	umull	r1, r3, r3, r2
 8012dee:	1ad2      	subs	r2, r2, r3
 8012df0:	0852      	lsrs	r2, r2, #1
 8012df2:	4413      	add	r3, r2
 8012df4:	095b      	lsrs	r3, r3, #5
 8012df6:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	3318      	adds	r3, #24
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7ff fce1 	bl	80127c4 <_ZNK8touchgfx9colortypecvmEv>
 8012e02:	4603      	mov	r3, r0
 8012e04:	f003 021f 	and.w	r2, r3, #31
 8012e08:	4613      	mov	r3, r2
 8012e0a:	021b      	lsls	r3, r3, #8
 8012e0c:	1a9a      	subs	r2, r3, r2
 8012e0e:	4b57      	ldr	r3, [pc, #348]	; (8012f6c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8012e10:	fba3 1302 	umull	r1, r3, r3, r2
 8012e14:	1ad2      	subs	r2, r2, r3
 8012e16:	0852      	lsrs	r2, r2, #1
 8012e18:	4413      	add	r3, r2
 8012e1a:	091b      	lsrs	r3, r3, #4
 8012e1c:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	7f1b      	ldrb	r3, [r3, #28]
 8012e22:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	061a      	lsls	r2, r3, #24
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	041b      	lsls	r3, r3, #16
 8012e2c:	431a      	orrs	r2, r3
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	021b      	lsls	r3, r3, #8
 8012e32:	4313      	orrs	r3, r2
 8012e34:	697a      	ldr	r2, [r7, #20]
 8012e36:	4313      	orrs	r3, r2
 8012e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e3a:	e00a      	b.n	8012e52 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	7f1b      	ldrb	r3, [r3, #28]
 8012e40:	061b      	lsls	r3, r3, #24
 8012e42:	461a      	mov	r2, r3
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	3318      	adds	r3, #24
 8012e48:	60fb      	str	r3, [r7, #12]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	2b08      	cmp	r3, #8
 8012e58:	d103      	bne.n	8012e62 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e60:	e003      	b.n	8012e6a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8012e62:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8012e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e68:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012e6a:	4a42      	ldr	r2, [pc, #264]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e74:	2b10      	cmp	r3, #16
 8012e76:	d101      	bne.n	8012e7c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8012e78:	2302      	movs	r3, #2
 8012e7a:	e000      	b.n	8012e7e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	4a3d      	ldr	r2, [pc, #244]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e80:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	8adb      	ldrh	r3, [r3, #22]
 8012e86:	461a      	mov	r2, r3
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	8a1b      	ldrh	r3, [r3, #16]
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	461a      	mov	r2, r3
 8012e90:	4b38      	ldr	r3, [pc, #224]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012e92:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e98:	2b10      	cmp	r3, #16
 8012e9a:	d101      	bne.n	8012ea0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8012e9c:	2202      	movs	r2, #2
 8012e9e:	e000      	b.n	8012ea2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8012ea0:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	8adb      	ldrh	r3, [r3, #22]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	8a1b      	ldrh	r3, [r3, #16]
 8012eac:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012eb0:	4830      	ldr	r0, [pc, #192]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012eb2:	f7ff fd27 	bl	8012904 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8012eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012ebc:	d11f      	bne.n	8012efe <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8012ebe:	4b2d      	ldr	r3, [pc, #180]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8012ec4:	4a2b      	ldr	r2, [pc, #172]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8012eca:	4b2a      	ldr	r3, [pc, #168]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ecc:	2209      	movs	r2, #9
 8012ece:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	8adb      	ldrh	r3, [r3, #22]
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	8a1b      	ldrh	r3, [r3, #16]
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	461a      	mov	r2, r3
 8012ede:	4b25      	ldr	r3, [pc, #148]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ee0:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ee6:	2b10      	cmp	r3, #16
 8012ee8:	d101      	bne.n	8012eee <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8012eea:	2302      	movs	r3, #2
 8012eec:	e000      	b.n	8012ef0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	4a20      	ldr	r2, [pc, #128]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ef2:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	481f      	ldr	r0, [pc, #124]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012ef8:	f7f0 f952 	bl	80031a0 <HAL_DMA2D_ConfigLayer>
 8012efc:	e005      	b.n	8012f0a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012efe:	4a1d      	ldr	r2, [pc, #116]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f00:	6a3b      	ldr	r3, [r7, #32]
 8012f02:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8012f04:	4b1b      	ldr	r3, [pc, #108]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012f0a:	2101      	movs	r1, #1
 8012f0c:	4819      	ldr	r0, [pc, #100]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f0e:	f7f0 f947 	bl	80031a0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012f18:	d115      	bne.n	8012f46 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f1e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f24:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f2a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f30:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f36:	9301      	str	r3, [sp, #4]
 8012f38:	9200      	str	r2, [sp, #0]
 8012f3a:	4623      	mov	r3, r4
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	480d      	ldr	r0, [pc, #52]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f40:	f7ef ff51 	bl	8002de6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8012f44:	e00d      	b.n	8012f62 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012f50:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f5c:	4805      	ldr	r0, [pc, #20]	; (8012f74 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8012f5e:	f7ef ff0f 	bl	8002d80 <HAL_DMA2D_Start_IT>
}
 8012f62:	bf00      	nop
 8012f64:	3734      	adds	r7, #52	; 0x34
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd90      	pop	{r4, r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	08421085 	.word	0x08421085
 8012f70:	04104105 	.word	0x04104105
 8012f74:	20001e5c 	.word	0x20001e5c

08012f78 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	4a05      	ldr	r2, [pc, #20]	; (8012f98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7ff fc27 	bl	80127dc <_ZN8touchgfx9DMA_QueueD1Ev>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4618      	mov	r0, r3
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	08053120 	.word	0x08053120

08012f9c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7ff ffe7 	bl	8012f78 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012faa:	2114      	movs	r1, #20
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f011 ff01 	bl	8024db4 <_ZdlPvj>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
        texts = t;
 8012fc4:	4a04      	ldr	r2, [pc, #16]	; (8012fd8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6013      	str	r3, [r2, #0]
    }
 8012fca:	bf00      	nop
 8012fcc:	370c      	adds	r7, #12
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop
 8012fd8:	200013d4 	.word	0x200013d4

08012fdc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012fdc:	b480      	push	{r7}
 8012fde:	b085      	sub	sp, #20
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012fea:	4a0b      	ldr	r2, [pc, #44]	; (8013018 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	605a      	str	r2, [r3, #4]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	609a      	str	r2, [r3, #8]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	683a      	ldr	r2, [r7, #0]
 8013000:	60da      	str	r2, [r3, #12]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	69ba      	ldr	r2, [r7, #24]
 8013006:	611a      	str	r2, [r3, #16]
    {
    }
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	4618      	mov	r0, r3
 801300c:	3714      	adds	r7, #20
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr
 8013016:	bf00      	nop
 8013018:	080521d8 	.word	0x080521d8

0801301c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
    {
 8013024:	4a04      	ldr	r2, [pc, #16]	; (8013038 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	601a      	str	r2, [r3, #0]
    }
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr
 8013038:	080521d8 	.word	0x080521d8

0801303c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
    }
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ff ffe9 	bl	801301c <_ZN8touchgfx7MVPHeapD1Ev>
 801304a:	2114      	movs	r1, #20
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f011 feb1 	bl	8024db4 <_ZdlPvj>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	4618      	mov	r0, r3
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
    {
 8013064:	4a04      	ldr	r2, [pc, #16]	; (8013078 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	601a      	str	r2, [r3, #0]
    }
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4618      	mov	r0, r3
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr
 8013078:	080536b8 	.word	0x080536b8

0801307c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
    }
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff ffe9 	bl	801305c <_ZN8touchgfx3LCDD1Ev>
 801308a:	2108      	movs	r1, #8
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f011 fe91 	bl	8024db4 <_ZdlPvj>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2200      	movs	r2, #0
 80130a8:	801a      	strh	r2, [r3, #0]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	805a      	strh	r2, [r3, #2]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	809a      	strh	r2, [r3, #4]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2200      	movs	r2, #0
 80130ba:	80da      	strh	r2, [r3, #6]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2200      	movs	r2, #0
 80130c0:	811a      	strh	r2, [r3, #8]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	815a      	strh	r2, [r3, #10]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	819a      	strh	r2, [r3, #12]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	739a      	strb	r2, [r3, #14]
        {
        }
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	4618      	mov	r0, r3
 80130d8:	370c      	adds	r7, #12
 80130da:	46bd      	mov	sp, r7
 80130dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e0:	4770      	bx	lr

080130e2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b082      	sub	sp, #8
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7ff ffd5 	bl	801309c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	611a      	str	r2, [r3, #16]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	829a      	strh	r2, [r3, #20]
    {
    }
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8013108:	b580      	push	{r7, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
          useDMAAcceleration(true)
 8013116:	4a48      	ldr	r2, [pc, #288]	; (8013238 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	601a      	str	r2, [r3, #0]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	68ba      	ldr	r2, [r7, #8]
 8013120:	605a      	str	r2, [r3, #4]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	609a      	str	r2, [r3, #8]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	60da      	str	r2, [r3, #12]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2200      	movs	r2, #0
 8013132:	611a      	str	r2, [r3, #16]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2200      	movs	r2, #0
 8013138:	615a      	str	r2, [r3, #20]
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2200      	movs	r2, #0
 801313e:	619a      	str	r2, [r3, #24]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	331c      	adds	r3, #28
 8013144:	4618      	mov	r0, r3
 8013146:	f7ff ffcc 	bl	80130e2 <_ZN8touchgfx8GesturesC1Ev>
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2200      	movs	r2, #0
 801314e:	639a      	str	r2, [r3, #56]	; 0x38
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2200      	movs	r2, #0
 8013154:	63da      	str	r2, [r3, #60]	; 0x3c
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2200      	movs	r2, #0
 801315a:	641a      	str	r2, [r3, #64]	; 0x40
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2200      	movs	r2, #0
 8013160:	645a      	str	r2, [r3, #68]	; 0x44
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2201      	movs	r2, #1
 801316e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2200      	movs	r2, #0
 8013176:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2200      	movs	r2, #0
 801317e:	64da      	str	r2, [r3, #76]	; 0x4c
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	3350      	adds	r3, #80	; 0x50
 8013184:	4618      	mov	r0, r3
 8013186:	f7fb fa27 	bl	800e5d8 <_ZN8touchgfx4RectC1Ev>
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2201      	movs	r2, #1
 801318e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2200      	movs	r2, #0
 801319e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2201      	movs	r2, #1
 80131a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2200      	movs	r2, #0
 80131be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2200      	movs	r2, #0
 80131ce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	671a      	str	r2, [r3, #112]	; 0x70
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2200      	movs	r2, #0
 80131dc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2200      	movs	r2, #0
 80131e4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2201      	movs	r2, #1
 80131ec:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        instance = this;
 80131f0:	4a12      	ldr	r2, [pc, #72]	; (801323c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80131f6:	4a12      	ldr	r2, [pc, #72]	; (8013240 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80131f8:	8b3b      	ldrh	r3, [r7, #24]
 80131fa:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80131fc:	4a11      	ldr	r2, [pc, #68]	; (8013244 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80131fe:	8bbb      	ldrh	r3, [r7, #28]
 8013200:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013202:	4b11      	ldr	r3, [pc, #68]	; (8013248 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8013204:	2200      	movs	r2, #0
 8013206:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013208:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801320a:	881a      	ldrh	r2, [r3, #0]
 801320c:	4b0f      	ldr	r3, [pc, #60]	; (801324c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801320e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013210:	4b0c      	ldr	r3, [pc, #48]	; (8013244 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8013212:	881a      	ldrh	r2, [r3, #0]
 8013214:	4b0e      	ldr	r3, [pc, #56]	; (8013250 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8013216:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013218:	8b3a      	ldrh	r2, [r7, #24]
 801321a:	8bbb      	ldrh	r3, [r7, #28]
 801321c:	429a      	cmp	r2, r3
 801321e:	d301      	bcc.n	8013224 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>
 8013220:	2200      	movs	r2, #0
 8013222:	e000      	b.n	8013226 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11e>
 8013224:	2201      	movs	r2, #1
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	4618      	mov	r0, r3
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	08052c88 	.word	0x08052c88
 801323c:	20001358 	.word	0x20001358
 8013240:	2000134a 	.word	0x2000134a
 8013244:	2000134c 	.word	0x2000134c
 8013248:	2000134e 	.word	0x2000134e
 801324c:	20001350 	.word	0x20001350
 8013250:	20001352 	.word	0x20001352

08013254 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	4618      	mov	r0, r3
 8013262:	f7fb fe5b 	bl	800ef1c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8013266:	bf00      	nop
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
	...

08013270 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013270:	b580      	push	{r7, lr}
 8013272:	b086      	sub	sp, #24
 8013274:	af02      	add	r7, sp, #8
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
 801327c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	9300      	str	r3, [sp, #0]
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	68b9      	ldr	r1, [r7, #8]
 801328a:	f7ff fea7 	bl	8012fdc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801328e:	4a04      	ldr	r2, [pc, #16]	; (80132a0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	601a      	str	r2, [r3, #0]
    {

    }
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	4618      	mov	r0, r3
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	080521c4 	.word	0x080521c4

080132a4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	4801      	ldr	r0, [pc, #4]	; (80132b0 <__tcf_0+0xc>)
 80132aa:	f000 f963 	bl	8013574 <_ZN12FrontendHeapD1Ev>
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	20000240 	.word	0x20000240

080132b4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80132b8:	4b12      	ldr	r3, [pc, #72]	; (8013304 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	f3bf 8f5b 	dmb	ish
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	f003 0301 	and.w	r3, r3, #1
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	bf0c      	ite	eq
 80132ca:	2301      	moveq	r3, #1
 80132cc:	2300      	movne	r3, #0
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d013      	beq.n	80132fc <_ZN12FrontendHeap11getInstanceEv+0x48>
 80132d4:	480b      	ldr	r0, [pc, #44]	; (8013304 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80132d6:	f011 fd6f 	bl	8024db8 <__cxa_guard_acquire>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	bf14      	ite	ne
 80132e0:	2301      	movne	r3, #1
 80132e2:	2300      	moveq	r3, #0
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d008      	beq.n	80132fc <_ZN12FrontendHeap11getInstanceEv+0x48>
 80132ea:	4807      	ldr	r0, [pc, #28]	; (8013308 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80132ec:	f000 f868 	bl	80133c0 <_ZN12FrontendHeapC1Ev>
 80132f0:	4804      	ldr	r0, [pc, #16]	; (8013304 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80132f2:	f011 fd6d 	bl	8024dd0 <__cxa_guard_release>
 80132f6:	4805      	ldr	r0, [pc, #20]	; (801330c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80132f8:	f011 fda6 	bl	8024e48 <atexit>
        return instance;
 80132fc:	4b02      	ldr	r3, [pc, #8]	; (8013308 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80132fe:	4618      	mov	r0, r3
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	20000628 	.word	0x20000628
 8013308:	20000240 	.word	0x20000240
 801330c:	080132a5 	.word	0x080132a5

08013310 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	4a05      	ldr	r2, [pc, #20]	; (8013330 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	601a      	str	r2, [r3, #0]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fe7b 	bl	801301c <_ZN8touchgfx7MVPHeapD1Ev>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	4618      	mov	r0, r3
 801332a:	3708      	adds	r7, #8
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	080521c4 	.word	0x080521c4

08013334 <_ZN16FrontendHeapBaseD0Ev>:
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f7ff ffe7 	bl	8013310 <_ZN16FrontendHeapBaseD1Ev>
 8013342:	2114      	movs	r1, #20
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f011 fd35 	bl	8024db4 <_ZdlPvj>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4618      	mov	r0, r3
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	f001 f8bc 	bl	80144dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013364:	4a03      	ldr	r2, [pc, #12]	; (8013374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	08052190 	.word	0x08052190

08013378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	4618      	mov	r0, r3
 8013384:	f001 f8aa 	bl	80144dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013388:	4a03      	ldr	r2, [pc, #12]	; (8013398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	0805215c 	.word	0x0805215c

0801339c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f001 f898 	bl	80144dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80133ac:	4a03      	ldr	r2, [pc, #12]	; (80133bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	601a      	str	r2, [r3, #0]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	08052128 	.word	0x08052128

080133c0 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b085      	sub	sp, #20
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f103 0114 	add.w	r1, r3, #20
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f503 740d 	add.w	r4, r3, #564	; 0x234
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	4623      	mov	r3, r4
 80133e6:	f7ff ff43 	bl	8013270 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80133ea:	4a18      	ldr	r2, [pc, #96]	; (801344c <_ZN12FrontendHeapC1Ev+0x8c>)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	601a      	str	r2, [r3, #0]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	3314      	adds	r3, #20
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ff ffad 	bl	8013354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	332c      	adds	r3, #44	; 0x2c
 80133fe:	4618      	mov	r0, r3
 8013400:	f7ff ffba 	bl	8013378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f503 730d 	add.w	r3, r3, #564	; 0x234
 801340a:	4618      	mov	r0, r3
 801340c:	f7ff ffc6 	bl	801339c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013416:	4618      	mov	r0, r3
 8013418:	f7fe fbdc 	bl	8011bd4 <_ZN5ModelC1Ev>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013428:	687a      	ldr	r2, [r7, #4]
 801342a:	4619      	mov	r1, r3
 801342c:	f7fe fbbc 	bl	8011ba8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013438:	4619      	mov	r1, r3
 801343a:	4610      	mov	r0, r2
 801343c:	f7ff ff0a 	bl	8013254 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	bd90      	pop	{r4, r7, pc}
 801344a:	bf00      	nop
 801344c:	08052114 	.word	0x08052114

08013450 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af02      	add	r7, sp, #8
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
 801345c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	8bbb      	ldrh	r3, [r7, #28]
 8013462:	9301      	str	r3, [sp, #4]
 8013464:	8b3b      	ldrh	r3, [r7, #24]
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	68b9      	ldr	r1, [r7, #8]
 801346e:	f7ff fe4b 	bl	8013108 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013472:	4a04      	ldr	r2, [pc, #16]	; (8013484 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	601a      	str	r2, [r3, #0]
    }
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	080521e8 	.word	0x080521e8

08013488 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af02      	add	r7, sp, #8
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
 8013494:	603b      	str	r3, [r7, #0]
 8013496:	68f8      	ldr	r0, [r7, #12]
 8013498:	8bbb      	ldrh	r3, [r7, #28]
 801349a:	9301      	str	r3, [sp, #4]
 801349c:	8b3b      	ldrh	r3, [r7, #24]
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	f7ff ffd3 	bl	8013450 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80134aa:	4a04      	ldr	r2, [pc, #16]	; (80134bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	601a      	str	r2, [r3, #0]
    }
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	08051f10 	.word	0x08051f10

080134c0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	4a04      	ldr	r2, [pc, #16]	; (80134dc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	370c      	adds	r7, #12
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	08051ef8 	.word	0x08051ef8

080134e0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7ff ffe8 	bl	80134c0 <_ZN8touchgfx15TouchControllerC1Ev>
 80134f0:	4a03      	ldr	r2, [pc, #12]	; (8013500 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	601a      	str	r2, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4618      	mov	r0, r3
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	08051ee0 	.word	0x08051ee0

08013504 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8013504:	b590      	push	{r4, r7, lr}
 8013506:	b085      	sub	sp, #20
 8013508:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801350a:	f7fe f923 	bl	8011754 <_ZN14BitmapDatabase11getInstanceEv>
 801350e:	4604      	mov	r4, r0
 8013510:	f7fe f92a 	bl	8011768 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013514:	4603      	mov	r3, r0
 8013516:	4619      	mov	r1, r3
 8013518:	2300      	movs	r3, #0
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	2300      	movs	r3, #0
 801351e:	2200      	movs	r2, #0
 8013520:	4620      	mov	r0, r4
 8013522:	f005 ffc1 	bl	80194a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8013526:	4809      	ldr	r0, [pc, #36]	; (801354c <touchgfx_init+0x48>)
 8013528:	f7ff fd48 	bl	8012fbc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801352c:	2000      	movs	r0, #0
 801352e:	f7fe fa53 	bl	80119d8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8013532:	4807      	ldr	r0, [pc, #28]	; (8013550 <touchgfx_init+0x4c>)
 8013534:	f005 ff02 	bl	801933c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8013538:	f7ff febc 	bl	80132b4 <_ZN12FrontendHeap11getInstanceEv>
 801353c:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 801353e:	4805      	ldr	r0, [pc, #20]	; (8013554 <touchgfx_init+0x50>)
 8013540:	f7fe ffc4 	bl	80124cc <_ZN11TouchGFXHAL10initializeEv>
}
 8013544:	bf00      	nop
 8013546:	370c      	adds	r7, #12
 8013548:	46bd      	mov	sp, r7
 801354a:	bd90      	pop	{r4, r7, pc}
 801354c:	200012c8 	.word	0x200012c8
 8013550:	20000030 	.word	0x20000030
 8013554:	200012cc 	.word	0x200012cc

08013558 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013558:	b580      	push	{r7, lr}
 801355a:	af00      	add	r7, sp, #0
 /*
  * Main event loop will check for VSYNC signal, and then process next frame.
  *
  * Note This function returns immediately if there is no VSYNC signal.
  */
  if (OSWrappers::isVSyncAvailable())
 801355c:	f7ff f8a8 	bl	80126b0 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d002      	beq.n	801356c <touchgfx_taskEntry+0x14>
  {
    hal.backPorchExited();
 8013566:	4802      	ldr	r0, [pc, #8]	; (8013570 <touchgfx_taskEntry+0x18>)
 8013568:	f7fe fe0a 	bl	8012180 <_ZN8touchgfx3HAL15backPorchExitedEv>
  }
}
 801356c:	bf00      	nop
 801356e:	bd80      	pop	{r7, pc}
 8013570:	200012cc 	.word	0x200012cc

08013574 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	4a10      	ldr	r2, [pc, #64]	; (80135c0 <_ZN12FrontendHeapD1Ev+0x4c>)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	601a      	str	r2, [r3, #0]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013588:	4618      	mov	r0, r3
 801358a:	f7fe fad7 	bl	8011b3c <_ZN19FrontendApplicationD1Ev>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8013594:	4618      	mov	r0, r3
 8013596:	f000 f827 	bl	80135e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	332c      	adds	r3, #44	; 0x2c
 801359e:	4618      	mov	r0, r3
 80135a0:	f000 f844 	bl	801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	3314      	adds	r3, #20
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 f863 	bl	8013674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff fead 	bl	8013310 <_ZN16FrontendHeapBaseD1Ev>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	08052114 	.word	0x08052114

080135c4 <_ZN12FrontendHeapD0Ev>:
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff ffd1 	bl	8013574 <_ZN12FrontendHeapD1Ev>
 80135d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f011 fbec 	bl	8024db4 <_ZdlPvj>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	4618      	mov	r0, r3
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
	...

080135e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	4a05      	ldr	r2, [pc, #20]	; (8013608 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	601a      	str	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4618      	mov	r0, r3
 80135fa:	f000 ff6d 	bl	80144d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	4618      	mov	r0, r3
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	08052128 	.word	0x08052128

0801360c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff ffe7 	bl	80135e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801361a:	2158      	movs	r1, #88	; 0x58
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f011 fbc9 	bl	8024db4 <_ZdlPvj>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4618      	mov	r0, r3
 8013626:	3708      	adds	r7, #8
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	4a05      	ldr	r2, [pc, #20]	; (801364c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	f000 ff4b 	bl	80144d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	0805215c 	.word	0x0805215c

08013650 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7ff ffe7 	bl	801362c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801365e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f011 fba6 	bl	8024db4 <_ZdlPvj>
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4618      	mov	r0, r3
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
	...

08013674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	4a05      	ldr	r2, [pc, #20]	; (8013694 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	601a      	str	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	4618      	mov	r0, r3
 8013686:	f000 ff27 	bl	80144d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4618      	mov	r0, r3
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	08052190 	.word	0x08052190

08013698 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f7ff ffe7 	bl	8013674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136a6:	2118      	movs	r1, #24
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f011 fb83 	bl	8024db4 <_ZdlPvj>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	4a05      	ldr	r2, [pc, #20]	; (80136d8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	601a      	str	r2, [r3, #0]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff fcc7 	bl	801305c <_ZN8touchgfx3LCDD1Ev>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	08054778 	.word	0x08054778

080136dc <_ZN8touchgfx8LCD16bppD0Ev>:
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7ff ffe7 	bl	80136b8 <_ZN8touchgfx8LCD16bppD1Ev>
 80136ea:	2178      	movs	r1, #120	; 0x78
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f011 fb61 	bl	8024db4 <_ZdlPvj>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	4618      	mov	r0, r3
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}

080136fc <_Z41__static_initialization_and_destruction_0ii>:
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af02      	add	r7, sp, #8
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b01      	cmp	r3, #1
 801370a:	d119      	bne.n	8013740 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013712:	4293      	cmp	r3, r2
 8013714:	d114      	bne.n	8013740 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013716:	4818      	ldr	r0, [pc, #96]	; (8013778 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013718:	f7ff fee2 	bl	80134e0 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 801371c:	4817      	ldr	r0, [pc, #92]	; (801377c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801371e:	f7ff f94b 	bl	80129b8 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 8013722:	4817      	ldr	r0, [pc, #92]	; (8013780 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013724:	f008 feb0 	bl	801c488 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8013728:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801372c:	9301      	str	r3, [sp, #4]
 801372e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	4b10      	ldr	r3, [pc, #64]	; (8013778 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013736:	4a12      	ldr	r2, [pc, #72]	; (8013780 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013738:	4910      	ldr	r1, [pc, #64]	; (801377c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801373a:	4812      	ldr	r0, [pc, #72]	; (8013784 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801373c:	f7ff fea4 	bl	8013488 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d113      	bne.n	801376e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801374c:	4293      	cmp	r3, r2
 801374e:	d10e      	bne.n	801376e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013750:	480c      	ldr	r0, [pc, #48]	; (8013784 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013752:	f7fe ff33 	bl	80125bc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013756:	480c      	ldr	r0, [pc, #48]	; (8013788 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013758:	f7fa fc26 	bl	800dfa8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801375c:	4808      	ldr	r0, [pc, #32]	; (8013780 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801375e:	f7ff ffab 	bl	80136b8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 8013762:	4806      	ldr	r0, [pc, #24]	; (801377c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013764:	f7ff f952 	bl	8012a0c <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8013768:	4803      	ldr	r0, [pc, #12]	; (8013778 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801376a:	f7fe fc79 	bl	8012060 <_ZN20STM32TouchControllerD1Ev>
}
 801376e:	bf00      	nop
 8013770:	3708      	adds	r7, #8
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	2000062c 	.word	0x2000062c
 801377c:	20000630 	.word	0x20000630
 8013780:	20001250 	.word	0x20001250
 8013784:	200012cc 	.word	0x200012cc
 8013788:	20000030 	.word	0x20000030

0801378c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013794:	2301      	movs	r3, #1
    }
 8013796:	4618      	mov	r0, r3
 8013798:	370c      	adds	r7, #12
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr

080137a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 80137a2:	b480      	push	{r7}
 80137a4:	b083      	sub	sp, #12
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80137aa:	2350      	movs	r3, #80	; 0x50
    }
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	460b      	mov	r3, r1
 80137c2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80137c4:	887a      	ldrh	r2, [r7, #2]
 80137c6:	4613      	mov	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	4413      	add	r3, r2
 80137cc:	011b      	lsls	r3, r3, #4
 80137ce:	3308      	adds	r3, #8
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	4413      	add	r3, r2
    }
 80137d4:	4618      	mov	r0, r3
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	460b      	mov	r3, r1
 80137ea:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80137ec:	887a      	ldrh	r2, [r7, #2]
 80137ee:	4613      	mov	r3, r2
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	4413      	add	r3, r2
 80137f4:	011b      	lsls	r3, r3, #4
 80137f6:	3308      	adds	r3, #8
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	4413      	add	r3, r2
    }
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013810:	2301      	movs	r3, #1
    }
 8013812:	4618      	mov	r0, r3
 8013814:	370c      	adds	r7, #12
 8013816:	46bd      	mov	sp, r7
 8013818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381c:	4770      	bx	lr

0801381e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801381e:	b480      	push	{r7}
 8013820:	b083      	sub	sp, #12
 8013822:	af00      	add	r7, sp, #0
 8013824:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013826:	f44f 7300 	mov.w	r3, #512	; 0x200
    }
 801382a:	4618      	mov	r0, r3
 801382c:	370c      	adds	r7, #12
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr

08013836 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013836:	b480      	push	{r7}
 8013838:	b083      	sub	sp, #12
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
 801383e:	460b      	mov	r3, r1
 8013840:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013842:	887b      	ldrh	r3, [r7, #2]
 8013844:	025b      	lsls	r3, r3, #9
 8013846:	3308      	adds	r3, #8
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	4413      	add	r3, r2
    }
 801384c:	4618      	mov	r0, r3
 801384e:	370c      	adds	r7, #12
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013858:	b480      	push	{r7}
 801385a:	b083      	sub	sp, #12
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013864:	887b      	ldrh	r3, [r7, #2]
 8013866:	025b      	lsls	r3, r3, #9
 8013868:	3308      	adds	r3, #8
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	4413      	add	r3, r2
    }
 801386e:	4618      	mov	r0, r3
 8013870:	370c      	adds	r7, #12
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr

0801387a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801387a:	b480      	push	{r7}
 801387c:	b083      	sub	sp, #12
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013882:	2301      	movs	r3, #1
    }
 8013884:	4618      	mov	r0, r3
 8013886:	370c      	adds	r7, #12
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013890:	b480      	push	{r7}
 8013892:	b083      	sub	sp, #12
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013898:	2310      	movs	r3, #16
    }
 801389a:	4618      	mov	r0, r3
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80138a6:	b480      	push	{r7}
 80138a8:	b083      	sub	sp, #12
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	460b      	mov	r3, r1
 80138b0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138b2:	887b      	ldrh	r3, [r7, #2]
 80138b4:	011b      	lsls	r3, r3, #4
 80138b6:	3308      	adds	r3, #8
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	4413      	add	r3, r2
    }
 80138bc:	4618      	mov	r0, r3
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80138c8:	b480      	push	{r7}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	460b      	mov	r3, r1
 80138d2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138d4:	887b      	ldrh	r3, [r7, #2]
 80138d6:	011b      	lsls	r3, r3, #4
 80138d8:	3308      	adds	r3, #8
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	4413      	add	r3, r2
    }
 80138de:	4618      	mov	r0, r3
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <_GLOBAL__sub_I_touchgfx_init>:
 80138ea:	b580      	push	{r7, lr}
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80138f2:	2001      	movs	r0, #1
 80138f4:	f7ff ff02 	bl	80136fc <_Z41__static_initialization_and_destruction_0ii>
 80138f8:	bd80      	pop	{r7, pc}

080138fa <_GLOBAL__sub_D_touchgfx_init>:
 80138fa:	b580      	push	{r7, lr}
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013902:	2000      	movs	r0, #0
 8013904:	f7ff fefa 	bl	80136fc <_Z41__static_initialization_and_destruction_0ii>
 8013908:	bd80      	pop	{r7, pc}

0801390a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801390a:	b580      	push	{r7, lr}
 801390c:	b082      	sub	sp, #8
 801390e:	af00      	add	r7, sp, #0
 8013910:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	3318      	adds	r3, #24
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	4798      	blx	r3
    }
 801391e:	bf00      	nop
 8013920:	3708      	adds	r7, #8
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8013926:	b480      	push	{r7}
 8013928:	b083      	sub	sp, #12
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
 801392e:	460b      	mov	r3, r1
 8013930:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	78fa      	ldrb	r2, [r7, #3]
 8013936:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801393a:	bf00      	nop
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013946:	b480      	push	{r7}
 8013948:	b083      	sub	sp, #12
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013954:	3301      	adds	r3, #1
 8013956:	b2da      	uxtb	r2, r3
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801395e:	bf00      	nop
 8013960:	370c      	adds	r7, #12
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
	...

0801396c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	460b      	mov	r3, r1
 8013976:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013978:	78fb      	ldrb	r3, [r7, #3]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d002      	beq.n	8013984 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801397e:	78fb      	ldrb	r3, [r7, #3]
 8013980:	2b02      	cmp	r3, #2
 8013982:	d105      	bne.n	8013990 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	78fa      	ldrb	r2, [r7, #3]
 8013988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801398c:	2301      	movs	r3, #1
 801398e:	e027      	b.n	80139e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013990:	78fb      	ldrb	r3, [r7, #3]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d123      	bne.n	80139de <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801399a:	2b00      	cmp	r3, #0
 801399c:	d014      	beq.n	80139c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	3384      	adds	r3, #132	; 0x84
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	4798      	blx	r3
 80139aa:	4603      	mov	r3, r0
 80139ac:	461a      	mov	r2, r3
 80139ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d008      	beq.n	80139c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80139b6:	4b0c      	ldr	r3, [pc, #48]	; (80139e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	f083 0301 	eor.w	r3, r3, #1
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80139c4:	2301      	movs	r3, #1
 80139c6:	e000      	b.n	80139ca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80139c8:	2300      	movs	r3, #0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d005      	beq.n	80139da <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	78fa      	ldrb	r2, [r7, #3]
 80139d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80139d6:	2301      	movs	r3, #1
 80139d8:	e002      	b.n	80139e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80139da:	2300      	movs	r3, #0
 80139dc:	e000      	b.n	80139e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80139de:	2300      	movs	r3, #0
    }
 80139e0:	4618      	mov	r0, r3
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	20001354 	.word	0x20001354

080139ec <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80139fc:	bf00      	nop
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <__NVIC_EnableIRQ>:
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	4603      	mov	r3, r0
 8013a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	db0d      	blt.n	8013a36 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	f003 021f 	and.w	r2, r3, #31
 8013a24:	4907      	ldr	r1, [pc, #28]	; (8013a44 <__NVIC_EnableIRQ+0x3c>)
 8013a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a2a:	095b      	lsrs	r3, r3, #5
 8013a2c:	2001      	movs	r0, #1
 8013a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8013a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013a36:	bf00      	nop
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	e000e100 	.word	0xe000e100

08013a48 <__NVIC_DisableIRQ>:
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	4603      	mov	r3, r0
 8013a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	db12      	blt.n	8013a80 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	f003 021f 	and.w	r2, r3, #31
 8013a64:	4909      	ldr	r1, [pc, #36]	; (8013a8c <__NVIC_DisableIRQ+0x44>)
 8013a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a6a:	095b      	lsrs	r3, r3, #5
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8013a72:	3320      	adds	r3, #32
 8013a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a7c:	f3bf 8f6f 	isb	sy
}
 8013a80:	bf00      	nop
 8013a82:	370c      	adds	r7, #12
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr
 8013a8c:	e000e100 	.word	0xe000e100

08013a90 <__NVIC_SetPriority>:
{
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	4603      	mov	r3, r0
 8013a98:	6039      	str	r1, [r7, #0]
 8013a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	db0c      	blt.n	8013abe <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	4a0e      	ldr	r2, [pc, #56]	; (8013ae4 <__NVIC_SetPriority+0x54>)
 8013aaa:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8013aae:	4608      	mov	r0, r1
 8013ab0:	011b      	lsls	r3, r3, #4
 8013ab2:	b2d9      	uxtb	r1, r3
 8013ab4:	1813      	adds	r3, r2, r0
 8013ab6:	460a      	mov	r2, r1
 8013ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013abc:	e00c      	b.n	8013ad8 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	b2da      	uxtb	r2, r3
 8013ac2:	4909      	ldr	r1, [pc, #36]	; (8013ae8 <__NVIC_SetPriority+0x58>)
 8013ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	f003 030f 	and.w	r3, r3, #15
 8013ace:	3b04      	subs	r3, #4
 8013ad0:	0112      	lsls	r2, r2, #4
 8013ad2:	b2d2      	uxtb	r2, r2
 8013ad4:	440b      	add	r3, r1
 8013ad6:	761a      	strb	r2, [r3, #24]
}
 8013ad8:	bf00      	nop
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr
 8013ae4:	e000e100 	.word	0xe000e100
 8013ae8:	e000ed00 	.word	0xe000ed00

08013aec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013aec:	b5b0      	push	{r4, r5, r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f001 fcd8 	bl	80154ac <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8013afc:	687d      	ldr	r5, [r7, #4]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	334c      	adds	r3, #76	; 0x4c
 8013b04:	681c      	ldr	r4, [r3, #0]
 8013b06:	f003 fcdf 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	4628      	mov	r0, r5
 8013b10:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4913      	ldr	r1, [pc, #76]	; (8013b64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff ff68 	bl	80139ec <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2101      	movs	r1, #1
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff ff23 	bl	801396c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    enableLCDControllerInterrupt();
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	3368      	adds	r3, #104	; 0x68
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	4798      	blx	r3
    enableInterrupts();
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	3360      	adds	r3, #96	; 0x60
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	4798      	blx	r3
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	3374      	adds	r3, #116	; 0x74
 8013b46:	681c      	ldr	r4, [r3, #0]
 8013b48:	2300      	movs	r3, #0
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8013b50:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2101      	movs	r1, #1
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7ff fee5 	bl	8013926 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8013b5c:	bf00      	nop
 8013b5e:	3708      	adds	r7, #8
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bdb0      	pop	{r4, r5, r7, pc}
 8013b64:	08012705 	.word	0x08012705

08013b68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013b70:	2109      	movs	r1, #9
 8013b72:	205a      	movs	r0, #90	; 0x5a
 8013b74:	f7ff ff8c 	bl	8013a90 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013b78:	2109      	movs	r1, #9
 8013b7a:	2058      	movs	r0, #88	; 0x58
 8013b7c:	f7ff ff88 	bl	8013a90 <__NVIC_SetPriority>
}
 8013b80:	bf00      	nop
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013b90:	205a      	movs	r0, #90	; 0x5a
 8013b92:	f7ff ff39 	bl	8013a08 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013b96:	2058      	movs	r0, #88	; 0x58
 8013b98:	f7ff ff36 	bl	8013a08 <__NVIC_EnableIRQ>
}
 8013b9c:	bf00      	nop
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013bac:	205a      	movs	r0, #90	; 0x5a
 8013bae:	f7ff ff4b 	bl	8013a48 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013bb2:	2058      	movs	r0, #88	; 0x58
 8013bb4:	f7ff ff48 	bl	8013a48 <__NVIC_DisableIRQ>
}
 8013bb8:	bf00      	nop
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013bc8:	4b11      	ldr	r3, [pc, #68]	; (8013c10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	3b01      	subs	r3, #1
 8013bd6:	b29a      	uxth	r2, r3
 8013bd8:	4b0e      	ldr	r3, [pc, #56]	; (8013c14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013bda:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013bdc:	4b0c      	ldr	r3, [pc, #48]	; (8013c10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bde:	691b      	ldr	r3, [r3, #16]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	3b01      	subs	r3, #1
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	4b0a      	ldr	r3, [pc, #40]	; (8013c18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013bee:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013bf0:	4b08      	ldr	r3, [pc, #32]	; (8013c14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013bf2:	881a      	ldrh	r2, [r3, #0]
 8013bf4:	4b06      	ldr	r3, [pc, #24]	; (8013c10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013bf8:	4b05      	ldr	r3, [pc, #20]	; (8013c10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bfc:	4a04      	ldr	r2, [pc, #16]	; (8013c10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bfe:	f043 0301 	orr.w	r3, r3, #1
 8013c02:	6353      	str	r3, [r2, #52]	; 0x34
}
 8013c04:	bf00      	nop
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr
 8013c10:	40016800 	.word	0x40016800
 8013c14:	20001344 	.word	0x20001344
 8013c18:	20001346 	.word	0x20001346

08013c1c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013c24:	4b03      	ldr	r3, [pc, #12]	; (8013c34 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	370c      	adds	r7, #12
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr
 8013c34:	40016884 	.word	0x40016884

08013c38 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b083      	sub	sp, #12
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013c42:	4a06      	ldr	r2, [pc, #24]	; (8013c5c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013c48:	4b05      	ldr	r3, [pc, #20]	; (8013c60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013c4e:	bf00      	nop
 8013c50:	370c      	adds	r7, #12
 8013c52:	46bd      	mov	sp, r7
 8013c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	40016884 	.word	0x40016884
 8013c60:	40016800 	.word	0x40016800

08013c64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6839      	ldr	r1, [r7, #0]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f001 f92a 	bl	8014ecc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013c78:	bf00      	nop
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	60f8      	str	r0, [r7, #12]
 8013c88:	60b9      	str	r1, [r7, #8]
 8013c8a:	607a      	str	r2, [r7, #4]
 8013c8c:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	68b9      	ldr	r1, [r7, #8]
 8013c96:	f001 fa4e 	bl	8015136 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013c9a:	4603      	mov	r3, r0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3710      	adds	r7, #16
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b085      	sub	sp, #20
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013cac:	4b0d      	ldr	r3, [pc, #52]	; (8013ce4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cb0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013cb2:	4b0c      	ldr	r3, [pc, #48]	; (8013ce4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8013cc2:	89fa      	ldrh	r2, [r7, #14]
 8013cc4:	89bb      	ldrh	r3, [r7, #12]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d304      	bcc.n	8013cd4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8013cca:	89fa      	ldrh	r2, [r7, #14]
 8013ccc:	89bb      	ldrh	r3, [r7, #12]
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	e000      	b.n	8013cd6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3714      	adds	r7, #20
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	40016800 	.word	0x40016800

08013ce8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8013cf0:	4b1a      	ldr	r3, [pc, #104]	; (8013d5c <HAL_LTDC_LineEventCallback+0x74>)
 8013cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cf4:	4a1a      	ldr	r2, [pc, #104]	; (8013d60 <HAL_LTDC_LineEventCallback+0x78>)
 8013cf6:	8812      	ldrh	r2, [r2, #0]
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	bf0c      	ite	eq
 8013cfc:	2301      	moveq	r3, #1
 8013cfe:	2300      	movne	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d017      	beq.n	8013d36 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8013d06:	4b17      	ldr	r3, [pc, #92]	; (8013d64 <HAL_LTDC_LineEventCallback+0x7c>)
 8013d08:	881b      	ldrh	r3, [r3, #0]
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7f1 fc07 	bl	8005520 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8013d12:	f7fa fec1 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8013d16:	4603      	mov	r3, r0
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ff fe14 	bl	8013946 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8013d1e:	f7fe fcbb 	bl	8012698 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8013d22:	f7fa feb9 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f001 fe47 	bl	80159bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8013d2e:	2000      	movs	r0, #0
 8013d30:	f7fe f9b8 	bl	80120a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8013d34:	e00e      	b.n	8013d54 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8013d36:	4b0a      	ldr	r3, [pc, #40]	; (8013d60 <HAL_LTDC_LineEventCallback+0x78>)
 8013d38:	881b      	ldrh	r3, [r3, #0]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f7f1 fbef 	bl	8005520 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8013d42:	2000      	movs	r0, #0
 8013d44:	f7fe f9b9 	bl	80120ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8013d48:	f7fa fea6 	bl	800ea98 <_ZN8touchgfx3HAL11getInstanceEv>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7ff fddb 	bl	801390a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	40016800 	.word	0x40016800
 8013d60:	20001344 	.word	0x20001344
 8013d64:	20001346 	.word	0x20001346

08013d68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	490e      	ldr	r1, [pc, #56]	; (8013da8 <MX_USB_HOST_Init+0x40>)
 8013d70:	480e      	ldr	r0, [pc, #56]	; (8013dac <MX_USB_HOST_Init+0x44>)
 8013d72:	f7f6 fb8d 	bl	800a490 <USBH_Init>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d001      	beq.n	8013d80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013d7c:	f7ed fdac 	bl	80018d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8013d80:	490b      	ldr	r1, [pc, #44]	; (8013db0 <MX_USB_HOST_Init+0x48>)
 8013d82:	480a      	ldr	r0, [pc, #40]	; (8013dac <MX_USB_HOST_Init+0x44>)
 8013d84:	f7f6 fc12 	bl	800a5ac <USBH_RegisterClass>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d001      	beq.n	8013d92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013d8e:	f7ed fda3 	bl	80018d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8013d92:	4806      	ldr	r0, [pc, #24]	; (8013dac <MX_USB_HOST_Init+0x44>)
 8013d94:	f7f6 fc96 	bl	800a6c4 <USBH_Start>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013d9e:	f7ed fd9b 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013da2:	bf00      	nop
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	08013dc9 	.word	0x08013dc9
 8013dac:	20002480 	.word	0x20002480
 8013db0:	20000010 	.word	0x20000010

08013db4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8013db8:	4802      	ldr	r0, [pc, #8]	; (8013dc4 <MX_USB_HOST_Process+0x10>)
 8013dba:	f7f6 fc93 	bl	800a6e4 <USBH_Process>
}
 8013dbe:	bf00      	nop
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	20002480 	.word	0x20002480

08013dc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013dd4:	78fb      	ldrb	r3, [r7, #3]
 8013dd6:	3b01      	subs	r3, #1
 8013dd8:	2b04      	cmp	r3, #4
 8013dda:	d819      	bhi.n	8013e10 <USBH_UserProcess+0x48>
 8013ddc:	a201      	add	r2, pc, #4	; (adr r2, 8013de4 <USBH_UserProcess+0x1c>)
 8013dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013de2:	bf00      	nop
 8013de4:	08013e11 	.word	0x08013e11
 8013de8:	08013e01 	.word	0x08013e01
 8013dec:	08013e11 	.word	0x08013e11
 8013df0:	08013e09 	.word	0x08013e09
 8013df4:	08013df9 	.word	0x08013df9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013df8:	4b09      	ldr	r3, [pc, #36]	; (8013e20 <USBH_UserProcess+0x58>)
 8013dfa:	2203      	movs	r2, #3
 8013dfc:	701a      	strb	r2, [r3, #0]
  break;
 8013dfe:	e008      	b.n	8013e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013e00:	4b07      	ldr	r3, [pc, #28]	; (8013e20 <USBH_UserProcess+0x58>)
 8013e02:	2202      	movs	r2, #2
 8013e04:	701a      	strb	r2, [r3, #0]
  break;
 8013e06:	e004      	b.n	8013e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013e08:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <USBH_UserProcess+0x58>)
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	701a      	strb	r2, [r3, #0]
  break;
 8013e0e:	e000      	b.n	8013e12 <USBH_UserProcess+0x4a>

  default:
  break;
 8013e10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013e12:	bf00      	nop
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	20001348 	.word	0x20001348

08013e24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b08a      	sub	sp, #40	; 0x28
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e2c:	f107 0314 	add.w	r3, r7, #20
 8013e30:	2200      	movs	r2, #0
 8013e32:	601a      	str	r2, [r3, #0]
 8013e34:	605a      	str	r2, [r3, #4]
 8013e36:	609a      	str	r2, [r3, #8]
 8013e38:	60da      	str	r2, [r3, #12]
 8013e3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4a1d      	ldr	r2, [pc, #116]	; (8013eb8 <HAL_HCD_MspInit+0x94>)
 8013e42:	4293      	cmp	r3, r2
 8013e44:	d134      	bne.n	8013eb0 <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013e46:	2300      	movs	r3, #0
 8013e48:	613b      	str	r3, [r7, #16]
 8013e4a:	4b1c      	ldr	r3, [pc, #112]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e4e:	4a1b      	ldr	r2, [pc, #108]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e50:	f043 0302 	orr.w	r3, r3, #2
 8013e54:	6313      	str	r3, [r2, #48]	; 0x30
 8013e56:	4b19      	ldr	r3, [pc, #100]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e5a:	f003 0302 	and.w	r3, r3, #2
 8013e5e:	613b      	str	r3, [r7, #16]
 8013e60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8013e62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8013e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e68:	2302      	movs	r3, #2
 8013e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e70:	2303      	movs	r3, #3
 8013e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8013e74:	230c      	movs	r3, #12
 8013e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013e78:	f107 0314 	add.w	r3, r7, #20
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4810      	ldr	r0, [pc, #64]	; (8013ec0 <HAL_HCD_MspInit+0x9c>)
 8013e80:	f7ef fabc 	bl	80033fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013e84:	2300      	movs	r3, #0
 8013e86:	60fb      	str	r3, [r7, #12]
 8013e88:	4b0c      	ldr	r3, [pc, #48]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e8c:	4a0b      	ldr	r2, [pc, #44]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e92:	6313      	str	r3, [r2, #48]	; 0x30
 8013e94:	4b09      	ldr	r3, [pc, #36]	; (8013ebc <HAL_HCD_MspInit+0x98>)
 8013e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013e9c:	60fb      	str	r3, [r7, #12]
 8013e9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	204d      	movs	r0, #77	; 0x4d
 8013ea6:	f7ee fe30 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013eaa:	204d      	movs	r0, #77	; 0x4d
 8013eac:	f7ee fe49 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013eb0:	bf00      	nop
 8013eb2:	3728      	adds	r7, #40	; 0x28
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	40040000 	.word	0x40040000
 8013ebc:	40023800 	.word	0x40023800
 8013ec0:	40020400 	.word	0x40020400

08013ec4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7f6 ffd9 	bl	800ae8a <USBH_LL_IncTimer>
}
 8013ed8:	bf00      	nop
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7f7 f811 	bl	800af16 <USBH_LL_Connect>
}
 8013ef4:	bf00      	nop
 8013ef6:	3708      	adds	r7, #8
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f7 f81a 	bl	800af44 <USBH_LL_Disconnect>
}
 8013f10:	bf00      	nop
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	460b      	mov	r3, r1
 8013f22:	70fb      	strb	r3, [r7, #3]
 8013f24:	4613      	mov	r3, r2
 8013f26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8013f28:	bf00      	nop
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7f6 ffcb 	bl	800aede <USBH_LL_PortEnabled>
}
 8013f48:	bf00      	nop
 8013f4a:	3708      	adds	r7, #8
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7f6 ffcb 	bl	800aefa <USBH_LL_PortDisabled>
}
 8013f64:	bf00      	nop
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d132      	bne.n	8013fe4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8013f7e:	4a1c      	ldr	r2, [pc, #112]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4a19      	ldr	r2, [pc, #100]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013f8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013f8e:	4b18      	ldr	r3, [pc, #96]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013f90:	4a18      	ldr	r2, [pc, #96]	; (8013ff4 <USBH_LL_Init+0x88>)
 8013f92:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8013f94:	4b16      	ldr	r3, [pc, #88]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013f96:	220c      	movs	r2, #12
 8013f98:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8013f9a:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013fa0:	4b13      	ldr	r3, [pc, #76]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013fa6:	4b12      	ldr	r3, [pc, #72]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fa8:	2202      	movs	r2, #2
 8013faa:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013fac:	4b10      	ldr	r3, [pc, #64]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fae:	2200      	movs	r2, #0
 8013fb0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013fb2:	4b0f      	ldr	r3, [pc, #60]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8013fb8:	4b0d      	ldr	r3, [pc, #52]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013fbe:	4b0c      	ldr	r3, [pc, #48]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8013fc4:	480a      	ldr	r0, [pc, #40]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fc6:	f7ef fbf4 	bl	80037b2 <HAL_HCD_Init>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8013fd0:	f7ed fc82 	bl	80018d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8013fd4:	4806      	ldr	r0, [pc, #24]	; (8013ff0 <USBH_LL_Init+0x84>)
 8013fd6:	f7ef fff7 	bl	8003fc8 <HAL_HCD_GetCurrentFrame>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	4619      	mov	r1, r3
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7f6 ff44 	bl	800ae6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20002858 	.word	0x20002858
 8013ff4:	40040000 	.word	0x40040000

08013ff8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014000:	2300      	movs	r3, #0
 8014002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014004:	2300      	movs	r3, #0
 8014006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801400e:	4618      	mov	r0, r3
 8014010:	f7ef ff62 	bl	8003ed8 <HAL_HCD_Start>
 8014014:	4603      	mov	r3, r0
 8014016:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014018:	7bfb      	ldrb	r3, [r7, #15]
 801401a:	4618      	mov	r0, r3
 801401c:	f000 f990 	bl	8014340 <USBH_Get_USB_Status>
 8014020:	4603      	mov	r3, r0
 8014022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014024:	7bbb      	ldrb	r3, [r7, #14]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3710      	adds	r7, #16
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801402e:	b580      	push	{r7, lr}
 8014030:	b084      	sub	sp, #16
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014036:	2300      	movs	r3, #0
 8014038:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801403a:	2300      	movs	r3, #0
 801403c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014044:	4618      	mov	r0, r3
 8014046:	f7ef ff6a 	bl	8003f1e <HAL_HCD_Stop>
 801404a:	4603      	mov	r3, r0
 801404c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801404e:	7bfb      	ldrb	r3, [r7, #15]
 8014050:	4618      	mov	r0, r3
 8014052:	f000 f975 	bl	8014340 <USBH_Get_USB_Status>
 8014056:	4603      	mov	r3, r0
 8014058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801405a:	7bbb      	ldrb	r3, [r7, #14]
}
 801405c:	4618      	mov	r0, r3
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801406c:	2301      	movs	r3, #1
 801406e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014076:	4618      	mov	r0, r3
 8014078:	f7ef ffb4 	bl	8003fe4 <HAL_HCD_GetCurrentSpeed>
 801407c:	4603      	mov	r3, r0
 801407e:	2b01      	cmp	r3, #1
 8014080:	d007      	beq.n	8014092 <USBH_LL_GetSpeed+0x2e>
 8014082:	2b01      	cmp	r3, #1
 8014084:	d302      	bcc.n	801408c <USBH_LL_GetSpeed+0x28>
 8014086:	2b02      	cmp	r3, #2
 8014088:	d006      	beq.n	8014098 <USBH_LL_GetSpeed+0x34>
 801408a:	e008      	b.n	801409e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801408c:	2300      	movs	r3, #0
 801408e:	73fb      	strb	r3, [r7, #15]
    break;
 8014090:	e008      	b.n	80140a4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8014092:	2301      	movs	r3, #1
 8014094:	73fb      	strb	r3, [r7, #15]
    break;
 8014096:	e005      	b.n	80140a4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014098:	2302      	movs	r3, #2
 801409a:	73fb      	strb	r3, [r7, #15]
    break;
 801409c:	e002      	b.n	80140a4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801409e:	2301      	movs	r3, #1
 80140a0:	73fb      	strb	r3, [r7, #15]
    break;
 80140a2:	bf00      	nop
  }
  return  speed;
 80140a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3710      	adds	r7, #16
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b084      	sub	sp, #16
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140b6:	2300      	movs	r3, #0
 80140b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7ef ff47 	bl	8003f58 <HAL_HCD_ResetPort>
 80140ca:	4603      	mov	r3, r0
 80140cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80140ce:	7bfb      	ldrb	r3, [r7, #15]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f000 f935 	bl	8014340 <USBH_Get_USB_Status>
 80140d6:	4603      	mov	r3, r0
 80140d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80140da:	7bbb      	ldrb	r3, [r7, #14]
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3710      	adds	r7, #16
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80140f6:	78fa      	ldrb	r2, [r7, #3]
 80140f8:	4611      	mov	r1, r2
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7ef ff4f 	bl	8003f9e <HAL_HCD_HC_GetXferCount>
 8014100:	4603      	mov	r3, r0
}
 8014102:	4618      	mov	r0, r3
 8014104:	3708      	adds	r7, #8
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801410a:	b590      	push	{r4, r7, lr}
 801410c:	b089      	sub	sp, #36	; 0x24
 801410e:	af04      	add	r7, sp, #16
 8014110:	6078      	str	r0, [r7, #4]
 8014112:	4608      	mov	r0, r1
 8014114:	4611      	mov	r1, r2
 8014116:	461a      	mov	r2, r3
 8014118:	4603      	mov	r3, r0
 801411a:	70fb      	strb	r3, [r7, #3]
 801411c:	460b      	mov	r3, r1
 801411e:	70bb      	strb	r3, [r7, #2]
 8014120:	4613      	mov	r3, r2
 8014122:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014124:	2300      	movs	r3, #0
 8014126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014132:	787c      	ldrb	r4, [r7, #1]
 8014134:	78ba      	ldrb	r2, [r7, #2]
 8014136:	78f9      	ldrb	r1, [r7, #3]
 8014138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801413a:	9302      	str	r3, [sp, #8]
 801413c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014140:	9301      	str	r3, [sp, #4]
 8014142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	4623      	mov	r3, r4
 801414a:	f7ef fb94 	bl	8003876 <HAL_HCD_HC_Init>
 801414e:	4603      	mov	r3, r0
 8014150:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8014152:	7bfb      	ldrb	r3, [r7, #15]
 8014154:	4618      	mov	r0, r3
 8014156:	f000 f8f3 	bl	8014340 <USBH_Get_USB_Status>
 801415a:	4603      	mov	r3, r0
 801415c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801415e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014160:	4618      	mov	r0, r3
 8014162:	3714      	adds	r7, #20
 8014164:	46bd      	mov	sp, r7
 8014166:	bd90      	pop	{r4, r7, pc}

08014168 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b084      	sub	sp, #16
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	460b      	mov	r3, r1
 8014172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014174:	2300      	movs	r3, #0
 8014176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014182:	78fa      	ldrb	r2, [r7, #3]
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f7ef fc0d 	bl	80039a6 <HAL_HCD_HC_Halt>
 801418c:	4603      	mov	r3, r0
 801418e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014190:	7bfb      	ldrb	r3, [r7, #15]
 8014192:	4618      	mov	r0, r3
 8014194:	f000 f8d4 	bl	8014340 <USBH_Get_USB_Status>
 8014198:	4603      	mov	r3, r0
 801419a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801419c:	7bbb      	ldrb	r3, [r7, #14]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3710      	adds	r7, #16
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80141a6:	b590      	push	{r4, r7, lr}
 80141a8:	b089      	sub	sp, #36	; 0x24
 80141aa:	af04      	add	r7, sp, #16
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	4608      	mov	r0, r1
 80141b0:	4611      	mov	r1, r2
 80141b2:	461a      	mov	r2, r3
 80141b4:	4603      	mov	r3, r0
 80141b6:	70fb      	strb	r3, [r7, #3]
 80141b8:	460b      	mov	r3, r1
 80141ba:	70bb      	strb	r3, [r7, #2]
 80141bc:	4613      	mov	r3, r2
 80141be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141c0:	2300      	movs	r3, #0
 80141c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80141c4:	2300      	movs	r3, #0
 80141c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80141ce:	787c      	ldrb	r4, [r7, #1]
 80141d0:	78ba      	ldrb	r2, [r7, #2]
 80141d2:	78f9      	ldrb	r1, [r7, #3]
 80141d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80141d8:	9303      	str	r3, [sp, #12]
 80141da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80141dc:	9302      	str	r3, [sp, #8]
 80141de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e0:	9301      	str	r3, [sp, #4]
 80141e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	4623      	mov	r3, r4
 80141ea:	f7ef fbff 	bl	80039ec <HAL_HCD_HC_SubmitRequest>
 80141ee:	4603      	mov	r3, r0
 80141f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80141f2:	7bfb      	ldrb	r3, [r7, #15]
 80141f4:	4618      	mov	r0, r3
 80141f6:	f000 f8a3 	bl	8014340 <USBH_Get_USB_Status>
 80141fa:	4603      	mov	r3, r0
 80141fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3714      	adds	r7, #20
 8014204:	46bd      	mov	sp, r7
 8014206:	bd90      	pop	{r4, r7, pc}

08014208 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	460b      	mov	r3, r1
 8014212:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801421a:	78fa      	ldrb	r2, [r7, #3]
 801421c:	4611      	mov	r1, r2
 801421e:	4618      	mov	r0, r3
 8014220:	f7ef fea8 	bl	8003f74 <HAL_HCD_HC_GetURBState>
 8014224:	4603      	mov	r3, r0
}
 8014226:	4618      	mov	r0, r3
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b082      	sub	sp, #8
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
 8014236:	460b      	mov	r3, r1
 8014238:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014240:	2b00      	cmp	r3, #0
 8014242:	d103      	bne.n	801424c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	4618      	mov	r0, r3
 8014248:	f000 f8a6 	bl	8014398 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801424c:	20c8      	movs	r0, #200	; 0xc8
 801424e:	f7ee fb3d 	bl	80028cc <HAL_Delay>
  return USBH_OK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	460b      	mov	r3, r1
 8014266:	70fb      	strb	r3, [r7, #3]
 8014268:	4613      	mov	r3, r2
 801426a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014272:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014274:	78fa      	ldrb	r2, [r7, #3]
 8014276:	68f9      	ldr	r1, [r7, #12]
 8014278:	4613      	mov	r3, r2
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4413      	add	r3, r2
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	440b      	add	r3, r1
 8014282:	333b      	adds	r3, #59	; 0x3b
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00a      	beq.n	80142a0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801428a:	78fa      	ldrb	r2, [r7, #3]
 801428c:	68f9      	ldr	r1, [r7, #12]
 801428e:	4613      	mov	r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	4413      	add	r3, r2
 8014294:	00db      	lsls	r3, r3, #3
 8014296:	440b      	add	r3, r1
 8014298:	3350      	adds	r3, #80	; 0x50
 801429a:	78ba      	ldrb	r2, [r7, #2]
 801429c:	701a      	strb	r2, [r3, #0]
 801429e:	e009      	b.n	80142b4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80142a0:	78fa      	ldrb	r2, [r7, #3]
 80142a2:	68f9      	ldr	r1, [r7, #12]
 80142a4:	4613      	mov	r3, r2
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	4413      	add	r3, r2
 80142aa:	00db      	lsls	r3, r3, #3
 80142ac:	440b      	add	r3, r1
 80142ae:	3351      	adds	r3, #81	; 0x51
 80142b0:	78ba      	ldrb	r2, [r7, #2]
 80142b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80142c2:	b480      	push	{r7}
 80142c4:	b085      	sub	sp, #20
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
 80142ca:	460b      	mov	r3, r1
 80142cc:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80142ce:	2300      	movs	r3, #0
 80142d0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80142d8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80142da:	78fa      	ldrb	r2, [r7, #3]
 80142dc:	68b9      	ldr	r1, [r7, #8]
 80142de:	4613      	mov	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4413      	add	r3, r2
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	440b      	add	r3, r1
 80142e8:	333b      	adds	r3, #59	; 0x3b
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d00a      	beq.n	8014306 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80142f0:	78fa      	ldrb	r2, [r7, #3]
 80142f2:	68b9      	ldr	r1, [r7, #8]
 80142f4:	4613      	mov	r3, r2
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	4413      	add	r3, r2
 80142fa:	00db      	lsls	r3, r3, #3
 80142fc:	440b      	add	r3, r1
 80142fe:	3350      	adds	r3, #80	; 0x50
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	73fb      	strb	r3, [r7, #15]
 8014304:	e009      	b.n	801431a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8014306:	78fa      	ldrb	r2, [r7, #3]
 8014308:	68b9      	ldr	r1, [r7, #8]
 801430a:	4613      	mov	r3, r2
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	4413      	add	r3, r2
 8014310:	00db      	lsls	r3, r3, #3
 8014312:	440b      	add	r3, r1
 8014314:	3351      	adds	r3, #81	; 0x51
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801431a:	7bfb      	ldrb	r3, [r7, #15]
}
 801431c:	4618      	mov	r0, r3
 801431e:	3714      	adds	r7, #20
 8014320:	46bd      	mov	sp, r7
 8014322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014326:	4770      	bx	lr

08014328 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f7ee facb 	bl	80028cc <HAL_Delay>
}
 8014336:	bf00      	nop
 8014338:	3708      	adds	r7, #8
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}
	...

08014340 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014340:	b480      	push	{r7}
 8014342:	b085      	sub	sp, #20
 8014344:	af00      	add	r7, sp, #0
 8014346:	4603      	mov	r3, r0
 8014348:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801434a:	2300      	movs	r3, #0
 801434c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801434e:	79fb      	ldrb	r3, [r7, #7]
 8014350:	2b03      	cmp	r3, #3
 8014352:	d817      	bhi.n	8014384 <USBH_Get_USB_Status+0x44>
 8014354:	a201      	add	r2, pc, #4	; (adr r2, 801435c <USBH_Get_USB_Status+0x1c>)
 8014356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801435a:	bf00      	nop
 801435c:	0801436d 	.word	0x0801436d
 8014360:	08014373 	.word	0x08014373
 8014364:	08014379 	.word	0x08014379
 8014368:	0801437f 	.word	0x0801437f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801436c:	2300      	movs	r3, #0
 801436e:	73fb      	strb	r3, [r7, #15]
    break;
 8014370:	e00b      	b.n	801438a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014372:	2302      	movs	r3, #2
 8014374:	73fb      	strb	r3, [r7, #15]
    break;
 8014376:	e008      	b.n	801438a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014378:	2301      	movs	r3, #1
 801437a:	73fb      	strb	r3, [r7, #15]
    break;
 801437c:	e005      	b.n	801438a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801437e:	2302      	movs	r3, #2
 8014380:	73fb      	strb	r3, [r7, #15]
    break;
 8014382:	e002      	b.n	801438a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014384:	2302      	movs	r3, #2
 8014386:	73fb      	strb	r3, [r7, #15]
    break;
 8014388:	bf00      	nop
  }
  return usb_status;
 801438a:	7bfb      	ldrb	r3, [r7, #15]
}
 801438c:	4618      	mov	r0, r3
 801438e:	3714      	adds	r7, #20
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	4603      	mov	r3, r0
 80143a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80143a2:	79fb      	ldrb	r3, [r7, #7]
 80143a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80143a6:	79fb      	ldrb	r3, [r7, #7]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80143ac:	2301      	movs	r3, #1
 80143ae:	73fb      	strb	r3, [r7, #15]
 80143b0:	e001      	b.n	80143b6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80143b2:	2300      	movs	r3, #0
 80143b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_3,(GPIO_PinState)data);
 80143b6:	7bfb      	ldrb	r3, [r7, #15]
 80143b8:	461a      	mov	r2, r3
 80143ba:	2108      	movs	r1, #8
 80143bc:	4803      	ldr	r0, [pc, #12]	; (80143cc <MX_DriverVbusHS+0x34>)
 80143be:	f7ef f9df 	bl	8003780 <HAL_GPIO_WritePin>
}
 80143c2:	bf00      	nop
 80143c4:	3710      	adds	r7, #16
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	40022000 	.word	0x40022000

080143d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80143d0:	8880      	ldrh	r0, [r0, #4]
 80143d2:	4770      	bx	lr

080143d4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80143d4:	2300      	movs	r3, #0
 80143d6:	8083      	strh	r3, [r0, #4]
 80143d8:	4770      	bx	lr
	...

080143dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80143dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143de:	6803      	ldr	r3, [r0, #0]
 80143e0:	4605      	mov	r5, r0
 80143e2:	460e      	mov	r6, r1
 80143e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e6:	2100      	movs	r1, #0
 80143e8:	4798      	blx	r3
 80143ea:	682b      	ldr	r3, [r5, #0]
 80143ec:	4604      	mov	r4, r0
 80143ee:	6a1b      	ldr	r3, [r3, #32]
 80143f0:	4628      	mov	r0, r5
 80143f2:	4798      	blx	r3
 80143f4:	88ab      	ldrh	r3, [r5, #4]
 80143f6:	1b34      	subs	r4, r6, r4
 80143f8:	b2a4      	uxth	r4, r4
 80143fa:	fbb4 f4f0 	udiv	r4, r4, r0
 80143fe:	42a3      	cmp	r3, r4
 8014400:	d805      	bhi.n	801440e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014402:	4b0e      	ldr	r3, [pc, #56]	; (801443c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014404:	4a0e      	ldr	r2, [pc, #56]	; (8014440 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014406:	2120      	movs	r1, #32
 8014408:	480e      	ldr	r0, [pc, #56]	; (8014444 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801440a:	f010 fcff 	bl	8024e0c <__assert_func>
 801440e:	682b      	ldr	r3, [r5, #0]
 8014410:	2100      	movs	r1, #0
 8014412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014414:	4628      	mov	r0, r5
 8014416:	4798      	blx	r3
 8014418:	682b      	ldr	r3, [r5, #0]
 801441a:	4607      	mov	r7, r0
 801441c:	6a1b      	ldr	r3, [r3, #32]
 801441e:	4628      	mov	r0, r5
 8014420:	4798      	blx	r3
 8014422:	1bf3      	subs	r3, r6, r7
 8014424:	b29b      	uxth	r3, r3
 8014426:	fbb3 f2f0 	udiv	r2, r3, r0
 801442a:	fb02 3010 	mls	r0, r2, r0, r3
 801442e:	b118      	cbz	r0, 8014438 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014430:	4b05      	ldr	r3, [pc, #20]	; (8014448 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014432:	4a03      	ldr	r2, [pc, #12]	; (8014440 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014434:	2121      	movs	r1, #33	; 0x21
 8014436:	e7e7      	b.n	8014408 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014438:	4620      	mov	r0, r4
 801443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801443c:	08052298 	.word	0x08052298
 8014440:	08052406 	.word	0x08052406
 8014444:	080522ad 	.word	0x080522ad
 8014448:	080522db 	.word	0x080522db

0801444c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801444c:	b538      	push	{r3, r4, r5, lr}
 801444e:	6803      	ldr	r3, [r0, #0]
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	460d      	mov	r5, r1
 8014454:	4604      	mov	r4, r0
 8014456:	4798      	blx	r3
 8014458:	4285      	cmp	r5, r0
 801445a:	d905      	bls.n	8014468 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801445c:	4b0c      	ldr	r3, [pc, #48]	; (8014490 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801445e:	4a0d      	ldr	r2, [pc, #52]	; (8014494 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014460:	2132      	movs	r1, #50	; 0x32
 8014462:	480d      	ldr	r0, [pc, #52]	; (8014498 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014464:	f010 fcd2 	bl	8024e0c <__assert_func>
 8014468:	6823      	ldr	r3, [r4, #0]
 801446a:	88a5      	ldrh	r5, [r4, #4]
 801446c:	69db      	ldr	r3, [r3, #28]
 801446e:	4620      	mov	r0, r4
 8014470:	4798      	blx	r3
 8014472:	4285      	cmp	r5, r0
 8014474:	d303      	bcc.n	801447e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014476:	4b09      	ldr	r3, [pc, #36]	; (801449c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014478:	4a06      	ldr	r2, [pc, #24]	; (8014494 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801447a:	2133      	movs	r1, #51	; 0x33
 801447c:	e7f1      	b.n	8014462 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	88a1      	ldrh	r1, [r4, #4]
 8014482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014484:	4620      	mov	r0, r4
 8014486:	4798      	blx	r3
 8014488:	88a3      	ldrh	r3, [r4, #4]
 801448a:	3301      	adds	r3, #1
 801448c:	80a3      	strh	r3, [r4, #4]
 801448e:	bd38      	pop	{r3, r4, r5, pc}
 8014490:	08052355 	.word	0x08052355
 8014494:	08052449 	.word	0x08052449
 8014498:	080522ad 	.word	0x080522ad
 801449c:	0805236c 	.word	0x0805236c

080144a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80144a0:	b570      	push	{r4, r5, r6, lr}
 80144a2:	6803      	ldr	r3, [r0, #0]
 80144a4:	6a1b      	ldr	r3, [r3, #32]
 80144a6:	4616      	mov	r6, r2
 80144a8:	4604      	mov	r4, r0
 80144aa:	460d      	mov	r5, r1
 80144ac:	4798      	blx	r3
 80144ae:	4286      	cmp	r6, r0
 80144b0:	d905      	bls.n	80144be <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80144b2:	4b06      	ldr	r3, [pc, #24]	; (80144cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80144b4:	4a06      	ldr	r2, [pc, #24]	; (80144d0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80144b6:	4807      	ldr	r0, [pc, #28]	; (80144d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80144b8:	213c      	movs	r1, #60	; 0x3c
 80144ba:	f010 fca7 	bl	8024e0c <__assert_func>
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	4629      	mov	r1, r5
 80144c2:	4620      	mov	r0, r4
 80144c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144ca:	4718      	bx	r3
 80144cc:	08052355 	.word	0x08052355
 80144d0:	080523bc 	.word	0x080523bc
 80144d4:	080522ad 	.word	0x080522ad

080144d8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80144d8:	4770      	bx	lr
	...

080144dc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80144dc:	4a02      	ldr	r2, [pc, #8]	; (80144e8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80144de:	6002      	str	r2, [r0, #0]
 80144e0:	2200      	movs	r2, #0
 80144e2:	8082      	strh	r2, [r0, #4]
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	08052390 	.word	0x08052390

080144ec <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80144ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80144ee:	2000      	movs	r0, #0
 80144f0:	b12b      	cbz	r3, 80144fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80144f2:	b920      	cbnz	r0, 80144fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80144f4:	1a5a      	subs	r2, r3, r1
 80144f6:	4250      	negs	r0, r2
 80144f8:	4150      	adcs	r0, r2
 80144fa:	699b      	ldr	r3, [r3, #24]
 80144fc:	e7f8      	b.n	80144f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80144fe:	4770      	bx	lr

08014500 <_ZN8touchgfx9Container9removeAllEv>:
 8014500:	2200      	movs	r2, #0
 8014502:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014504:	b123      	cbz	r3, 8014510 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014506:	6999      	ldr	r1, [r3, #24]
 8014508:	6281      	str	r1, [r0, #40]	; 0x28
 801450a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801450e:	e7f8      	b.n	8014502 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014510:	4770      	bx	lr

08014512 <_ZN8touchgfx9Container6unlinkEv>:
 8014512:	2300      	movs	r3, #0
 8014514:	6283      	str	r3, [r0, #40]	; 0x28
 8014516:	4770      	bx	lr

08014518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801451c:	461f      	mov	r7, r3
 801451e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014522:	460d      	mov	r5, r1
 8014524:	4616      	mov	r6, r2
 8014526:	b103      	cbz	r3, 801452a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014528:	6038      	str	r0, [r7, #0]
 801452a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801452c:	b314      	cbz	r4, 8014574 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801452e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014532:	b1eb      	cbz	r3, 8014570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014534:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014538:	428d      	cmp	r5, r1
 801453a:	db19      	blt.n	8014570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801453c:	8923      	ldrh	r3, [r4, #8]
 801453e:	b289      	uxth	r1, r1
 8014540:	440b      	add	r3, r1
 8014542:	b21b      	sxth	r3, r3
 8014544:	429d      	cmp	r5, r3
 8014546:	da13      	bge.n	8014570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014548:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801454c:	4296      	cmp	r6, r2
 801454e:	db0f      	blt.n	8014570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014550:	8963      	ldrh	r3, [r4, #10]
 8014552:	b292      	uxth	r2, r2
 8014554:	4413      	add	r3, r2
 8014556:	b21b      	sxth	r3, r3
 8014558:	429e      	cmp	r6, r3
 801455a:	da09      	bge.n	8014570 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	1ab2      	subs	r2, r6, r2
 8014560:	1a69      	subs	r1, r5, r1
 8014562:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8014566:	b212      	sxth	r2, r2
 8014568:	463b      	mov	r3, r7
 801456a:	b209      	sxth	r1, r1
 801456c:	4620      	mov	r0, r4
 801456e:	47c0      	blx	r8
 8014570:	69a4      	ldr	r4, [r4, #24]
 8014572:	e7db      	b.n	801452c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014578 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014578:	2200      	movs	r2, #0
 801457a:	8002      	strh	r2, [r0, #0]
 801457c:	8042      	strh	r2, [r0, #2]
 801457e:	8082      	strh	r2, [r0, #4]
 8014580:	80c2      	strh	r2, [r0, #6]
 8014582:	4770      	bx	lr

08014584 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014584:	b570      	push	{r4, r5, r6, lr}
 8014586:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014588:	460d      	mov	r5, r1
 801458a:	4616      	mov	r6, r2
 801458c:	b13c      	cbz	r4, 801459e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801458e:	6823      	ldr	r3, [r4, #0]
 8014590:	4620      	mov	r0, r4
 8014592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014594:	4632      	mov	r2, r6
 8014596:	4629      	mov	r1, r5
 8014598:	4798      	blx	r3
 801459a:	69a4      	ldr	r4, [r4, #24]
 801459c:	e7f6      	b.n	801458c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801459e:	bd70      	pop	{r4, r5, r6, pc}

080145a0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80145a0:	b538      	push	{r3, r4, r5, lr}
 80145a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80145a4:	460d      	mov	r5, r1
 80145a6:	b134      	cbz	r4, 80145b6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	4621      	mov	r1, r4
 80145ac:	689b      	ldr	r3, [r3, #8]
 80145ae:	4628      	mov	r0, r5
 80145b0:	4798      	blx	r3
 80145b2:	69a4      	ldr	r4, [r4, #24]
 80145b4:	e7f7      	b.n	80145a6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80145b6:	bd38      	pop	{r3, r4, r5, pc}

080145b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80145b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80145ba:	b19b      	cbz	r3, 80145e4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80145bc:	428b      	cmp	r3, r1
 80145be:	d109      	bne.n	80145d4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80145c0:	699a      	ldr	r2, [r3, #24]
 80145c2:	2100      	movs	r1, #0
 80145c4:	6159      	str	r1, [r3, #20]
 80145c6:	6282      	str	r2, [r0, #40]	; 0x28
 80145c8:	b902      	cbnz	r2, 80145cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80145ca:	4770      	bx	lr
 80145cc:	6199      	str	r1, [r3, #24]
 80145ce:	4770      	bx	lr
 80145d0:	4613      	mov	r3, r2
 80145d2:	b13a      	cbz	r2, 80145e4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80145d4:	699a      	ldr	r2, [r3, #24]
 80145d6:	428a      	cmp	r2, r1
 80145d8:	d1fa      	bne.n	80145d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80145da:	698a      	ldr	r2, [r1, #24]
 80145dc:	619a      	str	r2, [r3, #24]
 80145de:	2300      	movs	r3, #0
 80145e0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80145e4:	4770      	bx	lr

080145e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80145e6:	b410      	push	{r4}
 80145e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80145ea:	4604      	mov	r4, r0
 80145ec:	b92b      	cbnz	r3, 80145fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80145ee:	6803      	ldr	r3, [r0, #0]
 80145f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80145f6:	4611      	mov	r1, r2
 80145f8:	4718      	bx	r3
 80145fa:	b941      	cbnz	r1, 801460e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80145fc:	6193      	str	r3, [r2, #24]
 80145fe:	6282      	str	r2, [r0, #40]	; 0x28
 8014600:	6154      	str	r4, [r2, #20]
 8014602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014606:	4770      	bx	lr
 8014608:	4603      	mov	r3, r0
 801460a:	2800      	cmp	r0, #0
 801460c:	d0f9      	beq.n	8014602 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801460e:	4299      	cmp	r1, r3
 8014610:	6998      	ldr	r0, [r3, #24]
 8014612:	d1f9      	bne.n	8014608 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014614:	6190      	str	r0, [r2, #24]
 8014616:	618a      	str	r2, [r1, #24]
 8014618:	e7f2      	b.n	8014600 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801461c:	4288      	cmp	r0, r1
 801461e:	b508      	push	{r3, lr}
 8014620:	d105      	bne.n	801462e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014622:	4b11      	ldr	r3, [pc, #68]	; (8014668 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014624:	4a11      	ldr	r2, [pc, #68]	; (801466c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014626:	2123      	movs	r1, #35	; 0x23
 8014628:	4811      	ldr	r0, [pc, #68]	; (8014670 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801462a:	f010 fbef 	bl	8024e0c <__assert_func>
 801462e:	694b      	ldr	r3, [r1, #20]
 8014630:	b11b      	cbz	r3, 801463a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014632:	4b10      	ldr	r3, [pc, #64]	; (8014674 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014634:	4a0d      	ldr	r2, [pc, #52]	; (801466c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014636:	2124      	movs	r1, #36	; 0x24
 8014638:	e7f6      	b.n	8014628 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801463a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801463e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014640:	b913      	cbnz	r3, 8014648 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014642:	6281      	str	r1, [r0, #40]	; 0x28
 8014644:	bd08      	pop	{r3, pc}
 8014646:	4613      	mov	r3, r2
 8014648:	699a      	ldr	r2, [r3, #24]
 801464a:	b12a      	cbz	r2, 8014658 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801464c:	428b      	cmp	r3, r1
 801464e:	d1fa      	bne.n	8014646 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014650:	4b09      	ldr	r3, [pc, #36]	; (8014678 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014652:	4a06      	ldr	r2, [pc, #24]	; (801466c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014654:	2135      	movs	r1, #53	; 0x35
 8014656:	e7e7      	b.n	8014628 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014658:	428b      	cmp	r3, r1
 801465a:	d103      	bne.n	8014664 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801465c:	4b06      	ldr	r3, [pc, #24]	; (8014678 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801465e:	4a03      	ldr	r2, [pc, #12]	; (801466c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014660:	2138      	movs	r1, #56	; 0x38
 8014662:	e7e1      	b.n	8014628 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014664:	6199      	str	r1, [r3, #24]
 8014666:	e7ed      	b.n	8014644 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014668:	08052487 	.word	0x08052487
 801466c:	080525dc 	.word	0x080525dc
 8014670:	080524b3 	.word	0x080524b3
 8014674:	080524e6 	.word	0x080524e6
 8014678:	0805251c 	.word	0x0805251c

0801467c <_ZN8touchgfx4RectaNERKS0_>:
 801467c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014680:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014684:	888c      	ldrh	r4, [r1, #4]
 8014686:	f9b0 9000 	ldrsh.w	r9, [r0]
 801468a:	443c      	add	r4, r7
 801468c:	b2a4      	uxth	r4, r4
 801468e:	fa0f f884 	sxth.w	r8, r4
 8014692:	45c1      	cmp	r9, r8
 8014694:	da2f      	bge.n	80146f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014696:	8882      	ldrh	r2, [r0, #4]
 8014698:	444a      	add	r2, r9
 801469a:	b292      	uxth	r2, r2
 801469c:	fa0f fe82 	sxth.w	lr, r2
 80146a0:	4577      	cmp	r7, lr
 80146a2:	da28      	bge.n	80146f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80146a4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80146a8:	88cb      	ldrh	r3, [r1, #6]
 80146aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80146ae:	442b      	add	r3, r5
 80146b0:	b21b      	sxth	r3, r3
 80146b2:	429e      	cmp	r6, r3
 80146b4:	da1f      	bge.n	80146f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80146b6:	88c3      	ldrh	r3, [r0, #6]
 80146b8:	4433      	add	r3, r6
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	fa0f fc83 	sxth.w	ip, r3
 80146c0:	4565      	cmp	r5, ip
 80146c2:	da18      	bge.n	80146f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80146c4:	454f      	cmp	r7, r9
 80146c6:	bfb8      	it	lt
 80146c8:	464f      	movlt	r7, r9
 80146ca:	42b5      	cmp	r5, r6
 80146cc:	bfb8      	it	lt
 80146ce:	4635      	movlt	r5, r6
 80146d0:	45f0      	cmp	r8, lr
 80146d2:	bfd8      	it	le
 80146d4:	4622      	movle	r2, r4
 80146d6:	1bd2      	subs	r2, r2, r7
 80146d8:	8082      	strh	r2, [r0, #4]
 80146da:	884a      	ldrh	r2, [r1, #2]
 80146dc:	88c9      	ldrh	r1, [r1, #6]
 80146de:	8007      	strh	r7, [r0, #0]
 80146e0:	440a      	add	r2, r1
 80146e2:	b292      	uxth	r2, r2
 80146e4:	b211      	sxth	r1, r2
 80146e6:	458c      	cmp	ip, r1
 80146e8:	bfa8      	it	ge
 80146ea:	4613      	movge	r3, r2
 80146ec:	1b5b      	subs	r3, r3, r5
 80146ee:	80c3      	strh	r3, [r0, #6]
 80146f0:	8045      	strh	r5, [r0, #2]
 80146f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f6:	2300      	movs	r3, #0
 80146f8:	8003      	strh	r3, [r0, #0]
 80146fa:	8043      	strh	r3, [r0, #2]
 80146fc:	8083      	strh	r3, [r0, #4]
 80146fe:	80c3      	strh	r3, [r0, #6]
 8014700:	e7f7      	b.n	80146f2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014702 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014702:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	dd06      	ble.n	8014718 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801470a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801470e:	2800      	cmp	r0, #0
 8014710:	bfcc      	ite	gt
 8014712:	2000      	movgt	r0, #0
 8014714:	2001      	movle	r0, #1
 8014716:	4770      	bx	lr
 8014718:	2001      	movs	r0, #1
 801471a:	4770      	bx	lr

0801471c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	2300      	movs	r3, #0
 8014722:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014724:	8003      	strh	r3, [r0, #0]
 8014726:	4604      	mov	r4, r0
 8014728:	8043      	strh	r3, [r0, #2]
 801472a:	8083      	strh	r3, [r0, #4]
 801472c:	80c3      	strh	r3, [r0, #6]
 801472e:	2d00      	cmp	r5, #0
 8014730:	d040      	beq.n	80147b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014732:	1d28      	adds	r0, r5, #4
 8014734:	f7ff ffe5 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014738:	b988      	cbnz	r0, 801475e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801473a:	4620      	mov	r0, r4
 801473c:	f7ff ffe1 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014740:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014744:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014748:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801474c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014750:	b138      	cbz	r0, 8014762 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014752:	8022      	strh	r2, [r4, #0]
 8014754:	8063      	strh	r3, [r4, #2]
 8014756:	f8a4 e004 	strh.w	lr, [r4, #4]
 801475a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801475e:	69ad      	ldr	r5, [r5, #24]
 8014760:	e7e5      	b.n	801472e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014762:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014766:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801476a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801476e:	4290      	cmp	r0, r2
 8014770:	4607      	mov	r7, r0
 8014772:	bfa8      	it	ge
 8014774:	4617      	movge	r7, r2
 8014776:	4472      	add	r2, lr
 8014778:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801477c:	8027      	strh	r7, [r4, #0]
 801477e:	4299      	cmp	r1, r3
 8014780:	460e      	mov	r6, r1
 8014782:	4440      	add	r0, r8
 8014784:	bfa8      	it	ge
 8014786:	461e      	movge	r6, r3
 8014788:	4471      	add	r1, lr
 801478a:	4463      	add	r3, ip
 801478c:	b200      	sxth	r0, r0
 801478e:	b212      	sxth	r2, r2
 8014790:	b209      	sxth	r1, r1
 8014792:	b21b      	sxth	r3, r3
 8014794:	4290      	cmp	r0, r2
 8014796:	bfac      	ite	ge
 8014798:	ebc7 0200 	rsbge	r2, r7, r0
 801479c:	ebc7 0202 	rsblt	r2, r7, r2
 80147a0:	4299      	cmp	r1, r3
 80147a2:	bfac      	ite	ge
 80147a4:	ebc6 0301 	rsbge	r3, r6, r1
 80147a8:	ebc6 0303 	rsblt	r3, r6, r3
 80147ac:	8066      	strh	r6, [r4, #2]
 80147ae:	80a2      	strh	r2, [r4, #4]
 80147b0:	80e3      	strh	r3, [r4, #6]
 80147b2:	e7d4      	b.n	801475e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80147b4:	4620      	mov	r0, r4
 80147b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80147ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80147be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80147c2:	b383      	cbz	r3, 8014826 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80147c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80147c6:	b374      	cbz	r4, 8014826 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80147c8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80147cc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80147d0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80147d4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80147d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80147dc:	b303      	cbz	r3, 8014820 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80147de:	4668      	mov	r0, sp
 80147e0:	1d21      	adds	r1, r4, #4
 80147e2:	f8ad 5000 	strh.w	r5, [sp]
 80147e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80147ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 80147ee:	f8ad 8006 	strh.w	r8, [sp, #6]
 80147f2:	f7ff ff43 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80147f6:	4668      	mov	r0, sp
 80147f8:	f7ff ff83 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 80147fc:	b980      	cbnz	r0, 8014820 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80147fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8014802:	88a2      	ldrh	r2, [r4, #4]
 8014804:	1a9b      	subs	r3, r3, r2
 8014806:	f8ad 3000 	strh.w	r3, [sp]
 801480a:	88e2      	ldrh	r2, [r4, #6]
 801480c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014810:	1a9b      	subs	r3, r3, r2
 8014812:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014816:	6823      	ldr	r3, [r4, #0]
 8014818:	4669      	mov	r1, sp
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	4620      	mov	r0, r4
 801481e:	4798      	blx	r3
 8014820:	69a4      	ldr	r4, [r4, #24]
 8014822:	2c00      	cmp	r4, #0
 8014824:	d1d8      	bne.n	80147d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014826:	b002      	add	sp, #8
 8014828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801482c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801482c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801482e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014832:	460d      	mov	r5, r1
 8014834:	4616      	mov	r6, r2
 8014836:	b323      	cbz	r3, 8014882 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014838:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801483a:	b314      	cbz	r4, 8014882 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801483c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014840:	b1eb      	cbz	r3, 801487e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014842:	6828      	ldr	r0, [r5, #0]
 8014844:	6869      	ldr	r1, [r5, #4]
 8014846:	466b      	mov	r3, sp
 8014848:	c303      	stmia	r3!, {r0, r1}
 801484a:	4668      	mov	r0, sp
 801484c:	1d21      	adds	r1, r4, #4
 801484e:	f7ff ff15 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 8014852:	4668      	mov	r0, sp
 8014854:	f7ff ff55 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014858:	b988      	cbnz	r0, 801487e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801485a:	f8bd 3000 	ldrh.w	r3, [sp]
 801485e:	88a2      	ldrh	r2, [r4, #4]
 8014860:	1a9b      	subs	r3, r3, r2
 8014862:	f8ad 3000 	strh.w	r3, [sp]
 8014866:	88e2      	ldrh	r2, [r4, #6]
 8014868:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801486c:	1a9b      	subs	r3, r3, r2
 801486e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014872:	6823      	ldr	r3, [r4, #0]
 8014874:	4632      	mov	r2, r6
 8014876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014878:	4669      	mov	r1, sp
 801487a:	4620      	mov	r0, r4
 801487c:	4798      	blx	r3
 801487e:	69a4      	ldr	r4, [r4, #24]
 8014880:	e7db      	b.n	801483a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014882:	b002      	add	sp, #8
 8014884:	bd70      	pop	{r4, r5, r6, pc}

08014886 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8014886:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801488a:	4770      	bx	lr

0801488c <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 801488c:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8014890:	4770      	bx	lr

08014892 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8014892:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8014894:	4770      	bx	lr

08014896 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8014896:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8014898:	4770      	bx	lr

0801489a <_ZN8touchgfx6Slider8setValueEi>:
 801489a:	b570      	push	{r4, r5, r6, lr}
 801489c:	6803      	ldr	r3, [r0, #0]
 801489e:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 80148a2:	4604      	mov	r4, r0
 80148a4:	4798      	blx	r3
 80148a6:	462b      	mov	r3, r5
 80148a8:	4601      	mov	r1, r0
 80148aa:	4620      	mov	r0, r4
 80148ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148b0:	4718      	bx	r3

080148b2 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 80148b2:	b538      	push	{r3, r4, r5, lr}
 80148b4:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 80148b8:	428c      	cmp	r4, r1
 80148ba:	bfa8      	it	ge
 80148bc:	460c      	movge	r4, r1
 80148be:	429c      	cmp	r4, r3
 80148c0:	bfac      	ite	ge
 80148c2:	ebc3 0404 	rsbge	r4, r3, r4
 80148c6:	ebc3 0403 	rsblt	r4, r3, r3
 80148ca:	6803      	ldr	r3, [r0, #0]
 80148cc:	4605      	mov	r5, r0
 80148ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80148d2:	4798      	blx	r3
 80148d4:	682b      	ldr	r3, [r5, #0]
 80148d6:	fb00 4404 	mla	r4, r0, r4, r4
 80148da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80148de:	4628      	mov	r0, r5
 80148e0:	4798      	blx	r3
 80148e2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80148e6:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 80148ea:	fb94 f0f0 	sdiv	r0, r4, r0
 80148ee:	2a01      	cmp	r2, #1
 80148f0:	bf08      	it	eq
 80148f2:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 80148f6:	4418      	add	r0, r3
 80148f8:	bf04      	itt	eq
 80148fa:	1a10      	subeq	r0, r2, r0
 80148fc:	18c0      	addeq	r0, r0, r3
 80148fe:	b200      	sxth	r0, r0
 8014900:	bd38      	pop	{r3, r4, r5, pc}

08014902 <_ZNK8touchgfx6Slider15positionToValueEs>:
 8014902:	b570      	push	{r4, r5, r6, lr}
 8014904:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 8014908:	428b      	cmp	r3, r1
 801490a:	4605      	mov	r5, r0
 801490c:	460c      	mov	r4, r1
 801490e:	d109      	bne.n	8014924 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8014910:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014912:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014916:	2b01      	cmp	r3, #1
 8014918:	bf01      	itttt	eq
 801491a:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 801491c:	1a18      	subeq	r0, r3, r0
 801491e:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8014920:	18c0      	addeq	r0, r0, r3
 8014922:	bd70      	pop	{r4, r5, r6, pc}
 8014924:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8014928:	428b      	cmp	r3, r1
 801492a:	d101      	bne.n	8014930 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 801492c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801492e:	e7f0      	b.n	8014912 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8014930:	6803      	ldr	r3, [r0, #0]
 8014932:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014936:	4798      	blx	r3
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801493e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014942:	4606      	mov	r6, r0
 8014944:	4628      	mov	r0, r5
 8014946:	1a64      	subs	r4, r4, r1
 8014948:	4798      	blx	r3
 801494a:	682b      	ldr	r3, [r5, #0]
 801494c:	2102      	movs	r1, #2
 801494e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014952:	fb96 f6f1 	sdiv	r6, r6, r1
 8014956:	fb00 6404 	mla	r4, r0, r4, r6
 801495a:	4628      	mov	r0, r5
 801495c:	4798      	blx	r3
 801495e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014960:	fb94 f0f0 	sdiv	r0, r4, r0
 8014964:	4418      	add	r0, r3
 8014966:	e7d4      	b.n	8014912 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08014968 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8014968:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801496c:	2302      	movs	r3, #2
 801496e:	b92a      	cbnz	r2, 801497c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8014970:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 8014974:	fb90 f0f3 	sdiv	r0, r0, r3
 8014978:	b280      	uxth	r0, r0
 801497a:	4770      	bx	lr
 801497c:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8014980:	e7f8      	b.n	8014974 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08014982 <_ZN8touchgfx6Slider13setValueRangeEii>:
 8014982:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014984:	428b      	cmp	r3, r1
 8014986:	b410      	push	{r4}
 8014988:	db09      	blt.n	801499e <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801498a:	4293      	cmp	r3, r2
 801498c:	bfa8      	it	ge
 801498e:	4613      	movge	r3, r2
 8014990:	6804      	ldr	r4, [r0, #0]
 8014992:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 8014996:	46a4      	mov	ip, r4
 8014998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801499c:	4760      	bx	ip
 801499e:	460b      	mov	r3, r1
 80149a0:	e7f6      	b.n	8014990 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

080149a2 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 80149a2:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 80149a6:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 80149aa:	1a10      	subs	r0, r2, r0
 80149ac:	4770      	bx	lr

080149ae <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 80149ae:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 80149b2:	1a10      	subs	r0, r2, r0
 80149b4:	4770      	bx	lr

080149b6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80149b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149ba:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 80149be:	428e      	cmp	r6, r1
 80149c0:	4604      	mov	r4, r0
 80149c2:	bfb8      	it	lt
 80149c4:	460e      	movlt	r6, r1
 80149c6:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
 80149ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80149ce:	428e      	cmp	r6, r1
 80149d0:	bfa8      	it	ge
 80149d2:	460e      	movge	r6, r1
 80149d4:	3094      	adds	r0, #148	; 0x94
 80149d6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 80149da:	fa1f f886 	uxth.w	r8, r6
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d132      	bne.n	8014a48 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 80149e2:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80149e6:	4631      	mov	r1, r6
 80149e8:	f7fa f809 	bl	800e9fe <_ZN8touchgfx8Drawable6moveToEss>
 80149ec:	4638      	mov	r0, r7
 80149ee:	f003 fa3a 	bl	8017e66 <_ZNK8touchgfx8Drawable10invalidateEv>
 80149f2:	6823      	ldr	r3, [r4, #0]
 80149f4:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80149f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80149fc:	4620      	mov	r0, r4
 80149fe:	eba8 0802 	sub.w	r8, r8, r2
 8014a02:	4798      	blx	r3
 8014a04:	fa1f f888 	uxth.w	r8, r8
 8014a08:	4480      	add	r8, r0
 8014a0a:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 8014a0e:	4638      	mov	r0, r7
 8014a10:	f003 fa29 	bl	8017e66 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014a14:	6823      	ldr	r3, [r4, #0]
 8014a16:	4631      	mov	r1, r6
 8014a18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	4798      	blx	r3
 8014a20:	6320      	str	r0, [r4, #48]	; 0x30
 8014a22:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d03c      	beq.n	8014aa4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8014a2a:	6803      	ldr	r3, [r0, #0]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	4798      	blx	r3
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d037      	beq.n	8014aa4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8014a34:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8014a38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014a3a:	6803      	ldr	r3, [r0, #0]
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	4621      	mov	r1, r4
 8014a40:	b003      	add	sp, #12
 8014a42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a46:	4718      	bx	r3
 8014a48:	4632      	mov	r2, r6
 8014a4a:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8014a4e:	f7f9 ffd6 	bl	800e9fe <_ZN8touchgfx8Drawable6moveToEss>
 8014a52:	4638      	mov	r0, r7
 8014a54:	f003 fa07 	bl	8017e66 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014a58:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8014a5c:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	4405      	add	r5, r0
 8014a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a68:	4620      	mov	r0, r4
 8014a6a:	4798      	blx	r3
 8014a6c:	b2ad      	uxth	r5, r5
 8014a6e:	6823      	ldr	r3, [r4, #0]
 8014a70:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 8014a74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a78:	eba5 0508 	sub.w	r5, r5, r8
 8014a7c:	1a2d      	subs	r5, r5, r0
 8014a7e:	4620      	mov	r0, r4
 8014a80:	4798      	blx	r3
 8014a82:	b2ad      	uxth	r5, r5
 8014a84:	b22a      	sxth	r2, r5
 8014a86:	4440      	add	r0, r8
 8014a88:	9200      	str	r2, [sp, #0]
 8014a8a:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 8014a8e:	b202      	sxth	r2, r0
 8014a90:	4649      	mov	r1, r9
 8014a92:	4638      	mov	r0, r7
 8014a94:	f7f9 fed0 	bl	800e838 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a98:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8014a9c:	1a2d      	subs	r5, r5, r0
 8014a9e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8014aa2:	e7b4      	b.n	8014a0e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 8014aa4:	b003      	add	sp, #12
 8014aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014aac <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8014aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014ab4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8014ab8:	45b8      	cmp	r8, r7
 8014aba:	4604      	mov	r4, r0
 8014abc:	4689      	mov	r9, r1
 8014abe:	4616      	mov	r6, r2
 8014ac0:	461d      	mov	r5, r3
 8014ac2:	d305      	bcc.n	8014ad0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8014ac4:	4b28      	ldr	r3, [pc, #160]	; (8014b68 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8014ac6:	4a29      	ldr	r2, [pc, #164]	; (8014b6c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 8014ac8:	4829      	ldr	r0, [pc, #164]	; (8014b70 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 8014aca:	2143      	movs	r1, #67	; 0x43
 8014acc:	f010 f99e 	bl	8024e0c <__assert_func>
 8014ad0:	f04f 0a00 	mov.w	sl, #0
 8014ad4:	b213      	sxth	r3, r2
 8014ad6:	fa0f fb81 	sxth.w	fp, r1
 8014ada:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 8014ade:	461a      	mov	r2, r3
 8014ae0:	4659      	mov	r1, fp
 8014ae2:	303c      	adds	r0, #60	; 0x3c
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	f7f9 feff 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 8014aea:	9b01      	ldr	r3, [sp, #4]
 8014aec:	4659      	mov	r1, fp
 8014aee:	461a      	mov	r2, r3
 8014af0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8014af4:	f7f9 fef8 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 8014af8:	4652      	mov	r2, sl
 8014afa:	4651      	mov	r1, sl
 8014afc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014b00:	f7f9 fef2 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 8014b04:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8014b08:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8014b0c:	4449      	add	r1, r9
 8014b0e:	b28b      	uxth	r3, r1
 8014b10:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8014b14:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 8014b18:	4439      	add	r1, r7
 8014b1a:	b289      	uxth	r1, r1
 8014b1c:	428b      	cmp	r3, r1
 8014b1e:	bf88      	it	hi
 8014b20:	b219      	sxthhi	r1, r3
 8014b22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8014b26:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 8014b2a:	441e      	add	r6, r3
 8014b2c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8014b30:	441d      	add	r5, r3
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	b2ad      	uxth	r5, r5
 8014b36:	b2b6      	uxth	r6, r6
 8014b38:	bf98      	it	ls
 8014b3a:	b209      	sxthls	r1, r1
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	42ae      	cmp	r6, r5
 8014b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b42:	bf8c      	ite	hi
 8014b44:	b235      	sxthhi	r5, r6
 8014b46:	b22d      	sxthls	r5, r5
 8014b48:	4798      	blx	r3
 8014b4a:	6823      	ldr	r3, [r4, #0]
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	4620      	mov	r0, r4
 8014b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b52:	4798      	blx	r3
 8014b54:	6823      	ldr	r3, [r4, #0]
 8014b56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	b003      	add	sp, #12
 8014b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b64:	4718      	bx	r3
 8014b66:	bf00      	nop
 8014b68:	080527c0 	.word	0x080527c0
 8014b6c:	08052a3a 	.word	0x08052a3a
 8014b70:	08052834 	.word	0x08052834

08014b74 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8014b74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8014b7c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8014b80:	42b7      	cmp	r7, r6
 8014b82:	4604      	mov	r4, r0
 8014b84:	4689      	mov	r9, r1
 8014b86:	4690      	mov	r8, r2
 8014b88:	461d      	mov	r5, r3
 8014b8a:	d305      	bcc.n	8014b98 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8014b8c:	4b25      	ldr	r3, [pc, #148]	; (8014c24 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 8014b8e:	4a26      	ldr	r2, [pc, #152]	; (8014c28 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 8014b90:	4826      	ldr	r0, [pc, #152]	; (8014c2c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 8014b92:	215f      	movs	r1, #95	; 0x5f
 8014b94:	f010 f93a 	bl	8024e0c <__assert_func>
 8014b98:	2301      	movs	r3, #1
 8014b9a:	fa0f fa81 	sxth.w	sl, r1
 8014b9e:	fa0f fb82 	sxth.w	fp, r2
 8014ba2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8014ba6:	465a      	mov	r2, fp
 8014ba8:	4651      	mov	r1, sl
 8014baa:	303c      	adds	r0, #60	; 0x3c
 8014bac:	f7f9 fe9c 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 8014bb0:	465a      	mov	r2, fp
 8014bb2:	4651      	mov	r1, sl
 8014bb4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8014bb8:	f7f9 fe96 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 8014bbc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8014bc0:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8014bc4:	4489      	add	r9, r1
 8014bc6:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8014bd0:	4429      	add	r1, r5
 8014bd2:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8014bd6:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 8014bda:	44a8      	add	r8, r5
 8014bdc:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 8014be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014be2:	b289      	uxth	r1, r1
 8014be4:	fa1f f989 	uxth.w	r9, r9
 8014be8:	4435      	add	r5, r6
 8014bea:	4589      	cmp	r9, r1
 8014bec:	b2ad      	uxth	r5, r5
 8014bee:	fa1f f888 	uxth.w	r8, r8
 8014bf2:	bf8c      	ite	hi
 8014bf4:	fa0f f189 	sxthhi.w	r1, r9
 8014bf8:	b209      	sxthls	r1, r1
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	45a8      	cmp	r8, r5
 8014bfe:	bf8c      	ite	hi
 8014c00:	fa0f f588 	sxthhi.w	r5, r8
 8014c04:	b22d      	sxthls	r5, r5
 8014c06:	4798      	blx	r3
 8014c08:	6823      	ldr	r3, [r4, #0]
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c10:	4798      	blx	r3
 8014c12:	6823      	ldr	r3, [r4, #0]
 8014c14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	b001      	add	sp, #4
 8014c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c22:	4718      	bx	r3
 8014c24:	0805274e 	.word	0x0805274e
 8014c28:	080529d5 	.word	0x080529d5
 8014c2c:	08052834 	.word	0x08052834

08014c30 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8014c30:	4291      	cmp	r1, r2
 8014c32:	b510      	push	{r4, lr}
 8014c34:	db06      	blt.n	8014c44 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8014c36:	4b08      	ldr	r3, [pc, #32]	; (8014c58 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8014c38:	4a08      	ldr	r2, [pc, #32]	; (8014c5c <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8014c3a:	4809      	ldr	r0, [pc, #36]	; (8014c60 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8014c3c:	f240 1107 	movw	r1, #263	; 0x107
 8014c40:	f010 f8e4 	bl	8024e0c <__assert_func>
 8014c44:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8014c48:	6802      	ldr	r2, [r0, #0]
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8014c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c54:	4710      	bx	r2
 8014c56:	bf00      	nop
 8014c58:	080526f6 	.word	0x080526f6
 8014c5c:	08052999 	.word	0x08052999
 8014c60:	08052834 	.word	0x08052834

08014c64 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8014c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c68:	790b      	ldrb	r3, [r1, #4]
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	460d      	mov	r5, r1
 8014c6e:	b323      	cbz	r3, 8014cba <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d135      	bne.n	8014ce0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014c7a:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8014c7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c82:	2a00      	cmp	r2, #0
 8014c84:	d12a      	bne.n	8014cdc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8014c86:	88ee      	ldrh	r6, [r5, #6]
 8014c88:	4620      	mov	r0, r4
 8014c8a:	4798      	blx	r3
 8014c8c:	1a31      	subs	r1, r6, r0
 8014c8e:	b209      	sxth	r1, r1
 8014c90:	4620      	mov	r0, r4
 8014c92:	47b8      	blx	r7
 8014c94:	792b      	ldrb	r3, [r5, #4]
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d122      	bne.n	8014ce0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014c9a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8014c9e:	b1f8      	cbz	r0, 8014ce0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014ca0:	6803      	ldr	r3, [r0, #0]
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	4798      	blx	r3
 8014ca6:	b1d8      	cbz	r0, 8014ce0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014ca8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8014cac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014cae:	6803      	ldr	r3, [r0, #0]
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	689b      	ldr	r3, [r3, #8]
 8014cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb8:	4718      	bx	r3
 8014cba:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	d0d8      	beq.n	8014c74 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014cc2:	6803      	ldr	r3, [r0, #0]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	4798      	blx	r3
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d0d3      	beq.n	8014c74 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014ccc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8014cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014cd2:	6803      	ldr	r3, [r0, #0]
 8014cd4:	4621      	mov	r1, r4
 8014cd6:	689b      	ldr	r3, [r3, #8]
 8014cd8:	4798      	blx	r3
 8014cda:	e7cb      	b.n	8014c74 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014cdc:	892e      	ldrh	r6, [r5, #8]
 8014cde:	e7d3      	b.n	8014c88 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8014ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ce4 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8014ce4:	b570      	push	{r4, r5, r6, lr}
 8014ce6:	6803      	ldr	r3, [r0, #0]
 8014ce8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8014cec:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8014cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	b942      	cbnz	r2, 8014d0a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8014cf8:	894d      	ldrh	r5, [r1, #10]
 8014cfa:	4798      	blx	r3
 8014cfc:	1a29      	subs	r1, r5, r0
 8014cfe:	4633      	mov	r3, r6
 8014d00:	4620      	mov	r0, r4
 8014d02:	b209      	sxth	r1, r1
 8014d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d08:	4718      	bx	r3
 8014d0a:	898d      	ldrh	r5, [r1, #12]
 8014d0c:	e7f5      	b.n	8014cfa <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08014d10 <_ZN8touchgfx9ContainerC1Ev>:
 8014d10:	2101      	movs	r1, #1
 8014d12:	2200      	movs	r2, #0
 8014d14:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014d18:	4908      	ldr	r1, [pc, #32]	; (8014d3c <_ZN8touchgfx9ContainerC1Ev+0x2c>)
 8014d1a:	8082      	strh	r2, [r0, #4]
 8014d1c:	80c2      	strh	r2, [r0, #6]
 8014d1e:	8102      	strh	r2, [r0, #8]
 8014d20:	8142      	strh	r2, [r0, #10]
 8014d22:	8182      	strh	r2, [r0, #12]
 8014d24:	81c2      	strh	r2, [r0, #14]
 8014d26:	8202      	strh	r2, [r0, #16]
 8014d28:	8242      	strh	r2, [r0, #18]
 8014d2a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014d2e:	61c2      	str	r2, [r0, #28]
 8014d30:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014d34:	6001      	str	r1, [r0, #0]
 8014d36:	6282      	str	r2, [r0, #40]	; 0x28
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	08052558 	.word	0x08052558

08014d40 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8014d40:	b510      	push	{r4, lr}
 8014d42:	2300      	movs	r3, #0
 8014d44:	8083      	strh	r3, [r0, #4]
 8014d46:	80c3      	strh	r3, [r0, #6]
 8014d48:	8103      	strh	r3, [r0, #8]
 8014d4a:	8143      	strh	r3, [r0, #10]
 8014d4c:	8183      	strh	r3, [r0, #12]
 8014d4e:	81c3      	strh	r3, [r0, #14]
 8014d50:	8203      	strh	r3, [r0, #16]
 8014d52:	8243      	strh	r3, [r0, #18]
 8014d54:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014d58:	61c3      	str	r3, [r0, #28]
 8014d5a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8014d5e:	2301      	movs	r3, #1
 8014d60:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8014d64:	4b05      	ldr	r3, [pc, #20]	; (8014d7c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x3c>)
 8014d66:	6003      	str	r3, [r0, #0]
 8014d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014d70:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014d74:	f001 fa64 	bl	8016240 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014d78:	4620      	mov	r0, r4
 8014d7a:	bd10      	pop	{r4, pc}
 8014d7c:	080535ac 	.word	0x080535ac

08014d80 <_ZN8touchgfx6SliderC1Ev>:
 8014d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	ae02      	add	r6, sp, #8
 8014d86:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	f7ff ffc0 	bl	8014d10 <_ZN8touchgfx9ContainerC1Ev>
 8014d90:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8014d94:	4b23      	ldr	r3, [pc, #140]	; (8014e24 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 8014d96:	6023      	str	r3, [r4, #0]
 8014d98:	2500      	movs	r5, #0
 8014d9a:	f04f 0b01 	mov.w	fp, #1
 8014d9e:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8014da2:	4631      	mov	r1, r6
 8014da4:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8014da8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8014dac:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8014db0:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8014db4:	4648      	mov	r0, r9
 8014db6:	f7ff ffc3 	bl	8014d40 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014dba:	f104 0894 	add.w	r8, r4, #148	; 0x94
 8014dbe:	4631      	mov	r1, r6
 8014dc0:	4650      	mov	r0, sl
 8014dc2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014dc6:	f7ff ffbb 	bl	8014d40 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014dca:	4631      	mov	r1, r6
 8014dcc:	4640      	mov	r0, r8
 8014dce:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8014dd2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014dd6:	f7ff ffb3 	bl	8014d40 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7ff ff98 	bl	8014d10 <_ZN8touchgfx9ContainerC1Ev>
 8014de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014de4:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8014de8:	4651      	mov	r1, sl
 8014dea:	4630      	mov	r0, r6
 8014dec:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8014df0:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8014df4:	f7ff fc12 	bl	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014df8:	4649      	mov	r1, r9
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f7ff fc0e 	bl	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014e00:	4631      	mov	r1, r6
 8014e02:	4620      	mov	r0, r4
 8014e04:	f7ff fc0a 	bl	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014e08:	4641      	mov	r1, r8
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f7ff fc06 	bl	801461c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014e10:	4620      	mov	r0, r4
 8014e12:	2264      	movs	r2, #100	; 0x64
 8014e14:	4629      	mov	r1, r5
 8014e16:	f7ff fdb4 	bl	8014982 <_ZN8touchgfx6Slider13setValueRangeEii>
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	b003      	add	sp, #12
 8014e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e22:	bf00      	nop
 8014e24:	0805286c 	.word	0x0805286c

08014e28 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8014e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	4608      	mov	r0, r1
 8014e30:	4615      	mov	r5, r2
 8014e32:	460e      	mov	r6, r1
 8014e34:	461f      	mov	r7, r3
 8014e36:	f004 fb4b 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e3a:	4680      	mov	r8, r0
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f004 fb47 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014e42:	4580      	cmp	r8, r0
 8014e44:	d005      	beq.n	8014e52 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8014e46:	4b14      	ldr	r3, [pc, #80]	; (8014e98 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8014e48:	4a14      	ldr	r2, [pc, #80]	; (8014e9c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 8014e4a:	4815      	ldr	r0, [pc, #84]	; (8014ea0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 8014e4c:	2133      	movs	r1, #51	; 0x33
 8014e4e:	f00f ffdd 	bl	8024e0c <__assert_func>
 8014e52:	4630      	mov	r0, r6
 8014e54:	f004 fb76 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e58:	4680      	mov	r8, r0
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	f004 fb72 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014e60:	4580      	cmp	r8, r0
 8014e62:	d1f0      	bne.n	8014e46 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8014e64:	4631      	mov	r1, r6
 8014e66:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8014e6a:	f001 f9e9 	bl	8016240 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e6e:	4629      	mov	r1, r5
 8014e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014e74:	f001 f9e4 	bl	8016240 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e78:	4639      	mov	r1, r7
 8014e7a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8014e7e:	f001 f9df 	bl	8016240 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014e82:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8014e86:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8014e8a:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8014e8e:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 8014e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e96:	bf00      	nop
 8014e98:	08052617 	.word	0x08052617
 8014e9c:	0805292c 	.word	0x0805292c
 8014ea0:	08052834 	.word	0x08052834

08014ea4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014ea4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ea8:	4770      	bx	lr

08014eaa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014eaa:	b513      	push	{r0, r1, r4, lr}
 8014eac:	6803      	ldr	r3, [r0, #0]
 8014eae:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e9cd 3300 	strd	r3, r3, [sp]
 8014eb8:	466b      	mov	r3, sp
 8014eba:	47a0      	blx	r4
 8014ebc:	b002      	add	sp, #8
 8014ebe:	bd10      	pop	{r4, pc}

08014ec0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014ec6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014eca:	4770      	bx	lr

08014ecc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014ecc:	2301      	movs	r3, #1
 8014ece:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014ed2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014ed6:	4770      	bx	lr

08014ed8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014ed8:	6843      	ldr	r3, [r0, #4]
 8014eda:	2201      	movs	r2, #1
 8014edc:	725a      	strb	r2, [r3, #9]
 8014ede:	6840      	ldr	r0, [r0, #4]
 8014ee0:	6803      	ldr	r3, [r0, #0]
 8014ee2:	691b      	ldr	r3, [r3, #16]
 8014ee4:	4718      	bx	r3

08014ee6 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014ee6:	6840      	ldr	r0, [r0, #4]
 8014ee8:	6803      	ldr	r3, [r0, #0]
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	4718      	bx	r3
	...

08014ef0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014ef0:	4b04      	ldr	r3, [pc, #16]	; (8014f04 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	b123      	cbz	r3, 8014f00 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014ef6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014efa:	f080 0001 	eor.w	r0, r0, #1
 8014efe:	4770      	bx	lr
 8014f00:	2001      	movs	r0, #1
 8014f02:	4770      	bx	lr
 8014f04:	20001354 	.word	0x20001354

08014f08 <_ZN8touchgfx3HAL8endFrameEv>:
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	6840      	ldr	r0, [r0, #4]
 8014f0e:	6803      	ldr	r3, [r0, #0]
 8014f10:	689b      	ldr	r3, [r3, #8]
 8014f12:	4798      	blx	r3
 8014f14:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014f18:	b113      	cbz	r3, 8014f20 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014f20:	bd10      	pop	{r4, pc}

08014f22 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014f22:	b508      	push	{r3, lr}
 8014f24:	6803      	ldr	r3, [r0, #0]
 8014f26:	4604      	mov	r4, r0
 8014f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f2a:	4798      	blx	r3
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014f30:	4620      	mov	r0, r4
 8014f32:	4798      	blx	r3
 8014f34:	f7fd fbcc 	bl	80126d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014f38:	6823      	ldr	r3, [r4, #0]
 8014f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f3c:	e7f8      	b.n	8014f30 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014f40 <_ZN8touchgfx3HAL4tickEv>:
 8014f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014f42:	6803      	ldr	r3, [r0, #0]
 8014f44:	4d5c      	ldr	r5, [pc, #368]	; (80150b8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	4798      	blx	r3
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	f000 8097 	beq.w	8015082 <_ZN8touchgfx3HAL4tickEv+0x142>
 8014f54:	2001      	movs	r0, #1
 8014f56:	f7fd f8a5 	bl	80120a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014f5a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014f5e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014f62:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014f66:	2600      	movs	r6, #0
 8014f68:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014f6c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014f70:	b133      	cbz	r3, 8014f80 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014f72:	6823      	ldr	r3, [r4, #0]
 8014f74:	4620      	mov	r0, r4
 8014f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014f7a:	4798      	blx	r3
 8014f7c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014f80:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014f84:	6862      	ldr	r2, [r4, #4]
 8014f86:	f083 0301 	eor.w	r3, r3, #1
 8014f8a:	7253      	strb	r3, [r2, #9]
 8014f8c:	2601      	movs	r6, #1
 8014f8e:	702e      	strb	r6, [r5, #0]
 8014f90:	f002 fa9a 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8014f94:	6803      	ldr	r3, [r0, #0]
 8014f96:	4631      	mov	r1, r6
 8014f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f9a:	4798      	blx	r3
 8014f9c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014fa0:	b90b      	cbnz	r3, 8014fa6 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014fa2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014fa6:	f002 fa8f 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8014faa:	6803      	ldr	r3, [r0, #0]
 8014fac:	695b      	ldr	r3, [r3, #20]
 8014fae:	4798      	blx	r3
 8014fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fb2:	6803      	ldr	r3, [r0, #0]
 8014fb4:	691b      	ldr	r3, [r3, #16]
 8014fb6:	4798      	blx	r3
 8014fb8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014fbc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014fc0:	3b01      	subs	r3, #1
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014fc8:	b10a      	cbz	r2, 8014fce <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d1eb      	bne.n	8014fa6 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014fce:	4a3b      	ldr	r2, [pc, #236]	; (80150bc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014fd0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014fd4:	7813      	ldrb	r3, [r2, #0]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	b25b      	sxtb	r3, r3
 8014fda:	4299      	cmp	r1, r3
 8014fdc:	7013      	strb	r3, [r2, #0]
 8014fde:	dc10      	bgt.n	8015002 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014fe0:	68e0      	ldr	r0, [r4, #12]
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	7013      	strb	r3, [r2, #0]
 8014fe6:	6803      	ldr	r3, [r0, #0]
 8014fe8:	aa03      	add	r2, sp, #12
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	a902      	add	r1, sp, #8
 8014fee:	4798      	blx	r3
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d051      	beq.n	801509a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014ff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014ffa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014ffe:	4620      	mov	r0, r4
 8015000:	4798      	blx	r3
 8015002:	6960      	ldr	r0, [r4, #20]
 8015004:	2300      	movs	r3, #0
 8015006:	f88d 3007 	strb.w	r3, [sp, #7]
 801500a:	b158      	cbz	r0, 8015024 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801500c:	6803      	ldr	r3, [r0, #0]
 801500e:	f10d 0107 	add.w	r1, sp, #7
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	4798      	blx	r3
 8015016:	b128      	cbz	r0, 8015024 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801501a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801501e:	6803      	ldr	r3, [r0, #0]
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	4798      	blx	r3
 8015024:	f104 001c 	add.w	r0, r4, #28
 8015028:	f00f fe08 	bl	8024c3c <_ZN8touchgfx8Gestures4tickEv>
 801502c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015030:	b30b      	cbz	r3, 8015076 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015032:	6920      	ldr	r0, [r4, #16]
 8015034:	6803      	ldr	r3, [r0, #0]
 8015036:	691b      	ldr	r3, [r3, #16]
 8015038:	4798      	blx	r3
 801503a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801503c:	4606      	mov	r6, r0
 801503e:	b903      	cbnz	r3, 8015042 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015040:	6720      	str	r0, [r4, #112]	; 0x70
 8015042:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015044:	4a1e      	ldr	r2, [pc, #120]	; (80150c0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015046:	1af3      	subs	r3, r6, r3
 8015048:	4293      	cmp	r3, r2
 801504a:	d914      	bls.n	8015076 <_ZN8touchgfx3HAL4tickEv+0x136>
 801504c:	6920      	ldr	r0, [r4, #16]
 801504e:	6803      	ldr	r3, [r0, #0]
 8015050:	699b      	ldr	r3, [r3, #24]
 8015052:	4798      	blx	r3
 8015054:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015056:	2264      	movs	r2, #100	; 0x64
 8015058:	1af3      	subs	r3, r6, r3
 801505a:	fbb3 f3f2 	udiv	r3, r3, r2
 801505e:	fbb0 f0f3 	udiv	r0, r0, r3
 8015062:	2800      	cmp	r0, #0
 8015064:	dc1e      	bgt.n	80150a4 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015066:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801506a:	6920      	ldr	r0, [r4, #16]
 801506c:	6803      	ldr	r3, [r0, #0]
 801506e:	2100      	movs	r1, #0
 8015070:	69db      	ldr	r3, [r3, #28]
 8015072:	4798      	blx	r3
 8015074:	6726      	str	r6, [r4, #112]	; 0x70
 8015076:	f002 fa27 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 801507a:	6803      	ldr	r3, [r0, #0]
 801507c:	2100      	movs	r1, #0
 801507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015080:	4798      	blx	r3
 8015082:	6823      	ldr	r3, [r4, #0]
 8015084:	4620      	mov	r0, r4
 8015086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801508a:	4798      	blx	r3
 801508c:	2001      	movs	r0, #1
 801508e:	f7fd f814 	bl	80120ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015092:	2300      	movs	r3, #0
 8015094:	702b      	strb	r3, [r5, #0]
 8015096:	b004      	add	sp, #16
 8015098:	bd70      	pop	{r4, r5, r6, pc}
 801509a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801509e:	4620      	mov	r0, r4
 80150a0:	4798      	blx	r3
 80150a2:	e7ae      	b.n	8015002 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80150a4:	2863      	cmp	r0, #99	; 0x63
 80150a6:	bfcb      	itete	gt
 80150a8:	2300      	movgt	r3, #0
 80150aa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80150ae:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80150b2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80150b6:	e7d8      	b.n	801506a <_ZN8touchgfx3HAL4tickEv+0x12a>
 80150b8:	2000135c 	.word	0x2000135c
 80150bc:	2000135d 	.word	0x2000135d
 80150c0:	05f5e100 	.word	0x05f5e100

080150c4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80150c4:	f7fd bac4 	b.w	8012650 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080150c8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80150c8:	6581      	str	r1, [r0, #88]	; 0x58
 80150ca:	301c      	adds	r0, #28
 80150cc:	f00f bdb4 	b.w	8024c38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080150d0 <_ZN8touchgfx3HAL5touchEll>:
 80150d0:	b530      	push	{r4, r5, lr}
 80150d2:	b087      	sub	sp, #28
 80150d4:	4604      	mov	r4, r0
 80150d6:	a804      	add	r0, sp, #16
 80150d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80150dc:	f001 ffae 	bl	801703c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80150e0:	9b04      	ldr	r3, [sp, #16]
 80150e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80150e6:	a906      	add	r1, sp, #24
 80150e8:	9b05      	ldr	r3, [sp, #20]
 80150ea:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80150ee:	a803      	add	r0, sp, #12
 80150f0:	f001 fff2 	bl	80170d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80150f4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80150f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80150fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015100:	f104 001c 	add.w	r0, r4, #28
 8015104:	b189      	cbz	r1, 801512a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015106:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015110:	4613      	mov	r3, r2
 8015112:	462a      	mov	r2, r5
 8015114:	f00f fda0 	bl	8024c58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015118:	b128      	cbz	r0, 8015126 <_ZN8touchgfx3HAL5touchEll+0x56>
 801511a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801511e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015120:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015124:	6623      	str	r3, [r4, #96]	; 0x60
 8015126:	b007      	add	sp, #28
 8015128:	bd30      	pop	{r4, r5, pc}
 801512a:	f00f fdd9 	bl	8024ce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801512e:	2301      	movs	r3, #1
 8015130:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015134:	e7f1      	b.n	801511a <_ZN8touchgfx3HAL5touchEll+0x4a>

08015136 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015136:	b570      	push	{r4, r5, r6, lr}
 8015138:	2b00      	cmp	r3, #0
 801513a:	d050      	beq.n	80151de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801513c:	ea81 0002 	eor.w	r0, r1, r2
 8015140:	07c6      	lsls	r6, r0, #31
 8015142:	d508      	bpl.n	8015156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015144:	3a01      	subs	r2, #1
 8015146:	18cc      	adds	r4, r1, r3
 8015148:	42a1      	cmp	r1, r4
 801514a:	d048      	beq.n	80151de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801514c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015150:	f801 0b01 	strb.w	r0, [r1], #1
 8015154:	e7f8      	b.n	8015148 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015156:	07d5      	lsls	r5, r2, #31
 8015158:	bf42      	ittt	mi
 801515a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801515e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015162:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015166:	2b01      	cmp	r3, #1
 8015168:	d915      	bls.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801516a:	ea82 0001 	eor.w	r0, r2, r1
 801516e:	0784      	lsls	r4, r0, #30
 8015170:	d02d      	beq.n	80151ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015172:	1e94      	subs	r4, r2, #2
 8015174:	4608      	mov	r0, r1
 8015176:	18ce      	adds	r6, r1, r3
 8015178:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801517c:	f820 5b02 	strh.w	r5, [r0], #2
 8015180:	1a35      	subs	r5, r6, r0
 8015182:	2d01      	cmp	r5, #1
 8015184:	d8f8      	bhi.n	8015178 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015186:	1e98      	subs	r0, r3, #2
 8015188:	f020 0001 	bic.w	r0, r0, #1
 801518c:	3002      	adds	r0, #2
 801518e:	4401      	add	r1, r0
 8015190:	4402      	add	r2, r0
 8015192:	f003 0301 	and.w	r3, r3, #1
 8015196:	1f14      	subs	r4, r2, #4
 8015198:	4608      	mov	r0, r1
 801519a:	18ce      	adds	r6, r1, r3
 801519c:	1a35      	subs	r5, r6, r0
 801519e:	2d03      	cmp	r5, #3
 80151a0:	d810      	bhi.n	80151c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80151a2:	089c      	lsrs	r4, r3, #2
 80151a4:	00a0      	lsls	r0, r4, #2
 80151a6:	4401      	add	r1, r0
 80151a8:	3801      	subs	r0, #1
 80151aa:	4402      	add	r2, r0
 80151ac:	f06f 0003 	mvn.w	r0, #3
 80151b0:	fb00 3404 	mla	r4, r0, r4, r3
 80151b4:	440c      	add	r4, r1
 80151b6:	42a1      	cmp	r1, r4
 80151b8:	d011      	beq.n	80151de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80151ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80151be:	f801 3b01 	strb.w	r3, [r1], #1
 80151c2:	e7f8      	b.n	80151b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80151c4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80151c8:	f840 5b04 	str.w	r5, [r0], #4
 80151cc:	e7e6      	b.n	801519c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80151ce:	0790      	lsls	r0, r2, #30
 80151d0:	d0e1      	beq.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80151d2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80151d6:	f821 0b02 	strh.w	r0, [r1], #2
 80151da:	3b02      	subs	r3, #2
 80151dc:	e7db      	b.n	8015196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80151de:	2001      	movs	r0, #1
 80151e0:	bd70      	pop	{r4, r5, r6, pc}

080151e2 <_ZN8touchgfx3HAL7noTouchEv>:
 80151e2:	b510      	push	{r4, lr}
 80151e4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80151e8:	4604      	mov	r4, r0
 80151ea:	b153      	cbz	r3, 8015202 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80151ec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80151f0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80151f4:	2101      	movs	r1, #1
 80151f6:	301c      	adds	r0, #28
 80151f8:	f00f fd72 	bl	8024ce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80151fc:	2300      	movs	r3, #0
 80151fe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015202:	bd10      	pop	{r4, pc}

08015204 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015208:	4605      	mov	r5, r0
 801520a:	6980      	ldr	r0, [r0, #24]
 801520c:	b085      	sub	sp, #20
 801520e:	460f      	mov	r7, r1
 8015210:	4690      	mov	r8, r2
 8015212:	4699      	mov	r9, r3
 8015214:	b930      	cbnz	r0, 8015224 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015216:	4b1f      	ldr	r3, [pc, #124]	; (8015294 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015218:	4a1f      	ldr	r2, [pc, #124]	; (8015298 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801521a:	f240 112f 	movw	r1, #303	; 0x12f
 801521e:	481f      	ldr	r0, [pc, #124]	; (801529c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015220:	f00f fdf4 	bl	8024e0c <__assert_func>
 8015224:	ac04      	add	r4, sp, #16
 8015226:	2600      	movs	r6, #0
 8015228:	f844 6d04 	str.w	r6, [r4, #-4]!
 801522c:	6806      	ldr	r6, [r0, #0]
 801522e:	9401      	str	r4, [sp, #4]
 8015230:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015234:	9400      	str	r4, [sp, #0]
 8015236:	6834      	ldr	r4, [r6, #0]
 8015238:	47a0      	blx	r4
 801523a:	4c19      	ldr	r4, [pc, #100]	; (80152a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801523c:	4606      	mov	r6, r0
 801523e:	f8a4 9000 	strh.w	r9, [r4]
 8015242:	f7f9 fc35 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8015246:	6803      	ldr	r3, [r0, #0]
 8015248:	6a1b      	ldr	r3, [r3, #32]
 801524a:	4798      	blx	r3
 801524c:	280c      	cmp	r0, #12
 801524e:	d80f      	bhi.n	8015270 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015250:	e8df f000 	tbb	[pc, r0]
 8015254:	1b1b1207 	.word	0x1b1b1207
 8015258:	1b1b1b1b 	.word	0x1b1b1b1b
 801525c:	1b1b1b1b 	.word	0x1b1b1b1b
 8015260:	1b          	.byte	0x1b
 8015261:	00          	.byte	0x00
 8015262:	8823      	ldrh	r3, [r4, #0]
 8015264:	fb08 7203 	mla	r2, r8, r3, r7
 8015268:	9b03      	ldr	r3, [sp, #12]
 801526a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801526e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015270:	4630      	mov	r0, r6
 8015272:	b005      	add	sp, #20
 8015274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015278:	8822      	ldrh	r2, [r4, #0]
 801527a:	9b03      	ldr	r3, [sp, #12]
 801527c:	fb08 7202 	mla	r2, r8, r2, r7
 8015280:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015284:	1a9a      	subs	r2, r3, r2
 8015286:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015288:	e7f2      	b.n	8015270 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801528a:	4b06      	ldr	r3, [pc, #24]	; (80152a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801528c:	4a02      	ldr	r2, [pc, #8]	; (8015298 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801528e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8015292:	e7c4      	b.n	801521e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015294:	08052b0f 	.word	0x08052b0f
 8015298:	08052e22 	.word	0x08052e22
 801529c:	08052b54 	.word	0x08052b54
 80152a0:	20001350 	.word	0x20001350
 80152a4:	08052b7a 	.word	0x08052b7a

080152a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80152a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152ac:	4698      	mov	r8, r3
 80152ae:	6803      	ldr	r3, [r0, #0]
 80152b0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80152b2:	4b0f      	ldr	r3, [pc, #60]	; (80152f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80152b4:	b087      	sub	sp, #28
 80152b6:	f8b3 9000 	ldrh.w	r9, [r3]
 80152ba:	460e      	mov	r6, r1
 80152bc:	4617      	mov	r7, r2
 80152be:	4604      	mov	r4, r0
 80152c0:	f7f9 fbf6 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 80152c4:	6803      	ldr	r3, [r0, #0]
 80152c6:	6a1b      	ldr	r3, [r3, #32]
 80152c8:	4798      	blx	r3
 80152ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80152ce:	9302      	str	r3, [sp, #8]
 80152d0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80152d4:	9301      	str	r3, [sp, #4]
 80152d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80152e0:	4643      	mov	r3, r8
 80152e2:	463a      	mov	r2, r7
 80152e4:	4631      	mov	r1, r6
 80152e6:	4620      	mov	r0, r4
 80152e8:	47a8      	blx	r5
 80152ea:	b007      	add	sp, #28
 80152ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f0:	20001350 	.word	0x20001350

080152f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80152f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f8:	4606      	mov	r6, r0
 80152fa:	b089      	sub	sp, #36	; 0x24
 80152fc:	4610      	mov	r0, r2
 80152fe:	460c      	mov	r4, r1
 8015300:	4691      	mov	r9, r2
 8015302:	4698      	mov	r8, r3
 8015304:	f004 f820 	bl	8019348 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015308:	2800      	cmp	r0, #0
 801530a:	f000 8093 	beq.w	8015434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 801530e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801544c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8015312:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8015450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015316:	f8da 0000 	ldr.w	r0, [sl]
 801531a:	4f4b      	ldr	r7, [pc, #300]	; (8015448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801531c:	6802      	ldr	r2, [r0, #0]
 801531e:	6a12      	ldr	r2, [r2, #32]
 8015320:	4790      	blx	r2
 8015322:	f8da 0000 	ldr.w	r0, [sl]
 8015326:	6802      	ldr	r2, [r0, #0]
 8015328:	ad08      	add	r5, sp, #32
 801532a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801532c:	4790      	blx	r2
 801532e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015332:	f8bb 3000 	ldrh.w	r3, [fp]
 8015336:	9300      	str	r3, [sp, #0]
 8015338:	4628      	mov	r0, r5
 801533a:	883b      	ldrh	r3, [r7, #0]
 801533c:	9301      	str	r3, [sp, #4]
 801533e:	f004 f8c7 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015342:	f8ab 0000 	strh.w	r0, [fp]
 8015346:	4628      	mov	r0, r5
 8015348:	f004 f8fc 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801534c:	f8da b000 	ldr.w	fp, [sl]
 8015350:	8038      	strh	r0, [r7, #0]
 8015352:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015356:	9302      	str	r3, [sp, #8]
 8015358:	4648      	mov	r0, r9
 801535a:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801535e:	f003 fff3 	bl	8019348 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015362:	f8da 2000 	ldr.w	r2, [sl]
 8015366:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801536a:	63d0      	str	r0, [r2, #60]	; 0x3c
 801536c:	6822      	ldr	r2, [r4, #0]
 801536e:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015372:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015374:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015378:	2200      	movs	r2, #0
 801537a:	4611      	mov	r1, r2
 801537c:	4620      	mov	r0, r4
 801537e:	4798      	blx	r3
 8015380:	2201      	movs	r2, #1
 8015382:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015386:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801538a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801538e:	2a00      	cmp	r2, #0
 8015390:	f104 0204 	add.w	r2, r4, #4
 8015394:	dd51      	ble.n	801543a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8015396:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801539a:	2900      	cmp	r1, #0
 801539c:	dd4d      	ble.n	801543a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801539e:	6810      	ldr	r0, [r2, #0]
 80153a0:	6851      	ldr	r1, [r2, #4]
 80153a2:	f10d 0c18 	add.w	ip, sp, #24
 80153a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80153aa:	4641      	mov	r1, r8
 80153ac:	a806      	add	r0, sp, #24
 80153ae:	f7ff f965 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80153b2:	4628      	mov	r0, r5
 80153b4:	f004 fa18 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80153b8:	4680      	mov	r8, r0
 80153ba:	f7f9 fb79 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 80153be:	6802      	ldr	r2, [r0, #0]
 80153c0:	6a12      	ldr	r2, [r2, #32]
 80153c2:	4790      	blx	r2
 80153c4:	4580      	cmp	r8, r0
 80153c6:	d03d      	beq.n	8015444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 80153c8:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80153ca:	b150      	cbz	r0, 80153e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80153cc:	4628      	mov	r0, r5
 80153ce:	f004 fa0b 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80153d2:	4605      	mov	r5, r0
 80153d4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80153d6:	6803      	ldr	r3, [r0, #0]
 80153d8:	6a1b      	ldr	r3, [r3, #32]
 80153da:	4798      	blx	r3
 80153dc:	1a2b      	subs	r3, r5, r0
 80153de:	4258      	negs	r0, r3
 80153e0:	4158      	adcs	r0, r3
 80153e2:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80153e6:	6822      	ldr	r2, [r4, #0]
 80153e8:	6963      	ldr	r3, [r4, #20]
 80153ea:	9303      	str	r3, [sp, #12]
 80153ec:	2500      	movs	r5, #0
 80153ee:	6165      	str	r5, [r4, #20]
 80153f0:	4620      	mov	r0, r4
 80153f2:	6892      	ldr	r2, [r2, #8]
 80153f4:	a906      	add	r1, sp, #24
 80153f6:	4790      	blx	r2
 80153f8:	9b03      	ldr	r3, [sp, #12]
 80153fa:	6163      	str	r3, [r4, #20]
 80153fc:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015400:	6823      	ldr	r3, [r4, #0]
 8015402:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015406:	4620      	mov	r0, r4
 8015408:	4c10      	ldr	r4, [pc, #64]	; (801544c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801540c:	4652      	mov	r2, sl
 801540e:	4649      	mov	r1, r9
 8015410:	4798      	blx	r3
 8015412:	6820      	ldr	r0, [r4, #0]
 8015414:	9b02      	ldr	r3, [sp, #8]
 8015416:	9a00      	ldr	r2, [sp, #0]
 8015418:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801541c:	4b0c      	ldr	r3, [pc, #48]	; (8015450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801541e:	801a      	strh	r2, [r3, #0]
 8015420:	4b09      	ldr	r3, [pc, #36]	; (8015448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015422:	9a01      	ldr	r2, [sp, #4]
 8015424:	801a      	strh	r2, [r3, #0]
 8015426:	6803      	ldr	r3, [r0, #0]
 8015428:	6a1b      	ldr	r3, [r3, #32]
 801542a:	4798      	blx	r3
 801542c:	6820      	ldr	r0, [r4, #0]
 801542e:	6803      	ldr	r3, [r0, #0]
 8015430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015432:	4798      	blx	r3
 8015434:	b009      	add	sp, #36	; 0x24
 8015436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543a:	6810      	ldr	r0, [r2, #0]
 801543c:	6851      	ldr	r1, [r2, #4]
 801543e:	ab06      	add	r3, sp, #24
 8015440:	c303      	stmia	r3!, {r0, r1}
 8015442:	e7b6      	b.n	80153b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 8015444:	2000      	movs	r0, #0
 8015446:	e7cc      	b.n	80153e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8015448:	20001352 	.word	0x20001352
 801544c:	20001358 	.word	0x20001358
 8015450:	20001350 	.word	0x20001350

08015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015454:	b510      	push	{r4, lr}
 8015456:	4b07      	ldr	r3, [pc, #28]	; (8015474 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	4604      	mov	r4, r0
 801545c:	b13b      	cbz	r3, 801546e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801545e:	6803      	ldr	r3, [r0, #0]
 8015460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015462:	4798      	blx	r3
 8015464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015466:	4283      	cmp	r3, r0
 8015468:	d101      	bne.n	801546e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801546a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801546c:	bd10      	pop	{r4, pc}
 801546e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015470:	e7fc      	b.n	801546c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015472:	bf00      	nop
 8015474:	20001354 	.word	0x20001354

08015478 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015478:	b510      	push	{r4, lr}
 801547a:	4b0b      	ldr	r3, [pc, #44]	; (80154a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	4604      	mov	r4, r0
 8015480:	b95b      	cbnz	r3, 801549a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015482:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015486:	2b02      	cmp	r3, #2
 8015488:	d007      	beq.n	801549a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801548a:	6840      	ldr	r0, [r0, #4]
 801548c:	f000 fbc8 	bl	8015c20 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015490:	b118      	cbz	r0, 801549a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015492:	6862      	ldr	r2, [r4, #4]
 8015494:	7a53      	ldrb	r3, [r2, #9]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d0fc      	beq.n	8015494 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801549a:	f7fd f8c3 	bl	8012624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801549e:	4620      	mov	r0, r4
 80154a0:	f7ff ffd8 	bl	8015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154a4:	bd10      	pop	{r4, pc}
 80154a6:	bf00      	nop
 80154a8:	20001354 	.word	0x20001354

080154ac <_ZN8touchgfx3HAL10initializeEv>:
 80154ac:	b510      	push	{r4, lr}
 80154ae:	4604      	mov	r4, r0
 80154b0:	f7fd f8a6 	bl	8012600 <_ZN8touchgfx10OSWrappers10initializeEv>
 80154b4:	6860      	ldr	r0, [r4, #4]
 80154b6:	6803      	ldr	r3, [r0, #0]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	4798      	blx	r3
 80154bc:	68e0      	ldr	r0, [r4, #12]
 80154be:	6803      	ldr	r3, [r0, #0]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	4798      	blx	r3
 80154c4:	6823      	ldr	r3, [r4, #0]
 80154c6:	4620      	mov	r0, r4
 80154c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154ce:	4718      	bx	r3

080154d0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80154d0:	b508      	push	{r3, lr}
 80154d2:	290c      	cmp	r1, #12
 80154d4:	d817      	bhi.n	8015506 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80154d6:	e8df f001 	tbb	[pc, r1]
 80154da:	090b      	.short	0x090b
 80154dc:	0d0d0d07 	.word	0x0d0d0d07
 80154e0:	1414140d 	.word	0x1414140d
 80154e4:	1414      	.short	0x1414
 80154e6:	0d          	.byte	0x0d
 80154e7:	00          	.byte	0x00
 80154e8:	2020      	movs	r0, #32
 80154ea:	bd08      	pop	{r3, pc}
 80154ec:	2018      	movs	r0, #24
 80154ee:	e7fc      	b.n	80154ea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154f0:	2010      	movs	r0, #16
 80154f2:	e7fa      	b.n	80154ea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80154f4:	4b05      	ldr	r3, [pc, #20]	; (801550c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80154f6:	4a06      	ldr	r2, [pc, #24]	; (8015510 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80154f8:	4806      	ldr	r0, [pc, #24]	; (8015514 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80154fa:	f240 212f 	movw	r1, #559	; 0x22f
 80154fe:	f00f fc85 	bl	8024e0c <__assert_func>
 8015502:	2008      	movs	r0, #8
 8015504:	e7f1      	b.n	80154ea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015506:	2000      	movs	r0, #0
 8015508:	e7ef      	b.n	80154ea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801550a:	bf00      	nop
 801550c:	08052c4d 	.word	0x08052c4d
 8015510:	08052fe4 	.word	0x08052fe4
 8015514:	08052b54 	.word	0x08052b54

08015518 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015518:	b570      	push	{r4, r5, r6, lr}
 801551a:	460d      	mov	r5, r1
 801551c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015520:	4616      	mov	r6, r2
 8015522:	461c      	mov	r4, r3
 8015524:	f7ff ffd4 	bl	80154d0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015528:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801552c:	10c0      	asrs	r0, r0, #3
 801552e:	fb06 5101 	mla	r1, r6, r1, r5
 8015532:	fb00 4001 	mla	r0, r0, r1, r4
 8015536:	bd70      	pop	{r4, r5, r6, pc}

08015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801553c:	b08a      	sub	sp, #40	; 0x28
 801553e:	f04f 0c00 	mov.w	ip, #0
 8015542:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015546:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801554a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801554e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015552:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015556:	f8cd c020 	str.w	ip, [sp, #32]
 801555a:	f1b8 0f02 	cmp.w	r8, #2
 801555e:	4604      	mov	r4, r0
 8015560:	469a      	mov	sl, r3
 8015562:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015566:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801556a:	d030      	beq.n	80155ce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801556c:	2bff      	cmp	r3, #255	; 0xff
 801556e:	d12c      	bne.n	80155ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015570:	4560      	cmp	r0, ip
 8015572:	bf14      	ite	ne
 8015574:	2004      	movne	r0, #4
 8015576:	2001      	moveq	r0, #1
 8015578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801557c:	9204      	str	r2, [sp, #16]
 801557e:	4620      	mov	r0, r4
 8015580:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015584:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015588:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801558c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015590:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015594:	f7ff ff5e 	bl	8015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015598:	e9cd 9700 	strd	r9, r7, [sp]
 801559c:	4603      	mov	r3, r0
 801559e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80155a2:	4651      	mov	r1, sl
 80155a4:	4620      	mov	r0, r4
 80155a6:	f7ff ffb7 	bl	8015518 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80155aa:	f8ad 901e 	strh.w	r9, [sp, #30]
 80155ae:	9005      	str	r0, [sp, #20]
 80155b0:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80155b4:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80155b8:	b106      	cbz	r6, 80155bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80155ba:	b98d      	cbnz	r5, 80155e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80155bc:	4b12      	ldr	r3, [pc, #72]	; (8015608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80155be:	4a13      	ldr	r2, [pc, #76]	; (801560c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80155c0:	f240 11af 	movw	r1, #431	; 0x1af
 80155c4:	4812      	ldr	r0, [pc, #72]	; (8015610 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80155c6:	f00f fc21 	bl	8024e0c <__assert_func>
 80155ca:	2004      	movs	r0, #4
 80155cc:	e7d4      	b.n	8015578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80155ce:	2bff      	cmp	r3, #255	; 0xff
 80155d0:	d104      	bne.n	80155dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80155d2:	2800      	cmp	r0, #0
 80155d4:	bf14      	ite	ne
 80155d6:	2040      	movne	r0, #64	; 0x40
 80155d8:	2020      	moveq	r0, #32
 80155da:	e7cd      	b.n	8015578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80155dc:	2040      	movs	r0, #64	; 0x40
 80155de:	e7cb      	b.n	8015578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	9d02      	ldr	r5, [sp, #8]
 80155e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e6:	4620      	mov	r0, r4
 80155e8:	4798      	blx	r3
 80155ea:	4228      	tst	r0, r5
 80155ec:	d104      	bne.n	80155f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80155ee:	4b09      	ldr	r3, [pc, #36]	; (8015614 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80155f0:	4a06      	ldr	r2, [pc, #24]	; (801560c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80155f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80155f6:	e7e5      	b.n	80155c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80155f8:	6860      	ldr	r0, [r4, #4]
 80155fa:	6803      	ldr	r3, [r0, #0]
 80155fc:	a902      	add	r1, sp, #8
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	4798      	blx	r3
 8015602:	b00a      	add	sp, #40	; 0x28
 8015604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015608:	08052bd0 	.word	0x08052bd0
 801560c:	08052e86 	.word	0x08052e86
 8015610:	08052b54 	.word	0x08052b54
 8015614:	08052c08 	.word	0x08052c08

08015618 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015618:	b510      	push	{r4, lr}
 801561a:	b08a      	sub	sp, #40	; 0x28
 801561c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015620:	9408      	str	r4, [sp, #32]
 8015622:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015626:	9407      	str	r4, [sp, #28]
 8015628:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801562c:	9406      	str	r4, [sp, #24]
 801562e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8015632:	9405      	str	r4, [sp, #20]
 8015634:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015638:	9404      	str	r4, [sp, #16]
 801563a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801563e:	9403      	str	r4, [sp, #12]
 8015640:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015644:	9402      	str	r4, [sp, #8]
 8015646:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801564a:	e9cd 3400 	strd	r3, r4, [sp]
 801564e:	4613      	mov	r3, r2
 8015650:	2200      	movs	r2, #0
 8015652:	f7ff ff71 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015656:	b00a      	add	sp, #40	; 0x28
 8015658:	bd10      	pop	{r4, pc}
	...

0801565c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801565e:	b08b      	sub	sp, #44	; 0x2c
 8015660:	4616      	mov	r6, r2
 8015662:	460d      	mov	r5, r1
 8015664:	461f      	mov	r7, r3
 8015666:	4604      	mov	r4, r0
 8015668:	f7f9 fa22 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 801566c:	6803      	ldr	r3, [r0, #0]
 801566e:	6a1b      	ldr	r3, [r3, #32]
 8015670:	4798      	blx	r3
 8015672:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015676:	4b0d      	ldr	r3, [pc, #52]	; (80156ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	9306      	str	r3, [sp, #24]
 801567c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015680:	9305      	str	r3, [sp, #20]
 8015682:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015686:	9304      	str	r3, [sp, #16]
 8015688:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801568c:	9303      	str	r3, [sp, #12]
 801568e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015692:	9302      	str	r3, [sp, #8]
 8015694:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015698:	2200      	movs	r2, #0
 801569a:	e9cd 7300 	strd	r7, r3, [sp]
 801569e:	4629      	mov	r1, r5
 80156a0:	4633      	mov	r3, r6
 80156a2:	4620      	mov	r0, r4
 80156a4:	f7ff ff48 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80156a8:	b00b      	add	sp, #44	; 0x2c
 80156aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ac:	20001350 	.word	0x20001350

080156b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80156b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b4:	461f      	mov	r7, r3
 80156b6:	4b14      	ldr	r3, [pc, #80]	; (8015708 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80156b8:	b08a      	sub	sp, #40	; 0x28
 80156ba:	4616      	mov	r6, r2
 80156bc:	f8b3 8000 	ldrh.w	r8, [r3]
 80156c0:	460d      	mov	r5, r1
 80156c2:	4604      	mov	r4, r0
 80156c4:	f7f9 f9f4 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 80156c8:	6803      	ldr	r3, [r0, #0]
 80156ca:	6a1b      	ldr	r3, [r3, #32]
 80156cc:	4798      	blx	r3
 80156ce:	2302      	movs	r3, #2
 80156d0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80156d4:	2301      	movs	r3, #1
 80156d6:	9305      	str	r3, [sp, #20]
 80156d8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80156dc:	9304      	str	r3, [sp, #16]
 80156de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80156e2:	9303      	str	r3, [sp, #12]
 80156e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80156e8:	9302      	str	r3, [sp, #8]
 80156ea:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80156ee:	9008      	str	r0, [sp, #32]
 80156f0:	e9cd 7300 	strd	r7, r3, [sp]
 80156f4:	2200      	movs	r2, #0
 80156f6:	4633      	mov	r3, r6
 80156f8:	4629      	mov	r1, r5
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7ff ff1c 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015700:	b00a      	add	sp, #40	; 0x28
 8015702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015706:	bf00      	nop
 8015708:	20001350 	.word	0x20001350

0801570c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015710:	b08b      	sub	sp, #44	; 0x2c
 8015712:	469b      	mov	fp, r3
 8015714:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015718:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801571c:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015720:	2fff      	cmp	r7, #255	; 0xff
 8015722:	bf14      	ite	ne
 8015724:	2308      	movne	r3, #8
 8015726:	2302      	moveq	r3, #2
 8015728:	2600      	movs	r6, #0
 801572a:	4604      	mov	r4, r0
 801572c:	4689      	mov	r9, r1
 801572e:	4692      	mov	sl, r2
 8015730:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015734:	9608      	str	r6, [sp, #32]
 8015736:	f7ff fe8d 	bl	8015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801573a:	e9cd 8500 	strd	r8, r5, [sp]
 801573e:	4603      	mov	r3, r0
 8015740:	465a      	mov	r2, fp
 8015742:	4651      	mov	r1, sl
 8015744:	4620      	mov	r0, r4
 8015746:	f7ff fee7 	bl	8015518 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801574a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801574e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015752:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015756:	f8ad 301a 	strh.w	r3, [sp, #26]
 801575a:	6823      	ldr	r3, [r4, #0]
 801575c:	9005      	str	r0, [sp, #20]
 801575e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015762:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015766:	f8ad 601c 	strh.w	r6, [sp, #28]
 801576a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801576e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015772:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015778:	9d02      	ldr	r5, [sp, #8]
 801577a:	4620      	mov	r0, r4
 801577c:	4798      	blx	r3
 801577e:	4228      	tst	r0, r5
 8015780:	d106      	bne.n	8015790 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015782:	4b07      	ldr	r3, [pc, #28]	; (80157a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015784:	4a07      	ldr	r2, [pc, #28]	; (80157a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015786:	4808      	ldr	r0, [pc, #32]	; (80157a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015788:	f240 11e7 	movw	r1, #487	; 0x1e7
 801578c:	f00f fb3e 	bl	8024e0c <__assert_func>
 8015790:	6860      	ldr	r0, [r4, #4]
 8015792:	6803      	ldr	r3, [r0, #0]
 8015794:	a902      	add	r1, sp, #8
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	4798      	blx	r3
 801579a:	b00b      	add	sp, #44	; 0x2c
 801579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a0:	08052c08 	.word	0x08052c08
 80157a4:	08052f4f 	.word	0x08052f4f
 80157a8:	08052b54 	.word	0x08052b54

080157ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80157ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80157b0:	461f      	mov	r7, r3
 80157b2:	4b0b      	ldr	r3, [pc, #44]	; (80157e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80157b4:	460d      	mov	r5, r1
 80157b6:	f8b3 8000 	ldrh.w	r8, [r3]
 80157ba:	4616      	mov	r6, r2
 80157bc:	4604      	mov	r4, r0
 80157be:	f7f9 f977 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 80157c2:	6803      	ldr	r3, [r0, #0]
 80157c4:	6a1b      	ldr	r3, [r3, #32]
 80157c6:	4798      	blx	r3
 80157c8:	463b      	mov	r3, r7
 80157ca:	e9cd 8000 	strd	r8, r0, [sp]
 80157ce:	4632      	mov	r2, r6
 80157d0:	4629      	mov	r1, r5
 80157d2:	4620      	mov	r0, r4
 80157d4:	f7ff fea0 	bl	8015518 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80157d8:	b002      	add	sp, #8
 80157da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157de:	bf00      	nop
 80157e0:	20001350 	.word	0x20001350

080157e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80157e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e8:	b088      	sub	sp, #32
 80157ea:	4698      	mov	r8, r3
 80157ec:	2300      	movs	r3, #0
 80157ee:	9306      	str	r3, [sp, #24]
 80157f0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80157f4:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80157f8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80157fc:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015800:	e9cd 3100 	strd	r3, r1, [sp]
 8015804:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015808:	f8ad 3014 	strh.w	r3, [sp, #20]
 801580c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015810:	f88d 301c 	strb.w	r3, [sp, #28]
 8015814:	4617      	mov	r7, r2
 8015816:	4604      	mov	r4, r0
 8015818:	f8ad 5012 	strh.w	r5, [sp, #18]
 801581c:	f7ff fe1a 	bl	8015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015820:	4642      	mov	r2, r8
 8015822:	4603      	mov	r3, r0
 8015824:	4639      	mov	r1, r7
 8015826:	4620      	mov	r0, r4
 8015828:	f7ff ffc0 	bl	80157ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801582c:	4b16      	ldr	r3, [pc, #88]	; (8015888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801582e:	9003      	str	r0, [sp, #12]
 8015830:	881b      	ldrh	r3, [r3, #0]
 8015832:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015836:	f7f9 f93b 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 801583a:	6803      	ldr	r3, [r0, #0]
 801583c:	6a1b      	ldr	r3, [r3, #32]
 801583e:	4798      	blx	r3
 8015840:	f88d 001e 	strb.w	r0, [sp, #30]
 8015844:	f88d 001d 	strb.w	r0, [sp, #29]
 8015848:	b106      	cbz	r6, 801584c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801584a:	b935      	cbnz	r5, 801585a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801584c:	4b0f      	ldr	r3, [pc, #60]	; (801588c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801584e:	4a10      	ldr	r2, [pc, #64]	; (8015890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015850:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8015854:	480f      	ldr	r0, [pc, #60]	; (8015894 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015856:	f00f fad9 	bl	8024e0c <__assert_func>
 801585a:	6823      	ldr	r3, [r4, #0]
 801585c:	9d00      	ldr	r5, [sp, #0]
 801585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015860:	4620      	mov	r0, r4
 8015862:	4798      	blx	r3
 8015864:	4228      	tst	r0, r5
 8015866:	d104      	bne.n	8015872 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015868:	4b0b      	ldr	r3, [pc, #44]	; (8015898 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801586a:	4a09      	ldr	r2, [pc, #36]	; (8015890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801586c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015870:	e7f0      	b.n	8015854 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015874:	6860      	ldr	r0, [r4, #4]
 8015876:	9306      	str	r3, [sp, #24]
 8015878:	6803      	ldr	r3, [r0, #0]
 801587a:	4669      	mov	r1, sp
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	4798      	blx	r3
 8015880:	b008      	add	sp, #32
 8015882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015886:	bf00      	nop
 8015888:	20001350 	.word	0x20001350
 801588c:	08052bd0 	.word	0x08052bd0
 8015890:	08052d38 	.word	0x08052d38
 8015894:	08052b54 	.word	0x08052b54
 8015898:	08052c08 	.word	0x08052c08

0801589c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801589c:	b570      	push	{r4, r5, r6, lr}
 801589e:	b08a      	sub	sp, #40	; 0x28
 80158a0:	466b      	mov	r3, sp
 80158a2:	e883 0006 	stmia.w	r3, {r1, r2}
 80158a6:	4b20      	ldr	r3, [pc, #128]	; (8015928 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	4604      	mov	r4, r0
 80158ac:	b933      	cbnz	r3, 80158bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80158ae:	4b1f      	ldr	r3, [pc, #124]	; (801592c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80158b0:	4a1f      	ldr	r2, [pc, #124]	; (8015930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80158b2:	4820      	ldr	r0, [pc, #128]	; (8015934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80158b4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80158b8:	f00f faa8 	bl	8024e0c <__assert_func>
 80158bc:	2300      	movs	r3, #0
 80158be:	9308      	str	r3, [sp, #32]
 80158c0:	2301      	movs	r3, #1
 80158c2:	9302      	str	r3, [sp, #8]
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	f8bd 5000 	ldrh.w	r5, [sp]
 80158ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158cc:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80158d0:	4798      	blx	r3
 80158d2:	4632      	mov	r2, r6
 80158d4:	4629      	mov	r1, r5
 80158d6:	4603      	mov	r3, r0
 80158d8:	4620      	mov	r0, r4
 80158da:	f7ff ff67 	bl	80157ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80158de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80158e0:	9305      	str	r3, [sp, #20]
 80158e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80158e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80158ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80158ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80158f2:	4b11      	ldr	r3, [pc, #68]	; (8015938 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80158f4:	9003      	str	r0, [sp, #12]
 80158f6:	881b      	ldrh	r3, [r3, #0]
 80158f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80158fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015900:	f7f9 f8d6 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	6a1b      	ldr	r3, [r3, #32]
 8015908:	4798      	blx	r3
 801590a:	23ff      	movs	r3, #255	; 0xff
 801590c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015910:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015914:	6860      	ldr	r0, [r4, #4]
 8015916:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801591a:	6803      	ldr	r3, [r0, #0]
 801591c:	a902      	add	r1, sp, #8
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	4798      	blx	r3
 8015922:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015924:	b00a      	add	sp, #40	; 0x28
 8015926:	bd70      	pop	{r4, r5, r6, pc}
 8015928:	20001355 	.word	0x20001355
 801592c:	08052aa1 	.word	0x08052aa1
 8015930:	08052ddc 	.word	0x08052ddc
 8015934:	08052b54 	.word	0x08052b54
 8015938:	20001350 	.word	0x20001350

0801593c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801593e:	b08b      	sub	sp, #44	; 0x2c
 8015940:	466d      	mov	r5, sp
 8015942:	e885 0006 	stmia.w	r5, {r1, r2}
 8015946:	461d      	mov	r5, r3
 8015948:	2300      	movs	r3, #0
 801594a:	9308      	str	r3, [sp, #32]
 801594c:	2301      	movs	r3, #1
 801594e:	9302      	str	r3, [sp, #8]
 8015950:	6803      	ldr	r3, [r0, #0]
 8015952:	f8bd 6000 	ldrh.w	r6, [sp]
 8015956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015958:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801595c:	4604      	mov	r4, r0
 801595e:	4798      	blx	r3
 8015960:	463a      	mov	r2, r7
 8015962:	4631      	mov	r1, r6
 8015964:	4603      	mov	r3, r0
 8015966:	4620      	mov	r0, r4
 8015968:	f7ff ff20 	bl	80157ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801596c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015970:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015974:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015978:	f8ad 301a 	strh.w	r3, [sp, #26]
 801597c:	4b0e      	ldr	r3, [pc, #56]	; (80159b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801597e:	9003      	str	r0, [sp, #12]
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015988:	f8ad 301e 	strh.w	r3, [sp, #30]
 801598c:	9505      	str	r5, [sp, #20]
 801598e:	f7f9 f88f 	bl	800eab0 <_ZN8touchgfx3HAL3lcdEv>
 8015992:	6803      	ldr	r3, [r0, #0]
 8015994:	6a1b      	ldr	r3, [r3, #32]
 8015996:	4798      	blx	r3
 8015998:	23ff      	movs	r3, #255	; 0xff
 801599a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801599e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80159a2:	6860      	ldr	r0, [r4, #4]
 80159a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80159a8:	6803      	ldr	r3, [r0, #0]
 80159aa:	a902      	add	r1, sp, #8
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	4798      	blx	r3
 80159b0:	4628      	mov	r0, r5
 80159b2:	b00b      	add	sp, #44	; 0x2c
 80159b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b6:	bf00      	nop
 80159b8:	20001350 	.word	0x20001350

080159bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80159bc:	b570      	push	{r4, r5, r6, lr}
 80159be:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80159c2:	4604      	mov	r4, r0
 80159c4:	b19b      	cbz	r3, 80159ee <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80159c6:	2002      	movs	r0, #2
 80159c8:	f7fc fb82 	bl	80120d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80159cc:	2300      	movs	r3, #0
 80159ce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80159d2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	4620      	mov	r0, r4
 80159da:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 80159de:	f7ff fd39 	bl	8015454 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80159e2:	462b      	mov	r3, r5
 80159e4:	4601      	mov	r1, r0
 80159e6:	4620      	mov	r0, r4
 80159e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159ec:	4718      	bx	r3
 80159ee:	bd70      	pop	{r4, r5, r6, pc}

080159f0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80159f0:	4770      	bx	lr

080159f2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80159f2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80159f6:	1a13      	subs	r3, r2, r0
 80159f8:	4258      	negs	r0, r3
 80159fa:	4158      	adcs	r0, r3
 80159fc:	4770      	bx	lr

080159fe <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80159fe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015a02:	1a9b      	subs	r3, r3, r2
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	bfdc      	itt	le
 8015a08:	6882      	ldrle	r2, [r0, #8]
 8015a0a:	189b      	addle	r3, r3, r2
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	bfcc      	ite	gt
 8015a10:	2000      	movgt	r0, #0
 8015a12:	2001      	movle	r0, #1
 8015a14:	4770      	bx	lr

08015a16 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015a16:	6902      	ldr	r2, [r0, #16]
 8015a18:	6840      	ldr	r0, [r0, #4]
 8015a1a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015a1e:	4770      	bx	lr

08015a20 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015a20:	6803      	ldr	r3, [r0, #0]
 8015a22:	691b      	ldr	r3, [r3, #16]
 8015a24:	4718      	bx	r3

08015a26 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015a26:	4770      	bx	lr

08015a28 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015a28:	4770      	bx	lr
	...

08015a2c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015a2c:	b570      	push	{r4, r5, r6, lr}
 8015a2e:	2301      	movs	r3, #1
 8015a30:	7203      	strb	r3, [r0, #8]
 8015a32:	4604      	mov	r4, r0
 8015a34:	6840      	ldr	r0, [r0, #4]
 8015a36:	6803      	ldr	r3, [r0, #0]
 8015a38:	699b      	ldr	r3, [r3, #24]
 8015a3a:	4798      	blx	r3
 8015a3c:	6803      	ldr	r3, [r0, #0]
 8015a3e:	2b08      	cmp	r3, #8
 8015a40:	4605      	mov	r5, r0
 8015a42:	d01e      	beq.n	8015a82 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8015a44:	d80b      	bhi.n	8015a5e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	d027      	beq.n	8015a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015a4a:	2b04      	cmp	r3, #4
 8015a4c:	d011      	beq.n	8015a72 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d028      	beq.n	8015aa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a52:	4b17      	ldr	r3, [pc, #92]	; (8015ab0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8015a54:	4a17      	ldr	r2, [pc, #92]	; (8015ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015a56:	4818      	ldr	r0, [pc, #96]	; (8015ab8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015a58:	218b      	movs	r1, #139	; 0x8b
 8015a5a:	f00f f9d7 	bl	8024e0c <__assert_func>
 8015a5e:	2b40      	cmp	r3, #64	; 0x40
 8015a60:	d020      	beq.n	8015aa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a62:	d801      	bhi.n	8015a68 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015a64:	2b20      	cmp	r3, #32
 8015a66:	e7f3      	b.n	8015a50 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015a68:	2b80      	cmp	r3, #128	; 0x80
 8015a6a:	d01b      	beq.n	8015aa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a70:	e7ee      	b.n	8015a50 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	7f01      	ldrb	r1, [r0, #28]
 8015a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a78:	4620      	mov	r0, r4
 8015a7a:	4798      	blx	r3
 8015a7c:	6823      	ldr	r3, [r4, #0]
 8015a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a80:	e006      	b.n	8015a90 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	7f01      	ldrb	r1, [r0, #28]
 8015a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a88:	4620      	mov	r0, r4
 8015a8a:	4798      	blx	r3
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a90:	4629      	mov	r1, r5
 8015a92:	4620      	mov	r0, r4
 8015a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a98:	4718      	bx	r3
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015aa0:	4798      	blx	r3
 8015aa2:	e7f3      	b.n	8015a8c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015aa4:	6823      	ldr	r3, [r4, #0]
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015aaa:	4798      	blx	r3
 8015aac:	e7e6      	b.n	8015a7c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8015aae:	bf00      	nop
 8015ab0:	0805302d 	.word	0x0805302d
 8015ab4:	0805313c 	.word	0x0805313c
 8015ab8:	08053052 	.word	0x08053052

08015abc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	4604      	mov	r4, r0
 8015ac0:	460e      	mov	r6, r1
 8015ac2:	6860      	ldr	r0, [r4, #4]
 8015ac4:	6803      	ldr	r3, [r0, #0]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	4798      	blx	r3
 8015aca:	2800      	cmp	r0, #0
 8015acc:	d1f9      	bne.n	8015ac2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015ace:	4d0b      	ldr	r5, [pc, #44]	; (8015afc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8015ad0:	6828      	ldr	r0, [r5, #0]
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015ad6:	4798      	blx	r3
 8015ad8:	f7fc fdc6 	bl	8012668 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015adc:	6860      	ldr	r0, [r4, #4]
 8015ade:	6803      	ldr	r3, [r0, #0]
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	4798      	blx	r3
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	4620      	mov	r0, r4
 8015aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aec:	4798      	blx	r3
 8015aee:	6828      	ldr	r0, [r5, #0]
 8015af0:	6803      	ldr	r3, [r0, #0]
 8015af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015af8:	4718      	bx	r3
 8015afa:	bf00      	nop
 8015afc:	20001358 	.word	0x20001358

08015b00 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015b00:	b508      	push	{r3, lr}
 8015b02:	f7fc fd8f 	bl	8012624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015b0a:	f7fc bda1 	b.w	8012650 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015b0e <_ZN8touchgfx13DMA_Interface5startEv>:
 8015b0e:	b510      	push	{r4, lr}
 8015b10:	4604      	mov	r4, r0
 8015b12:	6840      	ldr	r0, [r0, #4]
 8015b14:	6803      	ldr	r3, [r0, #0]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	4798      	blx	r3
 8015b1a:	b948      	cbnz	r0, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b1c:	7a63      	ldrb	r3, [r4, #9]
 8015b1e:	b13b      	cbz	r3, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b20:	7a23      	ldrb	r3, [r4, #8]
 8015b22:	b92b      	cbnz	r3, 8015b30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b24:	6823      	ldr	r3, [r4, #0]
 8015b26:	4620      	mov	r0, r4
 8015b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b2e:	4718      	bx	r3
 8015b30:	bd10      	pop	{r4, pc}
	...

08015b34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015b34:	b510      	push	{r4, lr}
 8015b36:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8015b3a:	1b12      	subs	r2, r2, r4
 8015b3c:	2a00      	cmp	r2, #0
 8015b3e:	bfdc      	itt	le
 8015b40:	6883      	ldrle	r3, [r0, #8]
 8015b42:	18d2      	addle	r2, r2, r3
 8015b44:	2a01      	cmp	r2, #1
 8015b46:	dd18      	ble.n	8015b7a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015b48:	6843      	ldr	r3, [r0, #4]
 8015b4a:	f101 021c 	add.w	r2, r1, #28
 8015b4e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015b52:	f851 4b04 	ldr.w	r4, [r1], #4
 8015b56:	f843 4b04 	str.w	r4, [r3], #4
 8015b5a:	4291      	cmp	r1, r2
 8015b5c:	d1f9      	bne.n	8015b52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8015b5e:	880a      	ldrh	r2, [r1, #0]
 8015b60:	801a      	strh	r2, [r3, #0]
 8015b62:	788a      	ldrb	r2, [r1, #2]
 8015b64:	709a      	strb	r2, [r3, #2]
 8015b66:	68c3      	ldr	r3, [r0, #12]
 8015b68:	6882      	ldr	r2, [r0, #8]
 8015b6a:	f3bf 8f5b 	dmb	ish
 8015b6e:	3301      	adds	r3, #1
 8015b70:	429a      	cmp	r2, r3
 8015b72:	bfd8      	it	le
 8015b74:	1a9b      	suble	r3, r3, r2
 8015b76:	60c3      	str	r3, [r0, #12]
 8015b78:	bd10      	pop	{r4, pc}
 8015b7a:	4b03      	ldr	r3, [pc, #12]	; (8015b88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015b7c:	4a03      	ldr	r2, [pc, #12]	; (8015b8c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015b7e:	4804      	ldr	r0, [pc, #16]	; (8015b90 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015b80:	2139      	movs	r1, #57	; 0x39
 8015b82:	f00f f943 	bl	8024e0c <__assert_func>
 8015b86:	bf00      	nop
 8015b88:	08053078 	.word	0x08053078
 8015b8c:	0805316c 	.word	0x0805316c
 8015b90:	08053052 	.word	0x08053052

08015b94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015b94:	b510      	push	{r4, lr}
 8015b96:	6803      	ldr	r3, [r0, #0]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	4798      	blx	r3
 8015b9e:	b128      	cbz	r0, 8015bac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015ba0:	4b07      	ldr	r3, [pc, #28]	; (8015bc0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015ba2:	4a08      	ldr	r2, [pc, #32]	; (8015bc4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015ba4:	4808      	ldr	r0, [pc, #32]	; (8015bc8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015ba6:	213f      	movs	r1, #63	; 0x3f
 8015ba8:	f00f f930 	bl	8024e0c <__assert_func>
 8015bac:	6923      	ldr	r3, [r4, #16]
 8015bae:	68a2      	ldr	r2, [r4, #8]
 8015bb0:	f3bf 8f5b 	dmb	ish
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	bfd8      	it	le
 8015bba:	1a9b      	suble	r3, r3, r2
 8015bbc:	6123      	str	r3, [r4, #16]
 8015bbe:	bd10      	pop	{r4, pc}
 8015bc0:	0805309b 	.word	0x0805309b
 8015bc4:	080531ba 	.word	0x080531ba
 8015bc8:	08053052 	.word	0x08053052

08015bcc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015bcc:	b570      	push	{r4, r5, r6, lr}
 8015bce:	4604      	mov	r4, r0
 8015bd0:	6840      	ldr	r0, [r0, #4]
 8015bd2:	6803      	ldr	r3, [r0, #0]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	4798      	blx	r3
 8015bd8:	4605      	mov	r5, r0
 8015bda:	b930      	cbnz	r0, 8015bea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015bdc:	7a23      	ldrb	r3, [r4, #8]
 8015bde:	b123      	cbz	r3, 8015bea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015be0:	6860      	ldr	r0, [r4, #4]
 8015be2:	6803      	ldr	r3, [r0, #0]
 8015be4:	695b      	ldr	r3, [r3, #20]
 8015be6:	4798      	blx	r3
 8015be8:	7225      	strb	r5, [r4, #8]
 8015bea:	6860      	ldr	r0, [r4, #4]
 8015bec:	6803      	ldr	r3, [r0, #0]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	4798      	blx	r3
 8015bf2:	b928      	cbnz	r0, 8015c00 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bfe:	4718      	bx	r3
 8015c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c04:	f7fc bd3c 	b.w	8012680 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015c08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015c08:	b510      	push	{r4, lr}
 8015c0a:	4c04      	ldr	r4, [pc, #16]	; (8015c1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015c0c:	6082      	str	r2, [r0, #8]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	e9c0 4100 	strd	r4, r1, [r0]
 8015c14:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015c18:	bd10      	pop	{r4, pc}
 8015c1a:	bf00      	nop
 8015c1c:	08053120 	.word	0x08053120

08015c20 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015c20:	6840      	ldr	r0, [r0, #4]
 8015c22:	6803      	ldr	r3, [r0, #0]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4718      	bx	r3

08015c28 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8015c28:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8015c2c:	4770      	bx	lr

08015c2e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8015c2e:	b570      	push	{r4, r5, r6, lr}
 8015c30:	790b      	ldrb	r3, [r1, #4]
 8015c32:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	bf0c      	ite	eq
 8015c3a:	2301      	moveq	r3, #1
 8015c3c:	2300      	movne	r3, #0
 8015c3e:	4604      	mov	r4, r0
 8015c40:	460e      	mov	r6, r1
 8015c42:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8015c46:	d110      	bne.n	8015c6a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015c48:	b185      	cbz	r5, 8015c6c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8015c4a:	7933      	ldrb	r3, [r6, #4]
 8015c4c:	2b01      	cmp	r3, #1
 8015c4e:	d113      	bne.n	8015c78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015c52:	b188      	cbz	r0, 8015c78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c54:	6803      	ldr	r3, [r0, #0]
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	4798      	blx	r3
 8015c5a:	b168      	cbz	r0, 8015c78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015c5e:	6803      	ldr	r3, [r0, #0]
 8015c60:	4621      	mov	r1, r4
 8015c62:	689b      	ldr	r3, [r3, #8]
 8015c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c68:	4718      	bx	r3
 8015c6a:	b12d      	cbz	r5, 8015c78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015c6c:	6823      	ldr	r3, [r4, #0]
 8015c6e:	4620      	mov	r0, r4
 8015c70:	695b      	ldr	r3, [r3, #20]
 8015c72:	4798      	blx	r3
 8015c74:	2d00      	cmp	r5, #0
 8015c76:	d1e8      	bne.n	8015c4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015c78:	bd70      	pop	{r4, r5, r6, pc}

08015c7a <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8015c7a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015c7e:	b133      	cbz	r3, 8015c8e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8015c80:	790b      	ldrb	r3, [r1, #4]
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	bf01      	itttt	eq
 8015c86:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8015c88:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8015c8a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8015c8c:	8603      	strheq	r3, [r0, #48]	; 0x30
 8015c8e:	f7ff bfce 	b.w	8015c2e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08015c92 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8015c92:	2200      	movs	r2, #0
 8015c94:	8002      	strh	r2, [r0, #0]
 8015c96:	8042      	strh	r2, [r0, #2]
 8015c98:	8082      	strh	r2, [r0, #4]
 8015c9a:	80c2      	strh	r2, [r0, #6]
 8015c9c:	4770      	bx	lr

08015c9e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015c9e:	b570      	push	{r4, r5, r6, lr}
 8015ca0:	6803      	ldr	r3, [r0, #0]
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca6:	4615      	mov	r5, r2
 8015ca8:	4798      	blx	r3
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	4629      	mov	r1, r5
 8015cae:	4620      	mov	r0, r4
 8015cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cb6:	4718      	bx	r3

08015cb8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cc0:	4299      	cmp	r1, r3
 8015cc2:	d029      	beq.n	8015d18 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8015cc4:	4b15      	ldr	r3, [pc, #84]	; (8015d1c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	b92b      	cbnz	r3, 8015cd6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015cca:	4b15      	ldr	r3, [pc, #84]	; (8015d20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015ccc:	4a15      	ldr	r2, [pc, #84]	; (8015d24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015cce:	21b1      	movs	r1, #177	; 0xb1
 8015cd0:	4815      	ldr	r0, [pc, #84]	; (8015d28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015cd2:	f00f f89b 	bl	8024e0c <__assert_func>
 8015cd6:	4a15      	ldr	r2, [pc, #84]	; (8015d2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8015cd8:	8812      	ldrh	r2, [r2, #0]
 8015cda:	428a      	cmp	r2, r1
 8015cdc:	d803      	bhi.n	8015ce6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8015cde:	4b14      	ldr	r3, [pc, #80]	; (8015d30 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8015ce0:	4a10      	ldr	r2, [pc, #64]	; (8015d24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015ce2:	21b2      	movs	r1, #178	; 0xb2
 8015ce4:	e7f4      	b.n	8015cd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8015ce6:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015cea:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015cee:	4b11      	ldr	r3, [pc, #68]	; (8015d34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8015cf0:	7854      	ldrb	r4, [r2, #1]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8015cf8:	682b      	ldr	r3, [r5, #0]
 8015cfa:	69de      	ldr	r6, [r3, #28]
 8015cfc:	4b0e      	ldr	r3, [pc, #56]	; (8015d38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8015cfe:	6818      	ldr	r0, [r3, #0]
 8015d00:	f7fb fec0 	bl	8011a84 <_ZNK8touchgfx5Texts7getTextEt>
 8015d04:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8015d08:	2300      	movs	r3, #0
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	9300      	str	r3, [sp, #0]
 8015d0e:	4621      	mov	r1, r4
 8015d10:	4628      	mov	r0, r5
 8015d12:	47b0      	blx	r6
 8015d14:	b002      	add	sp, #8
 8015d16:	bd70      	pop	{r4, r5, r6, pc}
 8015d18:	2000      	movs	r0, #0
 8015d1a:	e7fb      	b.n	8015d14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8015d1c:	200013c8 	.word	0x200013c8
 8015d20:	080532c8 	.word	0x080532c8
 8015d24:	08053404 	.word	0x08053404
 8015d28:	0805330a 	.word	0x0805330a
 8015d2c:	200013cc 	.word	0x200013cc
 8015d30:	08053333 	.word	0x08053333
 8015d34:	200013d0 	.word	0x200013d0
 8015d38:	200013d4 	.word	0x200013d4

08015d3c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8015d3c:	b570      	push	{r4, r5, r6, lr}
 8015d3e:	6803      	ldr	r3, [r0, #0]
 8015d40:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015d42:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8015d44:	4b11      	ldr	r3, [pc, #68]	; (8015d8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	4604      	mov	r4, r0
 8015d4a:	b28d      	uxth	r5, r1
 8015d4c:	b92b      	cbnz	r3, 8015d5a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8015d4e:	4b10      	ldr	r3, [pc, #64]	; (8015d90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8015d50:	4a10      	ldr	r2, [pc, #64]	; (8015d94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015d52:	21b1      	movs	r1, #177	; 0xb1
 8015d54:	4810      	ldr	r0, [pc, #64]	; (8015d98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8015d56:	f00f f859 	bl	8024e0c <__assert_func>
 8015d5a:	4910      	ldr	r1, [pc, #64]	; (8015d9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015d5c:	8809      	ldrh	r1, [r1, #0]
 8015d5e:	4291      	cmp	r1, r2
 8015d60:	d803      	bhi.n	8015d6a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8015d62:	4b0f      	ldr	r3, [pc, #60]	; (8015da0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8015d64:	4a0b      	ldr	r2, [pc, #44]	; (8015d94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015d66:	21b2      	movs	r1, #178	; 0xb2
 8015d68:	e7f4      	b.n	8015d54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015d6a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015d6e:	4b0d      	ldr	r3, [pc, #52]	; (8015da4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015d76:	6803      	ldr	r3, [r0, #0]
 8015d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d7a:	4798      	blx	r3
 8015d7c:	1a29      	subs	r1, r5, r0
 8015d7e:	4633      	mov	r3, r6
 8015d80:	4620      	mov	r0, r4
 8015d82:	b209      	sxth	r1, r1
 8015d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d88:	4718      	bx	r3
 8015d8a:	bf00      	nop
 8015d8c:	200013c8 	.word	0x200013c8
 8015d90:	080532c8 	.word	0x080532c8
 8015d94:	08053404 	.word	0x08053404
 8015d98:	0805330a 	.word	0x0805330a
 8015d9c:	200013cc 	.word	0x200013cc
 8015da0:	08053333 	.word	0x08053333
 8015da4:	200013d0 	.word	0x200013d0

08015da8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015db2:	4293      	cmp	r3, r2
 8015db4:	b08c      	sub	sp, #48	; 0x30
 8015db6:	4604      	mov	r4, r0
 8015db8:	4688      	mov	r8, r1
 8015dba:	d05f      	beq.n	8015e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015dbc:	4e31      	ldr	r6, [pc, #196]	; (8015e84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8015dbe:	6832      	ldr	r2, [r6, #0]
 8015dc0:	b92a      	cbnz	r2, 8015dce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8015dc2:	4b31      	ldr	r3, [pc, #196]	; (8015e88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8015dc4:	4a31      	ldr	r2, [pc, #196]	; (8015e8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015dc6:	21b1      	movs	r1, #177	; 0xb1
 8015dc8:	4831      	ldr	r0, [pc, #196]	; (8015e90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015dca:	f00f f81f 	bl	8024e0c <__assert_func>
 8015dce:	4d31      	ldr	r5, [pc, #196]	; (8015e94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8015dd0:	8829      	ldrh	r1, [r5, #0]
 8015dd2:	4299      	cmp	r1, r3
 8015dd4:	d803      	bhi.n	8015dde <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8015dd6:	4b30      	ldr	r3, [pc, #192]	; (8015e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8015dd8:	4a2c      	ldr	r2, [pc, #176]	; (8015e8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015dda:	21b2      	movs	r1, #178	; 0xb2
 8015ddc:	e7f4      	b.n	8015dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8015dde:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015de2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015de6:	4b2d      	ldr	r3, [pc, #180]	; (8015e9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015dee:	2a00      	cmp	r2, #0
 8015df0:	d044      	beq.n	8015e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015df2:	784b      	ldrb	r3, [r1, #1]
 8015df4:	9207      	str	r2, [sp, #28]
 8015df6:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8015dfa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015dfe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8015e02:	4b27      	ldr	r3, [pc, #156]	; (8015ea0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8015e04:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8015e0e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015e12:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8015e16:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8015e1a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8015e1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015e20:	9009      	str	r0, [sp, #36]	; 0x24
 8015e22:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8015e26:	f88d 9020 	strb.w	r9, [sp, #32]
 8015e2a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8015e2e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015e32:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8015e36:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015e3a:	b10a      	cbz	r2, 8015e40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8015e3c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8015e3e:	b907      	cbnz	r7, 8015e42 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8015e40:	689f      	ldr	r7, [r3, #8]
 8015e42:	f10d 0914 	add.w	r9, sp, #20
 8015e46:	4621      	mov	r1, r4
 8015e48:	4648      	mov	r0, r9
 8015e4a:	f002 f8b5 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e4e:	6833      	ldr	r3, [r6, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d0b6      	beq.n	8015dc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8015e54:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015e56:	882b      	ldrh	r3, [r5, #0]
 8015e58:	428b      	cmp	r3, r1
 8015e5a:	d9bc      	bls.n	8015dd6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015e5c:	4b11      	ldr	r3, [pc, #68]	; (8015ea4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8015e5e:	6818      	ldr	r0, [r3, #0]
 8015e60:	f7fb fe10 	bl	8011a84 <_ZNK8touchgfx5Texts7getTextEt>
 8015e64:	2300      	movs	r3, #0
 8015e66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015e6a:	ab07      	add	r3, sp, #28
 8015e6c:	9001      	str	r0, [sp, #4]
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015e74:	4643      	mov	r3, r8
 8015e76:	4638      	mov	r0, r7
 8015e78:	f7fb fd95 	bl	80119a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015e7c:	b00c      	add	sp, #48	; 0x30
 8015e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e82:	bf00      	nop
 8015e84:	200013c8 	.word	0x200013c8
 8015e88:	080532c8 	.word	0x080532c8
 8015e8c:	08053404 	.word	0x08053404
 8015e90:	0805330a 	.word	0x0805330a
 8015e94:	200013cc 	.word	0x200013cc
 8015e98:	08053333 	.word	0x08053333
 8015e9c:	200013d0 	.word	0x200013d0
 8015ea0:	20001358 	.word	0x20001358
 8015ea4:	200013d4 	.word	0x200013d4

08015ea8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015ea8:	b40e      	push	{r1, r2, r3}
 8015eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	b09b      	sub	sp, #108	; 0x6c
 8015eb8:	4604      	mov	r4, r0
 8015eba:	d061      	beq.n	8015f80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8015ebc:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8015ec0:	aa24      	add	r2, sp, #144	; 0x90
 8015ec2:	9203      	str	r2, [sp, #12]
 8015ec4:	f8da 2000 	ldr.w	r2, [sl]
 8015ec8:	b92a      	cbnz	r2, 8015ed6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015eca:	4b2e      	ldr	r3, [pc, #184]	; (8015f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8015ecc:	4a2e      	ldr	r2, [pc, #184]	; (8015f88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015ece:	21b1      	movs	r1, #177	; 0xb1
 8015ed0:	482e      	ldr	r0, [pc, #184]	; (8015f8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8015ed2:	f00e ff9b 	bl	8024e0c <__assert_func>
 8015ed6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8015f98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8015eda:	f8b8 1000 	ldrh.w	r1, [r8]
 8015ede:	4299      	cmp	r1, r3
 8015ee0:	d803      	bhi.n	8015eea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8015ee2:	4b2b      	ldr	r3, [pc, #172]	; (8015f90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8015ee4:	4a28      	ldr	r2, [pc, #160]	; (8015f88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015ee6:	21b2      	movs	r1, #178	; 0xb2
 8015ee8:	e7f2      	b.n	8015ed0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8015eea:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8015f9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8015eee:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8015ef6:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	4638      	mov	r0, r7
 8015efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f00:	4798      	blx	r3
 8015f02:	4606      	mov	r6, r0
 8015f04:	b205      	sxth	r5, r0
 8015f06:	a804      	add	r0, sp, #16
 8015f08:	f002 fc97 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	4638      	mov	r0, r7
 8015f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f12:	4798      	blx	r3
 8015f14:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015f16:	9a03      	ldr	r2, [sp, #12]
 8015f18:	4603      	mov	r3, r0
 8015f1a:	a804      	add	r0, sp, #16
 8015f1c:	f002 fcd2 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015f20:	f8da 3000 	ldr.w	r3, [sl]
 8015f24:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d0ce      	beq.n	8015eca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8015f2c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015f2e:	f8b8 0000 	ldrh.w	r0, [r8]
 8015f32:	4290      	cmp	r0, r2
 8015f34:	d9d5      	bls.n	8015ee2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8015f36:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8015f3a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015f3e:	787a      	ldrb	r2, [r7, #1]
 8015f40:	f8d9 3000 	ldr.w	r3, [r9]
 8015f44:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8015f48:	9700      	str	r7, [sp, #0]
 8015f4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f4e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015f52:	a804      	add	r0, sp, #16
 8015f54:	f000 feac 	bl	8016cb0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015f58:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015f5c:	18a9      	adds	r1, r5, r2
 8015f5e:	2900      	cmp	r1, #0
 8015f60:	b203      	sxth	r3, r0
 8015f62:	dd0b      	ble.n	8015f7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8015f64:	3b01      	subs	r3, #1
 8015f66:	fb13 f302 	smulbb	r3, r3, r2
 8015f6a:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015f6e:	b21d      	sxth	r5, r3
 8015f70:	4628      	mov	r0, r5
 8015f72:	b01b      	add	sp, #108	; 0x6c
 8015f74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f78:	b003      	add	sp, #12
 8015f7a:	4770      	bx	lr
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	dcf7      	bgt.n	8015f70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015f80:	2500      	movs	r5, #0
 8015f82:	e7f5      	b.n	8015f70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015f84:	080532c8 	.word	0x080532c8
 8015f88:	08053404 	.word	0x08053404
 8015f8c:	0805330a 	.word	0x0805330a
 8015f90:	08053333 	.word	0x08053333
 8015f94:	200013c8 	.word	0x200013c8
 8015f98:	200013cc 	.word	0x200013cc
 8015f9c:	200013d0 	.word	0x200013d0

08015fa0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fa8:	4299      	cmp	r1, r3
 8015faa:	4604      	mov	r4, r0
 8015fac:	d01e      	beq.n	8015fec <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8015fae:	6803      	ldr	r3, [r0, #0]
 8015fb0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8015fb2:	4b0f      	ldr	r3, [pc, #60]	; (8015ff0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	b92b      	cbnz	r3, 8015fc4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8015fb8:	4b0e      	ldr	r3, [pc, #56]	; (8015ff4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8015fba:	4a0f      	ldr	r2, [pc, #60]	; (8015ff8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015fbc:	21b1      	movs	r1, #177	; 0xb1
 8015fbe:	480f      	ldr	r0, [pc, #60]	; (8015ffc <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8015fc0:	f00e ff24 	bl	8024e0c <__assert_func>
 8015fc4:	4b0e      	ldr	r3, [pc, #56]	; (8016000 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8015fc6:	881b      	ldrh	r3, [r3, #0]
 8015fc8:	428b      	cmp	r3, r1
 8015fca:	d803      	bhi.n	8015fd4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8015fcc:	4b0d      	ldr	r3, [pc, #52]	; (8016004 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8015fce:	4a0a      	ldr	r2, [pc, #40]	; (8015ff8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015fd0:	21b2      	movs	r1, #178	; 0xb2
 8015fd2:	e7f4      	b.n	8015fbe <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8015fd4:	4b0c      	ldr	r3, [pc, #48]	; (8016008 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8015fd6:	6818      	ldr	r0, [r3, #0]
 8015fd8:	f7fb fd54 	bl	8011a84 <_ZNK8touchgfx5Texts7getTextEt>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	4601      	mov	r1, r0
 8015fe0:	46ac      	mov	ip, r5
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fea:	4760      	bx	ip
 8015fec:	2000      	movs	r0, #0
 8015fee:	bd70      	pop	{r4, r5, r6, pc}
 8015ff0:	200013c8 	.word	0x200013c8
 8015ff4:	080532c8 	.word	0x080532c8
 8015ff8:	08053404 	.word	0x08053404
 8015ffc:	0805330a 	.word	0x0805330a
 8016000:	200013cc 	.word	0x200013cc
 8016004:	08053333 	.word	0x08053333
 8016008:	200013d4 	.word	0x200013d4

0801600c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801600c:	b570      	push	{r4, r5, r6, lr}
 801600e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016014:	429a      	cmp	r2, r3
 8016016:	4604      	mov	r4, r0
 8016018:	d021      	beq.n	801605e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801601e:	4798      	blx	r3
 8016020:	6823      	ldr	r3, [r4, #0]
 8016022:	4605      	mov	r5, r0
 8016024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016026:	4620      	mov	r0, r4
 8016028:	4798      	blx	r3
 801602a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801602e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016032:	6823      	ldr	r3, [r4, #0]
 8016034:	4606      	mov	r6, r0
 8016036:	b22d      	sxth	r5, r5
 8016038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801603a:	d109      	bne.n	8016050 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801603c:	4629      	mov	r1, r5
 801603e:	4620      	mov	r0, r4
 8016040:	4798      	blx	r3
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016046:	4631      	mov	r1, r6
 8016048:	4620      	mov	r0, r4
 801604a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801604e:	4718      	bx	r3
 8016050:	4601      	mov	r1, r0
 8016052:	4620      	mov	r0, r4
 8016054:	4798      	blx	r3
 8016056:	6823      	ldr	r3, [r4, #0]
 8016058:	4629      	mov	r1, r5
 801605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801605c:	e7f4      	b.n	8016048 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801605e:	bd70      	pop	{r4, r5, r6, pc}

08016060 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016060:	888a      	ldrh	r2, [r1, #4]
 8016062:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016064:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016068:	b922      	cbnz	r2, 8016074 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801606a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801606e:	b90b      	cbnz	r3, 8016074 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8016070:	f7ff bfcc 	b.w	801600c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016074:	4770      	bx	lr

08016076 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016076:	2300      	movs	r3, #0
 8016078:	8003      	strh	r3, [r0, #0]
 801607a:	8043      	strh	r3, [r0, #2]
 801607c:	8083      	strh	r3, [r0, #4]
 801607e:	80c3      	strh	r3, [r0, #6]
 8016080:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016084:	b91b      	cbnz	r3, 801608e <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016086:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801608a:	2bff      	cmp	r3, #255	; 0xff
 801608c:	d103      	bne.n	8016096 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801608e:	890b      	ldrh	r3, [r1, #8]
 8016090:	8083      	strh	r3, [r0, #4]
 8016092:	894b      	ldrh	r3, [r1, #10]
 8016094:	80c3      	strh	r3, [r0, #6]
 8016096:	4770      	bx	lr

08016098 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801609a:	4604      	mov	r4, r0
 801609c:	6808      	ldr	r0, [r1, #0]
 801609e:	6849      	ldr	r1, [r1, #4]
 80160a0:	466b      	mov	r3, sp
 80160a2:	c303      	stmia	r3!, {r0, r1}
 80160a4:	6823      	ldr	r3, [r4, #0]
 80160a6:	4669      	mov	r1, sp
 80160a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160aa:	4620      	mov	r0, r4
 80160ac:	4798      	blx	r3
 80160ae:	4b08      	ldr	r3, [pc, #32]	; (80160d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80160b6:	b10a      	cbz	r2, 80160bc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80160b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80160ba:	b900      	cbnz	r0, 80160be <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80160bc:	6898      	ldr	r0, [r3, #8]
 80160be:	6803      	ldr	r3, [r0, #0]
 80160c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80160c2:	699d      	ldr	r5, [r3, #24]
 80160c4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80160c8:	4669      	mov	r1, sp
 80160ca:	47a8      	blx	r5
 80160cc:	b003      	add	sp, #12
 80160ce:	bd30      	pop	{r4, r5, pc}
 80160d0:	20001358 	.word	0x20001358

080160d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80160d4:	b538      	push	{r3, r4, r5, lr}
 80160d6:	880b      	ldrh	r3, [r1, #0]
 80160d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80160da:	4605      	mov	r5, r0
 80160dc:	8813      	ldrh	r3, [r2, #0]
 80160de:	f825 3f30 	strh.w	r3, [r5, #48]!
 80160e2:	4604      	mov	r4, r0
 80160e4:	4628      	mov	r0, r5
 80160e6:	f003 f9f3 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160ea:	8120      	strh	r0, [r4, #8]
 80160ec:	4628      	mov	r0, r5
 80160ee:	f003 fa29 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160f2:	8160      	strh	r0, [r4, #10]
 80160f4:	bd38      	pop	{r3, r4, r5, pc}

080160f6 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80160f6:	b510      	push	{r4, lr}
 80160f8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80160fc:	2bff      	cmp	r3, #255	; 0xff
 80160fe:	4604      	mov	r4, r0
 8016100:	d006      	beq.n	8016110 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016102:	2300      	movs	r3, #0
 8016104:	8003      	strh	r3, [r0, #0]
 8016106:	8043      	strh	r3, [r0, #2]
 8016108:	8083      	strh	r3, [r0, #4]
 801610a:	80c3      	strh	r3, [r0, #6]
 801610c:	4620      	mov	r0, r4
 801610e:	bd10      	pop	{r4, pc}
 8016110:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016114:	b11b      	cbz	r3, 801611e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016116:	3130      	adds	r1, #48	; 0x30
 8016118:	f003 fa4e 	bl	80195b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801611c:	e7f6      	b.n	801610c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801611e:	312e      	adds	r1, #46	; 0x2e
 8016120:	e7fa      	b.n	8016118 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08016124 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016128:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801612c:	b08a      	sub	sp, #40	; 0x28
 801612e:	4604      	mov	r4, r0
 8016130:	4688      	mov	r8, r1
 8016132:	2b00      	cmp	r3, #0
 8016134:	d044      	beq.n	80161c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8016136:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8016138:	f8ad 3014 	strh.w	r3, [sp, #20]
 801613c:	a805      	add	r0, sp, #20
 801613e:	f003 f9c7 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016142:	4605      	mov	r5, r0
 8016144:	b206      	sxth	r6, r0
 8016146:	a805      	add	r0, sp, #20
 8016148:	f003 f9fc 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801614c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8016150:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8016154:	4417      	add	r7, r2
 8016156:	b2bf      	uxth	r7, r7
 8016158:	2300      	movs	r3, #0
 801615a:	fa0f fe87 	sxth.w	lr, r7
 801615e:	459e      	cmp	lr, r3
 8016160:	fa0f fc80 	sxth.w	ip, r0
 8016164:	9306      	str	r3, [sp, #24]
 8016166:	dd2d      	ble.n	80161c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016168:	4296      	cmp	r6, r2
 801616a:	dd2b      	ble.n	80161c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801616c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8016170:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8016174:	4419      	add	r1, r3
 8016176:	b289      	uxth	r1, r1
 8016178:	fa0f f881 	sxth.w	r8, r1
 801617c:	f1b8 0f00 	cmp.w	r8, #0
 8016180:	dd20      	ble.n	80161c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016182:	459c      	cmp	ip, r3
 8016184:	dd1e      	ble.n	80161c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016186:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801618a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801618e:	4576      	cmp	r6, lr
 8016190:	bfa8      	it	ge
 8016192:	463d      	movge	r5, r7
 8016194:	45c4      	cmp	ip, r8
 8016196:	bfa8      	it	ge
 8016198:	4608      	movge	r0, r1
 801619a:	1aad      	subs	r5, r5, r2
 801619c:	1ac0      	subs	r0, r0, r3
 801619e:	f8ad 501c 	strh.w	r5, [sp, #28]
 80161a2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80161a6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80161aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80161ae:	4b1f      	ldr	r3, [pc, #124]	; (801622c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	b953      	cbnz	r3, 80161ca <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80161b4:	4b1e      	ldr	r3, [pc, #120]	; (8016230 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80161b6:	4a1f      	ldr	r2, [pc, #124]	; (8016234 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80161b8:	481f      	ldr	r0, [pc, #124]	; (8016238 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80161ba:	2189      	movs	r1, #137	; 0x89
 80161bc:	f00e fe26 	bl	8024e0c <__assert_func>
 80161c0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80161c2:	e7b9      	b.n	8016138 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80161c4:	2300      	movs	r3, #0
 80161c6:	9307      	str	r3, [sp, #28]
 80161c8:	e7f1      	b.n	80161ae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80161ca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80161ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d026      	beq.n	8016224 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80161d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	dd22      	ble.n	8016224 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80161de:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	dd1e      	ble.n	8016224 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80161e6:	2300      	movs	r3, #0
 80161e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80161ec:	6823      	ldr	r3, [r4, #0]
 80161ee:	a908      	add	r1, sp, #32
 80161f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161f2:	4620      	mov	r0, r4
 80161f4:	4798      	blx	r3
 80161f6:	4b11      	ldr	r3, [pc, #68]	; (801623c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80161fe:	b10a      	cbz	r2, 8016204 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016200:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016202:	b900      	cbnz	r0, 8016206 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8016204:	6898      	ldr	r0, [r3, #8]
 8016206:	6801      	ldr	r1, [r0, #0]
 8016208:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801620c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016210:	2501      	movs	r5, #1
 8016212:	9502      	str	r5, [sp, #8]
 8016214:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8016218:	9401      	str	r4, [sp, #4]
 801621a:	ac06      	add	r4, sp, #24
 801621c:	9400      	str	r4, [sp, #0]
 801621e:	688c      	ldr	r4, [r1, #8]
 8016220:	a905      	add	r1, sp, #20
 8016222:	47a0      	blx	r4
 8016224:	b00a      	add	sp, #40	; 0x28
 8016226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801622a:	bf00      	nop
 801622c:	20001400 	.word	0x20001400
 8016230:	0805349c 	.word	0x0805349c
 8016234:	08053570 	.word	0x08053570
 8016238:	080534d8 	.word	0x080534d8
 801623c:	20001358 	.word	0x20001358

08016240 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	4605      	mov	r5, r0
 8016244:	880b      	ldrh	r3, [r1, #0]
 8016246:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016248:	f855 3b26 	ldr.w	r3, [r5], #38
 801624c:	4604      	mov	r4, r0
 801624e:	4628      	mov	r0, r5
 8016250:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8016252:	f003 f93d 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016256:	b201      	sxth	r1, r0
 8016258:	4620      	mov	r0, r4
 801625a:	47b0      	blx	r6
 801625c:	6823      	ldr	r3, [r4, #0]
 801625e:	4628      	mov	r0, r5
 8016260:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8016262:	f003 f96f 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016266:	4633      	mov	r3, r6
 8016268:	b201      	sxth	r1, r0
 801626a:	4620      	mov	r0, r4
 801626c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016270:	4718      	bx	r3

08016272 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016272:	b510      	push	{r4, lr}
 8016274:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016278:	2bff      	cmp	r3, #255	; 0xff
 801627a:	4604      	mov	r4, r0
 801627c:	d006      	beq.n	801628c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801627e:	2300      	movs	r3, #0
 8016280:	8003      	strh	r3, [r0, #0]
 8016282:	8043      	strh	r3, [r0, #2]
 8016284:	8083      	strh	r3, [r0, #4]
 8016286:	80c3      	strh	r3, [r0, #6]
 8016288:	4620      	mov	r0, r4
 801628a:	bd10      	pop	{r4, pc}
 801628c:	3126      	adds	r1, #38	; 0x26
 801628e:	f003 f993 	bl	80195b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016292:	e7f9      	b.n	8016288 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08016294 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016298:	4604      	mov	r4, r0
 801629a:	b088      	sub	sp, #32
 801629c:	f854 3b26 	ldr.w	r3, [r4], #38
 80162a0:	2500      	movs	r5, #0
 80162a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162a4:	460f      	mov	r7, r1
 80162a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80162aa:	a904      	add	r1, sp, #16
 80162ac:	4606      	mov	r6, r0
 80162ae:	4798      	blx	r3
 80162b0:	4620      	mov	r0, r4
 80162b2:	f003 f90d 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80162b6:	4680      	mov	r8, r0
 80162b8:	4620      	mov	r0, r4
 80162ba:	f003 f943 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80162be:	9506      	str	r5, [sp, #24]
 80162c0:	ad06      	add	r5, sp, #24
 80162c2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80162c6:	4639      	mov	r1, r7
 80162c8:	4628      	mov	r0, r5
 80162ca:	f8ad 801c 	strh.w	r8, [sp, #28]
 80162ce:	f7fe f9d5 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80162d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	dd19      	ble.n	801630e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80162da:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	dd15      	ble.n	801630e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80162e2:	4b0c      	ldr	r3, [pc, #48]	; (8016314 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80162ea:	b10a      	cbz	r2, 80162f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80162ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80162ee:	b900      	cbnz	r0, 80162f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80162f0:	6898      	ldr	r0, [r3, #8]
 80162f2:	6801      	ldr	r1, [r0, #0]
 80162f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80162f8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80162fc:	2701      	movs	r7, #1
 80162fe:	9702      	str	r7, [sp, #8]
 8016300:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8016304:	e9cd 5600 	strd	r5, r6, [sp]
 8016308:	688d      	ldr	r5, [r1, #8]
 801630a:	4621      	mov	r1, r4
 801630c:	47a8      	blx	r5
 801630e:	b008      	add	sp, #32
 8016310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016314:	20001358 	.word	0x20001358

08016318 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8016318:	b510      	push	{r4, lr}
 801631a:	4604      	mov	r4, r0
 801631c:	f7ff feeb 	bl	80160f6 <_ZNK8touchgfx6Button12getSolidRectEv>
 8016320:	4620      	mov	r0, r4
 8016322:	bd10      	pop	{r4, pc}

08016324 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8016324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016328:	4604      	mov	r4, r0
 801632a:	b08c      	sub	sp, #48	; 0x30
 801632c:	4688      	mov	r8, r1
 801632e:	f7ff fef9 	bl	8016124 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8016332:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016338:	4293      	cmp	r3, r2
 801633a:	f000 8099 	beq.w	8016470 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 801633e:	4e54      	ldr	r6, [pc, #336]	; (8016490 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8016340:	6832      	ldr	r2, [r6, #0]
 8016342:	b92a      	cbnz	r2, 8016350 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8016344:	4b53      	ldr	r3, [pc, #332]	; (8016494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8016346:	4a54      	ldr	r2, [pc, #336]	; (8016498 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8016348:	21b1      	movs	r1, #177	; 0xb1
 801634a:	4854      	ldr	r0, [pc, #336]	; (801649c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801634c:	f00e fd5e 	bl	8024e0c <__assert_func>
 8016350:	4d53      	ldr	r5, [pc, #332]	; (80164a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8016352:	8829      	ldrh	r1, [r5, #0]
 8016354:	4299      	cmp	r1, r3
 8016356:	d803      	bhi.n	8016360 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8016358:	4b52      	ldr	r3, [pc, #328]	; (80164a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801635a:	4a4f      	ldr	r2, [pc, #316]	; (8016498 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801635c:	21b2      	movs	r1, #178	; 0xb2
 801635e:	e7f4      	b.n	801634a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8016360:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016364:	4b50      	ldr	r3, [pc, #320]	; (80164a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 8016366:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016370:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016374:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016378:	2300      	movs	r3, #0
 801637a:	f1be 0f01 	cmp.w	lr, #1
 801637e:	9303      	str	r3, [sp, #12]
 8016380:	b208      	sxth	r0, r1
 8016382:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016386:	f04f 0c02 	mov.w	ip, #2
 801638a:	d074      	beq.n	8016476 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 801638c:	f1be 0f03 	cmp.w	lr, #3
 8016390:	d071      	beq.n	8016476 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 8016392:	1a52      	subs	r2, r2, r1
 8016394:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016398:	fb92 f2fc 	sdiv	r2, r2, ip
 801639c:	f8ad 0012 	strh.w	r0, [sp, #18]
 80163a0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80163a4:	f10d 090c 	add.w	r9, sp, #12
 80163a8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80163ac:	f10d 0a14 	add.w	sl, sp, #20
 80163b0:	e88a 0003 	stmia.w	sl, {r0, r1}
 80163b4:	4641      	mov	r1, r8
 80163b6:	4650      	mov	r0, sl
 80163b8:	f7fe f960 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80163bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	dd55      	ble.n	8016470 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80163c4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	dd51      	ble.n	8016470 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80163cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80163d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80163d4:	1a9b      	subs	r3, r3, r2
 80163d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80163da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80163de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80163e2:	1a9b      	subs	r3, r3, r2
 80163e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163e8:	6823      	ldr	r3, [r4, #0]
 80163ea:	4649      	mov	r1, r9
 80163ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ee:	4620      	mov	r0, r4
 80163f0:	4798      	blx	r3
 80163f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d047      	beq.n	801648a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x166>
 80163fa:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80163fe:	6833      	ldr	r3, [r6, #0]
 8016400:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8016404:	2b00      	cmp	r3, #0
 8016406:	d09d      	beq.n	8016344 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8016408:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801640a:	8828      	ldrh	r0, [r5, #0]
 801640c:	4288      	cmp	r0, r1
 801640e:	d9a3      	bls.n	8016358 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8016410:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8016414:	6812      	ldr	r2, [r2, #0]
 8016416:	785b      	ldrb	r3, [r3, #1]
 8016418:	9209      	str	r2, [sp, #36]	; 0x24
 801641a:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801641e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016422:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016426:	2300      	movs	r3, #0
 8016428:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801642c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8016430:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016434:	4b1d      	ldr	r3, [pc, #116]	; (80164ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 8016436:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	9707      	str	r7, [sp, #28]
 801643e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016442:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016446:	f88d 5020 	strb.w	r5, [sp, #32]
 801644a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801644e:	b10a      	cbz	r2, 8016454 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x130>
 8016450:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016452:	b904      	cbnz	r4, 8016456 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8016454:	689c      	ldr	r4, [r3, #8]
 8016456:	4b16      	ldr	r3, [pc, #88]	; (80164b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8016458:	6818      	ldr	r0, [r3, #0]
 801645a:	f7fb fb13 	bl	8011a84 <_ZNK8touchgfx5Texts7getTextEt>
 801645e:	ab07      	add	r3, sp, #28
 8016460:	9001      	str	r0, [sp, #4]
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016468:	4653      	mov	r3, sl
 801646a:	4620      	mov	r0, r4
 801646c:	f7fb fa9b 	bl	80119a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016470:	b00c      	add	sp, #48	; 0x30
 8016472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016476:	1a5b      	subs	r3, r3, r1
 8016478:	f8ad 0010 	strh.w	r0, [sp, #16]
 801647c:	fb93 f3fc 	sdiv	r3, r3, ip
 8016480:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016484:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016488:	e78c      	b.n	80163a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x80>
 801648a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801648e:	e7b6      	b.n	80163fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xda>
 8016490:	200013c8 	.word	0x200013c8
 8016494:	080532c8 	.word	0x080532c8
 8016498:	08053680 	.word	0x08053680
 801649c:	0805330a 	.word	0x0805330a
 80164a0:	200013cc 	.word	0x200013cc
 80164a4:	08053333 	.word	0x08053333
 80164a8:	200013d0 	.word	0x200013d0
 80164ac:	20001358 	.word	0x20001358
 80164b0:	200013d4 	.word	0x200013d4

080164b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80164b4:	b510      	push	{r4, lr}
 80164b6:	2101      	movs	r1, #1
 80164b8:	4c12      	ldr	r4, [pc, #72]	; (8016504 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 80164ba:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80164be:	2200      	movs	r2, #0
 80164c0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80164c4:	6004      	str	r4, [r0, #0]
 80164c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80164ca:	4c0f      	ldr	r4, [pc, #60]	; (8016508 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80164cc:	8082      	strh	r2, [r0, #4]
 80164ce:	80c2      	strh	r2, [r0, #6]
 80164d0:	8102      	strh	r2, [r0, #8]
 80164d2:	8142      	strh	r2, [r0, #10]
 80164d4:	8182      	strh	r2, [r0, #12]
 80164d6:	81c2      	strh	r2, [r0, #14]
 80164d8:	8202      	strh	r2, [r0, #16]
 80164da:	8242      	strh	r2, [r0, #18]
 80164dc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80164e0:	61c2      	str	r2, [r0, #28]
 80164e2:	6282      	str	r2, [r0, #40]	; 0x28
 80164e4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80164e8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80164ea:	8601      	strh	r1, [r0, #48]	; 0x30
 80164ec:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80164f0:	6344      	str	r4, [r0, #52]	; 0x34
 80164f2:	8701      	strh	r1, [r0, #56]	; 0x38
 80164f4:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80164f8:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80164fc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8016500:	bd10      	pop	{r4, pc}
 8016502:	bf00      	nop
 8016504:	08053618 	.word	0x08053618
 8016508:	0805121c 	.word	0x0805121c

0801650c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801650c:	2000      	movs	r0, #0
 801650e:	4770      	bx	lr

08016510 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016514:	b091      	sub	sp, #68	; 0x44
 8016516:	4699      	mov	r9, r3
 8016518:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801651c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801651e:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8016522:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016526:	4680      	mov	r8, r0
 8016528:	4617      	mov	r7, r2
 801652a:	a80e      	add	r0, sp, #56	; 0x38
 801652c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8016530:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016534:	2500      	movs	r5, #0
 8016536:	910d      	str	r1, [sp, #52]	; 0x34
 8016538:	950e      	str	r5, [sp, #56]	; 0x38
 801653a:	f000 fe3b 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801653e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016540:	f8d9 6000 	ldr.w	r6, [r9]
 8016544:	6818      	ldr	r0, [r3, #0]
 8016546:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016548:	f9b4 b000 	ldrsh.w	fp, [r4]
 801654c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016550:	eb02 0c06 	add.w	ip, r2, r6
 8016554:	1b80      	subs	r0, r0, r6
 8016556:	ebab 0e0c 	sub.w	lr, fp, ip
 801655a:	4570      	cmp	r0, lr
 801655c:	f340 80bd 	ble.w	80166da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8016560:	88a1      	ldrh	r1, [r4, #4]
 8016562:	4459      	add	r1, fp
 8016564:	b209      	sxth	r1, r1
 8016566:	458c      	cmp	ip, r1
 8016568:	f300 80b7 	bgt.w	80166da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801656c:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8016570:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8016574:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8016578:	edd9 6a07 	vldr	s13, [r9, #28]
 801657c:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8016580:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8016584:	4283      	cmp	r3, r0
 8016586:	bfa8      	it	ge
 8016588:	4603      	movge	r3, r0
 801658a:	ee07 3a90 	vmov	s15, r3
 801658e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016592:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016596:	ee25 4a04 	vmul.f32	s8, s10, s8
 801659a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801659e:	ee25 5a27 	vmul.f32	s10, s10, s15
 80165a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80165aa:	45e3      	cmp	fp, ip
 80165ac:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80165b0:	ee32 1a05 	vadd.f32	s2, s4, s10
 80165b4:	ee36 0a84 	vadd.f32	s0, s13, s8
 80165b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80165bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80165c0:	f340 808e 	ble.w	80166e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 80165c4:	fb9e f5f3 	sdiv	r5, lr, r3
 80165c8:	ee07 5a10 	vmov	s14, r5
 80165cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165d0:	2d00      	cmp	r5, #0
 80165d2:	fb03 e415 	mls	r4, r3, r5, lr
 80165d6:	eea7 0a04 	vfma.f32	s0, s14, s8
 80165da:	eee7 0a24 	vfma.f32	s1, s14, s9
 80165de:	eea7 1a05 	vfma.f32	s2, s14, s10
 80165e2:	dd13      	ble.n	801660c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80165e4:	ee70 6a44 	vsub.f32	s13, s0, s8
 80165e8:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80165ec:	eef5 6a40 	vcmp.f32	s13, #0.0
 80165f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f4:	bf18      	it	ne
 80165f6:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80165fa:	ee31 2a45 	vsub.f32	s4, s2, s10
 80165fe:	bf08      	it	eq
 8016600:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016604:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016608:	ee22 2a07 	vmul.f32	s4, s4, s14
 801660c:	fb05 f703 	mul.w	r7, r5, r3
 8016610:	1bc0      	subs	r0, r0, r7
 8016612:	443e      	add	r6, r7
 8016614:	1997      	adds	r7, r2, r6
 8016616:	4407      	add	r7, r0
 8016618:	42b9      	cmp	r1, r7
 801661a:	bfbc      	itt	lt
 801661c:	1a88      	sublt	r0, r1, r2
 801661e:	1b80      	sublt	r0, r0, r6
 8016620:	2800      	cmp	r0, #0
 8016622:	dd5a      	ble.n	80166da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8016624:	fb90 f1f3 	sdiv	r1, r0, r3
 8016628:	fb03 0211 	mls	r2, r3, r1, r0
 801662c:	b90a      	cbnz	r2, 8016632 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 801662e:	3901      	subs	r1, #1
 8016630:	461a      	mov	r2, r3
 8016632:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016636:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801663a:	44a4      	add	ip, r4
 801663c:	fb03 c505 	mla	r5, r3, r5, ip
 8016640:	2900      	cmp	r1, #0
 8016642:	bfcc      	ite	gt
 8016644:	469e      	movgt	lr, r3
 8016646:	4696      	movle	lr, r2
 8016648:	eef0 6a42 	vmov.f32	s13, s4
 801664c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016650:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016654:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016658:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801665c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016660:	eeb0 7a61 	vmov.f32	s14, s3
 8016664:	ee17 0a90 	vmov	r0, s15
 8016668:	ee73 7a42 	vsub.f32	s15, s6, s4
 801666c:	fb90 f6f3 	sdiv	r6, r0, r3
 8016670:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016674:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016678:	ee17 0a90 	vmov	r0, s15
 801667c:	fb90 f7f3 	sdiv	r7, r0, r3
 8016680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016684:	900c      	str	r0, [sp, #48]	; 0x30
 8016686:	f8d0 8000 	ldr.w	r8, [r0]
 801668a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801668c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016690:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8016694:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016698:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801669c:	f8cd a020 	str.w	sl, [sp, #32]
 80166a0:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80166a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80166a6:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80166aa:	9603      	str	r6, [sp, #12]
 80166ac:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80166b0:	ee16 0a90 	vmov	r0, s13
 80166b4:	fb07 0704 	mla	r7, r7, r4, r0
 80166b8:	ee17 0a10 	vmov	r0, s14
 80166bc:	fb06 0604 	mla	r6, r6, r4, r0
 80166c0:	e9cd 3600 	strd	r3, r6, [sp]
 80166c4:	44ca      	add	sl, r9
 80166c6:	f8cd a01c 	str.w	sl, [sp, #28]
 80166ca:	9506      	str	r5, [sp, #24]
 80166cc:	9702      	str	r7, [sp, #8]
 80166ce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80166d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80166d4:	ebae 0304 	sub.w	r3, lr, r4
 80166d8:	47a8      	blx	r5
 80166da:	b011      	add	sp, #68	; 0x44
 80166dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e0:	462c      	mov	r4, r5
 80166e2:	e797      	b.n	8016614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

080166e4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80166e4:	b570      	push	{r4, r5, r6, lr}
 80166e6:	4604      	mov	r4, r0
 80166e8:	2500      	movs	r5, #0
 80166ea:	7223      	strb	r3, [r4, #8]
 80166ec:	9804      	ldr	r0, [sp, #16]
 80166ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80166f2:	8025      	strh	r5, [r4, #0]
 80166f4:	6061      	str	r1, [r4, #4]
 80166f6:	7263      	strb	r3, [r4, #9]
 80166f8:	60e0      	str	r0, [r4, #12]
 80166fa:	8222      	strh	r2, [r4, #16]
 80166fc:	8265      	strh	r5, [r4, #18]
 80166fe:	82a5      	strh	r5, [r4, #20]
 8016700:	82e5      	strh	r5, [r4, #22]
 8016702:	8325      	strh	r5, [r4, #24]
 8016704:	8365      	strh	r5, [r4, #26]
 8016706:	83a5      	strh	r5, [r4, #28]
 8016708:	77a5      	strb	r5, [r4, #30]
 801670a:	6803      	ldr	r3, [r0, #0]
 801670c:	695b      	ldr	r3, [r3, #20]
 801670e:	4798      	blx	r3
 8016710:	4606      	mov	r6, r0
 8016712:	b1f8      	cbz	r0, 8016754 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016714:	68e0      	ldr	r0, [r4, #12]
 8016716:	6803      	ldr	r3, [r0, #0]
 8016718:	4631      	mov	r1, r6
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	4798      	blx	r3
 801671e:	7b43      	ldrb	r3, [r0, #13]
 8016720:	7a82      	ldrb	r2, [r0, #10]
 8016722:	005b      	lsls	r3, r3, #1
 8016724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016728:	4313      	orrs	r3, r2
 801672a:	83a3      	strh	r3, [r4, #28]
 801672c:	7a63      	ldrb	r3, [r4, #9]
 801672e:	2b04      	cmp	r3, #4
 8016730:	4605      	mov	r5, r0
 8016732:	d10f      	bne.n	8016754 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016734:	68e0      	ldr	r0, [r4, #12]
 8016736:	6803      	ldr	r3, [r0, #0]
 8016738:	462a      	mov	r2, r5
 801673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801673c:	4631      	mov	r1, r6
 801673e:	4798      	blx	r3
 8016740:	7b6b      	ldrb	r3, [r5, #13]
 8016742:	005b      	lsls	r3, r3, #1
 8016744:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016748:	7aab      	ldrb	r3, [r5, #10]
 801674a:	4313      	orrs	r3, r2
 801674c:	4418      	add	r0, r3
 801674e:	8ba3      	ldrh	r3, [r4, #28]
 8016750:	4418      	add	r0, r3
 8016752:	83a0      	strh	r0, [r4, #28]
 8016754:	4620      	mov	r0, r4
 8016756:	bd70      	pop	{r4, r5, r6, pc}

08016758 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	2400      	movs	r4, #0
 801675e:	b085      	sub	sp, #20
 8016760:	4681      	mov	r9, r0
 8016762:	4688      	mov	r8, r1
 8016764:	4692      	mov	sl, r2
 8016766:	469b      	mov	fp, r3
 8016768:	4627      	mov	r7, r4
 801676a:	4625      	mov	r5, r4
 801676c:	4626      	mov	r6, r4
 801676e:	4554      	cmp	r4, sl
 8016770:	da2a      	bge.n	80167c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016772:	2300      	movs	r3, #0
 8016774:	9303      	str	r3, [sp, #12]
 8016776:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801677a:	429d      	cmp	r5, r3
 801677c:	d004      	beq.n	8016788 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801677e:	f242 030b 	movw	r3, #8203	; 0x200b
 8016782:	429d      	cmp	r5, r3
 8016784:	bf18      	it	ne
 8016786:	462f      	movne	r7, r5
 8016788:	ab03      	add	r3, sp, #12
 801678a:	4642      	mov	r2, r8
 801678c:	4659      	mov	r1, fp
 801678e:	4648      	mov	r0, r9
 8016790:	f002 fb92 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016794:	4605      	mov	r5, r0
 8016796:	b1b8      	cbz	r0, 80167c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016798:	280a      	cmp	r0, #10
 801679a:	d015      	beq.n	80167c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801679c:	9a03      	ldr	r2, [sp, #12]
 801679e:	b18a      	cbz	r2, 80167c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80167a0:	7b50      	ldrb	r0, [r2, #13]
 80167a2:	7a93      	ldrb	r3, [r2, #10]
 80167a4:	8895      	ldrh	r5, [r2, #4]
 80167a6:	0040      	lsls	r0, r0, #1
 80167a8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80167ac:	4303      	orrs	r3, r0
 80167ae:	9301      	str	r3, [sp, #4]
 80167b0:	f8d8 3000 	ldr.w	r3, [r8]
 80167b4:	4639      	mov	r1, r7
 80167b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167b8:	4640      	mov	r0, r8
 80167ba:	4798      	blx	r3
 80167bc:	9b01      	ldr	r3, [sp, #4]
 80167be:	4418      	add	r0, r3
 80167c0:	4406      	add	r6, r0
 80167c2:	b2b6      	uxth	r6, r6
 80167c4:	3401      	adds	r4, #1
 80167c6:	e7d2      	b.n	801676e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80167c8:	4630      	mov	r0, r6
 80167ca:	b005      	add	sp, #20
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80167d0:	2a02      	cmp	r2, #2
 80167d2:	b530      	push	{r4, r5, lr}
 80167d4:	d011      	beq.n	80167fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80167d6:	2a03      	cmp	r2, #3
 80167d8:	d01c      	beq.n	8016814 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80167da:	2a01      	cmp	r2, #1
 80167dc:	d10c      	bne.n	80167f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80167de:	888b      	ldrh	r3, [r1, #4]
 80167e0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80167e4:	8801      	ldrh	r1, [r0, #0]
 80167e6:	8844      	ldrh	r4, [r0, #2]
 80167e8:	8004      	strh	r4, [r0, #0]
 80167ea:	1a9b      	subs	r3, r3, r2
 80167ec:	1a5b      	subs	r3, r3, r1
 80167ee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80167f2:	8043      	strh	r3, [r0, #2]
 80167f4:	8081      	strh	r1, [r0, #4]
 80167f6:	80c2      	strh	r2, [r0, #6]
 80167f8:	bd30      	pop	{r4, r5, pc}
 80167fa:	88cb      	ldrh	r3, [r1, #6]
 80167fc:	88c2      	ldrh	r2, [r0, #6]
 80167fe:	1a9b      	subs	r3, r3, r2
 8016800:	8842      	ldrh	r2, [r0, #2]
 8016802:	1a9b      	subs	r3, r3, r2
 8016804:	888a      	ldrh	r2, [r1, #4]
 8016806:	8881      	ldrh	r1, [r0, #4]
 8016808:	8043      	strh	r3, [r0, #2]
 801680a:	1a52      	subs	r2, r2, r1
 801680c:	8801      	ldrh	r1, [r0, #0]
 801680e:	1a52      	subs	r2, r2, r1
 8016810:	8002      	strh	r2, [r0, #0]
 8016812:	e7f1      	b.n	80167f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016814:	88cb      	ldrh	r3, [r1, #6]
 8016816:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801681a:	8841      	ldrh	r1, [r0, #2]
 801681c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016820:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016824:	8045      	strh	r5, [r0, #2]
 8016826:	1a9b      	subs	r3, r3, r2
 8016828:	1a5b      	subs	r3, r3, r1
 801682a:	8003      	strh	r3, [r0, #0]
 801682c:	8082      	strh	r2, [r0, #4]
 801682e:	80c4      	strh	r4, [r0, #6]
 8016830:	e7e2      	b.n	80167f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016836:	b09f      	sub	sp, #124	; 0x7c
 8016838:	9116      	str	r1, [sp, #88]	; 0x58
 801683a:	9317      	str	r3, [sp, #92]	; 0x5c
 801683c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801683e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016840:	8809      	ldrh	r1, [r1, #0]
 8016842:	889b      	ldrh	r3, [r3, #4]
 8016844:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016848:	9212      	str	r2, [sp, #72]	; 0x48
 801684a:	440b      	add	r3, r1
 801684c:	b21b      	sxth	r3, r3
 801684e:	9310      	str	r3, [sp, #64]	; 0x40
 8016850:	f8d8 3000 	ldr.w	r3, [r8]
 8016854:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8016858:	7a59      	ldrb	r1, [r3, #9]
 801685a:	7a1b      	ldrb	r3, [r3, #8]
 801685c:	9315      	str	r3, [sp, #84]	; 0x54
 801685e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016860:	9011      	str	r0, [sp, #68]	; 0x44
 8016862:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016866:	9114      	str	r1, [sp, #80]	; 0x50
 8016868:	f9b3 5000 	ldrsh.w	r5, [r3]
 801686c:	2a00      	cmp	r2, #0
 801686e:	d067      	beq.n	8016940 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8016870:	f898 3010 	ldrb.w	r3, [r8, #16]
 8016874:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016876:	2b04      	cmp	r3, #4
 8016878:	bf14      	ite	ne
 801687a:	2301      	movne	r3, #1
 801687c:	2302      	moveq	r3, #2
 801687e:	4413      	add	r3, r2
 8016880:	f04f 0900 	mov.w	r9, #0
 8016884:	930f      	str	r3, [sp, #60]	; 0x3c
 8016886:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801688a:	464c      	mov	r4, r9
 801688c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8016890:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016894:	4293      	cmp	r3, r2
 8016896:	f280 808c 	bge.w	80169b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801689a:	2300      	movs	r3, #0
 801689c:	931c      	str	r3, [sp, #112]	; 0x70
 801689e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80168a2:	429c      	cmp	r4, r3
 80168a4:	d006      	beq.n	80168b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80168a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168a8:	f242 020b 	movw	r2, #8203	; 0x200b
 80168ac:	4294      	cmp	r4, r2
 80168ae:	bf18      	it	ne
 80168b0:	4623      	movne	r3, r4
 80168b2:	930d      	str	r3, [sp, #52]	; 0x34
 80168b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168b6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80168b8:	f8d8 2000 	ldr.w	r2, [r8]
 80168bc:	428b      	cmp	r3, r1
 80168be:	db41      	blt.n	8016944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80168c0:	6813      	ldr	r3, [r2, #0]
 80168c2:	4610      	mov	r0, r2
 80168c4:	695b      	ldr	r3, [r3, #20]
 80168c6:	4798      	blx	r3
 80168c8:	4604      	mov	r4, r0
 80168ca:	f8d8 0000 	ldr.w	r0, [r8]
 80168ce:	6803      	ldr	r3, [r0, #0]
 80168d0:	aa1d      	add	r2, sp, #116	; 0x74
 80168d2:	689e      	ldr	r6, [r3, #8]
 80168d4:	4621      	mov	r1, r4
 80168d6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80168da:	47b0      	blx	r6
 80168dc:	901c      	str	r0, [sp, #112]	; 0x70
 80168de:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80168e2:	429c      	cmp	r4, r3
 80168e4:	f000 80e9 	beq.w	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80168e8:	f242 030b 	movw	r3, #8203	; 0x200b
 80168ec:	429c      	cmp	r4, r3
 80168ee:	f000 80e4 	beq.w	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80168f2:	2c00      	cmp	r4, #0
 80168f4:	f000 80f6 	beq.w	8016ae4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80168f8:	2c0a      	cmp	r4, #10
 80168fa:	d060      	beq.n	80169be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80168fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80168fe:	b36a      	cbz	r2, 801695c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8016900:	8894      	ldrh	r4, [r2, #4]
 8016902:	f1bb 0f00 	cmp.w	fp, #0
 8016906:	d03b      	beq.n	8016980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8016908:	f892 900d 	ldrb.w	r9, [r2, #13]
 801690c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8016910:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8016914:	f892 900a 	ldrb.w	r9, [r2, #10]
 8016918:	f1bb 0f01 	cmp.w	fp, #1
 801691c:	ea49 0903 	orr.w	r9, r9, r3
 8016920:	d134      	bne.n	801698c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8016922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016924:	eba5 0509 	sub.w	r5, r5, r9
 8016928:	2b00      	cmp	r3, #0
 801692a:	d14f      	bne.n	80169cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801692c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801692e:	eb09 0305 	add.w	r3, r9, r5
 8016932:	4413      	add	r3, r2
 8016934:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016936:	f9b2 2000 	ldrsh.w	r2, [r2]
 801693a:	4293      	cmp	r3, r2
 801693c:	da51      	bge.n	80169e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801693e:	e038      	b.n	80169b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8016940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016942:	e79d      	b.n	8016880 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8016944:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016948:	9301      	str	r3, [sp, #4]
 801694a:	ab1d      	add	r3, sp, #116	; 0x74
 801694c:	9300      	str	r3, [sp, #0]
 801694e:	4659      	mov	r1, fp
 8016950:	ab1c      	add	r3, sp, #112	; 0x70
 8016952:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016954:	f002 fb08 	bl	8018f68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016958:	4604      	mov	r4, r0
 801695a:	e7c0      	b.n	80168de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801695c:	f8d8 0000 	ldr.w	r0, [r8]
 8016960:	6803      	ldr	r3, [r0, #0]
 8016962:	691b      	ldr	r3, [r3, #16]
 8016964:	4798      	blx	r3
 8016966:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801696a:	4298      	cmp	r0, r3
 801696c:	f000 80a5 	beq.w	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016970:	f242 030b 	movw	r3, #8203	; 0x200b
 8016974:	4298      	cmp	r0, r3
 8016976:	f000 80a0 	beq.w	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801697a:	f1bb 0f00 	cmp.w	fp, #0
 801697e:	d100      	bne.n	8016982 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016980:	444d      	add	r5, r9
 8016982:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016984:	2a00      	cmp	r2, #0
 8016986:	d1bf      	bne.n	8016908 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8016988:	4691      	mov	r9, r2
 801698a:	e096      	b.n	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801698c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801698e:	2b00      	cmp	r3, #0
 8016990:	f000 80aa 	beq.w	8016ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8016994:	f1bb 0f00 	cmp.w	fp, #0
 8016998:	d118      	bne.n	80169cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801699a:	f8d8 0000 	ldr.w	r0, [r8]
 801699e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80169a0:	6803      	ldr	r3, [r0, #0]
 80169a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169a4:	4798      	blx	r3
 80169a6:	4405      	add	r5, r0
 80169a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80169ac:	1aeb      	subs	r3, r5, r3
 80169ae:	4293      	cmp	r3, r2
 80169b0:	dd17      	ble.n	80169e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80169b2:	2c00      	cmp	r4, #0
 80169b4:	f000 8096 	beq.w	8016ae4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80169b8:	2c0a      	cmp	r4, #10
 80169ba:	f040 8084 	bne.w	8016ac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80169be:	240a      	movs	r4, #10
 80169c0:	fab4 f084 	clz	r0, r4
 80169c4:	0940      	lsrs	r0, r0, #5
 80169c6:	b01f      	add	sp, #124	; 0x7c
 80169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169cc:	f8d8 0000 	ldr.w	r0, [r8]
 80169d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80169d2:	6803      	ldr	r3, [r0, #0]
 80169d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169d6:	4798      	blx	r3
 80169d8:	f1bb 0f01 	cmp.w	fp, #1
 80169dc:	eba5 0500 	sub.w	r5, r5, r0
 80169e0:	d0a4      	beq.n	801692c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80169e2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80169e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80169e6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80169ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80169ee:	7b43      	ldrb	r3, [r0, #13]
 80169f0:	015b      	lsls	r3, r3, #5
 80169f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80169f6:	7983      	ldrb	r3, [r0, #6]
 80169f8:	4429      	add	r1, r5
 80169fa:	4313      	orrs	r3, r2
 80169fc:	440b      	add	r3, r1
 80169fe:	42b3      	cmp	r3, r6
 8016a00:	db5b      	blt.n	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016a02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a04:	4299      	cmp	r1, r3
 8016a06:	da58      	bge.n	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016a08:	f8d8 0000 	ldr.w	r0, [r8]
 8016a0c:	6803      	ldr	r3, [r0, #0]
 8016a0e:	42ae      	cmp	r6, r5
 8016a10:	bfc8      	it	gt
 8016a12:	1b76      	subgt	r6, r6, r5
 8016a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a16:	bfcc      	ite	gt
 8016a18:	b2b6      	uxthgt	r6, r6
 8016a1a:	2600      	movle	r6, #0
 8016a1c:	4798      	blx	r3
 8016a1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016a20:	7b5a      	ldrb	r2, [r3, #13]
 8016a22:	00d1      	lsls	r1, r2, #3
 8016a24:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8016a28:	7a19      	ldrb	r1, [r3, #8]
 8016a2a:	4339      	orrs	r1, r7
 8016a2c:	0657      	lsls	r7, r2, #25
 8016a2e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016a30:	bf44      	itt	mi
 8016a32:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8016a36:	b209      	sxthmi	r1, r1
 8016a38:	19c7      	adds	r7, r0, r7
 8016a3a:	1a7f      	subs	r7, r7, r1
 8016a3c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016a3e:	b2bf      	uxth	r7, r7
 8016a40:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016a44:	fa0f fa87 	sxth.w	sl, r7
 8016a48:	4551      	cmp	r1, sl
 8016a4a:	dd3a      	ble.n	8016ac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016a4c:	0112      	lsls	r2, r2, #4
 8016a4e:	79d8      	ldrb	r0, [r3, #7]
 8016a50:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016a54:	4302      	orrs	r2, r0
 8016a56:	4492      	add	sl, r2
 8016a58:	4551      	cmp	r1, sl
 8016a5a:	dc2e      	bgt.n	8016aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8016a5c:	1bcf      	subs	r7, r1, r7
 8016a5e:	b2bf      	uxth	r7, r7
 8016a60:	468a      	mov	sl, r1
 8016a62:	9319      	str	r3, [sp, #100]	; 0x64
 8016a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a66:	f8d8 0000 	ldr.w	r0, [r8]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	6801      	ldr	r1, [r0, #0]
 8016a6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016a70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a74:	9218      	str	r2, [sp, #96]	; 0x60
 8016a76:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016a78:	4788      	blx	r1
 8016a7a:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016a7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016a80:	f898 100e 	ldrb.w	r1, [r8, #14]
 8016a84:	910a      	str	r1, [sp, #40]	; 0x28
 8016a86:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8016a8a:	9109      	str	r1, [sp, #36]	; 0x24
 8016a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016a8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016a92:	9305      	str	r3, [sp, #20]
 8016a94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016a96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a98:	9206      	str	r2, [sp, #24]
 8016a9a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016a9e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016aa2:	e9cd a601 	strd	sl, r6, [sp, #4]
 8016aa6:	442e      	add	r6, r5
 8016aa8:	b236      	sxth	r6, r6
 8016aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016aac:	9600      	str	r6, [sp, #0]
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016ab6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016ab8:	47b0      	blx	r6
 8016aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016abc:	3301      	adds	r3, #1
 8016abe:	930e      	str	r3, [sp, #56]	; 0x38
 8016ac0:	e6e6      	b.n	8016890 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8016ac2:	2700      	movs	r7, #0
 8016ac4:	e7cd      	b.n	8016a62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8016ac6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016ac8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016aca:	3501      	adds	r5, #1
 8016acc:	429d      	cmp	r5, r3
 8016ace:	f6bf af77 	bge.w	80169c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016ad2:	4659      	mov	r1, fp
 8016ad4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016ad6:	f7fa feb7 	bl	8011848 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016ada:	4604      	mov	r4, r0
 8016adc:	b110      	cbz	r0, 8016ae4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8016ade:	280a      	cmp	r0, #10
 8016ae0:	d1f2      	bne.n	8016ac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8016ae2:	e76c      	b.n	80169be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016ae4:	2400      	movs	r4, #0
 8016ae6:	e76b      	b.n	80169c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016ae8:	f1bb 0f00 	cmp.w	fp, #0
 8016aec:	f43f af5c 	beq.w	80169a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016af0:	e777      	b.n	80169e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08016af2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016af2:	b530      	push	{r4, r5, lr}
 8016af4:	8a44      	ldrh	r4, [r0, #18]
 8016af6:	8ac5      	ldrh	r5, [r0, #22]
 8016af8:	82c3      	strh	r3, [r0, #22]
 8016afa:	442c      	add	r4, r5
 8016afc:	1ae4      	subs	r4, r4, r3
 8016afe:	8244      	strh	r4, [r0, #18]
 8016b00:	8b03      	ldrh	r3, [r0, #24]
 8016b02:	8a84      	ldrh	r4, [r0, #20]
 8016b04:	4422      	add	r2, r4
 8016b06:	440c      	add	r4, r1
 8016b08:	1a59      	subs	r1, r3, r1
 8016b0a:	8342      	strh	r2, [r0, #26]
 8016b0c:	8284      	strh	r4, [r0, #20]
 8016b0e:	8301      	strh	r1, [r0, #24]
 8016b10:	bd30      	pop	{r4, r5, pc}

08016b12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b16:	7a43      	ldrb	r3, [r0, #9]
 8016b18:	1eda      	subs	r2, r3, #3
 8016b1a:	b087      	sub	sp, #28
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	b2d2      	uxtb	r2, r2
 8016b20:	460f      	mov	r7, r1
 8016b22:	2900      	cmp	r1, #0
 8016b24:	d036      	beq.n	8016b94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8016b26:	2a01      	cmp	r2, #1
 8016b28:	d932      	bls.n	8016b90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8016b2a:	1e58      	subs	r0, r3, #1
 8016b2c:	f1d0 0b00 	rsbs	fp, r0, #0
 8016b30:	eb4b 0b00 	adc.w	fp, fp, r0
 8016b34:	1e99      	subs	r1, r3, #2
 8016b36:	424b      	negs	r3, r1
 8016b38:	414b      	adcs	r3, r1
 8016b3a:	9303      	str	r3, [sp, #12]
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016b42:	2500      	movs	r5, #0
 8016b44:	8265      	strh	r5, [r4, #18]
 8016b46:	82a5      	strh	r5, [r4, #20]
 8016b48:	46a9      	mov	r9, r5
 8016b4a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8016b4e:	2300      	movs	r3, #0
 8016b50:	9305      	str	r3, [sp, #20]
 8016b52:	8823      	ldrh	r3, [r4, #0]
 8016b54:	2b20      	cmp	r3, #32
 8016b56:	d02b      	beq.n	8016bb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8016b58:	eba3 020a 	sub.w	r2, r3, sl
 8016b5c:	4256      	negs	r6, r2
 8016b5e:	4156      	adcs	r6, r2
 8016b60:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d004      	beq.n	8016b72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016b68:	4553      	cmp	r3, sl
 8016b6a:	bf16      	itet	ne
 8016b6c:	4699      	movne	r9, r3
 8016b6e:	2601      	moveq	r6, #1
 8016b70:	2600      	movne	r6, #0
 8016b72:	ab05      	add	r3, sp, #20
 8016b74:	68e2      	ldr	r2, [r4, #12]
 8016b76:	7a21      	ldrb	r1, [r4, #8]
 8016b78:	6860      	ldr	r0, [r4, #4]
 8016b7a:	f002 f99d 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b7e:	8020      	strh	r0, [r4, #0]
 8016b80:	b9c8      	cbnz	r0, 8016bb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8016b82:	8b22      	ldrh	r2, [r4, #24]
 8016b84:	2300      	movs	r3, #0
 8016b86:	4611      	mov	r1, r2
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f7ff ffb2 	bl	8016af2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016b8e:	e066      	b.n	8016c5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016b90:	468b      	mov	fp, r1
 8016b92:	e7cf      	b.n	8016b34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8016b94:	3b01      	subs	r3, #1
 8016b96:	2a01      	cmp	r2, #1
 8016b98:	bf8c      	ite	hi
 8016b9a:	2200      	movhi	r2, #0
 8016b9c:	2201      	movls	r2, #1
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	bf8c      	ite	hi
 8016ba2:	2300      	movhi	r3, #0
 8016ba4:	2301      	movls	r3, #1
 8016ba6:	9202      	str	r2, [sp, #8]
 8016ba8:	9301      	str	r3, [sp, #4]
 8016baa:	9103      	str	r1, [sp, #12]
 8016bac:	468b      	mov	fp, r1
 8016bae:	e7c8      	b.n	8016b42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8016bb0:	4699      	mov	r9, r3
 8016bb2:	2601      	movs	r6, #1
 8016bb4:	e7dd      	b.n	8016b72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016bb6:	8ae3      	ldrh	r3, [r4, #22]
 8016bb8:	280a      	cmp	r0, #10
 8016bba:	f103 0301 	add.w	r3, r3, #1
 8016bbe:	82e3      	strh	r3, [r4, #22]
 8016bc0:	d0df      	beq.n	8016b82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8016bc2:	9a05      	ldr	r2, [sp, #20]
 8016bc4:	bb42      	cbnz	r2, 8016c18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8016bc6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016bca:	4298      	cmp	r0, r3
 8016bcc:	d001      	beq.n	8016bd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016bce:	4550      	cmp	r0, sl
 8016bd0:	d1bd      	bne.n	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016bd2:	8823      	ldrh	r3, [r4, #0]
 8016bd4:	8b21      	ldrh	r1, [r4, #24]
 8016bd6:	2b20      	cmp	r3, #32
 8016bd8:	d001      	beq.n	8016bde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8016bda:	4553      	cmp	r3, sl
 8016bdc:	d131      	bne.n	8016c42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8016bde:	2e00      	cmp	r6, #0
 8016be0:	bf0a      	itet	eq
 8016be2:	460d      	moveq	r5, r1
 8016be4:	4630      	movne	r0, r6
 8016be6:	2001      	moveq	r0, #1
 8016be8:	440a      	add	r2, r1
 8016bea:	8aa3      	ldrh	r3, [r4, #20]
 8016bec:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016bf0:	b292      	uxth	r2, r2
 8016bf2:	8322      	strh	r2, [r4, #24]
 8016bf4:	4413      	add	r3, r2
 8016bf6:	2f00      	cmp	r7, #0
 8016bf8:	d03a      	beq.n	8016c70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8016bfa:	f1bb 0f00 	cmp.w	fp, #0
 8016bfe:	d102      	bne.n	8016c06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8016c00:	9903      	ldr	r1, [sp, #12]
 8016c02:	b301      	cbz	r1, 8016c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8016c04:	b1f8      	cbz	r0, 8016c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8016c06:	8ba1      	ldrh	r1, [r4, #28]
 8016c08:	4419      	add	r1, r3
 8016c0a:	458c      	cmp	ip, r1
 8016c0c:	da2a      	bge.n	8016c64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016c0e:	8a61      	ldrh	r1, [r4, #18]
 8016c10:	b341      	cbz	r1, 8016c64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016c12:	4563      	cmp	r3, ip
 8016c14:	dd9b      	ble.n	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c16:	e01c      	b.n	8016c52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8016c18:	8893      	ldrh	r3, [r2, #4]
 8016c1a:	8023      	strh	r3, [r4, #0]
 8016c1c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8016c20:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016c24:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8016c28:	f892 800a 	ldrb.w	r8, [r2, #10]
 8016c2c:	ea48 0800 	orr.w	r8, r8, r0
 8016c30:	68e0      	ldr	r0, [r4, #12]
 8016c32:	6803      	ldr	r3, [r0, #0]
 8016c34:	4649      	mov	r1, r9
 8016c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c38:	4798      	blx	r3
 8016c3a:	eb08 0200 	add.w	r2, r8, r0
 8016c3e:	b292      	uxth	r2, r2
 8016c40:	e7c7      	b.n	8016bd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016c42:	2000      	movs	r0, #0
 8016c44:	e7d0      	b.n	8016be8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8016c46:	4563      	cmp	r3, ip
 8016c48:	dd81      	ble.n	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c4a:	8a63      	ldrh	r3, [r4, #18]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	f43f af7e 	beq.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c52:	2301      	movs	r3, #1
 8016c54:	77a3      	strb	r3, [r4, #30]
 8016c56:	8ba2      	ldrh	r2, [r4, #28]
 8016c58:	8b63      	ldrh	r3, [r4, #26]
 8016c5a:	4413      	add	r3, r2
 8016c5c:	8363      	strh	r3, [r4, #26]
 8016c5e:	b007      	add	sp, #28
 8016c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c64:	2300      	movs	r3, #0
 8016c66:	4611      	mov	r1, r2
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f7ff ff42 	bl	8016af2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016c6e:	e76e      	b.n	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c70:	4563      	cmp	r3, ip
 8016c72:	dd14      	ble.n	8016c9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8016c74:	9b02      	ldr	r3, [sp, #8]
 8016c76:	b113      	cbz	r3, 8016c7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8016c78:	2301      	movs	r3, #1
 8016c7a:	460a      	mov	r2, r1
 8016c7c:	e783      	b.n	8016b86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8016c7e:	9b01      	ldr	r3, [sp, #4]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f43f af64 	beq.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	f47f af61 	bne.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c8c:	b116      	cbz	r6, 8016c94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	462a      	mov	r2, r5
 8016c92:	e779      	b.n	8016b88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8016c94:	8a63      	ldrh	r3, [r4, #18]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	f43f af59 	beq.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016c9c:	e7df      	b.n	8016c5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f47f af55 	bne.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016ca4:	2e00      	cmp	r6, #0
 8016ca6:	f43f af52 	beq.w	8016b4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016caa:	2301      	movs	r3, #1
 8016cac:	462a      	mov	r2, r5
 8016cae:	e7db      	b.n	8016c68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08016cb0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016cb0:	b530      	push	{r4, r5, lr}
 8016cb2:	4605      	mov	r5, r0
 8016cb4:	b08b      	sub	sp, #44	; 0x2c
 8016cb6:	b191      	cbz	r1, 8016cde <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8016cb8:	e9cd 3100 	strd	r3, r1, [sp]
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	4601      	mov	r1, r0
 8016cc0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016cc4:	a802      	add	r0, sp, #8
 8016cc6:	f7ff fd0d 	bl	80166e4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016cca:	2401      	movs	r4, #1
 8016ccc:	2100      	movs	r1, #0
 8016cce:	a802      	add	r0, sp, #8
 8016cd0:	f7ff ff1f 	bl	8016b12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016cd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016cd8:	b163      	cbz	r3, 8016cf4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016cda:	3401      	adds	r4, #1
 8016cdc:	e7f6      	b.n	8016ccc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8016cde:	f002 f9e3 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ce2:	2401      	movs	r4, #1
 8016ce4:	280a      	cmp	r0, #10
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	bf08      	it	eq
 8016cea:	3401      	addeq	r4, #1
 8016cec:	f002 f9dc 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d1f7      	bne.n	8016ce4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016cf4:	b2a0      	uxth	r0, r4
 8016cf6:	b00b      	add	sp, #44	; 0x2c
 8016cf8:	bd30      	pop	{r4, r5, pc}

08016cfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfe:	b0db      	sub	sp, #364	; 0x16c
 8016d00:	4689      	mov	r9, r1
 8016d02:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8016d06:	900a      	str	r0, [sp, #40]	; 0x28
 8016d08:	461c      	mov	r4, r3
 8016d0a:	f1ba 0f00 	cmp.w	sl, #0
 8016d0e:	f000 80a5 	beq.w	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f000 80a1 	beq.w	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016d1a:	7ba3      	ldrb	r3, [r4, #14]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f000 809d 	beq.w	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016d22:	6810      	ldr	r0, [r2, #0]
 8016d24:	6851      	ldr	r1, [r2, #4]
 8016d26:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8016d2a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016d2e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016d32:	4643      	mov	r3, r8
 8016d34:	c303      	stmia	r3!, {r0, r1}
 8016d36:	2500      	movs	r5, #0
 8016d38:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8016d3c:	79a2      	ldrb	r2, [r4, #6]
 8016d3e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016d42:	a90e      	add	r1, sp, #56	; 0x38
 8016d44:	4640      	mov	r0, r8
 8016d46:	950e      	str	r5, [sp, #56]	; 0x38
 8016d48:	f7ff fd42 	bl	80167d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d4c:	a90e      	add	r1, sp, #56	; 0x38
 8016d4e:	4608      	mov	r0, r1
 8016d50:	79a2      	ldrb	r2, [r4, #6]
 8016d52:	af18      	add	r7, sp, #96	; 0x60
 8016d54:	f7ff fd3c 	bl	80167d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d58:	4638      	mov	r0, r7
 8016d5a:	f001 fd6e 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8016d5e:	6820      	ldr	r0, [r4, #0]
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d64:	4798      	blx	r3
 8016d66:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016d68:	4603      	mov	r3, r0
 8016d6a:	4651      	mov	r1, sl
 8016d6c:	4638      	mov	r0, r7
 8016d6e:	f001 fda9 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016d72:	6820      	ldr	r0, [r4, #0]
 8016d74:	7923      	ldrb	r3, [r4, #4]
 8016d76:	9308      	str	r3, [sp, #32]
 8016d78:	6803      	ldr	r3, [r0, #0]
 8016d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d7c:	4798      	blx	r3
 8016d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d82:	181e      	adds	r6, r3, r0
 8016d84:	42ae      	cmp	r6, r5
 8016d86:	dd06      	ble.n	8016d96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8016d88:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8016d8c:	4282      	cmp	r2, r0
 8016d8e:	bfa4      	itt	ge
 8016d90:	189d      	addge	r5, r3, r2
 8016d92:	fb95 f5f6 	sdivge	r5, r5, r6
 8016d96:	a82e      	add	r0, sp, #184	; 0xb8
 8016d98:	f001 fd4f 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8016d9c:	7c23      	ldrb	r3, [r4, #16]
 8016d9e:	b14b      	cbz	r3, 8016db4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8016da0:	6820      	ldr	r0, [r4, #0]
 8016da2:	6803      	ldr	r3, [r0, #0]
 8016da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016da6:	4798      	blx	r3
 8016da8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016daa:	4603      	mov	r3, r0
 8016dac:	4651      	mov	r1, sl
 8016dae:	a82e      	add	r0, sp, #184	; 0xb8
 8016db0:	f001 fd88 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016db4:	7c21      	ldrb	r1, [r4, #16]
 8016db6:	9101      	str	r1, [sp, #4]
 8016db8:	6821      	ldr	r1, [r4, #0]
 8016dba:	7963      	ldrb	r3, [r4, #5]
 8016dbc:	9100      	str	r1, [sp, #0]
 8016dbe:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016dc2:	a92e      	add	r1, sp, #184	; 0xb8
 8016dc4:	a810      	add	r0, sp, #64	; 0x40
 8016dc6:	f7ff fc8d 	bl	80166e4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016dca:	7c23      	ldrb	r3, [r4, #16]
 8016dcc:	b9bb      	cbnz	r3, 8016dfe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8016dce:	fa1f fa86 	uxth.w	sl, r6
 8016dd2:	2d00      	cmp	r5, #0
 8016dd4:	dd45      	ble.n	8016e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8016dd6:	4638      	mov	r0, r7
 8016dd8:	f002 f966 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	d03d      	beq.n	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016de0:	280a      	cmp	r0, #10
 8016de2:	d1f6      	bne.n	8016dd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8016de4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016de8:	4453      	add	r3, sl
 8016dea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016dee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016df2:	eba3 030a 	sub.w	r3, r3, sl
 8016df6:	3d01      	subs	r5, #1
 8016df8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016dfc:	e7e9      	b.n	8016dd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8016dfe:	0073      	lsls	r3, r6, #1
 8016e00:	9309      	str	r3, [sp, #36]	; 0x24
 8016e02:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016e06:	fa1f fa86 	uxth.w	sl, r6
 8016e0a:	2d00      	cmp	r5, #0
 8016e0c:	dd29      	ble.n	8016e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8016e0e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e14:	428b      	cmp	r3, r1
 8016e16:	bfd4      	ite	le
 8016e18:	2100      	movle	r1, #0
 8016e1a:	2101      	movgt	r1, #1
 8016e1c:	a810      	add	r0, sp, #64	; 0x40
 8016e1e:	f7ff fe78 	bl	8016b12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016e22:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8016e26:	3b01      	subs	r3, #1
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	455b      	cmp	r3, fp
 8016e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e2e:	d005      	beq.n	8016e3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8016e30:	7961      	ldrb	r1, [r4, #5]
 8016e32:	4638      	mov	r0, r7
 8016e34:	f7fa fd08 	bl	8011848 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e3a:	e7f4      	b.n	8016e26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8016e3c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016e40:	4453      	add	r3, sl
 8016e42:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016e46:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016e4a:	eba3 030a 	sub.w	r3, r3, sl
 8016e4e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016e52:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016e56:	3d01      	subs	r5, #1
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1d6      	bne.n	8016e0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8016e5c:	b05b      	add	sp, #364	; 0x16c
 8016e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e62:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8016e66:	ad44      	add	r5, sp, #272	; 0x110
 8016e68:	f04f 0b00 	mov.w	fp, #0
 8016e6c:	7c23      	ldrb	r3, [r4, #16]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d067      	beq.n	8016f42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016e72:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016e76:	458a      	cmp	sl, r1
 8016e78:	bfd4      	ite	le
 8016e7a:	2100      	movle	r1, #0
 8016e7c:	2101      	movgt	r1, #1
 8016e7e:	a810      	add	r0, sp, #64	; 0x40
 8016e80:	f7ff fe47 	bl	8016b12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016e84:	9b08      	ldr	r3, [sp, #32]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d056      	beq.n	8016f38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016e8a:	7c23      	ldrb	r3, [r4, #16]
 8016e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e8e:	2258      	movs	r2, #88	; 0x58
 8016e90:	4639      	mov	r1, r7
 8016e92:	4628      	mov	r0, r5
 8016e94:	f00e f838 	bl	8024f08 <memcpy>
 8016e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d059      	beq.n	8016f52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8016e9e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8016ea2:	7922      	ldrb	r2, [r4, #4]
 8016ea4:	2a01      	cmp	r2, #1
 8016ea6:	d13d      	bne.n	8016f24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8016ea8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8016eac:	1ac0      	subs	r0, r0, r3
 8016eae:	2302      	movs	r3, #2
 8016eb0:	fb90 f0f3 	sdiv	r0, r0, r3
 8016eb4:	b200      	sxth	r0, r0
 8016eb6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016eba:	4418      	add	r0, r3
 8016ebc:	7c23      	ldrb	r3, [r4, #16]
 8016ebe:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d03a      	beq.n	8016f3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8016ec6:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8016eca:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8016ece:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016ed2:	9500      	str	r5, [sp, #0]
 8016ed4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016ed8:	e9cd b703 	strd	fp, r7, [sp, #12]
 8016edc:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8016ee0:	464a      	mov	r2, r9
 8016ee2:	2100      	movs	r1, #0
 8016ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ee6:	f7ff fca4 	bl	8016832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016eea:	2800      	cmp	r0, #0
 8016eec:	d1b6      	bne.n	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016eee:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016ef2:	b2b2      	uxth	r2, r6
 8016ef4:	4611      	mov	r1, r2
 8016ef6:	4413      	add	r3, r2
 8016ef8:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016efc:	1a52      	subs	r2, r2, r1
 8016efe:	7c21      	ldrb	r1, [r4, #16]
 8016f00:	b21b      	sxth	r3, r3
 8016f02:	b212      	sxth	r2, r2
 8016f04:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016f08:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8016f0c:	b109      	cbz	r1, 8016f12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8016f0e:	42b2      	cmp	r2, r6
 8016f10:	dba4      	blt.n	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016f12:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8016f16:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016f1a:	440a      	add	r2, r1
 8016f1c:	b212      	sxth	r2, r2
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	dda4      	ble.n	8016e6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8016f22:	e79b      	b.n	8016e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8016f24:	2a02      	cmp	r2, #2
 8016f26:	d105      	bne.n	8016f34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8016f28:	7be2      	ldrb	r2, [r4, #15]
 8016f2a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016f2e:	1a80      	subs	r0, r0, r2
 8016f30:	1ac0      	subs	r0, r0, r3
 8016f32:	e7bf      	b.n	8016eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8016f34:	2000      	movs	r0, #0
 8016f36:	e7be      	b.n	8016eb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8016f38:	7be0      	ldrb	r0, [r4, #15]
 8016f3a:	e7bc      	b.n	8016eb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8016f3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f40:	e7c3      	b.n	8016eca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8016f42:	9b08      	ldr	r3, [sp, #32]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d0f7      	beq.n	8016f38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016f48:	2258      	movs	r2, #88	; 0x58
 8016f4a:	4639      	mov	r1, r7
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	f00d ffdb 	bl	8024f08 <memcpy>
 8016f52:	2300      	movs	r3, #0
 8016f54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f58:	6821      	ldr	r1, [r4, #0]
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f7ff fbfc 	bl	8016758 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016f60:	b203      	sxth	r3, r0
 8016f62:	e79e      	b.n	8016ea2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08016f64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f6c:	d00b      	beq.n	8016f86 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016f6e:	2b03      	cmp	r3, #3
 8016f70:	d00e      	beq.n	8016f90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d001      	beq.n	8016f7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016f76:	1860      	adds	r0, r4, r1
 8016f78:	bd10      	pop	{r4, pc}
 8016f7a:	8880      	ldrh	r0, [r0, #4]
 8016f7c:	4420      	add	r0, r4
 8016f7e:	b200      	sxth	r0, r0
 8016f80:	1a80      	subs	r0, r0, r2
 8016f82:	3801      	subs	r0, #1
 8016f84:	e7f8      	b.n	8016f78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016f86:	8880      	ldrh	r0, [r0, #4]
 8016f88:	4420      	add	r0, r4
 8016f8a:	b200      	sxth	r0, r0
 8016f8c:	1a40      	subs	r0, r0, r1
 8016f8e:	e7f8      	b.n	8016f82 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016f90:	18a0      	adds	r0, r4, r2
 8016f92:	e7f1      	b.n	8016f78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016f94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016f94:	b510      	push	{r4, lr}
 8016f96:	2b02      	cmp	r3, #2
 8016f98:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016f9c:	d006      	beq.n	8016fac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016f9e:	2b03      	cmp	r3, #3
 8016fa0:	d00a      	beq.n	8016fb8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	bf14      	ite	ne
 8016fa6:	18a0      	addne	r0, r4, r2
 8016fa8:	1860      	addeq	r0, r4, r1
 8016faa:	bd10      	pop	{r4, pc}
 8016fac:	88c0      	ldrh	r0, [r0, #6]
 8016fae:	4420      	add	r0, r4
 8016fb0:	b200      	sxth	r0, r0
 8016fb2:	1a80      	subs	r0, r0, r2
 8016fb4:	3801      	subs	r0, #1
 8016fb6:	e7f8      	b.n	8016faa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016fb8:	88c0      	ldrh	r0, [r0, #6]
 8016fba:	4420      	add	r0, r4
 8016fbc:	b200      	sxth	r0, r0
 8016fbe:	1a40      	subs	r0, r0, r1
 8016fc0:	e7f8      	b.n	8016fb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016fc4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016fc4:	4b01      	ldr	r3, [pc, #4]	; (8016fcc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	601a      	str	r2, [r3, #0]
 8016fca:	4770      	bx	lr
 8016fcc:	20001360 	.word	0x20001360

08016fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8016fd6:	1e05      	subs	r5, r0, #0
 8016fd8:	bfba      	itte	lt
 8016fda:	f04f 37ff 	movlt.w	r7, #4294967295
 8016fde:	426d      	neglt	r5, r5
 8016fe0:	2701      	movge	r7, #1
 8016fe2:	f1be 0f00 	cmp.w	lr, #0
 8016fe6:	bfb8      	it	lt
 8016fe8:	f1ce 0e00 	rsblt	lr, lr, #0
 8016fec:	f04f 0601 	mov.w	r6, #1
 8016ff0:	fa4e f001 	asr.w	r0, lr, r1
 8016ff4:	fa06 f101 	lsl.w	r1, r6, r1
 8016ff8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016ffc:	f101 31ff 	add.w	r1, r1, #4294967295
 8017000:	ea01 010e 	and.w	r1, r1, lr
 8017004:	bfb8      	it	lt
 8017006:	427f      	neglt	r7, r7
 8017008:	434d      	muls	r5, r1
 801700a:	2c00      	cmp	r4, #0
 801700c:	f8dc 1000 	ldr.w	r1, [ip]
 8017010:	bfb8      	it	lt
 8017012:	4264      	neglt	r4, r4
 8017014:	fb03 1300 	mla	r3, r3, r0, r1
 8017018:	fb95 f1f4 	sdiv	r1, r5, r4
 801701c:	fb04 5511 	mls	r5, r4, r1, r5
 8017020:	441d      	add	r5, r3
 8017022:	fb95 f3f4 	sdiv	r3, r5, r4
 8017026:	fb04 5413 	mls	r4, r4, r3, r5
 801702a:	4419      	add	r1, r3
 801702c:	bfb8      	it	lt
 801702e:	427f      	neglt	r7, r7
 8017030:	fb02 1000 	mla	r0, r2, r0, r1
 8017034:	f8cc 4000 	str.w	r4, [ip]
 8017038:	4378      	muls	r0, r7
 801703a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801703c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017040:	4c24      	ldr	r4, [pc, #144]	; (80170d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8017042:	6807      	ldr	r7, [r0, #0]
 8017044:	69a3      	ldr	r3, [r4, #24]
 8017046:	b086      	sub	sp, #24
 8017048:	4605      	mov	r5, r0
 801704a:	b92b      	cbnz	r3, 8017058 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801704c:	6840      	ldr	r0, [r0, #4]
 801704e:	e9c5 7000 	strd	r7, r0, [r5]
 8017052:	b006      	add	sp, #24
 8017054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017058:	68a2      	ldr	r2, [r4, #8]
 801705a:	6820      	ldr	r0, [r4, #0]
 801705c:	ae06      	add	r6, sp, #24
 801705e:	f04f 0802 	mov.w	r8, #2
 8017062:	fb93 f1f8 	sdiv	r1, r3, r8
 8017066:	440a      	add	r2, r1
 8017068:	f846 2d04 	str.w	r2, [r6, #-4]!
 801706c:	69e1      	ldr	r1, [r4, #28]
 801706e:	9700      	str	r7, [sp, #0]
 8017070:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8017074:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017078:	f7ff ffaa 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801707c:	69a3      	ldr	r3, [r4, #24]
 801707e:	9301      	str	r3, [sp, #4]
 8017080:	686b      	ldr	r3, [r5, #4]
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	4607      	mov	r7, r0
 8017086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017088:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801708a:	6a21      	ldr	r1, [r4, #32]
 801708c:	9602      	str	r6, [sp, #8]
 801708e:	6860      	ldr	r0, [r4, #4]
 8017090:	f7ff ff9e 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017094:	6963      	ldr	r3, [r4, #20]
 8017096:	69a2      	ldr	r2, [r4, #24]
 8017098:	fb92 f8f8 	sdiv	r8, r2, r8
 801709c:	4443      	add	r3, r8
 801709e:	9305      	str	r3, [sp, #20]
 80170a0:	682b      	ldr	r3, [r5, #0]
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80170a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80170aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80170ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80170ae:	4407      	add	r7, r0
 80170b0:	68e0      	ldr	r0, [r4, #12]
 80170b2:	f7ff ff8d 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80170b6:	69a3      	ldr	r3, [r4, #24]
 80170b8:	9301      	str	r3, [sp, #4]
 80170ba:	686b      	ldr	r3, [r5, #4]
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	4680      	mov	r8, r0
 80170c0:	9602      	str	r6, [sp, #8]
 80170c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80170c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80170c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80170c8:	6920      	ldr	r0, [r4, #16]
 80170ca:	f7ff ff81 	bl	8016fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80170ce:	4440      	add	r0, r8
 80170d0:	e7bd      	b.n	801704e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80170d2:	bf00      	nop
 80170d4:	20001364 	.word	0x20001364

080170d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	4b07      	ldr	r3, [pc, #28]	; (80170f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d108      	bne.n	80170f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80170e2:	4b06      	ldr	r3, [pc, #24]	; (80170fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80170e4:	880c      	ldrh	r4, [r1, #0]
 80170e6:	881b      	ldrh	r3, [r3, #0]
 80170e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80170ec:	3b01      	subs	r3, #1
 80170ee:	1b1b      	subs	r3, r3, r4
 80170f0:	8003      	strh	r3, [r0, #0]
 80170f2:	800a      	strh	r2, [r1, #0]
 80170f4:	bd10      	pop	{r4, pc}
 80170f6:	bf00      	nop
 80170f8:	2000134e 	.word	0x2000134e
 80170fc:	20001352 	.word	0x20001352

08017100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017100:	b510      	push	{r4, lr}
 8017102:	4b0a      	ldr	r3, [pc, #40]	; (801712c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	2b01      	cmp	r3, #1
 8017108:	d10e      	bne.n	8017128 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801710a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801710e:	8843      	ldrh	r3, [r0, #2]
 8017110:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017114:	8044      	strh	r4, [r0, #2]
 8017116:	18ca      	adds	r2, r1, r3
 8017118:	4b05      	ldr	r3, [pc, #20]	; (8017130 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	1a9b      	subs	r3, r3, r2
 801711e:	8003      	strh	r3, [r0, #0]
 8017120:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017124:	80c3      	strh	r3, [r0, #6]
 8017126:	8081      	strh	r1, [r0, #4]
 8017128:	bd10      	pop	{r4, pc}
 801712a:	bf00      	nop
 801712c:	2000134e 	.word	0x2000134e
 8017130:	2000134a 	.word	0x2000134a

08017134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017134:	b510      	push	{r4, lr}
 8017136:	4b07      	ldr	r3, [pc, #28]	; (8017154 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	2b01      	cmp	r3, #1
 801713c:	d108      	bne.n	8017150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801713e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017142:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017146:	8003      	strh	r3, [r0, #0]
 8017148:	8893      	ldrh	r3, [r2, #4]
 801714a:	3b01      	subs	r3, #1
 801714c:	1b1b      	subs	r3, r3, r4
 801714e:	800b      	strh	r3, [r1, #0]
 8017150:	bd10      	pop	{r4, pc}
 8017152:	bf00      	nop
 8017154:	2000134e 	.word	0x2000134e

08017158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017158:	b513      	push	{r0, r1, r4, lr}
 801715a:	4b08      	ldr	r3, [pc, #32]	; (801717c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801715c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017160:	4b07      	ldr	r3, [pc, #28]	; (8017180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017162:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801716e:	2400      	movs	r4, #0
 8017170:	466a      	mov	r2, sp
 8017172:	9400      	str	r4, [sp, #0]
 8017174:	f7ff ffde 	bl	8017134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017178:	b002      	add	sp, #8
 801717a:	bd10      	pop	{r4, pc}
 801717c:	2000134a 	.word	0x2000134a
 8017180:	2000134c 	.word	0x2000134c

08017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017184:	b510      	push	{r4, lr}
 8017186:	4b0a      	ldr	r3, [pc, #40]	; (80171b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	2b01      	cmp	r3, #1
 801718c:	460a      	mov	r2, r1
 801718e:	d10d      	bne.n	80171ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017190:	8881      	ldrh	r1, [r0, #4]
 8017192:	8803      	ldrh	r3, [r0, #0]
 8017194:	440b      	add	r3, r1
 8017196:	4601      	mov	r1, r0
 8017198:	3b01      	subs	r3, #1
 801719a:	f821 3b02 	strh.w	r3, [r1], #2
 801719e:	f7ff ffc9 	bl	8017134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80171a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80171a6:	88c2      	ldrh	r2, [r0, #6]
 80171a8:	8082      	strh	r2, [r0, #4]
 80171aa:	80c3      	strh	r3, [r0, #6]
 80171ac:	bd10      	pop	{r4, pc}
 80171ae:	bf00      	nop
 80171b0:	2000134e 	.word	0x2000134e

080171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80171b4:	b507      	push	{r0, r1, r2, lr}
 80171b6:	4b09      	ldr	r3, [pc, #36]	; (80171dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80171b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171bc:	4b08      	ldr	r3, [pc, #32]	; (80171e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80171be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80171c2:	2100      	movs	r1, #0
 80171c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171c8:	9100      	str	r1, [sp, #0]
 80171ca:	4669      	mov	r1, sp
 80171cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80171d0:	f7ff ffd8 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80171d4:	b003      	add	sp, #12
 80171d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80171da:	bf00      	nop
 80171dc:	2000134a 	.word	0x2000134a
 80171e0:	2000134c 	.word	0x2000134c

080171e4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80171e4:	4b06      	ldr	r3, [pc, #24]	; (8017200 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80171e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171ea:	4b06      	ldr	r3, [pc, #24]	; (8017204 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80171ec:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80171f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171f4:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80171f8:	2100      	movs	r1, #0
 80171fa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80171fe:	4770      	bx	lr
 8017200:	2000134a 	.word	0x2000134a
 8017204:	2000134c 	.word	0x2000134c

08017208 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017208:	4b03      	ldr	r3, [pc, #12]	; (8017218 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801720a:	6818      	ldr	r0, [r3, #0]
 801720c:	b110      	cbz	r0, 8017214 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801720e:	6803      	ldr	r3, [r0, #0]
 8017210:	699b      	ldr	r3, [r3, #24]
 8017212:	4718      	bx	r3
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	200013b4 	.word	0x200013b4

0801721c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801721c:	4770      	bx	lr
	...

08017220 <_ZN8touchgfx11Application4drawEv>:
 8017220:	b507      	push	{r0, r1, r2, lr}
 8017222:	4b09      	ldr	r3, [pc, #36]	; (8017248 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017224:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017228:	4b08      	ldr	r3, [pc, #32]	; (801724c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801722a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801722e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017232:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017236:	6803      	ldr	r3, [r0, #0]
 8017238:	2100      	movs	r1, #0
 801723a:	9100      	str	r1, [sp, #0]
 801723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801723e:	4669      	mov	r1, sp
 8017240:	4798      	blx	r3
 8017242:	b003      	add	sp, #12
 8017244:	f85d fb04 	ldr.w	pc, [sp], #4
 8017248:	2000134a 	.word	0x2000134a
 801724c:	2000134c 	.word	0x2000134c

08017250 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017250:	4b03      	ldr	r3, [pc, #12]	; (8017260 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017252:	6818      	ldr	r0, [r3, #0]
 8017254:	b110      	cbz	r0, 801725c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	69db      	ldr	r3, [r3, #28]
 801725a:	4718      	bx	r3
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	200013b4 	.word	0x200013b4

08017264 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017264:	4b03      	ldr	r3, [pc, #12]	; (8017274 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017266:	6818      	ldr	r0, [r3, #0]
 8017268:	b110      	cbz	r0, 8017270 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801726a:	6803      	ldr	r3, [r0, #0]
 801726c:	6a1b      	ldr	r3, [r3, #32]
 801726e:	4718      	bx	r3
 8017270:	4770      	bx	lr
 8017272:	bf00      	nop
 8017274:	200013b4 	.word	0x200013b4

08017278 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017278:	4b03      	ldr	r3, [pc, #12]	; (8017288 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801727a:	6818      	ldr	r0, [r3, #0]
 801727c:	b110      	cbz	r0, 8017284 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801727e:	6803      	ldr	r3, [r0, #0]
 8017280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017282:	4718      	bx	r3
 8017284:	4770      	bx	lr
 8017286:	bf00      	nop
 8017288:	200013b4 	.word	0x200013b4

0801728c <_ZN8touchgfx11Application15handleTickEventEv>:
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	4d34      	ldr	r5, [pc, #208]	; (8017360 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8017290:	4604      	mov	r4, r0
 8017292:	6828      	ldr	r0, [r5, #0]
 8017294:	b140      	cbz	r0, 80172a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017296:	7a03      	ldrb	r3, [r0, #8]
 8017298:	b933      	cbnz	r3, 80172a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801729a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801729e:	6803      	ldr	r3, [r0, #0]
 80172a0:	689b      	ldr	r3, [r3, #8]
 80172a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172a6:	4718      	bx	r3
 80172a8:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80172ac:	b97b      	cbnz	r3, 80172ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80172ae:	b170      	cbz	r0, 80172ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80172b0:	7a03      	ldrb	r3, [r0, #8]
 80172b2:	b163      	cbz	r3, 80172ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80172b4:	4b2b      	ldr	r3, [pc, #172]	; (8017364 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80172b6:	6818      	ldr	r0, [r3, #0]
 80172b8:	b110      	cbz	r0, 80172c0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80172ba:	6803      	ldr	r3, [r0, #0]
 80172bc:	691b      	ldr	r3, [r3, #16]
 80172be:	4798      	blx	r3
 80172c0:	6828      	ldr	r0, [r5, #0]
 80172c2:	6803      	ldr	r3, [r0, #0]
 80172c4:	68db      	ldr	r3, [r3, #12]
 80172c6:	4798      	blx	r3
 80172c8:	2301      	movs	r3, #1
 80172ca:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80172ce:	2500      	movs	r5, #0
 80172d0:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80172d4:	42a8      	cmp	r0, r5
 80172d6:	dd0c      	ble.n	80172f2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80172d8:	1963      	adds	r3, r4, r5
 80172da:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80172de:	b132      	cbz	r2, 80172ee <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80172e0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80172e4:	4413      	add	r3, r2
 80172e6:	6858      	ldr	r0, [r3, #4]
 80172e8:	6803      	ldr	r3, [r0, #0]
 80172ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172ec:	4798      	blx	r3
 80172ee:	3501      	adds	r5, #1
 80172f0:	e7ee      	b.n	80172d0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80172f2:	2300      	movs	r3, #0
 80172f4:	461a      	mov	r2, r3
 80172f6:	4298      	cmp	r0, r3
 80172f8:	d114      	bne.n	8017324 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80172fa:	1d25      	adds	r5, r4, #4
 80172fc:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8017300:	1e48      	subs	r0, r1, #1
 8017302:	b280      	uxth	r0, r0
 8017304:	4291      	cmp	r1, r2
 8017306:	dd24      	ble.n	8017352 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8017308:	4288      	cmp	r0, r1
 801730a:	d2fb      	bcs.n	8017304 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801730c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8017310:	3304      	adds	r3, #4
 8017312:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8017316:	428b      	cmp	r3, r1
 8017318:	d018      	beq.n	801734c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801731a:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801731e:	f843 6c04 	str.w	r6, [r3, #-4]
 8017322:	e7f8      	b.n	8017316 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8017324:	18e1      	adds	r1, r4, r3
 8017326:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801732a:	b16d      	cbz	r5, 8017348 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801732c:	429a      	cmp	r2, r3
 801732e:	d00a      	beq.n	8017346 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8017330:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017334:	4431      	add	r1, r6
 8017336:	684e      	ldr	r6, [r1, #4]
 8017338:	b291      	uxth	r1, r2
 801733a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801733e:	604e      	str	r6, [r1, #4]
 8017340:	18a1      	adds	r1, r4, r2
 8017342:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017346:	3201      	adds	r2, #1
 8017348:	3301      	adds	r3, #1
 801734a:	e7d4      	b.n	80172f6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801734c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017350:	e7d4      	b.n	80172fc <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8017352:	4b04      	ldr	r3, [pc, #16]	; (8017364 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017354:	6818      	ldr	r0, [r3, #0]
 8017356:	b110      	cbz	r0, 801735e <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8017358:	6803      	ldr	r3, [r0, #0]
 801735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801735c:	e7a1      	b.n	80172a2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801735e:	bd70      	pop	{r4, r5, r6, pc}
 8017360:	200013b8 	.word	0x200013b8
 8017364:	200013b4 	.word	0x200013b4

08017368 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017368:	b570      	push	{r4, r5, r6, lr}
 801736a:	4606      	mov	r6, r0
 801736c:	460c      	mov	r4, r1
 801736e:	b929      	cbnz	r1, 801737c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017370:	4b0c      	ldr	r3, [pc, #48]	; (80173a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017372:	4a0d      	ldr	r2, [pc, #52]	; (80173a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8017374:	480d      	ldr	r0, [pc, #52]	; (80173ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8017376:	2166      	movs	r1, #102	; 0x66
 8017378:	f00d fd48 	bl	8024e0c <__assert_func>
 801737c:	4d0c      	ldr	r5, [pc, #48]	; (80173b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801737e:	2300      	movs	r3, #0
 8017380:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017384:	6828      	ldr	r0, [r5, #0]
 8017386:	b110      	cbz	r0, 801738e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017388:	6803      	ldr	r3, [r0, #0]
 801738a:	695b      	ldr	r3, [r3, #20]
 801738c:	4798      	blx	r3
 801738e:	602c      	str	r4, [r5, #0]
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	4620      	mov	r0, r4
 8017394:	68db      	ldr	r3, [r3, #12]
 8017396:	4798      	blx	r3
 8017398:	6833      	ldr	r3, [r6, #0]
 801739a:	4630      	mov	r0, r6
 801739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801739e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173a2:	4718      	bx	r3
 80173a4:	080536fc 	.word	0x080536fc
 80173a8:	080537cc 	.word	0x080537cc
 80173ac:	08053706 	.word	0x08053706
 80173b0:	200013b4 	.word	0x200013b4

080173b4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80173ba:	888a      	ldrh	r2, [r1, #4]
 80173bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80173c0:	4422      	add	r2, r4
 80173c2:	b212      	sxth	r2, r2
 80173c4:	4293      	cmp	r3, r2
 80173c6:	da15      	bge.n	80173f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173c8:	8882      	ldrh	r2, [r0, #4]
 80173ca:	4413      	add	r3, r2
 80173cc:	b21b      	sxth	r3, r3
 80173ce:	429c      	cmp	r4, r3
 80173d0:	da10      	bge.n	80173f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80173d6:	88c9      	ldrh	r1, [r1, #6]
 80173d8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80173dc:	4419      	add	r1, r3
 80173de:	b209      	sxth	r1, r1
 80173e0:	428a      	cmp	r2, r1
 80173e2:	da07      	bge.n	80173f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173e4:	88c0      	ldrh	r0, [r0, #6]
 80173e6:	4410      	add	r0, r2
 80173e8:	b200      	sxth	r0, r0
 80173ea:	4283      	cmp	r3, r0
 80173ec:	bfac      	ite	ge
 80173ee:	2000      	movge	r0, #0
 80173f0:	2001      	movlt	r0, #1
 80173f2:	bd10      	pop	{r4, pc}
 80173f4:	2000      	movs	r0, #0
 80173f6:	e7fc      	b.n	80173f2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080173f8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80173f8:	b570      	push	{r4, r5, r6, lr}
 80173fa:	f9b1 4000 	ldrsh.w	r4, [r1]
 80173fe:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017402:	42ac      	cmp	r4, r5
 8017404:	db18      	blt.n	8017438 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017406:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801740a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801740e:	429a      	cmp	r2, r3
 8017410:	db12      	blt.n	8017438 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017412:	8886      	ldrh	r6, [r0, #4]
 8017414:	4435      	add	r5, r6
 8017416:	888e      	ldrh	r6, [r1, #4]
 8017418:	4434      	add	r4, r6
 801741a:	b22d      	sxth	r5, r5
 801741c:	b224      	sxth	r4, r4
 801741e:	42a5      	cmp	r5, r4
 8017420:	db0a      	blt.n	8017438 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017422:	88c0      	ldrh	r0, [r0, #6]
 8017424:	4418      	add	r0, r3
 8017426:	88cb      	ldrh	r3, [r1, #6]
 8017428:	441a      	add	r2, r3
 801742a:	b200      	sxth	r0, r0
 801742c:	b212      	sxth	r2, r2
 801742e:	4290      	cmp	r0, r2
 8017430:	bfb4      	ite	lt
 8017432:	2000      	movlt	r0, #0
 8017434:	2001      	movge	r0, #1
 8017436:	bd70      	pop	{r4, r5, r6, pc}
 8017438:	2000      	movs	r0, #0
 801743a:	e7fc      	b.n	8017436 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801743c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	4608      	mov	r0, r1
 8017442:	460d      	mov	r5, r1
 8017444:	f7fd f95d 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017448:	b978      	cbnz	r0, 801746a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801744a:	4620      	mov	r0, r4
 801744c:	f7fd f959 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017450:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017454:	b150      	cbz	r0, 801746c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017456:	8026      	strh	r6, [r4, #0]
 8017458:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801745c:	8063      	strh	r3, [r4, #2]
 801745e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017462:	80a3      	strh	r3, [r4, #4]
 8017464:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017468:	80e3      	strh	r3, [r4, #6]
 801746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801746c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017470:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017474:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017478:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801747c:	88ed      	ldrh	r5, [r5, #6]
 801747e:	42b1      	cmp	r1, r6
 8017480:	460f      	mov	r7, r1
 8017482:	bfa8      	it	ge
 8017484:	4637      	movge	r7, r6
 8017486:	4293      	cmp	r3, r2
 8017488:	4618      	mov	r0, r3
 801748a:	4466      	add	r6, ip
 801748c:	bfa8      	it	ge
 801748e:	4610      	movge	r0, r2
 8017490:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017494:	8027      	strh	r7, [r4, #0]
 8017496:	442a      	add	r2, r5
 8017498:	88e5      	ldrh	r5, [r4, #6]
 801749a:	8060      	strh	r0, [r4, #2]
 801749c:	4461      	add	r1, ip
 801749e:	442b      	add	r3, r5
 80174a0:	b236      	sxth	r6, r6
 80174a2:	b209      	sxth	r1, r1
 80174a4:	b212      	sxth	r2, r2
 80174a6:	b21b      	sxth	r3, r3
 80174a8:	428e      	cmp	r6, r1
 80174aa:	bfac      	ite	ge
 80174ac:	ebc7 0106 	rsbge	r1, r7, r6
 80174b0:	ebc7 0101 	rsblt	r1, r7, r1
 80174b4:	429a      	cmp	r2, r3
 80174b6:	bfac      	ite	ge
 80174b8:	ebc0 0202 	rsbge	r2, r0, r2
 80174bc:	ebc0 0203 	rsblt	r2, r0, r3
 80174c0:	80a1      	strh	r1, [r4, #4]
 80174c2:	80e2      	strh	r2, [r4, #6]
 80174c4:	e7d1      	b.n	801746a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080174c8 <_ZN8touchgfx11Application11getInstanceEv>:
 80174c8:	4b01      	ldr	r3, [pc, #4]	; (80174d0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80174ca:	6818      	ldr	r0, [r3, #0]
 80174cc:	4770      	bx	lr
 80174ce:	bf00      	nop
 80174d0:	200013c4 	.word	0x200013c4

080174d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80174d4:	2300      	movs	r3, #0
 80174d6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80174da:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80174de:	30a8      	adds	r0, #168	; 0xa8
 80174e0:	f802 3b01 	strb.w	r3, [r2], #1
 80174e4:	4282      	cmp	r2, r0
 80174e6:	d1fb      	bne.n	80174e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80174e8:	4770      	bx	lr

080174ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80174ea:	4603      	mov	r3, r0
 80174ec:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80174f0:	2200      	movs	r2, #0
 80174f2:	801a      	strh	r2, [r3, #0]
 80174f4:	805a      	strh	r2, [r3, #2]
 80174f6:	809a      	strh	r2, [r3, #4]
 80174f8:	80da      	strh	r2, [r3, #6]
 80174fa:	3308      	adds	r3, #8
 80174fc:	428b      	cmp	r3, r1
 80174fe:	d1f8      	bne.n	80174f2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017500:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017504:	4770      	bx	lr
	...

08017508 <_ZN8touchgfx11ApplicationC1Ev>:
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	4b1a      	ldr	r3, [pc, #104]	; (8017574 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801750c:	6003      	str	r3, [r0, #0]
 801750e:	2500      	movs	r5, #0
 8017510:	4604      	mov	r4, r0
 8017512:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8017516:	30a8      	adds	r0, #168	; 0xa8
 8017518:	f7ff ffe7 	bl	80174ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801751c:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017520:	f7ff ffe3 	bl	80174ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017524:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017528:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801752c:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017530:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017534:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017538:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801753c:	490e      	ldr	r1, [pc, #56]	; (8017578 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801753e:	480f      	ldr	r0, [pc, #60]	; (801757c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017540:	4e0f      	ldr	r6, [pc, #60]	; (8017580 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017542:	f00d fb2d 	bl	8024ba0 <CRC_Lock>
 8017546:	4b0f      	ldr	r3, [pc, #60]	; (8017584 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017548:	b158      	cbz	r0, 8017562 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801754a:	801d      	strh	r5, [r3, #0]
 801754c:	4a0e      	ldr	r2, [pc, #56]	; (8017588 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801754e:	2300      	movs	r3, #0
 8017550:	6013      	str	r3, [r2, #0]
 8017552:	4a0e      	ldr	r2, [pc, #56]	; (801758c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017554:	6033      	str	r3, [r6, #0]
 8017556:	4620      	mov	r0, r4
 8017558:	6013      	str	r3, [r2, #0]
 801755a:	f7ff ffbb 	bl	80174d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801755e:	4620      	mov	r0, r4
 8017560:	bd70      	pop	{r4, r5, r6, pc}
 8017562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017566:	2002      	movs	r0, #2
 8017568:	801a      	strh	r2, [r3, #0]
 801756a:	6030      	str	r0, [r6, #0]
 801756c:	f000 ffe8 	bl	8018540 <_ZN8touchgfx6Screen4drawEv>
 8017570:	e7ec      	b.n	801754c <_ZN8touchgfx11ApplicationC1Ev+0x44>
 8017572:	bf00      	nop
 8017574:	08053790 	.word	0x08053790
 8017578:	b5e8b5cd 	.word	0xb5e8b5cd
 801757c:	f407a5c2 	.word	0xf407a5c2
 8017580:	200013b4 	.word	0x200013b4
 8017584:	20000034 	.word	0x20000034
 8017588:	200013c4 	.word	0x200013c4
 801758c:	200013b8 	.word	0x200013b8

08017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017590:	2300      	movs	r3, #0
 8017592:	8003      	strh	r3, [r0, #0]
 8017594:	8043      	strh	r3, [r0, #2]
 8017596:	8083      	strh	r3, [r0, #4]
 8017598:	80c3      	strh	r3, [r0, #6]
 801759a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801759e:	4293      	cmp	r3, r2
 80175a0:	b530      	push	{r4, r5, lr}
 80175a2:	d912      	bls.n	80175ca <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80175a4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80175a8:	3b01      	subs	r3, #1
 80175aa:	6825      	ldr	r5, [r4, #0]
 80175ac:	6005      	str	r5, [r0, #0]
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	6865      	ldr	r5, [r4, #4]
 80175b2:	6045      	str	r5, [r0, #4]
 80175b4:	4293      	cmp	r3, r2
 80175b6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80175ba:	d906      	bls.n	80175ca <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80175bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80175c0:	681d      	ldr	r5, [r3, #0]
 80175c2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80175c6:	685d      	ldr	r5, [r3, #4]
 80175c8:	6065      	str	r5, [r4, #4]
 80175ca:	bd30      	pop	{r4, r5, pc}

080175cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80175cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175ce:	466b      	mov	r3, sp
 80175d0:	e883 0006 	stmia.w	r3, {r1, r2}
 80175d4:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80175d8:	2a07      	cmp	r2, #7
 80175da:	4604      	mov	r4, r0
 80175dc:	d906      	bls.n	80175ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80175de:	4b09      	ldr	r3, [pc, #36]	; (8017604 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80175e0:	4a09      	ldr	r2, [pc, #36]	; (8017608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80175e2:	480a      	ldr	r0, [pc, #40]	; (801760c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80175e4:	f240 118f 	movw	r1, #399	; 0x18f
 80175e8:	f00d fc10 	bl	8024e0c <__assert_func>
 80175ec:	1c51      	adds	r1, r2, #1
 80175ee:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80175f2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80175f6:	cb03      	ldmia	r3!, {r0, r1}
 80175f8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80175fc:	6069      	str	r1, [r5, #4]
 80175fe:	b003      	add	sp, #12
 8017600:	bd30      	pop	{r4, r5, pc}
 8017602:	bf00      	nop
 8017604:	08053730 	.word	0x08053730
 8017608:	08053810 	.word	0x08053810
 801760c:	0805375f 	.word	0x0805375f

08017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017614:	b089      	sub	sp, #36	; 0x24
 8017616:	466c      	mov	r4, sp
 8017618:	4606      	mov	r6, r0
 801761a:	4620      	mov	r0, r4
 801761c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017620:	f7fd f86f 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017624:	bbb0      	cbnz	r0, 8017694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8017626:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801762a:	b1fd      	cbz	r5, 801766c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801762c:	3d01      	subs	r5, #1
 801762e:	af04      	add	r7, sp, #16
 8017630:	f04f 090a 	mov.w	r9, #10
 8017634:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8017638:	ab02      	add	r3, sp, #8
 801763a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801763e:	6851      	ldr	r1, [r2, #4]
 8017640:	c303      	stmia	r3!, {r0, r1}
 8017642:	4621      	mov	r1, r4
 8017644:	a802      	add	r0, sp, #8
 8017646:	fa1f f885 	uxth.w	r8, r5
 801764a:	f7ff fed5 	bl	80173f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801764e:	bb08      	cbnz	r0, 8017694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8017650:	a902      	add	r1, sp, #8
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff fed0 	bl	80173f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017658:	b1f8      	cbz	r0, 801769a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801765a:	4642      	mov	r2, r8
 801765c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8017660:	a806      	add	r0, sp, #24
 8017662:	f7ff ff95 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017666:	f115 35ff 	adds.w	r5, r5, #4294967295
 801766a:	d2e3      	bcs.n	8017634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801766c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8017670:	2b08      	cmp	r3, #8
 8017672:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8017676:	d108      	bne.n	801768a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017678:	4629      	mov	r1, r5
 801767a:	a806      	add	r0, sp, #24
 801767c:	2207      	movs	r2, #7
 801767e:	f7ff ff87 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017682:	a906      	add	r1, sp, #24
 8017684:	4620      	mov	r0, r4
 8017686:	f7ff fed9 	bl	801743c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801768a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801768e:	4628      	mov	r0, r5
 8017690:	f7ff ff9c 	bl	80175cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017694:	b009      	add	sp, #36	; 0x24
 8017696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801769a:	4621      	mov	r1, r4
 801769c:	a802      	add	r0, sp, #8
 801769e:	f7ff fe89 	bl	80173b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80176a2:	b150      	cbz	r0, 80176ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80176a4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80176a8:	a806      	add	r0, sp, #24
 80176aa:	4642      	mov	r2, r8
 80176ac:	f7ff ff70 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80176b0:	a902      	add	r1, sp, #8
 80176b2:	4620      	mov	r0, r4
 80176b4:	f7ff fec2 	bl	801743c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80176b8:	e7d5      	b.n	8017666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80176ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80176be:	e887 0003 	stmia.w	r7, {r0, r1}
 80176c2:	a902      	add	r1, sp, #8
 80176c4:	4638      	mov	r0, r7
 80176c6:	f7ff feb9 	bl	801743c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80176ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80176ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80176d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80176d6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80176da:	fb13 f302 	smulbb	r3, r3, r2
 80176de:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80176e2:	fb11 f102 	smulbb	r1, r1, r2
 80176e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80176ea:	fb12 1100 	smlabb	r1, r2, r0, r1
 80176ee:	220b      	movs	r2, #11
 80176f0:	fb09 f303 	mul.w	r3, r9, r3
 80176f4:	434a      	muls	r2, r1
 80176f6:	4293      	cmp	r3, r2
 80176f8:	dab5      	bge.n	8017666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80176fa:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80176fe:	a806      	add	r0, sp, #24
 8017700:	4642      	mov	r2, r8
 8017702:	f7ff ff45 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017706:	e897 0003 	ldmia.w	r7, {r0, r1}
 801770a:	e884 0003 	stmia.w	r4, {r0, r1}
 801770e:	e7aa      	b.n	8017666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08017710 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017710:	b530      	push	{r4, r5, lr}
 8017712:	4b1d      	ldr	r3, [pc, #116]	; (8017788 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8017714:	b085      	sub	sp, #20
 8017716:	460c      	mov	r4, r1
 8017718:	f9b3 2000 	ldrsh.w	r2, [r3]
 801771c:	4b1b      	ldr	r3, [pc, #108]	; (801778c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801771e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017722:	2100      	movs	r1, #0
 8017724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017728:	9100      	str	r1, [sp, #0]
 801772a:	4605      	mov	r5, r0
 801772c:	6861      	ldr	r1, [r4, #4]
 801772e:	6820      	ldr	r0, [r4, #0]
 8017730:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017734:	ab02      	add	r3, sp, #8
 8017736:	c303      	stmia	r3!, {r0, r1}
 8017738:	4669      	mov	r1, sp
 801773a:	a802      	add	r0, sp, #8
 801773c:	f7fc ff9e 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 8017740:	ab02      	add	r3, sp, #8
 8017742:	cb03      	ldmia	r3!, {r0, r1}
 8017744:	4b12      	ldr	r3, [pc, #72]	; (8017790 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8017746:	6020      	str	r0, [r4, #0]
 8017748:	6818      	ldr	r0, [r3, #0]
 801774a:	6061      	str	r1, [r4, #4]
 801774c:	b138      	cbz	r0, 801775e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801774e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8017752:	b133      	cbz	r3, 8017762 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8017754:	6821      	ldr	r1, [r4, #0]
 8017756:	6862      	ldr	r2, [r4, #4]
 8017758:	4628      	mov	r0, r5
 801775a:	f7ff ff59 	bl	8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801775e:	b005      	add	sp, #20
 8017760:	bd30      	pop	{r4, r5, pc}
 8017762:	6803      	ldr	r3, [r0, #0]
 8017764:	4621      	mov	r1, r4
 8017766:	689b      	ldr	r3, [r3, #8]
 8017768:	4798      	blx	r3
 801776a:	4b0a      	ldr	r3, [pc, #40]	; (8017794 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801776c:	6818      	ldr	r0, [r3, #0]
 801776e:	b118      	cbz	r0, 8017778 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8017770:	6803      	ldr	r3, [r0, #0]
 8017772:	4621      	mov	r1, r4
 8017774:	689b      	ldr	r3, [r3, #8]
 8017776:	4798      	blx	r3
 8017778:	4b07      	ldr	r3, [pc, #28]	; (8017798 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801777a:	6818      	ldr	r0, [r3, #0]
 801777c:	6803      	ldr	r3, [r0, #0]
 801777e:	4621      	mov	r1, r4
 8017780:	695b      	ldr	r3, [r3, #20]
 8017782:	4798      	blx	r3
 8017784:	e7eb      	b.n	801775e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017786:	bf00      	nop
 8017788:	2000134a 	.word	0x2000134a
 801778c:	2000134c 	.word	0x2000134c
 8017790:	200013b4 	.word	0x200013b4
 8017794:	200013b0 	.word	0x200013b0
 8017798:	20001358 	.word	0x20001358

0801779c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a0:	4604      	mov	r4, r0
 80177a2:	b09b      	sub	sp, #108	; 0x6c
 80177a4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80177a8:	b129      	cbz	r1, 80177b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80177aa:	2300      	movs	r3, #0
 80177ac:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80177b0:	b01b      	add	sp, #108	; 0x6c
 80177b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177b6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80177ba:	4630      	mov	r0, r6
 80177bc:	f7fc ffa1 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 80177c0:	4605      	mov	r5, r0
 80177c2:	b940      	cbnz	r0, 80177d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80177c4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80177c8:	4620      	mov	r0, r4
 80177ca:	f7ff ff21 	bl	8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80177ce:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80177d2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80177d6:	4b92      	ldr	r3, [pc, #584]	; (8017a20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x284>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	b33b      	cbz	r3, 801782c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80177dc:	4d91      	ldr	r5, [pc, #580]	; (8017a24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x288>)
 80177de:	4628      	mov	r0, r5
 80177e0:	f7fc ff8f 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 80177e4:	4606      	mov	r6, r0
 80177e6:	bb08      	cbnz	r0, 801782c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80177e8:	4628      	mov	r0, r5
 80177ea:	f7ff fc89 	bl	8017100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80177ee:	6829      	ldr	r1, [r5, #0]
 80177f0:	686a      	ldr	r2, [r5, #4]
 80177f2:	4620      	mov	r0, r4
 80177f4:	f7ff ff0c 	bl	8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80177f8:	802e      	strh	r6, [r5, #0]
 80177fa:	806e      	strh	r6, [r5, #2]
 80177fc:	80ae      	strh	r6, [r5, #4]
 80177fe:	80ee      	strh	r6, [r5, #6]
 8017800:	4f89      	ldr	r7, [pc, #548]	; (8017a28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x28c>)
 8017802:	a809      	add	r0, sp, #36	; 0x24
 8017804:	f7ff fe71 	bl	80174ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017808:	883d      	ldrh	r5, [r7, #0]
 801780a:	462e      	mov	r6, r5
 801780c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017810:	42b3      	cmp	r3, r6
 8017812:	d910      	bls.n	8017836 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8017814:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017818:	a809      	add	r0, sp, #36	; 0x24
 801781a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801781e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8017822:	3601      	adds	r6, #1
 8017824:	f7ff fed2 	bl	80175cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017828:	b2b6      	uxth	r6, r6
 801782a:	e7ef      	b.n	801780c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801782c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1e5      	bne.n	8017800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8017834:	e7bc      	b.n	80177b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017836:	462e      	mov	r6, r5
 8017838:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801783c:	42b3      	cmp	r3, r6
 801783e:	d90b      	bls.n	8017858 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8017840:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017844:	4620      	mov	r0, r4
 8017846:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801784a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801784e:	3601      	adds	r6, #1
 8017850:	f7ff fede 	bl	8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017854:	b2b6      	uxth	r6, r6
 8017856:	e7ef      	b.n	8017838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8017858:	4a74      	ldr	r2, [pc, #464]	; (8017a2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x290>)
 801785a:	6813      	ldr	r3, [r2, #0]
 801785c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017860:	2b01      	cmp	r3, #1
 8017862:	4690      	mov	r8, r2
 8017864:	f040 8094 	bne.w	8017990 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8017868:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801786c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8017870:	33aa      	adds	r3, #170	; 0xaa
 8017872:	f04f 0900 	mov.w	r9, #0
 8017876:	42a8      	cmp	r0, r5
 8017878:	f103 0308 	add.w	r3, r3, #8
 801787c:	dd0a      	ble.n	8017894 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801787e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017882:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8017886:	440a      	add	r2, r1
 8017888:	b212      	sxth	r2, r2
 801788a:	4591      	cmp	r9, r2
 801788c:	bfb8      	it	lt
 801788e:	4691      	movlt	r9, r2
 8017890:	3501      	adds	r5, #1
 8017892:	e7f0      	b.n	8017876 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8017894:	4b66      	ldr	r3, [pc, #408]	; (8017a30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x294>)
 8017896:	4e67      	ldr	r6, [pc, #412]	; (8017a34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x298>)
 8017898:	881d      	ldrh	r5, [r3, #0]
 801789a:	2300      	movs	r3, #0
 801789c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80178a0:	2d0f      	cmp	r5, #15
 80178a2:	bf8c      	ite	hi
 80178a4:	08ed      	lsrhi	r5, r5, #3
 80178a6:	2501      	movls	r5, #1
 80178a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80178ac:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80178b0:	f8d8 0000 	ldr.w	r0, [r8]
 80178b4:	440b      	add	r3, r1
 80178b6:	b21b      	sxth	r3, r3
 80178b8:	4599      	cmp	r9, r3
 80178ba:	6802      	ldr	r2, [r0, #0]
 80178bc:	dd4b      	ble.n	8017956 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80178be:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80178c2:	4798      	blx	r3
 80178c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80178c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80178cc:	4413      	add	r3, r2
 80178ce:	b21b      	sxth	r3, r3
 80178d0:	195a      	adds	r2, r3, r5
 80178d2:	4290      	cmp	r0, r2
 80178d4:	da07      	bge.n	80178e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80178d6:	4581      	cmp	r9, r0
 80178d8:	dd05      	ble.n	80178e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80178da:	4298      	cmp	r0, r3
 80178dc:	da33      	bge.n	8017946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	dd31      	ble.n	8017946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80178e2:	4648      	mov	r0, r9
 80178e4:	e004      	b.n	80178f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80178e6:	4298      	cmp	r0, r3
 80178e8:	dbfb      	blt.n	80178e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80178ea:	4548      	cmp	r0, r9
 80178ec:	bfa8      	it	ge
 80178ee:	4648      	movge	r0, r9
 80178f0:	f9b6 2000 	ldrsh.w	r2, [r6]
 80178f4:	f8b7 a000 	ldrh.w	sl, [r7]
 80178f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178fc:	2100      	movs	r1, #0
 80178fe:	1ac0      	subs	r0, r0, r3
 8017900:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017904:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017908:	f8ad 001a 	strh.w	r0, [sp, #26]
 801790c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017910:	4553      	cmp	r3, sl
 8017912:	d9c9      	bls.n	80178a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017914:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017918:	ab07      	add	r3, sp, #28
 801791a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801791e:	6851      	ldr	r1, [r2, #4]
 8017920:	c303      	stmia	r3!, {r0, r1}
 8017922:	a807      	add	r0, sp, #28
 8017924:	a905      	add	r1, sp, #20
 8017926:	f7fc fea9 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 801792a:	a807      	add	r0, sp, #28
 801792c:	f7fc fee9 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017930:	b920      	cbnz	r0, 801793c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8017932:	6823      	ldr	r3, [r4, #0]
 8017934:	a907      	add	r1, sp, #28
 8017936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017938:	4620      	mov	r0, r4
 801793a:	4798      	blx	r3
 801793c:	f10a 0a01 	add.w	sl, sl, #1
 8017940:	fa1f fa8a 	uxth.w	sl, sl
 8017944:	e7e2      	b.n	801790c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8017946:	f8d8 0000 	ldr.w	r0, [r8]
 801794a:	6803      	ldr	r3, [r0, #0]
 801794c:	2101      	movs	r1, #1
 801794e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017952:	4798      	blx	r3
 8017954:	e7a8      	b.n	80178a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017956:	69d3      	ldr	r3, [r2, #28]
 8017958:	4798      	blx	r3
 801795a:	4b37      	ldr	r3, [pc, #220]	; (8017a38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29c>)
 801795c:	781b      	ldrb	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	f43f af26 	beq.w	80177b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017964:	2300      	movs	r3, #0
 8017966:	883d      	ldrh	r5, [r7, #0]
 8017968:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801796c:	34ea      	adds	r4, #234	; 0xea
 801796e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8017972:	42ab      	cmp	r3, r5
 8017974:	f67f af1c 	bls.w	80177b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017978:	ab1a      	add	r3, sp, #104	; 0x68
 801797a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801797e:	3b44      	subs	r3, #68	; 0x44
 8017980:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017984:	4620      	mov	r0, r4
 8017986:	3501      	adds	r5, #1
 8017988:	f7ff fe20 	bl	80175cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801798c:	b2ad      	uxth	r5, r5
 801798e:	e7ee      	b.n	801796e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8017990:	2b02      	cmp	r3, #2
 8017992:	f040 813d 	bne.w	8017c10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8017996:	4b29      	ldr	r3, [pc, #164]	; (8017a3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>)
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	2b01      	cmp	r3, #1
 801799c:	f000 809d 	beq.w	8017ada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 80179a0:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80179a4:	883a      	ldrh	r2, [r7, #0]
 80179a6:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80179aa:	3201      	adds	r2, #1
 80179ac:	b292      	uxth	r2, r2
 80179ae:	2900      	cmp	r1, #0
 80179b0:	d0d3      	beq.n	801795a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80179b2:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80179b6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80179ba:	441d      	add	r5, r3
 80179bc:	b22d      	sxth	r5, r5
 80179be:	4610      	mov	r0, r2
 80179c0:	f04f 0a00 	mov.w	sl, #0
 80179c4:	b283      	uxth	r3, r0
 80179c6:	4299      	cmp	r1, r3
 80179c8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80179cc:	f240 80c3 	bls.w	8017b56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ba>
 80179d0:	4426      	add	r6, r4
 80179d2:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80179d6:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80179da:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80179de:	4573      	cmp	r3, lr
 80179e0:	4684      	mov	ip, r0
 80179e2:	f340 80a5 	ble.w	8017b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x394>
 80179e6:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80179ea:	4475      	add	r5, lr
 80179ec:	b22d      	sxth	r5, r5
 80179ee:	429d      	cmp	r5, r3
 80179f0:	bfa8      	it	ge
 80179f2:	461d      	movge	r5, r3
 80179f4:	3001      	adds	r0, #1
 80179f6:	46e2      	mov	sl, ip
 80179f8:	e7e4      	b.n	80179c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80179fa:	d10b      	bne.n	8017a14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x278>
 80179fc:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8017a00:	f9b9 10ae 	ldrsh.w	r1, [r9, #174]	; 0xae
 8017a04:	458c      	cmp	ip, r1
 8017a06:	bfb4      	ite	lt
 8017a08:	469c      	movlt	ip, r3
 8017a0a:	46b4      	movge	ip, r6
 8017a0c:	4572      	cmp	r2, lr
 8017a0e:	bfb8      	it	lt
 8017a10:	4672      	movlt	r2, lr
 8017a12:	e08a      	b.n	8017b2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 8017a14:	428a      	cmp	r2, r1
 8017a16:	bfb8      	it	lt
 8017a18:	460a      	movlt	r2, r1
 8017a1a:	46b4      	mov	ip, r6
 8017a1c:	e085      	b.n	8017b2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38e>
 8017a1e:	bf00      	nop
 8017a20:	200013b0 	.word	0x200013b0
 8017a24:	200013bc 	.word	0x200013bc
 8017a28:	20000034 	.word	0x20000034
 8017a2c:	20001358 	.word	0x20001358
 8017a30:	2000134c 	.word	0x2000134c
 8017a34:	2000134a 	.word	0x2000134a
 8017a38:	20001354 	.word	0x20001354
 8017a3c:	2000134e 	.word	0x2000134e
 8017a40:	1961      	adds	r1, r4, r5
 8017a42:	ab05      	add	r3, sp, #20
 8017a44:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8017a48:	6849      	ldr	r1, [r1, #4]
 8017a4a:	c303      	stmia	r3!, {r0, r1}
 8017a4c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017a50:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017a54:	2b13      	cmp	r3, #19
 8017a56:	bfd8      	it	le
 8017a58:	f9bd 2014 	ldrshle.w	r2, [sp, #20]
 8017a5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a60:	440b      	add	r3, r1
 8017a62:	1a9b      	subs	r3, r3, r2
 8017a64:	a805      	add	r0, sp, #20
 8017a66:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017a6a:	f7ff fba3 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a6e:	a805      	add	r0, sp, #20
 8017a70:	f7fc fe47 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a74:	bb88      	cbnz	r0, 8017ada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 8017a76:	f9bd c01a 	ldrsh.w	ip, [sp, #26]
 8017a7a:	f8d8 0000 	ldr.w	r0, [r8]
 8017a7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017a82:	f8d0 e000 	ldr.w	lr, [r0]
 8017a86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017a8a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017a8e:	f1bc 0f14 	cmp.w	ip, #20
 8017a92:	bfa8      	it	ge
 8017a94:	f04f 0c14 	movge.w	ip, #20
 8017a98:	fa1f fc8c 	uxth.w	ip, ip
 8017a9c:	f8cd c000 	str.w	ip, [sp]
 8017aa0:	f8de 9078 	ldr.w	r9, [lr, #120]	; 0x78
 8017aa4:	47c8      	blx	r9
 8017aa6:	4681      	mov	r9, r0
 8017aa8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017aac:	a805      	add	r0, sp, #20
 8017aae:	f7ff fb27 	bl	8017100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017ab2:	6823      	ldr	r3, [r4, #0]
 8017ab4:	4425      	add	r5, r4
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017aba:	a905      	add	r1, sp, #20
 8017abc:	4798      	blx	r3
 8017abe:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017ac2:	eba0 0009 	sub.w	r0, r0, r9
 8017ac6:	b200      	sxth	r0, r0
 8017ac8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017acc:	b928      	cbnz	r0, 8017ada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33e>
 8017ace:	b2b2      	uxth	r2, r6
 8017ad0:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 8017ad4:	a807      	add	r0, sp, #28
 8017ad6:	f7ff fd5b 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017ada:	f8b4 a0e8 	ldrh.w	sl, [r4, #232]	; 0xe8
 8017ade:	f1ba 0f00 	cmp.w	sl, #0
 8017ae2:	f43f af3a 	beq.w	801795a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017ae6:	883b      	ldrh	r3, [r7, #0]
 8017ae8:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8017aec:	3301      	adds	r3, #1
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	2600      	movs	r6, #0
 8017af2:	b299      	uxth	r1, r3
 8017af4:	458a      	cmp	sl, r1
 8017af6:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 8017afa:	d9a1      	bls.n	8017a40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a4>
 8017afc:	4425      	add	r5, r4
 8017afe:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 8017b02:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8017b06:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8017b0a:	f9b9 e0a8 	ldrsh.w	lr, [r9, #168]	; 0xa8
 8017b0e:	4408      	add	r0, r1
 8017b10:	f8b9 10ac 	ldrh.w	r1, [r9, #172]	; 0xac
 8017b14:	4471      	add	r1, lr
 8017b16:	b200      	sxth	r0, r0
 8017b18:	b209      	sxth	r1, r1
 8017b1a:	4288      	cmp	r0, r1
 8017b1c:	469c      	mov	ip, r3
 8017b1e:	f6bf af6c 	bge.w	80179fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8017b22:	4586      	cmp	lr, r0
 8017b24:	4672      	mov	r2, lr
 8017b26:	bfb8      	it	lt
 8017b28:	4602      	movlt	r2, r0
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	4666      	mov	r6, ip
 8017b2e:	e7e0      	b.n	8017af2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x356>
 8017b30:	d10c      	bne.n	8017b4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b0>
 8017b32:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8017b36:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8017b3a:	45b4      	cmp	ip, r6
 8017b3c:	bfb4      	ite	lt
 8017b3e:	4684      	movlt	ip, r0
 8017b40:	46d4      	movge	ip, sl
 8017b42:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8017b46:	4433      	add	r3, r6
 8017b48:	b21b      	sxth	r3, r3
 8017b4a:	e750      	b.n	80179ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x252>
 8017b4c:	4575      	cmp	r5, lr
 8017b4e:	bfa8      	it	ge
 8017b50:	4675      	movge	r5, lr
 8017b52:	46d4      	mov	ip, sl
 8017b54:	e74e      	b.n	80179f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x258>
 8017b56:	eb0b 0006 	add.w	r0, fp, r6
 8017b5a:	4426      	add	r6, r4
 8017b5c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017b60:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8017b64:	f1b9 0f13 	cmp.w	r9, #19
 8017b68:	bfde      	ittt	le
 8017b6a:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8017b6e:	444d      	addle	r5, r9
 8017b70:	b22d      	sxthle	r5, r5
 8017b72:	f7fc fdc6 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	f47f af17 	bne.w	80179ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x212>
 8017b80:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8017b84:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017b88:	eba5 050c 	sub.w	r5, r5, ip
 8017b8c:	fa1f f28c 	uxth.w	r2, ip
 8017b90:	fa1f f989 	uxth.w	r9, r9
 8017b94:	eb02 0009 	add.w	r0, r2, r9
 8017b98:	2d14      	cmp	r5, #20
 8017b9a:	bfa8      	it	ge
 8017b9c:	2514      	movge	r5, #20
 8017b9e:	b200      	sxth	r0, r0
 8017ba0:	fa1f fe85 	uxth.w	lr, r5
 8017ba4:	eba0 000c 	sub.w	r0, r0, ip
 8017ba8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8017bac:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8017bb0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017bb4:	4586      	cmp	lr, r0
 8017bb6:	f8d8 0000 	ldr.w	r0, [r8]
 8017bba:	f8ad c016 	strh.w	ip, [sp, #22]
 8017bbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017bc2:	bfb8      	it	lt
 8017bc4:	46f1      	movlt	r9, lr
 8017bc6:	6805      	ldr	r5, [r0, #0]
 8017bc8:	f8cd 9000 	str.w	r9, [sp]
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	b289      	uxth	r1, r1
 8017bd0:	6fad      	ldr	r5, [r5, #120]	; 0x78
 8017bd2:	47a8      	blx	r5
 8017bd4:	6823      	ldr	r3, [r4, #0]
 8017bd6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bdc:	a905      	add	r1, sp, #20
 8017bde:	4620      	mov	r0, r4
 8017be0:	4798      	blx	r3
 8017be2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8017be6:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8017bea:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8017bee:	1a5b      	subs	r3, r3, r1
 8017bf0:	440a      	add	r2, r1
 8017bf2:	b21b      	sxth	r3, r3
 8017bf4:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8017bf8:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f47f aed1 	bne.w	80179a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 8017c02:	fa1f f28a 	uxth.w	r2, sl
 8017c06:	4659      	mov	r1, fp
 8017c08:	a807      	add	r0, sp, #28
 8017c0a:	f7ff fcc1 	bl	8017590 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017c0e:	e6c9      	b.n	80179a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x208>
 8017c10:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017c14:	42ab      	cmp	r3, r5
 8017c16:	f67f aea0 	bls.w	801795a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017c1a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017c1e:	ab07      	add	r3, sp, #28
 8017c20:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017c24:	6851      	ldr	r1, [r2, #4]
 8017c26:	c303      	stmia	r3!, {r0, r1}
 8017c28:	a807      	add	r0, sp, #28
 8017c2a:	f7fc fd6a 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c2e:	b920      	cbnz	r0, 8017c3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	a907      	add	r1, sp, #28
 8017c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c36:	4620      	mov	r0, r4
 8017c38:	4798      	blx	r3
 8017c3a:	3501      	adds	r5, #1
 8017c3c:	b2ad      	uxth	r5, r5
 8017c3e:	e7e7      	b.n	8017c10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08017c40 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017c40:	4b03      	ldr	r3, [pc, #12]	; (8017c50 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017c42:	2200      	movs	r2, #0
 8017c44:	801a      	strh	r2, [r3, #0]
 8017c46:	805a      	strh	r2, [r3, #2]
 8017c48:	809a      	strh	r2, [r3, #4]
 8017c4a:	80da      	strh	r2, [r3, #6]
 8017c4c:	4770      	bx	lr
 8017c4e:	bf00      	nop
 8017c50:	200013bc 	.word	0x200013bc

08017c54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c58:	4607      	mov	r7, r0
 8017c5a:	b099      	sub	sp, #100	; 0x64
 8017c5c:	a802      	add	r0, sp, #8
 8017c5e:	4614      	mov	r4, r2
 8017c60:	461d      	mov	r5, r3
 8017c62:	468a      	mov	sl, r1
 8017c64:	f000 fde9 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	4638      	mov	r0, r7
 8017c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c6e:	4798      	blx	r3
 8017c70:	462a      	mov	r2, r5
 8017c72:	4603      	mov	r3, r0
 8017c74:	4621      	mov	r1, r4
 8017c76:	a802      	add	r0, sp, #8
 8017c78:	f000 fe24 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017c7c:	2500      	movs	r5, #0
 8017c7e:	462c      	mov	r4, r5
 8017c80:	46a9      	mov	r9, r5
 8017c82:	46a8      	mov	r8, r5
 8017c84:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017c88:	2300      	movs	r3, #0
 8017c8a:	9301      	str	r3, [sp, #4]
 8017c8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017c90:	429c      	cmp	r4, r3
 8017c92:	d002      	beq.n	8017c9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8017c94:	455c      	cmp	r4, fp
 8017c96:	bf18      	it	ne
 8017c98:	4625      	movne	r5, r4
 8017c9a:	ab01      	add	r3, sp, #4
 8017c9c:	463a      	mov	r2, r7
 8017c9e:	4651      	mov	r1, sl
 8017ca0:	a802      	add	r0, sp, #8
 8017ca2:	f001 f909 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	b108      	cbz	r0, 8017cae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8017caa:	280a      	cmp	r0, #10
 8017cac:	d10a      	bne.n	8017cc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8017cae:	45c1      	cmp	r9, r8
 8017cb0:	bf38      	it	cc
 8017cb2:	46c1      	movcc	r9, r8
 8017cb4:	f04f 0800 	mov.w	r8, #0
 8017cb8:	2c00      	cmp	r4, #0
 8017cba:	d1e5      	bne.n	8017c88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8017cbc:	4648      	mov	r0, r9
 8017cbe:	b019      	add	sp, #100	; 0x64
 8017cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc4:	9a01      	ldr	r2, [sp, #4]
 8017cc6:	2a00      	cmp	r2, #0
 8017cc8:	d0de      	beq.n	8017c88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8017cca:	7b56      	ldrb	r6, [r2, #13]
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	8894      	ldrh	r4, [r2, #4]
 8017cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cd2:	0076      	lsls	r6, r6, #1
 8017cd4:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8017cd8:	7a96      	ldrb	r6, [r2, #10]
 8017cda:	4629      	mov	r1, r5
 8017cdc:	4306      	orrs	r6, r0
 8017cde:	4638      	mov	r0, r7
 8017ce0:	4798      	blx	r3
 8017ce2:	4430      	add	r0, r6
 8017ce4:	4480      	add	r8, r0
 8017ce6:	fa1f f888 	uxth.w	r8, r8
 8017cea:	e7e5      	b.n	8017cb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08017cec <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017cec:	b508      	push	{r3, lr}
 8017cee:	6803      	ldr	r3, [r0, #0]
 8017cf0:	68db      	ldr	r3, [r3, #12]
 8017cf2:	4798      	blx	r3
 8017cf4:	b128      	cbz	r0, 8017d02 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017cf6:	7b43      	ldrb	r3, [r0, #13]
 8017cf8:	7a80      	ldrb	r0, [r0, #10]
 8017cfa:	005b      	lsls	r3, r3, #1
 8017cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d00:	4318      	orrs	r0, r3
 8017d02:	bd08      	pop	{r3, pc}

08017d04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017d04:	b40e      	push	{r1, r2, r3}
 8017d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d08:	b098      	sub	sp, #96	; 0x60
 8017d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8017d0c:	4605      	mov	r5, r0
 8017d0e:	f853 4b04 	ldr.w	r4, [r3], #4
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	a802      	add	r0, sp, #8
 8017d16:	f000 fd90 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8017d1a:	682b      	ldr	r3, [r5, #0]
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d20:	4798      	blx	r3
 8017d22:	ae18      	add	r6, sp, #96	; 0x60
 8017d24:	4603      	mov	r3, r0
 8017d26:	4621      	mov	r1, r4
 8017d28:	9a00      	ldr	r2, [sp, #0]
 8017d2a:	2400      	movs	r4, #0
 8017d2c:	a802      	add	r0, sp, #8
 8017d2e:	f000 fdc9 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017d32:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8017d36:	462a      	mov	r2, r5
 8017d38:	4633      	mov	r3, r6
 8017d3a:	4621      	mov	r1, r4
 8017d3c:	a802      	add	r0, sp, #8
 8017d3e:	f001 f8bb 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d42:	b1f0      	cbz	r0, 8017d82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8017d44:	280a      	cmp	r0, #10
 8017d46:	d018      	beq.n	8017d7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017d48:	9f01      	ldr	r7, [sp, #4]
 8017d4a:	b1b7      	cbz	r7, 8017d7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8017d4c:	7b78      	ldrb	r0, [r7, #13]
 8017d4e:	7a3b      	ldrb	r3, [r7, #8]
 8017d50:	88aa      	ldrh	r2, [r5, #4]
 8017d52:	00c1      	lsls	r1, r0, #3
 8017d54:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017d58:	4319      	orrs	r1, r3
 8017d5a:	0643      	lsls	r3, r0, #25
 8017d5c:	bf44      	itt	mi
 8017d5e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017d62:	b219      	sxthmi	r1, r3
 8017d64:	0100      	lsls	r0, r0, #4
 8017d66:	79fb      	ldrb	r3, [r7, #7]
 8017d68:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d6c:	4303      	orrs	r3, r0
 8017d6e:	4413      	add	r3, r2
 8017d70:	1a5b      	subs	r3, r3, r1
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	42a3      	cmp	r3, r4
 8017d76:	bfc8      	it	gt
 8017d78:	b21c      	sxthgt	r4, r3
 8017d7a:	4633      	mov	r3, r6
 8017d7c:	462a      	mov	r2, r5
 8017d7e:	2100      	movs	r1, #0
 8017d80:	e7dc      	b.n	8017d3c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8017d82:	b2a0      	uxth	r0, r4
 8017d84:	b018      	add	sp, #96	; 0x60
 8017d86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017d8a:	b003      	add	sp, #12
 8017d8c:	4770      	bx	lr

08017d8e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017d8e:	b40e      	push	{r1, r2, r3}
 8017d90:	b530      	push	{r4, r5, lr}
 8017d92:	b098      	sub	sp, #96	; 0x60
 8017d94:	ab1b      	add	r3, sp, #108	; 0x6c
 8017d96:	4604      	mov	r4, r0
 8017d98:	f853 5b04 	ldr.w	r5, [r3], #4
 8017d9c:	9301      	str	r3, [sp, #4]
 8017d9e:	a802      	add	r0, sp, #8
 8017da0:	f000 fd4b 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8017da4:	6823      	ldr	r3, [r4, #0]
 8017da6:	4620      	mov	r0, r4
 8017da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017daa:	4798      	blx	r3
 8017dac:	9a01      	ldr	r2, [sp, #4]
 8017dae:	4603      	mov	r3, r0
 8017db0:	4629      	mov	r1, r5
 8017db2:	a802      	add	r0, sp, #8
 8017db4:	f000 fd86 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017db8:	a802      	add	r0, sp, #8
 8017dba:	f001 f975 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017dbe:	2401      	movs	r4, #1
 8017dc0:	b2a3      	uxth	r3, r4
 8017dc2:	b140      	cbz	r0, 8017dd6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8017dc4:	280a      	cmp	r0, #10
 8017dc6:	bf08      	it	eq
 8017dc8:	3301      	addeq	r3, #1
 8017dca:	a802      	add	r0, sp, #8
 8017dcc:	bf08      	it	eq
 8017dce:	b21c      	sxtheq	r4, r3
 8017dd0:	f001 f96a 	bl	80190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017dd4:	e7f4      	b.n	8017dc0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	b018      	add	sp, #96	; 0x60
 8017dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017dde:	b003      	add	sp, #12
 8017de0:	4770      	bx	lr

08017de2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017de2:	b40e      	push	{r1, r2, r3}
 8017de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017de6:	b098      	sub	sp, #96	; 0x60
 8017de8:	ab1d      	add	r3, sp, #116	; 0x74
 8017dea:	4604      	mov	r4, r0
 8017dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8017df0:	9300      	str	r3, [sp, #0]
 8017df2:	a802      	add	r0, sp, #8
 8017df4:	f000 fd21 	bl	801883a <_ZN8touchgfx12TextProviderC1Ev>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dfe:	4798      	blx	r3
 8017e00:	4629      	mov	r1, r5
 8017e02:	4603      	mov	r3, r0
 8017e04:	9a00      	ldr	r2, [sp, #0]
 8017e06:	a802      	add	r0, sp, #8
 8017e08:	ad18      	add	r5, sp, #96	; 0x60
 8017e0a:	f000 fd5b 	bl	80188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e0e:	2100      	movs	r1, #0
 8017e10:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8017e14:	4622      	mov	r2, r4
 8017e16:	462b      	mov	r3, r5
 8017e18:	a802      	add	r0, sp, #8
 8017e1a:	f001 f84d 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e1e:	26ff      	movs	r6, #255	; 0xff
 8017e20:	b1d8      	cbz	r0, 8017e5a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017e22:	280a      	cmp	r0, #10
 8017e24:	d012      	beq.n	8017e4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8017e26:	9801      	ldr	r0, [sp, #4]
 8017e28:	b180      	cbz	r0, 8017e4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8017e2a:	7b47      	ldrb	r7, [r0, #13]
 8017e2c:	7922      	ldrb	r2, [r4, #4]
 8017e2e:	00fb      	lsls	r3, r7, #3
 8017e30:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017e34:	7a03      	ldrb	r3, [r0, #8]
 8017e36:	430b      	orrs	r3, r1
 8017e38:	0679      	lsls	r1, r7, #25
 8017e3a:	bf44      	itt	mi
 8017e3c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e40:	b21b      	sxthmi	r3, r3
 8017e42:	1ad3      	subs	r3, r2, r3
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	429e      	cmp	r6, r3
 8017e48:	bf28      	it	cs
 8017e4a:	461e      	movcs	r6, r3
 8017e4c:	462b      	mov	r3, r5
 8017e4e:	4622      	mov	r2, r4
 8017e50:	2100      	movs	r1, #0
 8017e52:	a802      	add	r0, sp, #8
 8017e54:	f001 f830 	bl	8018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e58:	e7e2      	b.n	8017e20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8017e5a:	4630      	mov	r0, r6
 8017e5c:	b018      	add	sp, #96	; 0x60
 8017e5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e62:	b003      	add	sp, #12
 8017e64:	4770      	bx	lr

08017e66 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017e66:	b513      	push	{r0, r1, r4, lr}
 8017e68:	1d01      	adds	r1, r0, #4
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	c903      	ldmia	r1, {r0, r1}
 8017e6e:	466a      	mov	r2, sp
 8017e70:	e882 0003 	stmia.w	r2, {r0, r1}
 8017e74:	2100      	movs	r1, #0
 8017e76:	9100      	str	r1, [sp, #0]
 8017e78:	6819      	ldr	r1, [r3, #0]
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	690c      	ldr	r4, [r1, #16]
 8017e7e:	4611      	mov	r1, r2
 8017e80:	47a0      	blx	r4
 8017e82:	b002      	add	sp, #8
 8017e84:	bd10      	pop	{r4, pc}

08017e86 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017e86:	b538      	push	{r3, r4, r5, lr}
 8017e88:	680b      	ldr	r3, [r1, #0]
 8017e8a:	460c      	mov	r4, r1
 8017e8c:	68db      	ldr	r3, [r3, #12]
 8017e8e:	4605      	mov	r5, r0
 8017e90:	4798      	blx	r3
 8017e92:	6823      	ldr	r3, [r4, #0]
 8017e94:	4620      	mov	r0, r4
 8017e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e98:	4629      	mov	r1, r5
 8017e9a:	4798      	blx	r3
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	bd38      	pop	{r3, r4, r5, pc}

08017ea0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017ea0:	b410      	push	{r4}
 8017ea2:	880a      	ldrh	r2, [r1, #0]
 8017ea4:	8884      	ldrh	r4, [r0, #4]
 8017ea6:	4422      	add	r2, r4
 8017ea8:	800a      	strh	r2, [r1, #0]
 8017eaa:	88c4      	ldrh	r4, [r0, #6]
 8017eac:	884a      	ldrh	r2, [r1, #2]
 8017eae:	4422      	add	r2, r4
 8017eb0:	804a      	strh	r2, [r1, #2]
 8017eb2:	6940      	ldr	r0, [r0, #20]
 8017eb4:	b120      	cbz	r0, 8017ec0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017eb6:	6803      	ldr	r3, [r0, #0]
 8017eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ebe:	4718      	bx	r3
 8017ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ec4:	4770      	bx	lr

08017ec6 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ec8:	460b      	mov	r3, r1
 8017eca:	b085      	sub	sp, #20
 8017ecc:	4604      	mov	r4, r0
 8017ece:	b901      	cbnz	r1, 8017ed2 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017ed0:	b1fa      	cbz	r2, 8017f12 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8017ed2:	1d27      	adds	r7, r4, #4
 8017ed4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017ed8:	466e      	mov	r6, sp
 8017eda:	e886 0003 	stmia.w	r6, {r0, r1}
 8017ede:	88e1      	ldrh	r1, [r4, #6]
 8017ee0:	440a      	add	r2, r1
 8017ee2:	88a1      	ldrh	r1, [r4, #4]
 8017ee4:	4419      	add	r1, r3
 8017ee6:	6823      	ldr	r3, [r4, #0]
 8017ee8:	b209      	sxth	r1, r1
 8017eea:	4620      	mov	r0, r4
 8017eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eee:	b212      	sxth	r2, r2
 8017ef0:	4798      	blx	r3
 8017ef2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017ef6:	ad02      	add	r5, sp, #8
 8017ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8017efc:	6960      	ldr	r0, [r4, #20]
 8017efe:	b150      	cbz	r0, 8017f16 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8017f00:	6803      	ldr	r3, [r0, #0]
 8017f02:	4631      	mov	r1, r6
 8017f04:	691b      	ldr	r3, [r3, #16]
 8017f06:	4798      	blx	r3
 8017f08:	6960      	ldr	r0, [r4, #20]
 8017f0a:	6803      	ldr	r3, [r0, #0]
 8017f0c:	691b      	ldr	r3, [r3, #16]
 8017f0e:	4629      	mov	r1, r5
 8017f10:	4798      	blx	r3
 8017f12:	b005      	add	sp, #20
 8017f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f16:	f7ff fad7 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8017f1a:	6803      	ldr	r3, [r0, #0]
 8017f1c:	4631      	mov	r1, r6
 8017f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f20:	4798      	blx	r3
 8017f22:	f7ff fad1 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8017f26:	6803      	ldr	r3, [r0, #0]
 8017f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f2a:	e7f0      	b.n	8017f0e <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08017f2c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f2e:	8882      	ldrh	r2, [r0, #4]
 8017f30:	880b      	ldrh	r3, [r1, #0]
 8017f32:	4413      	add	r3, r2
 8017f34:	800b      	strh	r3, [r1, #0]
 8017f36:	88c2      	ldrh	r2, [r0, #6]
 8017f38:	884b      	ldrh	r3, [r1, #2]
 8017f3a:	4413      	add	r3, r2
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	804b      	strh	r3, [r1, #2]
 8017f40:	4605      	mov	r5, r0
 8017f42:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017f46:	460c      	mov	r4, r1
 8017f48:	6851      	ldr	r1, [r2, #4]
 8017f4a:	466b      	mov	r3, sp
 8017f4c:	c303      	stmia	r3!, {r0, r1}
 8017f4e:	4621      	mov	r1, r4
 8017f50:	4668      	mov	r0, sp
 8017f52:	f7fc fb93 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 8017f56:	466b      	mov	r3, sp
 8017f58:	cb03      	ldmia	r3!, {r0, r1}
 8017f5a:	6020      	str	r0, [r4, #0]
 8017f5c:	6061      	str	r1, [r4, #4]
 8017f5e:	6968      	ldr	r0, [r5, #20]
 8017f60:	b128      	cbz	r0, 8017f6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017f62:	6803      	ldr	r3, [r0, #0]
 8017f64:	691b      	ldr	r3, [r3, #16]
 8017f66:	4621      	mov	r1, r4
 8017f68:	4798      	blx	r3
 8017f6a:	b003      	add	sp, #12
 8017f6c:	bd30      	pop	{r4, r5, pc}
 8017f6e:	f7ff faab 	bl	80174c8 <_ZN8touchgfx11Application11getInstanceEv>
 8017f72:	6803      	ldr	r3, [r0, #0]
 8017f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f76:	e7f6      	b.n	8017f66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017f78 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017f78:	b570      	push	{r4, r5, r6, lr}
 8017f7a:	8882      	ldrh	r2, [r0, #4]
 8017f7c:	880b      	ldrh	r3, [r1, #0]
 8017f7e:	4413      	add	r3, r2
 8017f80:	800b      	strh	r3, [r1, #0]
 8017f82:	88c2      	ldrh	r2, [r0, #6]
 8017f84:	884b      	ldrh	r3, [r1, #2]
 8017f86:	460c      	mov	r4, r1
 8017f88:	4413      	add	r3, r2
 8017f8a:	804b      	strh	r3, [r1, #2]
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	1d01      	adds	r1, r0, #4
 8017f90:	4620      	mov	r0, r4
 8017f92:	f7fc fb73 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 8017f96:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	dd0b      	ble.n	8017fb6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017f9e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	dd07      	ble.n	8017fb6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017fa6:	6968      	ldr	r0, [r5, #20]
 8017fa8:	b128      	cbz	r0, 8017fb6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017faa:	6803      	ldr	r3, [r0, #0]
 8017fac:	4621      	mov	r1, r4
 8017fae:	6a1b      	ldr	r3, [r3, #32]
 8017fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fb4:	4718      	bx	r3
 8017fb6:	bd70      	pop	{r4, r5, r6, pc}

08017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017fb8:	b510      	push	{r4, lr}
 8017fba:	4604      	mov	r4, r0
 8017fbc:	4608      	mov	r0, r1
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	8023      	strh	r3, [r4, #0]
 8017fc2:	8063      	strh	r3, [r4, #2]
 8017fc4:	6803      	ldr	r3, [r0, #0]
 8017fc6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017fca:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017fce:	80a1      	strh	r1, [r4, #4]
 8017fd0:	80e2      	strh	r2, [r4, #6]
 8017fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fd4:	4621      	mov	r1, r4
 8017fd6:	4798      	blx	r3
 8017fd8:	4620      	mov	r0, r4
 8017fda:	bd10      	pop	{r4, pc}

08017fdc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017fdc:	b530      	push	{r4, r5, lr}
 8017fde:	8083      	strh	r3, [r0, #4]
 8017fe0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017fe4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017fe8:	7183      	strb	r3, [r0, #6]
 8017fea:	79c3      	ldrb	r3, [r0, #7]
 8017fec:	6101      	str	r1, [r0, #16]
 8017fee:	f365 0306 	bfi	r3, r5, #0, #7
 8017ff2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017ff6:	8282      	strh	r2, [r0, #20]
 8017ff8:	f365 13c7 	bfi	r3, r5, #7, #1
 8017ffc:	71c3      	strb	r3, [r0, #7]
 8017ffe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018002:	7203      	strb	r3, [r0, #8]
 8018004:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018008:	7243      	strb	r3, [r0, #9]
 801800a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801800e:	8143      	strh	r3, [r0, #10]
 8018010:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018014:	8183      	strh	r3, [r0, #12]
 8018016:	4b01      	ldr	r3, [pc, #4]	; (801801c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018018:	6003      	str	r3, [r0, #0]
 801801a:	bd30      	pop	{r4, r5, pc}
 801801c:	080538e8 	.word	0x080538e8

08018020 <_ZNK8touchgfx9ConstFont4findEt>:
 8018020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018022:	6904      	ldr	r4, [r0, #16]
 8018024:	8a82      	ldrh	r2, [r0, #20]
 8018026:	88a3      	ldrh	r3, [r4, #4]
 8018028:	1acb      	subs	r3, r1, r3
 801802a:	f102 32ff 	add.w	r2, r2, #4294967295
 801802e:	d431      	bmi.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018030:	4293      	cmp	r3, r2
 8018032:	dd0c      	ble.n	801804e <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 8018034:	230e      	movs	r3, #14
 8018036:	fb03 4302 	mla	r3, r3, r2, r4
 801803a:	889b      	ldrh	r3, [r3, #4]
 801803c:	1a5b      	subs	r3, r3, r1
 801803e:	1ad3      	subs	r3, r2, r3
 8018040:	429a      	cmp	r2, r3
 8018042:	db27      	blt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018044:	2b00      	cmp	r3, #0
 8018046:	bfbc      	itt	lt
 8018048:	2302      	movlt	r3, #2
 801804a:	fb92 f3f3 	sdivlt	r3, r2, r3
 801804e:	2500      	movs	r5, #0
 8018050:	260e      	movs	r6, #14
 8018052:	4295      	cmp	r5, r2
 8018054:	dc1e      	bgt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018056:	fb06 4003 	mla	r0, r6, r3, r4
 801805a:	8887      	ldrh	r7, [r0, #4]
 801805c:	42b9      	cmp	r1, r7
 801805e:	d01a      	beq.n	8018096 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018060:	d20d      	bcs.n	801807e <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 8018062:	1e5a      	subs	r2, r3, #1
 8018064:	4295      	cmp	r5, r2
 8018066:	dc15      	bgt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018068:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801806c:	1a5b      	subs	r3, r3, r1
 801806e:	1ad3      	subs	r3, r2, r3
 8018070:	429a      	cmp	r2, r3
 8018072:	db0f      	blt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018074:	429d      	cmp	r5, r3
 8018076:	ddec      	ble.n	8018052 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8018078:	1953      	adds	r3, r2, r5
 801807a:	105b      	asrs	r3, r3, #1
 801807c:	e7e9      	b.n	8018052 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801807e:	1c5d      	adds	r5, r3, #1
 8018080:	42aa      	cmp	r2, r5
 8018082:	db07      	blt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8018084:	8a43      	ldrh	r3, [r0, #18]
 8018086:	1acb      	subs	r3, r1, r3
 8018088:	442b      	add	r3, r5
 801808a:	429d      	cmp	r5, r3
 801808c:	dc02      	bgt.n	8018094 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801808e:	429a      	cmp	r2, r3
 8018090:	dadf      	bge.n	8018052 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8018092:	e7f1      	b.n	8018078 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 8018094:	2000      	movs	r0, #0
 8018096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018098 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801809a:	4604      	mov	r4, r0
 801809c:	4617      	mov	r7, r2
 801809e:	461e      	mov	r6, r3
 80180a0:	b911      	cbnz	r1, 80180a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80180a2:	2500      	movs	r5, #0
 80180a4:	4628      	mov	r0, r5
 80180a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180a8:	290a      	cmp	r1, #10
 80180aa:	d0fa      	beq.n	80180a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180ac:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80180b0:	4291      	cmp	r1, r2
 80180b2:	d0f6      	beq.n	80180a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180b4:	f242 020b 	movw	r2, #8203	; 0x200b
 80180b8:	4291      	cmp	r1, r2
 80180ba:	d0f2      	beq.n	80180a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180bc:	f7ff ffb0 	bl	8018020 <_ZNK8touchgfx9ConstFont4findEt>
 80180c0:	4605      	mov	r5, r0
 80180c2:	b950      	cbnz	r0, 80180da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	4620      	mov	r0, r4
 80180c8:	691b      	ldr	r3, [r3, #16]
 80180ca:	4798      	blx	r3
 80180cc:	4601      	mov	r1, r0
 80180ce:	4620      	mov	r0, r4
 80180d0:	f7ff ffa6 	bl	8018020 <_ZNK8touchgfx9ConstFont4findEt>
 80180d4:	4605      	mov	r5, r0
 80180d6:	2800      	cmp	r0, #0
 80180d8:	d0e3      	beq.n	80180a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80180da:	6823      	ldr	r3, [r4, #0]
 80180dc:	4629      	mov	r1, r5
 80180de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180e0:	4620      	mov	r0, r4
 80180e2:	4798      	blx	r3
 80180e4:	6038      	str	r0, [r7, #0]
 80180e6:	6823      	ldr	r3, [r4, #0]
 80180e8:	4620      	mov	r0, r4
 80180ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180ec:	4798      	blx	r3
 80180ee:	7030      	strb	r0, [r6, #0]
 80180f0:	e7d8      	b.n	80180a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080180f2 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80180f2:	2000      	movs	r0, #0
 80180f4:	4770      	bx	lr

080180f6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80180f6:	2001      	movs	r0, #1
 80180f8:	4770      	bx	lr

080180fa <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80180fa:	2002      	movs	r0, #2
 80180fc:	4770      	bx	lr

080180fe <_ZN8touchgfx12GestureEventD1Ev>:
 80180fe:	4770      	bx	lr

08018100 <_ZN8touchgfx9DragEventD1Ev>:
 8018100:	4770      	bx	lr

08018102 <_ZN8touchgfx10ClickEventD1Ev>:
 8018102:	4770      	bx	lr

08018104 <_ZN8touchgfx10ClickEventD0Ev>:
 8018104:	b510      	push	{r4, lr}
 8018106:	210c      	movs	r1, #12
 8018108:	4604      	mov	r4, r0
 801810a:	f00c fe53 	bl	8024db4 <_ZdlPvj>
 801810e:	4620      	mov	r0, r4
 8018110:	bd10      	pop	{r4, pc}

08018112 <_ZN8touchgfx9DragEventD0Ev>:
 8018112:	b510      	push	{r4, lr}
 8018114:	2110      	movs	r1, #16
 8018116:	4604      	mov	r4, r0
 8018118:	f00c fe4c 	bl	8024db4 <_ZdlPvj>
 801811c:	4620      	mov	r0, r4
 801811e:	bd10      	pop	{r4, pc}

08018120 <_ZN8touchgfx12GestureEventD0Ev>:
 8018120:	b510      	push	{r4, lr}
 8018122:	210c      	movs	r1, #12
 8018124:	4604      	mov	r4, r0
 8018126:	f00c fe45 	bl	8024db4 <_ZdlPvj>
 801812a:	4620      	mov	r0, r4
 801812c:	bd10      	pop	{r4, pc}
	...

08018130 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018130:	b530      	push	{r4, r5, lr}
 8018132:	460d      	mov	r5, r1
 8018134:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018136:	b087      	sub	sp, #28
 8018138:	4604      	mov	r4, r0
 801813a:	b301      	cbz	r1, 801817e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801813c:	a801      	add	r0, sp, #4
 801813e:	f7ff ff3b 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018142:	892a      	ldrh	r2, [r5, #8]
 8018144:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018148:	7928      	ldrb	r0, [r5, #4]
 801814a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801814e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018152:	1ad2      	subs	r2, r2, r3
 8018154:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018156:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018158:	f8ad 1012 	strh.w	r1, [sp, #18]
 801815c:	441a      	add	r2, r3
 801815e:	896b      	ldrh	r3, [r5, #10]
 8018160:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018164:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018168:	1b5b      	subs	r3, r3, r5
 801816a:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801816c:	442b      	add	r3, r5
 801816e:	4d05      	ldr	r5, [pc, #20]	; (8018184 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018170:	9503      	str	r5, [sp, #12]
 8018172:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	a903      	add	r1, sp, #12
 801817a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801817c:	4798      	blx	r3
 801817e:	b007      	add	sp, #28
 8018180:	bd30      	pop	{r4, r5, pc}
 8018182:	bf00      	nop
 8018184:	08053964 	.word	0x08053964

08018188 <_ZNK8touchgfx4Rect9intersectEss>:
 8018188:	b510      	push	{r4, lr}
 801818a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801818e:	428b      	cmp	r3, r1
 8018190:	dc10      	bgt.n	80181b4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018192:	8884      	ldrh	r4, [r0, #4]
 8018194:	4423      	add	r3, r4
 8018196:	b21b      	sxth	r3, r3
 8018198:	4299      	cmp	r1, r3
 801819a:	da0b      	bge.n	80181b4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801819c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80181a0:	4293      	cmp	r3, r2
 80181a2:	dc07      	bgt.n	80181b4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80181a4:	88c0      	ldrh	r0, [r0, #6]
 80181a6:	4418      	add	r0, r3
 80181a8:	b200      	sxth	r0, r0
 80181aa:	4282      	cmp	r2, r0
 80181ac:	bfac      	ite	ge
 80181ae:	2000      	movge	r0, #0
 80181b0:	2001      	movlt	r0, #1
 80181b2:	bd10      	pop	{r4, pc}
 80181b4:	2000      	movs	r0, #0
 80181b6:	e7fc      	b.n	80181b2 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

080181b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80181b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ba:	460c      	mov	r4, r1
 80181bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80181be:	b089      	sub	sp, #36	; 0x24
 80181c0:	4605      	mov	r5, r0
 80181c2:	2900      	cmp	r1, #0
 80181c4:	d054      	beq.n	8018270 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 80181c6:	4668      	mov	r0, sp
 80181c8:	f7ff fef6 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181cc:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80181ce:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 80181d0:	8922      	ldrh	r2, [r4, #8]
 80181d2:	88e1      	ldrh	r1, [r4, #6]
 80181d4:	443a      	add	r2, r7
 80181d6:	4431      	add	r1, r6
 80181d8:	b212      	sxth	r2, r2
 80181da:	b209      	sxth	r1, r1
 80181dc:	4668      	mov	r0, sp
 80181de:	f7ff ffd3 	bl	8018188 <_ZNK8touchgfx4Rect9intersectEss>
 80181e2:	b1d0      	cbz	r0, 801821a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80181e4:	89a2      	ldrh	r2, [r4, #12]
 80181e6:	8961      	ldrh	r1, [r4, #10]
 80181e8:	443a      	add	r2, r7
 80181ea:	4431      	add	r1, r6
 80181ec:	b212      	sxth	r2, r2
 80181ee:	b209      	sxth	r1, r1
 80181f0:	4668      	mov	r0, sp
 80181f2:	f7ff ffc9 	bl	8018188 <_ZNK8touchgfx4Rect9intersectEss>
 80181f6:	4603      	mov	r3, r0
 80181f8:	b978      	cbnz	r0, 801821a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80181fa:	4a1e      	ldr	r2, [pc, #120]	; (8018274 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80181fc:	9204      	str	r2, [sp, #16]
 80181fe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018200:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018204:	2202      	movs	r2, #2
 8018206:	f88d 2014 	strb.w	r2, [sp, #20]
 801820a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801820e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018212:	6803      	ldr	r3, [r0, #0]
 8018214:	a904      	add	r1, sp, #16
 8018216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018218:	4798      	blx	r3
 801821a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801821c:	a802      	add	r0, sp, #8
 801821e:	f7ff fecb 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018222:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018226:	88e0      	ldrh	r0, [r4, #6]
 8018228:	8961      	ldrh	r1, [r4, #10]
 801822a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801822e:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8018232:	8923      	ldrh	r3, [r4, #8]
 8018234:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018236:	7927      	ldrb	r7, [r4, #4]
 8018238:	f88d 7014 	strb.w	r7, [sp, #20]
 801823c:	1a80      	subs	r0, r0, r2
 801823e:	1a89      	subs	r1, r1, r2
 8018240:	89a2      	ldrh	r2, [r4, #12]
 8018242:	4c0d      	ldr	r4, [pc, #52]	; (8018278 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8018244:	9404      	str	r4, [sp, #16]
 8018246:	4460      	add	r0, ip
 8018248:	eba3 030e 	sub.w	r3, r3, lr
 801824c:	eba2 020e 	sub.w	r2, r2, lr
 8018250:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018254:	4433      	add	r3, r6
 8018256:	4461      	add	r1, ip
 8018258:	4432      	add	r2, r6
 801825a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801825c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018260:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018264:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018268:	6803      	ldr	r3, [r0, #0]
 801826a:	a904      	add	r1, sp, #16
 801826c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801826e:	4798      	blx	r3
 8018270:	b009      	add	sp, #36	; 0x24
 8018272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018274:	0805393c 	.word	0x0805393c
 8018278:	08053950 	.word	0x08053950

0801827c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018280:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8018284:	790b      	ldrb	r3, [r1, #4]
 8018286:	b0a1      	sub	sp, #132	; 0x84
 8018288:	4604      	mov	r4, r0
 801828a:	460d      	mov	r5, r1
 801828c:	f1b9 0f00 	cmp.w	r9, #0
 8018290:	d00f      	beq.n	80182b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8018292:	2b00      	cmp	r3, #0
 8018294:	f040 80a0 	bne.w	80183d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8018298:	b021      	add	sp, #132	; 0x84
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80182a2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80182a6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80182aa:	1d20      	adds	r0, r4, #4
 80182ac:	f7fc f934 	bl	8014518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80182b0:	e092      	b.n	80183d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1f0      	bne.n	8018298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80182b6:	4b5e      	ldr	r3, [pc, #376]	; (8018430 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 80182be:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80182c2:	f1ba 0f03 	cmp.w	sl, #3
 80182c6:	ddea      	ble.n	801829e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 80182c8:	f1ba 0f0c 	cmp.w	sl, #12
 80182cc:	f04f 0303 	mov.w	r3, #3
 80182d0:	bfdc      	itt	le
 80182d2:	f10a 32ff 	addle.w	r2, sl, #4294967295
 80182d6:	fb92 f3f3 	sdivle	r3, r2, r3
 80182da:	9301      	str	r3, [sp, #4]
 80182dc:	4b55      	ldr	r3, [pc, #340]	; (8018434 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 80182de:	4956      	ldr	r1, [pc, #344]	; (8018438 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 80182e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80182e4:	4b55      	ldr	r3, [pc, #340]	; (801843c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 80182e6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80182ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80182f2:	ab0e      	add	r3, sp, #56	; 0x38
 80182f4:	2248      	movs	r2, #72	; 0x48
 80182f6:	2600      	movs	r6, #0
 80182f8:	4618      	mov	r0, r3
 80182fa:	960a      	str	r6, [sp, #40]	; 0x28
 80182fc:	f00c fe04 	bl	8024f08 <memcpy>
 8018300:	f04f 32ff 	mov.w	r2, #4294967295
 8018304:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8018308:	f8cd a008 	str.w	sl, [sp, #8]
 801830c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018310:	fb93 f3f2 	sdiv	r3, r3, r2
 8018314:	b29b      	uxth	r3, r3
 8018316:	46b3      	mov	fp, r6
 8018318:	9303      	str	r3, [sp, #12]
 801831a:	2300      	movs	r3, #0
 801831c:	9309      	str	r3, [sp, #36]	; 0x24
 801831e:	9b07      	ldr	r3, [sp, #28]
 8018320:	9a03      	ldr	r2, [sp, #12]
 8018322:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8018326:	88ef      	ldrh	r7, [r5, #6]
 8018328:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801832c:	fb13 f302 	smulbb	r3, r3, r2
 8018330:	b29b      	uxth	r3, r3
 8018332:	9304      	str	r3, [sp, #16]
 8018334:	9b07      	ldr	r3, [sp, #28]
 8018336:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801833a:	a80a      	add	r0, sp, #40	; 0x28
 801833c:	685b      	ldr	r3, [r3, #4]
 801833e:	fb13 f302 	smulbb	r3, r3, r2
 8018342:	b29b      	uxth	r3, r3
 8018344:	9305      	str	r3, [sp, #20]
 8018346:	9b04      	ldr	r3, [sp, #16]
 8018348:	441f      	add	r7, r3
 801834a:	9b05      	ldr	r3, [sp, #20]
 801834c:	4498      	add	r8, r3
 801834e:	b23f      	sxth	r7, r7
 8018350:	fa0f f888 	sxth.w	r8, r8
 8018354:	4642      	mov	r2, r8
 8018356:	4639      	mov	r1, r7
 8018358:	f7ff ff16 	bl	8018188 <_ZNK8touchgfx4Rect9intersectEss>
 801835c:	b380      	cbz	r0, 80183c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801835e:	4639      	mov	r1, r7
 8018360:	ab09      	add	r3, sp, #36	; 0x24
 8018362:	4642      	mov	r2, r8
 8018364:	1d20      	adds	r0, r4, #4
 8018366:	f7fc f8d7 	bl	8014518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801836a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801836c:	b341      	cbz	r1, 80183c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801836e:	4549      	cmp	r1, r9
 8018370:	d026      	beq.n	80183c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8018372:	a80c      	add	r0, sp, #48	; 0x30
 8018374:	f7ff fe20 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018378:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801837c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018380:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018384:	2002      	movs	r0, #2
 8018386:	fb92 f2f0 	sdiv	r2, r2, r0
 801838a:	440a      	add	r2, r1
 801838c:	1a99      	subs	r1, r3, r2
 801838e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018392:	fb93 f3f0 	sdiv	r3, r3, r0
 8018396:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801839a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801839e:	4403      	add	r3, r0
 80183a0:	1ad3      	subs	r3, r2, r3
 80183a2:	435b      	muls	r3, r3
 80183a4:	9a06      	ldr	r2, [sp, #24]
 80183a6:	fb01 3301 	mla	r3, r1, r1, r3
 80183aa:	4293      	cmp	r3, r2
 80183ac:	d208      	bcs.n	80183c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80183ae:	9a04      	ldr	r2, [sp, #16]
 80183b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80183b4:	86a2      	strh	r2, [r4, #52]	; 0x34
 80183b6:	9a05      	ldr	r2, [sp, #20]
 80183b8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80183bc:	86e2      	strh	r2, [r4, #54]	; 0x36
 80183be:	9306      	str	r3, [sp, #24]
 80183c0:	f10b 0b02 	add.w	fp, fp, #2
 80183c4:	f1bb 0f08 	cmp.w	fp, #8
 80183c8:	dda7      	ble.n	801831a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80183ca:	9b02      	ldr	r3, [sp, #8]
 80183cc:	4453      	add	r3, sl
 80183ce:	9302      	str	r3, [sp, #8]
 80183d0:	9b01      	ldr	r3, [sp, #4]
 80183d2:	3601      	adds	r6, #1
 80183d4:	42b3      	cmp	r3, r6
 80183d6:	d199      	bne.n	801830c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 80183d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80183da:	2900      	cmp	r1, #0
 80183dc:	f43f af5c 	beq.w	8018298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80183e0:	a80c      	add	r0, sp, #48	; 0x30
 80183e2:	f7ff fde9 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80183ea:	88ea      	ldrh	r2, [r5, #6]
 80183ec:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80183f0:	7929      	ldrb	r1, [r5, #4]
 80183f2:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80183f6:	1ad2      	subs	r2, r2, r3
 80183f8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80183fa:	441a      	add	r2, r3
 80183fc:	892b      	ldrh	r3, [r5, #8]
 80183fe:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018402:	1a1b      	subs	r3, r3, r0
 8018404:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8018406:	4403      	add	r3, r0
 8018408:	480d      	ldr	r0, [pc, #52]	; (8018440 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801840a:	900e      	str	r0, [sp, #56]	; 0x38
 801840c:	2600      	movs	r6, #0
 801840e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018410:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8018414:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8018418:	6803      	ldr	r3, [r0, #0]
 801841a:	a90e      	add	r1, sp, #56	; 0x38
 801841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801841e:	4798      	blx	r3
 8018420:	792b      	ldrb	r3, [r5, #4]
 8018422:	2b00      	cmp	r3, #0
 8018424:	f43f af38 	beq.w	8018298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018428:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801842c:	e734      	b.n	8018298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801842e:	bf00      	nop
 8018430:	20001358 	.word	0x20001358
 8018434:	2000134a 	.word	0x2000134a
 8018438:	080265b0 	.word	0x080265b0
 801843c:	2000134c 	.word	0x2000134c
 8018440:	0805393c 	.word	0x0805393c

08018444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018446:	4604      	mov	r4, r0
 8018448:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801844c:	3201      	adds	r2, #1
 801844e:	d112      	bne.n	8018476 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018450:	6803      	ldr	r3, [r0, #0]
 8018452:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018456:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801845a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801845e:	2500      	movs	r5, #0
 8018460:	9500      	str	r5, [sp, #0]
 8018462:	466d      	mov	r5, sp
 8018464:	4629      	mov	r1, r5
 8018466:	f8ad 2006 	strh.w	r2, [sp, #6]
 801846a:	6a1b      	ldr	r3, [r3, #32]
 801846c:	4798      	blx	r3
 801846e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018472:	e884 0003 	stmia.w	r4, {r0, r1}
 8018476:	4620      	mov	r0, r4
 8018478:	b003      	add	sp, #12
 801847a:	bd30      	pop	{r4, r5, pc}

0801847c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801847c:	b513      	push	{r0, r1, r4, lr}
 801847e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018482:	3301      	adds	r3, #1
 8018484:	4604      	mov	r4, r0
 8018486:	d109      	bne.n	801849c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018488:	4601      	mov	r1, r0
 801848a:	4668      	mov	r0, sp
 801848c:	f7ff fd94 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018490:	f8bd 3000 	ldrh.w	r3, [sp]
 8018494:	8423      	strh	r3, [r4, #32]
 8018496:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801849a:	8463      	strh	r3, [r4, #34]	; 0x22
 801849c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80184a0:	b002      	add	sp, #8
 80184a2:	bd10      	pop	{r4, pc}

080184a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80184a4:	b513      	push	{r0, r1, r4, lr}
 80184a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80184aa:	3301      	adds	r3, #1
 80184ac:	4604      	mov	r4, r0
 80184ae:	d109      	bne.n	80184c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80184b0:	4601      	mov	r1, r0
 80184b2:	4668      	mov	r0, sp
 80184b4:	f7ff fd80 	bl	8017fb8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80184bc:	8423      	strh	r3, [r4, #32]
 80184be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80184c2:	8463      	strh	r3, [r4, #34]	; 0x22
 80184c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80184c8:	b002      	add	sp, #8
 80184ca:	bd10      	pop	{r4, pc}

080184cc <_ZN8touchgfx6ScreenC1Ev>:
 80184cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ce:	4605      	mov	r5, r0
 80184d0:	4b17      	ldr	r3, [pc, #92]	; (8018530 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80184d2:	f845 3b04 	str.w	r3, [r5], #4
 80184d6:	2301      	movs	r3, #1
 80184d8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80184dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80184e0:	4b14      	ldr	r3, [pc, #80]	; (8018534 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80184e2:	4915      	ldr	r1, [pc, #84]	; (8018538 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80184e4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80184e8:	4b14      	ldr	r3, [pc, #80]	; (801853c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80184ea:	6041      	str	r1, [r0, #4]
 80184ec:	2200      	movs	r2, #0
 80184ee:	8102      	strh	r2, [r0, #8]
 80184f0:	8142      	strh	r2, [r0, #10]
 80184f2:	8182      	strh	r2, [r0, #12]
 80184f4:	81c2      	strh	r2, [r0, #14]
 80184f6:	8202      	strh	r2, [r0, #16]
 80184f8:	8242      	strh	r2, [r0, #18]
 80184fa:	8282      	strh	r2, [r0, #20]
 80184fc:	82c2      	strh	r2, [r0, #22]
 80184fe:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018502:	6202      	str	r2, [r0, #32]
 8018504:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8018508:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801850c:	6342      	str	r2, [r0, #52]	; 0x34
 801850e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018512:	4611      	mov	r1, r2
 8018514:	4604      	mov	r4, r0
 8018516:	4628      	mov	r0, r5
 8018518:	f7f6 f9e6 	bl	800e8e8 <_ZN8touchgfx8Drawable5setXYEss>
 801851c:	4639      	mov	r1, r7
 801851e:	4628      	mov	r0, r5
 8018520:	f7f6 fa00 	bl	800e924 <_ZN8touchgfx8Drawable8setWidthEs>
 8018524:	4628      	mov	r0, r5
 8018526:	4631      	mov	r1, r6
 8018528:	f7f6 fa0b 	bl	800e942 <_ZN8touchgfx8Drawable9setHeightEs>
 801852c:	4620      	mov	r0, r4
 801852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018530:	08053978 	.word	0x08053978
 8018534:	2000134a 	.word	0x2000134a
 8018538:	08052558 	.word	0x08052558
 801853c:	2000134c 	.word	0x2000134c

08018540 <_ZN8touchgfx6Screen4drawEv>:
 8018540:	b507      	push	{r0, r1, r2, lr}
 8018542:	4b09      	ldr	r3, [pc, #36]	; (8018568 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018544:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018548:	4b08      	ldr	r3, [pc, #32]	; (801856c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801854a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801854e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018552:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018556:	6803      	ldr	r3, [r0, #0]
 8018558:	2100      	movs	r1, #0
 801855a:	9100      	str	r1, [sp, #0]
 801855c:	689b      	ldr	r3, [r3, #8]
 801855e:	4669      	mov	r1, sp
 8018560:	4798      	blx	r3
 8018562:	b003      	add	sp, #12
 8018564:	f85d fb04 	ldr.w	pc, [sp], #4
 8018568:	2000134a 	.word	0x2000134a
 801856c:	2000134c 	.word	0x2000134c

08018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018574:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018578:	2b00      	cmp	r3, #0
 801857a:	b089      	sub	sp, #36	; 0x24
 801857c:	4680      	mov	r8, r0
 801857e:	460c      	mov	r4, r1
 8018580:	4615      	mov	r5, r2
 8018582:	dd0e      	ble.n	80185a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018584:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018588:	2b00      	cmp	r3, #0
 801858a:	dd0a      	ble.n	80185a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801858c:	4628      	mov	r0, r5
 801858e:	f7ff ff59 	bl	8018444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018592:	4621      	mov	r1, r4
 8018594:	f7fe ff0e 	bl	80173b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018598:	69eb      	ldr	r3, [r5, #28]
 801859a:	b928      	cbnz	r0, 80185a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801859c:	461d      	mov	r5, r3
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d1f4      	bne.n	801858c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80185a2:	b009      	add	sp, #36	; 0x24
 80185a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a8:	ae04      	add	r6, sp, #16
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d051      	beq.n	8018652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80185ae:	682b      	ldr	r3, [r5, #0]
 80185b0:	4629      	mov	r1, r5
 80185b2:	68db      	ldr	r3, [r3, #12]
 80185b4:	a802      	add	r0, sp, #8
 80185b6:	4798      	blx	r3
 80185b8:	4628      	mov	r0, r5
 80185ba:	f7ff ff5f 	bl	801847c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80185be:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80185c2:	4407      	add	r7, r0
 80185c4:	4628      	mov	r0, r5
 80185c6:	f7ff ff6d 	bl	80184a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80185ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80185ce:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80185d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80185d6:	4418      	add	r0, r3
 80185d8:	4621      	mov	r1, r4
 80185da:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80185de:	f8ad 0012 	strh.w	r0, [sp, #18]
 80185e2:	b23f      	sxth	r7, r7
 80185e4:	4630      	mov	r0, r6
 80185e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185ea:	f8ad 7010 	strh.w	r7, [sp, #16]
 80185ee:	f7fc f845 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80185f2:	4628      	mov	r0, r5
 80185f4:	f7ff ff26 	bl	8018444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185f8:	4602      	mov	r2, r0
 80185fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80185fe:	ab06      	add	r3, sp, #24
 8018600:	e883 0003 	stmia.w	r3, {r0, r1}
 8018604:	4611      	mov	r1, r2
 8018606:	4618      	mov	r0, r3
 8018608:	f7fc f838 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 801860c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018610:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018614:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018618:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801861c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018620:	4299      	cmp	r1, r3
 8018622:	d10b      	bne.n	801863c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8018624:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018628:	4552      	cmp	r2, sl
 801862a:	d107      	bne.n	801863c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801862c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018630:	455a      	cmp	r2, fp
 8018632:	d103      	bne.n	801863c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 8018634:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018638:	454a      	cmp	r2, r9
 801863a:	d00a      	beq.n	8018652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801863c:	f1bb 0f00 	cmp.w	fp, #0
 8018640:	d002      	beq.n	8018648 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 8018642:	f1b9 0f00 	cmp.w	r9, #0
 8018646:	d12e      	bne.n	80186a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 8018648:	69ea      	ldr	r2, [r5, #28]
 801864a:	4621      	mov	r1, r4
 801864c:	4640      	mov	r0, r8
 801864e:	f7ff ff8f 	bl	8018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018652:	4628      	mov	r0, r5
 8018654:	f7ff fef6 	bl	8018444 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018658:	6861      	ldr	r1, [r4, #4]
 801865a:	4602      	mov	r2, r0
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	4633      	mov	r3, r6
 8018660:	c303      	stmia	r3!, {r0, r1}
 8018662:	4611      	mov	r1, r2
 8018664:	4630      	mov	r0, r6
 8018666:	f7fc f809 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 801866a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801866e:	2b00      	cmp	r3, #0
 8018670:	dd97      	ble.n	80185a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018672:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018676:	2b00      	cmp	r3, #0
 8018678:	dd93      	ble.n	80185a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801867a:	4628      	mov	r0, r5
 801867c:	f7ff fefe 	bl	801847c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018680:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018684:	1a18      	subs	r0, r3, r0
 8018686:	f8ad 0010 	strh.w	r0, [sp, #16]
 801868a:	4628      	mov	r0, r5
 801868c:	f7ff ff0a 	bl	80184a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018690:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018694:	1a18      	subs	r0, r3, r0
 8018696:	f8ad 0012 	strh.w	r0, [sp, #18]
 801869a:	682b      	ldr	r3, [r5, #0]
 801869c:	4631      	mov	r1, r6
 801869e:	689b      	ldr	r3, [r3, #8]
 80186a0:	4628      	mov	r0, r5
 80186a2:	4798      	blx	r3
 80186a4:	e77d      	b.n	80185a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80186a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80186aa:	fa1f f08a 	uxth.w	r0, sl
 80186ae:	4552      	cmp	r2, sl
 80186b0:	9000      	str	r0, [sp, #0]
 80186b2:	da12      	bge.n	80186da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 80186b4:	9301      	str	r3, [sp, #4]
 80186b6:	9b00      	ldr	r3, [sp, #0]
 80186b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80186bc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80186c0:	1a9a      	subs	r2, r3, r2
 80186c2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80186c6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80186ca:	f8ad 2016 	strh.w	r2, [sp, #22]
 80186ce:	69ea      	ldr	r2, [r5, #28]
 80186d0:	4631      	mov	r1, r6
 80186d2:	4640      	mov	r0, r8
 80186d4:	f7ff ff4c 	bl	8018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186d8:	9b01      	ldr	r3, [sp, #4]
 80186da:	f9b4 2000 	ldrsh.w	r2, [r4]
 80186de:	429a      	cmp	r2, r3
 80186e0:	b29f      	uxth	r7, r3
 80186e2:	da0d      	bge.n	8018700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 80186e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80186e8:	1aba      	subs	r2, r7, r2
 80186ea:	f8ad a012 	strh.w	sl, [sp, #18]
 80186ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 80186f2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80186f6:	69ea      	ldr	r2, [r5, #28]
 80186f8:	4631      	mov	r1, r6
 80186fa:	4640      	mov	r0, r8
 80186fc:	f7ff ff38 	bl	8018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018700:	8822      	ldrh	r2, [r4, #0]
 8018702:	88a3      	ldrh	r3, [r4, #4]
 8018704:	445f      	add	r7, fp
 8018706:	4413      	add	r3, r2
 8018708:	b29b      	uxth	r3, r3
 801870a:	b2bf      	uxth	r7, r7
 801870c:	b23a      	sxth	r2, r7
 801870e:	b219      	sxth	r1, r3
 8018710:	4291      	cmp	r1, r2
 8018712:	dd0d      	ble.n	8018730 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 8018714:	1bdb      	subs	r3, r3, r7
 8018716:	f8ad 2010 	strh.w	r2, [sp, #16]
 801871a:	f8ad a012 	strh.w	sl, [sp, #18]
 801871e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018722:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018726:	69ea      	ldr	r2, [r5, #28]
 8018728:	4631      	mov	r1, r6
 801872a:	4640      	mov	r0, r8
 801872c:	f7ff ff20 	bl	8018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018730:	88e2      	ldrh	r2, [r4, #6]
 8018732:	8863      	ldrh	r3, [r4, #2]
 8018734:	4413      	add	r3, r2
 8018736:	9a00      	ldr	r2, [sp, #0]
 8018738:	444a      	add	r2, r9
 801873a:	b29b      	uxth	r3, r3
 801873c:	fa1f f982 	uxth.w	r9, r2
 8018740:	fa0f f289 	sxth.w	r2, r9
 8018744:	b219      	sxth	r1, r3
 8018746:	428a      	cmp	r2, r1
 8018748:	da83      	bge.n	8018652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801874a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801874e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018752:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018756:	eba3 0309 	sub.w	r3, r3, r9
 801875a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801875e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018762:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018766:	69ea      	ldr	r2, [r5, #28]
 8018768:	4631      	mov	r1, r6
 801876a:	e76f      	b.n	801864c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801876c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801876c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801876e:	aa02      	add	r2, sp, #8
 8018770:	2300      	movs	r3, #0
 8018772:	f842 3d04 	str.w	r3, [r2, #-4]!
 8018776:	4604      	mov	r4, r0
 8018778:	3004      	adds	r0, #4
 801877a:	460d      	mov	r5, r1
 801877c:	f7fc f856 	bl	801482c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018780:	9a01      	ldr	r2, [sp, #4]
 8018782:	b11a      	cbz	r2, 801878c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8018784:	4629      	mov	r1, r5
 8018786:	4620      	mov	r0, r4
 8018788:	f7ff fef2 	bl	8018570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801878c:	b003      	add	sp, #12
 801878e:	bd30      	pop	{r4, r5, pc}

08018790 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018792:	4602      	mov	r2, r0
 8018794:	4604      	mov	r4, r0
 8018796:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801879a:	460d      	mov	r5, r1
 801879c:	6851      	ldr	r1, [r2, #4]
 801879e:	466b      	mov	r3, sp
 80187a0:	c303      	stmia	r3!, {r0, r1}
 80187a2:	4629      	mov	r1, r5
 80187a4:	4668      	mov	r0, sp
 80187a6:	f7fb ff69 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 80187aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80187ae:	4669      	mov	r1, sp
 80187b0:	b123      	cbz	r3, 80187bc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80187b2:	4620      	mov	r0, r4
 80187b4:	f7ff ffda 	bl	801876c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80187b8:	b003      	add	sp, #12
 80187ba:	bd30      	pop	{r4, r5, pc}
 80187bc:	1d20      	adds	r0, r4, #4
 80187be:	f7fb fffc 	bl	80147ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80187c2:	e7f9      	b.n	80187b8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080187c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80187c4:	680a      	ldr	r2, [r1, #0]
 80187c6:	460b      	mov	r3, r1
 80187c8:	6992      	ldr	r2, [r2, #24]
 80187ca:	1d01      	adds	r1, r0, #4
 80187cc:	4618      	mov	r0, r3
 80187ce:	4710      	bx	r2

080187d0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80187d0:	b510      	push	{r4, lr}
 80187d2:	4298      	cmp	r0, r3
 80187d4:	eb01 0402 	add.w	r4, r1, r2
 80187d8:	b224      	sxth	r4, r4
 80187da:	d22c      	bcs.n	8018836 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 80187dc:	b35b      	cbz	r3, 8018836 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 80187de:	ee07 0a90 	vmov	s15, r0
 80187e2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80187e6:	ee07 3a90 	vmov	s15, r3
 80187ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80187ee:	ee07 2a90 	vmov	s15, r2
 80187f2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80187f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80187fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80187fe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018802:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018806:	ee07 1a90 	vmov	s15, r1
 801880a:	eee5 6a87 	vfma.f32	s13, s11, s14
 801880e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018812:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018816:	eee6 7a26 	vfma.f32	s15, s12, s13
 801881a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018822:	bfcc      	ite	gt
 8018824:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018828:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801882c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018830:	ee17 3a90 	vmov	r3, s15
 8018834:	b21c      	sxth	r4, r3
 8018836:	4620      	mov	r0, r4
 8018838:	bd10      	pop	{r4, pc}

0801883a <_ZN8touchgfx12TextProviderC1Ev>:
 801883a:	b510      	push	{r4, lr}
 801883c:	2300      	movs	r3, #0
 801883e:	2201      	movs	r2, #1
 8018840:	4604      	mov	r4, r0
 8018842:	e9c0 3300 	strd	r3, r3, [r0]
 8018846:	60c3      	str	r3, [r0, #12]
 8018848:	7403      	strb	r3, [r0, #16]
 801884a:	82c3      	strh	r3, [r0, #22]
 801884c:	8303      	strh	r3, [r0, #24]
 801884e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018850:	8603      	strh	r3, [r0, #48]	; 0x30
 8018852:	86c3      	strh	r3, [r0, #54]	; 0x36
 8018854:	8703      	strh	r3, [r0, #56]	; 0x38
 8018856:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018858:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801885c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018860:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8018864:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8018868:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801886c:	f7f9 f890 	bl	8011990 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018870:	4620      	mov	r0, r4
 8018872:	bd10      	pop	{r4, pc}

08018874 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018874:	b530      	push	{r4, r5, lr}
 8018876:	2500      	movs	r5, #0
 8018878:	2401      	movs	r4, #1
 801887a:	6843      	ldr	r3, [r0, #4]
 801887c:	b913      	cbnz	r3, 8018884 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801887e:	6803      	ldr	r3, [r0, #0]
 8018880:	b1f3      	cbz	r3, 80188c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8018882:	6043      	str	r3, [r0, #4]
 8018884:	7c03      	ldrb	r3, [r0, #16]
 8018886:	b143      	cbz	r3, 801889a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018888:	68c3      	ldr	r3, [r0, #12]
 801888a:	b12b      	cbz	r3, 8018898 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801888c:	881a      	ldrh	r2, [r3, #0]
 801888e:	b11a      	cbz	r2, 8018898 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018890:	1c9a      	adds	r2, r3, #2
 8018892:	60c2      	str	r2, [r0, #12]
 8018894:	8818      	ldrh	r0, [r3, #0]
 8018896:	bd30      	pop	{r4, r5, pc}
 8018898:	7405      	strb	r5, [r0, #16]
 801889a:	6843      	ldr	r3, [r0, #4]
 801889c:	8819      	ldrh	r1, [r3, #0]
 801889e:	b179      	cbz	r1, 80188c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80188a0:	1c9a      	adds	r2, r3, #2
 80188a2:	2902      	cmp	r1, #2
 80188a4:	6042      	str	r2, [r0, #4]
 80188a6:	d1f5      	bne.n	8018894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80188a8:	6883      	ldr	r3, [r0, #8]
 80188aa:	1d1a      	adds	r2, r3, #4
 80188ac:	6082      	str	r2, [r0, #8]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	60c3      	str	r3, [r0, #12]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d0e1      	beq.n	801887a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d0de      	beq.n	801887a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80188bc:	7404      	strb	r4, [r0, #16]
 80188be:	e7dc      	b.n	801887a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80188c0:	2000      	movs	r0, #0
 80188c2:	e7e8      	b.n	8018896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080188c4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80188c4:	b410      	push	{r4}
 80188c6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80188c8:	2300      	movs	r3, #0
 80188ca:	6082      	str	r2, [r0, #8]
 80188cc:	6001      	str	r1, [r0, #0]
 80188ce:	6043      	str	r3, [r0, #4]
 80188d0:	60c3      	str	r3, [r0, #12]
 80188d2:	7403      	strb	r3, [r0, #16]
 80188d4:	8603      	strh	r3, [r0, #48]	; 0x30
 80188d6:	8303      	strh	r3, [r0, #24]
 80188d8:	8703      	strh	r3, [r0, #56]	; 0x38
 80188da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188de:	f7f9 b857 	b.w	8011990 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080188e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80188e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188e4:	4605      	mov	r5, r0
 80188e6:	4608      	mov	r0, r1
 80188e8:	b1e9      	cbz	r1, 8018926 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80188ea:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80188ee:	460b      	mov	r3, r1
 80188f0:	f101 0708 	add.w	r7, r1, #8
 80188f4:	4622      	mov	r2, r4
 80188f6:	6818      	ldr	r0, [r3, #0]
 80188f8:	6859      	ldr	r1, [r3, #4]
 80188fa:	4626      	mov	r6, r4
 80188fc:	c603      	stmia	r6!, {r0, r1}
 80188fe:	3308      	adds	r3, #8
 8018900:	42bb      	cmp	r3, r7
 8018902:	4634      	mov	r4, r6
 8018904:	d1f7      	bne.n	80188f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018906:	6818      	ldr	r0, [r3, #0]
 8018908:	6030      	str	r0, [r6, #0]
 801890a:	889b      	ldrh	r3, [r3, #4]
 801890c:	80b3      	strh	r3, [r6, #4]
 801890e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8018912:	015b      	lsls	r3, r3, #5
 8018914:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018918:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801891c:	430b      	orrs	r3, r1
 801891e:	425b      	negs	r3, r3
 8018920:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8018924:	4610      	mov	r0, r2
 8018926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018928 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	460c      	mov	r4, r1
 801892c:	6811      	ldr	r1, [r2, #0]
 801892e:	4610      	mov	r0, r2
 8018930:	68cd      	ldr	r5, [r1, #12]
 8018932:	4619      	mov	r1, r3
 8018934:	47a8      	blx	r5
 8018936:	2800      	cmp	r0, #0
 8018938:	bf08      	it	eq
 801893a:	4620      	moveq	r0, r4
 801893c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018942:	4604      	mov	r4, r0
 8018944:	4615      	mov	r5, r2
 8018946:	4608      	mov	r0, r1
 8018948:	b93a      	cbnz	r2, 801895a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801894a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801894e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8018952:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8018956:	4628      	mov	r0, r5
 8018958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801895a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801895e:	8893      	ldrh	r3, [r2, #4]
 8018960:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018964:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018968:	79ee      	ldrb	r6, [r5, #7]
 801896a:	4316      	orrs	r6, r2
 801896c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8018970:	189a      	adds	r2, r3, r2
 8018972:	b291      	uxth	r1, r2
 8018974:	291d      	cmp	r1, #29
 8018976:	b2b7      	uxth	r7, r6
 8018978:	f200 8083 	bhi.w	8018a82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801897c:	2201      	movs	r2, #1
 801897e:	408a      	lsls	r2, r1
 8018980:	4978      	ldr	r1, [pc, #480]	; (8018b64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8018982:	420a      	tst	r2, r1
 8018984:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8018988:	d12d      	bne.n	80189e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801898a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801898e:	d078      	beq.n	8018a82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8018990:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8018994:	462b      	mov	r3, r5
 8018996:	f105 0e08 	add.w	lr, r5, #8
 801899a:	4615      	mov	r5, r2
 801899c:	6818      	ldr	r0, [r3, #0]
 801899e:	6859      	ldr	r1, [r3, #4]
 80189a0:	4694      	mov	ip, r2
 80189a2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80189a6:	3308      	adds	r3, #8
 80189a8:	4573      	cmp	r3, lr
 80189aa:	4662      	mov	r2, ip
 80189ac:	d1f6      	bne.n	801899c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 80189ae:	6818      	ldr	r0, [r3, #0]
 80189b0:	f8cc 0000 	str.w	r0, [ip]
 80189b4:	889b      	ldrh	r3, [r3, #4]
 80189b6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80189ba:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80189be:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80189c2:	b2b3      	uxth	r3, r6
 80189c4:	1aca      	subs	r2, r1, r3
 80189c6:	b292      	uxth	r2, r2
 80189c8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80189cc:	10d2      	asrs	r2, r2, #3
 80189ce:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80189d2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80189d6:	4302      	orrs	r2, r0
 80189d8:	1bcf      	subs	r7, r1, r7
 80189da:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80189de:	1afb      	subs	r3, r7, r3
 80189e0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80189e4:	e7b7      	b.n	8018956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80189e6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80189e8:	b92b      	cbnz	r3, 80189f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80189ea:	4b5f      	ldr	r3, [pc, #380]	; (8018b68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80189ec:	4a5f      	ldr	r2, [pc, #380]	; (8018b6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80189ee:	4860      	ldr	r0, [pc, #384]	; (8018b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80189f0:	21c0      	movs	r1, #192	; 0xc0
 80189f2:	f00c fa0b 	bl	8024e0c <__assert_func>
 80189f6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80189f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80189fc:	8b59      	ldrh	r1, [r3, #26]
 80189fe:	f640 6333 	movw	r3, #3635	; 0xe33
 8018a02:	4299      	cmp	r1, r3
 8018a04:	d110      	bne.n	8018a28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8018a06:	6803      	ldr	r3, [r0, #0]
 8018a08:	68db      	ldr	r3, [r3, #12]
 8018a0a:	4798      	blx	r3
 8018a0c:	7b41      	ldrb	r1, [r0, #13]
 8018a0e:	00cb      	lsls	r3, r1, #3
 8018a10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a14:	7a03      	ldrb	r3, [r0, #8]
 8018a16:	0648      	lsls	r0, r1, #25
 8018a18:	ea43 0302 	orr.w	r3, r3, r2
 8018a1c:	bf44      	itt	mi
 8018a1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a22:	b21b      	sxthmi	r3, r3
 8018a24:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018a28:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8018a2c:	443b      	add	r3, r7
 8018a2e:	4433      	add	r3, r6
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8018a36:	462a      	mov	r2, r5
 8018a38:	f105 0c08 	add.w	ip, r5, #8
 8018a3c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018a40:	4635      	mov	r5, r6
 8018a42:	6810      	ldr	r0, [r2, #0]
 8018a44:	6851      	ldr	r1, [r2, #4]
 8018a46:	4637      	mov	r7, r6
 8018a48:	c703      	stmia	r7!, {r0, r1}
 8018a4a:	3208      	adds	r2, #8
 8018a4c:	4562      	cmp	r2, ip
 8018a4e:	463e      	mov	r6, r7
 8018a50:	d1f7      	bne.n	8018a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8018a52:	6810      	ldr	r0, [r2, #0]
 8018a54:	6038      	str	r0, [r7, #0]
 8018a56:	8892      	ldrh	r2, [r2, #4]
 8018a58:	80ba      	strh	r2, [r7, #4]
 8018a5a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018a5e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018a62:	10db      	asrs	r3, r3, #3
 8018a64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018a68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018a6c:	4313      	orrs	r3, r2
 8018a6e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018a72:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8018a76:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018a7a:	1a9b      	subs	r3, r3, r2
 8018a7c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8018a80:	e769      	b.n	8018956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018a82:	f023 0204 	bic.w	r2, r3, #4
 8018a86:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018a8a:	428a      	cmp	r2, r1
 8018a8c:	d003      	beq.n	8018a96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8018a8e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018a92:	4293      	cmp	r3, r2
 8018a94:	d120      	bne.n	8018ad8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8018a96:	3b01      	subs	r3, #1
 8018a98:	4602      	mov	r2, r0
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	f7ff ff42 	bl	8018928 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018aa4:	7b41      	ldrb	r1, [r0, #13]
 8018aa6:	00cb      	lsls	r3, r1, #3
 8018aa8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018aac:	7a03      	ldrb	r3, [r0, #8]
 8018aae:	0649      	lsls	r1, r1, #25
 8018ab0:	ea43 0302 	orr.w	r3, r3, r2
 8018ab4:	bf44      	itt	mi
 8018ab6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018aba:	b21b      	sxthmi	r3, r3
 8018abc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018ac0:	7b6b      	ldrb	r3, [r5, #13]
 8018ac2:	7aaa      	ldrb	r2, [r5, #10]
 8018ac4:	005b      	lsls	r3, r3, #1
 8018ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018aca:	4313      	orrs	r3, r2
 8018acc:	115a      	asrs	r2, r3, #5
 8018ace:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018ad2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018ad6:	e036      	b.n	8018b46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8018ad8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018adc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018ae0:	7a2a      	ldrb	r2, [r5, #8]
 8018ae2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018ae6:	ea42 0201 	orr.w	r2, r2, r1
 8018aea:	bf1c      	itt	ne
 8018aec:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018af0:	b212      	sxthne	r2, r2
 8018af2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8018af6:	f640 6109 	movw	r1, #3593	; 0xe09
 8018afa:	f023 0210 	bic.w	r2, r3, #16
 8018afe:	428a      	cmp	r2, r1
 8018b00:	d003      	beq.n	8018b0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8018b02:	f640 6213 	movw	r2, #3603	; 0xe13
 8018b06:	4293      	cmp	r3, r2
 8018b08:	d12a      	bne.n	8018b60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8018b0a:	7b6e      	ldrb	r6, [r5, #13]
 8018b0c:	0076      	lsls	r6, r6, #1
 8018b0e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018b12:	7aae      	ldrb	r6, [r5, #10]
 8018b14:	4316      	orrs	r6, r2
 8018b16:	f640 6213 	movw	r2, #3603	; 0xe13
 8018b1a:	4293      	cmp	r3, r2
 8018b1c:	bf18      	it	ne
 8018b1e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018b22:	4602      	mov	r2, r0
 8018b24:	bf14      	ite	ne
 8018b26:	b29b      	uxthne	r3, r3
 8018b28:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018b2c:	4629      	mov	r1, r5
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f7ff fefa 	bl	8018928 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018b34:	7b43      	ldrb	r3, [r0, #13]
 8018b36:	7a82      	ldrb	r2, [r0, #10]
 8018b38:	005b      	lsls	r3, r3, #1
 8018b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b3e:	4313      	orrs	r3, r2
 8018b40:	1af6      	subs	r6, r6, r3
 8018b42:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8018b46:	7b69      	ldrb	r1, [r5, #13]
 8018b48:	00cb      	lsls	r3, r1, #3
 8018b4a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018b4e:	7a2b      	ldrb	r3, [r5, #8]
 8018b50:	4313      	orrs	r3, r2
 8018b52:	064a      	lsls	r2, r1, #25
 8018b54:	bf44      	itt	mi
 8018b56:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b5a:	b21b      	sxthmi	r3, r3
 8018b5c:	1bdb      	subs	r3, r3, r7
 8018b5e:	e73f      	b.n	80189e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8018b60:	2300      	movs	r3, #0
 8018b62:	e7b6      	b.n	8018ad2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8018b64:	3fc00079 	.word	0x3fc00079
 8018b68:	080539a4 	.word	0x080539a4
 8018b6c:	08053c16 	.word	0x08053c16
 8018b70:	080539ad 	.word	0x080539ad

08018b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b78:	4604      	mov	r4, r0
 8018b7a:	b942      	cbnz	r2, 8018b8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b80:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8018b84:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018b88:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018b8c:	e046      	b.n	8018c1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018b8e:	7b51      	ldrb	r1, [r2, #13]
 8018b90:	8893      	ldrh	r3, [r2, #4]
 8018b92:	010f      	lsls	r7, r1, #4
 8018b94:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018b98:	79d7      	ldrb	r7, [r2, #7]
 8018b9a:	4307      	orrs	r7, r0
 8018b9c:	2f04      	cmp	r7, #4
 8018b9e:	b2bd      	uxth	r5, r7
 8018ba0:	bfcc      	ite	gt
 8018ba2:	08bf      	lsrgt	r7, r7, #2
 8018ba4:	2701      	movle	r7, #1
 8018ba6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018baa:	f200 80ab 	bhi.w	8018d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8018bae:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018bb2:	4283      	cmp	r3, r0
 8018bb4:	d216      	bcs.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018bb6:	f240 605b 	movw	r0, #1627	; 0x65b
 8018bba:	4283      	cmp	r3, r0
 8018bbc:	d859      	bhi.n	8018c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8018bbe:	f240 6057 	movw	r0, #1623	; 0x657
 8018bc2:	4283      	cmp	r3, r0
 8018bc4:	d20e      	bcs.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018bc6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018bca:	d24a      	bcs.n	8018c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8018bcc:	f240 604e 	movw	r0, #1614	; 0x64e
 8018bd0:	4283      	cmp	r3, r0
 8018bd2:	d207      	bcs.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018bd4:	f240 601a 	movw	r0, #1562	; 0x61a
 8018bd8:	4283      	cmp	r3, r0
 8018bda:	d02a      	beq.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018bdc:	d821      	bhi.n	8018c22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8018bde:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018be2:	d35b      	bcc.n	8018c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018be4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8018be8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018bec:	f040 80d0 	bne.w	8018d90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018bf0:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8018bf4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018bf8:	f040 80ca 	bne.w	8018d90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018bfc:	00cb      	lsls	r3, r1, #3
 8018bfe:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018c02:	7a13      	ldrb	r3, [r2, #8]
 8018c04:	0649      	lsls	r1, r1, #25
 8018c06:	ea43 0300 	orr.w	r3, r3, r0
 8018c0a:	bf44      	itt	mi
 8018c0c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c10:	b21b      	sxthmi	r3, r3
 8018c12:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018c16:	1b5d      	subs	r5, r3, r5
 8018c18:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018c1c:	4610      	mov	r0, r2
 8018c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c22:	f240 604b 	movw	r0, #1611	; 0x64b
 8018c26:	4283      	cmp	r3, r0
 8018c28:	d338      	bcc.n	8018c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018c2a:	f240 604c 	movw	r0, #1612	; 0x64c
 8018c2e:	4283      	cmp	r3, r0
 8018c30:	d9d8      	bls.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c32:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8018c36:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8018c3a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018c3e:	f040 80f1 	bne.w	8018e24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8018c42:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018c46:	f040 80ed 	bne.w	8018e24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8018c4a:	00cb      	lsls	r3, r1, #3
 8018c4c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018c50:	7a13      	ldrb	r3, [r2, #8]
 8018c52:	064e      	lsls	r6, r1, #25
 8018c54:	ea43 0300 	orr.w	r3, r3, r0
 8018c58:	bf44      	itt	mi
 8018c5a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c5e:	b21b      	sxthmi	r3, r3
 8018c60:	e7d9      	b.n	8018c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8018c62:	f240 6054 	movw	r0, #1620	; 0x654
 8018c66:	4283      	cmp	r3, r0
 8018c68:	d8e3      	bhi.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c6a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018c6e:	d9e0      	bls.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c70:	e7b8      	b.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c72:	f240 6074 	movw	r0, #1652	; 0x674
 8018c76:	4283      	cmp	r3, r0
 8018c78:	d0b4      	beq.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c7a:	d82d      	bhi.n	8018cd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8018c7c:	f240 605e 	movw	r0, #1630	; 0x65e
 8018c80:	4283      	cmp	r3, r0
 8018c82:	d804      	bhi.n	8018c8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8018c84:	f240 605d 	movw	r0, #1629	; 0x65d
 8018c88:	4283      	cmp	r3, r0
 8018c8a:	d3d2      	bcc.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c8c:	e7aa      	b.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c8e:	f240 605f 	movw	r0, #1631	; 0x65f
 8018c92:	4283      	cmp	r3, r0
 8018c94:	d0cd      	beq.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018c96:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018c9a:	d0a3      	beq.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018c9c:	00cb      	lsls	r3, r1, #3
 8018c9e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018ca2:	7a13      	ldrb	r3, [r2, #8]
 8018ca4:	0649      	lsls	r1, r1, #25
 8018ca6:	ea43 0300 	orr.w	r3, r3, r0
 8018caa:	bf44      	itt	mi
 8018cac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018cb0:	b21b      	sxthmi	r3, r3
 8018cb2:	1b5d      	subs	r5, r3, r5
 8018cb4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018cb8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018cbc:	7b53      	ldrb	r3, [r2, #13]
 8018cbe:	015b      	lsls	r3, r3, #5
 8018cc0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018cc4:	7993      	ldrb	r3, [r2, #6]
 8018cc6:	430b      	orrs	r3, r1
 8018cc8:	005b      	lsls	r3, r3, #1
 8018cca:	2105      	movs	r1, #5
 8018ccc:	fb93 f3f1 	sdiv	r3, r3, r1
 8018cd0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018cd4:	440b      	add	r3, r1
 8018cd6:	e757      	b.n	8018b88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018cd8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018cdc:	4283      	cmp	r3, r0
 8018cde:	d809      	bhi.n	8018cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8018ce0:	f240 60df 	movw	r0, #1759	; 0x6df
 8018ce4:	4283      	cmp	r3, r0
 8018ce6:	f4bf af7d 	bcs.w	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018cea:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018cee:	2b05      	cmp	r3, #5
 8018cf0:	d8d4      	bhi.n	8018c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018cf2:	e777      	b.n	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018cf4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018cf8:	4283      	cmp	r3, r0
 8018cfa:	d09a      	beq.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018cfc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018d00:	4283      	cmp	r3, r0
 8018d02:	e7ca      	b.n	8018c9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8018d04:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018d08:	d22b      	bcs.n	8018d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8018d0a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018d0e:	4283      	cmp	r3, r0
 8018d10:	d28f      	bcs.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d12:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018d16:	4283      	cmp	r3, r0
 8018d18:	d816      	bhi.n	8018d48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8018d1a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018d1e:	4283      	cmp	r3, r0
 8018d20:	f4bf af60 	bcs.w	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d24:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018d28:	4283      	cmp	r3, r0
 8018d2a:	d80a      	bhi.n	8018d42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8018d2c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018d30:	4283      	cmp	r3, r0
 8018d32:	f4bf af57 	bcs.w	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d36:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018d3a:	4283      	cmp	r3, r0
 8018d3c:	f43f af79 	beq.w	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d40:	e7ac      	b.n	8018c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018d42:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018d46:	e7f8      	b.n	8018d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8018d48:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018d4c:	4283      	cmp	r3, r0
 8018d4e:	d802      	bhi.n	8018d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8018d50:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018d54:	e798      	b.n	8018c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8018d56:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018d5a:	4283      	cmp	r3, r0
 8018d5c:	f47f af42 	bne.w	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d60:	e767      	b.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d62:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018d66:	4283      	cmp	r3, r0
 8018d68:	f43f af63 	beq.w	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d6c:	d802      	bhi.n	8018d74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8018d6e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018d72:	e7f2      	b.n	8018d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8018d74:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018d78:	4283      	cmp	r3, r0
 8018d7a:	d805      	bhi.n	8018d88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8018d7c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018d80:	4283      	cmp	r3, r0
 8018d82:	f4ff af2f 	bcc.w	8018be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d86:	e754      	b.n	8018c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d88:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018d8c:	4283      	cmp	r3, r0
 8018d8e:	e7af      	b.n	8018cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8018d90:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8018d94:	4617      	mov	r7, r2
 8018d96:	f102 0808 	add.w	r8, r2, #8
 8018d9a:	4666      	mov	r6, ip
 8018d9c:	6838      	ldr	r0, [r7, #0]
 8018d9e:	6879      	ldr	r1, [r7, #4]
 8018da0:	46e6      	mov	lr, ip
 8018da2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018da6:	3708      	adds	r7, #8
 8018da8:	4547      	cmp	r7, r8
 8018daa:	46f4      	mov	ip, lr
 8018dac:	d1f6      	bne.n	8018d9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8018dae:	6838      	ldr	r0, [r7, #0]
 8018db0:	f8ce 0000 	str.w	r0, [lr]
 8018db4:	88b9      	ldrh	r1, [r7, #4]
 8018db6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018dba:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8018dbe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018dc2:	d009      	beq.n	8018dd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8018dc4:	7b51      	ldrb	r1, [r2, #13]
 8018dc6:	7992      	ldrb	r2, [r2, #6]
 8018dc8:	0149      	lsls	r1, r1, #5
 8018dca:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018dce:	4311      	orrs	r1, r2
 8018dd0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018dd4:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8018dd8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ddc:	d00d      	beq.n	8018dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8018dde:	442b      	add	r3, r5
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018de6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018dea:	10db      	asrs	r3, r3, #3
 8018dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018df4:	4313      	orrs	r3, r2
 8018df6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018dfa:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018dfe:	00cb      	lsls	r3, r1, #3
 8018e00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018e04:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018e08:	064f      	lsls	r7, r1, #25
 8018e0a:	ea43 0302 	orr.w	r3, r3, r2
 8018e0e:	bf44      	itt	mi
 8018e10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018e14:	b21b      	sxthmi	r3, r3
 8018e16:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8018e1a:	1b5d      	subs	r5, r3, r5
 8018e1c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8018e20:	4632      	mov	r2, r6
 8018e22:	e6fb      	b.n	8018c1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018e24:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8018e28:	4694      	mov	ip, r2
 8018e2a:	f102 0908 	add.w	r9, r2, #8
 8018e2e:	4676      	mov	r6, lr
 8018e30:	f8dc 0000 	ldr.w	r0, [ip]
 8018e34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8018e38:	46f0      	mov	r8, lr
 8018e3a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018e3e:	f10c 0c08 	add.w	ip, ip, #8
 8018e42:	45cc      	cmp	ip, r9
 8018e44:	46c6      	mov	lr, r8
 8018e46:	d1f3      	bne.n	8018e30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8018e48:	f8dc 0000 	ldr.w	r0, [ip]
 8018e4c:	f8c8 0000 	str.w	r0, [r8]
 8018e50:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8018e54:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018e58:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8018e5c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018e60:	d009      	beq.n	8018e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8018e62:	7b51      	ldrb	r1, [r2, #13]
 8018e64:	7992      	ldrb	r2, [r2, #6]
 8018e66:	0149      	lsls	r1, r1, #5
 8018e68:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018e6c:	4311      	orrs	r1, r2
 8018e6e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018e72:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8018e76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018e7a:	d00d      	beq.n	8018e98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018e7c:	1bdb      	subs	r3, r3, r7
 8018e7e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018e88:	10db      	asrs	r3, r3, #3
 8018e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018e92:	4313      	orrs	r3, r2
 8018e94:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8018e98:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018e9c:	00cb      	lsls	r3, r1, #3
 8018e9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018ea2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018ea6:	0648      	lsls	r0, r1, #25
 8018ea8:	ea43 0302 	orr.w	r3, r3, r2
 8018eac:	bf44      	itt	mi
 8018eae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018eb2:	b21b      	sxthmi	r3, r3
 8018eb4:	e7b1      	b.n	8018e1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08018eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ebc:	461e      	mov	r6, r3
 8018ebe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	4617      	mov	r7, r2
 8018ec4:	b92b      	cbnz	r3, 8018ed2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8018ec6:	4b25      	ldr	r3, [pc, #148]	; (8018f5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8018ec8:	4a25      	ldr	r2, [pc, #148]	; (8018f60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8018eca:	4826      	ldr	r0, [pc, #152]	; (8018f64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8018ecc:	21c0      	movs	r1, #192	; 0xc0
 8018ece:	f00b ff9d 	bl	8024e0c <__assert_func>
 8018ed2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018ed4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018ed8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018edc:	f7f8 fcb4 	bl	8011848 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018ee0:	4605      	mov	r5, r0
 8018ee2:	b918      	cbnz	r0, 8018eec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8018ee4:	6030      	str	r0, [r6, #0]
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	4601      	mov	r1, r0
 8018ef0:	68db      	ldr	r3, [r3, #12]
 8018ef2:	4638      	mov	r0, r7
 8018ef4:	4798      	blx	r3
 8018ef6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018efe:	4602      	mov	r2, r0
 8018f00:	6030      	str	r0, [r6, #0]
 8018f02:	d213      	bcs.n	8018f2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8018f04:	4643      	mov	r3, r8
 8018f06:	4639      	mov	r1, r7
 8018f08:	4620      	mov	r0, r4
 8018f0a:	f7ff fe33 	bl	8018b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018f0e:	6030      	str	r0, [r6, #0]
 8018f10:	6833      	ldr	r3, [r6, #0]
 8018f12:	b143      	cbz	r3, 8018f26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8018f14:	7b5a      	ldrb	r2, [r3, #13]
 8018f16:	7a9b      	ldrb	r3, [r3, #10]
 8018f18:	0052      	lsls	r2, r2, #1
 8018f1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018f1e:	4313      	orrs	r3, r2
 8018f20:	bf0c      	ite	eq
 8018f22:	2301      	moveq	r3, #1
 8018f24:	2300      	movne	r3, #0
 8018f26:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018f2a:	e7dc      	b.n	8018ee6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8018f2c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	2b7f      	cmp	r3, #127	; 0x7f
 8018f34:	d804      	bhi.n	8018f40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8018f36:	4639      	mov	r1, r7
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f7ff fd01 	bl	8018940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018f3e:	e7e6      	b.n	8018f0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018f40:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d0e3      	beq.n	8018f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018f48:	f640 1302 	movw	r3, #2306	; 0x902
 8018f4c:	429d      	cmp	r5, r3
 8018f4e:	d1df      	bne.n	8018f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018f50:	4601      	mov	r1, r0
 8018f52:	4620      	mov	r0, r4
 8018f54:	f7ff fcc5 	bl	80188e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018f58:	e7d9      	b.n	8018f0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018f5a:	bf00      	nop
 8018f5c:	080539a4 	.word	0x080539a4
 8018f60:	08053c16 	.word	0x08053c16
 8018f64:	080539ad 	.word	0x080539ad

08018f68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f6c:	461e      	mov	r6, r3
 8018f6e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018f70:	4604      	mov	r4, r0
 8018f72:	4617      	mov	r7, r2
 8018f74:	b92b      	cbnz	r3, 8018f82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8018f76:	4b26      	ldr	r3, [pc, #152]	; (8019010 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8018f78:	4a26      	ldr	r2, [pc, #152]	; (8019014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8018f7a:	4827      	ldr	r0, [pc, #156]	; (8019018 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8018f7c:	21c0      	movs	r1, #192	; 0xc0
 8018f7e:	f00b ff45 	bl	8024e0c <__assert_func>
 8018f82:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018f84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018f88:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018f8c:	f7f8 fc5c 	bl	8011848 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018f90:	4605      	mov	r5, r0
 8018f92:	b918      	cbnz	r0, 8018f9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8018f94:	6030      	str	r0, [r6, #0]
 8018f96:	4628      	mov	r0, r5
 8018f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	4601      	mov	r1, r0
 8018fa0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018faa:	47c8      	blx	r9
 8018fac:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	6030      	str	r0, [r6, #0]
 8018fb8:	d213      	bcs.n	8018fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8018fba:	4643      	mov	r3, r8
 8018fbc:	4639      	mov	r1, r7
 8018fbe:	4620      	mov	r0, r4
 8018fc0:	f7ff fdd8 	bl	8018b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018fc4:	6030      	str	r0, [r6, #0]
 8018fc6:	6833      	ldr	r3, [r6, #0]
 8018fc8:	b143      	cbz	r3, 8018fdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8018fca:	7b5a      	ldrb	r2, [r3, #13]
 8018fcc:	7a9b      	ldrb	r3, [r3, #10]
 8018fce:	0052      	lsls	r2, r2, #1
 8018fd0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018fd4:	4313      	orrs	r3, r2
 8018fd6:	bf0c      	ite	eq
 8018fd8:	2301      	moveq	r3, #1
 8018fda:	2300      	movne	r3, #0
 8018fdc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018fe0:	e7d9      	b.n	8018f96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8018fe2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018fe6:	b29b      	uxth	r3, r3
 8018fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8018fea:	d804      	bhi.n	8018ff6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8018fec:	4639      	mov	r1, r7
 8018fee:	4620      	mov	r0, r4
 8018ff0:	f7ff fca6 	bl	8018940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018ff4:	e7e6      	b.n	8018fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8018ff6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d0e3      	beq.n	8018fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8018ffe:	f640 1302 	movw	r3, #2306	; 0x902
 8019002:	429d      	cmp	r5, r3
 8019004:	d1df      	bne.n	8018fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019006:	4601      	mov	r1, r0
 8019008:	4620      	mov	r0, r4
 801900a:	f7ff fc6a 	bl	80188e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801900e:	e7d9      	b.n	8018fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019010:	080539a4 	.word	0x080539a4
 8019014:	08053c16 	.word	0x08053c16
 8019018:	080539ad 	.word	0x080539ad

0801901c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801901c:	b510      	push	{r4, lr}
 801901e:	4604      	mov	r4, r0
 8019020:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019022:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019024:	b9d9      	cbnz	r1, 801905e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8019026:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019028:	2b0a      	cmp	r3, #10
 801902a:	d036      	beq.n	801909a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801902c:	4620      	mov	r0, r4
 801902e:	f7ff fc21 	bl	8018874 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019032:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019034:	2b09      	cmp	r3, #9
 8019036:	d906      	bls.n	8019046 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8019038:	4b18      	ldr	r3, [pc, #96]	; (801909c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801903a:	4a19      	ldr	r2, [pc, #100]	; (80190a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801903c:	4819      	ldr	r0, [pc, #100]	; (80190a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801903e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019042:	f00b fee3 	bl	8024e0c <__assert_func>
 8019046:	1c5a      	adds	r2, r3, #1
 8019048:	8622      	strh	r2, [r4, #48]	; 0x30
 801904a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801904c:	4413      	add	r3, r2
 801904e:	b29b      	uxth	r3, r3
 8019050:	2b09      	cmp	r3, #9
 8019052:	bf88      	it	hi
 8019054:	3b0a      	subhi	r3, #10
 8019056:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801905a:	8358      	strh	r0, [r3, #26]
 801905c:	e7e3      	b.n	8019026 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801905e:	2b0a      	cmp	r3, #10
 8019060:	d01b      	beq.n	801909a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8019062:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019064:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019068:	3901      	subs	r1, #1
 801906a:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801906c:	8721      	strh	r1, [r4, #56]	; 0x38
 801906e:	1c51      	adds	r1, r2, #1
 8019070:	b289      	uxth	r1, r1
 8019072:	2901      	cmp	r1, #1
 8019074:	bf8a      	itet	hi
 8019076:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801907a:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801907c:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801907e:	2b09      	cmp	r3, #9
 8019080:	d8da      	bhi.n	8019038 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8019082:	1c5a      	adds	r2, r3, #1
 8019084:	8622      	strh	r2, [r4, #48]	; 0x30
 8019086:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019088:	4413      	add	r3, r2
 801908a:	b29b      	uxth	r3, r3
 801908c:	2b09      	cmp	r3, #9
 801908e:	bf88      	it	hi
 8019090:	3b0a      	subhi	r3, #10
 8019092:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019096:	8358      	strh	r0, [r3, #26]
 8019098:	e7c2      	b.n	8019020 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801909a:	bd10      	pop	{r4, pc}
 801909c:	080539d9 	.word	0x080539d9
 80190a0:	08053d6c 	.word	0x08053d6c
 80190a4:	080539ad 	.word	0x080539ad

080190a8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80190a8:	b538      	push	{r3, r4, r5, lr}
 80190aa:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80190ac:	4604      	mov	r4, r0
 80190ae:	b92a      	cbnz	r2, 80190bc <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80190b0:	4b13      	ldr	r3, [pc, #76]	; (8019100 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80190b2:	4a14      	ldr	r2, [pc, #80]	; (8019104 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80190b4:	4814      	ldr	r0, [pc, #80]	; (8019108 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80190b6:	21d5      	movs	r1, #213	; 0xd5
 80190b8:	f00b fea8 	bl	8024e0c <__assert_func>
 80190bc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80190be:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80190c2:	3a01      	subs	r2, #1
 80190c4:	8b4d      	ldrh	r5, [r1, #26]
 80190c6:	8602      	strh	r2, [r0, #48]	; 0x30
 80190c8:	1c5a      	adds	r2, r3, #1
 80190ca:	b292      	uxth	r2, r2
 80190cc:	2a09      	cmp	r2, #9
 80190ce:	bf86      	itte	hi
 80190d0:	3b09      	subhi	r3, #9
 80190d2:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 80190d4:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 80190d6:	f7ff ffa1 	bl	801901c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80190da:	8b23      	ldrh	r3, [r4, #24]
 80190dc:	2b01      	cmp	r3, #1
 80190de:	bf9c      	itt	ls
 80190e0:	3301      	addls	r3, #1
 80190e2:	8323      	strhls	r3, [r4, #24]
 80190e4:	8ae3      	ldrh	r3, [r4, #22]
 80190e6:	b90b      	cbnz	r3, 80190ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80190e8:	2302      	movs	r3, #2
 80190ea:	82e3      	strh	r3, [r4, #22]
 80190ec:	8ae3      	ldrh	r3, [r4, #22]
 80190ee:	3b01      	subs	r3, #1
 80190f0:	b29b      	uxth	r3, r3
 80190f2:	82e3      	strh	r3, [r4, #22]
 80190f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80190f8:	4628      	mov	r0, r5
 80190fa:	8265      	strh	r5, [r4, #18]
 80190fc:	bd38      	pop	{r3, r4, r5, pc}
 80190fe:	bf00      	nop
 8019100:	080539a4 	.word	0x080539a4
 8019104:	08053cc1 	.word	0x08053cc1
 8019108:	080539ad 	.word	0x080539ad

0801910c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801910c:	b538      	push	{r3, r4, r5, lr}
 801910e:	428a      	cmp	r2, r1
 8019110:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8019112:	d90c      	bls.n	801912e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8019114:	b92c      	cbnz	r4, 8019122 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8019116:	4b1c      	ldr	r3, [pc, #112]	; (8019188 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8019118:	4a1c      	ldr	r2, [pc, #112]	; (801918c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801911a:	21e1      	movs	r1, #225	; 0xe1
 801911c:	481c      	ldr	r0, [pc, #112]	; (8019190 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801911e:	f00b fe75 	bl	8024e0c <__assert_func>
 8019122:	3c01      	subs	r4, #1
 8019124:	8604      	strh	r4, [r0, #48]	; 0x30
 8019126:	4b1b      	ldr	r3, [pc, #108]	; (8019194 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8019128:	4a1b      	ldr	r2, [pc, #108]	; (8019198 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801912a:	21c5      	movs	r1, #197	; 0xc5
 801912c:	e7f6      	b.n	801911c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801912e:	428c      	cmp	r4, r1
 8019130:	d203      	bcs.n	801913a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8019132:	4b1a      	ldr	r3, [pc, #104]	; (801919c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8019134:	4a1a      	ldr	r2, [pc, #104]	; (80191a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8019136:	21cb      	movs	r1, #203	; 0xcb
 8019138:	e7f0      	b.n	801911c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801913a:	1a64      	subs	r4, r4, r1
 801913c:	8604      	strh	r4, [r0, #48]	; 0x30
 801913e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8019140:	4421      	add	r1, r4
 8019142:	b289      	uxth	r1, r1
 8019144:	2909      	cmp	r1, #9
 8019146:	bf88      	it	hi
 8019148:	390a      	subhi	r1, #10
 801914a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801914c:	250a      	movs	r5, #10
 801914e:	b1ba      	cbz	r2, 8019180 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8019150:	3a01      	subs	r2, #1
 8019152:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8019154:	b292      	uxth	r2, r2
 8019156:	2909      	cmp	r1, #9
 8019158:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801915c:	d903      	bls.n	8019166 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801915e:	4b11      	ldr	r3, [pc, #68]	; (80191a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8019160:	4a11      	ldr	r2, [pc, #68]	; (80191a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8019162:	21e6      	movs	r1, #230	; 0xe6
 8019164:	e7da      	b.n	801911c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8019166:	3101      	adds	r1, #1
 8019168:	8601      	strh	r1, [r0, #48]	; 0x30
 801916a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801916c:	b901      	cbnz	r1, 8019170 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801916e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8019170:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8019172:	3901      	subs	r1, #1
 8019174:	b289      	uxth	r1, r1
 8019176:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019178:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801917c:	834c      	strh	r4, [r1, #26]
 801917e:	e7e6      	b.n	801914e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8019180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019184:	f7ff bf4a 	b.w	801901c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019188:	080539a4 	.word	0x080539a4
 801918c:	08053a9a 	.word	0x08053a9a
 8019190:	080539ad 	.word	0x080539ad
 8019194:	080539e5 	.word	0x080539e5
 8019198:	08053b44 	.word	0x08053b44
 801919c:	080539f3 	.word	0x080539f3
 80191a0:	08053e1b 	.word	0x08053e1b
 80191a4:	080539ff 	.word	0x080539ff
 80191a8:	08053a12 	.word	0x08053a12

080191ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80191ac:	3a01      	subs	r2, #1
 80191ae:	b570      	push	{r4, r5, r6, lr}
 80191b0:	b292      	uxth	r2, r2
 80191b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80191b6:	42b2      	cmp	r2, r6
 80191b8:	d019      	beq.n	80191ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80191ba:	8b04      	ldrh	r4, [r0, #24]
 80191bc:	f831 5b02 	ldrh.w	r5, [r1], #2
 80191c0:	4294      	cmp	r4, r2
 80191c2:	d805      	bhi.n	80191d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80191c4:	4b19      	ldr	r3, [pc, #100]	; (801922c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80191c6:	4a1a      	ldr	r2, [pc, #104]	; (8019230 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80191c8:	481a      	ldr	r0, [pc, #104]	; (8019234 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80191ca:	21c5      	movs	r1, #197	; 0xc5
 80191cc:	f00b fe1e 	bl	8024e0c <__assert_func>
 80191d0:	8ac4      	ldrh	r4, [r0, #22]
 80191d2:	4414      	add	r4, r2
 80191d4:	b2a4      	uxth	r4, r4
 80191d6:	2c01      	cmp	r4, #1
 80191d8:	bf88      	it	hi
 80191da:	3c02      	subhi	r4, #2
 80191dc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80191e0:	3a01      	subs	r2, #1
 80191e2:	8a64      	ldrh	r4, [r4, #18]
 80191e4:	42ac      	cmp	r4, r5
 80191e6:	b292      	uxth	r2, r2
 80191e8:	d0e5      	beq.n	80191b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80191ea:	2000      	movs	r0, #0
 80191ec:	bd70      	pop	{r4, r5, r6, pc}
 80191ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80191f2:	2400      	movs	r4, #0
 80191f4:	4413      	add	r3, r2
 80191f6:	b2a2      	uxth	r2, r4
 80191f8:	429a      	cmp	r2, r3
 80191fa:	da14      	bge.n	8019226 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80191fc:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80191fe:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019202:	4296      	cmp	r6, r2
 8019204:	d802      	bhi.n	801920c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8019206:	4b09      	ldr	r3, [pc, #36]	; (801922c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8019208:	4a0b      	ldr	r2, [pc, #44]	; (8019238 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801920a:	e7dd      	b.n	80191c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801920c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801920e:	4432      	add	r2, r6
 8019210:	b292      	uxth	r2, r2
 8019212:	2a09      	cmp	r2, #9
 8019214:	bf88      	it	hi
 8019216:	3a0a      	subhi	r2, #10
 8019218:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801921c:	3401      	adds	r4, #1
 801921e:	8b52      	ldrh	r2, [r2, #26]
 8019220:	42aa      	cmp	r2, r5
 8019222:	d0e8      	beq.n	80191f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8019224:	e7e1      	b.n	80191ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8019226:	2001      	movs	r0, #1
 8019228:	e7e0      	b.n	80191ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801922a:	bf00      	nop
 801922c:	080539e5 	.word	0x080539e5
 8019230:	08053e9f 	.word	0x08053e9f
 8019234:	080539ad 	.word	0x080539ad
 8019238:	08053b44 	.word	0x08053b44

0801923c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801923c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019240:	4605      	mov	r5, r0
 8019242:	4616      	mov	r6, r2
 8019244:	1c8c      	adds	r4, r1, #2
 8019246:	8809      	ldrh	r1, [r1, #0]
 8019248:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801924c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019250:	42b3      	cmp	r3, r6
 8019252:	d124      	bne.n	801929e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019254:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019258:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801925c:	f001 070f 	and.w	r7, r1, #15
 8019260:	f8cd 8000 	str.w	r8, [sp]
 8019264:	464b      	mov	r3, r9
 8019266:	4652      	mov	r2, sl
 8019268:	4621      	mov	r1, r4
 801926a:	4628      	mov	r0, r5
 801926c:	f7ff ff9e 	bl	80191ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019270:	4683      	mov	fp, r0
 8019272:	b168      	cbz	r0, 8019290 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019274:	eb0a 0109 	add.w	r1, sl, r9
 8019278:	4441      	add	r1, r8
 801927a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801927e:	463a      	mov	r2, r7
 8019280:	4649      	mov	r1, r9
 8019282:	4628      	mov	r0, r5
 8019284:	f7ff ff42 	bl	801910c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019288:	4658      	mov	r0, fp
 801928a:	b003      	add	sp, #12
 801928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019290:	eb07 010a 	add.w	r1, r7, sl
 8019294:	4449      	add	r1, r9
 8019296:	4441      	add	r1, r8
 8019298:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801929c:	e7d2      	b.n	8019244 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801929e:	f04f 0b00 	mov.w	fp, #0
 80192a2:	e7f1      	b.n	8019288 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080192a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80192a4:	b570      	push	{r4, r5, r6, lr}
 80192a6:	8810      	ldrh	r0, [r2, #0]
 80192a8:	4298      	cmp	r0, r3
 80192aa:	d817      	bhi.n	80192dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192ac:	1e48      	subs	r0, r1, #1
 80192ae:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80192b2:	4298      	cmp	r0, r3
 80192b4:	d312      	bcc.n	80192dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192b6:	2400      	movs	r4, #0
 80192b8:	428c      	cmp	r4, r1
 80192ba:	d20f      	bcs.n	80192dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80192bc:	1860      	adds	r0, r4, r1
 80192be:	1040      	asrs	r0, r0, #1
 80192c0:	0085      	lsls	r5, r0, #2
 80192c2:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80192c6:	42b3      	cmp	r3, r6
 80192c8:	d902      	bls.n	80192d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80192ca:	3001      	adds	r0, #1
 80192cc:	b284      	uxth	r4, r0
 80192ce:	e7f3      	b.n	80192b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80192d0:	d201      	bcs.n	80192d6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80192d2:	b281      	uxth	r1, r0
 80192d4:	e7f0      	b.n	80192b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80192d6:	442a      	add	r2, r5
 80192d8:	8850      	ldrh	r0, [r2, #2]
 80192da:	bd70      	pop	{r4, r5, r6, pc}
 80192dc:	2000      	movs	r0, #0
 80192de:	e7fc      	b.n	80192da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080192e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80192e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192e4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80192e6:	886f      	ldrh	r7, [r5, #2]
 80192e8:	4604      	mov	r4, r0
 80192ea:	087f      	lsrs	r7, r7, #1
 80192ec:	260b      	movs	r6, #11
 80192ee:	3e01      	subs	r6, #1
 80192f0:	d01b      	beq.n	801932a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80192f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80192f4:	b92b      	cbnz	r3, 8019302 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80192f6:	4b0e      	ldr	r3, [pc, #56]	; (8019330 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80192f8:	4a0e      	ldr	r2, [pc, #56]	; (8019334 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80192fa:	480f      	ldr	r0, [pc, #60]	; (8019338 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80192fc:	21c0      	movs	r1, #192	; 0xc0
 80192fe:	f00b fd85 	bl	8024e0c <__assert_func>
 8019302:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8019304:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019308:	462a      	mov	r2, r5
 801930a:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801930e:	4639      	mov	r1, r7
 8019310:	4643      	mov	r3, r8
 8019312:	4620      	mov	r0, r4
 8019314:	f7ff ffc6 	bl	80192a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019318:	b138      	cbz	r0, 801932a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801931a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801931e:	4642      	mov	r2, r8
 8019320:	4620      	mov	r0, r4
 8019322:	f7ff ff8b 	bl	801923c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019326:	2800      	cmp	r0, #0
 8019328:	d1e1      	bne.n	80192ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801932e:	bf00      	nop
 8019330:	080539a4 	.word	0x080539a4
 8019334:	08053c16 	.word	0x08053c16
 8019338:	080539ad 	.word	0x080539ad

0801933c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801933c:	4b01      	ldr	r3, [pc, #4]	; (8019344 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801933e:	6018      	str	r0, [r3, #0]
 8019340:	4770      	bx	lr
 8019342:	bf00      	nop
 8019344:	200013d8 	.word	0x200013d8

08019348 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019348:	4b07      	ldr	r3, [pc, #28]	; (8019368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801934a:	881a      	ldrh	r2, [r3, #0]
 801934c:	4282      	cmp	r2, r0
 801934e:	d809      	bhi.n	8019364 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019350:	4b06      	ldr	r3, [pc, #24]	; (801936c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8019352:	881b      	ldrh	r3, [r3, #0]
 8019354:	4413      	add	r3, r2
 8019356:	4298      	cmp	r0, r3
 8019358:	da04      	bge.n	8019364 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801935a:	4b05      	ldr	r3, [pc, #20]	; (8019370 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019362:	4770      	bx	lr
 8019364:	2000      	movs	r0, #0
 8019366:	4770      	bx	lr
 8019368:	200013f8 	.word	0x200013f8
 801936c:	200013fc 	.word	0x200013fc
 8019370:	200013dc 	.word	0x200013dc

08019374 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019378:	4d28      	ldr	r5, [pc, #160]	; (801941c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801937a:	682b      	ldr	r3, [r5, #0]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d04a      	beq.n	8019416 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019380:	4a27      	ldr	r2, [pc, #156]	; (8019420 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019382:	4e28      	ldr	r6, [pc, #160]	; (8019424 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019384:	8810      	ldrh	r0, [r2, #0]
 8019386:	f8b6 8000 	ldrh.w	r8, [r6]
 801938a:	4c27      	ldr	r4, [pc, #156]	; (8019428 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801938c:	4f27      	ldr	r7, [pc, #156]	; (801942c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801938e:	4440      	add	r0, r8
 8019390:	1c41      	adds	r1, r0, #1
 8019392:	f021 0101 	bic.w	r1, r1, #1
 8019396:	0409      	lsls	r1, r1, #16
 8019398:	0c09      	lsrs	r1, r1, #16
 801939a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801939e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80193a2:	eb03 020e 	add.w	r2, r3, lr
 80193a6:	eb0e 010c 	add.w	r1, lr, ip
 80193aa:	6022      	str	r2, [r4, #0]
 80193ac:	185a      	adds	r2, r3, r1
 80193ae:	603a      	str	r2, [r7, #0]
 80193b0:	220e      	movs	r2, #14
 80193b2:	fb02 f208 	mul.w	r2, r2, r8
 80193b6:	3203      	adds	r2, #3
 80193b8:	f022 0203 	bic.w	r2, r2, #3
 80193bc:	4411      	add	r1, r2
 80193be:	440b      	add	r3, r1
 80193c0:	491b      	ldr	r1, [pc, #108]	; (8019430 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80193c2:	600b      	str	r3, [r1, #0]
 80193c4:	491b      	ldr	r1, [pc, #108]	; (8019434 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80193c6:	2300      	movs	r3, #0
 80193c8:	800b      	strh	r3, [r1, #0]
 80193ca:	491b      	ldr	r1, [pc, #108]	; (8019438 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80193cc:	6809      	ldr	r1, [r1, #0]
 80193ce:	eba1 010e 	sub.w	r1, r1, lr
 80193d2:	eba1 010c 	sub.w	r1, r1, ip
 80193d6:	1a8a      	subs	r2, r1, r2
 80193d8:	4918      	ldr	r1, [pc, #96]	; (801943c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80193da:	600a      	str	r2, [r1, #0]
 80193dc:	4a18      	ldr	r2, [pc, #96]	; (8019440 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80193de:	469c      	mov	ip, r3
 80193e0:	8013      	strh	r3, [r2, #0]
 80193e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80193e6:	4283      	cmp	r3, r0
 80193e8:	d10d      	bne.n	8019406 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80193ea:	8835      	ldrh	r5, [r6, #0]
 80193ec:	6838      	ldr	r0, [r7, #0]
 80193ee:	2300      	movs	r3, #0
 80193f0:	240e      	movs	r4, #14
 80193f2:	429d      	cmp	r5, r3
 80193f4:	d90f      	bls.n	8019416 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80193f6:	fb04 0203 	mla	r2, r4, r3, r0
 80193fa:	3301      	adds	r3, #1
 80193fc:	7b11      	ldrb	r1, [r2, #12]
 80193fe:	f36f 1145 	bfc	r1, #5, #1
 8019402:	7311      	strb	r1, [r2, #12]
 8019404:	e7f5      	b.n	80193f2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8019406:	682a      	ldr	r2, [r5, #0]
 8019408:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801940c:	6822      	ldr	r2, [r4, #0]
 801940e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8019412:	3301      	adds	r3, #1
 8019414:	e7e7      	b.n	80193e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8019416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801941a:	bf00      	nop
 801941c:	200013dc 	.word	0x200013dc
 8019420:	200013f8 	.word	0x200013f8
 8019424:	200013fc 	.word	0x200013fc
 8019428:	200013f0 	.word	0x200013f0
 801942c:	200013e0 	.word	0x200013e0
 8019430:	200013e8 	.word	0x200013e8
 8019434:	200013fa 	.word	0x200013fa
 8019438:	200013e4 	.word	0x200013e4
 801943c:	200013f4 	.word	0x200013f4
 8019440:	200013ec 	.word	0x200013ec

08019444 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019444:	b510      	push	{r4, lr}
 8019446:	4b10      	ldr	r3, [pc, #64]	; (8019488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	b9db      	cbnz	r3, 8019484 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801944c:	b1d1      	cbz	r1, 8019484 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801944e:	4b0f      	ldr	r3, [pc, #60]	; (801948c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019450:	801a      	strh	r2, [r3, #0]
 8019452:	4b0f      	ldr	r3, [pc, #60]	; (8019490 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019454:	881b      	ldrh	r3, [r3, #0]
 8019456:	b292      	uxth	r2, r2
 8019458:	240e      	movs	r4, #14
 801945a:	4413      	add	r3, r2
 801945c:	4362      	muls	r2, r4
 801945e:	2406      	movs	r4, #6
 8019460:	fb04 2203 	mla	r2, r4, r3, r2
 8019464:	428a      	cmp	r2, r1
 8019466:	d305      	bcc.n	8019474 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019468:	4b0a      	ldr	r3, [pc, #40]	; (8019494 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801946a:	4a0b      	ldr	r2, [pc, #44]	; (8019498 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801946c:	480b      	ldr	r0, [pc, #44]	; (801949c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801946e:	2137      	movs	r1, #55	; 0x37
 8019470:	f00b fccc 	bl	8024e0c <__assert_func>
 8019474:	4b0a      	ldr	r3, [pc, #40]	; (80194a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8019476:	6019      	str	r1, [r3, #0]
 8019478:	4b0a      	ldr	r3, [pc, #40]	; (80194a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801947a:	6018      	str	r0, [r3, #0]
 801947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019480:	f7ff bf78 	b.w	8019374 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019484:	bd10      	pop	{r4, pc}
 8019486:	bf00      	nop
 8019488:	200013e8 	.word	0x200013e8
 801948c:	200013fc 	.word	0x200013fc
 8019490:	200013f8 	.word	0x200013f8
 8019494:	08053fcd 	.word	0x08053fcd
 8019498:	08054026 	.word	0x08054026
 801949c:	08053fa8 	.word	0x08053fa8
 80194a0:	200013e4 	.word	0x200013e4
 80194a4:	200013dc 	.word	0x200013dc

080194a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80194a8:	b470      	push	{r4, r5, r6}
 80194aa:	4c07      	ldr	r4, [pc, #28]	; (80194c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80194ac:	6826      	ldr	r6, [r4, #0]
 80194ae:	4605      	mov	r5, r0
 80194b0:	4610      	mov	r0, r2
 80194b2:	9a03      	ldr	r2, [sp, #12]
 80194b4:	b936      	cbnz	r6, 80194c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80194b6:	6025      	str	r5, [r4, #0]
 80194b8:	4c04      	ldr	r4, [pc, #16]	; (80194cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80194ba:	8021      	strh	r1, [r4, #0]
 80194bc:	bc70      	pop	{r4, r5, r6}
 80194be:	4619      	mov	r1, r3
 80194c0:	f7ff bfc0 	b.w	8019444 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80194c4:	bc70      	pop	{r4, r5, r6}
 80194c6:	4770      	bx	lr
 80194c8:	20001400 	.word	0x20001400
 80194cc:	200013f8 	.word	0x200013f8

080194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80194d0:	b508      	push	{r3, lr}
 80194d2:	4b14      	ldr	r3, [pc, #80]	; (8019524 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80194d4:	6819      	ldr	r1, [r3, #0]
 80194d6:	b931      	cbnz	r1, 80194e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80194d8:	4b13      	ldr	r3, [pc, #76]	; (8019528 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80194da:	4a14      	ldr	r2, [pc, #80]	; (801952c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80194dc:	4814      	ldr	r0, [pc, #80]	; (8019530 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80194de:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80194e2:	f00b fc93 	bl	8024e0c <__assert_func>
 80194e6:	4a13      	ldr	r2, [pc, #76]	; (8019534 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80194e8:	8803      	ldrh	r3, [r0, #0]
 80194ea:	8812      	ldrh	r2, [r2, #0]
 80194ec:	4293      	cmp	r3, r2
 80194ee:	d204      	bcs.n	80194fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80194f0:	2214      	movs	r2, #20
 80194f2:	fb02 1303 	mla	r3, r2, r3, r1
 80194f6:	8918      	ldrh	r0, [r3, #8]
 80194f8:	bd08      	pop	{r3, pc}
 80194fa:	490f      	ldr	r1, [pc, #60]	; (8019538 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80194fc:	8809      	ldrh	r1, [r1, #0]
 80194fe:	4411      	add	r1, r2
 8019500:	428b      	cmp	r3, r1
 8019502:	da06      	bge.n	8019512 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8019504:	1a9b      	subs	r3, r3, r2
 8019506:	4a0d      	ldr	r2, [pc, #52]	; (801953c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8019508:	6812      	ldr	r2, [r2, #0]
 801950a:	210e      	movs	r1, #14
 801950c:	fb01 2303 	mla	r3, r1, r3, r2
 8019510:	e7f1      	b.n	80194f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8019512:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019516:	4293      	cmp	r3, r2
 8019518:	bf0a      	itet	eq
 801951a:	4b09      	ldreq	r3, [pc, #36]	; (8019540 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801951c:	2000      	movne	r0, #0
 801951e:	8818      	ldrheq	r0, [r3, #0]
 8019520:	e7ea      	b.n	80194f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8019522:	bf00      	nop
 8019524:	20001400 	.word	0x20001400
 8019528:	0805349c 	.word	0x0805349c
 801952c:	080540d3 	.word	0x080540d3
 8019530:	08053fa8 	.word	0x08053fa8
 8019534:	200013f8 	.word	0x200013f8
 8019538:	200013fc 	.word	0x200013fc
 801953c:	200013e0 	.word	0x200013e0
 8019540:	2000134a 	.word	0x2000134a

08019544 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019544:	b508      	push	{r3, lr}
 8019546:	4b14      	ldr	r3, [pc, #80]	; (8019598 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019548:	6819      	ldr	r1, [r3, #0]
 801954a:	b931      	cbnz	r1, 801955a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801954c:	4b13      	ldr	r3, [pc, #76]	; (801959c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801954e:	4a14      	ldr	r2, [pc, #80]	; (80195a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019550:	4814      	ldr	r0, [pc, #80]	; (80195a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019552:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8019556:	f00b fc59 	bl	8024e0c <__assert_func>
 801955a:	4a13      	ldr	r2, [pc, #76]	; (80195a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801955c:	8803      	ldrh	r3, [r0, #0]
 801955e:	8812      	ldrh	r2, [r2, #0]
 8019560:	4293      	cmp	r3, r2
 8019562:	d204      	bcs.n	801956e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019564:	2214      	movs	r2, #20
 8019566:	fb02 1303 	mla	r3, r2, r3, r1
 801956a:	8958      	ldrh	r0, [r3, #10]
 801956c:	bd08      	pop	{r3, pc}
 801956e:	490f      	ldr	r1, [pc, #60]	; (80195ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019570:	8809      	ldrh	r1, [r1, #0]
 8019572:	4411      	add	r1, r2
 8019574:	428b      	cmp	r3, r1
 8019576:	da06      	bge.n	8019586 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019578:	1a9b      	subs	r3, r3, r2
 801957a:	4a0d      	ldr	r2, [pc, #52]	; (80195b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801957c:	6812      	ldr	r2, [r2, #0]
 801957e:	210e      	movs	r1, #14
 8019580:	fb01 2303 	mla	r3, r1, r3, r2
 8019584:	e7f1      	b.n	801956a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019586:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801958a:	4293      	cmp	r3, r2
 801958c:	bf0a      	itet	eq
 801958e:	4b09      	ldreq	r3, [pc, #36]	; (80195b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019590:	2000      	movne	r0, #0
 8019592:	8818      	ldrheq	r0, [r3, #0]
 8019594:	e7ea      	b.n	801956c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019596:	bf00      	nop
 8019598:	20001400 	.word	0x20001400
 801959c:	0805349c 	.word	0x0805349c
 80195a0:	080540ff 	.word	0x080540ff
 80195a4:	08053fa8 	.word	0x08053fa8
 80195a8:	200013f8 	.word	0x200013f8
 80195ac:	200013fc 	.word	0x200013fc
 80195b0:	200013e0 	.word	0x200013e0
 80195b4:	2000134c 	.word	0x2000134c

080195b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80195b8:	b510      	push	{r4, lr}
 80195ba:	4b23      	ldr	r3, [pc, #140]	; (8019648 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80195bc:	681c      	ldr	r4, [r3, #0]
 80195be:	b934      	cbnz	r4, 80195ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80195c0:	4b22      	ldr	r3, [pc, #136]	; (801964c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80195c2:	4a23      	ldr	r2, [pc, #140]	; (8019650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80195c4:	4823      	ldr	r0, [pc, #140]	; (8019654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80195c6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80195ca:	f00b fc1f 	bl	8024e0c <__assert_func>
 80195ce:	4a22      	ldr	r2, [pc, #136]	; (8019658 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80195d0:	880b      	ldrh	r3, [r1, #0]
 80195d2:	8812      	ldrh	r2, [r2, #0]
 80195d4:	4293      	cmp	r3, r2
 80195d6:	d211      	bcs.n	80195fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80195d8:	2214      	movs	r2, #20
 80195da:	fb02 4303 	mla	r3, r2, r3, r4
 80195de:	8a1a      	ldrh	r2, [r3, #16]
 80195e0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80195e4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80195e8:	8a5b      	ldrh	r3, [r3, #18]
 80195ea:	8004      	strh	r4, [r0, #0]
 80195ec:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80195f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195f4:	8041      	strh	r1, [r0, #2]
 80195f6:	8082      	strh	r2, [r0, #4]
 80195f8:	80c3      	strh	r3, [r0, #6]
 80195fa:	e00e      	b.n	801961a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80195fc:	4917      	ldr	r1, [pc, #92]	; (801965c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80195fe:	8809      	ldrh	r1, [r1, #0]
 8019600:	4411      	add	r1, r2
 8019602:	428b      	cmp	r3, r1
 8019604:	da0a      	bge.n	801961c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8019606:	1a9b      	subs	r3, r3, r2
 8019608:	4a15      	ldr	r2, [pc, #84]	; (8019660 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801960a:	6812      	ldr	r2, [r2, #0]
 801960c:	210e      	movs	r1, #14
 801960e:	fb01 2303 	mla	r3, r1, r3, r2
 8019612:	681a      	ldr	r2, [r3, #0]
 8019614:	6002      	str	r2, [r0, #0]
 8019616:	685a      	ldr	r2, [r3, #4]
 8019618:	6042      	str	r2, [r0, #4]
 801961a:	bd10      	pop	{r4, pc}
 801961c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019620:	4293      	cmp	r3, r2
 8019622:	d10b      	bne.n	801963c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8019624:	4b0f      	ldr	r3, [pc, #60]	; (8019664 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8019626:	f9b3 1000 	ldrsh.w	r1, [r3]
 801962a:	4b0f      	ldr	r3, [pc, #60]	; (8019668 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801962c:	8081      	strh	r1, [r0, #4]
 801962e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019632:	80c2      	strh	r2, [r0, #6]
 8019634:	2300      	movs	r3, #0
 8019636:	8003      	strh	r3, [r0, #0]
 8019638:	8043      	strh	r3, [r0, #2]
 801963a:	e7ee      	b.n	801961a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801963c:	2300      	movs	r3, #0
 801963e:	8003      	strh	r3, [r0, #0]
 8019640:	8043      	strh	r3, [r0, #2]
 8019642:	8083      	strh	r3, [r0, #4]
 8019644:	e7d8      	b.n	80195f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019646:	bf00      	nop
 8019648:	20001400 	.word	0x20001400
 801964c:	0805349c 	.word	0x0805349c
 8019650:	0805406c 	.word	0x0805406c
 8019654:	08053fa8 	.word	0x08053fa8
 8019658:	200013f8 	.word	0x200013f8
 801965c:	200013fc 	.word	0x200013fc
 8019660:	200013e0 	.word	0x200013e0
 8019664:	2000134a 	.word	0x2000134a
 8019668:	2000134c 	.word	0x2000134c

0801966c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801966c:	4b18      	ldr	r3, [pc, #96]	; (80196d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	b34b      	cbz	r3, 80196c6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019672:	4a18      	ldr	r2, [pc, #96]	; (80196d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019674:	8800      	ldrh	r0, [r0, #0]
 8019676:	8812      	ldrh	r2, [r2, #0]
 8019678:	4290      	cmp	r0, r2
 801967a:	d211      	bcs.n	80196a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801967c:	2214      	movs	r2, #20
 801967e:	fb02 3300 	mla	r3, r2, r0, r3
 8019682:	8a1a      	ldrh	r2, [r3, #16]
 8019684:	8919      	ldrh	r1, [r3, #8]
 8019686:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801968a:	428a      	cmp	r2, r1
 801968c:	db1d      	blt.n	80196ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801968e:	8a58      	ldrh	r0, [r3, #18]
 8019690:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019694:	895b      	ldrh	r3, [r3, #10]
 8019696:	4298      	cmp	r0, r3
 8019698:	bfac      	ite	ge
 801969a:	2000      	movge	r0, #0
 801969c:	2001      	movlt	r0, #1
 801969e:	4770      	bx	lr
 80196a0:	4b0d      	ldr	r3, [pc, #52]	; (80196d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	4413      	add	r3, r2
 80196a6:	4298      	cmp	r0, r3
 80196a8:	da0d      	bge.n	80196c6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80196aa:	4b0c      	ldr	r3, [pc, #48]	; (80196dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	1a80      	subs	r0, r0, r2
 80196b0:	220e      	movs	r2, #14
 80196b2:	fb02 3300 	mla	r3, r2, r0, r3
 80196b6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80196ba:	891a      	ldrh	r2, [r3, #8]
 80196bc:	4291      	cmp	r1, r2
 80196be:	db04      	blt.n	80196ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80196c0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80196c4:	e7e6      	b.n	8019694 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80196c6:	2000      	movs	r0, #0
 80196c8:	4770      	bx	lr
 80196ca:	2001      	movs	r0, #1
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	20001400 	.word	0x20001400
 80196d4:	200013f8 	.word	0x200013f8
 80196d8:	200013fc 	.word	0x200013fc
 80196dc:	200013e0 	.word	0x200013e0

080196e0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80196e0:	b508      	push	{r3, lr}
 80196e2:	4b12      	ldr	r3, [pc, #72]	; (801972c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80196e4:	6819      	ldr	r1, [r3, #0]
 80196e6:	b931      	cbnz	r1, 80196f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80196e8:	4b11      	ldr	r3, [pc, #68]	; (8019730 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80196ea:	4a12      	ldr	r2, [pc, #72]	; (8019734 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80196ec:	4812      	ldr	r0, [pc, #72]	; (8019738 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80196ee:	f44f 7151 	mov.w	r1, #836	; 0x344
 80196f2:	f00b fb8b 	bl	8024e0c <__assert_func>
 80196f6:	8803      	ldrh	r3, [r0, #0]
 80196f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196fc:	4293      	cmp	r3, r2
 80196fe:	d012      	beq.n	8019726 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019700:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019704:	4293      	cmp	r3, r2
 8019706:	d103      	bne.n	8019710 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019708:	4b0c      	ldr	r3, [pc, #48]	; (801973c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801970e:	bd08      	pop	{r3, pc}
 8019710:	4a0b      	ldr	r2, [pc, #44]	; (8019740 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019712:	6812      	ldr	r2, [r2, #0]
 8019714:	b11a      	cbz	r2, 801971e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801971a:	2800      	cmp	r0, #0
 801971c:	d1f7      	bne.n	801970e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801971e:	2214      	movs	r2, #20
 8019720:	4353      	muls	r3, r2
 8019722:	58c8      	ldr	r0, [r1, r3]
 8019724:	e7f3      	b.n	801970e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019726:	2000      	movs	r0, #0
 8019728:	e7f1      	b.n	801970e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801972a:	bf00      	nop
 801972c:	20001400 	.word	0x20001400
 8019730:	0805349c 	.word	0x0805349c
 8019734:	080540a2 	.word	0x080540a2
 8019738:	08053fa8 	.word	0x08053fa8
 801973c:	20001358 	.word	0x20001358
 8019740:	200013dc 	.word	0x200013dc

08019744 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019744:	8802      	ldrh	r2, [r0, #0]
 8019746:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801974a:	429a      	cmp	r2, r3
 801974c:	d840      	bhi.n	80197d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801974e:	4b21      	ldr	r3, [pc, #132]	; (80197d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8019750:	881b      	ldrh	r3, [r3, #0]
 8019752:	429a      	cmp	r2, r3
 8019754:	d220      	bcs.n	8019798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8019756:	4b20      	ldr	r3, [pc, #128]	; (80197d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019758:	6819      	ldr	r1, [r3, #0]
 801975a:	2314      	movs	r3, #20
 801975c:	fb03 1302 	mla	r3, r3, r2, r1
 8019760:	6858      	ldr	r0, [r3, #4]
 8019762:	2800      	cmp	r0, #0
 8019764:	d035      	beq.n	80197d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019766:	491d      	ldr	r1, [pc, #116]	; (80197dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019768:	6809      	ldr	r1, [r1, #0]
 801976a:	2900      	cmp	r1, #0
 801976c:	d031      	beq.n	80197d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801976e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019772:	b371      	cbz	r1, 80197d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019774:	895a      	ldrh	r2, [r3, #10]
 8019776:	8918      	ldrh	r0, [r3, #8]
 8019778:	4350      	muls	r0, r2
 801977a:	7c5a      	ldrb	r2, [r3, #17]
 801977c:	7cdb      	ldrb	r3, [r3, #19]
 801977e:	0952      	lsrs	r2, r2, #5
 8019780:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019784:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019788:	2b0b      	cmp	r3, #11
 801978a:	bf18      	it	ne
 801978c:	0040      	lslne	r0, r0, #1
 801978e:	3003      	adds	r0, #3
 8019790:	f020 0003 	bic.w	r0, r0, #3
 8019794:	4408      	add	r0, r1
 8019796:	4770      	bx	lr
 8019798:	4911      	ldr	r1, [pc, #68]	; (80197e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801979a:	8809      	ldrh	r1, [r1, #0]
 801979c:	4419      	add	r1, r3
 801979e:	428a      	cmp	r2, r1
 80197a0:	da16      	bge.n	80197d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80197a2:	4910      	ldr	r1, [pc, #64]	; (80197e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80197a4:	6809      	ldr	r1, [r1, #0]
 80197a6:	1ad3      	subs	r3, r2, r3
 80197a8:	200e      	movs	r0, #14
 80197aa:	fb00 1303 	mla	r3, r0, r3, r1
 80197ae:	7b19      	ldrb	r1, [r3, #12]
 80197b0:	f001 011f 	and.w	r1, r1, #31
 80197b4:	290b      	cmp	r1, #11
 80197b6:	d10b      	bne.n	80197d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80197b8:	8919      	ldrh	r1, [r3, #8]
 80197ba:	8958      	ldrh	r0, [r3, #10]
 80197bc:	4b07      	ldr	r3, [pc, #28]	; (80197dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80197be:	4348      	muls	r0, r1
 80197c0:	6819      	ldr	r1, [r3, #0]
 80197c2:	3003      	adds	r0, #3
 80197c4:	f020 0303 	bic.w	r3, r0, #3
 80197c8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80197cc:	4418      	add	r0, r3
 80197ce:	4770      	bx	lr
 80197d0:	2000      	movs	r0, #0
 80197d2:	4770      	bx	lr
 80197d4:	200013f8 	.word	0x200013f8
 80197d8:	20001400 	.word	0x20001400
 80197dc:	200013dc 	.word	0x200013dc
 80197e0:	200013fc 	.word	0x200013fc
 80197e4:	200013e0 	.word	0x200013e0

080197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80197e8:	4b19      	ldr	r3, [pc, #100]	; (8019850 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80197ea:	6819      	ldr	r1, [r3, #0]
 80197ec:	8803      	ldrh	r3, [r0, #0]
 80197ee:	b1e9      	cbz	r1, 801982c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80197f0:	4a18      	ldr	r2, [pc, #96]	; (8019854 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80197f2:	8812      	ldrh	r2, [r2, #0]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d90a      	bls.n	801980e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80197f8:	2214      	movs	r2, #20
 80197fa:	fb02 1303 	mla	r3, r2, r3, r1
 80197fe:	7c58      	ldrb	r0, [r3, #17]
 8019800:	0942      	lsrs	r2, r0, #5
 8019802:	7cd8      	ldrb	r0, [r3, #19]
 8019804:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019808:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801980c:	4770      	bx	lr
 801980e:	4912      	ldr	r1, [pc, #72]	; (8019858 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8019810:	8809      	ldrh	r1, [r1, #0]
 8019812:	4411      	add	r1, r2
 8019814:	428b      	cmp	r3, r1
 8019816:	da09      	bge.n	801982c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019818:	1a9b      	subs	r3, r3, r2
 801981a:	4a10      	ldr	r2, [pc, #64]	; (801985c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801981c:	6812      	ldr	r2, [r2, #0]
 801981e:	210e      	movs	r1, #14
 8019820:	fb01 2303 	mla	r3, r1, r3, r2
 8019824:	7b18      	ldrb	r0, [r3, #12]
 8019826:	f000 001f 	and.w	r0, r0, #31
 801982a:	4770      	bx	lr
 801982c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019830:	4293      	cmp	r3, r2
 8019832:	d10a      	bne.n	801984a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019834:	4b0a      	ldr	r3, [pc, #40]	; (8019860 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801983c:	b10a      	cbz	r2, 8019842 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801983e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019840:	b900      	cbnz	r0, 8019844 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019842:	6898      	ldr	r0, [r3, #8]
 8019844:	6803      	ldr	r3, [r0, #0]
 8019846:	6a1b      	ldr	r3, [r3, #32]
 8019848:	4718      	bx	r3
 801984a:	2000      	movs	r0, #0
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	20001400 	.word	0x20001400
 8019854:	200013f8 	.word	0x200013f8
 8019858:	200013fc 	.word	0x200013fc
 801985c:	200013e0 	.word	0x200013e0
 8019860:	20001358 	.word	0x20001358

08019864 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019864:	2010      	movs	r0, #16
 8019866:	4770      	bx	lr

08019868 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019868:	2000      	movs	r0, #0
 801986a:	4770      	bx	lr

0801986c <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801986c:	00d2      	lsls	r2, r2, #3
 801986e:	0209      	lsls	r1, r1, #8
 8019870:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019874:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8019878:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801987c:	4310      	orrs	r0, r2
 801987e:	4770      	bx	lr

08019880 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8019880:	0a09      	lsrs	r1, r1, #8
 8019882:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8019886:	4770      	bx	lr

08019888 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8019888:	08c9      	lsrs	r1, r1, #3
 801988a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801988e:	4770      	bx	lr

08019890 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8019890:	00c9      	lsls	r1, r1, #3
 8019892:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8019896:	4770      	bx	lr

08019898 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019898:	2bff      	cmp	r3, #255	; 0xff
 801989a:	d050      	beq.n	801993e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801989c:	2a0b      	cmp	r2, #11
 801989e:	d04a      	beq.n	8019936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80198a0:	d80e      	bhi.n	80198c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80198a2:	2a03      	cmp	r2, #3
 80198a4:	d03f      	beq.n	8019926 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80198a6:	d804      	bhi.n	80198b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80198a8:	2a01      	cmp	r2, #1
 80198aa:	d03e      	beq.n	801992a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80198ac:	d93f      	bls.n	801992e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80198ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80198b0:	4770      	bx	lr
 80198b2:	2a09      	cmp	r2, #9
 80198b4:	d03f      	beq.n	8019936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80198b6:	d83c      	bhi.n	8019932 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80198b8:	2a08      	cmp	r2, #8
 80198ba:	d03a      	beq.n	8019932 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80198bc:	2000      	movs	r0, #0
 80198be:	4770      	bx	lr
 80198c0:	2a2f      	cmp	r2, #47	; 0x2f
 80198c2:	d024      	beq.n	801990e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80198c4:	d80d      	bhi.n	80198e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80198c6:	2a2d      	cmp	r2, #45	; 0x2d
 80198c8:	d014      	beq.n	80198f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80198ca:	d826      	bhi.n	801991a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80198cc:	2a2c      	cmp	r2, #44	; 0x2c
 80198ce:	d1f5      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198d0:	684b      	ldr	r3, [r1, #4]
 80198d2:	781b      	ldrb	r3, [r3, #0]
 80198d4:	2b01      	cmp	r3, #1
 80198d6:	d018      	beq.n	801990a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80198d8:	d323      	bcc.n	8019922 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80198da:	2b02      	cmp	r3, #2
 80198dc:	d1ee      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198de:	6880      	ldr	r0, [r0, #8]
 80198e0:	4770      	bx	lr
 80198e2:	2a31      	cmp	r2, #49	; 0x31
 80198e4:	d004      	beq.n	80198f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80198e6:	d328      	bcc.n	801993a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80198e8:	2a32      	cmp	r2, #50	; 0x32
 80198ea:	d026      	beq.n	801993a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80198ec:	2a33      	cmp	r2, #51	; 0x33
 80198ee:	d1e5      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80198f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80198f2:	4770      	bx	lr
 80198f4:	684b      	ldr	r3, [r1, #4]
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	d004      	beq.n	8019906 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80198fc:	d30b      	bcc.n	8019916 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80198fe:	2b02      	cmp	r3, #2
 8019900:	d1dc      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019902:	6900      	ldr	r0, [r0, #16]
 8019904:	4770      	bx	lr
 8019906:	6a00      	ldr	r0, [r0, #32]
 8019908:	4770      	bx	lr
 801990a:	6980      	ldr	r0, [r0, #24]
 801990c:	4770      	bx	lr
 801990e:	684b      	ldr	r3, [r1, #4]
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d1d2      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019916:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019918:	4770      	bx	lr
 801991a:	684b      	ldr	r3, [r1, #4]
 801991c:	781b      	ldrb	r3, [r3, #0]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d1cc      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019922:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019924:	4770      	bx	lr
 8019926:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019928:	4770      	bx	lr
 801992a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801992c:	4770      	bx	lr
 801992e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019930:	4770      	bx	lr
 8019932:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019934:	4770      	bx	lr
 8019936:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019938:	4770      	bx	lr
 801993a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801993c:	4770      	bx	lr
 801993e:	2a0b      	cmp	r2, #11
 8019940:	d049      	beq.n	80199d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019942:	d80e      	bhi.n	8019962 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019944:	2a03      	cmp	r2, #3
 8019946:	d040      	beq.n	80199ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019948:	d804      	bhi.n	8019954 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801994a:	2a01      	cmp	r2, #1
 801994c:	d03f      	beq.n	80199ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801994e:	d940      	bls.n	80199d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019950:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019952:	4770      	bx	lr
 8019954:	2a09      	cmp	r2, #9
 8019956:	d03e      	beq.n	80199d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019958:	d801      	bhi.n	801995e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801995a:	2a08      	cmp	r2, #8
 801995c:	d1ae      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801995e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019960:	4770      	bx	lr
 8019962:	2a2f      	cmp	r2, #47	; 0x2f
 8019964:	d024      	beq.n	80199b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019966:	d80d      	bhi.n	8019984 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019968:	2a2d      	cmp	r2, #45	; 0x2d
 801996a:	d014      	beq.n	8019996 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801996c:	d826      	bhi.n	80199bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801996e:	2a2c      	cmp	r2, #44	; 0x2c
 8019970:	d1a4      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019972:	684b      	ldr	r3, [r1, #4]
 8019974:	781b      	ldrb	r3, [r3, #0]
 8019976:	2b01      	cmp	r3, #1
 8019978:	d018      	beq.n	80199ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801997a:	d324      	bcc.n	80199c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801997c:	2b02      	cmp	r3, #2
 801997e:	d19d      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019980:	68c0      	ldr	r0, [r0, #12]
 8019982:	4770      	bx	lr
 8019984:	2a31      	cmp	r2, #49	; 0x31
 8019986:	d004      	beq.n	8019992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019988:	d327      	bcc.n	80199da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801998a:	2a32      	cmp	r2, #50	; 0x32
 801998c:	d025      	beq.n	80199da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801998e:	2a33      	cmp	r2, #51	; 0x33
 8019990:	d194      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019992:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019994:	4770      	bx	lr
 8019996:	684b      	ldr	r3, [r1, #4]
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d004      	beq.n	80199a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801999e:	d30b      	bcc.n	80199b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80199a0:	2b02      	cmp	r3, #2
 80199a2:	d18b      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80199a4:	6940      	ldr	r0, [r0, #20]
 80199a6:	4770      	bx	lr
 80199a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80199aa:	4770      	bx	lr
 80199ac:	69c0      	ldr	r0, [r0, #28]
 80199ae:	4770      	bx	lr
 80199b0:	684b      	ldr	r3, [r1, #4]
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d181      	bne.n	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80199b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80199ba:	4770      	bx	lr
 80199bc:	684b      	ldr	r3, [r1, #4]
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	f47f af7b 	bne.w	80198bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80199c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80199c8:	4770      	bx	lr
 80199ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80199cc:	4770      	bx	lr
 80199ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80199d0:	4770      	bx	lr
 80199d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80199d4:	4770      	bx	lr
 80199d6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80199d8:	4770      	bx	lr
 80199da:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80199dc:	4770      	bx	lr

080199de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80199de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e2:	b087      	sub	sp, #28
 80199e4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80199e6:	9205      	str	r2, [sp, #20]
 80199e8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80199ec:	9202      	str	r2, [sp, #8]
 80199ee:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80199f2:	9101      	str	r1, [sp, #4]
 80199f4:	6871      	ldr	r1, [r6, #4]
 80199f6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80199f8:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 80199fc:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8019a00:	fb01 2505 	mla	r5, r1, r5, r2
 8019a04:	6832      	ldr	r2, [r6, #0]
 8019a06:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019a0a:	6802      	ldr	r2, [r0, #0]
 8019a0c:	9203      	str	r2, [sp, #12]
 8019a0e:	6842      	ldr	r2, [r0, #4]
 8019a10:	fa1f fe84 	uxth.w	lr, r4
 8019a14:	3204      	adds	r2, #4
 8019a16:	43e4      	mvns	r4, r4
 8019a18:	9204      	str	r2, [sp, #16]
 8019a1a:	b2e4      	uxtb	r4, r4
 8019a1c:	9a01      	ldr	r2, [sp, #4]
 8019a1e:	2a00      	cmp	r2, #0
 8019a20:	dc03      	bgt.n	8019a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019a22:	9a05      	ldr	r2, [sp, #20]
 8019a24:	2a00      	cmp	r2, #0
 8019a26:	f340 8119 	ble.w	8019c5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8019a2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a2c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019a32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	dd0f      	ble.n	8019a5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019a3a:	1408      	asrs	r0, r1, #16
 8019a3c:	d406      	bmi.n	8019a4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a3e:	4540      	cmp	r0, r8
 8019a40:	da04      	bge.n	8019a4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a42:	1410      	asrs	r0, r2, #16
 8019a44:	d402      	bmi.n	8019a4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a46:	9e02      	ldr	r6, [sp, #8]
 8019a48:	42b0      	cmp	r0, r6
 8019a4a:	db07      	blt.n	8019a5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019a4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a4e:	4401      	add	r1, r0
 8019a50:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019a52:	3b01      	subs	r3, #1
 8019a54:	4402      	add	r2, r0
 8019a56:	3502      	adds	r5, #2
 8019a58:	e7ed      	b.n	8019a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019a5a:	d00f      	beq.n	8019a7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019a5c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019a5e:	1e58      	subs	r0, r3, #1
 8019a60:	fb06 1600 	mla	r6, r6, r0, r1
 8019a64:	1436      	asrs	r6, r6, #16
 8019a66:	d547      	bpl.n	8019af8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8019a68:	469b      	mov	fp, r3
 8019a6a:	46aa      	mov	sl, r5
 8019a6c:	f1bb 0f00 	cmp.w	fp, #0
 8019a70:	f300 809e 	bgt.w	8019bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8019a74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a78:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019a7c:	9b01      	ldr	r3, [sp, #4]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	f340 80ec 	ble.w	8019c5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8019a84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a9e:	eef0 6a62 	vmov.f32	s13, s5
 8019aa2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019aa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019aaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019aae:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019ab2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ab6:	eef0 6a43 	vmov.f32	s13, s6
 8019aba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019abe:	ee12 2a90 	vmov	r2, s5
 8019ac2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8019aca:	ee13 2a10 	vmov	r2, s6
 8019ace:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8019ad8:	9b01      	ldr	r3, [sp, #4]
 8019ada:	9a05      	ldr	r2, [sp, #20]
 8019adc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ae0:	3b01      	subs	r3, #1
 8019ae2:	9301      	str	r3, [sp, #4]
 8019ae4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019aea:	eeb0 3a67 	vmov.f32	s6, s15
 8019aee:	bf08      	it	eq
 8019af0:	4613      	moveq	r3, r2
 8019af2:	eef0 2a47 	vmov.f32	s5, s14
 8019af6:	e791      	b.n	8019a1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019af8:	4546      	cmp	r6, r8
 8019afa:	dab5      	bge.n	8019a68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019afc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019afe:	fb06 2000 	mla	r0, r6, r0, r2
 8019b02:	1400      	asrs	r0, r0, #16
 8019b04:	d4b0      	bmi.n	8019a68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019b06:	9e02      	ldr	r6, [sp, #8]
 8019b08:	42b0      	cmp	r0, r6
 8019b0a:	daad      	bge.n	8019a68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019b0c:	469a      	mov	sl, r3
 8019b0e:	46ab      	mov	fp, r5
 8019b10:	f1ba 0f00 	cmp.w	sl, #0
 8019b14:	ddae      	ble.n	8019a74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019b16:	9f03      	ldr	r7, [sp, #12]
 8019b18:	1410      	asrs	r0, r2, #16
 8019b1a:	140e      	asrs	r6, r1, #16
 8019b1c:	fb08 7000 	mla	r0, r8, r0, r7
 8019b20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b24:	5d80      	ldrb	r0, [r0, r6]
 8019b26:	9e04      	ldr	r6, [sp, #16]
 8019b28:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019b2c:	f8bb 6000 	ldrh.w	r6, [fp]
 8019b30:	1237      	asrs	r7, r6, #8
 8019b32:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019b36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019b3a:	fb17 f704 	smulbb	r7, r7, r4
 8019b3e:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8019b42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019b46:	00f6      	lsls	r6, r6, #3
 8019b48:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8019b4c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019b50:	10c7      	asrs	r7, r0, #3
 8019b52:	b2f6      	uxtb	r6, r6
 8019b54:	00c0      	lsls	r0, r0, #3
 8019b56:	fb19 f904 	smulbb	r9, r9, r4
 8019b5a:	fb16 f604 	smulbb	r6, r6, r4
 8019b5e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019b62:	b2c0      	uxtb	r0, r0
 8019b64:	fa1f fc8c 	uxth.w	ip, ip
 8019b68:	fb07 970e 	mla	r7, r7, lr, r9
 8019b6c:	fb00 600e 	mla	r0, r0, lr, r6
 8019b70:	b280      	uxth	r0, r0
 8019b72:	b2bf      	uxth	r7, r7
 8019b74:	f10c 0601 	add.w	r6, ip, #1
 8019b78:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019b7c:	f107 0901 	add.w	r9, r7, #1
 8019b80:	1c46      	adds	r6, r0, #1
 8019b82:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8019b86:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019b8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b8c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019b90:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019b94:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019b98:	ea4c 0c06 	orr.w	ip, ip, r6
 8019b9c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019ba0:	4401      	add	r1, r0
 8019ba2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019ba4:	ea4c 0c09 	orr.w	ip, ip, r9
 8019ba8:	f82b cb02 	strh.w	ip, [fp], #2
 8019bac:	4402      	add	r2, r0
 8019bae:	e7af      	b.n	8019b10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019bb0:	140e      	asrs	r6, r1, #16
 8019bb2:	d44a      	bmi.n	8019c4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019bb4:	4546      	cmp	r6, r8
 8019bb6:	da48      	bge.n	8019c4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019bb8:	1410      	asrs	r0, r2, #16
 8019bba:	d446      	bmi.n	8019c4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019bbc:	9f02      	ldr	r7, [sp, #8]
 8019bbe:	42b8      	cmp	r0, r7
 8019bc0:	da43      	bge.n	8019c4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8019bc2:	9f03      	ldr	r7, [sp, #12]
 8019bc4:	fb08 7000 	mla	r0, r8, r0, r7
 8019bc8:	5d80      	ldrb	r0, [r0, r6]
 8019bca:	9e04      	ldr	r6, [sp, #16]
 8019bcc:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019bd0:	f8ba 6000 	ldrh.w	r6, [sl]
 8019bd4:	1237      	asrs	r7, r6, #8
 8019bd6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019bda:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019bde:	fb17 f704 	smulbb	r7, r7, r4
 8019be2:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8019be6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019bea:	00f6      	lsls	r6, r6, #3
 8019bec:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8019bf0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019bf4:	10c7      	asrs	r7, r0, #3
 8019bf6:	b2f6      	uxtb	r6, r6
 8019bf8:	00c0      	lsls	r0, r0, #3
 8019bfa:	fb19 f904 	smulbb	r9, r9, r4
 8019bfe:	fb16 f604 	smulbb	r6, r6, r4
 8019c02:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c06:	b2c0      	uxtb	r0, r0
 8019c08:	fa1f fc8c 	uxth.w	ip, ip
 8019c0c:	fb07 970e 	mla	r7, r7, lr, r9
 8019c10:	fb00 600e 	mla	r0, r0, lr, r6
 8019c14:	b2bf      	uxth	r7, r7
 8019c16:	b280      	uxth	r0, r0
 8019c18:	f10c 0601 	add.w	r6, ip, #1
 8019c1c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019c20:	f107 0901 	add.w	r9, r7, #1
 8019c24:	1c46      	adds	r6, r0, #1
 8019c26:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8019c2a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019c2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c32:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019c36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019c3a:	ea4c 0c06 	orr.w	ip, ip, r6
 8019c3e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019c42:	ea4c 0c09 	orr.w	ip, ip, r9
 8019c46:	f8aa c000 	strh.w	ip, [sl]
 8019c4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c4c:	4401      	add	r1, r0
 8019c4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019c50:	f10a 0a02 	add.w	sl, sl, #2
 8019c54:	4402      	add	r2, r0
 8019c56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019c5a:	e707      	b.n	8019a6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8019c5c:	b007      	add	sp, #28
 8019c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c66:	b085      	sub	sp, #20
 8019c68:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8019c6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c6e:	9203      	str	r2, [sp, #12]
 8019c70:	6842      	ldr	r2, [r0, #4]
 8019c72:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019c74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019c76:	6800      	ldr	r0, [r0, #0]
 8019c78:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8019c7c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019c80:	4696      	mov	lr, r2
 8019c82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c84:	fb0e 2505 	mla	r5, lr, r5, r2
 8019c88:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019c8c:	6860      	ldr	r0, [r4, #4]
 8019c8e:	6822      	ldr	r2, [r4, #0]
 8019c90:	9201      	str	r2, [sp, #4]
 8019c92:	1d02      	adds	r2, r0, #4
 8019c94:	9202      	str	r2, [sp, #8]
 8019c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c9a:	2900      	cmp	r1, #0
 8019c9c:	dc03      	bgt.n	8019ca6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8019c9e:	9a03      	ldr	r2, [sp, #12]
 8019ca0:	2a00      	cmp	r2, #0
 8019ca2:	f340 809b 	ble.w	8019ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8019ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ca8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	dd0e      	ble.n	8019cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019cb6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019cba:	d406      	bmi.n	8019cca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019cbc:	45e6      	cmp	lr, ip
 8019cbe:	da04      	bge.n	8019cca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019cc0:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8019cc4:	d401      	bmi.n	8019cca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019cc6:	45c6      	cmp	lr, r8
 8019cc8:	db05      	blt.n	8019cd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019cca:	443c      	add	r4, r7
 8019ccc:	4430      	add	r0, r6
 8019cce:	3b01      	subs	r3, #1
 8019cd0:	3502      	adds	r5, #2
 8019cd2:	e7ee      	b.n	8019cb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8019cd4:	d010      	beq.n	8019cf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019cd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8019cda:	fb07 490e 	mla	r9, r7, lr, r4
 8019cde:	ea5f 4929 	movs.w	r9, r9, asr #16
 8019ce2:	d53d      	bpl.n	8019d60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8019ce4:	469e      	mov	lr, r3
 8019ce6:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8019cea:	f1be 0f00 	cmp.w	lr, #0
 8019cee:	dc58      	bgt.n	8019da2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019cf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cf4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019cf8:	2900      	cmp	r1, #0
 8019cfa:	dd6f      	ble.n	8019ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8019cfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d0a:	3901      	subs	r1, #1
 8019d0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d14:	eeb0 6a62 	vmov.f32	s12, s5
 8019d18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d24:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019d28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d2c:	eeb0 6a43 	vmov.f32	s12, s6
 8019d30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d34:	ee12 2a90 	vmov	r2, s5
 8019d38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d3c:	fb92 f7f3 	sdiv	r7, r2, r3
 8019d40:	ee13 2a10 	vmov	r2, s6
 8019d44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d48:	fb92 f6f3 	sdiv	r6, r2, r3
 8019d4c:	9a03      	ldr	r2, [sp, #12]
 8019d4e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019d52:	bf08      	it	eq
 8019d54:	4613      	moveq	r3, r2
 8019d56:	eeb0 3a67 	vmov.f32	s6, s15
 8019d5a:	eef0 2a47 	vmov.f32	s5, s14
 8019d5e:	e79c      	b.n	8019c9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8019d60:	45e1      	cmp	r9, ip
 8019d62:	dabf      	bge.n	8019ce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d64:	fb06 0e0e 	mla	lr, r6, lr, r0
 8019d68:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019d6c:	d4ba      	bmi.n	8019ce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d6e:	45c6      	cmp	lr, r8
 8019d70:	dab8      	bge.n	8019ce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019d72:	469e      	mov	lr, r3
 8019d74:	46aa      	mov	sl, r5
 8019d76:	f1be 0f00 	cmp.w	lr, #0
 8019d7a:	ddb9      	ble.n	8019cf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8019d7c:	9a01      	ldr	r2, [sp, #4]
 8019d7e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019d82:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8019d86:	fb0c 2909 	mla	r9, ip, r9, r2
 8019d8a:	9a02      	ldr	r2, [sp, #8]
 8019d8c:	f819 900b 	ldrb.w	r9, [r9, fp]
 8019d90:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8019d94:	f82a 9b02 	strh.w	r9, [sl], #2
 8019d98:	443c      	add	r4, r7
 8019d9a:	4430      	add	r0, r6
 8019d9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019da0:	e7e9      	b.n	8019d76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8019da2:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8019da6:	d414      	bmi.n	8019dd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019da8:	45e2      	cmp	sl, ip
 8019daa:	da12      	bge.n	8019dd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019dac:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019db0:	d40f      	bmi.n	8019dd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019db2:	45c1      	cmp	r9, r8
 8019db4:	da0d      	bge.n	8019dd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8019db6:	9a01      	ldr	r2, [sp, #4]
 8019db8:	fb0c 2909 	mla	r9, ip, r9, r2
 8019dbc:	9a02      	ldr	r2, [sp, #8]
 8019dbe:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019dc2:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 8019dc6:	f06f 0201 	mvn.w	r2, #1
 8019dca:	fb02 f90e 	mul.w	r9, r2, lr
 8019dce:	f82b a009 	strh.w	sl, [fp, r9]
 8019dd2:	443c      	add	r4, r7
 8019dd4:	4430      	add	r0, r6
 8019dd6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019dda:	e786      	b.n	8019cea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8019ddc:	b005      	add	sp, #20
 8019dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019de2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de6:	b087      	sub	sp, #28
 8019de8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019dea:	9205      	str	r2, [sp, #20]
 8019dec:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8019df0:	9202      	str	r2, [sp, #8]
 8019df2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019df6:	9101      	str	r1, [sp, #4]
 8019df8:	6871      	ldr	r1, [r6, #4]
 8019dfa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8019dfc:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8019e00:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8019e04:	fb01 2404 	mla	r4, r1, r4, r2
 8019e08:	6832      	ldr	r2, [r6, #0]
 8019e0a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019e0e:	682a      	ldr	r2, [r5, #0]
 8019e10:	9203      	str	r2, [sp, #12]
 8019e12:	686a      	ldr	r2, [r5, #4]
 8019e14:	fa1f fc80 	uxth.w	ip, r0
 8019e18:	3204      	adds	r2, #4
 8019e1a:	43c0      	mvns	r0, r0
 8019e1c:	9200      	str	r2, [sp, #0]
 8019e1e:	b2c0      	uxtb	r0, r0
 8019e20:	9a01      	ldr	r2, [sp, #4]
 8019e22:	2a00      	cmp	r2, #0
 8019e24:	dc03      	bgt.n	8019e2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019e26:	9a05      	ldr	r2, [sp, #20]
 8019e28:	2a00      	cmp	r2, #0
 8019e2a:	f340 811b 	ble.w	801a064 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019e2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e30:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	dd0f      	ble.n	8019e5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019e3e:	140d      	asrs	r5, r1, #16
 8019e40:	d406      	bmi.n	8019e50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019e42:	4575      	cmp	r5, lr
 8019e44:	da04      	bge.n	8019e50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019e46:	1415      	asrs	r5, r2, #16
 8019e48:	d402      	bmi.n	8019e50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019e4a:	9e02      	ldr	r6, [sp, #8]
 8019e4c:	42b5      	cmp	r5, r6
 8019e4e:	db07      	blt.n	8019e60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019e50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019e52:	4429      	add	r1, r5
 8019e54:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019e56:	3b01      	subs	r3, #1
 8019e58:	442a      	add	r2, r5
 8019e5a:	3402      	adds	r4, #2
 8019e5c:	e7ed      	b.n	8019e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019e5e:	d00f      	beq.n	8019e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019e60:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e62:	1e5d      	subs	r5, r3, #1
 8019e64:	fb06 1605 	mla	r6, r6, r5, r1
 8019e68:	1436      	asrs	r6, r6, #16
 8019e6a:	d547      	bpl.n	8019efc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8019e6c:	469a      	mov	sl, r3
 8019e6e:	46a1      	mov	r9, r4
 8019e70:	f1ba 0f00 	cmp.w	sl, #0
 8019e74:	f300 809f 	bgt.w	8019fb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8019e78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e80:	9b01      	ldr	r3, [sp, #4]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	f340 80ee 	ble.w	801a064 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019e88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ea2:	eef0 6a62 	vmov.f32	s13, s5
 8019ea6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019eaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019eae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019eb2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019eb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019eba:	eef0 6a43 	vmov.f32	s13, s6
 8019ebe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ec2:	ee12 2a90 	vmov	r2, s5
 8019ec6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ece:	ee13 2a10 	vmov	r2, s6
 8019ed2:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8019eda:	9314      	str	r3, [sp, #80]	; 0x50
 8019edc:	9b01      	ldr	r3, [sp, #4]
 8019ede:	9a05      	ldr	r2, [sp, #20]
 8019ee0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ee4:	3b01      	subs	r3, #1
 8019ee6:	9301      	str	r3, [sp, #4]
 8019ee8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019eee:	eeb0 3a67 	vmov.f32	s6, s15
 8019ef2:	bf08      	it	eq
 8019ef4:	4613      	moveq	r3, r2
 8019ef6:	eef0 2a47 	vmov.f32	s5, s14
 8019efa:	e791      	b.n	8019e20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019efc:	4576      	cmp	r6, lr
 8019efe:	dab5      	bge.n	8019e6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019f00:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019f02:	fb06 2505 	mla	r5, r6, r5, r2
 8019f06:	142d      	asrs	r5, r5, #16
 8019f08:	d4b0      	bmi.n	8019e6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019f0a:	9e02      	ldr	r6, [sp, #8]
 8019f0c:	42b5      	cmp	r5, r6
 8019f0e:	daad      	bge.n	8019e6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019f10:	4699      	mov	r9, r3
 8019f12:	46a2      	mov	sl, r4
 8019f14:	f1b9 0f00 	cmp.w	r9, #0
 8019f18:	ddae      	ble.n	8019e78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019f1a:	9f03      	ldr	r7, [sp, #12]
 8019f1c:	1415      	asrs	r5, r2, #16
 8019f1e:	140e      	asrs	r6, r1, #16
 8019f20:	fb0e 7505 	mla	r5, lr, r5, r7
 8019f24:	f109 39ff 	add.w	r9, r9, #4294967295
 8019f28:	f815 8006 	ldrb.w	r8, [r5, r6]
 8019f2c:	9d00      	ldr	r5, [sp, #0]
 8019f2e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019f32:	eb05 0b08 	add.w	fp, r5, r8
 8019f36:	f8ba 5000 	ldrh.w	r5, [sl]
 8019f3a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019f3e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019f42:	122f      	asrs	r7, r5, #8
 8019f44:	fb16 f60c 	smulbb	r6, r6, ip
 8019f48:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019f4c:	fb07 6700 	mla	r7, r7, r0, r6
 8019f50:	10ee      	asrs	r6, r5, #3
 8019f52:	fb1b fb0c 	smulbb	fp, fp, ip
 8019f56:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019f5a:	fb06 b600 	mla	r6, r6, r0, fp
 8019f5e:	b2b6      	uxth	r6, r6
 8019f60:	9604      	str	r6, [sp, #16]
 8019f62:	9e00      	ldr	r6, [sp, #0]
 8019f64:	00ed      	lsls	r5, r5, #3
 8019f66:	f816 8008 	ldrb.w	r8, [r6, r8]
 8019f6a:	b2ed      	uxtb	r5, r5
 8019f6c:	fb15 f500 	smulbb	r5, r5, r0
 8019f70:	b2bf      	uxth	r7, r7
 8019f72:	fb08 580c 	mla	r8, r8, ip, r5
 8019f76:	fa1f f888 	uxth.w	r8, r8
 8019f7a:	1c7d      	adds	r5, r7, #1
 8019f7c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8019f80:	f108 0501 	add.w	r5, r8, #1
 8019f84:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8019f88:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019f8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019f90:	432f      	orrs	r7, r5
 8019f92:	9d04      	ldr	r5, [sp, #16]
 8019f94:	f105 0b01 	add.w	fp, r5, #1
 8019f98:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8019f9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019f9e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019fa2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019fa6:	4429      	add	r1, r5
 8019fa8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019faa:	ea47 070b 	orr.w	r7, r7, fp
 8019fae:	f82a 7b02 	strh.w	r7, [sl], #2
 8019fb2:	442a      	add	r2, r5
 8019fb4:	e7ae      	b.n	8019f14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019fb6:	140e      	asrs	r6, r1, #16
 8019fb8:	d44b      	bmi.n	801a052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019fba:	4576      	cmp	r6, lr
 8019fbc:	da49      	bge.n	801a052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019fbe:	1415      	asrs	r5, r2, #16
 8019fc0:	d447      	bmi.n	801a052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019fc2:	9f02      	ldr	r7, [sp, #8]
 8019fc4:	42bd      	cmp	r5, r7
 8019fc6:	da44      	bge.n	801a052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019fc8:	9f03      	ldr	r7, [sp, #12]
 8019fca:	fb0e 7505 	mla	r5, lr, r5, r7
 8019fce:	f815 8006 	ldrb.w	r8, [r5, r6]
 8019fd2:	9d00      	ldr	r5, [sp, #0]
 8019fd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019fd8:	eb05 0b08 	add.w	fp, r5, r8
 8019fdc:	f8b9 5000 	ldrh.w	r5, [r9]
 8019fe0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019fe4:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019fe8:	122f      	asrs	r7, r5, #8
 8019fea:	fb16 f60c 	smulbb	r6, r6, ip
 8019fee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019ff2:	fb07 6700 	mla	r7, r7, r0, r6
 8019ff6:	10ee      	asrs	r6, r5, #3
 8019ff8:	fb1b fb0c 	smulbb	fp, fp, ip
 8019ffc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a000:	fb06 b600 	mla	r6, r6, r0, fp
 801a004:	b2b6      	uxth	r6, r6
 801a006:	9604      	str	r6, [sp, #16]
 801a008:	9e00      	ldr	r6, [sp, #0]
 801a00a:	00ed      	lsls	r5, r5, #3
 801a00c:	f816 8008 	ldrb.w	r8, [r6, r8]
 801a010:	b2ed      	uxtb	r5, r5
 801a012:	fb15 f500 	smulbb	r5, r5, r0
 801a016:	b2bf      	uxth	r7, r7
 801a018:	fb08 580c 	mla	r8, r8, ip, r5
 801a01c:	fa1f f888 	uxth.w	r8, r8
 801a020:	1c7d      	adds	r5, r7, #1
 801a022:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801a026:	f108 0501 	add.w	r5, r8, #1
 801a02a:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801a02e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a032:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a036:	432f      	orrs	r7, r5
 801a038:	9d04      	ldr	r5, [sp, #16]
 801a03a:	f105 0b01 	add.w	fp, r5, #1
 801a03e:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801a042:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a046:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a04a:	ea47 070b 	orr.w	r7, r7, fp
 801a04e:	f8a9 7000 	strh.w	r7, [r9]
 801a052:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a054:	4429      	add	r1, r5
 801a056:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a058:	f109 0902 	add.w	r9, r9, #2
 801a05c:	442a      	add	r2, r5
 801a05e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a062:	e705      	b.n	8019e70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801a064:	b007      	add	sp, #28
 801a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a070:	b085      	sub	sp, #20
 801a072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a076:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a078:	9203      	str	r2, [sp, #12]
 801a07a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a07e:	6870      	ldr	r0, [r6, #4]
 801a080:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a082:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 801a086:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801a08a:	9101      	str	r1, [sp, #4]
 801a08c:	fb00 2404 	mla	r4, r0, r4, r2
 801a090:	6832      	ldr	r2, [r6, #0]
 801a092:	686e      	ldr	r6, [r5, #4]
 801a094:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a098:	682a      	ldr	r2, [r5, #0]
 801a09a:	9202      	str	r2, [sp, #8]
 801a09c:	3604      	adds	r6, #4
 801a09e:	9a01      	ldr	r2, [sp, #4]
 801a0a0:	2a00      	cmp	r2, #0
 801a0a2:	dc03      	bgt.n	801a0ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801a0a4:	9a03      	ldr	r2, [sp, #12]
 801a0a6:	2a00      	cmp	r2, #0
 801a0a8:	f340 80c7 	ble.w	801a23a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801a0ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a0b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	dd0e      	ble.n	801a0da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a0bc:	1405      	asrs	r5, r0, #16
 801a0be:	d405      	bmi.n	801a0cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a0c0:	42bd      	cmp	r5, r7
 801a0c2:	da03      	bge.n	801a0cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a0c4:	1415      	asrs	r5, r2, #16
 801a0c6:	d401      	bmi.n	801a0cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a0c8:	4545      	cmp	r5, r8
 801a0ca:	db07      	blt.n	801a0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a0cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a0ce:	4428      	add	r0, r5
 801a0d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a0d2:	3b01      	subs	r3, #1
 801a0d4:	442a      	add	r2, r5
 801a0d6:	3402      	adds	r4, #2
 801a0d8:	e7ee      	b.n	801a0b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801a0da:	d010      	beq.n	801a0fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a0dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a0de:	1e5d      	subs	r5, r3, #1
 801a0e0:	fb01 0c05 	mla	ip, r1, r5, r0
 801a0e4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801a0e8:	d545      	bpl.n	801a176 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801a0ea:	469e      	mov	lr, r3
 801a0ec:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 801a0f0:	f1be 0f00 	cmp.w	lr, #0
 801a0f4:	dc72      	bgt.n	801a1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801a0f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a0fe:	9b01      	ldr	r3, [sp, #4]
 801a100:	2b00      	cmp	r3, #0
 801a102:	f340 809a 	ble.w	801a23a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801a106:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a10a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a10e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a114:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a118:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a11c:	eeb0 6a62 	vmov.f32	s12, s5
 801a120:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a124:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a128:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a12c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a130:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a134:	eeb0 6a43 	vmov.f32	s12, s6
 801a138:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a13c:	ee12 2a90 	vmov	r2, s5
 801a140:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a144:	fb92 f3f3 	sdiv	r3, r2, r3
 801a148:	ee13 2a10 	vmov	r2, s6
 801a14c:	9311      	str	r3, [sp, #68]	; 0x44
 801a14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a150:	fb92 f3f3 	sdiv	r3, r2, r3
 801a154:	9312      	str	r3, [sp, #72]	; 0x48
 801a156:	9b01      	ldr	r3, [sp, #4]
 801a158:	9a03      	ldr	r2, [sp, #12]
 801a15a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a15e:	3b01      	subs	r3, #1
 801a160:	9301      	str	r3, [sp, #4]
 801a162:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a168:	eeb0 3a67 	vmov.f32	s6, s15
 801a16c:	bf08      	it	eq
 801a16e:	4613      	moveq	r3, r2
 801a170:	eef0 2a47 	vmov.f32	s5, s14
 801a174:	e793      	b.n	801a09e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 801a176:	45bc      	cmp	ip, r7
 801a178:	dab7      	bge.n	801a0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a17a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a17c:	fb01 2505 	mla	r5, r1, r5, r2
 801a180:	142d      	asrs	r5, r5, #16
 801a182:	d4b2      	bmi.n	801a0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a184:	4545      	cmp	r5, r8
 801a186:	dab0      	bge.n	801a0ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a188:	469e      	mov	lr, r3
 801a18a:	46a2      	mov	sl, r4
 801a18c:	f1be 0f00 	cmp.w	lr, #0
 801a190:	ddb1      	ble.n	801a0f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a192:	9902      	ldr	r1, [sp, #8]
 801a194:	1415      	asrs	r5, r2, #16
 801a196:	fb07 1505 	mla	r5, r7, r5, r1
 801a19a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a19e:	4928      	ldr	r1, [pc, #160]	; (801a240 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 801a1a0:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801a1a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a1a8:	eb06 0b0c 	add.w	fp, r6, ip
 801a1ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a1b0:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801a1b4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a1b8:	00ed      	lsls	r5, r5, #3
 801a1ba:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a1be:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a1c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a1c4:	ea49 0505 	orr.w	r5, r9, r5
 801a1c8:	f816 900c 	ldrb.w	r9, [r6, ip]
 801a1cc:	4408      	add	r0, r1
 801a1ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a1d0:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 801a1d4:	f82a 5b02 	strh.w	r5, [sl], #2
 801a1d8:	440a      	add	r2, r1
 801a1da:	e7d7      	b.n	801a18c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 801a1dc:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801a1e0:	d424      	bmi.n	801a22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1e2:	45bc      	cmp	ip, r7
 801a1e4:	da22      	bge.n	801a22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1e6:	1415      	asrs	r5, r2, #16
 801a1e8:	d420      	bmi.n	801a22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1ea:	4545      	cmp	r5, r8
 801a1ec:	da1e      	bge.n	801a22c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801a1ee:	9902      	ldr	r1, [sp, #8]
 801a1f0:	fb07 1505 	mla	r5, r7, r5, r1
 801a1f4:	f06f 0101 	mvn.w	r1, #1
 801a1f8:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801a1fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a200:	eb06 050c 	add.w	r5, r6, ip
 801a204:	fb01 f90e 	mul.w	r9, r1, lr
 801a208:	f895 a002 	ldrb.w	sl, [r5, #2]
 801a20c:	786d      	ldrb	r5, [r5, #1]
 801a20e:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a212:	00ed      	lsls	r5, r5, #3
 801a214:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 801a218:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a21c:	ea4a 0505 	orr.w	r5, sl, r5
 801a220:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801a224:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 801a228:	f82b 5009 	strh.w	r5, [fp, r9]
 801a22c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a22e:	4408      	add	r0, r1
 801a230:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a232:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a236:	440a      	add	r2, r1
 801a238:	e75a      	b.n	801a0f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801a23a:	b005      	add	sp, #20
 801a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a240:	fffff800 	.word	0xfffff800

0801a244 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	b087      	sub	sp, #28
 801a24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a24e:	9204      	str	r2, [sp, #16]
 801a250:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a254:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a256:	9201      	str	r2, [sp, #4]
 801a258:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a25c:	9205      	str	r2, [sp, #20]
 801a25e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a262:	9100      	str	r1, [sp, #0]
 801a264:	6869      	ldr	r1, [r5, #4]
 801a266:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a268:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801a26c:	fb01 2404 	mla	r4, r1, r4, r2
 801a270:	682a      	ldr	r2, [r5, #0]
 801a272:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a276:	6802      	ldr	r2, [r0, #0]
 801a278:	9202      	str	r2, [sp, #8]
 801a27a:	6842      	ldr	r2, [r0, #4]
 801a27c:	3204      	adds	r2, #4
 801a27e:	9203      	str	r2, [sp, #12]
 801a280:	9a00      	ldr	r2, [sp, #0]
 801a282:	2a00      	cmp	r2, #0
 801a284:	dc03      	bgt.n	801a28e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801a286:	9a04      	ldr	r2, [sp, #16]
 801a288:	2a00      	cmp	r2, #0
 801a28a:	f340 812c 	ble.w	801a4e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a28e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a290:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a296:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	dd0f      	ble.n	801a2be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a29e:	1402      	asrs	r2, r0, #16
 801a2a0:	d406      	bmi.n	801a2b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a2a2:	4572      	cmp	r2, lr
 801a2a4:	da04      	bge.n	801a2b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a2a6:	140a      	asrs	r2, r1, #16
 801a2a8:	d402      	bmi.n	801a2b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a2aa:	9d01      	ldr	r5, [sp, #4]
 801a2ac:	42aa      	cmp	r2, r5
 801a2ae:	db07      	blt.n	801a2c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a2b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a2b2:	4410      	add	r0, r2
 801a2b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a2b6:	3b01      	subs	r3, #1
 801a2b8:	4411      	add	r1, r2
 801a2ba:	3402      	adds	r4, #2
 801a2bc:	e7ed      	b.n	801a29a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801a2be:	d00f      	beq.n	801a2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a2c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a2c2:	1e5a      	subs	r2, r3, #1
 801a2c4:	fb05 0502 	mla	r5, r5, r2, r0
 801a2c8:	142d      	asrs	r5, r5, #16
 801a2ca:	d545      	bpl.n	801a358 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801a2cc:	4699      	mov	r9, r3
 801a2ce:	46a0      	mov	r8, r4
 801a2d0:	f1b9 0f00 	cmp.w	r9, #0
 801a2d4:	f300 80a7 	bgt.w	801a426 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801a2d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2e0:	9b00      	ldr	r3, [sp, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	f340 80ff 	ble.w	801a4e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a2e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2fe:	eeb0 6a62 	vmov.f32	s12, s5
 801a302:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a306:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a30a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a30e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a312:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a316:	eeb0 6a43 	vmov.f32	s12, s6
 801a31a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a31e:	ee12 2a90 	vmov	r2, s5
 801a322:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a326:	fb92 f3f3 	sdiv	r3, r2, r3
 801a32a:	ee13 2a10 	vmov	r2, s6
 801a32e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a330:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a332:	fb92 f3f3 	sdiv	r3, r2, r3
 801a336:	9314      	str	r3, [sp, #80]	; 0x50
 801a338:	9b00      	ldr	r3, [sp, #0]
 801a33a:	9a04      	ldr	r2, [sp, #16]
 801a33c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a340:	3b01      	subs	r3, #1
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a34a:	eeb0 3a67 	vmov.f32	s6, s15
 801a34e:	bf08      	it	eq
 801a350:	4613      	moveq	r3, r2
 801a352:	eef0 2a47 	vmov.f32	s5, s14
 801a356:	e793      	b.n	801a280 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a358:	4575      	cmp	r5, lr
 801a35a:	dab7      	bge.n	801a2cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a35c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a35e:	fb05 1202 	mla	r2, r5, r2, r1
 801a362:	1412      	asrs	r2, r2, #16
 801a364:	d4b2      	bmi.n	801a2cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a366:	9d01      	ldr	r5, [sp, #4]
 801a368:	42aa      	cmp	r2, r5
 801a36a:	daaf      	bge.n	801a2cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801a36c:	f04f 0800 	mov.w	r8, #0
 801a370:	eba3 0208 	sub.w	r2, r3, r8
 801a374:	2a00      	cmp	r2, #0
 801a376:	ddaf      	ble.n	801a2d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801a378:	9e02      	ldr	r6, [sp, #8]
 801a37a:	140a      	asrs	r2, r1, #16
 801a37c:	1405      	asrs	r5, r0, #16
 801a37e:	fb0e 6202 	mla	r2, lr, r2, r6
 801a382:	5d52      	ldrb	r2, [r2, r5]
 801a384:	9d03      	ldr	r5, [sp, #12]
 801a386:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a38a:	0e2e      	lsrs	r6, r5, #24
 801a38c:	d044      	beq.n	801a418 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801a38e:	9a05      	ldr	r2, [sp, #20]
 801a390:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a394:	4356      	muls	r6, r2
 801a396:	1c72      	adds	r2, r6, #1
 801a398:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a39c:	1212      	asrs	r2, r2, #8
 801a39e:	fa1f f982 	uxth.w	r9, r2
 801a3a2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a3a6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a3aa:	43d2      	mvns	r2, r2
 801a3ac:	b2d2      	uxtb	r2, r2
 801a3ae:	fb16 f609 	smulbb	r6, r6, r9
 801a3b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a3b6:	fb07 6702 	mla	r7, r7, r2, r6
 801a3ba:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a3be:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a3c2:	b2ed      	uxtb	r5, r5
 801a3c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a3c8:	fa5f fc8c 	uxtb.w	ip, ip
 801a3cc:	fb15 f509 	smulbb	r5, r5, r9
 801a3d0:	fb0c 5502 	mla	r5, ip, r2, r5
 801a3d4:	b2bf      	uxth	r7, r7
 801a3d6:	fb1a fa09 	smulbb	sl, sl, r9
 801a3da:	b2ad      	uxth	r5, r5
 801a3dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a3e0:	fb06 a602 	mla	r6, r6, r2, sl
 801a3e4:	1c7a      	adds	r2, r7, #1
 801a3e6:	f105 0a01 	add.w	sl, r5, #1
 801a3ea:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a3ee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a3f2:	b2b6      	uxth	r6, r6
 801a3f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a3f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a3fc:	ea47 070a 	orr.w	r7, r7, sl
 801a400:	f106 0a01 	add.w	sl, r6, #1
 801a404:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a408:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a40c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a410:	ea47 070a 	orr.w	r7, r7, sl
 801a414:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a41a:	4410      	add	r0, r2
 801a41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a41e:	f108 0801 	add.w	r8, r8, #1
 801a422:	4411      	add	r1, r2
 801a424:	e7a4      	b.n	801a370 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 801a426:	1405      	asrs	r5, r0, #16
 801a428:	d454      	bmi.n	801a4d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a42a:	4575      	cmp	r5, lr
 801a42c:	da52      	bge.n	801a4d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a42e:	140a      	asrs	r2, r1, #16
 801a430:	d450      	bmi.n	801a4d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a432:	9e01      	ldr	r6, [sp, #4]
 801a434:	42b2      	cmp	r2, r6
 801a436:	da4d      	bge.n	801a4d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a438:	9e02      	ldr	r6, [sp, #8]
 801a43a:	fb0e 6202 	mla	r2, lr, r2, r6
 801a43e:	5d52      	ldrb	r2, [r2, r5]
 801a440:	9d03      	ldr	r5, [sp, #12]
 801a442:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a446:	0e2e      	lsrs	r6, r5, #24
 801a448:	d044      	beq.n	801a4d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801a44a:	9a05      	ldr	r2, [sp, #20]
 801a44c:	f8b8 c000 	ldrh.w	ip, [r8]
 801a450:	4356      	muls	r6, r2
 801a452:	1c72      	adds	r2, r6, #1
 801a454:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a458:	1212      	asrs	r2, r2, #8
 801a45a:	fa1f fa82 	uxth.w	sl, r2
 801a45e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a462:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a466:	43d2      	mvns	r2, r2
 801a468:	b2d2      	uxtb	r2, r2
 801a46a:	fb16 f60a 	smulbb	r6, r6, sl
 801a46e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a472:	fb07 6702 	mla	r7, r7, r2, r6
 801a476:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 801a47a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a47e:	b2ed      	uxtb	r5, r5
 801a480:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a484:	fa5f fc8c 	uxtb.w	ip, ip
 801a488:	fb15 f50a 	smulbb	r5, r5, sl
 801a48c:	fb0c 5502 	mla	r5, ip, r2, r5
 801a490:	b2bf      	uxth	r7, r7
 801a492:	fb1b fb0a 	smulbb	fp, fp, sl
 801a496:	b2ad      	uxth	r5, r5
 801a498:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a49c:	fb06 b602 	mla	r6, r6, r2, fp
 801a4a0:	1c7a      	adds	r2, r7, #1
 801a4a2:	f105 0b01 	add.w	fp, r5, #1
 801a4a6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a4aa:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801a4ae:	b2b6      	uxth	r6, r6
 801a4b0:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801a4b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a4b8:	ea47 070b 	orr.w	r7, r7, fp
 801a4bc:	f106 0b01 	add.w	fp, r6, #1
 801a4c0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a4c4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a4c8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a4cc:	ea47 070b 	orr.w	r7, r7, fp
 801a4d0:	f8a8 7000 	strh.w	r7, [r8]
 801a4d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a4d6:	4410      	add	r0, r2
 801a4d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a4da:	f108 0802 	add.w	r8, r8, #2
 801a4de:	4411      	add	r1, r2
 801a4e0:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4e4:	e6f4      	b.n	801a2d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801a4e6:	b007      	add	sp, #28
 801a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a4ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f0:	b087      	sub	sp, #28
 801a4f2:	468b      	mov	fp, r1
 801a4f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a4f6:	9205      	str	r2, [sp, #20]
 801a4f8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a4fc:	9201      	str	r2, [sp, #4]
 801a4fe:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a502:	6869      	ldr	r1, [r5, #4]
 801a504:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a506:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a50a:	fb01 2404 	mla	r4, r1, r4, r2
 801a50e:	682a      	ldr	r2, [r5, #0]
 801a510:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a514:	6802      	ldr	r2, [r0, #0]
 801a516:	9203      	str	r2, [sp, #12]
 801a518:	6842      	ldr	r2, [r0, #4]
 801a51a:	3204      	adds	r2, #4
 801a51c:	9204      	str	r2, [sp, #16]
 801a51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a522:	f1bb 0f00 	cmp.w	fp, #0
 801a526:	dc03      	bgt.n	801a530 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801a528:	9a05      	ldr	r2, [sp, #20]
 801a52a:	2a00      	cmp	r2, #0
 801a52c:	f340 814a 	ble.w	801a7c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801a530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a532:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a536:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a538:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	dd0f      	ble.n	801a560 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a540:	1408      	asrs	r0, r1, #16
 801a542:	d406      	bmi.n	801a552 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a544:	4540      	cmp	r0, r8
 801a546:	da04      	bge.n	801a552 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a548:	1410      	asrs	r0, r2, #16
 801a54a:	d402      	bmi.n	801a552 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a54c:	9d01      	ldr	r5, [sp, #4]
 801a54e:	42a8      	cmp	r0, r5
 801a550:	db07      	blt.n	801a562 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801a552:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a554:	4401      	add	r1, r0
 801a556:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a558:	3b01      	subs	r3, #1
 801a55a:	4402      	add	r2, r0
 801a55c:	3402      	adds	r4, #2
 801a55e:	e7ed      	b.n	801a53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801a560:	d018      	beq.n	801a594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 801a562:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a564:	1e58      	subs	r0, r3, #1
 801a566:	fb05 1500 	mla	r5, r5, r0, r1
 801a56a:	142d      	asrs	r5, r5, #16
 801a56c:	d40a      	bmi.n	801a584 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a56e:	4545      	cmp	r5, r8
 801a570:	da08      	bge.n	801a584 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a572:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a574:	fb05 2000 	mla	r0, r5, r0, r2
 801a578:	1400      	asrs	r0, r0, #16
 801a57a:	d403      	bmi.n	801a584 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a57c:	9d01      	ldr	r5, [sp, #4]
 801a57e:	42a8      	cmp	r0, r5
 801a580:	f2c0 80b7 	blt.w	801a6f2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801a584:	2600      	movs	r6, #0
 801a586:	1998      	adds	r0, r3, r6
 801a588:	2800      	cmp	r0, #0
 801a58a:	dc3e      	bgt.n	801a60a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801a58c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a590:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a594:	f1bb 0f00 	cmp.w	fp, #0
 801a598:	f340 8114 	ble.w	801a7c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801a59c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a5a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a5a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5aa:	f1bb 0b01 	subs.w	fp, fp, #1
 801a5ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a5b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a5b6:	eeb0 6a62 	vmov.f32	s12, s5
 801a5ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a5be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a5c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a5c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a5ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a5ce:	eeb0 6a43 	vmov.f32	s12, s6
 801a5d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a5d6:	ee12 2a90 	vmov	r2, s5
 801a5da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5de:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5e2:	ee13 2a10 	vmov	r2, s6
 801a5e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a5ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5f2:	9a05      	ldr	r2, [sp, #20]
 801a5f4:	9314      	str	r3, [sp, #80]	; 0x50
 801a5f6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5fc:	eeb0 3a67 	vmov.f32	s6, s15
 801a600:	bf08      	it	eq
 801a602:	4613      	moveq	r3, r2
 801a604:	eef0 2a47 	vmov.f32	s5, s14
 801a608:	e78b      	b.n	801a522 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a60a:	140d      	asrs	r5, r1, #16
 801a60c:	d459      	bmi.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a60e:	4545      	cmp	r5, r8
 801a610:	da57      	bge.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a612:	1410      	asrs	r0, r2, #16
 801a614:	d455      	bmi.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a616:	9f01      	ldr	r7, [sp, #4]
 801a618:	42b8      	cmp	r0, r7
 801a61a:	da52      	bge.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a61c:	9f03      	ldr	r7, [sp, #12]
 801a61e:	fb08 7000 	mla	r0, r8, r0, r7
 801a622:	5d40      	ldrb	r0, [r0, r5]
 801a624:	9d04      	ldr	r5, [sp, #16]
 801a626:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a62a:	0e07      	lsrs	r7, r0, #24
 801a62c:	2fff      	cmp	r7, #255	; 0xff
 801a62e:	d04e      	beq.n	801a6ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801a630:	b2fd      	uxtb	r5, r7
 801a632:	2f00      	cmp	r7, #0
 801a634:	d045      	beq.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a636:	f06f 0701 	mvn.w	r7, #1
 801a63a:	4377      	muls	r7, r6
 801a63c:	fa1f f985 	uxth.w	r9, r5
 801a640:	f834 e007 	ldrh.w	lr, [r4, r7]
 801a644:	9702      	str	r7, [sp, #8]
 801a646:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a64a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a64e:	43ed      	mvns	r5, r5
 801a650:	b2ed      	uxtb	r5, r5
 801a652:	fb17 f709 	smulbb	r7, r7, r9
 801a656:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a65a:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a65e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a662:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a666:	b2c0      	uxtb	r0, r0
 801a668:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a66c:	fa5f fe8e 	uxtb.w	lr, lr
 801a670:	fb10 f009 	smulbb	r0, r0, r9
 801a674:	fb0e 0005 	mla	r0, lr, r5, r0
 801a678:	b280      	uxth	r0, r0
 801a67a:	fa1f fc8c 	uxth.w	ip, ip
 801a67e:	fb1a fa09 	smulbb	sl, sl, r9
 801a682:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a686:	fb07 a705 	mla	r7, r7, r5, sl
 801a68a:	f100 0a01 	add.w	sl, r0, #1
 801a68e:	f10c 0501 	add.w	r5, ip, #1
 801a692:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a696:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a69a:	b2bf      	uxth	r7, r7
 801a69c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a6a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a6a4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a6a8:	f107 0a01 	add.w	sl, r7, #1
 801a6ac:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a6b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a6b4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a6b8:	9802      	ldr	r0, [sp, #8]
 801a6ba:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a6be:	f824 c000 	strh.w	ip, [r4, r0]
 801a6c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a6c4:	4401      	add	r1, r0
 801a6c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a6c8:	3e01      	subs	r6, #1
 801a6ca:	4402      	add	r2, r0
 801a6cc:	e75b      	b.n	801a586 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801a6ce:	f06f 0501 	mvn.w	r5, #1
 801a6d2:	fb05 f706 	mul.w	r7, r5, r6
 801a6d6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a6da:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a6de:	0945      	lsrs	r5, r0, #5
 801a6e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a6e4:	ea4c 0505 	orr.w	r5, ip, r5
 801a6e8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a6ec:	4305      	orrs	r5, r0
 801a6ee:	53e5      	strh	r5, [r4, r7]
 801a6f0:	e7e7      	b.n	801a6c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801a6f2:	f04f 0e00 	mov.w	lr, #0
 801a6f6:	eba3 000e 	sub.w	r0, r3, lr
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	f77f af46 	ble.w	801a58c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a700:	9e03      	ldr	r6, [sp, #12]
 801a702:	1410      	asrs	r0, r2, #16
 801a704:	140d      	asrs	r5, r1, #16
 801a706:	fb08 6000 	mla	r0, r8, r0, r6
 801a70a:	5d40      	ldrb	r0, [r0, r5]
 801a70c:	9d04      	ldr	r5, [sp, #16]
 801a70e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a712:	0e06      	lsrs	r6, r0, #24
 801a714:	2eff      	cmp	r6, #255	; 0xff
 801a716:	d048      	beq.n	801a7aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a718:	b2f5      	uxtb	r5, r6
 801a71a:	2e00      	cmp	r6, #0
 801a71c:	d03e      	beq.n	801a79c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a71e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801a722:	fa1f f985 	uxth.w	r9, r5
 801a726:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a72a:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801a72e:	43ed      	mvns	r5, r5
 801a730:	b2ed      	uxtb	r5, r5
 801a732:	fb16 f609 	smulbb	r6, r6, r9
 801a736:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a73a:	fb07 6705 	mla	r7, r7, r5, r6
 801a73e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a742:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a746:	b2c0      	uxtb	r0, r0
 801a748:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a74c:	fa5f fc8c 	uxtb.w	ip, ip
 801a750:	fb10 f009 	smulbb	r0, r0, r9
 801a754:	fb0c 0005 	mla	r0, ip, r5, r0
 801a758:	b2bf      	uxth	r7, r7
 801a75a:	fb1a fa09 	smulbb	sl, sl, r9
 801a75e:	b280      	uxth	r0, r0
 801a760:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a764:	fb06 a605 	mla	r6, r6, r5, sl
 801a768:	1c7d      	adds	r5, r7, #1
 801a76a:	f100 0a01 	add.w	sl, r0, #1
 801a76e:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801a772:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a776:	b2b6      	uxth	r6, r6
 801a778:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a77c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a780:	ea47 070a 	orr.w	r7, r7, sl
 801a784:	f106 0a01 	add.w	sl, r6, #1
 801a788:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a78c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a790:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a794:	ea47 070a 	orr.w	r7, r7, sl
 801a798:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801a79c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a79e:	4401      	add	r1, r0
 801a7a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a7a2:	f10e 0e01 	add.w	lr, lr, #1
 801a7a6:	4402      	add	r2, r0
 801a7a8:	e7a5      	b.n	801a6f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 801a7aa:	4d08      	ldr	r5, [pc, #32]	; (801a7cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 801a7ac:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801a7b0:	0945      	lsrs	r5, r0, #5
 801a7b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a7b6:	4335      	orrs	r5, r6
 801a7b8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a7bc:	4305      	orrs	r5, r0
 801a7be:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801a7c2:	e7eb      	b.n	801a79c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a7c4:	b007      	add	sp, #28
 801a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ca:	bf00      	nop
 801a7cc:	fffff800 	.word	0xfffff800

0801a7d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7d4:	b087      	sub	sp, #28
 801a7d6:	468b      	mov	fp, r1
 801a7d8:	9204      	str	r2, [sp, #16]
 801a7da:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a7de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a7e0:	9201      	str	r2, [sp, #4]
 801a7e2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a7e6:	9205      	str	r2, [sp, #20]
 801a7e8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a7ec:	6869      	ldr	r1, [r5, #4]
 801a7ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a7f0:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a7f4:	fb01 2404 	mla	r4, r1, r4, r2
 801a7f8:	682a      	ldr	r2, [r5, #0]
 801a7fa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a7fe:	6802      	ldr	r2, [r0, #0]
 801a800:	9202      	str	r2, [sp, #8]
 801a802:	6842      	ldr	r2, [r0, #4]
 801a804:	9203      	str	r2, [sp, #12]
 801a806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a80a:	f1bb 0f00 	cmp.w	fp, #0
 801a80e:	dc03      	bgt.n	801a818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a810:	9a04      	ldr	r2, [sp, #16]
 801a812:	2a00      	cmp	r2, #0
 801a814:	f340 8136 	ble.w	801aa84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801a818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a81a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a81e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a820:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a824:	2b00      	cmp	r3, #0
 801a826:	dd0f      	ble.n	801a848 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a828:	1408      	asrs	r0, r1, #16
 801a82a:	d406      	bmi.n	801a83a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a82c:	4540      	cmp	r0, r8
 801a82e:	da04      	bge.n	801a83a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a830:	1410      	asrs	r0, r2, #16
 801a832:	d402      	bmi.n	801a83a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a834:	9d01      	ldr	r5, [sp, #4]
 801a836:	42a8      	cmp	r0, r5
 801a838:	db07      	blt.n	801a84a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a83a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a83c:	4401      	add	r1, r0
 801a83e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a840:	3b01      	subs	r3, #1
 801a842:	4402      	add	r2, r0
 801a844:	3402      	adds	r4, #2
 801a846:	e7ed      	b.n	801a824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 801a848:	d00f      	beq.n	801a86a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801a84a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a84c:	1e58      	subs	r0, r3, #1
 801a84e:	fb05 1500 	mla	r5, r5, r0, r1
 801a852:	142d      	asrs	r5, r5, #16
 801a854:	d544      	bpl.n	801a8e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801a856:	9300      	str	r3, [sp, #0]
 801a858:	46a2      	mov	sl, r4
 801a85a:	9800      	ldr	r0, [sp, #0]
 801a85c:	2800      	cmp	r0, #0
 801a85e:	f300 80ab 	bgt.w	801a9b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801a862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a866:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a86a:	f1bb 0f00 	cmp.w	fp, #0
 801a86e:	f340 8109 	ble.w	801aa84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801a872:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a876:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a87a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a880:	f1bb 0b01 	subs.w	fp, fp, #1
 801a884:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a888:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a88c:	eeb0 6a62 	vmov.f32	s12, s5
 801a890:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a894:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a898:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a89c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a8a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8a4:	eeb0 6a43 	vmov.f32	s12, s6
 801a8a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8ac:	ee12 2a90 	vmov	r2, s5
 801a8b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8b8:	ee13 2a10 	vmov	r2, s6
 801a8bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a8c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8c8:	9a04      	ldr	r2, [sp, #16]
 801a8ca:	9314      	str	r3, [sp, #80]	; 0x50
 801a8cc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a8d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8d2:	eeb0 3a67 	vmov.f32	s6, s15
 801a8d6:	bf08      	it	eq
 801a8d8:	4613      	moveq	r3, r2
 801a8da:	eef0 2a47 	vmov.f32	s5, s14
 801a8de:	e794      	b.n	801a80a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801a8e0:	4545      	cmp	r5, r8
 801a8e2:	dab8      	bge.n	801a856 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a8e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a8e6:	fb05 2000 	mla	r0, r5, r0, r2
 801a8ea:	1400      	asrs	r0, r0, #16
 801a8ec:	d4b3      	bmi.n	801a856 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a8ee:	9d01      	ldr	r5, [sp, #4]
 801a8f0:	42a8      	cmp	r0, r5
 801a8f2:	dab0      	bge.n	801a856 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a8f4:	f04f 0900 	mov.w	r9, #0
 801a8f8:	eba3 0009 	sub.w	r0, r3, r9
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	ddb0      	ble.n	801a862 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a900:	140d      	asrs	r5, r1, #16
 801a902:	1410      	asrs	r0, r2, #16
 801a904:	fb08 5000 	mla	r0, r8, r0, r5
 801a908:	9d03      	ldr	r5, [sp, #12]
 801a90a:	5c2e      	ldrb	r6, [r5, r0]
 801a90c:	2e00      	cmp	r6, #0
 801a90e:	d04c      	beq.n	801a9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 801a910:	9d02      	ldr	r5, [sp, #8]
 801a912:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801a916:	9805      	ldr	r0, [sp, #20]
 801a918:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 801a91c:	4346      	muls	r6, r0
 801a91e:	1c70      	adds	r0, r6, #1
 801a920:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801a924:	1200      	asrs	r0, r0, #8
 801a926:	b287      	uxth	r7, r0
 801a928:	122e      	asrs	r6, r5, #8
 801a92a:	43c0      	mvns	r0, r0
 801a92c:	b2c0      	uxtb	r0, r0
 801a92e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a932:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a936:	fb16 f600 	smulbb	r6, r6, r0
 801a93a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a93e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a942:	00ed      	lsls	r5, r5, #3
 801a944:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a948:	b2ed      	uxtb	r5, r5
 801a94a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a94e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a952:	fb15 f500 	smulbb	r5, r5, r0
 801a956:	fa5f fe8e 	uxtb.w	lr, lr
 801a95a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a95e:	fb0e 5507 	mla	r5, lr, r7, r5
 801a962:	fb1a fa00 	smulbb	sl, sl, r0
 801a966:	fa1f fc8c 	uxth.w	ip, ip
 801a96a:	b2ad      	uxth	r5, r5
 801a96c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a970:	fb06 a607 	mla	r6, r6, r7, sl
 801a974:	f10c 0001 	add.w	r0, ip, #1
 801a978:	f105 0a01 	add.w	sl, r5, #1
 801a97c:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801a980:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a984:	b2b6      	uxth	r6, r6
 801a986:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a98a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a98e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a992:	f106 0a01 	add.w	sl, r6, #1
 801a996:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a99a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a99e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a9a2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a9a6:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 801a9aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a9ac:	4401      	add	r1, r0
 801a9ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a9b0:	f109 0901 	add.w	r9, r9, #1
 801a9b4:	4402      	add	r2, r0
 801a9b6:	e79f      	b.n	801a8f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 801a9b8:	1408      	asrs	r0, r1, #16
 801a9ba:	d459      	bmi.n	801aa70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a9bc:	4540      	cmp	r0, r8
 801a9be:	da57      	bge.n	801aa70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a9c0:	1415      	asrs	r5, r2, #16
 801a9c2:	d455      	bmi.n	801aa70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a9c4:	9e01      	ldr	r6, [sp, #4]
 801a9c6:	42b5      	cmp	r5, r6
 801a9c8:	da52      	bge.n	801aa70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a9ca:	fb08 0005 	mla	r0, r8, r5, r0
 801a9ce:	9d03      	ldr	r5, [sp, #12]
 801a9d0:	5c2e      	ldrb	r6, [r5, r0]
 801a9d2:	2e00      	cmp	r6, #0
 801a9d4:	d04c      	beq.n	801aa70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801a9d6:	9d02      	ldr	r5, [sp, #8]
 801a9d8:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801a9dc:	9805      	ldr	r0, [sp, #20]
 801a9de:	f8ba 5000 	ldrh.w	r5, [sl]
 801a9e2:	4346      	muls	r6, r0
 801a9e4:	1c70      	adds	r0, r6, #1
 801a9e6:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801a9ea:	1200      	asrs	r0, r0, #8
 801a9ec:	b287      	uxth	r7, r0
 801a9ee:	122e      	asrs	r6, r5, #8
 801a9f0:	43c0      	mvns	r0, r0
 801a9f2:	b2c0      	uxtb	r0, r0
 801a9f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a9f8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a9fc:	fb16 f600 	smulbb	r6, r6, r0
 801aa00:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801aa04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aa08:	00ed      	lsls	r5, r5, #3
 801aa0a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801aa0e:	b2ed      	uxtb	r5, r5
 801aa10:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aa14:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aa18:	fb15 f500 	smulbb	r5, r5, r0
 801aa1c:	fa5f fe8e 	uxtb.w	lr, lr
 801aa20:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801aa24:	fb0e 5507 	mla	r5, lr, r7, r5
 801aa28:	fb19 f900 	smulbb	r9, r9, r0
 801aa2c:	fa1f fc8c 	uxth.w	ip, ip
 801aa30:	b2ad      	uxth	r5, r5
 801aa32:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aa36:	fb06 9607 	mla	r6, r6, r7, r9
 801aa3a:	f10c 0001 	add.w	r0, ip, #1
 801aa3e:	f105 0901 	add.w	r9, r5, #1
 801aa42:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801aa46:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801aa4a:	b2b6      	uxth	r6, r6
 801aa4c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801aa50:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aa54:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa58:	f106 0901 	add.w	r9, r6, #1
 801aa5c:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 801aa60:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801aa64:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801aa68:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa6c:	f8aa c000 	strh.w	ip, [sl]
 801aa70:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aa72:	4401      	add	r1, r0
 801aa74:	9814      	ldr	r0, [sp, #80]	; 0x50
 801aa76:	4402      	add	r2, r0
 801aa78:	9800      	ldr	r0, [sp, #0]
 801aa7a:	3801      	subs	r0, #1
 801aa7c:	f10a 0a02 	add.w	sl, sl, #2
 801aa80:	9000      	str	r0, [sp, #0]
 801aa82:	e6ea      	b.n	801a85a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801aa84:	b007      	add	sp, #28
 801aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801aa8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa8e:	b087      	sub	sp, #28
 801aa90:	468b      	mov	fp, r1
 801aa92:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801aa94:	9205      	str	r2, [sp, #20]
 801aa96:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801aa9a:	9202      	str	r2, [sp, #8]
 801aa9c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801aaa0:	6869      	ldr	r1, [r5, #4]
 801aaa2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801aaa4:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 801aaa8:	fb01 2000 	mla	r0, r1, r0, r2
 801aaac:	682a      	ldr	r2, [r5, #0]
 801aaae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801aab2:	6822      	ldr	r2, [r4, #0]
 801aab4:	9201      	str	r2, [sp, #4]
 801aab6:	6862      	ldr	r2, [r4, #4]
 801aab8:	9204      	str	r2, [sp, #16]
 801aaba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aabe:	f1bb 0f00 	cmp.w	fp, #0
 801aac2:	dc03      	bgt.n	801aacc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801aac4:	9a05      	ldr	r2, [sp, #20]
 801aac6:	2a00      	cmp	r2, #0
 801aac8:	f340 813d 	ble.w	801ad46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801aacc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aace:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aad2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aad4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aad8:	2b00      	cmp	r3, #0
 801aada:	dd0f      	ble.n	801aafc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801aadc:	140c      	asrs	r4, r1, #16
 801aade:	d406      	bmi.n	801aaee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aae0:	454c      	cmp	r4, r9
 801aae2:	da04      	bge.n	801aaee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aae4:	1414      	asrs	r4, r2, #16
 801aae6:	d402      	bmi.n	801aaee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aae8:	9d02      	ldr	r5, [sp, #8]
 801aaea:	42ac      	cmp	r4, r5
 801aaec:	db07      	blt.n	801aafe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801aaee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aaf0:	4421      	add	r1, r4
 801aaf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aaf4:	3b01      	subs	r3, #1
 801aaf6:	4422      	add	r2, r4
 801aaf8:	3002      	adds	r0, #2
 801aafa:	e7ed      	b.n	801aad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801aafc:	d018      	beq.n	801ab30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 801aafe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ab00:	1e5c      	subs	r4, r3, #1
 801ab02:	fb05 1504 	mla	r5, r5, r4, r1
 801ab06:	142d      	asrs	r5, r5, #16
 801ab08:	d40a      	bmi.n	801ab20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ab0a:	454d      	cmp	r5, r9
 801ab0c:	da08      	bge.n	801ab20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ab0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ab10:	fb05 2404 	mla	r4, r5, r4, r2
 801ab14:	1424      	asrs	r4, r4, #16
 801ab16:	d403      	bmi.n	801ab20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ab18:	9d02      	ldr	r5, [sp, #8]
 801ab1a:	42ac      	cmp	r4, r5
 801ab1c:	f2c0 80ae 	blt.w	801ac7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 801ab20:	2600      	movs	r6, #0
 801ab22:	199c      	adds	r4, r3, r6
 801ab24:	2c00      	cmp	r4, #0
 801ab26:	dc3e      	bgt.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 801ab28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ab30:	f1bb 0f00 	cmp.w	fp, #0
 801ab34:	f340 8107 	ble.w	801ad46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801ab38:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab3c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab46:	f1bb 0b01 	subs.w	fp, fp, #1
 801ab4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab52:	eeb0 6a62 	vmov.f32	s12, s5
 801ab56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab62:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab6a:	eeb0 6a43 	vmov.f32	s12, s6
 801ab6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab72:	ee12 2a90 	vmov	r2, s5
 801ab76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab7e:	ee13 2a10 	vmov	r2, s6
 801ab82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab86:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab8e:	9a05      	ldr	r2, [sp, #20]
 801ab90:	9314      	str	r3, [sp, #80]	; 0x50
 801ab92:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab98:	eeb0 3a67 	vmov.f32	s6, s15
 801ab9c:	bf08      	it	eq
 801ab9e:	4613      	moveq	r3, r2
 801aba0:	eef0 2a47 	vmov.f32	s5, s14
 801aba4:	e78b      	b.n	801aabe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801aba6:	140c      	asrs	r4, r1, #16
 801aba8:	d45a      	bmi.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801abaa:	454c      	cmp	r4, r9
 801abac:	da58      	bge.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801abae:	1415      	asrs	r5, r2, #16
 801abb0:	d456      	bmi.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801abb2:	9f02      	ldr	r7, [sp, #8]
 801abb4:	42bd      	cmp	r5, r7
 801abb6:	da53      	bge.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801abb8:	fb09 4505 	mla	r5, r9, r5, r4
 801abbc:	9c04      	ldr	r4, [sp, #16]
 801abbe:	5d64      	ldrb	r4, [r4, r5]
 801abc0:	2cff      	cmp	r4, #255	; 0xff
 801abc2:	d053      	beq.n	801ac6c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801abc4:	2c00      	cmp	r4, #0
 801abc6:	d04b      	beq.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801abc8:	9f01      	ldr	r7, [sp, #4]
 801abca:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 801abce:	f06f 0501 	mvn.w	r5, #1
 801abd2:	4375      	muls	r5, r6
 801abd4:	9503      	str	r5, [sp, #12]
 801abd6:	5b45      	ldrh	r5, [r0, r5]
 801abd8:	fa1f fc84 	uxth.w	ip, r4
 801abdc:	122f      	asrs	r7, r5, #8
 801abde:	43e4      	mvns	r4, r4
 801abe0:	b2e4      	uxtb	r4, r4
 801abe2:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801abe6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801abea:	fb17 f704 	smulbb	r7, r7, r4
 801abee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801abf2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801abf6:	00ed      	lsls	r5, r5, #3
 801abf8:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801abfc:	b2ed      	uxtb	r5, r5
 801abfe:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ac02:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ac06:	fb15 f504 	smulbb	r5, r5, r4
 801ac0a:	fa5f f888 	uxtb.w	r8, r8
 801ac0e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ac12:	fb08 550c 	mla	r5, r8, ip, r5
 801ac16:	fb1a fa04 	smulbb	sl, sl, r4
 801ac1a:	fa1f fe8e 	uxth.w	lr, lr
 801ac1e:	b2ad      	uxth	r5, r5
 801ac20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ac24:	fb07 a70c 	mla	r7, r7, ip, sl
 801ac28:	f10e 0401 	add.w	r4, lr, #1
 801ac2c:	f105 0a01 	add.w	sl, r5, #1
 801ac30:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ac34:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac38:	b2bf      	uxth	r7, r7
 801ac3a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac3e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ac42:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ac46:	f107 0a01 	add.w	sl, r7, #1
 801ac4a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ac4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac52:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac56:	9c03      	ldr	r4, [sp, #12]
 801ac58:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ac5c:	f820 e004 	strh.w	lr, [r0, r4]
 801ac60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac62:	4421      	add	r1, r4
 801ac64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac66:	3e01      	subs	r6, #1
 801ac68:	4422      	add	r2, r4
 801ac6a:	e75a      	b.n	801ab22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ac6c:	9c01      	ldr	r4, [sp, #4]
 801ac6e:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ac72:	f06f 0401 	mvn.w	r4, #1
 801ac76:	4374      	muls	r4, r6
 801ac78:	5305      	strh	r5, [r0, r4]
 801ac7a:	e7f1      	b.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801ac7c:	f04f 0800 	mov.w	r8, #0
 801ac80:	eba3 0408 	sub.w	r4, r3, r8
 801ac84:	2c00      	cmp	r4, #0
 801ac86:	f77f af4f 	ble.w	801ab28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801ac8a:	140c      	asrs	r4, r1, #16
 801ac8c:	1415      	asrs	r5, r2, #16
 801ac8e:	fb09 4505 	mla	r5, r9, r5, r4
 801ac92:	9c04      	ldr	r4, [sp, #16]
 801ac94:	5d64      	ldrb	r4, [r4, r5]
 801ac96:	2cff      	cmp	r4, #255	; 0xff
 801ac98:	d04f      	beq.n	801ad3a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801ac9a:	2c00      	cmp	r4, #0
 801ac9c:	d046      	beq.n	801ad2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ac9e:	9e01      	ldr	r6, [sp, #4]
 801aca0:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801aca4:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 801aca8:	b2a7      	uxth	r7, r4
 801acaa:	122e      	asrs	r6, r5, #8
 801acac:	43e4      	mvns	r4, r4
 801acae:	b2e4      	uxtb	r4, r4
 801acb0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801acb4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801acb8:	fb16 f604 	smulbb	r6, r6, r4
 801acbc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801acc0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801acc4:	00ed      	lsls	r5, r5, #3
 801acc6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801acca:	b2ed      	uxtb	r5, r5
 801accc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801acd0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801acd4:	fb15 f504 	smulbb	r5, r5, r4
 801acd8:	fa5f fe8e 	uxtb.w	lr, lr
 801acdc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ace0:	fb0e 5507 	mla	r5, lr, r7, r5
 801ace4:	fb1a fa04 	smulbb	sl, sl, r4
 801ace8:	fa1f fc8c 	uxth.w	ip, ip
 801acec:	b2ad      	uxth	r5, r5
 801acee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801acf2:	fb06 a607 	mla	r6, r6, r7, sl
 801acf6:	f10c 0401 	add.w	r4, ip, #1
 801acfa:	f105 0a01 	add.w	sl, r5, #1
 801acfe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ad02:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ad06:	b2b6      	uxth	r6, r6
 801ad08:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ad0c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ad10:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ad14:	f106 0a01 	add.w	sl, r6, #1
 801ad18:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ad1c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ad20:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ad24:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ad28:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 801ad2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad2e:	4421      	add	r1, r4
 801ad30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ad32:	f108 0801 	add.w	r8, r8, #1
 801ad36:	4422      	add	r2, r4
 801ad38:	e7a2      	b.n	801ac80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801ad3a:	9c01      	ldr	r4, [sp, #4]
 801ad3c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ad40:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 801ad44:	e7f2      	b.n	801ad2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ad46:	b007      	add	sp, #28
 801ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad50:	b085      	sub	sp, #20
 801ad52:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad54:	9203      	str	r2, [sp, #12]
 801ad56:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ad5a:	9201      	str	r2, [sp, #4]
 801ad5c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ad60:	9100      	str	r1, [sp, #0]
 801ad62:	6841      	ldr	r1, [r0, #4]
 801ad64:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801ad68:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ad6c:	fb01 2404 	mla	r4, r1, r4, r2
 801ad70:	6802      	ldr	r2, [r0, #0]
 801ad72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ad76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad78:	fa1f fe85 	uxth.w	lr, r5
 801ad7c:	6812      	ldr	r2, [r2, #0]
 801ad7e:	9202      	str	r2, [sp, #8]
 801ad80:	43ed      	mvns	r5, r5
 801ad82:	b2ed      	uxtb	r5, r5
 801ad84:	9a00      	ldr	r2, [sp, #0]
 801ad86:	2a00      	cmp	r2, #0
 801ad88:	dc03      	bgt.n	801ad92 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801ad8a:	9a03      	ldr	r2, [sp, #12]
 801ad8c:	2a00      	cmp	r2, #0
 801ad8e:	f340 8117 	ble.w	801afc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ad92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad94:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad9a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	dd0f      	ble.n	801adc2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801ada2:	1408      	asrs	r0, r1, #16
 801ada4:	d406      	bmi.n	801adb4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ada6:	4540      	cmp	r0, r8
 801ada8:	da04      	bge.n	801adb4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801adaa:	1410      	asrs	r0, r2, #16
 801adac:	d402      	bmi.n	801adb4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801adae:	9e01      	ldr	r6, [sp, #4]
 801adb0:	42b0      	cmp	r0, r6
 801adb2:	db07      	blt.n	801adc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801adb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801adb6:	4401      	add	r1, r0
 801adb8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801adba:	3b01      	subs	r3, #1
 801adbc:	4402      	add	r2, r0
 801adbe:	3402      	adds	r4, #2
 801adc0:	e7ed      	b.n	801ad9e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801adc2:	d069      	beq.n	801ae98 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801adc4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801adc6:	1e58      	subs	r0, r3, #1
 801adc8:	fb06 1600 	mla	r6, r6, r0, r1
 801adcc:	1436      	asrs	r6, r6, #16
 801adce:	d459      	bmi.n	801ae84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801add0:	4546      	cmp	r6, r8
 801add2:	da57      	bge.n	801ae84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801add4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801add6:	fb06 2000 	mla	r0, r6, r0, r2
 801adda:	1400      	asrs	r0, r0, #16
 801addc:	d452      	bmi.n	801ae84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801adde:	9e01      	ldr	r6, [sp, #4]
 801ade0:	42b0      	cmp	r0, r6
 801ade2:	da4f      	bge.n	801ae84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801ade4:	469a      	mov	sl, r3
 801ade6:	46a3      	mov	fp, r4
 801ade8:	f1ba 0f00 	cmp.w	sl, #0
 801adec:	dd50      	ble.n	801ae90 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801adee:	140e      	asrs	r6, r1, #16
 801adf0:	1410      	asrs	r0, r2, #16
 801adf2:	fb08 6000 	mla	r0, r8, r0, r6
 801adf6:	9e02      	ldr	r6, [sp, #8]
 801adf8:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 801adfc:	f8bb 6000 	ldrh.w	r6, [fp]
 801ae00:	1237      	asrs	r7, r6, #8
 801ae02:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ae06:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ae0a:	fb17 f705 	smulbb	r7, r7, r5
 801ae0e:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801ae12:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ae16:	00f6      	lsls	r6, r6, #3
 801ae18:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801ae1c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ae20:	10c7      	asrs	r7, r0, #3
 801ae22:	b2f6      	uxtb	r6, r6
 801ae24:	00c0      	lsls	r0, r0, #3
 801ae26:	fb19 f905 	smulbb	r9, r9, r5
 801ae2a:	fb16 f605 	smulbb	r6, r6, r5
 801ae2e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ae32:	b2c0      	uxtb	r0, r0
 801ae34:	fa1f fc8c 	uxth.w	ip, ip
 801ae38:	fb07 970e 	mla	r7, r7, lr, r9
 801ae3c:	fb00 600e 	mla	r0, r0, lr, r6
 801ae40:	b280      	uxth	r0, r0
 801ae42:	b2bf      	uxth	r7, r7
 801ae44:	f10c 0601 	add.w	r6, ip, #1
 801ae48:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801ae4c:	f107 0901 	add.w	r9, r7, #1
 801ae50:	1c46      	adds	r6, r0, #1
 801ae52:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801ae56:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ae5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ae60:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ae64:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ae68:	ea4c 0c06 	orr.w	ip, ip, r6
 801ae6c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae70:	4401      	add	r1, r0
 801ae72:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae74:	ea4c 0c09 	orr.w	ip, ip, r9
 801ae78:	f82b cb02 	strh.w	ip, [fp], #2
 801ae7c:	4402      	add	r2, r0
 801ae7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae82:	e7b1      	b.n	801ade8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ae84:	f04f 0900 	mov.w	r9, #0
 801ae88:	eb03 0009 	add.w	r0, r3, r9
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	dc41      	bgt.n	801af14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801ae90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae98:	9b00      	ldr	r3, [sp, #0]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	f340 8090 	ble.w	801afc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801aea0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801aea8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aeae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aeb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aeb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aeba:	eef0 6a62 	vmov.f32	s13, s5
 801aebe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aec2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aec6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aeca:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801aece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aed2:	eef0 6a43 	vmov.f32	s13, s6
 801aed6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aeda:	ee12 2a90 	vmov	r2, s5
 801aede:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aee2:	fb92 f3f3 	sdiv	r3, r2, r3
 801aee6:	ee13 2a10 	vmov	r2, s6
 801aeea:	9311      	str	r3, [sp, #68]	; 0x44
 801aeec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aeee:	fb92 f3f3 	sdiv	r3, r2, r3
 801aef2:	9312      	str	r3, [sp, #72]	; 0x48
 801aef4:	9b00      	ldr	r3, [sp, #0]
 801aef6:	9a03      	ldr	r2, [sp, #12]
 801aef8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aefc:	3b01      	subs	r3, #1
 801aefe:	9300      	str	r3, [sp, #0]
 801af00:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801af04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af06:	eeb0 3a67 	vmov.f32	s6, s15
 801af0a:	bf08      	it	eq
 801af0c:	4613      	moveq	r3, r2
 801af0e:	eef0 2a47 	vmov.f32	s5, s14
 801af12:	e737      	b.n	801ad84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801af14:	140e      	asrs	r6, r1, #16
 801af16:	d44c      	bmi.n	801afb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801af18:	4546      	cmp	r6, r8
 801af1a:	da4a      	bge.n	801afb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801af1c:	1410      	asrs	r0, r2, #16
 801af1e:	d448      	bmi.n	801afb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801af20:	9f01      	ldr	r7, [sp, #4]
 801af22:	42b8      	cmp	r0, r7
 801af24:	da45      	bge.n	801afb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801af26:	fb08 6000 	mla	r0, r8, r0, r6
 801af2a:	9e02      	ldr	r6, [sp, #8]
 801af2c:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 801af30:	f06f 0601 	mvn.w	r6, #1
 801af34:	fb06 fb09 	mul.w	fp, r6, r9
 801af38:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801af3c:	f834 600b 	ldrh.w	r6, [r4, fp]
 801af40:	1237      	asrs	r7, r6, #8
 801af42:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801af46:	fb17 f705 	smulbb	r7, r7, r5
 801af4a:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 801af4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af52:	00f6      	lsls	r6, r6, #3
 801af54:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801af58:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af5c:	10c7      	asrs	r7, r0, #3
 801af5e:	b2f6      	uxtb	r6, r6
 801af60:	00c0      	lsls	r0, r0, #3
 801af62:	fb1a fa05 	smulbb	sl, sl, r5
 801af66:	fb16 f605 	smulbb	r6, r6, r5
 801af6a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801af6e:	b2c0      	uxtb	r0, r0
 801af70:	fa1f fc8c 	uxth.w	ip, ip
 801af74:	fb07 a70e 	mla	r7, r7, lr, sl
 801af78:	fb00 600e 	mla	r0, r0, lr, r6
 801af7c:	b2bf      	uxth	r7, r7
 801af7e:	b280      	uxth	r0, r0
 801af80:	f10c 0601 	add.w	r6, ip, #1
 801af84:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801af88:	f107 0a01 	add.w	sl, r7, #1
 801af8c:	1c46      	adds	r6, r0, #1
 801af8e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801af92:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801af96:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af9a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801af9e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afa2:	ea4c 0c06 	orr.w	ip, ip, r6
 801afa6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afaa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801afae:	f824 c00b 	strh.w	ip, [r4, fp]
 801afb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801afb4:	4401      	add	r1, r0
 801afb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801afb8:	f109 39ff 	add.w	r9, r9, #4294967295
 801afbc:	4402      	add	r2, r0
 801afbe:	e763      	b.n	801ae88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 801afc0:	b005      	add	sp, #20
 801afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801afc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afca:	9811      	ldr	r0, [sp, #68]	; 0x44
 801afcc:	9201      	str	r2, [sp, #4]
 801afce:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801afd2:	6844      	ldr	r4, [r0, #4]
 801afd4:	6800      	ldr	r0, [r0, #0]
 801afd6:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801afda:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801afde:	fb04 2505 	mla	r5, r4, r5, r2
 801afe2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801afe6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801afe8:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801afec:	6802      	ldr	r2, [r0, #0]
 801afee:	9200      	str	r2, [sp, #0]
 801aff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aff4:	2900      	cmp	r1, #0
 801aff6:	dc03      	bgt.n	801b000 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801aff8:	9a01      	ldr	r2, [sp, #4]
 801affa:	2a00      	cmp	r2, #0
 801affc:	f340 8095 	ble.w	801b12a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801b000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b002:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b008:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	dd0e      	ble.n	801b02e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801b010:	ea5f 4824 	movs.w	r8, r4, asr #16
 801b014:	d406      	bmi.n	801b024 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b016:	45e0      	cmp	r8, ip
 801b018:	da04      	bge.n	801b024 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b01a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b01e:	d401      	bmi.n	801b024 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b020:	45f0      	cmp	r8, lr
 801b022:	db05      	blt.n	801b030 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b024:	443c      	add	r4, r7
 801b026:	4430      	add	r0, r6
 801b028:	3b01      	subs	r3, #1
 801b02a:	3502      	adds	r5, #2
 801b02c:	e7ee      	b.n	801b00c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b02e:	d010      	beq.n	801b052 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b030:	f103 38ff 	add.w	r8, r3, #4294967295
 801b034:	fb07 4908 	mla	r9, r7, r8, r4
 801b038:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b03c:	d53d      	bpl.n	801b0ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b03e:	4698      	mov	r8, r3
 801b040:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 801b044:	f1b8 0f00 	cmp.w	r8, #0
 801b048:	dc55      	bgt.n	801b0f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801b04a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b04e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b052:	2900      	cmp	r1, #0
 801b054:	dd69      	ble.n	801b12a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801b056:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b05a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b05e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b064:	3901      	subs	r1, #1
 801b066:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b06a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b06e:	eeb0 6a62 	vmov.f32	s12, s5
 801b072:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b076:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b07a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b07e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b086:	eeb0 6a43 	vmov.f32	s12, s6
 801b08a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b08e:	ee12 2a90 	vmov	r2, s5
 801b092:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b096:	fb92 f7f3 	sdiv	r7, r2, r3
 801b09a:	ee13 2a10 	vmov	r2, s6
 801b09e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0a2:	fb92 f6f3 	sdiv	r6, r2, r3
 801b0a6:	9a01      	ldr	r2, [sp, #4]
 801b0a8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b0ac:	bf08      	it	eq
 801b0ae:	4613      	moveq	r3, r2
 801b0b0:	eeb0 3a67 	vmov.f32	s6, s15
 801b0b4:	eef0 2a47 	vmov.f32	s5, s14
 801b0b8:	e79c      	b.n	801aff4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 801b0ba:	45e1      	cmp	r9, ip
 801b0bc:	dabf      	bge.n	801b03e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b0be:	fb06 0808 	mla	r8, r6, r8, r0
 801b0c2:	ea5f 4828 	movs.w	r8, r8, asr #16
 801b0c6:	d4ba      	bmi.n	801b03e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b0c8:	45f0      	cmp	r8, lr
 801b0ca:	dab8      	bge.n	801b03e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b0cc:	4698      	mov	r8, r3
 801b0ce:	46aa      	mov	sl, r5
 801b0d0:	f1b8 0f00 	cmp.w	r8, #0
 801b0d4:	ddb9      	ble.n	801b04a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801b0d6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b0da:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801b0de:	fb0c b909 	mla	r9, ip, r9, fp
 801b0e2:	9a00      	ldr	r2, [sp, #0]
 801b0e4:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 801b0e8:	f82a 9b02 	strh.w	r9, [sl], #2
 801b0ec:	443c      	add	r4, r7
 801b0ee:	4430      	add	r0, r6
 801b0f0:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0f4:	e7ec      	b.n	801b0d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801b0f6:	ea5f 4a24 	movs.w	sl, r4, asr #16
 801b0fa:	d411      	bmi.n	801b120 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b0fc:	45e2      	cmp	sl, ip
 801b0fe:	da0f      	bge.n	801b120 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b100:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b104:	d40c      	bmi.n	801b120 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b106:	45f1      	cmp	r9, lr
 801b108:	da0a      	bge.n	801b120 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b10a:	fb0c a909 	mla	r9, ip, r9, sl
 801b10e:	9a00      	ldr	r2, [sp, #0]
 801b110:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801b114:	f06f 0201 	mvn.w	r2, #1
 801b118:	fb02 f908 	mul.w	r9, r2, r8
 801b11c:	f82b a009 	strh.w	sl, [fp, r9]
 801b120:	443c      	add	r4, r7
 801b122:	4430      	add	r0, r6
 801b124:	f108 38ff 	add.w	r8, r8, #4294967295
 801b128:	e78c      	b.n	801b044 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b12a:	b003      	add	sp, #12
 801b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b130 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b134:	b087      	sub	sp, #28
 801b136:	468b      	mov	fp, r1
 801b138:	9204      	str	r2, [sp, #16]
 801b13a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b13e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b140:	9201      	str	r2, [sp, #4]
 801b142:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b146:	9205      	str	r2, [sp, #20]
 801b148:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b14c:	6841      	ldr	r1, [r0, #4]
 801b14e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801b152:	fb01 2404 	mla	r4, r1, r4, r2
 801b156:	6802      	ldr	r2, [r0, #0]
 801b158:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b15c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b15e:	6812      	ldr	r2, [r2, #0]
 801b160:	9203      	str	r2, [sp, #12]
 801b162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b166:	f1bb 0f00 	cmp.w	fp, #0
 801b16a:	dc03      	bgt.n	801b174 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801b16c:	9a04      	ldr	r2, [sp, #16]
 801b16e:	2a00      	cmp	r2, #0
 801b170:	f340 812c 	ble.w	801b3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801b174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b176:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b17a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b17c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b180:	2b00      	cmp	r3, #0
 801b182:	dd0f      	ble.n	801b1a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b184:	1402      	asrs	r2, r0, #16
 801b186:	d406      	bmi.n	801b196 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b188:	4542      	cmp	r2, r8
 801b18a:	da04      	bge.n	801b196 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b18c:	140a      	asrs	r2, r1, #16
 801b18e:	d402      	bmi.n	801b196 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b190:	9d01      	ldr	r5, [sp, #4]
 801b192:	42aa      	cmp	r2, r5
 801b194:	db07      	blt.n	801b1a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801b196:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b198:	4410      	add	r0, r2
 801b19a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b19c:	3b01      	subs	r3, #1
 801b19e:	4411      	add	r1, r2
 801b1a0:	3402      	adds	r4, #2
 801b1a2:	e7ed      	b.n	801b180 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801b1a4:	d01a      	beq.n	801b1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801b1a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b1a8:	1e5a      	subs	r2, r3, #1
 801b1aa:	fb05 0502 	mla	r5, r5, r2, r0
 801b1ae:	142d      	asrs	r5, r5, #16
 801b1b0:	d40a      	bmi.n	801b1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b1b2:	4545      	cmp	r5, r8
 801b1b4:	da08      	bge.n	801b1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b1b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b1b8:	fb05 1202 	mla	r2, r5, r2, r1
 801b1bc:	1412      	asrs	r2, r2, #16
 801b1be:	d403      	bmi.n	801b1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b1c0:	9d01      	ldr	r5, [sp, #4]
 801b1c2:	42aa      	cmp	r2, r5
 801b1c4:	f2c0 80a6 	blt.w	801b314 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801b1c8:	f04f 0c00 	mov.w	ip, #0
 801b1cc:	eb03 020c 	add.w	r2, r3, ip
 801b1d0:	2a00      	cmp	r2, #0
 801b1d2:	dc3e      	bgt.n	801b252 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b1d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b1d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b1dc:	f1bb 0f00 	cmp.w	fp, #0
 801b1e0:	f340 80f4 	ble.w	801b3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801b1e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b1f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1f2:	f1bb 0b01 	subs.w	fp, fp, #1
 801b1f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1fe:	eeb0 6a62 	vmov.f32	s12, s5
 801b202:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b206:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b20a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b20e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b212:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b216:	eeb0 6a43 	vmov.f32	s12, s6
 801b21a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b21e:	ee12 2a90 	vmov	r2, s5
 801b222:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b226:	fb92 f3f3 	sdiv	r3, r2, r3
 801b22a:	ee13 2a10 	vmov	r2, s6
 801b22e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b232:	9313      	str	r3, [sp, #76]	; 0x4c
 801b234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b236:	fb92 f3f3 	sdiv	r3, r2, r3
 801b23a:	9a04      	ldr	r2, [sp, #16]
 801b23c:	9314      	str	r3, [sp, #80]	; 0x50
 801b23e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b242:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b244:	eeb0 3a67 	vmov.f32	s6, s15
 801b248:	bf08      	it	eq
 801b24a:	4613      	moveq	r3, r2
 801b24c:	eef0 2a47 	vmov.f32	s5, s14
 801b250:	e789      	b.n	801b166 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b252:	1405      	asrs	r5, r0, #16
 801b254:	d457      	bmi.n	801b306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b256:	4545      	cmp	r5, r8
 801b258:	da55      	bge.n	801b306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b25a:	140a      	asrs	r2, r1, #16
 801b25c:	d453      	bmi.n	801b306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b25e:	9e01      	ldr	r6, [sp, #4]
 801b260:	42b2      	cmp	r2, r6
 801b262:	da50      	bge.n	801b306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b264:	fb08 5202 	mla	r2, r8, r2, r5
 801b268:	9d03      	ldr	r5, [sp, #12]
 801b26a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b26e:	0e2e      	lsrs	r6, r5, #24
 801b270:	d049      	beq.n	801b306 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b272:	f06f 0201 	mvn.w	r2, #1
 801b276:	fb02 f20c 	mul.w	r2, r2, ip
 801b27a:	9202      	str	r2, [sp, #8]
 801b27c:	f834 e002 	ldrh.w	lr, [r4, r2]
 801b280:	9a05      	ldr	r2, [sp, #20]
 801b282:	4356      	muls	r6, r2
 801b284:	1c72      	adds	r2, r6, #1
 801b286:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b28a:	1212      	asrs	r2, r2, #8
 801b28c:	fa1f f982 	uxth.w	r9, r2
 801b290:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b294:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b298:	43d2      	mvns	r2, r2
 801b29a:	b2d2      	uxtb	r2, r2
 801b29c:	fb16 f609 	smulbb	r6, r6, r9
 801b2a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b2a4:	fb07 6702 	mla	r7, r7, r2, r6
 801b2a8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b2ac:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b2b0:	b2ed      	uxtb	r5, r5
 801b2b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b2b6:	fa5f fe8e 	uxtb.w	lr, lr
 801b2ba:	fb15 f509 	smulbb	r5, r5, r9
 801b2be:	fb0e 5502 	mla	r5, lr, r2, r5
 801b2c2:	b2bf      	uxth	r7, r7
 801b2c4:	fb1a fa09 	smulbb	sl, sl, r9
 801b2c8:	b2ad      	uxth	r5, r5
 801b2ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b2ce:	fb06 a602 	mla	r6, r6, r2, sl
 801b2d2:	1c7a      	adds	r2, r7, #1
 801b2d4:	f105 0a01 	add.w	sl, r5, #1
 801b2d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b2dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b2e0:	b2b6      	uxth	r6, r6
 801b2e2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b2e6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b2ea:	ea47 070a 	orr.w	r7, r7, sl
 801b2ee:	f106 0a01 	add.w	sl, r6, #1
 801b2f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b2f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b2fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b2fe:	9a02      	ldr	r2, [sp, #8]
 801b300:	ea47 070a 	orr.w	r7, r7, sl
 801b304:	52a7      	strh	r7, [r4, r2]
 801b306:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b308:	4410      	add	r0, r2
 801b30a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b30c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b310:	4411      	add	r1, r2
 801b312:	e75b      	b.n	801b1cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b314:	f04f 0e00 	mov.w	lr, #0
 801b318:	eba3 020e 	sub.w	r2, r3, lr
 801b31c:	2a00      	cmp	r2, #0
 801b31e:	f77f af59 	ble.w	801b1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801b322:	1405      	asrs	r5, r0, #16
 801b324:	140a      	asrs	r2, r1, #16
 801b326:	fb08 5202 	mla	r2, r8, r2, r5
 801b32a:	9d03      	ldr	r5, [sp, #12]
 801b32c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b330:	0e2e      	lsrs	r6, r5, #24
 801b332:	d044      	beq.n	801b3be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b334:	9a05      	ldr	r2, [sp, #20]
 801b336:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b33a:	4356      	muls	r6, r2
 801b33c:	1c72      	adds	r2, r6, #1
 801b33e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b342:	1212      	asrs	r2, r2, #8
 801b344:	fa1f f982 	uxth.w	r9, r2
 801b348:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b34c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b350:	43d2      	mvns	r2, r2
 801b352:	b2d2      	uxtb	r2, r2
 801b354:	fb16 f609 	smulbb	r6, r6, r9
 801b358:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b35c:	fb07 6702 	mla	r7, r7, r2, r6
 801b360:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b364:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b368:	b2ed      	uxtb	r5, r5
 801b36a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b36e:	fa5f fc8c 	uxtb.w	ip, ip
 801b372:	fb15 f509 	smulbb	r5, r5, r9
 801b376:	fb0c 5502 	mla	r5, ip, r2, r5
 801b37a:	b2bf      	uxth	r7, r7
 801b37c:	fb1a fa09 	smulbb	sl, sl, r9
 801b380:	b2ad      	uxth	r5, r5
 801b382:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b386:	fb06 a602 	mla	r6, r6, r2, sl
 801b38a:	1c7a      	adds	r2, r7, #1
 801b38c:	f105 0a01 	add.w	sl, r5, #1
 801b390:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b394:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b398:	b2b6      	uxth	r6, r6
 801b39a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b39e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b3a2:	ea47 070a 	orr.w	r7, r7, sl
 801b3a6:	f106 0a01 	add.w	sl, r6, #1
 801b3aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b3ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b3b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b3b6:	ea47 070a 	orr.w	r7, r7, sl
 801b3ba:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b3be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3c0:	4410      	add	r0, r2
 801b3c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3c4:	f10e 0e01 	add.w	lr, lr, #1
 801b3c8:	4411      	add	r1, r2
 801b3ca:	e7a5      	b.n	801b318 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801b3cc:	b007      	add	sp, #28
 801b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b3d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d8:	b087      	sub	sp, #28
 801b3da:	468b      	mov	fp, r1
 801b3dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b3de:	9205      	str	r2, [sp, #20]
 801b3e0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b3e4:	9201      	str	r2, [sp, #4]
 801b3e6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b3ea:	6861      	ldr	r1, [r4, #4]
 801b3ec:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 801b3f0:	fb01 2000 	mla	r0, r1, r0, r2
 801b3f4:	6822      	ldr	r2, [r4, #0]
 801b3f6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b3fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b3fc:	6812      	ldr	r2, [r2, #0]
 801b3fe:	9203      	str	r2, [sp, #12]
 801b400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b404:	f1bb 0f00 	cmp.w	fp, #0
 801b408:	dc03      	bgt.n	801b412 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b40a:	9a05      	ldr	r2, [sp, #20]
 801b40c:	2a00      	cmp	r2, #0
 801b40e:	f340 814b 	ble.w	801b6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801b412:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b414:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b418:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b41a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b41e:	2b00      	cmp	r3, #0
 801b420:	dd0f      	ble.n	801b442 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b422:	140c      	asrs	r4, r1, #16
 801b424:	d406      	bmi.n	801b434 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b426:	454c      	cmp	r4, r9
 801b428:	da04      	bge.n	801b434 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b42a:	1414      	asrs	r4, r2, #16
 801b42c:	d402      	bmi.n	801b434 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b42e:	9d01      	ldr	r5, [sp, #4]
 801b430:	42ac      	cmp	r4, r5
 801b432:	db07      	blt.n	801b444 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b434:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b436:	4421      	add	r1, r4
 801b438:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b43a:	3b01      	subs	r3, #1
 801b43c:	4422      	add	r2, r4
 801b43e:	3002      	adds	r0, #2
 801b440:	e7ed      	b.n	801b41e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b442:	d018      	beq.n	801b476 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b444:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b446:	1e5c      	subs	r4, r3, #1
 801b448:	fb05 1504 	mla	r5, r5, r4, r1
 801b44c:	142d      	asrs	r5, r5, #16
 801b44e:	d40a      	bmi.n	801b466 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b450:	454d      	cmp	r5, r9
 801b452:	da08      	bge.n	801b466 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b454:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b456:	fb05 2404 	mla	r4, r5, r4, r2
 801b45a:	1424      	asrs	r4, r4, #16
 801b45c:	d403      	bmi.n	801b466 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b45e:	9d01      	ldr	r5, [sp, #4]
 801b460:	42ac      	cmp	r4, r5
 801b462:	f2c0 80bb 	blt.w	801b5dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 801b466:	2700      	movs	r7, #0
 801b468:	19dc      	adds	r4, r3, r7
 801b46a:	2c00      	cmp	r4, #0
 801b46c:	dc3e      	bgt.n	801b4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801b46e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b472:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b476:	f1bb 0f00 	cmp.w	fp, #0
 801b47a:	f340 8115 	ble.w	801b6a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801b47e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b482:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b486:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b48a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b48c:	f1bb 0b01 	subs.w	fp, fp, #1
 801b490:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b494:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b498:	eeb0 6a62 	vmov.f32	s12, s5
 801b49c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b4a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4a8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b4ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4b0:	eeb0 6a43 	vmov.f32	s12, s6
 801b4b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4b8:	ee12 2a90 	vmov	r2, s5
 801b4bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4c4:	ee13 2a10 	vmov	r2, s6
 801b4c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b4cc:	9313      	str	r3, [sp, #76]	; 0x4c
 801b4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4d4:	9a05      	ldr	r2, [sp, #20]
 801b4d6:	9314      	str	r3, [sp, #80]	; 0x50
 801b4d8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4de:	eeb0 3a67 	vmov.f32	s6, s15
 801b4e2:	bf08      	it	eq
 801b4e4:	4613      	moveq	r3, r2
 801b4e6:	eef0 2a47 	vmov.f32	s5, s14
 801b4ea:	e78b      	b.n	801b404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801b4ec:	140d      	asrs	r5, r1, #16
 801b4ee:	d45c      	bmi.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4f0:	454d      	cmp	r5, r9
 801b4f2:	da5a      	bge.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4f4:	1414      	asrs	r4, r2, #16
 801b4f6:	d458      	bmi.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4f8:	9e01      	ldr	r6, [sp, #4]
 801b4fa:	42b4      	cmp	r4, r6
 801b4fc:	da55      	bge.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b4fe:	fb09 5404 	mla	r4, r9, r4, r5
 801b502:	9d03      	ldr	r5, [sp, #12]
 801b504:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801b508:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801b50c:	d04d      	beq.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b50e:	0a26      	lsrs	r6, r4, #8
 801b510:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b514:	fa5f f58e 	uxtb.w	r5, lr
 801b518:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801b51c:	9604      	str	r6, [sp, #16]
 801b51e:	d04a      	beq.n	801b5b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801b520:	f06f 0601 	mvn.w	r6, #1
 801b524:	437e      	muls	r6, r7
 801b526:	fa1f fa85 	uxth.w	sl, r5
 801b52a:	f830 8006 	ldrh.w	r8, [r0, r6]
 801b52e:	9602      	str	r6, [sp, #8]
 801b530:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b534:	43ed      	mvns	r5, r5
 801b536:	fa5f fc8c 	uxtb.w	ip, ip
 801b53a:	b2ed      	uxtb	r5, r5
 801b53c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b540:	fb1c fc0a 	smulbb	ip, ip, sl
 801b544:	fb0e cc05 	mla	ip, lr, r5, ip
 801b548:	b2e4      	uxtb	r4, r4
 801b54a:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801b54e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b552:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801b556:	fa5f f888 	uxtb.w	r8, r8
 801b55a:	fb14 f40a 	smulbb	r4, r4, sl
 801b55e:	fb08 4405 	mla	r4, r8, r5, r4
 801b562:	b2a4      	uxth	r4, r4
 801b564:	fa1f fc8c 	uxth.w	ip, ip
 801b568:	fb16 f60a 	smulbb	r6, r6, sl
 801b56c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b570:	fb0e 6e05 	mla	lr, lr, r5, r6
 801b574:	1c66      	adds	r6, r4, #1
 801b576:	f10c 0501 	add.w	r5, ip, #1
 801b57a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b57e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b582:	fa1f fe8e 	uxth.w	lr, lr
 801b586:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b58a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b58e:	ea4c 0c06 	orr.w	ip, ip, r6
 801b592:	f10e 0601 	add.w	r6, lr, #1
 801b596:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801b59a:	0976      	lsrs	r6, r6, #5
 801b59c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b5a0:	9c02      	ldr	r4, [sp, #8]
 801b5a2:	ea4c 0c06 	orr.w	ip, ip, r6
 801b5a6:	f820 c004 	strh.w	ip, [r0, r4]
 801b5aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b5ac:	4421      	add	r1, r4
 801b5ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b5b0:	3f01      	subs	r7, #1
 801b5b2:	4422      	add	r2, r4
 801b5b4:	e758      	b.n	801b468 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801b5b6:	4e3e      	ldr	r6, [pc, #248]	; (801b6b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b5b8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b5bc:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801b5c0:	ea4c 0c04 	orr.w	ip, ip, r4
 801b5c4:	9c04      	ldr	r4, [sp, #16]
 801b5c6:	f06f 0501 	mvn.w	r5, #1
 801b5ca:	00e6      	lsls	r6, r4, #3
 801b5cc:	437d      	muls	r5, r7
 801b5ce:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b5d2:	ea4c 0c04 	orr.w	ip, ip, r4
 801b5d6:	f820 c005 	strh.w	ip, [r0, r5]
 801b5da:	e7e6      	b.n	801b5aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801b5dc:	f04f 0800 	mov.w	r8, #0
 801b5e0:	eba3 0408 	sub.w	r4, r3, r8
 801b5e4:	2c00      	cmp	r4, #0
 801b5e6:	f77f af42 	ble.w	801b46e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801b5ea:	140d      	asrs	r5, r1, #16
 801b5ec:	1414      	asrs	r4, r2, #16
 801b5ee:	fb09 5404 	mla	r4, r9, r4, r5
 801b5f2:	9d03      	ldr	r5, [sp, #12]
 801b5f4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801b5f8:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801b5fc:	d042      	beq.n	801b684 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801b5fe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b602:	fa5f f58c 	uxtb.w	r5, ip
 801b606:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801b60a:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801b60e:	d040      	beq.n	801b692 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b610:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801b614:	fa1f fa85 	uxth.w	sl, r5
 801b618:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b61c:	43ed      	mvns	r5, r5
 801b61e:	b2ff      	uxtb	r7, r7
 801b620:	b2ed      	uxtb	r5, r5
 801b622:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b626:	fb17 f70a 	smulbb	r7, r7, sl
 801b62a:	fb0c 7705 	mla	r7, ip, r5, r7
 801b62e:	b2e4      	uxtb	r4, r4
 801b630:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b634:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b638:	fa5f fe8e 	uxtb.w	lr, lr
 801b63c:	fb14 f40a 	smulbb	r4, r4, sl
 801b640:	fb0e 4405 	mla	r4, lr, r5, r4
 801b644:	b2f6      	uxtb	r6, r6
 801b646:	b2bf      	uxth	r7, r7
 801b648:	fb16 f60a 	smulbb	r6, r6, sl
 801b64c:	b2a4      	uxth	r4, r4
 801b64e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b652:	fb0c 6c05 	mla	ip, ip, r5, r6
 801b656:	1c7d      	adds	r5, r7, #1
 801b658:	1c66      	adds	r6, r4, #1
 801b65a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801b65e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b662:	fa1f fc8c 	uxth.w	ip, ip
 801b666:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b66a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b66e:	4337      	orrs	r7, r6
 801b670:	f10c 0601 	add.w	r6, ip, #1
 801b674:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b678:	0976      	lsrs	r6, r6, #5
 801b67a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b67e:	4337      	orrs	r7, r6
 801b680:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801b684:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b686:	4421      	add	r1, r4
 801b688:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b68a:	f108 0801 	add.w	r8, r8, #1
 801b68e:	4422      	add	r2, r4
 801b690:	e7a6      	b.n	801b5e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 801b692:	4d07      	ldr	r5, [pc, #28]	; (801b6b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b694:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b698:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801b69c:	00f6      	lsls	r6, r6, #3
 801b69e:	4327      	orrs	r7, r4
 801b6a0:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801b6a4:	4327      	orrs	r7, r4
 801b6a6:	e7eb      	b.n	801b680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801b6a8:	b007      	add	sp, #28
 801b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ae:	bf00      	nop
 801b6b0:	fffff800 	.word	0xfffff800

0801b6b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6b8:	b087      	sub	sp, #28
 801b6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b6be:	9204      	str	r2, [sp, #16]
 801b6c0:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 801b6c4:	9200      	str	r2, [sp, #0]
 801b6c6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b6ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b6cc:	9201      	str	r2, [sp, #4]
 801b6ce:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b6d2:	9205      	str	r2, [sp, #20]
 801b6d4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b6d8:	6860      	ldr	r0, [r4, #4]
 801b6da:	fb00 2505 	mla	r5, r0, r5, r2
 801b6de:	6822      	ldr	r2, [r4, #0]
 801b6e0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b6e4:	9a00      	ldr	r2, [sp, #0]
 801b6e6:	3201      	adds	r2, #1
 801b6e8:	f022 0201 	bic.w	r2, r2, #1
 801b6ec:	9202      	str	r2, [sp, #8]
 801b6ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b6f0:	6812      	ldr	r2, [r2, #0]
 801b6f2:	9203      	str	r2, [sp, #12]
 801b6f4:	2900      	cmp	r1, #0
 801b6f6:	dc03      	bgt.n	801b700 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b6f8:	9a04      	ldr	r2, [sp, #16]
 801b6fa:	2a00      	cmp	r2, #0
 801b6fc:	f340 814c 	ble.w	801b998 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801b700:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b702:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b708:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	dd10      	ble.n	801b732 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b710:	1422      	asrs	r2, r4, #16
 801b712:	d407      	bmi.n	801b724 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b714:	9e00      	ldr	r6, [sp, #0]
 801b716:	4296      	cmp	r6, r2
 801b718:	dd04      	ble.n	801b724 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b71a:	1402      	asrs	r2, r0, #16
 801b71c:	d402      	bmi.n	801b724 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b71e:	9e01      	ldr	r6, [sp, #4]
 801b720:	42b2      	cmp	r2, r6
 801b722:	db07      	blt.n	801b734 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x80>
 801b724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b726:	4414      	add	r4, r2
 801b728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b72a:	3b01      	subs	r3, #1
 801b72c:	4410      	add	r0, r2
 801b72e:	3502      	adds	r5, #2
 801b730:	e7ec      	b.n	801b70c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b732:	d00f      	beq.n	801b754 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b734:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b736:	1e5a      	subs	r2, r3, #1
 801b738:	fb06 4602 	mla	r6, r6, r2, r4
 801b73c:	1436      	asrs	r6, r6, #16
 801b73e:	d542      	bpl.n	801b7c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801b740:	469a      	mov	sl, r3
 801b742:	46a9      	mov	r9, r5
 801b744:	f1ba 0f00 	cmp.w	sl, #0
 801b748:	f300 80b5 	bgt.w	801b8b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801b74c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b750:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b754:	2900      	cmp	r1, #0
 801b756:	f340 811f 	ble.w	801b998 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801b75a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b75e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b762:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b768:	3901      	subs	r1, #1
 801b76a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b76e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b772:	eeb0 6a62 	vmov.f32	s12, s5
 801b776:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b77a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b77e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b782:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b786:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b78a:	eeb0 6a43 	vmov.f32	s12, s6
 801b78e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b792:	ee12 2a90 	vmov	r2, s5
 801b796:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b79a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b79e:	ee13 2a10 	vmov	r2, s6
 801b7a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7a6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b7a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7ae:	9a04      	ldr	r2, [sp, #16]
 801b7b0:	9314      	str	r3, [sp, #80]	; 0x50
 801b7b2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b7b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7b8:	eeb0 3a67 	vmov.f32	s6, s15
 801b7bc:	bf08      	it	eq
 801b7be:	4613      	moveq	r3, r2
 801b7c0:	eef0 2a47 	vmov.f32	s5, s14
 801b7c4:	e796      	b.n	801b6f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801b7c6:	9f00      	ldr	r7, [sp, #0]
 801b7c8:	42b7      	cmp	r7, r6
 801b7ca:	ddb9      	ble.n	801b740 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b7cc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b7ce:	fb06 0202 	mla	r2, r6, r2, r0
 801b7d2:	1412      	asrs	r2, r2, #16
 801b7d4:	d4b4      	bmi.n	801b740 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b7d6:	9e01      	ldr	r6, [sp, #4]
 801b7d8:	42b2      	cmp	r2, r6
 801b7da:	dab1      	bge.n	801b740 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b7dc:	f04f 0800 	mov.w	r8, #0
 801b7e0:	eba3 0208 	sub.w	r2, r3, r8
 801b7e4:	2a00      	cmp	r2, #0
 801b7e6:	ddb1      	ble.n	801b74c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b7e8:	9f02      	ldr	r7, [sp, #8]
 801b7ea:	1422      	asrs	r2, r4, #16
 801b7ec:	1406      	asrs	r6, r0, #16
 801b7ee:	fb07 2606 	mla	r6, r7, r6, r2
 801b7f2:	0872      	lsrs	r2, r6, #1
 801b7f4:	9f03      	ldr	r7, [sp, #12]
 801b7f6:	5cba      	ldrb	r2, [r7, r2]
 801b7f8:	07f6      	lsls	r6, r6, #31
 801b7fa:	bf54      	ite	pl
 801b7fc:	f002 020f 	andpl.w	r2, r2, #15
 801b800:	1112      	asrmi	r2, r2, #4
 801b802:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b806:	b2d2      	uxtb	r2, r2
 801b808:	2a00      	cmp	r2, #0
 801b80a:	d04d      	beq.n	801b8a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 801b80c:	9f05      	ldr	r7, [sp, #20]
 801b80e:	4e64      	ldr	r6, [pc, #400]	; (801b9a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b810:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b814:	6836      	ldr	r6, [r6, #0]
 801b816:	437a      	muls	r2, r7
 801b818:	1c57      	adds	r7, r2, #1
 801b81a:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b81e:	1212      	asrs	r2, r2, #8
 801b820:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b824:	fa1f fa82 	uxth.w	sl, r2
 801b828:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b82c:	43d2      	mvns	r2, r2
 801b82e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b832:	b2d2      	uxtb	r2, r2
 801b834:	fb1c fc0a 	smulbb	ip, ip, sl
 801b838:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 801b83c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b840:	fb07 c702 	mla	r7, r7, r2, ip
 801b844:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b848:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b84c:	fb19 f90a 	smulbb	r9, r9, sl
 801b850:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b854:	00f6      	lsls	r6, r6, #3
 801b856:	fb0c 9c02 	mla	ip, ip, r2, r9
 801b85a:	b2f6      	uxtb	r6, r6
 801b85c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b860:	fa1f fc8c 	uxth.w	ip, ip
 801b864:	fa5f fe8e 	uxtb.w	lr, lr
 801b868:	fb16 f60a 	smulbb	r6, r6, sl
 801b86c:	b2bf      	uxth	r7, r7
 801b86e:	fb0e 6602 	mla	r6, lr, r2, r6
 801b872:	f10c 0901 	add.w	r9, ip, #1
 801b876:	b2b6      	uxth	r6, r6
 801b878:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b87c:	f107 0b01 	add.w	fp, r7, #1
 801b880:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b884:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b888:	f106 0e01 	add.w	lr, r6, #1
 801b88c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b890:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b894:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801b898:	ea4c 0c07 	orr.w	ip, ip, r7
 801b89c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b8a0:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b8a4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b8a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b8aa:	4414      	add	r4, r2
 801b8ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b8ae:	f108 0801 	add.w	r8, r8, #1
 801b8b2:	4410      	add	r0, r2
 801b8b4:	e794      	b.n	801b7e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 801b8b6:	1422      	asrs	r2, r4, #16
 801b8b8:	d465      	bmi.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8ba:	9e00      	ldr	r6, [sp, #0]
 801b8bc:	4296      	cmp	r6, r2
 801b8be:	dd62      	ble.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8c0:	1406      	asrs	r6, r0, #16
 801b8c2:	d460      	bmi.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8c4:	9f01      	ldr	r7, [sp, #4]
 801b8c6:	42be      	cmp	r6, r7
 801b8c8:	da5d      	bge.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8ca:	9f02      	ldr	r7, [sp, #8]
 801b8cc:	fb06 2607 	mla	r6, r6, r7, r2
 801b8d0:	0872      	lsrs	r2, r6, #1
 801b8d2:	9f03      	ldr	r7, [sp, #12]
 801b8d4:	5cba      	ldrb	r2, [r7, r2]
 801b8d6:	07f7      	lsls	r7, r6, #31
 801b8d8:	bf54      	ite	pl
 801b8da:	f002 020f 	andpl.w	r2, r2, #15
 801b8de:	1112      	asrmi	r2, r2, #4
 801b8e0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b8e4:	b2d2      	uxtb	r2, r2
 801b8e6:	2a00      	cmp	r2, #0
 801b8e8:	d04d      	beq.n	801b986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801b8ea:	9f05      	ldr	r7, [sp, #20]
 801b8ec:	4e2c      	ldr	r6, [pc, #176]	; (801b9a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b8ee:	f8b9 e000 	ldrh.w	lr, [r9]
 801b8f2:	6836      	ldr	r6, [r6, #0]
 801b8f4:	437a      	muls	r2, r7
 801b8f6:	1c57      	adds	r7, r2, #1
 801b8f8:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b8fc:	1212      	asrs	r2, r2, #8
 801b8fe:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b902:	fa1f fb82 	uxth.w	fp, r2
 801b906:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b90a:	43d2      	mvns	r2, r2
 801b90c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b910:	b2d2      	uxtb	r2, r2
 801b912:	fb1c fc0b 	smulbb	ip, ip, fp
 801b916:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 801b91a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b91e:	fb07 c702 	mla	r7, r7, r2, ip
 801b922:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b926:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801b92a:	fb18 f80b 	smulbb	r8, r8, fp
 801b92e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b932:	00f6      	lsls	r6, r6, #3
 801b934:	fb0c 8c02 	mla	ip, ip, r2, r8
 801b938:	b2f6      	uxtb	r6, r6
 801b93a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b93e:	fa1f fc8c 	uxth.w	ip, ip
 801b942:	fa5f fe8e 	uxtb.w	lr, lr
 801b946:	fb16 f60b 	smulbb	r6, r6, fp
 801b94a:	b2bf      	uxth	r7, r7
 801b94c:	fb0e 6602 	mla	r6, lr, r2, r6
 801b950:	f10c 0801 	add.w	r8, ip, #1
 801b954:	b2b6      	uxth	r6, r6
 801b956:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801b95a:	f107 0801 	add.w	r8, r7, #1
 801b95e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b962:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b966:	f106 0e01 	add.w	lr, r6, #1
 801b96a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b96e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b972:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801b976:	ea4c 0c07 	orr.w	ip, ip, r7
 801b97a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b97e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b982:	f8a9 c000 	strh.w	ip, [r9]
 801b986:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b988:	4414      	add	r4, r2
 801b98a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b98c:	f109 0902 	add.w	r9, r9, #2
 801b990:	4410      	add	r0, r2
 801b992:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b996:	e6d5      	b.n	801b744 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b998:	b007      	add	sp, #28
 801b99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b99e:	bf00      	nop
 801b9a0:	20001360 	.word	0x20001360

0801b9a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a8:	b087      	sub	sp, #28
 801b9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b9ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b9b0:	9205      	str	r2, [sp, #20]
 801b9b2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b9b6:	9201      	str	r2, [sp, #4]
 801b9b8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b9bc:	6860      	ldr	r0, [r4, #4]
 801b9be:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 801b9c2:	9100      	str	r1, [sp, #0]
 801b9c4:	fb00 2505 	mla	r5, r0, r5, r2
 801b9c8:	6822      	ldr	r2, [r4, #0]
 801b9ca:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b9ce:	f10b 0201 	add.w	r2, fp, #1
 801b9d2:	f022 0201 	bic.w	r2, r2, #1
 801b9d6:	9203      	str	r2, [sp, #12]
 801b9d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b9da:	6812      	ldr	r2, [r2, #0]
 801b9dc:	9204      	str	r2, [sp, #16]
 801b9de:	9a00      	ldr	r2, [sp, #0]
 801b9e0:	2a00      	cmp	r2, #0
 801b9e2:	dc03      	bgt.n	801b9ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801b9e4:	9a05      	ldr	r2, [sp, #20]
 801b9e6:	2a00      	cmp	r2, #0
 801b9e8:	f340 8157 	ble.w	801bc9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801b9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b9f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9f4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	dd0f      	ble.n	801ba1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b9fc:	1422      	asrs	r2, r4, #16
 801b9fe:	d406      	bmi.n	801ba0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba00:	4593      	cmp	fp, r2
 801ba02:	dd04      	ble.n	801ba0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba04:	1402      	asrs	r2, r0, #16
 801ba06:	d402      	bmi.n	801ba0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba08:	9e01      	ldr	r6, [sp, #4]
 801ba0a:	42b2      	cmp	r2, r6
 801ba0c:	db07      	blt.n	801ba1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ba0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba10:	4414      	add	r4, r2
 801ba12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba14:	3b01      	subs	r3, #1
 801ba16:	4410      	add	r0, r2
 801ba18:	3502      	adds	r5, #2
 801ba1a:	e7ed      	b.n	801b9f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 801ba1c:	d018      	beq.n	801ba50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801ba1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba20:	1e5a      	subs	r2, r3, #1
 801ba22:	fb06 4602 	mla	r6, r6, r2, r4
 801ba26:	1436      	asrs	r6, r6, #16
 801ba28:	d40a      	bmi.n	801ba40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ba2a:	45b3      	cmp	fp, r6
 801ba2c:	dd08      	ble.n	801ba40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ba2e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ba30:	fb06 0202 	mla	r2, r6, r2, r0
 801ba34:	1412      	asrs	r2, r2, #16
 801ba36:	d403      	bmi.n	801ba40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ba38:	9e01      	ldr	r6, [sp, #4]
 801ba3a:	42b2      	cmp	r2, r6
 801ba3c:	f2c0 80bf 	blt.w	801bbbe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 801ba40:	2700      	movs	r7, #0
 801ba42:	19da      	adds	r2, r3, r7
 801ba44:	2a00      	cmp	r2, #0
 801ba46:	dc3f      	bgt.n	801bac8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801ba48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba4c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ba50:	9b00      	ldr	r3, [sp, #0]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	f340 8121 	ble.w	801bc9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801ba58:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba66:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba6e:	eeb0 6a62 	vmov.f32	s12, s5
 801ba72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba7e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba86:	eeb0 6a43 	vmov.f32	s12, s6
 801ba8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba8e:	ee12 2a90 	vmov	r2, s5
 801ba92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba9a:	ee13 2a10 	vmov	r2, s6
 801ba9e:	9313      	str	r3, [sp, #76]	; 0x4c
 801baa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801baa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801baa6:	9314      	str	r3, [sp, #80]	; 0x50
 801baa8:	9b00      	ldr	r3, [sp, #0]
 801baaa:	9a05      	ldr	r2, [sp, #20]
 801baac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bab0:	3b01      	subs	r3, #1
 801bab2:	9300      	str	r3, [sp, #0]
 801bab4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801baba:	eeb0 3a67 	vmov.f32	s6, s15
 801babe:	bf08      	it	eq
 801bac0:	4613      	moveq	r3, r2
 801bac2:	eef0 2a47 	vmov.f32	s5, s14
 801bac6:	e78a      	b.n	801b9de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801bac8:	1422      	asrs	r2, r4, #16
 801baca:	d466      	bmi.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bacc:	4593      	cmp	fp, r2
 801bace:	dd64      	ble.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bad0:	1406      	asrs	r6, r0, #16
 801bad2:	d462      	bmi.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bad4:	9901      	ldr	r1, [sp, #4]
 801bad6:	428e      	cmp	r6, r1
 801bad8:	da5f      	bge.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bada:	9903      	ldr	r1, [sp, #12]
 801badc:	fb06 2601 	mla	r6, r6, r1, r2
 801bae0:	0872      	lsrs	r2, r6, #1
 801bae2:	9904      	ldr	r1, [sp, #16]
 801bae4:	5c8a      	ldrb	r2, [r1, r2]
 801bae6:	07f6      	lsls	r6, r6, #31
 801bae8:	bf54      	ite	pl
 801baea:	f002 020f 	andpl.w	r2, r2, #15
 801baee:	1112      	asrmi	r2, r2, #4
 801baf0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801baf4:	b2d2      	uxtb	r2, r2
 801baf6:	2a00      	cmp	r2, #0
 801baf8:	d04f      	beq.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bafa:	4969      	ldr	r1, [pc, #420]	; (801bca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 801bafc:	f8d1 c000 	ldr.w	ip, [r1]
 801bb00:	2aff      	cmp	r2, #255	; 0xff
 801bb02:	ea4f 291c 	mov.w	r9, ip, lsr #8
 801bb06:	ea4f 06dc 	mov.w	r6, ip, lsr #3
 801bb0a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bb0e:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801bb12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bb16:	fa5f fc8c 	uxtb.w	ip, ip
 801bb1a:	d044      	beq.n	801bba6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801bb1c:	f06f 0101 	mvn.w	r1, #1
 801bb20:	4379      	muls	r1, r7
 801bb22:	fa1f fa82 	uxth.w	sl, r2
 801bb26:	f835 8001 	ldrh.w	r8, [r5, r1]
 801bb2a:	9102      	str	r1, [sp, #8]
 801bb2c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bb30:	43d2      	mvns	r2, r2
 801bb32:	b2d2      	uxtb	r2, r2
 801bb34:	fb19 f90a 	smulbb	r9, r9, sl
 801bb38:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bb3c:	fb0e 9e02 	mla	lr, lr, r2, r9
 801bb40:	ea4f 09e8 	mov.w	r9, r8, asr #3
 801bb44:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bb48:	fb16 f60a 	smulbb	r6, r6, sl
 801bb4c:	fb09 6602 	mla	r6, r9, r2, r6
 801bb50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bb54:	b2b6      	uxth	r6, r6
 801bb56:	fa5f f888 	uxtb.w	r8, r8
 801bb5a:	fb1c fc0a 	smulbb	ip, ip, sl
 801bb5e:	fa1f fe8e 	uxth.w	lr, lr
 801bb62:	fb08 cc02 	mla	ip, r8, r2, ip
 801bb66:	f106 0901 	add.w	r9, r6, #1
 801bb6a:	fa1f fc8c 	uxth.w	ip, ip
 801bb6e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801bb72:	f10e 0901 	add.w	r9, lr, #1
 801bb76:	0976      	lsrs	r6, r6, #5
 801bb78:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 801bb7c:	f10c 0201 	add.w	r2, ip, #1
 801bb80:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb84:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb88:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bb8c:	ea46 060e 	orr.w	r6, r6, lr
 801bb90:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bb94:	ea46 060c 	orr.w	r6, r6, ip
 801bb98:	526e      	strh	r6, [r5, r1]
 801bb9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb9c:	4414      	add	r4, r2
 801bb9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bba0:	3f01      	subs	r7, #1
 801bba2:	4410      	add	r0, r2
 801bba4:	e74d      	b.n	801ba42 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801bba6:	f06f 0201 	mvn.w	r2, #1
 801bbaa:	00f6      	lsls	r6, r6, #3
 801bbac:	fb02 f807 	mul.w	r8, r2, r7
 801bbb0:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801bbb4:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 801bbb8:	f825 6008 	strh.w	r6, [r5, r8]
 801bbbc:	e7ed      	b.n	801bb9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801bbbe:	f04f 0800 	mov.w	r8, #0
 801bbc2:	eba3 0208 	sub.w	r2, r3, r8
 801bbc6:	2a00      	cmp	r2, #0
 801bbc8:	f77f af3e 	ble.w	801ba48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801bbcc:	9903      	ldr	r1, [sp, #12]
 801bbce:	1422      	asrs	r2, r4, #16
 801bbd0:	1406      	asrs	r6, r0, #16
 801bbd2:	fb01 2606 	mla	r6, r1, r6, r2
 801bbd6:	0872      	lsrs	r2, r6, #1
 801bbd8:	9904      	ldr	r1, [sp, #16]
 801bbda:	5c8a      	ldrb	r2, [r1, r2]
 801bbdc:	07f1      	lsls	r1, r6, #31
 801bbde:	bf54      	ite	pl
 801bbe0:	f002 020f 	andpl.w	r2, r2, #15
 801bbe4:	1112      	asrmi	r2, r2, #4
 801bbe6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bbea:	b2d2      	uxtb	r2, r2
 801bbec:	2a00      	cmp	r2, #0
 801bbee:	d047      	beq.n	801bc80 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>
 801bbf0:	492b      	ldr	r1, [pc, #172]	; (801bca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 801bbf2:	680f      	ldr	r7, [r1, #0]
 801bbf4:	2aff      	cmp	r2, #255	; 0xff
 801bbf6:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801bbfa:	ea4f 06d7 	mov.w	r6, r7, lsr #3
 801bbfe:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801bc02:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801bc06:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bc0a:	b2ff      	uxtb	r7, r7
 801bc0c:	d03f      	beq.n	801bc8e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ea>
 801bc0e:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bc12:	fa1f fa82 	uxth.w	sl, r2
 801bc16:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bc1a:	43d2      	mvns	r2, r2
 801bc1c:	b2d2      	uxtb	r2, r2
 801bc1e:	fb19 f90a 	smulbb	r9, r9, sl
 801bc22:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc26:	fb0c 9c02 	mla	ip, ip, r2, r9
 801bc2a:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801bc2e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801bc32:	fb16 f60a 	smulbb	r6, r6, sl
 801bc36:	fb09 6602 	mla	r6, r9, r2, r6
 801bc3a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bc3e:	b2b6      	uxth	r6, r6
 801bc40:	fa5f fe8e 	uxtb.w	lr, lr
 801bc44:	fb17 f70a 	smulbb	r7, r7, sl
 801bc48:	fa1f fc8c 	uxth.w	ip, ip
 801bc4c:	fb0e 7702 	mla	r7, lr, r2, r7
 801bc50:	f106 0901 	add.w	r9, r6, #1
 801bc54:	b2bf      	uxth	r7, r7
 801bc56:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801bc5a:	f10c 0901 	add.w	r9, ip, #1
 801bc5e:	0976      	lsrs	r6, r6, #5
 801bc60:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801bc64:	1c7a      	adds	r2, r7, #1
 801bc66:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bc6a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc6e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bc72:	ea46 060c 	orr.w	r6, r6, ip
 801bc76:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bc7a:	433e      	orrs	r6, r7
 801bc7c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801bc80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc82:	4414      	add	r4, r2
 801bc84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc86:	f108 0801 	add.w	r8, r8, #1
 801bc8a:	4410      	add	r0, r2
 801bc8c:	e799      	b.n	801bbc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bc8e:	00f6      	lsls	r6, r6, #3
 801bc90:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801bc94:	ea46 06d7 	orr.w	r6, r6, r7, lsr #3
 801bc98:	e7f0      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 801bc9a:	b007      	add	sp, #28
 801bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bca0:	20001360 	.word	0x20001360

0801bca4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bca4:	4770      	bx	lr

0801bca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bca6:	4770      	bx	lr

0801bca8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bca8:	4770      	bx	lr

0801bcaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bcaa:	4770      	bx	lr

0801bcac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bcac:	4770      	bx	lr

0801bcae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bcae:	4770      	bx	lr

0801bcb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bcb0:	4770      	bx	lr

0801bcb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bcb2:	4770      	bx	lr

0801bcb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bcb4:	4770      	bx	lr

0801bcb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bcb6:	4770      	bx	lr

0801bcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bcb8:	4770      	bx	lr

0801bcba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bcba:	4770      	bx	lr

0801bcbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bcbc:	4770      	bx	lr

0801bcbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bcbe:	4770      	bx	lr

0801bcc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bcc0:	4770      	bx	lr

0801bcc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bcc2:	4770      	bx	lr

0801bcc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bcc4:	4770      	bx	lr

0801bcc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bcc6:	4770      	bx	lr

0801bcc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bcc8:	4770      	bx	lr

0801bcca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bcca:	4770      	bx	lr

0801bccc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bccc:	4770      	bx	lr

0801bcce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bcce:	4770      	bx	lr

0801bcd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bcd0:	4770      	bx	lr

0801bcd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bcd2:	4770      	bx	lr

0801bcd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bcd4:	4770      	bx	lr

0801bcd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bcd6:	4770      	bx	lr

0801bcd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bcd8:	4770      	bx	lr

0801bcda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bcda:	4770      	bx	lr

0801bcdc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801bcdc:	b508      	push	{r3, lr}
 801bcde:	4b06      	ldr	r3, [pc, #24]	; (801bcf8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801bce0:	8818      	ldrh	r0, [r3, #0]
 801bce2:	b928      	cbnz	r0, 801bcf0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801bce4:	4b05      	ldr	r3, [pc, #20]	; (801bcfc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801bce6:	4a06      	ldr	r2, [pc, #24]	; (801bd00 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801bce8:	4806      	ldr	r0, [pc, #24]	; (801bd04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801bcea:	2154      	movs	r1, #84	; 0x54
 801bcec:	f009 f88e 	bl	8024e0c <__assert_func>
 801bcf0:	0040      	lsls	r0, r0, #1
 801bcf2:	b280      	uxth	r0, r0
 801bcf4:	bd08      	pop	{r3, pc}
 801bcf6:	bf00      	nop
 801bcf8:	20001350 	.word	0x20001350
 801bcfc:	080544ca 	.word	0x080544ca
 801bd00:	08054a4b 	.word	0x08054a4b
 801bd04:	0805450c 	.word	0x0805450c

0801bd08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0c:	b08d      	sub	sp, #52	; 0x34
 801bd0e:	460f      	mov	r7, r1
 801bd10:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801bd14:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801bd18:	4616      	mov	r6, r2
 801bd1a:	f1b9 0f00 	cmp.w	r9, #0
 801bd1e:	d046      	beq.n	801bdae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bd20:	6810      	ldr	r0, [r2, #0]
 801bd22:	6851      	ldr	r1, [r2, #4]
 801bd24:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801beec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801bd28:	ad08      	add	r5, sp, #32
 801bd2a:	c503      	stmia	r5!, {r0, r1}
 801bd2c:	6818      	ldr	r0, [r3, #0]
 801bd2e:	6859      	ldr	r1, [r3, #4]
 801bd30:	ad0a      	add	r5, sp, #40	; 0x28
 801bd32:	c503      	stmia	r5!, {r0, r1}
 801bd34:	a808      	add	r0, sp, #32
 801bd36:	f7fb fa3d 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd3a:	4631      	mov	r1, r6
 801bd3c:	a80a      	add	r0, sp, #40	; 0x28
 801bd3e:	f7fb fa21 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd42:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801bd46:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801bd4a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801bd4e:	f8d8 0000 	ldr.w	r0, [r8]
 801bd52:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801bd56:	fb16 2103 	smlabb	r1, r6, r3, r2
 801bd5a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801bd5e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801bd62:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801bd66:	440a      	add	r2, r1
 801bd68:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bd6c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bd70:	4413      	add	r3, r2
 801bd72:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bd76:	6803      	ldr	r3, [r0, #0]
 801bd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd7a:	4798      	blx	r3
 801bd7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bd80:	d018      	beq.n	801bdb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801bd82:	f010 0f04 	tst.w	r0, #4
 801bd86:	d019      	beq.n	801bdbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bd88:	f8d8 0000 	ldr.w	r0, [r8]
 801bd8c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bd90:	6801      	ldr	r1, [r0, #0]
 801bd92:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801bd96:	e9cd 9403 	strd	r9, r4, [sp, #12]
 801bd9a:	b2bf      	uxth	r7, r7
 801bd9c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801bda0:	9402      	str	r4, [sp, #8]
 801bda2:	b2ad      	uxth	r5, r5
 801bda4:	9701      	str	r7, [sp, #4]
 801bda6:	9500      	str	r5, [sp, #0]
 801bda8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801bdaa:	4631      	mov	r1, r6
 801bdac:	47a0      	blx	r4
 801bdae:	b00d      	add	sp, #52	; 0x34
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb4:	b914      	cbnz	r4, 801bdbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801bdb6:	f010 0f01 	tst.w	r0, #1
 801bdba:	e7e4      	b.n	801bd86 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801bdbc:	f8d8 0000 	ldr.w	r0, [r8]
 801bdc0:	6803      	ldr	r3, [r0, #0]
 801bdc2:	6a1b      	ldr	r3, [r3, #32]
 801bdc4:	4798      	blx	r3
 801bdc6:	4a48      	ldr	r2, [pc, #288]	; (801bee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 801bdc8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801bdcc:	8814      	ldrh	r4, [r2, #0]
 801bdce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801bdd2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bdd6:	fb01 3404 	mla	r4, r1, r4, r3
 801bdda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bdde:	4692      	mov	sl, r2
 801bde0:	d118      	bne.n	801be14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 801bde2:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801bde6:	f04f 0900 	mov.w	r9, #0
 801bdea:	f8d8 0000 	ldr.w	r0, [r8]
 801bdee:	45b9      	cmp	r9, r7
 801bdf0:	6803      	ldr	r3, [r0, #0]
 801bdf2:	da73      	bge.n	801bedc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801bdf4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801bdf6:	4632      	mov	r2, r6
 801bdf8:	465b      	mov	r3, fp
 801bdfa:	4621      	mov	r1, r4
 801bdfc:	47a8      	blx	r5
 801bdfe:	f8ba 3000 	ldrh.w	r3, [sl]
 801be02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801be06:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801be0a:	f109 0901 	add.w	r9, r9, #1
 801be0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801be12:	e7ea      	b.n	801bdea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 801be14:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 801be18:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 801be1c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801be20:	f04f 0b00 	mov.w	fp, #0
 801be24:	fa1f f389 	uxth.w	r3, r9
 801be28:	fa1f f888 	uxth.w	r8, r8
 801be2c:	9207      	str	r2, [sp, #28]
 801be2e:	45bb      	cmp	fp, r7
 801be30:	da54      	bge.n	801bedc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801be32:	f04f 0e00 	mov.w	lr, #0
 801be36:	45ae      	cmp	lr, r5
 801be38:	da41      	bge.n	801bebe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 801be3a:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 801be3e:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 801be42:	1208      	asrs	r0, r1, #8
 801be44:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801be48:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801be4c:	fb10 f008 	smulbb	r0, r0, r8
 801be50:	ea4f 09e1 	mov.w	r9, r1, asr #3
 801be54:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801be58:	00c9      	lsls	r1, r1, #3
 801be5a:	fb0c 0c03 	mla	ip, ip, r3, r0
 801be5e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801be62:	10d0      	asrs	r0, r2, #3
 801be64:	b2c9      	uxtb	r1, r1
 801be66:	00d2      	lsls	r2, r2, #3
 801be68:	fa1f fc8c 	uxth.w	ip, ip
 801be6c:	fb19 f908 	smulbb	r9, r9, r8
 801be70:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801be74:	b2d2      	uxtb	r2, r2
 801be76:	fb11 f108 	smulbb	r1, r1, r8
 801be7a:	fb00 9003 	mla	r0, r0, r3, r9
 801be7e:	fb02 1203 	mla	r2, r2, r3, r1
 801be82:	f10c 0901 	add.w	r9, ip, #1
 801be86:	b292      	uxth	r2, r2
 801be88:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801be8c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801be90:	f102 0c01 	add.w	ip, r2, #1
 801be94:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801be98:	b280      	uxth	r0, r0
 801be9a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801be9e:	ea49 0c02 	orr.w	ip, r9, r2
 801bea2:	f100 0901 	add.w	r9, r0, #1
 801bea6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801beaa:	0940      	lsrs	r0, r0, #5
 801beac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801beb0:	ea4c 0c00 	orr.w	ip, ip, r0
 801beb4:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 801beb8:	f10e 0e01 	add.w	lr, lr, #1
 801bebc:	e7bb      	b.n	801be36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801bebe:	9a07      	ldr	r2, [sp, #28]
 801bec0:	8812      	ldrh	r2, [r2, #0]
 801bec2:	1b52      	subs	r2, r2, r5
 801bec4:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801bec8:	4414      	add	r4, r2
 801beca:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801bece:	1b52      	subs	r2, r2, r5
 801bed0:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801bed4:	4416      	add	r6, r2
 801bed6:	f10b 0b01 	add.w	fp, fp, #1
 801beda:	e7a8      	b.n	801be2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 801bedc:	4b03      	ldr	r3, [pc, #12]	; (801beec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801bede:	6818      	ldr	r0, [r3, #0]
 801bee0:	6803      	ldr	r3, [r0, #0]
 801bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bee4:	4798      	blx	r3
 801bee6:	e762      	b.n	801bdae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801bee8:	20001350 	.word	0x20001350
 801beec:	20001358 	.word	0x20001358

0801bef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bef0:	b510      	push	{r4, lr}
 801bef2:	2104      	movs	r1, #4
 801bef4:	4604      	mov	r4, r0
 801bef6:	f008 ff5d 	bl	8024db4 <_ZdlPvj>
 801befa:	4620      	mov	r0, r4
 801befc:	bd10      	pop	{r4, pc}

0801befe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801befe:	b510      	push	{r4, lr}
 801bf00:	2104      	movs	r1, #4
 801bf02:	4604      	mov	r4, r0
 801bf04:	f008 ff56 	bl	8024db4 <_ZdlPvj>
 801bf08:	4620      	mov	r0, r4
 801bf0a:	bd10      	pop	{r4, pc}

0801bf0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bf0c:	b510      	push	{r4, lr}
 801bf0e:	2104      	movs	r1, #4
 801bf10:	4604      	mov	r4, r0
 801bf12:	f008 ff4f 	bl	8024db4 <_ZdlPvj>
 801bf16:	4620      	mov	r0, r4
 801bf18:	bd10      	pop	{r4, pc}

0801bf1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bf1a:	b510      	push	{r4, lr}
 801bf1c:	2104      	movs	r1, #4
 801bf1e:	4604      	mov	r4, r0
 801bf20:	f008 ff48 	bl	8024db4 <_ZdlPvj>
 801bf24:	4620      	mov	r0, r4
 801bf26:	bd10      	pop	{r4, pc}

0801bf28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bf28:	b510      	push	{r4, lr}
 801bf2a:	2104      	movs	r1, #4
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	f008 ff41 	bl	8024db4 <_ZdlPvj>
 801bf32:	4620      	mov	r0, r4
 801bf34:	bd10      	pop	{r4, pc}

0801bf36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801bf36:	b510      	push	{r4, lr}
 801bf38:	2104      	movs	r1, #4
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	f008 ff3a 	bl	8024db4 <_ZdlPvj>
 801bf40:	4620      	mov	r0, r4
 801bf42:	bd10      	pop	{r4, pc}

0801bf44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bf44:	b510      	push	{r4, lr}
 801bf46:	2104      	movs	r1, #4
 801bf48:	4604      	mov	r4, r0
 801bf4a:	f008 ff33 	bl	8024db4 <_ZdlPvj>
 801bf4e:	4620      	mov	r0, r4
 801bf50:	bd10      	pop	{r4, pc}

0801bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bf52:	b510      	push	{r4, lr}
 801bf54:	2104      	movs	r1, #4
 801bf56:	4604      	mov	r4, r0
 801bf58:	f008 ff2c 	bl	8024db4 <_ZdlPvj>
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	bd10      	pop	{r4, pc}

0801bf60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bf60:	b510      	push	{r4, lr}
 801bf62:	2104      	movs	r1, #4
 801bf64:	4604      	mov	r4, r0
 801bf66:	f008 ff25 	bl	8024db4 <_ZdlPvj>
 801bf6a:	4620      	mov	r0, r4
 801bf6c:	bd10      	pop	{r4, pc}

0801bf6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bf6e:	b510      	push	{r4, lr}
 801bf70:	2104      	movs	r1, #4
 801bf72:	4604      	mov	r4, r0
 801bf74:	f008 ff1e 	bl	8024db4 <_ZdlPvj>
 801bf78:	4620      	mov	r0, r4
 801bf7a:	bd10      	pop	{r4, pc}

0801bf7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bf7c:	b510      	push	{r4, lr}
 801bf7e:	2104      	movs	r1, #4
 801bf80:	4604      	mov	r4, r0
 801bf82:	f008 ff17 	bl	8024db4 <_ZdlPvj>
 801bf86:	4620      	mov	r0, r4
 801bf88:	bd10      	pop	{r4, pc}

0801bf8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bf8a:	b510      	push	{r4, lr}
 801bf8c:	2104      	movs	r1, #4
 801bf8e:	4604      	mov	r4, r0
 801bf90:	f008 ff10 	bl	8024db4 <_ZdlPvj>
 801bf94:	4620      	mov	r0, r4
 801bf96:	bd10      	pop	{r4, pc}

0801bf98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bf98:	b510      	push	{r4, lr}
 801bf9a:	2104      	movs	r1, #4
 801bf9c:	4604      	mov	r4, r0
 801bf9e:	f008 ff09 	bl	8024db4 <_ZdlPvj>
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	bd10      	pop	{r4, pc}

0801bfa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801bfa6:	b510      	push	{r4, lr}
 801bfa8:	2104      	movs	r1, #4
 801bfaa:	4604      	mov	r4, r0
 801bfac:	f008 ff02 	bl	8024db4 <_ZdlPvj>
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	bd10      	pop	{r4, pc}

0801bfb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bfb4:	b510      	push	{r4, lr}
 801bfb6:	2104      	movs	r1, #4
 801bfb8:	4604      	mov	r4, r0
 801bfba:	f008 fefb 	bl	8024db4 <_ZdlPvj>
 801bfbe:	4620      	mov	r0, r4
 801bfc0:	bd10      	pop	{r4, pc}

0801bfc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bfc2:	b510      	push	{r4, lr}
 801bfc4:	2104      	movs	r1, #4
 801bfc6:	4604      	mov	r4, r0
 801bfc8:	f008 fef4 	bl	8024db4 <_ZdlPvj>
 801bfcc:	4620      	mov	r0, r4
 801bfce:	bd10      	pop	{r4, pc}

0801bfd0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bfd0:	b510      	push	{r4, lr}
 801bfd2:	2104      	movs	r1, #4
 801bfd4:	4604      	mov	r4, r0
 801bfd6:	f008 feed 	bl	8024db4 <_ZdlPvj>
 801bfda:	4620      	mov	r0, r4
 801bfdc:	bd10      	pop	{r4, pc}

0801bfde <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bfde:	b510      	push	{r4, lr}
 801bfe0:	2104      	movs	r1, #4
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	f008 fee6 	bl	8024db4 <_ZdlPvj>
 801bfe8:	4620      	mov	r0, r4
 801bfea:	bd10      	pop	{r4, pc}

0801bfec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bfec:	b510      	push	{r4, lr}
 801bfee:	2104      	movs	r1, #4
 801bff0:	4604      	mov	r4, r0
 801bff2:	f008 fedf 	bl	8024db4 <_ZdlPvj>
 801bff6:	4620      	mov	r0, r4
 801bff8:	bd10      	pop	{r4, pc}

0801bffa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bffa:	b510      	push	{r4, lr}
 801bffc:	2104      	movs	r1, #4
 801bffe:	4604      	mov	r4, r0
 801c000:	f008 fed8 	bl	8024db4 <_ZdlPvj>
 801c004:	4620      	mov	r0, r4
 801c006:	bd10      	pop	{r4, pc}

0801c008 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c008:	b510      	push	{r4, lr}
 801c00a:	2104      	movs	r1, #4
 801c00c:	4604      	mov	r4, r0
 801c00e:	f008 fed1 	bl	8024db4 <_ZdlPvj>
 801c012:	4620      	mov	r0, r4
 801c014:	bd10      	pop	{r4, pc}

0801c016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c016:	b510      	push	{r4, lr}
 801c018:	2104      	movs	r1, #4
 801c01a:	4604      	mov	r4, r0
 801c01c:	f008 feca 	bl	8024db4 <_ZdlPvj>
 801c020:	4620      	mov	r0, r4
 801c022:	bd10      	pop	{r4, pc}

0801c024 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c024:	b510      	push	{r4, lr}
 801c026:	2104      	movs	r1, #4
 801c028:	4604      	mov	r4, r0
 801c02a:	f008 fec3 	bl	8024db4 <_ZdlPvj>
 801c02e:	4620      	mov	r0, r4
 801c030:	bd10      	pop	{r4, pc}

0801c032 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c032:	b510      	push	{r4, lr}
 801c034:	2104      	movs	r1, #4
 801c036:	4604      	mov	r4, r0
 801c038:	f008 febc 	bl	8024db4 <_ZdlPvj>
 801c03c:	4620      	mov	r0, r4
 801c03e:	bd10      	pop	{r4, pc}

0801c040 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c040:	b510      	push	{r4, lr}
 801c042:	2104      	movs	r1, #4
 801c044:	4604      	mov	r4, r0
 801c046:	f008 feb5 	bl	8024db4 <_ZdlPvj>
 801c04a:	4620      	mov	r0, r4
 801c04c:	bd10      	pop	{r4, pc}

0801c04e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c04e:	b510      	push	{r4, lr}
 801c050:	2104      	movs	r1, #4
 801c052:	4604      	mov	r4, r0
 801c054:	f008 feae 	bl	8024db4 <_ZdlPvj>
 801c058:	4620      	mov	r0, r4
 801c05a:	bd10      	pop	{r4, pc}

0801c05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c05c:	b510      	push	{r4, lr}
 801c05e:	2104      	movs	r1, #4
 801c060:	4604      	mov	r4, r0
 801c062:	f008 fea7 	bl	8024db4 <_ZdlPvj>
 801c066:	4620      	mov	r0, r4
 801c068:	bd10      	pop	{r4, pc}

0801c06a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c06a:	b510      	push	{r4, lr}
 801c06c:	2104      	movs	r1, #4
 801c06e:	4604      	mov	r4, r0
 801c070:	f008 fea0 	bl	8024db4 <_ZdlPvj>
 801c074:	4620      	mov	r0, r4
 801c076:	bd10      	pop	{r4, pc}

0801c078 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c07c:	460e      	mov	r6, r1
 801c07e:	b08b      	sub	sp, #44	; 0x2c
 801c080:	4615      	mov	r5, r2
 801c082:	461c      	mov	r4, r3
 801c084:	b323      	cbz	r3, 801c0d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c086:	4608      	mov	r0, r1
 801c088:	f7f8 fb3b 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c08c:	bb00      	cbnz	r0, 801c0d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c08e:	6830      	ldr	r0, [r6, #0]
 801c090:	6871      	ldr	r1, [r6, #4]
 801c092:	4e55      	ldr	r6, [pc, #340]	; (801c1e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801c094:	ab08      	add	r3, sp, #32
 801c096:	c303      	stmia	r3!, {r0, r1}
 801c098:	a808      	add	r0, sp, #32
 801c09a:	f7fb f88b 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c09e:	6830      	ldr	r0, [r6, #0]
 801c0a0:	6803      	ldr	r3, [r0, #0]
 801c0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0a4:	4798      	blx	r3
 801c0a6:	2cff      	cmp	r4, #255	; 0xff
 801c0a8:	d015      	beq.n	801c0d6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801c0aa:	f010 0f08 	tst.w	r0, #8
 801c0ae:	d015      	beq.n	801c0dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 801c0b0:	6830      	ldr	r0, [r6, #0]
 801c0b2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c0b6:	6801      	ldr	r1, [r0, #0]
 801c0b8:	9402      	str	r4, [sp, #8]
 801c0ba:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c0be:	9401      	str	r4, [sp, #4]
 801c0c0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c0c4:	9400      	str	r4, [sp, #0]
 801c0c6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c0c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c0cc:	4629      	mov	r1, r5
 801c0ce:	47a0      	blx	r4
 801c0d0:	b00b      	add	sp, #44	; 0x2c
 801c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0d6:	f010 0f02 	tst.w	r0, #2
 801c0da:	e7e8      	b.n	801c0ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c0dc:	6830      	ldr	r0, [r6, #0]
 801c0de:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c0e2:	6803      	ldr	r3, [r0, #0]
 801c0e4:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801c0e8:	6a1b      	ldr	r3, [r3, #32]
 801c0ea:	4798      	blx	r3
 801c0ec:	4a3f      	ldr	r2, [pc, #252]	; (801c1ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 801c0ee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c0f2:	8816      	ldrh	r6, [r2, #0]
 801c0f4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c0f8:	2cff      	cmp	r4, #255	; 0xff
 801c0fa:	fb06 1303 	mla	r3, r6, r3, r1
 801c0fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c102:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801c106:	4616      	mov	r6, r2
 801c108:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 801c10c:	d10a      	bne.n	801c124 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 801c10e:	0049      	lsls	r1, r1, #1
 801c110:	2200      	movs	r2, #0
 801c112:	454a      	cmp	r2, r9
 801c114:	da61      	bge.n	801c1da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 801c116:	2300      	movs	r3, #0
 801c118:	4543      	cmp	r3, r8
 801c11a:	da57      	bge.n	801c1cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x154>
 801c11c:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801c120:	3301      	adds	r3, #1
 801c122:	e7f9      	b.n	801c118 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 801c124:	0a2b      	lsrs	r3, r5, #8
 801c126:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 801c12a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c12e:	b2a4      	uxth	r4, r4
 801c130:	4363      	muls	r3, r4
 801c132:	9305      	str	r3, [sp, #20]
 801c134:	08ee      	lsrs	r6, r5, #3
 801c136:	00eb      	lsls	r3, r5, #3
 801c138:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c13c:	b2db      	uxtb	r3, r3
 801c13e:	0049      	lsls	r1, r1, #1
 801c140:	4366      	muls	r6, r4
 801c142:	4363      	muls	r3, r4
 801c144:	9106      	str	r1, [sp, #24]
 801c146:	f04f 0c00 	mov.w	ip, #0
 801c14a:	b2bf      	uxth	r7, r7
 801c14c:	9207      	str	r2, [sp, #28]
 801c14e:	45cc      	cmp	ip, r9
 801c150:	da43      	bge.n	801c1da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x162>
 801c152:	4682      	mov	sl, r0
 801c154:	f04f 0e00 	mov.w	lr, #0
 801c158:	45c6      	cmp	lr, r8
 801c15a:	da2d      	bge.n	801c1b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801c15c:	f8ba 2000 	ldrh.w	r2, [sl]
 801c160:	9905      	ldr	r1, [sp, #20]
 801c162:	1214      	asrs	r4, r2, #8
 801c164:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c168:	fb14 f407 	smulbb	r4, r4, r7
 801c16c:	440c      	add	r4, r1
 801c16e:	10d1      	asrs	r1, r2, #3
 801c170:	00d2      	lsls	r2, r2, #3
 801c172:	b2d2      	uxtb	r2, r2
 801c174:	fb12 f207 	smulbb	r2, r2, r7
 801c178:	b2a4      	uxth	r4, r4
 801c17a:	441a      	add	r2, r3
 801c17c:	b292      	uxth	r2, r2
 801c17e:	1c65      	adds	r5, r4, #1
 801c180:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c184:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801c188:	fb11 f107 	smulbb	r1, r1, r7
 801c18c:	1c55      	adds	r5, r2, #1
 801c18e:	4431      	add	r1, r6
 801c190:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c194:	b289      	uxth	r1, r1
 801c196:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c19a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c19e:	4314      	orrs	r4, r2
 801c1a0:	1c4a      	adds	r2, r1, #1
 801c1a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c1a6:	0949      	lsrs	r1, r1, #5
 801c1a8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c1ac:	430c      	orrs	r4, r1
 801c1ae:	f82a 4b02 	strh.w	r4, [sl], #2
 801c1b2:	f10e 0e01 	add.w	lr, lr, #1
 801c1b6:	e7cf      	b.n	801c158 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe0>
 801c1b8:	9a07      	ldr	r2, [sp, #28]
 801c1ba:	9906      	ldr	r1, [sp, #24]
 801c1bc:	8812      	ldrh	r2, [r2, #0]
 801c1be:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 801c1c2:	440a      	add	r2, r1
 801c1c4:	4410      	add	r0, r2
 801c1c6:	f10c 0c01 	add.w	ip, ip, #1
 801c1ca:	e7c0      	b.n	801c14e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd6>
 801c1cc:	8833      	ldrh	r3, [r6, #0]
 801c1ce:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 801c1d2:	440b      	add	r3, r1
 801c1d4:	4418      	add	r0, r3
 801c1d6:	3201      	adds	r2, #1
 801c1d8:	e79b      	b.n	801c112 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 801c1da:	4b03      	ldr	r3, [pc, #12]	; (801c1e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801c1dc:	6818      	ldr	r0, [r3, #0]
 801c1de:	6803      	ldr	r3, [r0, #0]
 801c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1e2:	4798      	blx	r3
 801c1e4:	e774      	b.n	801c0d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801c1e6:	bf00      	nop
 801c1e8:	20001358 	.word	0x20001358
 801c1ec:	20001350 	.word	0x20001350

0801c1f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1f4:	4d9b      	ldr	r5, [pc, #620]	; (801c464 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801c1f6:	4690      	mov	r8, r2
 801c1f8:	682a      	ldr	r2, [r5, #0]
 801c1fa:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c1fe:	2a02      	cmp	r2, #2
 801c200:	b08f      	sub	sp, #60	; 0x3c
 801c202:	4604      	mov	r4, r0
 801c204:	4689      	mov	r9, r1
 801c206:	d106      	bne.n	801c216 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c208:	4b97      	ldr	r3, [pc, #604]	; (801c468 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801c20a:	4a98      	ldr	r2, [pc, #608]	; (801c46c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c20c:	f240 21be 	movw	r1, #702	; 0x2be
 801c210:	4897      	ldr	r0, [pc, #604]	; (801c470 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c212:	f008 fdfb 	bl	8024e0c <__assert_func>
 801c216:	ae0e      	add	r6, sp, #56	; 0x38
 801c218:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801c21c:	4630      	mov	r0, r6
 801c21e:	f7fd fae3 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c222:	6823      	ldr	r3, [r4, #0]
 801c224:	4607      	mov	r7, r0
 801c226:	6a1b      	ldr	r3, [r3, #32]
 801c228:	4620      	mov	r0, r4
 801c22a:	4798      	blx	r3
 801c22c:	4287      	cmp	r7, r0
 801c22e:	d004      	beq.n	801c23a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c230:	4b90      	ldr	r3, [pc, #576]	; (801c474 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c232:	4a8e      	ldr	r2, [pc, #568]	; (801c46c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c234:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 801c238:	e7ea      	b.n	801c210 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c23a:	4630      	mov	r0, r6
 801c23c:	f7fd fa50 	bl	80196e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c240:	4607      	mov	r7, r0
 801c242:	b920      	cbnz	r0, 801c24e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c244:	4b8c      	ldr	r3, [pc, #560]	; (801c478 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c246:	4a89      	ldr	r2, [pc, #548]	; (801c46c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c248:	f240 21c2 	movw	r1, #706	; 0x2c2
 801c24c:	e7e0      	b.n	801c210 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c24e:	f8d8 0000 	ldr.w	r0, [r8]
 801c252:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c256:	f9b8 a000 	ldrsh.w	sl, [r8]
 801c25a:	ab06      	add	r3, sp, #24
 801c25c:	c303      	stmia	r3!, {r0, r1}
 801c25e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c262:	f8d9 0000 	ldr.w	r0, [r9]
 801c266:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801c26a:	ab08      	add	r3, sp, #32
 801c26c:	c303      	stmia	r3!, {r0, r1}
 801c26e:	4630      	mov	r0, r6
 801c270:	f7fd f92e 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c274:	4680      	mov	r8, r0
 801c276:	4630      	mov	r0, r6
 801c278:	f7fd f964 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c27c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c280:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c284:	f10d 0920 	add.w	r9, sp, #32
 801c288:	a806      	add	r0, sp, #24
 801c28a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c28e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801c292:	f7fa ff8f 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c296:	4648      	mov	r0, r9
 801c298:	f7fa ff8c 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c29c:	a80a      	add	r0, sp, #40	; 0x28
 801c29e:	f7fa ff89 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c2a2:	4e76      	ldr	r6, [pc, #472]	; (801c47c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801c2a4:	4b76      	ldr	r3, [pc, #472]	; (801c480 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c2a6:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c2aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c2ae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c2b2:	2100      	movs	r1, #0
 801c2b4:	910c      	str	r1, [sp, #48]	; 0x30
 801c2b6:	4648      	mov	r0, r9
 801c2b8:	a90c      	add	r1, sp, #48	; 0x30
 801c2ba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c2be:	f7f8 f9dd 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 801c2c2:	4648      	mov	r0, r9
 801c2c4:	f7f8 fa1d 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2c8:	2800      	cmp	r0, #0
 801c2ca:	f040 80bd 	bne.w	801c448 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c2ce:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c2d2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c2d6:	4288      	cmp	r0, r1
 801c2d8:	db37      	blt.n	801c34a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c2da:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c2de:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	db31      	blt.n	801c34a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c2e6:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801c2ea:	4460      	add	r0, ip
 801c2ec:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801c2f0:	4461      	add	r1, ip
 801c2f2:	b200      	sxth	r0, r0
 801c2f4:	b209      	sxth	r1, r1
 801c2f6:	4288      	cmp	r0, r1
 801c2f8:	dc27      	bgt.n	801c34a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c2fa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c2fe:	440a      	add	r2, r1
 801c300:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801c304:	440b      	add	r3, r1
 801c306:	b212      	sxth	r2, r2
 801c308:	b21b      	sxth	r3, r3
 801c30a:	429a      	cmp	r2, r3
 801c30c:	dc1d      	bgt.n	801c34a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801c30e:	6823      	ldr	r3, [r4, #0]
 801c310:	4620      	mov	r0, r4
 801c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c314:	4798      	blx	r3
 801c316:	4682      	mov	sl, r0
 801c318:	6828      	ldr	r0, [r5, #0]
 801c31a:	6803      	ldr	r3, [r0, #0]
 801c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c31e:	4798      	blx	r3
 801c320:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c324:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c328:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801c32c:	1a9b      	subs	r3, r3, r2
 801c32e:	b29b      	uxth	r3, r3
 801c330:	b21c      	sxth	r4, r3
 801c332:	2c00      	cmp	r4, #0
 801c334:	dc0e      	bgt.n	801c354 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c336:	bf1f      	itttt	ne
 801c338:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801c33c:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801c340:	189b      	addne	r3, r3, r2
 801c342:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801c346:	463c      	mov	r4, r7
 801c348:	e00a      	b.n	801c360 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 801c34a:	4b4e      	ldr	r3, [pc, #312]	; (801c484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801c34c:	4a47      	ldr	r2, [pc, #284]	; (801c46c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c34e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801c352:	e75d      	b.n	801c210 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c354:	ebab 0303 	sub.w	r3, fp, r3
 801c358:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801c35c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c360:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c364:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c368:	1a5b      	subs	r3, r3, r1
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	b21a      	sxth	r2, r3
 801c36e:	2a00      	cmp	r2, #0
 801c370:	dd4a      	ble.n	801c408 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 801c372:	fb02 f20b 	mul.w	r2, r2, fp
 801c376:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801c37a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801c37e:	1ad3      	subs	r3, r2, r3
 801c380:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c384:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801c388:	2b00      	cmp	r3, #0
 801c38a:	dd5d      	ble.n	801c448 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c38c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801c390:	f1bc 0f00 	cmp.w	ip, #0
 801c394:	dd58      	ble.n	801c448 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c396:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801c39a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c39e:	fb0a f801 	mul.w	r8, sl, r1
 801c3a2:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c3a6:	4480      	add	r8, r0
 801c3a8:	8830      	ldrh	r0, [r6, #0]
 801c3aa:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801c3ae:	42b3      	cmp	r3, r6
 801c3b0:	bfa8      	it	ge
 801c3b2:	4633      	movge	r3, r6
 801c3b4:	1a82      	subs	r2, r0, r2
 801c3b6:	4293      	cmp	r3, r2
 801c3b8:	bfa8      	it	ge
 801c3ba:	4613      	movge	r3, r2
 801c3bc:	4a30      	ldr	r2, [pc, #192]	; (801c480 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c3be:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801c3c2:	8812      	ldrh	r2, [r2, #0]
 801c3c4:	4566      	cmp	r6, ip
 801c3c6:	eba2 0101 	sub.w	r1, r2, r1
 801c3ca:	bfa8      	it	ge
 801c3cc:	4666      	movge	r6, ip
 801c3ce:	428e      	cmp	r6, r1
 801c3d0:	4632      	mov	r2, r6
 801c3d2:	bfa8      	it	ge
 801c3d4:	460a      	movge	r2, r1
 801c3d6:	4298      	cmp	r0, r3
 801c3d8:	9202      	str	r2, [sp, #8]
 801c3da:	d01e      	beq.n	801c41a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 801c3dc:	005b      	lsls	r3, r3, #1
 801c3de:	9303      	str	r3, [sp, #12]
 801c3e0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801c3e4:	f04f 0900 	mov.w	r9, #0
 801c3e8:	9b02      	ldr	r3, [sp, #8]
 801c3ea:	454b      	cmp	r3, r9
 801c3ec:	dd2c      	ble.n	801c448 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c3ee:	6828      	ldr	r0, [r5, #0]
 801c3f0:	6803      	ldr	r3, [r0, #0]
 801c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3f4:	4642      	mov	r2, r8
 801c3f6:	461e      	mov	r6, r3
 801c3f8:	4621      	mov	r1, r4
 801c3fa:	9b03      	ldr	r3, [sp, #12]
 801c3fc:	47b0      	blx	r6
 801c3fe:	44d0      	add	r8, sl
 801c400:	445c      	add	r4, fp
 801c402:	f109 0901 	add.w	r9, r9, #1
 801c406:	e7ef      	b.n	801c3e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 801c408:	bf1f      	itttt	ne
 801c40a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801c40e:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 801c412:	189b      	addne	r3, r3, r2
 801c414:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801c418:	e7b4      	b.n	801c384 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 801c41a:	4558      	cmp	r0, fp
 801c41c:	d1de      	bne.n	801c3dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 801c41e:	6828      	ldr	r0, [r5, #0]
 801c420:	6803      	ldr	r3, [r0, #0]
 801c422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c424:	4798      	blx	r3
 801c426:	07c3      	lsls	r3, r0, #31
 801c428:	d512      	bpl.n	801c450 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 801c42a:	6828      	ldr	r0, [r5, #0]
 801c42c:	9b02      	ldr	r3, [sp, #8]
 801c42e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801c432:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c436:	6803      	ldr	r3, [r0, #0]
 801c438:	f8cd b000 	str.w	fp, [sp]
 801c43c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801c43e:	e899 0006 	ldmia.w	r9, {r1, r2}
 801c442:	4623      	mov	r3, r4
 801c444:	47a8      	blx	r5
 801c446:	4607      	mov	r7, r0
 801c448:	4638      	mov	r0, r7
 801c44a:	b00f      	add	sp, #60	; 0x3c
 801c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c450:	6828      	ldr	r0, [r5, #0]
 801c452:	6803      	ldr	r3, [r0, #0]
 801c454:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801c456:	9b02      	ldr	r3, [sp, #8]
 801c458:	4642      	mov	r2, r8
 801c45a:	fb03 f30a 	mul.w	r3, r3, sl
 801c45e:	4621      	mov	r1, r4
 801c460:	47a8      	blx	r5
 801c462:	e7f1      	b.n	801c448 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801c464:	20001358 	.word	0x20001358
 801c468:	080542be 	.word	0x080542be
 801c46c:	08054afb 	.word	0x08054afb
 801c470:	08054370 	.word	0x08054370
 801c474:	080543a2 	.word	0x080543a2
 801c478:	080543f7 	.word	0x080543f7
 801c47c:	20001350 	.word	0x20001350
 801c480:	20001352 	.word	0x20001352
 801c484:	08054435 	.word	0x08054435

0801c488 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c488:	2200      	movs	r2, #0
 801c48a:	4910      	ldr	r1, [pc, #64]	; (801c4cc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c48c:	6042      	str	r2, [r0, #4]
 801c48e:	6001      	str	r1, [r0, #0]
 801c490:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c494:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c498:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c49c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c4a0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c4a4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c4a8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c4ac:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c4b0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c4b4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c4b8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c4bc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c4c0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c4c4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c4c8:	4770      	bx	lr
 801c4ca:	bf00      	nop
 801c4cc:	08054778 	.word	0x08054778

0801c4d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d4:	460c      	mov	r4, r1
 801c4d6:	b08d      	sub	sp, #52	; 0x34
 801c4d8:	4682      	mov	sl, r0
 801c4da:	6808      	ldr	r0, [r1, #0]
 801c4dc:	6849      	ldr	r1, [r1, #4]
 801c4de:	469b      	mov	fp, r3
 801c4e0:	ab08      	add	r3, sp, #32
 801c4e2:	c303      	stmia	r3!, {r0, r1}
 801c4e4:	6810      	ldr	r0, [r2, #0]
 801c4e6:	6851      	ldr	r1, [r2, #4]
 801c4e8:	ab0a      	add	r3, sp, #40	; 0x28
 801c4ea:	c303      	stmia	r3!, {r0, r1}
 801c4ec:	a808      	add	r0, sp, #32
 801c4ee:	f7fa fe61 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4f2:	4621      	mov	r1, r4
 801c4f4:	a80a      	add	r0, sp, #40	; 0x28
 801c4f6:	f7fa fe45 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4fa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c4fe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c502:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c506:	4c60      	ldr	r4, [pc, #384]	; (801c688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801c508:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c50c:	6820      	ldr	r0, [r4, #0]
 801c50e:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 801c512:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c516:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 801c51a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c51e:	440a      	add	r2, r1
 801c520:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c524:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c528:	4413      	add	r3, r2
 801c52a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c52e:	6803      	ldr	r3, [r0, #0]
 801c530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c532:	4798      	blx	r3
 801c534:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c538:	d119      	bne.n	801c56e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c53a:	f010 0f20 	tst.w	r0, #32
 801c53e:	6820      	ldr	r0, [r4, #0]
 801c540:	d018      	beq.n	801c574 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c542:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801c546:	6801      	ldr	r1, [r0, #0]
 801c548:	9402      	str	r4, [sp, #8]
 801c54a:	fa1f f489 	uxth.w	r4, r9
 801c54e:	9401      	str	r4, [sp, #4]
 801c550:	fa1f f488 	uxth.w	r4, r8
 801c554:	f8cd b00c 	str.w	fp, [sp, #12]
 801c558:	9400      	str	r4, [sp, #0]
 801c55a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c55c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c560:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c564:	4651      	mov	r1, sl
 801c566:	47a0      	blx	r4
 801c568:	b00d      	add	sp, #52	; 0x34
 801c56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c56e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c572:	e7e4      	b.n	801c53e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c574:	6803      	ldr	r3, [r0, #0]
 801c576:	6a1b      	ldr	r3, [r3, #32]
 801c578:	4798      	blx	r3
 801c57a:	4a44      	ldr	r2, [pc, #272]	; (801c68c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801c57c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c580:	8813      	ldrh	r3, [r2, #0]
 801c582:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 801c586:	9207      	str	r2, [sp, #28]
 801c588:	fb04 1303 	mla	r3, r4, r3, r1
 801c58c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c590:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 801c594:	0099      	lsls	r1, r3, #2
 801c596:	005b      	lsls	r3, r3, #1
 801c598:	9106      	str	r1, [sp, #24]
 801c59a:	9305      	str	r3, [sp, #20]
 801c59c:	f04f 0c00 	mov.w	ip, #0
 801c5a0:	45cc      	cmp	ip, r9
 801c5a2:	da6b      	bge.n	801c67c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	4543      	cmp	r3, r8
 801c5a8:	da55      	bge.n	801c656 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 801c5aa:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801c5ae:	0e25      	lsrs	r5, r4, #24
 801c5b0:	d013      	beq.n	801c5da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c5b2:	2dff      	cmp	r5, #255	; 0xff
 801c5b4:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801c5b8:	d111      	bne.n	801c5de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801c5ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c5be:	d10e      	bne.n	801c5de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801c5c0:	0962      	lsrs	r2, r4, #5
 801c5c2:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801c5c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c5ca:	f027 0707 	bic.w	r7, r7, #7
 801c5ce:	4317      	orrs	r7, r2
 801c5d0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c5d4:	433c      	orrs	r4, r7
 801c5d6:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 801c5da:	3301      	adds	r3, #1
 801c5dc:	e7e3      	b.n	801c5a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801c5de:	fb0b f505 	mul.w	r5, fp, r5
 801c5e2:	1c6a      	adds	r2, r5, #1
 801c5e4:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 801c5e8:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801c5ec:	1212      	asrs	r2, r2, #8
 801c5ee:	fa1f fe82 	uxth.w	lr, r2
 801c5f2:	120e      	asrs	r6, r1, #8
 801c5f4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801c5f8:	43d2      	mvns	r2, r2
 801c5fa:	b2d2      	uxtb	r2, r2
 801c5fc:	fb15 f50e 	smulbb	r5, r5, lr
 801c600:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c604:	fb06 5602 	mla	r6, r6, r2, r5
 801c608:	b2e4      	uxtb	r4, r4
 801c60a:	10cd      	asrs	r5, r1, #3
 801c60c:	00c9      	lsls	r1, r1, #3
 801c60e:	b2c9      	uxtb	r1, r1
 801c610:	fb14 f40e 	smulbb	r4, r4, lr
 801c614:	fb01 4402 	mla	r4, r1, r2, r4
 801c618:	b2ff      	uxtb	r7, r7
 801c61a:	b2b6      	uxth	r6, r6
 801c61c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c620:	b2a4      	uxth	r4, r4
 801c622:	fb17 f70e 	smulbb	r7, r7, lr
 801c626:	fb05 7702 	mla	r7, r5, r2, r7
 801c62a:	1c72      	adds	r2, r6, #1
 801c62c:	1c65      	adds	r5, r4, #1
 801c62e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c632:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801c636:	b2bf      	uxth	r7, r7
 801c638:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c63c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c640:	432e      	orrs	r6, r5
 801c642:	1c7d      	adds	r5, r7, #1
 801c644:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801c648:	097f      	lsrs	r7, r7, #5
 801c64a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c64e:	433e      	orrs	r6, r7
 801c650:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 801c654:	e7c1      	b.n	801c5da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c656:	9b07      	ldr	r3, [sp, #28]
 801c658:	9a05      	ldr	r2, [sp, #20]
 801c65a:	881b      	ldrh	r3, [r3, #0]
 801c65c:	eba3 0308 	sub.w	r3, r3, r8
 801c660:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c664:	4418      	add	r0, r3
 801c666:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c66a:	9a06      	ldr	r2, [sp, #24]
 801c66c:	eba3 0308 	sub.w	r3, r3, r8
 801c670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c674:	449a      	add	sl, r3
 801c676:	f10c 0c01 	add.w	ip, ip, #1
 801c67a:	e791      	b.n	801c5a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801c67c:	4b02      	ldr	r3, [pc, #8]	; (801c688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801c67e:	6818      	ldr	r0, [r3, #0]
 801c680:	6803      	ldr	r3, [r0, #0]
 801c682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c684:	4798      	blx	r3
 801c686:	e76f      	b.n	801c568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801c688:	20001358 	.word	0x20001358
 801c68c:	20001350 	.word	0x20001350

0801c690 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c690:	b570      	push	{r4, r5, r6, lr}
 801c692:	9d04      	ldr	r5, [sp, #16]
 801c694:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801c698:	460c      	mov	r4, r1
 801c69a:	4619      	mov	r1, r3
 801c69c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c6a0:	2a0c      	cmp	r2, #12
 801c6a2:	d820      	bhi.n	801c6e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801c6a4:	e8df f002 	tbb	[pc, r2]
 801c6a8:	18121807 	.word	0x18121807
 801c6ac:	18181818 	.word	0x18181818
 801c6b0:	18181818 	.word	0x18181818
 801c6b4:	18          	.byte	0x18
 801c6b5:	00          	.byte	0x00
 801c6b6:	6802      	ldr	r2, [r0, #0]
 801c6b8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c6bc:	68d6      	ldr	r6, [r2, #12]
 801c6be:	462b      	mov	r3, r5
 801c6c0:	460a      	mov	r2, r1
 801c6c2:	46b4      	mov	ip, r6
 801c6c4:	4621      	mov	r1, r4
 801c6c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6ca:	4760      	bx	ip
 801c6cc:	462a      	mov	r2, r5
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6d4:	f7ff befc 	b.w	801c4d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c6d8:	4b03      	ldr	r3, [pc, #12]	; (801c6e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801c6da:	4a04      	ldr	r2, [pc, #16]	; (801c6ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801c6dc:	4804      	ldr	r0, [pc, #16]	; (801c6f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801c6de:	f240 21b7 	movw	r1, #695	; 0x2b7
 801c6e2:	f008 fb93 	bl	8024e0c <__assert_func>
 801c6e6:	bd70      	pop	{r4, r5, r6, pc}
 801c6e8:	08054495 	.word	0x08054495
 801c6ec:	08054b81 	.word	0x08054b81
 801c6f0:	08054370 	.word	0x08054370

0801c6f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f8:	b093      	sub	sp, #76	; 0x4c
 801c6fa:	880f      	ldrh	r7, [r1, #0]
 801c6fc:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801c700:	4681      	mov	r9, r0
 801c702:	4688      	mov	r8, r1
 801c704:	4615      	mov	r5, r2
 801c706:	b12f      	cbz	r7, 801c714 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801c708:	4b71      	ldr	r3, [pc, #452]	; (801c8d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801c70a:	4a72      	ldr	r2, [pc, #456]	; (801c8d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801c70c:	4872      	ldr	r0, [pc, #456]	; (801c8d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801c70e:	21e8      	movs	r1, #232	; 0xe8
 801c710:	f008 fb7c 	bl	8024e0c <__assert_func>
 801c714:	6810      	ldr	r0, [r2, #0]
 801c716:	6851      	ldr	r1, [r2, #4]
 801c718:	ac0e      	add	r4, sp, #56	; 0x38
 801c71a:	c403      	stmia	r4!, {r0, r1}
 801c71c:	6818      	ldr	r0, [r3, #0]
 801c71e:	6859      	ldr	r1, [r3, #4]
 801c720:	ac10      	add	r4, sp, #64	; 0x40
 801c722:	c403      	stmia	r4!, {r0, r1}
 801c724:	a80e      	add	r0, sp, #56	; 0x38
 801c726:	f7fa fd45 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c72a:	4629      	mov	r1, r5
 801c72c:	a810      	add	r0, sp, #64	; 0x40
 801c72e:	f7fa fd29 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c732:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c736:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c73a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c73e:	4d67      	ldr	r5, [pc, #412]	; (801c8dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801c740:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c744:	6828      	ldr	r0, [r5, #0]
 801c746:	4c66      	ldr	r4, [pc, #408]	; (801c8e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801c748:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c74c:	4489      	add	r9, r1
 801c74e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c752:	440a      	add	r2, r1
 801c754:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c758:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c75c:	4413      	add	r3, r2
 801c75e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c762:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801c766:	930a      	str	r3, [sp, #40]	; 0x28
 801c768:	6803      	ldr	r3, [r0, #0]
 801c76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c76e:	4798      	blx	r3
 801c770:	2801      	cmp	r0, #1
 801c772:	d11d      	bne.n	801c7b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 801c774:	220b      	movs	r2, #11
 801c776:	9708      	str	r7, [sp, #32]
 801c778:	9207      	str	r2, [sp, #28]
 801c77a:	8822      	ldrh	r2, [r4, #0]
 801c77c:	f8cd a010 	str.w	sl, [sp, #16]
 801c780:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801c784:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c788:	9203      	str	r2, [sp, #12]
 801c78a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c78e:	9202      	str	r2, [sp, #8]
 801c790:	fa1f f28b 	uxth.w	r2, fp
 801c794:	9201      	str	r2, [sp, #4]
 801c796:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c79a:	9200      	str	r2, [sp, #0]
 801c79c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c7a0:	6828      	ldr	r0, [r5, #0]
 801c7a2:	4642      	mov	r2, r8
 801c7a4:	4649      	mov	r1, r9
 801c7a6:	f7f8 fec7 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c7aa:	b013      	add	sp, #76	; 0x4c
 801c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7b0:	6828      	ldr	r0, [r5, #0]
 801c7b2:	6803      	ldr	r3, [r0, #0]
 801c7b4:	6a1b      	ldr	r3, [r3, #32]
 801c7b6:	4798      	blx	r3
 801c7b8:	8823      	ldrh	r3, [r4, #0]
 801c7ba:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c7be:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c7c2:	fb01 2303 	mla	r3, r1, r3, r2
 801c7c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c7ca:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801c7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801c7d0:	005b      	lsls	r3, r3, #1
 801c7d2:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801c7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7d8:	429f      	cmp	r7, r3
 801c7da:	da72      	bge.n	801c8c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 801c7dc:	2100      	movs	r1, #0
 801c7de:	4559      	cmp	r1, fp
 801c7e0:	da5e      	bge.n	801c8a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c7e2:	f819 3001 	ldrb.w	r3, [r9, r1]
 801c7e6:	2204      	movs	r2, #4
 801c7e8:	fb12 2303 	smlabb	r3, r2, r3, r2
 801c7ec:	f858 2003 	ldr.w	r2, [r8, r3]
 801c7f0:	0e15      	lsrs	r5, r2, #24
 801c7f2:	d013      	beq.n	801c81c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c7f4:	2dff      	cmp	r5, #255	; 0xff
 801c7f6:	ea4f 2412 	mov.w	r4, r2, lsr #8
 801c7fa:	d111      	bne.n	801c820 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c7fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c800:	d10e      	bne.n	801c820 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c802:	0953      	lsrs	r3, r2, #5
 801c804:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 801c808:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c80c:	f024 0407 	bic.w	r4, r4, #7
 801c810:	431c      	orrs	r4, r3
 801c812:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c816:	4314      	orrs	r4, r2
 801c818:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 801c81c:	3101      	adds	r1, #1
 801c81e:	e7de      	b.n	801c7de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 801c820:	fb0a f505 	mul.w	r5, sl, r5
 801c824:	1c6b      	adds	r3, r5, #1
 801c826:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801c82a:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801c82e:	121b      	asrs	r3, r3, #8
 801c830:	fa1f fe83 	uxth.w	lr, r3
 801c834:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c838:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801c83c:	43db      	mvns	r3, r3
 801c83e:	b2db      	uxtb	r3, r3
 801c840:	fb15 f50e 	smulbb	r5, r5, lr
 801c844:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c848:	fb06 5603 	mla	r6, r6, r3, r5
 801c84c:	b2d2      	uxtb	r2, r2
 801c84e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c852:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c856:	fa5f fc8c 	uxtb.w	ip, ip
 801c85a:	fb12 f20e 	smulbb	r2, r2, lr
 801c85e:	fb0c 2203 	mla	r2, ip, r3, r2
 801c862:	b2e4      	uxtb	r4, r4
 801c864:	b2b6      	uxth	r6, r6
 801c866:	fb14 f40e 	smulbb	r4, r4, lr
 801c86a:	b292      	uxth	r2, r2
 801c86c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c870:	fb05 4503 	mla	r5, r5, r3, r4
 801c874:	1c73      	adds	r3, r6, #1
 801c876:	1c54      	adds	r4, r2, #1
 801c878:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c87c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801c880:	b2ad      	uxth	r5, r5
 801c882:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c886:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c88a:	4326      	orrs	r6, r4
 801c88c:	1c6c      	adds	r4, r5, #1
 801c88e:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 801c892:	0964      	lsrs	r4, r4, #5
 801c894:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c898:	4326      	orrs	r6, r4
 801c89a:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 801c89e:	e7bd      	b.n	801c81c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c8a4:	881b      	ldrh	r3, [r3, #0]
 801c8a6:	eba3 030b 	sub.w	r3, r3, fp
 801c8aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c8ae:	4418      	add	r0, r3
 801c8b0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801c8b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c8b6:	eba3 030b 	sub.w	r3, r3, fp
 801c8ba:	4413      	add	r3, r2
 801c8bc:	4499      	add	r9, r3
 801c8be:	3701      	adds	r7, #1
 801c8c0:	e789      	b.n	801c7d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801c8c2:	4b06      	ldr	r3, [pc, #24]	; (801c8dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801c8c4:	6818      	ldr	r0, [r3, #0]
 801c8c6:	6803      	ldr	r3, [r0, #0]
 801c8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8ca:	4798      	blx	r3
 801c8cc:	e76d      	b.n	801c7aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 801c8ce:	bf00      	nop
 801c8d0:	0805426e 	.word	0x0805426e
 801c8d4:	08054952 	.word	0x08054952
 801c8d8:	08054370 	.word	0x08054370
 801c8dc:	20001358 	.word	0x20001358
 801c8e0:	20001350 	.word	0x20001350

0801c8e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e8:	4614      	mov	r4, r2
 801c8ea:	880a      	ldrh	r2, [r1, #0]
 801c8ec:	b093      	sub	sp, #76	; 0x4c
 801c8ee:	2a02      	cmp	r2, #2
 801c8f0:	4606      	mov	r6, r0
 801c8f2:	4689      	mov	r9, r1
 801c8f4:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 801c8f8:	d006      	beq.n	801c908 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801c8fa:	4b7a      	ldr	r3, [pc, #488]	; (801cae4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801c8fc:	4a7a      	ldr	r2, [pc, #488]	; (801cae8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801c8fe:	487b      	ldr	r0, [pc, #492]	; (801caec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801c900:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801c904:	f008 fa82 	bl	8024e0c <__assert_func>
 801c908:	2f00      	cmp	r7, #0
 801c90a:	d04b      	beq.n	801c9a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801c90c:	6820      	ldr	r0, [r4, #0]
 801c90e:	6861      	ldr	r1, [r4, #4]
 801c910:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 801caf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 801c914:	ad0e      	add	r5, sp, #56	; 0x38
 801c916:	c503      	stmia	r5!, {r0, r1}
 801c918:	6818      	ldr	r0, [r3, #0]
 801c91a:	6859      	ldr	r1, [r3, #4]
 801c91c:	ad10      	add	r5, sp, #64	; 0x40
 801c91e:	c503      	stmia	r5!, {r0, r1}
 801c920:	a80e      	add	r0, sp, #56	; 0x38
 801c922:	f7fa fc47 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c926:	4621      	mov	r1, r4
 801c928:	a810      	add	r0, sp, #64	; 0x40
 801c92a:	f7fa fc2b 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c92e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c932:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c936:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c93a:	f8da 0000 	ldr.w	r0, [sl]
 801c93e:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801c942:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 801c946:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c94a:	1874      	adds	r4, r6, r1
 801c94c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c950:	4e67      	ldr	r6, [pc, #412]	; (801caf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 801c952:	440a      	add	r2, r1
 801c954:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c958:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c95c:	4413      	add	r3, r2
 801c95e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c962:	6803      	ldr	r3, [r0, #0]
 801c964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c968:	4798      	blx	r3
 801c96a:	2801      	cmp	r0, #1
 801c96c:	d11d      	bne.n	801c9aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801c96e:	2200      	movs	r2, #0
 801c970:	210b      	movs	r1, #11
 801c972:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801c976:	8831      	ldrh	r1, [r6, #0]
 801c978:	9704      	str	r7, [sp, #16]
 801c97a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c97e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c982:	9203      	str	r2, [sp, #12]
 801c984:	fa1f f288 	uxth.w	r2, r8
 801c988:	9202      	str	r2, [sp, #8]
 801c98a:	b2ad      	uxth	r5, r5
 801c98c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c990:	9200      	str	r2, [sp, #0]
 801c992:	9501      	str	r5, [sp, #4]
 801c994:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c998:	f8da 0000 	ldr.w	r0, [sl]
 801c99c:	464a      	mov	r2, r9
 801c99e:	4621      	mov	r1, r4
 801c9a0:	f7f8 fdca 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c9a4:	b013      	add	sp, #76	; 0x4c
 801c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9aa:	f8da 0000 	ldr.w	r0, [sl]
 801c9ae:	6803      	ldr	r3, [r0, #0]
 801c9b0:	6a1b      	ldr	r3, [r3, #32]
 801c9b2:	4798      	blx	r3
 801c9b4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c9b8:	8833      	ldrh	r3, [r6, #0]
 801c9ba:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c9be:	fb01 2303 	mla	r3, r1, r3, r2
 801c9c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c9c6:	2fff      	cmp	r7, #255	; 0xff
 801c9c8:	f109 0304 	add.w	r3, r9, #4
 801c9cc:	930a      	str	r3, [sp, #40]	; 0x28
 801c9ce:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801c9d2:	d111      	bne.n	801c9f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 801c9d4:	b212      	sxth	r2, r2
 801c9d6:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 801c9da:	2100      	movs	r1, #0
 801c9dc:	4541      	cmp	r1, r8
 801c9de:	da7a      	bge.n	801cad6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	42ab      	cmp	r3, r5
 801c9e4:	da6b      	bge.n	801cabe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 801c9e6:	f814 c003 	ldrb.w	ip, [r4, r3]
 801c9ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c9ec:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 801c9f0:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 801c9f4:	3301      	adds	r3, #1
 801c9f6:	e7f4      	b.n	801c9e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 801c9f8:	b213      	sxth	r3, r2
 801c9fa:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c9fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca00:	005b      	lsls	r3, r3, #1
 801ca02:	930c      	str	r3, [sp, #48]	; 0x30
 801ca04:	f04f 0900 	mov.w	r9, #0
 801ca08:	b2ba      	uxth	r2, r7
 801ca0a:	fa1f fc8c 	uxth.w	ip, ip
 801ca0e:	960d      	str	r6, [sp, #52]	; 0x34
 801ca10:	45c1      	cmp	r9, r8
 801ca12:	da60      	bge.n	801cad6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801ca14:	46a3      	mov	fp, r4
 801ca16:	4682      	mov	sl, r0
 801ca18:	ebab 0304 	sub.w	r3, fp, r4
 801ca1c:	429d      	cmp	r5, r3
 801ca1e:	dd3e      	ble.n	801ca9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 801ca20:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801ca24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ca26:	f8ba 1000 	ldrh.w	r1, [sl]
 801ca2a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ca2e:	120e      	asrs	r6, r1, #8
 801ca30:	121f      	asrs	r7, r3, #8
 801ca32:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ca36:	fb16 f60c 	smulbb	r6, r6, ip
 801ca3a:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 801ca3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca42:	00c9      	lsls	r1, r1, #3
 801ca44:	fb07 6702 	mla	r7, r7, r2, r6
 801ca48:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ca4c:	10de      	asrs	r6, r3, #3
 801ca4e:	b2c9      	uxtb	r1, r1
 801ca50:	00db      	lsls	r3, r3, #3
 801ca52:	fb1e fe0c 	smulbb	lr, lr, ip
 801ca56:	fb11 f10c 	smulbb	r1, r1, ip
 801ca5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ca5e:	b2db      	uxtb	r3, r3
 801ca60:	b2bf      	uxth	r7, r7
 801ca62:	fb06 e602 	mla	r6, r6, r2, lr
 801ca66:	fb03 1302 	mla	r3, r3, r2, r1
 801ca6a:	b2b6      	uxth	r6, r6
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	1c79      	adds	r1, r7, #1
 801ca70:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ca74:	f106 0e01 	add.w	lr, r6, #1
 801ca78:	1c59      	adds	r1, r3, #1
 801ca7a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ca7e:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801ca82:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ca86:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801ca8a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ca8e:	430f      	orrs	r7, r1
 801ca90:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801ca94:	ea47 070e 	orr.w	r7, r7, lr
 801ca98:	f82a 7b02 	strh.w	r7, [sl], #2
 801ca9c:	e7bc      	b.n	801ca18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 801ca9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801caa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801caa2:	881b      	ldrh	r3, [r3, #0]
 801caa4:	1b5b      	subs	r3, r3, r5
 801caa6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801caaa:	4418      	add	r0, r3
 801caac:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cab2:	1b5b      	subs	r3, r3, r5
 801cab4:	440b      	add	r3, r1
 801cab6:	441c      	add	r4, r3
 801cab8:	f109 0901 	add.w	r9, r9, #1
 801cabc:	e7a8      	b.n	801ca10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 801cabe:	8833      	ldrh	r3, [r6, #0]
 801cac0:	1b5b      	subs	r3, r3, r5
 801cac2:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801cac6:	4418      	add	r0, r3
 801cac8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cacc:	1b5b      	subs	r3, r3, r5
 801cace:	4413      	add	r3, r2
 801cad0:	441c      	add	r4, r3
 801cad2:	3101      	adds	r1, #1
 801cad4:	e782      	b.n	801c9dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 801cad6:	4b07      	ldr	r3, [pc, #28]	; (801caf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 801cad8:	6818      	ldr	r0, [r3, #0]
 801cada:	6803      	ldr	r3, [r0, #0]
 801cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cade:	4798      	blx	r3
 801cae0:	e760      	b.n	801c9a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801cae2:	bf00      	nop
 801cae4:	0805412c 	.word	0x0805412c
 801cae8:	080547bc 	.word	0x080547bc
 801caec:	08054370 	.word	0x08054370
 801caf0:	20001350 	.word	0x20001350
 801caf4:	20001358 	.word	0x20001358

0801caf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cafc:	4616      	mov	r6, r2
 801cafe:	880a      	ldrh	r2, [r1, #0]
 801cb00:	b093      	sub	sp, #76	; 0x4c
 801cb02:	2a01      	cmp	r2, #1
 801cb04:	4681      	mov	r9, r0
 801cb06:	4688      	mov	r8, r1
 801cb08:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801cb0c:	d006      	beq.n	801cb1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801cb0e:	4b6c      	ldr	r3, [pc, #432]	; (801ccc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cb10:	4a6c      	ldr	r2, [pc, #432]	; (801ccc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801cb12:	486d      	ldr	r0, [pc, #436]	; (801ccc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801cb14:	f240 119d 	movw	r1, #413	; 0x19d
 801cb18:	f008 f978 	bl	8024e0c <__assert_func>
 801cb1c:	f1ba 0f00 	cmp.w	sl, #0
 801cb20:	d04a      	beq.n	801cbb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cb22:	6830      	ldr	r0, [r6, #0]
 801cb24:	6871      	ldr	r1, [r6, #4]
 801cb26:	4d69      	ldr	r5, [pc, #420]	; (801cccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801cb28:	ac0e      	add	r4, sp, #56	; 0x38
 801cb2a:	c403      	stmia	r4!, {r0, r1}
 801cb2c:	6818      	ldr	r0, [r3, #0]
 801cb2e:	6859      	ldr	r1, [r3, #4]
 801cb30:	ac10      	add	r4, sp, #64	; 0x40
 801cb32:	c403      	stmia	r4!, {r0, r1}
 801cb34:	a80e      	add	r0, sp, #56	; 0x38
 801cb36:	f7fa fb3d 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cb3a:	4631      	mov	r1, r6
 801cb3c:	a810      	add	r0, sp, #64	; 0x40
 801cb3e:	f7fa fb21 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb42:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cb46:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cb4a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801cb4e:	6828      	ldr	r0, [r5, #0]
 801cb50:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801cb54:	4c5e      	ldr	r4, [pc, #376]	; (801ccd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801cb56:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cb5a:	4489      	add	r9, r1
 801cb5c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801cb60:	440a      	add	r2, r1
 801cb62:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cb66:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cb6a:	4413      	add	r3, r2
 801cb6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cb70:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801cb74:	930a      	str	r3, [sp, #40]	; 0x28
 801cb76:	6803      	ldr	r3, [r0, #0]
 801cb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb7c:	4798      	blx	r3
 801cb7e:	2801      	cmp	r0, #1
 801cb80:	d11d      	bne.n	801cbbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801cb82:	220b      	movs	r2, #11
 801cb84:	2100      	movs	r1, #0
 801cb86:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801cb8a:	8822      	ldrh	r2, [r4, #0]
 801cb8c:	f8cd a010 	str.w	sl, [sp, #16]
 801cb90:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801cb94:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801cb98:	9203      	str	r2, [sp, #12]
 801cb9a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cb9e:	9202      	str	r2, [sp, #8]
 801cba0:	b2b6      	uxth	r6, r6
 801cba2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cba6:	9200      	str	r2, [sp, #0]
 801cba8:	9601      	str	r6, [sp, #4]
 801cbaa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cbae:	6828      	ldr	r0, [r5, #0]
 801cbb0:	4642      	mov	r2, r8
 801cbb2:	4649      	mov	r1, r9
 801cbb4:	f7f8 fcc0 	bl	8015538 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801cbb8:	b013      	add	sp, #76	; 0x4c
 801cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbbe:	6828      	ldr	r0, [r5, #0]
 801cbc0:	6803      	ldr	r3, [r0, #0]
 801cbc2:	6a1b      	ldr	r3, [r3, #32]
 801cbc4:	4798      	blx	r3
 801cbc6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801cbca:	8823      	ldrh	r3, [r4, #0]
 801cbcc:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801cbd0:	940d      	str	r4, [sp, #52]	; 0x34
 801cbd2:	fb01 2303 	mla	r3, r1, r3, r2
 801cbd6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cbda:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801cbde:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbe0:	ea6f 010a 	mvn.w	r1, sl
 801cbe4:	005b      	lsls	r3, r3, #1
 801cbe6:	930c      	str	r3, [sp, #48]	; 0x30
 801cbe8:	f04f 0e00 	mov.w	lr, #0
 801cbec:	b2c9      	uxtb	r1, r1
 801cbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbf0:	459e      	cmp	lr, r3
 801cbf2:	da5f      	bge.n	801ccb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801cbf4:	2700      	movs	r7, #0
 801cbf6:	fa1f fb8a 	uxth.w	fp, sl
 801cbfa:	42b7      	cmp	r7, r6
 801cbfc:	da4a      	bge.n	801cc94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801cbfe:	f819 3007 	ldrb.w	r3, [r9, r7]
 801cc02:	2203      	movs	r2, #3
 801cc04:	2404      	movs	r4, #4
 801cc06:	fb12 4303 	smlabb	r3, r2, r3, r4
 801cc0a:	eb08 0403 	add.w	r4, r8, r3
 801cc0e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cc12:	78a2      	ldrb	r2, [r4, #2]
 801cc14:	7865      	ldrb	r5, [r4, #1]
 801cc16:	f818 c003 	ldrb.w	ip, [r8, r3]
 801cc1a:	d10c      	bne.n	801cc36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 801cc1c:	4b2d      	ldr	r3, [pc, #180]	; (801ccd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cc1e:	00ed      	lsls	r5, r5, #3
 801cc20:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 801cc24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cc28:	432a      	orrs	r2, r5
 801cc2a:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 801cc2e:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 801cc32:	3701      	adds	r7, #1
 801cc34:	e7e1      	b.n	801cbfa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 801cc36:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 801cc3a:	121c      	asrs	r4, r3, #8
 801cc3c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cc40:	fb12 f20b 	smulbb	r2, r2, fp
 801cc44:	fb04 2201 	mla	r2, r4, r1, r2
 801cc48:	10dc      	asrs	r4, r3, #3
 801cc4a:	00db      	lsls	r3, r3, #3
 801cc4c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cc50:	b2db      	uxtb	r3, r3
 801cc52:	fb15 f50b 	smulbb	r5, r5, fp
 801cc56:	fb1c fc0b 	smulbb	ip, ip, fp
 801cc5a:	b292      	uxth	r2, r2
 801cc5c:	fb04 5501 	mla	r5, r4, r1, r5
 801cc60:	fb03 cc01 	mla	ip, r3, r1, ip
 801cc64:	b2ad      	uxth	r5, r5
 801cc66:	fa1f fc8c 	uxth.w	ip, ip
 801cc6a:	1c53      	adds	r3, r2, #1
 801cc6c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cc70:	1c6c      	adds	r4, r5, #1
 801cc72:	f10c 0301 	add.w	r3, ip, #1
 801cc76:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801cc7a:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 801cc7e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801cc82:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cc86:	096d      	lsrs	r5, r5, #5
 801cc88:	ea42 020c 	orr.w	r2, r2, ip
 801cc8c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cc90:	432a      	orrs	r2, r5
 801cc92:	e7cc      	b.n	801cc2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 801cc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc98:	881b      	ldrh	r3, [r3, #0]
 801cc9a:	1b9b      	subs	r3, r3, r6
 801cc9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cca0:	4418      	add	r0, r3
 801cca2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cca8:	1b9b      	subs	r3, r3, r6
 801ccaa:	4413      	add	r3, r2
 801ccac:	4499      	add	r9, r3
 801ccae:	f10e 0e01 	add.w	lr, lr, #1
 801ccb2:	e79c      	b.n	801cbee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 801ccb4:	4b05      	ldr	r3, [pc, #20]	; (801cccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ccb6:	6818      	ldr	r0, [r3, #0]
 801ccb8:	6803      	ldr	r3, [r0, #0]
 801ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccbc:	4798      	blx	r3
 801ccbe:	e77b      	b.n	801cbb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ccc0:	0805417a 	.word	0x0805417a
 801ccc4:	08054845 	.word	0x08054845
 801ccc8:	08054370 	.word	0x08054370
 801cccc:	20001358 	.word	0x20001358
 801ccd0:	20001350 	.word	0x20001350
 801ccd4:	fffff800 	.word	0xfffff800

0801ccd8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ccd8:	b430      	push	{r4, r5}
 801ccda:	780d      	ldrb	r5, [r1, #0]
 801ccdc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801cce0:	2d01      	cmp	r5, #1
 801cce2:	d00a      	beq.n	801ccfa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801cce4:	d305      	bcc.n	801ccf2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801cce6:	2d02      	cmp	r5, #2
 801cce8:	d10b      	bne.n	801cd02 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ccea:	9402      	str	r4, [sp, #8]
 801ccec:	bc30      	pop	{r4, r5}
 801ccee:	f7ff bdf9 	b.w	801c8e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ccf2:	9402      	str	r4, [sp, #8]
 801ccf4:	bc30      	pop	{r4, r5}
 801ccf6:	f7ff bcfd 	b.w	801c6f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ccfa:	9402      	str	r4, [sp, #8]
 801ccfc:	bc30      	pop	{r4, r5}
 801ccfe:	f7ff befb 	b.w	801caf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cd02:	bc30      	pop	{r4, r5}
 801cd04:	4770      	bx	lr
	...

0801cd08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd0c:	4605      	mov	r5, r0
 801cd0e:	b089      	sub	sp, #36	; 0x24
 801cd10:	6810      	ldr	r0, [r2, #0]
 801cd12:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 801cd16:	460c      	mov	r4, r1
 801cd18:	6851      	ldr	r1, [r2, #4]
 801cd1a:	ae04      	add	r6, sp, #16
 801cd1c:	c603      	stmia	r6!, {r0, r1}
 801cd1e:	6818      	ldr	r0, [r3, #0]
 801cd20:	6859      	ldr	r1, [r3, #4]
 801cd22:	ae06      	add	r6, sp, #24
 801cd24:	4617      	mov	r7, r2
 801cd26:	c603      	stmia	r6!, {r0, r1}
 801cd28:	a804      	add	r0, sp, #16
 801cd2a:	f7fa fa43 	bl	80171b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd2e:	4639      	mov	r1, r7
 801cd30:	a806      	add	r0, sp, #24
 801cd32:	f7fa fa27 	bl	8017184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd36:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801cd3a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801cd3e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801cd42:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801cd46:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cd4a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801cd4e:	440c      	add	r4, r1
 801cd50:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801cd54:	440a      	add	r2, r1
 801cd56:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cd5a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801cd5e:	4413      	add	r3, r2
 801cd60:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cd64:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801cd68:	9300      	str	r3, [sp, #0]
 801cd6a:	4b80      	ldr	r3, [pc, #512]	; (801cf6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801cd6c:	6818      	ldr	r0, [r3, #0]
 801cd6e:	6803      	ldr	r3, [r0, #0]
 801cd70:	6a1b      	ldr	r3, [r3, #32]
 801cd72:	4798      	blx	r3
 801cd74:	4b7e      	ldr	r3, [pc, #504]	; (801cf70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801cd76:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801cd7a:	881a      	ldrh	r2, [r3, #0]
 801cd7c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801cd80:	fb06 1202 	mla	r2, r6, r2, r1
 801cd84:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cd88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cd8c:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 801cd90:	b212      	sxth	r2, r2
 801cd92:	d117      	bne.n	801cdc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 801cd94:	9201      	str	r2, [sp, #4]
 801cd96:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801cd9a:	f04f 0a00 	mov.w	sl, #0
 801cd9e:	9302      	str	r3, [sp, #8]
 801cda0:	9b00      	ldr	r3, [sp, #0]
 801cda2:	459a      	cmp	sl, r3
 801cda4:	f280 80d9 	bge.w	801cf5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801cda8:	2100      	movs	r1, #0
 801cdaa:	4541      	cmp	r1, r8
 801cdac:	f280 80c1 	bge.w	801cf32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801cdb0:	5c63      	ldrb	r3, [r4, r1]
 801cdb2:	b12b      	cbz	r3, 801cdc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801cdb4:	2bff      	cmp	r3, #255	; 0xff
 801cdb6:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 801cdba:	d176      	bne.n	801ceaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 801cdbc:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801cdc0:	3101      	adds	r1, #1
 801cdc2:	e7f2      	b.n	801cdaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 801cdc4:	9202      	str	r2, [sp, #8]
 801cdc6:	0052      	lsls	r2, r2, #1
 801cdc8:	9201      	str	r2, [sp, #4]
 801cdca:	f04f 0b00 	mov.w	fp, #0
 801cdce:	9303      	str	r3, [sp, #12]
 801cdd0:	9b00      	ldr	r3, [sp, #0]
 801cdd2:	459b      	cmp	fp, r3
 801cdd4:	f280 80c1 	bge.w	801cf5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801cdd8:	f04f 0c00 	mov.w	ip, #0
 801cddc:	45c4      	cmp	ip, r8
 801cdde:	da4f      	bge.n	801ce80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 801cde0:	f814 300c 	ldrb.w	r3, [r4, ip]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d048      	beq.n	801ce7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801cde8:	fb09 f303 	mul.w	r3, r9, r3
 801cdec:	1c5a      	adds	r2, r3, #1
 801cdee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cdf2:	121b      	asrs	r3, r3, #8
 801cdf4:	d041      	beq.n	801ce7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801cdf6:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 801cdfa:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 801cdfe:	b29e      	uxth	r6, r3
 801ce00:	1211      	asrs	r1, r2, #8
 801ce02:	43db      	mvns	r3, r3
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ce0a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ce0e:	fb11 f103 	smulbb	r1, r1, r3
 801ce12:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801ce16:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ce1a:	00d2      	lsls	r2, r2, #3
 801ce1c:	fb07 1706 	mla	r7, r7, r6, r1
 801ce20:	b2d2      	uxtb	r2, r2
 801ce22:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801ce26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ce2a:	fb12 f203 	smulbb	r2, r2, r3
 801ce2e:	fa5f fe8e 	uxtb.w	lr, lr
 801ce32:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ce36:	fb0e 2206 	mla	r2, lr, r6, r2
 801ce3a:	fb1a fa03 	smulbb	sl, sl, r3
 801ce3e:	b2bf      	uxth	r7, r7
 801ce40:	b292      	uxth	r2, r2
 801ce42:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ce46:	fb01 a106 	mla	r1, r1, r6, sl
 801ce4a:	1c7b      	adds	r3, r7, #1
 801ce4c:	f102 0a01 	add.w	sl, r2, #1
 801ce50:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ce54:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 801ce58:	b289      	uxth	r1, r1
 801ce5a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ce5e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ce62:	ea47 070a 	orr.w	r7, r7, sl
 801ce66:	f101 0a01 	add.w	sl, r1, #1
 801ce6a:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801ce6e:	0949      	lsrs	r1, r1, #5
 801ce70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ce74:	430f      	orrs	r7, r1
 801ce76:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 801ce7a:	f10c 0c01 	add.w	ip, ip, #1
 801ce7e:	e7ad      	b.n	801cddc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 801ce80:	9b03      	ldr	r3, [sp, #12]
 801ce82:	9a01      	ldr	r2, [sp, #4]
 801ce84:	881b      	ldrh	r3, [r3, #0]
 801ce86:	eba3 0308 	sub.w	r3, r3, r8
 801ce8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ce8e:	4418      	add	r0, r3
 801ce90:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ce94:	eba3 0308 	sub.w	r3, r3, r8
 801ce98:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ce9c:	4415      	add	r5, r2
 801ce9e:	9a02      	ldr	r2, [sp, #8]
 801cea0:	4413      	add	r3, r2
 801cea2:	441c      	add	r4, r3
 801cea4:	f10b 0b01 	add.w	fp, fp, #1
 801cea8:	e792      	b.n	801cdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 801ceaa:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801ceae:	b29f      	uxth	r7, r3
 801ceb0:	1216      	asrs	r6, r2, #8
 801ceb2:	43db      	mvns	r3, r3
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ceba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cebe:	fb16 f603 	smulbb	r6, r6, r3
 801cec2:	ea4f 09e2 	mov.w	r9, r2, asr #3
 801cec6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ceca:	00d2      	lsls	r2, r2, #3
 801cecc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ced0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ced4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ced8:	b2d2      	uxtb	r2, r2
 801ceda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cede:	fa1f fc8c 	uxth.w	ip, ip
 801cee2:	fb19 f903 	smulbb	r9, r9, r3
 801cee6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ceea:	fa5f fe8e 	uxtb.w	lr, lr
 801ceee:	fb12 f203 	smulbb	r2, r2, r3
 801cef2:	fb06 9607 	mla	r6, r6, r7, r9
 801cef6:	fb0e 2207 	mla	r2, lr, r7, r2
 801cefa:	f10c 0901 	add.w	r9, ip, #1
 801cefe:	b292      	uxth	r2, r2
 801cf00:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801cf04:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801cf08:	f102 0c01 	add.w	ip, r2, #1
 801cf0c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cf10:	b2b6      	uxth	r6, r6
 801cf12:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cf16:	ea49 0c02 	orr.w	ip, r9, r2
 801cf1a:	f106 0901 	add.w	r9, r6, #1
 801cf1e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801cf22:	0976      	lsrs	r6, r6, #5
 801cf24:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cf28:	ea4c 0c06 	orr.w	ip, ip, r6
 801cf2c:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801cf30:	e746      	b.n	801cdc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801cf32:	9b02      	ldr	r3, [sp, #8]
 801cf34:	881b      	ldrh	r3, [r3, #0]
 801cf36:	eba3 0308 	sub.w	r3, r3, r8
 801cf3a:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801cf3e:	4418      	add	r0, r3
 801cf40:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cf44:	eba3 0308 	sub.w	r3, r3, r8
 801cf48:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 801cf4c:	4415      	add	r5, r2
 801cf4e:	9a01      	ldr	r2, [sp, #4]
 801cf50:	4413      	add	r3, r2
 801cf52:	441c      	add	r4, r3
 801cf54:	f10a 0a01 	add.w	sl, sl, #1
 801cf58:	e722      	b.n	801cda0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801cf5a:	4b04      	ldr	r3, [pc, #16]	; (801cf6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801cf5c:	6818      	ldr	r0, [r3, #0]
 801cf5e:	6803      	ldr	r3, [r0, #0]
 801cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf62:	4798      	blx	r3
 801cf64:	b009      	add	sp, #36	; 0x24
 801cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf6a:	bf00      	nop
 801cf6c:	20001358 	.word	0x20001358
 801cf70:	20001350 	.word	0x20001350

0801cf74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf78:	b089      	sub	sp, #36	; 0x24
 801cf7a:	4682      	mov	sl, r0
 801cf7c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801cf80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf82:	460d      	mov	r5, r1
 801cf84:	4691      	mov	r9, r2
 801cf86:	4698      	mov	r8, r3
 801cf88:	b3ae      	cbz	r6, 801cff6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801cf8a:	4608      	mov	r0, r1
 801cf8c:	f7fc faa0 	bl	80194d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf90:	4607      	mov	r7, r0
 801cf92:	4628      	mov	r0, r5
 801cf94:	f7fc fad6 	bl	8019544 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf98:	f8ad 000e 	strh.w	r0, [sp, #14]
 801cf9c:	4628      	mov	r0, r5
 801cf9e:	f8ad 9008 	strh.w	r9, [sp, #8]
 801cfa2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801cfa6:	f8ad 700c 	strh.w	r7, [sp, #12]
 801cfaa:	f7fc fc1d 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cfae:	b178      	cbz	r0, 801cfd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cfb0:	4628      	mov	r0, r5
 801cfb2:	f7fc fc19 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cfb6:	2802      	cmp	r0, #2
 801cfb8:	d00a      	beq.n	801cfd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cfba:	4628      	mov	r0, r5
 801cfbc:	f7fc fc14 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cfc0:	280b      	cmp	r0, #11
 801cfc2:	d005      	beq.n	801cfd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cfc4:	4b69      	ldr	r3, [pc, #420]	; (801d16c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801cfc6:	4a6a      	ldr	r2, [pc, #424]	; (801d170 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801cfc8:	486a      	ldr	r0, [pc, #424]	; (801d174 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801cfca:	214b      	movs	r1, #75	; 0x4b
 801cfcc:	f007 ff1e 	bl	8024e0c <__assert_func>
 801cfd0:	4628      	mov	r0, r5
 801cfd2:	f7fc fb85 	bl	80196e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cfd6:	4607      	mov	r7, r0
 801cfd8:	4628      	mov	r0, r5
 801cfda:	f7fc fbb3 	bl	8019744 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801cfde:	4681      	mov	r9, r0
 801cfe0:	4628      	mov	r0, r5
 801cfe2:	f7fc fc01 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cfe6:	2802      	cmp	r0, #2
 801cfe8:	d108      	bne.n	801cffc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801cfea:	4633      	mov	r3, r6
 801cfec:	4622      	mov	r2, r4
 801cfee:	a902      	add	r1, sp, #8
 801cff0:	4638      	mov	r0, r7
 801cff2:	f7ff fa6d 	bl	801c4d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cff6:	b009      	add	sp, #36	; 0x24
 801cff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cffc:	4628      	mov	r0, r5
 801cffe:	f7fc fbf3 	bl	80197e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d002:	280b      	cmp	r0, #11
 801d004:	d107      	bne.n	801d016 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801d006:	9600      	str	r6, [sp, #0]
 801d008:	4623      	mov	r3, r4
 801d00a:	aa02      	add	r2, sp, #8
 801d00c:	4649      	mov	r1, r9
 801d00e:	4638      	mov	r0, r7
 801d010:	f7ff fe62 	bl	801ccd8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d014:	e7ef      	b.n	801cff6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d016:	4628      	mov	r0, r5
 801d018:	f7fc fb28 	bl	801966c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d01c:	b950      	cbnz	r0, 801d034 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d01e:	e9cd 6000 	strd	r6, r0, [sp]
 801d022:	f8da 3000 	ldr.w	r3, [sl]
 801d026:	aa02      	add	r2, sp, #8
 801d028:	68dd      	ldr	r5, [r3, #12]
 801d02a:	4639      	mov	r1, r7
 801d02c:	4623      	mov	r3, r4
 801d02e:	4650      	mov	r0, sl
 801d030:	47a8      	blx	r5
 801d032:	e7e0      	b.n	801cff6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d034:	f10d 0818 	add.w	r8, sp, #24
 801d038:	4629      	mov	r1, r5
 801d03a:	4640      	mov	r0, r8
 801d03c:	f7fc fabc 	bl	80195b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d040:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d044:	ad04      	add	r5, sp, #16
 801d046:	e885 0003 	stmia.w	r5, {r0, r1}
 801d04a:	4628      	mov	r0, r5
 801d04c:	4621      	mov	r1, r4
 801d04e:	f7f7 fb15 	bl	801467c <_ZN8touchgfx4RectaNERKS0_>
 801d052:	4628      	mov	r0, r5
 801d054:	f7f7 fb55 	bl	8014702 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d058:	b138      	cbz	r0, 801d06a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801d05a:	9600      	str	r6, [sp, #0]
 801d05c:	4623      	mov	r3, r4
 801d05e:	aa02      	add	r2, sp, #8
 801d060:	4649      	mov	r1, r9
 801d062:	4638      	mov	r0, r7
 801d064:	f7ff fe50 	bl	801cd08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d068:	e7c5      	b.n	801cff6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d06a:	e9cd 6000 	strd	r6, r0, [sp]
 801d06e:	f8da 3000 	ldr.w	r3, [sl]
 801d072:	aa02      	add	r2, sp, #8
 801d074:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d078:	4639      	mov	r1, r7
 801d07a:	462b      	mov	r3, r5
 801d07c:	4650      	mov	r0, sl
 801d07e:	47d8      	blx	fp
 801d080:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d084:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d088:	4293      	cmp	r3, r2
 801d08a:	dd13      	ble.n	801d0b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801d08c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d090:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d094:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d098:	1a9b      	subs	r3, r3, r2
 801d09a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d09e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d0a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d0a6:	9600      	str	r6, [sp, #0]
 801d0a8:	4643      	mov	r3, r8
 801d0aa:	aa02      	add	r2, sp, #8
 801d0ac:	4649      	mov	r1, r9
 801d0ae:	4638      	mov	r0, r7
 801d0b0:	f7ff fe2a 	bl	801cd08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d0b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d0b8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d0bc:	4293      	cmp	r3, r2
 801d0be:	dd13      	ble.n	801d0e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801d0c0:	1a9b      	subs	r3, r3, r2
 801d0c2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d0c6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d0ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d0ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d0d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d0d6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d0da:	9600      	str	r6, [sp, #0]
 801d0dc:	4643      	mov	r3, r8
 801d0de:	aa02      	add	r2, sp, #8
 801d0e0:	4649      	mov	r1, r9
 801d0e2:	4638      	mov	r0, r7
 801d0e4:	f7ff fe10 	bl	801cd08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d0e8:	88a2      	ldrh	r2, [r4, #4]
 801d0ea:	8823      	ldrh	r3, [r4, #0]
 801d0ec:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d0f0:	4413      	add	r3, r2
 801d0f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d0f6:	440a      	add	r2, r1
 801d0f8:	b29b      	uxth	r3, r3
 801d0fa:	b292      	uxth	r2, r2
 801d0fc:	b211      	sxth	r1, r2
 801d0fe:	b218      	sxth	r0, r3
 801d100:	4288      	cmp	r0, r1
 801d102:	dd13      	ble.n	801d12c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801d104:	1a9b      	subs	r3, r3, r2
 801d106:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d10a:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801d10e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d112:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d116:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d11a:	9600      	str	r6, [sp, #0]
 801d11c:	4643      	mov	r3, r8
 801d11e:	aa02      	add	r2, sp, #8
 801d120:	4649      	mov	r1, r9
 801d122:	4638      	mov	r0, r7
 801d124:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d128:	f7ff fdee 	bl	801cd08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d12c:	88e2      	ldrh	r2, [r4, #6]
 801d12e:	8863      	ldrh	r3, [r4, #2]
 801d130:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d134:	4413      	add	r3, r2
 801d136:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d13a:	440a      	add	r2, r1
 801d13c:	b29b      	uxth	r3, r3
 801d13e:	b292      	uxth	r2, r2
 801d140:	b211      	sxth	r1, r2
 801d142:	b218      	sxth	r0, r3
 801d144:	4288      	cmp	r0, r1
 801d146:	f77f af56 	ble.w	801cff6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801d14a:	f9b4 5000 	ldrsh.w	r5, [r4]
 801d14e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d152:	f8ad 5018 	strh.w	r5, [sp, #24]
 801d156:	1a9b      	subs	r3, r3, r2
 801d158:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d15c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d160:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d164:	9600      	str	r6, [sp, #0]
 801d166:	4643      	mov	r3, r8
 801d168:	e779      	b.n	801d05e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801d16a:	bf00      	nop
 801d16c:	080541c8 	.word	0x080541c8
 801d170:	080548ce 	.word	0x080548ce
 801d174:	08054370 	.word	0x08054370

0801d178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d178:	b508      	push	{r3, lr}
 801d17a:	b180      	cbz	r0, 801d19e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801d17c:	2902      	cmp	r1, #2
 801d17e:	d014      	beq.n	801d1aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801d180:	2903      	cmp	r1, #3
 801d182:	d01d      	beq.n	801d1c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d184:	2901      	cmp	r1, #1
 801d186:	d101      	bne.n	801d18c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d188:	2001      	movs	r0, #1
 801d18a:	bd08      	pop	{r3, pc}
 801d18c:	4b0e      	ldr	r3, [pc, #56]	; (801d1c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d18e:	8818      	ldrh	r0, [r3, #0]
 801d190:	b990      	cbnz	r0, 801d1b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d192:	4b0e      	ldr	r3, [pc, #56]	; (801d1cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801d194:	4a0e      	ldr	r2, [pc, #56]	; (801d1d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801d196:	480f      	ldr	r0, [pc, #60]	; (801d1d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801d198:	2154      	movs	r1, #84	; 0x54
 801d19a:	f007 fe37 	bl	8024e0c <__assert_func>
 801d19e:	2902      	cmp	r1, #2
 801d1a0:	d00e      	beq.n	801d1c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801d1a2:	2903      	cmp	r1, #3
 801d1a4:	d0f2      	beq.n	801d18c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801d1a6:	2901      	cmp	r1, #1
 801d1a8:	d1ee      	bne.n	801d188 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801d1aa:	4b07      	ldr	r3, [pc, #28]	; (801d1c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d1ac:	8818      	ldrh	r0, [r3, #0]
 801d1ae:	2800      	cmp	r0, #0
 801d1b0:	d0ef      	beq.n	801d192 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801d1b2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d1b6:	e7e8      	b.n	801d18a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d1b8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d1bc:	4240      	negs	r0, r0
 801d1be:	e7e4      	b.n	801d18a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d1c4:	e7e1      	b.n	801d18a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801d1c6:	bf00      	nop
 801d1c8:	20001350 	.word	0x20001350
 801d1cc:	080544ca 	.word	0x080544ca
 801d1d0:	08054a4b 	.word	0x08054a4b
 801d1d4:	0805450c 	.word	0x0805450c

0801d1d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d1d8:	b508      	push	{r3, lr}
 801d1da:	b180      	cbz	r0, 801d1fe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801d1dc:	2902      	cmp	r1, #2
 801d1de:	d014      	beq.n	801d20a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801d1e0:	2903      	cmp	r1, #3
 801d1e2:	d018      	beq.n	801d216 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d1e4:	2901      	cmp	r1, #1
 801d1e6:	d001      	beq.n	801d1ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d1e8:	2001      	movs	r0, #1
 801d1ea:	e013      	b.n	801d214 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d1ec:	4b0e      	ldr	r3, [pc, #56]	; (801d228 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d1ee:	8818      	ldrh	r0, [r3, #0]
 801d1f0:	b970      	cbnz	r0, 801d210 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801d1f2:	4b0e      	ldr	r3, [pc, #56]	; (801d22c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801d1f4:	4a0e      	ldr	r2, [pc, #56]	; (801d230 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801d1f6:	480f      	ldr	r0, [pc, #60]	; (801d234 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801d1f8:	2154      	movs	r1, #84	; 0x54
 801d1fa:	f007 fe07 	bl	8024e0c <__assert_func>
 801d1fe:	2902      	cmp	r1, #2
 801d200:	d009      	beq.n	801d216 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801d202:	2903      	cmp	r1, #3
 801d204:	d0f0      	beq.n	801d1e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801d206:	2901      	cmp	r1, #1
 801d208:	d1f0      	bne.n	801d1ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801d20a:	f04f 30ff 	mov.w	r0, #4294967295
 801d20e:	e001      	b.n	801d214 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d210:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d214:	bd08      	pop	{r3, pc}
 801d216:	4b04      	ldr	r3, [pc, #16]	; (801d228 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d218:	8818      	ldrh	r0, [r3, #0]
 801d21a:	2800      	cmp	r0, #0
 801d21c:	d0e9      	beq.n	801d1f2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801d21e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d222:	4240      	negs	r0, r0
 801d224:	e7f6      	b.n	801d214 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801d226:	bf00      	nop
 801d228:	20001350 	.word	0x20001350
 801d22c:	080544ca 	.word	0x080544ca
 801d230:	08054a4b 	.word	0x08054a4b
 801d234:	0805450c 	.word	0x0805450c

0801d238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d23c:	b097      	sub	sp, #92	; 0x5c
 801d23e:	910a      	str	r1, [sp, #40]	; 0x28
 801d240:	a912      	add	r1, sp, #72	; 0x48
 801d242:	e881 000c 	stmia.w	r1, {r2, r3}
 801d246:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801d24a:	9307      	str	r3, [sp, #28]
 801d24c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801d250:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d254:	930f      	str	r3, [sp, #60]	; 0x3c
 801d256:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801d25a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d25c:	7b4b      	ldrb	r3, [r1, #13]
 801d25e:	798d      	ldrb	r5, [r1, #6]
 801d260:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801d264:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801d268:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801d26c:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801d270:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801d274:	0158      	lsls	r0, r3, #5
 801d276:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d27a:	4328      	orrs	r0, r5
 801d27c:	9006      	str	r0, [sp, #24]
 801d27e:	f000 8156 	beq.w	801d52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d282:	011b      	lsls	r3, r3, #4
 801d284:	79c8      	ldrb	r0, [r1, #7]
 801d286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d28a:	4303      	orrs	r3, r0
 801d28c:	9308      	str	r3, [sp, #32]
 801d28e:	f000 814e 	beq.w	801d52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d292:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d296:	b29b      	uxth	r3, r3
 801d298:	2f00      	cmp	r7, #0
 801d29a:	f000 80f2 	beq.w	801d482 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24a>
 801d29e:	1aff      	subs	r7, r7, r3
 801d2a0:	b2bf      	uxth	r7, r7
 801d2a2:	043b      	lsls	r3, r7, #16
 801d2a4:	d502      	bpl.n	801d2ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d2a6:	1bf6      	subs	r6, r6, r7
 801d2a8:	b236      	sxth	r6, r6
 801d2aa:	2700      	movs	r7, #0
 801d2ac:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d2b0:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d2b4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801d2b8:	428e      	cmp	r6, r1
 801d2ba:	b28b      	uxth	r3, r1
 801d2bc:	bfbf      	itttt	lt
 801d2be:	18ff      	addlt	r7, r7, r3
 801d2c0:	1bbe      	sublt	r6, r7, r6
 801d2c2:	b2b7      	uxthlt	r7, r6
 801d2c4:	460e      	movlt	r6, r1
 801d2c6:	8891      	ldrh	r1, [r2, #4]
 801d2c8:	440b      	add	r3, r1
 801d2ca:	b21b      	sxth	r3, r3
 801d2cc:	930e      	str	r3, [sp, #56]	; 0x38
 801d2ce:	88d3      	ldrh	r3, [r2, #6]
 801d2d0:	9a07      	ldr	r2, [sp, #28]
 801d2d2:	449a      	add	sl, r3
 801d2d4:	fa0f f38a 	sxth.w	r3, sl
 801d2d8:	930d      	str	r3, [sp, #52]	; 0x34
 801d2da:	4bbc      	ldr	r3, [pc, #752]	; (801d5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d2dc:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d2e0:	f893 b000 	ldrb.w	fp, [r3]
 801d2e4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d2e8:	f1dc 0300 	rsbs	r3, ip, #0
 801d2ec:	eb43 030c 	adc.w	r3, r3, ip
 801d2f0:	930c      	str	r3, [sp, #48]	; 0x30
 801d2f2:	4631      	mov	r1, r6
 801d2f4:	464b      	mov	r3, r9
 801d2f6:	a812      	add	r0, sp, #72	; 0x48
 801d2f8:	f7f9 fe34 	bl	8016f64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d2fc:	4631      	mov	r1, r6
 801d2fe:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801d302:	464b      	mov	r3, r9
 801d304:	9a07      	ldr	r2, [sp, #28]
 801d306:	a812      	add	r0, sp, #72	; 0x48
 801d308:	f7f9 fe44 	bl	8016f94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d30c:	a916      	add	r1, sp, #88	; 0x58
 801d30e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d312:	a815      	add	r0, sp, #84	; 0x54
 801d314:	f7f9 ff20 	bl	8017158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d318:	f1b9 0f00 	cmp.w	r9, #0
 801d31c:	f040 80b4 	bne.w	801d488 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 801d320:	f1bb 0f01 	cmp.w	fp, #1
 801d324:	f040 80b8 	bne.w	801d498 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801d328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	f040 8104 	bne.w	801d538 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 801d330:	4ba7      	ldr	r3, [pc, #668]	; (801d5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801d332:	6818      	ldr	r0, [r3, #0]
 801d334:	6803      	ldr	r3, [r0, #0]
 801d336:	6a1b      	ldr	r3, [r3, #32]
 801d338:	4798      	blx	r3
 801d33a:	4aa6      	ldr	r2, [pc, #664]	; (801d5d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801d33c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801d340:	8811      	ldrh	r1, [r2, #0]
 801d342:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d346:	fb01 2303 	mla	r3, r1, r3, r2
 801d34a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d34e:	9308      	str	r3, [sp, #32]
 801d350:	2301      	movs	r3, #1
 801d352:	fa03 f308 	lsl.w	r3, r3, r8
 801d356:	3b01      	subs	r3, #1
 801d358:	b2db      	uxtb	r3, r3
 801d35a:	f1b8 0f01 	cmp.w	r8, #1
 801d35e:	9310      	str	r3, [sp, #64]	; 0x40
 801d360:	f000 80ec 	beq.w	801d53c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801d364:	f1b8 0f02 	cmp.w	r8, #2
 801d368:	f000 80ea 	beq.w	801d540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 801d36c:	f1b8 0f04 	cmp.w	r8, #4
 801d370:	bf14      	ite	ne
 801d372:	2301      	movne	r3, #1
 801d374:	2311      	moveq	r3, #17
 801d376:	9309      	str	r3, [sp, #36]	; 0x24
 801d378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d37a:	b153      	cbz	r3, 801d392 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 801d37c:	9a06      	ldr	r2, [sp, #24]
 801d37e:	2508      	movs	r5, #8
 801d380:	fb95 f3f8 	sdiv	r3, r5, r8
 801d384:	1e5d      	subs	r5, r3, #1
 801d386:	4415      	add	r5, r2
 801d388:	fb95 f5f3 	sdiv	r5, r5, r3
 801d38c:	fb15 f503 	smulbb	r5, r5, r3
 801d390:	b2ad      	uxth	r5, r5
 801d392:	b907      	cbnz	r7, 801d396 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 801d394:	b16c      	cbz	r4, 801d3b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 801d396:	fb04 7305 	mla	r3, r4, r5, r7
 801d39a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d39c:	fb08 f303 	mul.w	r3, r8, r3
 801d3a0:	ebaa 0a04 	sub.w	sl, sl, r4
 801d3a4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801d3a8:	9226      	str	r2, [sp, #152]	; 0x98
 801d3aa:	fa1f fa8a 	uxth.w	sl, sl
 801d3ae:	f003 0407 	and.w	r4, r3, #7
 801d3b2:	4649      	mov	r1, r9
 801d3b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d3b6:	f7ff fedf 	bl	801d178 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801d3ba:	4649      	mov	r1, r9
 801d3bc:	4683      	mov	fp, r0
 801d3be:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d3c0:	f7ff ff0a 	bl	801d1d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801d3c4:	9a07      	ldr	r2, [sp, #28]
 801d3c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d3c8:	1a9b      	subs	r3, r3, r2
 801d3ca:	459a      	cmp	sl, r3
 801d3cc:	bfa8      	it	ge
 801d3ce:	469a      	movge	sl, r3
 801d3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3d2:	1bf6      	subs	r6, r6, r7
 801d3d4:	1b9e      	subs	r6, r3, r6
 801d3d6:	9b06      	ldr	r3, [sp, #24]
 801d3d8:	429e      	cmp	r6, r3
 801d3da:	bfd4      	ite	le
 801d3dc:	ebc7 0706 	rsble	r7, r7, r6
 801d3e0:	ebc7 0703 	rsbgt	r7, r7, r3
 801d3e4:	1bed      	subs	r5, r5, r7
 801d3e6:	fb08 f305 	mul.w	r3, r8, r5
 801d3ea:	9307      	str	r3, [sp, #28]
 801d3ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d3ee:	781a      	ldrb	r2, [r3, #0]
 801d3f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3f2:	0a1b      	lsrs	r3, r3, #8
 801d3f4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d3f8:	930d      	str	r3, [sp, #52]	; 0x34
 801d3fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3fc:	08db      	lsrs	r3, r3, #3
 801d3fe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d402:	930e      	str	r3, [sp, #56]	; 0x38
 801d404:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d406:	00db      	lsls	r3, r3, #3
 801d408:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d40c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d40e:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801d412:	fb0b 0b17 	mls	fp, fp, r7, r0
 801d416:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 801d41a:	4358      	muls	r0, r3
 801d41c:	9306      	str	r3, [sp, #24]
 801d41e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d420:	4122      	asrs	r2, r4
 801d422:	b29b      	uxth	r3, r3
 801d424:	b2d2      	uxtb	r2, r2
 801d426:	9311      	str	r3, [sp, #68]	; 0x44
 801d428:	eb00 0b4b 	add.w	fp, r0, fp, lsl #1
 801d42c:	f1ba 0f00 	cmp.w	sl, #0
 801d430:	f340 80e5 	ble.w	801d5fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801d434:	f8dd c020 	ldr.w	ip, [sp, #32]
 801d438:	46be      	mov	lr, r7
 801d43a:	f1be 0f00 	cmp.w	lr, #0
 801d43e:	f340 80cb 	ble.w	801d5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801d442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d444:	4013      	ands	r3, r2
 801d446:	d00a      	beq.n	801d45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 801d448:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d44a:	fb13 f301 	smulbb	r3, r3, r1
 801d44e:	2bfe      	cmp	r3, #254	; 0xfe
 801d450:	dd78      	ble.n	801d544 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 801d452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d454:	29ff      	cmp	r1, #255	; 0xff
 801d456:	d175      	bne.n	801d544 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 801d458:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d45a:	f8ac 0000 	strh.w	r0, [ip]
 801d45e:	4444      	add	r4, r8
 801d460:	b2a4      	uxth	r4, r4
 801d462:	2c07      	cmp	r4, #7
 801d464:	bf81      	itttt	hi
 801d466:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801d468:	785a      	ldrbhi	r2, [r3, #1]
 801d46a:	3301      	addhi	r3, #1
 801d46c:	9326      	strhi	r3, [sp, #152]	; 0x98
 801d46e:	9b06      	ldr	r3, [sp, #24]
 801d470:	bf9a      	itte	ls
 801d472:	fa42 f208 	asrls.w	r2, r2, r8
 801d476:	b2d2      	uxtbls	r2, r2
 801d478:	2400      	movhi	r4, #0
 801d47a:	449c      	add	ip, r3
 801d47c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d480:	e7db      	b.n	801d43a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 801d482:	441e      	add	r6, r3
 801d484:	b236      	sxth	r6, r6
 801d486:	e711      	b.n	801d2ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d488:	f1b9 0f01 	cmp.w	r9, #1
 801d48c:	f47f af4c 	bne.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d490:	f1bb 0f01 	cmp.w	fp, #1
 801d494:	f47f af48 	bne.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d498:	f8df b134 	ldr.w	fp, [pc, #308]	; 801d5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d49c:	f8db 0000 	ldr.w	r0, [fp]
 801d4a0:	6803      	ldr	r3, [r0, #0]
 801d4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d4a4:	4798      	blx	r3
 801d4a6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d4aa:	465a      	mov	r2, fp
 801d4ac:	d006      	beq.n	801d4bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801d4ae:	f1b8 0f04 	cmp.w	r8, #4
 801d4b2:	d13f      	bne.n	801d534 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 801d4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4b6:	3300      	adds	r3, #0
 801d4b8:	bf18      	it	ne
 801d4ba:	2301      	movne	r3, #1
 801d4bc:	05c0      	lsls	r0, r0, #23
 801d4be:	f140 80a7 	bpl.w	801d610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 801d4c2:	f1b8 0f08 	cmp.w	r8, #8
 801d4c6:	f040 80a3 	bne.w	801d610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d8>
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	bf0c      	ite	eq
 801d4ce:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d4d2:	2180      	movne	r1, #128	; 0x80
 801d4d4:	2f00      	cmp	r7, #0
 801d4d6:	f47f af27 	bne.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4da:	2c00      	cmp	r4, #0
 801d4dc:	f47f af24 	bne.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4e0:	9b06      	ldr	r3, [sp, #24]
 801d4e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d4e4:	18f3      	adds	r3, r6, r3
 801d4e6:	4283      	cmp	r3, r0
 801d4e8:	f73f af1e 	bgt.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4ec:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 801d4f0:	4403      	add	r3, r0
 801d4f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d4f4:	4283      	cmp	r3, r0
 801d4f6:	f73f af17 	bgt.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d4fa:	6810      	ldr	r0, [r2, #0]
 801d4fc:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801d500:	6804      	ldr	r4, [r0, #0]
 801d502:	9105      	str	r1, [sp, #20]
 801d504:	f1b8 0f08 	cmp.w	r8, #8
 801d508:	bf18      	it	ne
 801d50a:	3501      	addne	r5, #1
 801d50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d50e:	9104      	str	r1, [sp, #16]
 801d510:	bf18      	it	ne
 801d512:	f025 0501 	bicne.w	r5, r5, #1
 801d516:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d518:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801d51c:	bf18      	it	ne
 801d51e:	b2ad      	uxthne	r5, r5
 801d520:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801d524:	e9cd 5a00 	strd	r5, sl, [sp]
 801d528:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d52a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801d52c:	47a0      	blx	r4
 801d52e:	b017      	add	sp, #92	; 0x5c
 801d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d534:	2300      	movs	r3, #0
 801d536:	e7c1      	b.n	801d4bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801d538:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d53a:	e6fe      	b.n	801d33a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d53c:	23ff      	movs	r3, #255	; 0xff
 801d53e:	e71a      	b.n	801d376 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d540:	2355      	movs	r3, #85	; 0x55
 801d542:	e718      	b.n	801d376 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d546:	f8bc 5000 	ldrh.w	r5, [ip]
 801d54a:	fb11 f303 	smulbb	r3, r1, r3
 801d54e:	b29b      	uxth	r3, r3
 801d550:	1c59      	adds	r1, r3, #1
 801d552:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d556:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d55a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d55c:	b29e      	uxth	r6, r3
 801d55e:	1228      	asrs	r0, r5, #8
 801d560:	43db      	mvns	r3, r3
 801d562:	b2db      	uxtb	r3, r3
 801d564:	fb11 f106 	smulbb	r1, r1, r6
 801d568:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d56c:	fb00 1003 	mla	r0, r0, r3, r1
 801d570:	b281      	uxth	r1, r0
 801d572:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d574:	910c      	str	r1, [sp, #48]	; 0x30
 801d576:	fb16 f900 	smulbb	r9, r6, r0
 801d57a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d57c:	10e9      	asrs	r1, r5, #3
 801d57e:	00ed      	lsls	r5, r5, #3
 801d580:	fb16 f600 	smulbb	r6, r6, r0
 801d584:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d588:	b2ed      	uxtb	r5, r5
 801d58a:	fb01 9103 	mla	r1, r1, r3, r9
 801d58e:	fb05 6603 	mla	r6, r5, r3, r6
 801d592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d594:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d596:	b2b6      	uxth	r6, r6
 801d598:	3301      	adds	r3, #1
 801d59a:	f106 0901 	add.w	r9, r6, #1
 801d59e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d5a2:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 801d5a6:	b289      	uxth	r1, r1
 801d5a8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801d5ac:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d5b0:	ea40 0009 	orr.w	r0, r0, r9
 801d5b4:	f101 0901 	add.w	r9, r1, #1
 801d5b8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801d5bc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d5c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d5c4:	ea40 0009 	orr.w	r0, r0, r9
 801d5c8:	e747      	b.n	801d45a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801d5ca:	bf00      	nop
 801d5cc:	2000134e 	.word	0x2000134e
 801d5d0:	20001358 	.word	0x20001358
 801d5d4:	20001350 	.word	0x20001350
 801d5d8:	9b07      	ldr	r3, [sp, #28]
 801d5da:	b153      	cbz	r3, 801d5f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 801d5dc:	441c      	add	r4, r3
 801d5de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d5e0:	b2a4      	uxth	r4, r4
 801d5e2:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d5e6:	f004 0407 	and.w	r4, r4, #7
 801d5ea:	781a      	ldrb	r2, [r3, #0]
 801d5ec:	9326      	str	r3, [sp, #152]	; 0x98
 801d5ee:	4122      	asrs	r2, r4
 801d5f0:	b2d2      	uxtb	r2, r2
 801d5f2:	9b08      	ldr	r3, [sp, #32]
 801d5f4:	445b      	add	r3, fp
 801d5f6:	9308      	str	r3, [sp, #32]
 801d5f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d5fc:	e716      	b.n	801d42c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 801d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d600:	2b00      	cmp	r3, #0
 801d602:	d194      	bne.n	801d52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d604:	4b05      	ldr	r3, [pc, #20]	; (801d61c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>)
 801d606:	6818      	ldr	r0, [r3, #0]
 801d608:	6803      	ldr	r3, [r0, #0]
 801d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d60c:	4798      	blx	r3
 801d60e:	e78e      	b.n	801d52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801d610:	2b00      	cmp	r3, #0
 801d612:	f43f ae89 	beq.w	801d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d616:	2180      	movs	r1, #128	; 0x80
 801d618:	e75c      	b.n	801d4d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29c>
 801d61a:	bf00      	nop
 801d61c:	20001358 	.word	0x20001358

0801d620 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	4c15      	ldr	r4, [pc, #84]	; (801d678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801d624:	7823      	ldrb	r3, [r4, #0]
 801d626:	f3bf 8f5b 	dmb	ish
 801d62a:	07da      	lsls	r2, r3, #31
 801d62c:	4605      	mov	r5, r0
 801d62e:	d40b      	bmi.n	801d648 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d630:	4620      	mov	r0, r4
 801d632:	f007 fbc1 	bl	8024db8 <__cxa_guard_acquire>
 801d636:	b138      	cbz	r0, 801d648 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d638:	4620      	mov	r0, r4
 801d63a:	f007 fbc9 	bl	8024dd0 <__cxa_guard_release>
 801d63e:	4a0f      	ldr	r2, [pc, #60]	; (801d67c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d640:	490f      	ldr	r1, [pc, #60]	; (801d680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801d642:	4810      	ldr	r0, [pc, #64]	; (801d684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d644:	f007 fbae 	bl	8024da4 <__aeabi_atexit>
 801d648:	4c0f      	ldr	r4, [pc, #60]	; (801d688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801d64a:	7823      	ldrb	r3, [r4, #0]
 801d64c:	f3bf 8f5b 	dmb	ish
 801d650:	07db      	lsls	r3, r3, #31
 801d652:	d40b      	bmi.n	801d66c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d654:	4620      	mov	r0, r4
 801d656:	f007 fbaf 	bl	8024db8 <__cxa_guard_acquire>
 801d65a:	b138      	cbz	r0, 801d66c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d65c:	4620      	mov	r0, r4
 801d65e:	f007 fbb7 	bl	8024dd0 <__cxa_guard_release>
 801d662:	4a06      	ldr	r2, [pc, #24]	; (801d67c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d664:	4909      	ldr	r1, [pc, #36]	; (801d68c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801d666:	480a      	ldr	r0, [pc, #40]	; (801d690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d668:	f007 fb9c 	bl	8024da4 <__aeabi_atexit>
 801d66c:	4b05      	ldr	r3, [pc, #20]	; (801d684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d66e:	612b      	str	r3, [r5, #16]
 801d670:	4b07      	ldr	r3, [pc, #28]	; (801d690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d672:	616b      	str	r3, [r5, #20]
 801d674:	bd38      	pop	{r3, r4, r5, pc}
 801d676:	bf00      	nop
 801d678:	20001444 	.word	0x20001444
 801d67c:	20000000 	.word	0x20000000
 801d680:	0801bcd7 	.word	0x0801bcd7
 801d684:	20000078 	.word	0x20000078
 801d688:	20001448 	.word	0x20001448
 801d68c:	0801bcd5 	.word	0x0801bcd5
 801d690:	2000007c 	.word	0x2000007c

0801d694 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801d694:	b538      	push	{r3, r4, r5, lr}
 801d696:	4c15      	ldr	r4, [pc, #84]	; (801d6ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801d698:	7823      	ldrb	r3, [r4, #0]
 801d69a:	f3bf 8f5b 	dmb	ish
 801d69e:	07da      	lsls	r2, r3, #31
 801d6a0:	4605      	mov	r5, r0
 801d6a2:	d40b      	bmi.n	801d6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	f007 fb87 	bl	8024db8 <__cxa_guard_acquire>
 801d6aa:	b138      	cbz	r0, 801d6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	f007 fb8f 	bl	8024dd0 <__cxa_guard_release>
 801d6b2:	4a0f      	ldr	r2, [pc, #60]	; (801d6f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d6b4:	490f      	ldr	r1, [pc, #60]	; (801d6f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801d6b6:	4810      	ldr	r0, [pc, #64]	; (801d6f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d6b8:	f007 fb74 	bl	8024da4 <__aeabi_atexit>
 801d6bc:	4c0f      	ldr	r4, [pc, #60]	; (801d6fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801d6be:	7823      	ldrb	r3, [r4, #0]
 801d6c0:	f3bf 8f5b 	dmb	ish
 801d6c4:	07db      	lsls	r3, r3, #31
 801d6c6:	d40b      	bmi.n	801d6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	f007 fb75 	bl	8024db8 <__cxa_guard_acquire>
 801d6ce:	b138      	cbz	r0, 801d6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d6d0:	4620      	mov	r0, r4
 801d6d2:	f007 fb7d 	bl	8024dd0 <__cxa_guard_release>
 801d6d6:	4a06      	ldr	r2, [pc, #24]	; (801d6f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d6d8:	4909      	ldr	r1, [pc, #36]	; (801d700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801d6da:	480a      	ldr	r0, [pc, #40]	; (801d704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d6dc:	f007 fb62 	bl	8024da4 <__aeabi_atexit>
 801d6e0:	4b05      	ldr	r3, [pc, #20]	; (801d6f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d6e2:	60ab      	str	r3, [r5, #8]
 801d6e4:	4b07      	ldr	r3, [pc, #28]	; (801d704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d6e6:	60eb      	str	r3, [r5, #12]
 801d6e8:	bd38      	pop	{r3, r4, r5, pc}
 801d6ea:	bf00      	nop
 801d6ec:	2000141c 	.word	0x2000141c
 801d6f0:	20000000 	.word	0x20000000
 801d6f4:	0801bcdb 	.word	0x0801bcdb
 801d6f8:	20000050 	.word	0x20000050
 801d6fc:	20001420 	.word	0x20001420
 801d700:	0801bcd9 	.word	0x0801bcd9
 801d704:	20000054 	.word	0x20000054

0801d708 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801d708:	b510      	push	{r4, lr}
 801d70a:	4604      	mov	r4, r0
 801d70c:	f7ff ff88 	bl	801d620 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801d710:	4620      	mov	r0, r4
 801d712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d716:	f7ff bfbd 	b.w	801d694 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801d71c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d71c:	b538      	push	{r3, r4, r5, lr}
 801d71e:	4c15      	ldr	r4, [pc, #84]	; (801d774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d720:	7823      	ldrb	r3, [r4, #0]
 801d722:	f3bf 8f5b 	dmb	ish
 801d726:	07da      	lsls	r2, r3, #31
 801d728:	4605      	mov	r5, r0
 801d72a:	d40b      	bmi.n	801d744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d72c:	4620      	mov	r0, r4
 801d72e:	f007 fb43 	bl	8024db8 <__cxa_guard_acquire>
 801d732:	b138      	cbz	r0, 801d744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d734:	4620      	mov	r0, r4
 801d736:	f007 fb4b 	bl	8024dd0 <__cxa_guard_release>
 801d73a:	4a0f      	ldr	r2, [pc, #60]	; (801d778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d73c:	490f      	ldr	r1, [pc, #60]	; (801d77c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d73e:	4810      	ldr	r0, [pc, #64]	; (801d780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d740:	f007 fb30 	bl	8024da4 <__aeabi_atexit>
 801d744:	4c0f      	ldr	r4, [pc, #60]	; (801d784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d746:	7823      	ldrb	r3, [r4, #0]
 801d748:	f3bf 8f5b 	dmb	ish
 801d74c:	07db      	lsls	r3, r3, #31
 801d74e:	d40b      	bmi.n	801d768 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d750:	4620      	mov	r0, r4
 801d752:	f007 fb31 	bl	8024db8 <__cxa_guard_acquire>
 801d756:	b138      	cbz	r0, 801d768 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d758:	4620      	mov	r0, r4
 801d75a:	f007 fb39 	bl	8024dd0 <__cxa_guard_release>
 801d75e:	4a06      	ldr	r2, [pc, #24]	; (801d778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d760:	4909      	ldr	r1, [pc, #36]	; (801d788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d762:	480a      	ldr	r0, [pc, #40]	; (801d78c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d764:	f007 fb1e 	bl	8024da4 <__aeabi_atexit>
 801d768:	4b05      	ldr	r3, [pc, #20]	; (801d780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d76a:	622b      	str	r3, [r5, #32]
 801d76c:	4b07      	ldr	r3, [pc, #28]	; (801d78c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d76e:	626b      	str	r3, [r5, #36]	; 0x24
 801d770:	bd38      	pop	{r3, r4, r5, pc}
 801d772:	bf00      	nop
 801d774:	2000144c 	.word	0x2000144c
 801d778:	20000000 	.word	0x20000000
 801d77c:	0801bccf 	.word	0x0801bccf
 801d780:	20000080 	.word	0x20000080
 801d784:	20001450 	.word	0x20001450
 801d788:	0801bccd 	.word	0x0801bccd
 801d78c:	20000084 	.word	0x20000084

0801d790 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d790:	b538      	push	{r3, r4, r5, lr}
 801d792:	4c15      	ldr	r4, [pc, #84]	; (801d7e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d794:	7823      	ldrb	r3, [r4, #0]
 801d796:	f3bf 8f5b 	dmb	ish
 801d79a:	07da      	lsls	r2, r3, #31
 801d79c:	4605      	mov	r5, r0
 801d79e:	d40b      	bmi.n	801d7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	f007 fb09 	bl	8024db8 <__cxa_guard_acquire>
 801d7a6:	b138      	cbz	r0, 801d7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d7a8:	4620      	mov	r0, r4
 801d7aa:	f007 fb11 	bl	8024dd0 <__cxa_guard_release>
 801d7ae:	4a0f      	ldr	r2, [pc, #60]	; (801d7ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d7b0:	490f      	ldr	r1, [pc, #60]	; (801d7f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d7b2:	4810      	ldr	r0, [pc, #64]	; (801d7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d7b4:	f007 faf6 	bl	8024da4 <__aeabi_atexit>
 801d7b8:	4c0f      	ldr	r4, [pc, #60]	; (801d7f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d7ba:	7823      	ldrb	r3, [r4, #0]
 801d7bc:	f3bf 8f5b 	dmb	ish
 801d7c0:	07db      	lsls	r3, r3, #31
 801d7c2:	d40b      	bmi.n	801d7dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d7c4:	4620      	mov	r0, r4
 801d7c6:	f007 faf7 	bl	8024db8 <__cxa_guard_acquire>
 801d7ca:	b138      	cbz	r0, 801d7dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f007 faff 	bl	8024dd0 <__cxa_guard_release>
 801d7d2:	4a06      	ldr	r2, [pc, #24]	; (801d7ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d7d4:	4909      	ldr	r1, [pc, #36]	; (801d7fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d7d6:	480a      	ldr	r0, [pc, #40]	; (801d800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d7d8:	f007 fae4 	bl	8024da4 <__aeabi_atexit>
 801d7dc:	4b05      	ldr	r3, [pc, #20]	; (801d7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d7de:	61ab      	str	r3, [r5, #24]
 801d7e0:	4b07      	ldr	r3, [pc, #28]	; (801d800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d7e2:	61eb      	str	r3, [r5, #28]
 801d7e4:	bd38      	pop	{r3, r4, r5, pc}
 801d7e6:	bf00      	nop
 801d7e8:	20001424 	.word	0x20001424
 801d7ec:	20000000 	.word	0x20000000
 801d7f0:	0801bcd3 	.word	0x0801bcd3
 801d7f4:	20000058 	.word	0x20000058
 801d7f8:	20001428 	.word	0x20001428
 801d7fc:	0801bcd1 	.word	0x0801bcd1
 801d800:	2000005c 	.word	0x2000005c

0801d804 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801d804:	b510      	push	{r4, lr}
 801d806:	4604      	mov	r4, r0
 801d808:	f7ff ff88 	bl	801d71c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d80c:	4620      	mov	r0, r4
 801d80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d812:	f7ff bfbd 	b.w	801d790 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d818 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d818:	b538      	push	{r3, r4, r5, lr}
 801d81a:	4c15      	ldr	r4, [pc, #84]	; (801d870 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d81c:	7823      	ldrb	r3, [r4, #0]
 801d81e:	f3bf 8f5b 	dmb	ish
 801d822:	07da      	lsls	r2, r3, #31
 801d824:	4605      	mov	r5, r0
 801d826:	d40b      	bmi.n	801d840 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d828:	4620      	mov	r0, r4
 801d82a:	f007 fac5 	bl	8024db8 <__cxa_guard_acquire>
 801d82e:	b138      	cbz	r0, 801d840 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d830:	4620      	mov	r0, r4
 801d832:	f007 facd 	bl	8024dd0 <__cxa_guard_release>
 801d836:	4a0f      	ldr	r2, [pc, #60]	; (801d874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d838:	490f      	ldr	r1, [pc, #60]	; (801d878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d83a:	4810      	ldr	r0, [pc, #64]	; (801d87c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d83c:	f007 fab2 	bl	8024da4 <__aeabi_atexit>
 801d840:	4c0f      	ldr	r4, [pc, #60]	; (801d880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d842:	7823      	ldrb	r3, [r4, #0]
 801d844:	f3bf 8f5b 	dmb	ish
 801d848:	07db      	lsls	r3, r3, #31
 801d84a:	d40b      	bmi.n	801d864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d84c:	4620      	mov	r0, r4
 801d84e:	f007 fab3 	bl	8024db8 <__cxa_guard_acquire>
 801d852:	b138      	cbz	r0, 801d864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d854:	4620      	mov	r0, r4
 801d856:	f007 fabb 	bl	8024dd0 <__cxa_guard_release>
 801d85a:	4a06      	ldr	r2, [pc, #24]	; (801d874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d85c:	4909      	ldr	r1, [pc, #36]	; (801d884 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d85e:	480a      	ldr	r0, [pc, #40]	; (801d888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d860:	f007 faa0 	bl	8024da4 <__aeabi_atexit>
 801d864:	4b05      	ldr	r3, [pc, #20]	; (801d87c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d866:	632b      	str	r3, [r5, #48]	; 0x30
 801d868:	4b07      	ldr	r3, [pc, #28]	; (801d888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d86a:	636b      	str	r3, [r5, #52]	; 0x34
 801d86c:	bd38      	pop	{r3, r4, r5, pc}
 801d86e:	bf00      	nop
 801d870:	2000145c 	.word	0x2000145c
 801d874:	20000000 	.word	0x20000000
 801d878:	0801bcc7 	.word	0x0801bcc7
 801d87c:	20000090 	.word	0x20000090
 801d880:	20001460 	.word	0x20001460
 801d884:	0801bcc5 	.word	0x0801bcc5
 801d888:	20000094 	.word	0x20000094

0801d88c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d88c:	b538      	push	{r3, r4, r5, lr}
 801d88e:	4c15      	ldr	r4, [pc, #84]	; (801d8e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d890:	7823      	ldrb	r3, [r4, #0]
 801d892:	f3bf 8f5b 	dmb	ish
 801d896:	07da      	lsls	r2, r3, #31
 801d898:	4605      	mov	r5, r0
 801d89a:	d40b      	bmi.n	801d8b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d89c:	4620      	mov	r0, r4
 801d89e:	f007 fa8b 	bl	8024db8 <__cxa_guard_acquire>
 801d8a2:	b138      	cbz	r0, 801d8b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	f007 fa93 	bl	8024dd0 <__cxa_guard_release>
 801d8aa:	4a0f      	ldr	r2, [pc, #60]	; (801d8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d8ac:	490f      	ldr	r1, [pc, #60]	; (801d8ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d8ae:	4810      	ldr	r0, [pc, #64]	; (801d8f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d8b0:	f007 fa78 	bl	8024da4 <__aeabi_atexit>
 801d8b4:	4c0f      	ldr	r4, [pc, #60]	; (801d8f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d8b6:	7823      	ldrb	r3, [r4, #0]
 801d8b8:	f3bf 8f5b 	dmb	ish
 801d8bc:	07db      	lsls	r3, r3, #31
 801d8be:	d40b      	bmi.n	801d8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	f007 fa79 	bl	8024db8 <__cxa_guard_acquire>
 801d8c6:	b138      	cbz	r0, 801d8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f007 fa81 	bl	8024dd0 <__cxa_guard_release>
 801d8ce:	4a06      	ldr	r2, [pc, #24]	; (801d8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d8d0:	4909      	ldr	r1, [pc, #36]	; (801d8f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d8d2:	480a      	ldr	r0, [pc, #40]	; (801d8fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d8d4:	f007 fa66 	bl	8024da4 <__aeabi_atexit>
 801d8d8:	4b05      	ldr	r3, [pc, #20]	; (801d8f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d8da:	62ab      	str	r3, [r5, #40]	; 0x28
 801d8dc:	4b07      	ldr	r3, [pc, #28]	; (801d8fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d8de:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d8e0:	bd38      	pop	{r3, r4, r5, pc}
 801d8e2:	bf00      	nop
 801d8e4:	2000142c 	.word	0x2000142c
 801d8e8:	20000000 	.word	0x20000000
 801d8ec:	0801bccb 	.word	0x0801bccb
 801d8f0:	20000060 	.word	0x20000060
 801d8f4:	20001430 	.word	0x20001430
 801d8f8:	0801bcc9 	.word	0x0801bcc9
 801d8fc:	20000064 	.word	0x20000064

0801d900 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d900:	b510      	push	{r4, lr}
 801d902:	4604      	mov	r4, r0
 801d904:	f7ff ff88 	bl	801d818 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d908:	4620      	mov	r0, r4
 801d90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d90e:	f7ff bfbd 	b.w	801d88c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d914 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801d914:	b538      	push	{r3, r4, r5, lr}
 801d916:	4c15      	ldr	r4, [pc, #84]	; (801d96c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801d918:	7823      	ldrb	r3, [r4, #0]
 801d91a:	f3bf 8f5b 	dmb	ish
 801d91e:	07da      	lsls	r2, r3, #31
 801d920:	4605      	mov	r5, r0
 801d922:	d40b      	bmi.n	801d93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d924:	4620      	mov	r0, r4
 801d926:	f007 fa47 	bl	8024db8 <__cxa_guard_acquire>
 801d92a:	b138      	cbz	r0, 801d93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d92c:	4620      	mov	r0, r4
 801d92e:	f007 fa4f 	bl	8024dd0 <__cxa_guard_release>
 801d932:	4a0f      	ldr	r2, [pc, #60]	; (801d970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d934:	490f      	ldr	r1, [pc, #60]	; (801d974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801d936:	4810      	ldr	r0, [pc, #64]	; (801d978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d938:	f007 fa34 	bl	8024da4 <__aeabi_atexit>
 801d93c:	4c0f      	ldr	r4, [pc, #60]	; (801d97c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801d93e:	7823      	ldrb	r3, [r4, #0]
 801d940:	f3bf 8f5b 	dmb	ish
 801d944:	07db      	lsls	r3, r3, #31
 801d946:	d40b      	bmi.n	801d960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d948:	4620      	mov	r0, r4
 801d94a:	f007 fa35 	bl	8024db8 <__cxa_guard_acquire>
 801d94e:	b138      	cbz	r0, 801d960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d950:	4620      	mov	r0, r4
 801d952:	f007 fa3d 	bl	8024dd0 <__cxa_guard_release>
 801d956:	4a06      	ldr	r2, [pc, #24]	; (801d970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d958:	4909      	ldr	r1, [pc, #36]	; (801d980 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801d95a:	480a      	ldr	r0, [pc, #40]	; (801d984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d95c:	f007 fa22 	bl	8024da4 <__aeabi_atexit>
 801d960:	4b05      	ldr	r3, [pc, #20]	; (801d978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d962:	652b      	str	r3, [r5, #80]	; 0x50
 801d964:	4b07      	ldr	r3, [pc, #28]	; (801d984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d966:	656b      	str	r3, [r5, #84]	; 0x54
 801d968:	bd38      	pop	{r3, r4, r5, pc}
 801d96a:	bf00      	nop
 801d96c:	20001464 	.word	0x20001464
 801d970:	20000000 	.word	0x20000000
 801d974:	0801bcb7 	.word	0x0801bcb7
 801d978:	20000098 	.word	0x20000098
 801d97c:	20001468 	.word	0x20001468
 801d980:	0801bcb5 	.word	0x0801bcb5
 801d984:	2000009c 	.word	0x2000009c

0801d988 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801d988:	b538      	push	{r3, r4, r5, lr}
 801d98a:	4c15      	ldr	r4, [pc, #84]	; (801d9e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801d98c:	7823      	ldrb	r3, [r4, #0]
 801d98e:	f3bf 8f5b 	dmb	ish
 801d992:	07da      	lsls	r2, r3, #31
 801d994:	4605      	mov	r5, r0
 801d996:	d40b      	bmi.n	801d9b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d998:	4620      	mov	r0, r4
 801d99a:	f007 fa0d 	bl	8024db8 <__cxa_guard_acquire>
 801d99e:	b138      	cbz	r0, 801d9b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	f007 fa15 	bl	8024dd0 <__cxa_guard_release>
 801d9a6:	4a0f      	ldr	r2, [pc, #60]	; (801d9e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d9a8:	490f      	ldr	r1, [pc, #60]	; (801d9e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801d9aa:	4810      	ldr	r0, [pc, #64]	; (801d9ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d9ac:	f007 f9fa 	bl	8024da4 <__aeabi_atexit>
 801d9b0:	4c0f      	ldr	r4, [pc, #60]	; (801d9f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801d9b2:	7823      	ldrb	r3, [r4, #0]
 801d9b4:	f3bf 8f5b 	dmb	ish
 801d9b8:	07db      	lsls	r3, r3, #31
 801d9ba:	d40b      	bmi.n	801d9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d9bc:	4620      	mov	r0, r4
 801d9be:	f007 f9fb 	bl	8024db8 <__cxa_guard_acquire>
 801d9c2:	b138      	cbz	r0, 801d9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d9c4:	4620      	mov	r0, r4
 801d9c6:	f007 fa03 	bl	8024dd0 <__cxa_guard_release>
 801d9ca:	4a06      	ldr	r2, [pc, #24]	; (801d9e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d9cc:	4909      	ldr	r1, [pc, #36]	; (801d9f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801d9ce:	480a      	ldr	r0, [pc, #40]	; (801d9f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d9d0:	f007 f9e8 	bl	8024da4 <__aeabi_atexit>
 801d9d4:	4b05      	ldr	r3, [pc, #20]	; (801d9ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d9d6:	64ab      	str	r3, [r5, #72]	; 0x48
 801d9d8:	4b07      	ldr	r3, [pc, #28]	; (801d9f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d9da:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d9dc:	bd38      	pop	{r3, r4, r5, pc}
 801d9de:	bf00      	nop
 801d9e0:	2000146c 	.word	0x2000146c
 801d9e4:	20000000 	.word	0x20000000
 801d9e8:	0801bcbb 	.word	0x0801bcbb
 801d9ec:	200000a0 	.word	0x200000a0
 801d9f0:	20001470 	.word	0x20001470
 801d9f4:	0801bcb9 	.word	0x0801bcb9
 801d9f8:	200000a4 	.word	0x200000a4

0801d9fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801d9fc:	b538      	push	{r3, r4, r5, lr}
 801d9fe:	4c15      	ldr	r4, [pc, #84]	; (801da54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801da00:	7823      	ldrb	r3, [r4, #0]
 801da02:	f3bf 8f5b 	dmb	ish
 801da06:	07da      	lsls	r2, r3, #31
 801da08:	4605      	mov	r5, r0
 801da0a:	d40b      	bmi.n	801da24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801da0c:	4620      	mov	r0, r4
 801da0e:	f007 f9d3 	bl	8024db8 <__cxa_guard_acquire>
 801da12:	b138      	cbz	r0, 801da24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801da14:	4620      	mov	r0, r4
 801da16:	f007 f9db 	bl	8024dd0 <__cxa_guard_release>
 801da1a:	4a0f      	ldr	r2, [pc, #60]	; (801da58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801da1c:	490f      	ldr	r1, [pc, #60]	; (801da5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801da1e:	4810      	ldr	r0, [pc, #64]	; (801da60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801da20:	f007 f9c0 	bl	8024da4 <__aeabi_atexit>
 801da24:	4c0f      	ldr	r4, [pc, #60]	; (801da64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801da26:	7823      	ldrb	r3, [r4, #0]
 801da28:	f3bf 8f5b 	dmb	ish
 801da2c:	07db      	lsls	r3, r3, #31
 801da2e:	d40b      	bmi.n	801da48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801da30:	4620      	mov	r0, r4
 801da32:	f007 f9c1 	bl	8024db8 <__cxa_guard_acquire>
 801da36:	b138      	cbz	r0, 801da48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801da38:	4620      	mov	r0, r4
 801da3a:	f007 f9c9 	bl	8024dd0 <__cxa_guard_release>
 801da3e:	4a06      	ldr	r2, [pc, #24]	; (801da58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801da40:	4909      	ldr	r1, [pc, #36]	; (801da68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801da42:	480a      	ldr	r0, [pc, #40]	; (801da6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801da44:	f007 f9ae 	bl	8024da4 <__aeabi_atexit>
 801da48:	4b05      	ldr	r3, [pc, #20]	; (801da60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801da4a:	642b      	str	r3, [r5, #64]	; 0x40
 801da4c:	4b07      	ldr	r3, [pc, #28]	; (801da6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801da4e:	646b      	str	r3, [r5, #68]	; 0x44
 801da50:	bd38      	pop	{r3, r4, r5, pc}
 801da52:	bf00      	nop
 801da54:	20001434 	.word	0x20001434
 801da58:	20000000 	.word	0x20000000
 801da5c:	0801bcbf 	.word	0x0801bcbf
 801da60:	20000068 	.word	0x20000068
 801da64:	20001438 	.word	0x20001438
 801da68:	0801bcbd 	.word	0x0801bcbd
 801da6c:	2000006c 	.word	0x2000006c

0801da70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801da70:	b538      	push	{r3, r4, r5, lr}
 801da72:	4c15      	ldr	r4, [pc, #84]	; (801dac8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801da74:	7823      	ldrb	r3, [r4, #0]
 801da76:	f3bf 8f5b 	dmb	ish
 801da7a:	07da      	lsls	r2, r3, #31
 801da7c:	4605      	mov	r5, r0
 801da7e:	d40b      	bmi.n	801da98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801da80:	4620      	mov	r0, r4
 801da82:	f007 f999 	bl	8024db8 <__cxa_guard_acquire>
 801da86:	b138      	cbz	r0, 801da98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801da88:	4620      	mov	r0, r4
 801da8a:	f007 f9a1 	bl	8024dd0 <__cxa_guard_release>
 801da8e:	4a0f      	ldr	r2, [pc, #60]	; (801dacc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801da90:	490f      	ldr	r1, [pc, #60]	; (801dad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801da92:	4810      	ldr	r0, [pc, #64]	; (801dad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801da94:	f007 f986 	bl	8024da4 <__aeabi_atexit>
 801da98:	4c0f      	ldr	r4, [pc, #60]	; (801dad8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801da9a:	7823      	ldrb	r3, [r4, #0]
 801da9c:	f3bf 8f5b 	dmb	ish
 801daa0:	07db      	lsls	r3, r3, #31
 801daa2:	d40b      	bmi.n	801dabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801daa4:	4620      	mov	r0, r4
 801daa6:	f007 f987 	bl	8024db8 <__cxa_guard_acquire>
 801daaa:	b138      	cbz	r0, 801dabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801daac:	4620      	mov	r0, r4
 801daae:	f007 f98f 	bl	8024dd0 <__cxa_guard_release>
 801dab2:	4a06      	ldr	r2, [pc, #24]	; (801dacc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801dab4:	4909      	ldr	r1, [pc, #36]	; (801dadc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801dab6:	480a      	ldr	r0, [pc, #40]	; (801dae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801dab8:	f007 f974 	bl	8024da4 <__aeabi_atexit>
 801dabc:	4b05      	ldr	r3, [pc, #20]	; (801dad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801dabe:	63ab      	str	r3, [r5, #56]	; 0x38
 801dac0:	4b07      	ldr	r3, [pc, #28]	; (801dae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801dac2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801dac4:	bd38      	pop	{r3, r4, r5, pc}
 801dac6:	bf00      	nop
 801dac8:	20001454 	.word	0x20001454
 801dacc:	20000000 	.word	0x20000000
 801dad0:	0801bcc3 	.word	0x0801bcc3
 801dad4:	20000088 	.word	0x20000088
 801dad8:	20001458 	.word	0x20001458
 801dadc:	0801bcc1 	.word	0x0801bcc1
 801dae0:	2000008c 	.word	0x2000008c

0801dae4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801dae4:	b510      	push	{r4, lr}
 801dae6:	4604      	mov	r4, r0
 801dae8:	f7ff ff14 	bl	801d914 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801daec:	4620      	mov	r0, r4
 801daee:	f7ff ff85 	bl	801d9fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801daf2:	4620      	mov	r0, r4
 801daf4:	f7ff ff48 	bl	801d988 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801daf8:	4620      	mov	r0, r4
 801dafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dafe:	f7ff bfb7 	b.w	801da70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801db04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801db04:	b538      	push	{r3, r4, r5, lr}
 801db06:	4c15      	ldr	r4, [pc, #84]	; (801db5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801db08:	7823      	ldrb	r3, [r4, #0]
 801db0a:	f3bf 8f5b 	dmb	ish
 801db0e:	07da      	lsls	r2, r3, #31
 801db10:	4605      	mov	r5, r0
 801db12:	d40b      	bmi.n	801db2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801db14:	4620      	mov	r0, r4
 801db16:	f007 f94f 	bl	8024db8 <__cxa_guard_acquire>
 801db1a:	b138      	cbz	r0, 801db2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801db1c:	4620      	mov	r0, r4
 801db1e:	f007 f957 	bl	8024dd0 <__cxa_guard_release>
 801db22:	4a0f      	ldr	r2, [pc, #60]	; (801db60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801db24:	490f      	ldr	r1, [pc, #60]	; (801db64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801db26:	4810      	ldr	r0, [pc, #64]	; (801db68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801db28:	f007 f93c 	bl	8024da4 <__aeabi_atexit>
 801db2c:	4c0f      	ldr	r4, [pc, #60]	; (801db6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801db2e:	7823      	ldrb	r3, [r4, #0]
 801db30:	f3bf 8f5b 	dmb	ish
 801db34:	07db      	lsls	r3, r3, #31
 801db36:	d40b      	bmi.n	801db50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801db38:	4620      	mov	r0, r4
 801db3a:	f007 f93d 	bl	8024db8 <__cxa_guard_acquire>
 801db3e:	b138      	cbz	r0, 801db50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801db40:	4620      	mov	r0, r4
 801db42:	f007 f945 	bl	8024dd0 <__cxa_guard_release>
 801db46:	4a06      	ldr	r2, [pc, #24]	; (801db60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801db48:	4909      	ldr	r1, [pc, #36]	; (801db70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801db4a:	480a      	ldr	r0, [pc, #40]	; (801db74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801db4c:	f007 f92a 	bl	8024da4 <__aeabi_atexit>
 801db50:	4b05      	ldr	r3, [pc, #20]	; (801db68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801db52:	662b      	str	r3, [r5, #96]	; 0x60
 801db54:	4b07      	ldr	r3, [pc, #28]	; (801db74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801db56:	666b      	str	r3, [r5, #100]	; 0x64
 801db58:	bd38      	pop	{r3, r4, r5, pc}
 801db5a:	bf00      	nop
 801db5c:	2000143c 	.word	0x2000143c
 801db60:	20000000 	.word	0x20000000
 801db64:	0801bcaf 	.word	0x0801bcaf
 801db68:	20000070 	.word	0x20000070
 801db6c:	20001440 	.word	0x20001440
 801db70:	0801bcad 	.word	0x0801bcad
 801db74:	20000074 	.word	0x20000074

0801db78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801db78:	b538      	push	{r3, r4, r5, lr}
 801db7a:	4c15      	ldr	r4, [pc, #84]	; (801dbd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801db7c:	7823      	ldrb	r3, [r4, #0]
 801db7e:	f3bf 8f5b 	dmb	ish
 801db82:	07da      	lsls	r2, r3, #31
 801db84:	4605      	mov	r5, r0
 801db86:	d40b      	bmi.n	801dba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801db88:	4620      	mov	r0, r4
 801db8a:	f007 f915 	bl	8024db8 <__cxa_guard_acquire>
 801db8e:	b138      	cbz	r0, 801dba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801db90:	4620      	mov	r0, r4
 801db92:	f007 f91d 	bl	8024dd0 <__cxa_guard_release>
 801db96:	4a0f      	ldr	r2, [pc, #60]	; (801dbd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801db98:	490f      	ldr	r1, [pc, #60]	; (801dbd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801db9a:	4810      	ldr	r0, [pc, #64]	; (801dbdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801db9c:	f007 f902 	bl	8024da4 <__aeabi_atexit>
 801dba0:	4c0f      	ldr	r4, [pc, #60]	; (801dbe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801dba2:	7823      	ldrb	r3, [r4, #0]
 801dba4:	f3bf 8f5b 	dmb	ish
 801dba8:	07db      	lsls	r3, r3, #31
 801dbaa:	d40b      	bmi.n	801dbc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dbac:	4620      	mov	r0, r4
 801dbae:	f007 f903 	bl	8024db8 <__cxa_guard_acquire>
 801dbb2:	b138      	cbz	r0, 801dbc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dbb4:	4620      	mov	r0, r4
 801dbb6:	f007 f90b 	bl	8024dd0 <__cxa_guard_release>
 801dbba:	4a06      	ldr	r2, [pc, #24]	; (801dbd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801dbbc:	4909      	ldr	r1, [pc, #36]	; (801dbe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801dbbe:	480a      	ldr	r0, [pc, #40]	; (801dbe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dbc0:	f007 f8f0 	bl	8024da4 <__aeabi_atexit>
 801dbc4:	4b05      	ldr	r3, [pc, #20]	; (801dbdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dbc6:	65ab      	str	r3, [r5, #88]	; 0x58
 801dbc8:	4b07      	ldr	r3, [pc, #28]	; (801dbe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dbca:	65eb      	str	r3, [r5, #92]	; 0x5c
 801dbcc:	bd38      	pop	{r3, r4, r5, pc}
 801dbce:	bf00      	nop
 801dbd0:	20001414 	.word	0x20001414
 801dbd4:	20000000 	.word	0x20000000
 801dbd8:	0801bcb3 	.word	0x0801bcb3
 801dbdc:	20000048 	.word	0x20000048
 801dbe0:	20001418 	.word	0x20001418
 801dbe4:	0801bcb1 	.word	0x0801bcb1
 801dbe8:	2000004c 	.word	0x2000004c

0801dbec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801dbec:	b510      	push	{r4, lr}
 801dbee:	4604      	mov	r4, r0
 801dbf0:	f7ff ff88 	bl	801db04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbfa:	f7ff bfbd 	b.w	801db78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801dc00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801dc00:	b538      	push	{r3, r4, r5, lr}
 801dc02:	4c15      	ldr	r4, [pc, #84]	; (801dc58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801dc04:	7823      	ldrb	r3, [r4, #0]
 801dc06:	f3bf 8f5b 	dmb	ish
 801dc0a:	07da      	lsls	r2, r3, #31
 801dc0c:	4605      	mov	r5, r0
 801dc0e:	d40b      	bmi.n	801dc28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dc10:	4620      	mov	r0, r4
 801dc12:	f007 f8d1 	bl	8024db8 <__cxa_guard_acquire>
 801dc16:	b138      	cbz	r0, 801dc28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dc18:	4620      	mov	r0, r4
 801dc1a:	f007 f8d9 	bl	8024dd0 <__cxa_guard_release>
 801dc1e:	4a0f      	ldr	r2, [pc, #60]	; (801dc5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dc20:	490f      	ldr	r1, [pc, #60]	; (801dc60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801dc22:	4810      	ldr	r0, [pc, #64]	; (801dc64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dc24:	f007 f8be 	bl	8024da4 <__aeabi_atexit>
 801dc28:	4c0f      	ldr	r4, [pc, #60]	; (801dc68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801dc2a:	7823      	ldrb	r3, [r4, #0]
 801dc2c:	f3bf 8f5b 	dmb	ish
 801dc30:	07db      	lsls	r3, r3, #31
 801dc32:	d40b      	bmi.n	801dc4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dc34:	4620      	mov	r0, r4
 801dc36:	f007 f8bf 	bl	8024db8 <__cxa_guard_acquire>
 801dc3a:	b138      	cbz	r0, 801dc4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dc3c:	4620      	mov	r0, r4
 801dc3e:	f007 f8c7 	bl	8024dd0 <__cxa_guard_release>
 801dc42:	4a06      	ldr	r2, [pc, #24]	; (801dc5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dc44:	4909      	ldr	r1, [pc, #36]	; (801dc6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801dc46:	480a      	ldr	r0, [pc, #40]	; (801dc70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801dc48:	f007 f8ac 	bl	8024da4 <__aeabi_atexit>
 801dc4c:	4b05      	ldr	r3, [pc, #20]	; (801dc64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dc4e:	672b      	str	r3, [r5, #112]	; 0x70
 801dc50:	4b07      	ldr	r3, [pc, #28]	; (801dc70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801dc52:	676b      	str	r3, [r5, #116]	; 0x74
 801dc54:	bd38      	pop	{r3, r4, r5, pc}
 801dc56:	bf00      	nop
 801dc58:	2000140c 	.word	0x2000140c
 801dc5c:	20000000 	.word	0x20000000
 801dc60:	0801bca7 	.word	0x0801bca7
 801dc64:	20000040 	.word	0x20000040
 801dc68:	20001410 	.word	0x20001410
 801dc6c:	0801bca5 	.word	0x0801bca5
 801dc70:	20000044 	.word	0x20000044

0801dc74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801dc74:	b538      	push	{r3, r4, r5, lr}
 801dc76:	4c15      	ldr	r4, [pc, #84]	; (801dccc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801dc78:	7823      	ldrb	r3, [r4, #0]
 801dc7a:	f3bf 8f5b 	dmb	ish
 801dc7e:	07da      	lsls	r2, r3, #31
 801dc80:	4605      	mov	r5, r0
 801dc82:	d40b      	bmi.n	801dc9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dc84:	4620      	mov	r0, r4
 801dc86:	f007 f897 	bl	8024db8 <__cxa_guard_acquire>
 801dc8a:	b138      	cbz	r0, 801dc9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f007 f89f 	bl	8024dd0 <__cxa_guard_release>
 801dc92:	4a0f      	ldr	r2, [pc, #60]	; (801dcd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dc94:	490f      	ldr	r1, [pc, #60]	; (801dcd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801dc96:	4810      	ldr	r0, [pc, #64]	; (801dcd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dc98:	f007 f884 	bl	8024da4 <__aeabi_atexit>
 801dc9c:	4c0f      	ldr	r4, [pc, #60]	; (801dcdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801dc9e:	7823      	ldrb	r3, [r4, #0]
 801dca0:	f3bf 8f5b 	dmb	ish
 801dca4:	07db      	lsls	r3, r3, #31
 801dca6:	d40b      	bmi.n	801dcc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dca8:	4620      	mov	r0, r4
 801dcaa:	f007 f885 	bl	8024db8 <__cxa_guard_acquire>
 801dcae:	b138      	cbz	r0, 801dcc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	f007 f88d 	bl	8024dd0 <__cxa_guard_release>
 801dcb6:	4a06      	ldr	r2, [pc, #24]	; (801dcd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801dcb8:	4909      	ldr	r1, [pc, #36]	; (801dce0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801dcba:	480a      	ldr	r0, [pc, #40]	; (801dce4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dcbc:	f007 f872 	bl	8024da4 <__aeabi_atexit>
 801dcc0:	4b05      	ldr	r3, [pc, #20]	; (801dcd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801dcc2:	66ab      	str	r3, [r5, #104]	; 0x68
 801dcc4:	4b07      	ldr	r3, [pc, #28]	; (801dce4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801dcc6:	66eb      	str	r3, [r5, #108]	; 0x6c
 801dcc8:	bd38      	pop	{r3, r4, r5, pc}
 801dcca:	bf00      	nop
 801dccc:	20001404 	.word	0x20001404
 801dcd0:	20000000 	.word	0x20000000
 801dcd4:	0801bcab 	.word	0x0801bcab
 801dcd8:	20000038 	.word	0x20000038
 801dcdc:	20001408 	.word	0x20001408
 801dce0:	0801bca9 	.word	0x0801bca9
 801dce4:	2000003c 	.word	0x2000003c

0801dce8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801dce8:	b510      	push	{r4, lr}
 801dcea:	4604      	mov	r4, r0
 801dcec:	f7ff ff88 	bl	801dc00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801dcf0:	4620      	mov	r0, r4
 801dcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcf6:	f7ff bfbd 	b.w	801dc74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801dcfa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801dcfa:	b510      	push	{r4, lr}
 801dcfc:	4604      	mov	r4, r0
 801dcfe:	f7ff fff3 	bl	801dce8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801dd02:	4620      	mov	r0, r4
 801dd04:	f7ff ff72 	bl	801dbec <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801dd08:	4620      	mov	r0, r4
 801dd0a:	f7ff fdf9 	bl	801d900 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801dd0e:	4620      	mov	r0, r4
 801dd10:	f7ff fcfa 	bl	801d708 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801dd14:	4620      	mov	r0, r4
 801dd16:	f7ff fd75 	bl	801d804 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801dd1a:	4620      	mov	r0, r4
 801dd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd20:	f7ff bee0 	b.w	801dae4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801dd24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801dd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd28:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801dd2c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801dd30:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dd34:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801dd38:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801dd3c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801dd40:	8808      	ldrh	r0, [r1, #0]
 801dd42:	fb0e 4708 	mla	r7, lr, r8, r4
 801dd46:	f1be 0f00 	cmp.w	lr, #0
 801dd4a:	eb02 0a07 	add.w	sl, r2, r7
 801dd4e:	db37      	blt.n	801ddc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dd50:	45f3      	cmp	fp, lr
 801dd52:	dd35      	ble.n	801ddc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801dd54:	2c00      	cmp	r4, #0
 801dd56:	db31      	blt.n	801ddbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dd58:	45a0      	cmp	r8, r4
 801dd5a:	dd2f      	ble.n	801ddbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801dd5c:	5dd2      	ldrb	r2, [r2, r7]
 801dd5e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801dd62:	1c62      	adds	r2, r4, #1
 801dd64:	d42f      	bmi.n	801ddc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd66:	4590      	cmp	r8, r2
 801dd68:	dd2d      	ble.n	801ddc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd6a:	b366      	cbz	r6, 801ddc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801dd6c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dd70:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801dd74:	f11e 0e01 	adds.w	lr, lr, #1
 801dd78:	d429      	bmi.n	801ddce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dd7a:	45f3      	cmp	fp, lr
 801dd7c:	dd27      	ble.n	801ddce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801dd7e:	f1bc 0f00 	cmp.w	ip, #0
 801dd82:	f000 80a0 	beq.w	801dec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801dd86:	2c00      	cmp	r4, #0
 801dd88:	db1f      	blt.n	801ddca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dd8a:	45a0      	cmp	r8, r4
 801dd8c:	dd1d      	ble.n	801ddca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801dd8e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801dd92:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801dd96:	3401      	adds	r4, #1
 801dd98:	d41c      	bmi.n	801ddd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dd9a:	45a0      	cmp	r8, r4
 801dd9c:	dd1a      	ble.n	801ddd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801dd9e:	b1de      	cbz	r6, 801ddd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801dda0:	44d0      	add	r8, sl
 801dda2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dda6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ddaa:	2e0f      	cmp	r6, #15
 801ddac:	d915      	bls.n	801ddda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801ddae:	4b49      	ldr	r3, [pc, #292]	; (801ded4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801ddb0:	4a49      	ldr	r2, [pc, #292]	; (801ded8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801ddb2:	484a      	ldr	r0, [pc, #296]	; (801dedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801ddb4:	f240 11ef 	movw	r1, #495	; 0x1ef
 801ddb8:	f007 f828 	bl	8024e0c <__assert_func>
 801ddbc:	4681      	mov	r9, r0
 801ddbe:	e7d0      	b.n	801dd62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801ddc0:	4607      	mov	r7, r0
 801ddc2:	4681      	mov	r9, r0
 801ddc4:	e7d6      	b.n	801dd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ddc6:	4607      	mov	r7, r0
 801ddc8:	e7d4      	b.n	801dd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ddca:	4686      	mov	lr, r0
 801ddcc:	e7e3      	b.n	801dd96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	4686      	mov	lr, r0
 801ddd2:	e7ea      	b.n	801ddaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	e7e8      	b.n	801ddaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ddd8:	4603      	mov	r3, r0
 801ddda:	f1bc 0f0f 	cmp.w	ip, #15
 801ddde:	d8e6      	bhi.n	801ddae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801dde0:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801dde4:	fb16 f80c 	smulbb	r8, r6, ip
 801dde8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ddec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ddf0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ddf4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801ddf8:	ea44 0909 	orr.w	r9, r4, r9
 801ddfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801de00:	f1cc 0410 	rsb	r4, ip, #16
 801de04:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801de08:	1ba4      	subs	r4, r4, r6
 801de0a:	041a      	lsls	r2, r3, #16
 801de0c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801de10:	ea4a 0707 	orr.w	r7, sl, r7
 801de14:	4377      	muls	r7, r6
 801de16:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801de1a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801de1e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801de22:	fb04 7409 	mla	r4, r4, r9, r7
 801de26:	4313      	orrs	r3, r2
 801de28:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801de2c:	fb08 4303 	mla	r3, r8, r3, r4
 801de30:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801de34:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801de38:	4322      	orrs	r2, r4
 801de3a:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801de3e:	fb0c 3202 	mla	r2, ip, r2, r3
 801de42:	0d53      	lsrs	r3, r2, #21
 801de44:	0952      	lsrs	r2, r2, #5
 801de46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801de4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801de4e:	431a      	orrs	r2, r3
 801de50:	b293      	uxth	r3, r2
 801de52:	b2af      	uxth	r7, r5
 801de54:	1202      	asrs	r2, r0, #8
 801de56:	43ed      	mvns	r5, r5
 801de58:	b2ed      	uxtb	r5, r5
 801de5a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801de5e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801de62:	fb12 f205 	smulbb	r2, r2, r5
 801de66:	10c6      	asrs	r6, r0, #3
 801de68:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de6c:	fb0c 2c07 	mla	ip, ip, r7, r2
 801de70:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de74:	10da      	asrs	r2, r3, #3
 801de76:	fb16 f605 	smulbb	r6, r6, r5
 801de7a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801de7e:	fb02 6207 	mla	r2, r2, r7, r6
 801de82:	b296      	uxth	r6, r2
 801de84:	00c2      	lsls	r2, r0, #3
 801de86:	00dc      	lsls	r4, r3, #3
 801de88:	b2d2      	uxtb	r2, r2
 801de8a:	b2e4      	uxtb	r4, r4
 801de8c:	fb12 f205 	smulbb	r2, r2, r5
 801de90:	fb04 2207 	mla	r2, r4, r7, r2
 801de94:	fa1f fc8c 	uxth.w	ip, ip
 801de98:	b292      	uxth	r2, r2
 801de9a:	f10c 0301 	add.w	r3, ip, #1
 801de9e:	1c50      	adds	r0, r2, #1
 801dea0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dea4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dea8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801deac:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801deb0:	4313      	orrs	r3, r2
 801deb2:	1c72      	adds	r2, r6, #1
 801deb4:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801deb8:	0952      	lsrs	r2, r2, #5
 801deba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801debe:	4313      	orrs	r3, r2
 801dec0:	800b      	strh	r3, [r1, #0]
 801dec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec6:	2e0f      	cmp	r6, #15
 801dec8:	f63f af71 	bhi.w	801ddae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801decc:	4603      	mov	r3, r0
 801dece:	4686      	mov	lr, r0
 801ded0:	e786      	b.n	801dde0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801ded2:	bf00      	nop
 801ded4:	08054484 	.word	0x08054484
 801ded8:	08054a86 	.word	0x08054a86
 801dedc:	0805450c 	.word	0x0805450c

0801dee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	ed2d 8b08 	vpush	{d8-d11}
 801dee8:	b09b      	sub	sp, #108	; 0x6c
 801deea:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 801deee:	9309      	str	r3, [sp, #36]	; 0x24
 801def0:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801def4:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 801def6:	930a      	str	r3, [sp, #40]	; 0x28
 801def8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801defc:	930e      	str	r3, [sp, #56]	; 0x38
 801defe:	910d      	str	r1, [sp, #52]	; 0x34
 801df00:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801df04:	9018      	str	r0, [sp, #96]	; 0x60
 801df06:	6870      	ldr	r0, [r6, #4]
 801df08:	9217      	str	r2, [sp, #92]	; 0x5c
 801df0a:	fb00 1303 	mla	r3, r0, r3, r1
 801df0e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801df10:	6831      	ldr	r1, [r6, #0]
 801df12:	6856      	ldr	r6, [r2, #4]
 801df14:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801df18:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801df1c:	6813      	ldr	r3, [r2, #0]
 801df1e:	930c      	str	r3, [sp, #48]	; 0x30
 801df20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df22:	43db      	mvns	r3, r3
 801df24:	b2db      	uxtb	r3, r3
 801df26:	eeb0 aa40 	vmov.f32	s20, s0
 801df2a:	eef0 9a60 	vmov.f32	s19, s1
 801df2e:	eeb0 9a41 	vmov.f32	s18, s2
 801df32:	eeb0 8a62 	vmov.f32	s16, s5
 801df36:	eef0 8a43 	vmov.f32	s17, s6
 801df3a:	eef0 ba44 	vmov.f32	s23, s8
 801df3e:	eeb0 ba64 	vmov.f32	s22, s9
 801df42:	eef0 aa45 	vmov.f32	s21, s10
 801df46:	3604      	adds	r6, #4
 801df48:	930b      	str	r3, [sp, #44]	; 0x2c
 801df4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	dc03      	bgt.n	801df58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801df50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801df52:	2b00      	cmp	r3, #0
 801df54:	f340 8215 	ble.w	801e382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801df58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	f340 8102 	ble.w	801e164 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801df60:	ea5f 4229 	movs.w	r2, r9, asr #16
 801df64:	ea4f 4328 	mov.w	r3, r8, asr #16
 801df68:	d42c      	bmi.n	801dfc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801df6a:	1c51      	adds	r1, r2, #1
 801df6c:	428c      	cmp	r4, r1
 801df6e:	dd2c      	ble.n	801dfca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df70:	2b00      	cmp	r3, #0
 801df72:	db2a      	blt.n	801dfca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df74:	980a      	ldr	r0, [sp, #40]	; 0x28
 801df76:	1c59      	adds	r1, r3, #1
 801df78:	4288      	cmp	r0, r1
 801df7a:	dd26      	ble.n	801dfca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801df7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df7e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801df80:	3b01      	subs	r3, #1
 801df82:	fb02 9203 	mla	r2, r2, r3, r9
 801df86:	1412      	asrs	r2, r2, #16
 801df88:	d429      	bmi.n	801dfde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df8a:	3201      	adds	r2, #1
 801df8c:	4294      	cmp	r4, r2
 801df8e:	dd26      	ble.n	801dfde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df90:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801df92:	fb02 8303 	mla	r3, r2, r3, r8
 801df96:	141b      	asrs	r3, r3, #16
 801df98:	d421      	bmi.n	801dfde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801df9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df9c:	3301      	adds	r3, #1
 801df9e:	429a      	cmp	r2, r3
 801dfa0:	dd1d      	ble.n	801dfde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801dfa2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dfa6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801dfaa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801dfae:	9312      	str	r3, [sp, #72]	; 0x48
 801dfb0:	f1be 0f00 	cmp.w	lr, #0
 801dfb4:	f300 8138 	bgt.w	801e228 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 801dfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfba:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801dfbe:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801dfc2:	e0d1      	b.n	801e168 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801dfc4:	1c51      	adds	r1, r2, #1
 801dfc6:	f040 80c3 	bne.w	801e150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801dfca:	42a2      	cmp	r2, r4
 801dfcc:	f280 80c0 	bge.w	801e150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801dfd0:	1c5f      	adds	r7, r3, #1
 801dfd2:	f2c0 80bd 	blt.w	801e150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801dfd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	f280 80b9 	bge.w	801e150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801dfde:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801dfe2:	4657      	mov	r7, sl
 801dfe4:	f1bb 0f00 	cmp.w	fp, #0
 801dfe8:	dde6      	ble.n	801dfb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801dfea:	ea5f 4229 	movs.w	r2, r9, asr #16
 801dfee:	ea4f 4328 	mov.w	r3, r8, asr #16
 801dff2:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801dff6:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801dffa:	f100 80fc 	bmi.w	801e1f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 801dffe:	f102 0c01 	add.w	ip, r2, #1
 801e002:	4564      	cmp	r4, ip
 801e004:	f340 80f9 	ble.w	801e1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801e008:	2b00      	cmp	r3, #0
 801e00a:	f2c0 80f6 	blt.w	801e1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801e00e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e010:	f103 0c01 	add.w	ip, r3, #1
 801e014:	4565      	cmp	r5, ip
 801e016:	f340 80f0 	ble.w	801e1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801e01a:	fb03 2304 	mla	r3, r3, r4, r2
 801e01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e022:	441a      	add	r2, r3
 801e024:	5ceb      	ldrb	r3, [r5, r3]
 801e026:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 801e02a:	2800      	cmp	r0, #0
 801e02c:	f000 80db 	beq.w	801e1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 801e030:	7853      	ldrb	r3, [r2, #1]
 801e032:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e036:	9313      	str	r3, [sp, #76]	; 0x4c
 801e038:	b141      	cbz	r1, 801e04c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801e03a:	1913      	adds	r3, r2, r4
 801e03c:	5d12      	ldrb	r2, [r2, r4]
 801e03e:	785b      	ldrb	r3, [r3, #1]
 801e040:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e044:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e048:	9210      	str	r2, [sp, #64]	; 0x40
 801e04a:	9314      	str	r3, [sp, #80]	; 0x50
 801e04c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e04e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e050:	fb10 f201 	smulbb	r2, r0, r1
 801e054:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e058:	10d2      	asrs	r2, r2, #3
 801e05a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e05e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e062:	ea4c 0c03 	orr.w	ip, ip, r3
 801e066:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801e06a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e06e:	041b      	lsls	r3, r3, #16
 801e070:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e074:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e078:	432b      	orrs	r3, r5
 801e07a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e07c:	4353      	muls	r3, r2
 801e07e:	fb05 330c 	mla	r3, r5, ip, r3
 801e082:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e086:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e08a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e08e:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e092:	f1c1 0c10 	rsb	ip, r1, #16
 801e096:	ebac 0c00 	sub.w	ip, ip, r0
 801e09a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e09e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e0a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e0a6:	0418      	lsls	r0, r3, #16
 801e0a8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e0ac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e0b0:	4318      	orrs	r0, r3
 801e0b2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e0b6:	fb02 c200 	mla	r2, r2, r0, ip
 801e0ba:	0d53      	lsrs	r3, r2, #21
 801e0bc:	0952      	lsrs	r2, r2, #5
 801e0be:	f8b7 c000 	ldrh.w	ip, [r7]
 801e0c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e0c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e0ca:	431a      	orrs	r2, r3
 801e0cc:	b292      	uxth	r2, r2
 801e0ce:	ea4f 212c 	mov.w	r1, ip, asr #8
 801e0d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0d6:	1210      	asrs	r0, r2, #8
 801e0d8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e0dc:	fb11 f105 	smulbb	r1, r1, r5
 801e0e0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801e0e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e0e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e0ec:	fb00 1003 	mla	r0, r0, r3, r1
 801e0f0:	fa5f fc8c 	uxtb.w	ip, ip
 801e0f4:	10d1      	asrs	r1, r2, #3
 801e0f6:	00d2      	lsls	r2, r2, #3
 801e0f8:	fb1c fc05 	smulbb	ip, ip, r5
 801e0fc:	b2d2      	uxtb	r2, r2
 801e0fe:	fb02 c203 	mla	r2, r2, r3, ip
 801e102:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e106:	b280      	uxth	r0, r0
 801e108:	b292      	uxth	r2, r2
 801e10a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e10e:	fb1e fe05 	smulbb	lr, lr, r5
 801e112:	fb01 e103 	mla	r1, r1, r3, lr
 801e116:	f102 0c01 	add.w	ip, r2, #1
 801e11a:	1c43      	adds	r3, r0, #1
 801e11c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e120:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e124:	b289      	uxth	r1, r1
 801e126:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e12a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e12e:	4313      	orrs	r3, r2
 801e130:	1c4a      	adds	r2, r1, #1
 801e132:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e136:	0949      	lsrs	r1, r1, #5
 801e138:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e13c:	430b      	orrs	r3, r1
 801e13e:	803b      	strh	r3, [r7, #0]
 801e140:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e142:	4499      	add	r9, r3
 801e144:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e146:	3702      	adds	r7, #2
 801e148:	4498      	add	r8, r3
 801e14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e14e:	e749      	b.n	801dfe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e150:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e152:	4499      	add	r9, r3
 801e154:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e156:	4498      	add	r8, r3
 801e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e15a:	3b01      	subs	r3, #1
 801e15c:	9309      	str	r3, [sp, #36]	; 0x24
 801e15e:	f10a 0a02 	add.w	sl, sl, #2
 801e162:	e6f9      	b.n	801df58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801e164:	f47f af0a 	bne.w	801df7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801e168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	f340 8109 	ble.w	801e382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801e170:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e178:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e17c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e17e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e182:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e186:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e18a:	eef0 6a48 	vmov.f32	s13, s16
 801e18e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e196:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e19a:	ee16 9a90 	vmov	r9, s13
 801e19e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e1a2:	eef0 6a68 	vmov.f32	s13, s17
 801e1a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e1aa:	ee18 2a10 	vmov	r2, s16
 801e1ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e1b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1b6:	ee18 2a90 	vmov	r2, s17
 801e1ba:	932f      	str	r3, [sp, #188]	; 0xbc
 801e1bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e1be:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1c2:	9330      	str	r3, [sp, #192]	; 0xc0
 801e1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e1c8:	3b01      	subs	r3, #1
 801e1ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e1ce:	930d      	str	r3, [sp, #52]	; 0x34
 801e1d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e1d2:	bf08      	it	eq
 801e1d4:	4613      	moveq	r3, r2
 801e1d6:	ee16 8a90 	vmov	r8, s13
 801e1da:	9309      	str	r3, [sp, #36]	; 0x24
 801e1dc:	eef0 8a67 	vmov.f32	s17, s15
 801e1e0:	eeb0 8a47 	vmov.f32	s16, s14
 801e1e4:	e6b1      	b.n	801df4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e1e6:	2900      	cmp	r1, #0
 801e1e8:	f43f af30 	beq.w	801e04c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801e1ec:	5d13      	ldrb	r3, [r2, r4]
 801e1ee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e1f2:	9310      	str	r3, [sp, #64]	; 0x40
 801e1f4:	e72a      	b.n	801e04c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801e1f6:	1c55      	adds	r5, r2, #1
 801e1f8:	d1a2      	bne.n	801e140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1fa:	4294      	cmp	r4, r2
 801e1fc:	dda0      	ble.n	801e140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e1fe:	1c5d      	adds	r5, r3, #1
 801e200:	db9e      	blt.n	801e140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e202:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e204:	429d      	cmp	r5, r3
 801e206:	dd9b      	ble.n	801e140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e208:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801e20c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e210:	9202      	str	r2, [sp, #8]
 801e212:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e216:	e9cd 4300 	strd	r4, r3, [sp]
 801e21a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e21c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e21e:	4633      	mov	r3, r6
 801e220:	4639      	mov	r1, r7
 801e222:	f7ff fd7f 	bl	801dd24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e226:	e78b      	b.n	801e140 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801e228:	ea4f 4329 	mov.w	r3, r9, asr #16
 801e22c:	ea4f 4228 	mov.w	r2, r8, asr #16
 801e230:	fb04 3202 	mla	r2, r4, r2, r3
 801e234:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e238:	4413      	add	r3, r2
 801e23a:	5c8a      	ldrb	r2, [r1, r2]
 801e23c:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 801e240:	f3c8 3003 	ubfx	r0, r8, #12, #4
 801e244:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 801e248:	f1bc 0f00 	cmp.w	ip, #0
 801e24c:	f000 8091 	beq.w	801e372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 801e250:	785a      	ldrb	r2, [r3, #1]
 801e252:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e256:	9215      	str	r2, [sp, #84]	; 0x54
 801e258:	b140      	cbz	r0, 801e26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e25a:	191a      	adds	r2, r3, r4
 801e25c:	5d1b      	ldrb	r3, [r3, r4]
 801e25e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e262:	9311      	str	r3, [sp, #68]	; 0x44
 801e264:	7853      	ldrb	r3, [r2, #1]
 801e266:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e26a:	9316      	str	r3, [sp, #88]	; 0x58
 801e26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e26e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e270:	fb1c f200 	smulbb	r2, ip, r0
 801e274:	041f      	lsls	r7, r3, #16
 801e276:	10d2      	asrs	r2, r2, #3
 801e278:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e27c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e280:	431f      	orrs	r7, r3
 801e282:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e286:	9319      	str	r3, [sp, #100]	; 0x64
 801e288:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e28a:	041b      	lsls	r3, r3, #16
 801e28c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e290:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e294:	ea43 030b 	orr.w	r3, r3, fp
 801e298:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801e29a:	4353      	muls	r3, r2
 801e29c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e2a0:	fb05 3707 	mla	r7, r5, r7, r3
 801e2a4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e2a8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e2ac:	ea43 0b01 	orr.w	fp, r3, r1
 801e2b0:	f1c0 0110 	rsb	r1, r0, #16
 801e2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e2b8:	eba1 0c0c 	sub.w	ip, r1, ip
 801e2bc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e2c0:	fb0c 770b 	mla	r7, ip, fp, r7
 801e2c4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e2c8:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e2cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e2d0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e2d4:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e2d8:	fb02 770c 	mla	r7, r2, ip, r7
 801e2dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e2de:	0d79      	lsrs	r1, r7, #21
 801e2e0:	8812      	ldrh	r2, [r2, #0]
 801e2e2:	097f      	lsrs	r7, r7, #5
 801e2e4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e2e8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e2ec:	430f      	orrs	r7, r1
 801e2ee:	1211      	asrs	r1, r2, #8
 801e2f0:	b2bb      	uxth	r3, r7
 801e2f2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e2f6:	fb11 f105 	smulbb	r1, r1, r5
 801e2fa:	1218      	asrs	r0, r3, #8
 801e2fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e2fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e302:	fb00 1005 	mla	r0, r0, r5, r1
 801e306:	10d7      	asrs	r7, r2, #3
 801e308:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e30a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e30e:	fb17 f705 	smulbb	r7, r7, r5
 801e312:	10d9      	asrs	r1, r3, #3
 801e314:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e316:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e31a:	fb01 7105 	mla	r1, r1, r5, r7
 801e31e:	00d2      	lsls	r2, r2, #3
 801e320:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e322:	b2d2      	uxtb	r2, r2
 801e324:	fb12 f205 	smulbb	r2, r2, r5
 801e328:	00db      	lsls	r3, r3, #3
 801e32a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e32c:	b2db      	uxtb	r3, r3
 801e32e:	b280      	uxth	r0, r0
 801e330:	fb03 2305 	mla	r3, r3, r5, r2
 801e334:	b29b      	uxth	r3, r3
 801e336:	b289      	uxth	r1, r1
 801e338:	1c42      	adds	r2, r0, #1
 801e33a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e33e:	1c4f      	adds	r7, r1, #1
 801e340:	1c5a      	adds	r2, r3, #1
 801e342:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e346:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e34a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e34e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e352:	0949      	lsrs	r1, r1, #5
 801e354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e356:	4310      	orrs	r0, r2
 801e358:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e35c:	4308      	orrs	r0, r1
 801e35e:	f823 0b02 	strh.w	r0, [r3], #2
 801e362:	930f      	str	r3, [sp, #60]	; 0x3c
 801e364:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e366:	4499      	add	r9, r3
 801e368:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e36a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e36e:	4498      	add	r8, r3
 801e370:	e61e      	b.n	801dfb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e372:	2800      	cmp	r0, #0
 801e374:	f43f af7a 	beq.w	801e26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e378:	5d1b      	ldrb	r3, [r3, r4]
 801e37a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e37e:	9311      	str	r3, [sp, #68]	; 0x44
 801e380:	e774      	b.n	801e26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801e382:	b01b      	add	sp, #108	; 0x6c
 801e384:	ecbd 8b08 	vpop	{d8-d11}
 801e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e38c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e390:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801e394:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801e398:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e39c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801e3a0:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e3a4:	8808      	ldrh	r0, [r1, #0]
 801e3a6:	fb06 570e 	mla	r7, r6, lr, r5
 801e3aa:	2e00      	cmp	r6, #0
 801e3ac:	eb02 0807 	add.w	r8, r2, r7
 801e3b0:	db38      	blt.n	801e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e3b2:	45b1      	cmp	r9, r6
 801e3b4:	dd36      	ble.n	801e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801e3b6:	2d00      	cmp	r5, #0
 801e3b8:	db32      	blt.n	801e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e3ba:	45ae      	cmp	lr, r5
 801e3bc:	dd30      	ble.n	801e420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801e3be:	5dd2      	ldrb	r2, [r2, r7]
 801e3c0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801e3c4:	1c6a      	adds	r2, r5, #1
 801e3c6:	d430      	bmi.n	801e42a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e3c8:	4596      	cmp	lr, r2
 801e3ca:	dd2e      	ble.n	801e42a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e3cc:	b36c      	cbz	r4, 801e42a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801e3ce:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e3d2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e3d6:	3601      	adds	r6, #1
 801e3d8:	d42b      	bmi.n	801e432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e3da:	45b1      	cmp	r9, r6
 801e3dc:	dd29      	ble.n	801e432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801e3de:	f1bc 0f00 	cmp.w	ip, #0
 801e3e2:	d028      	beq.n	801e436 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801e3e4:	2d00      	cmp	r5, #0
 801e3e6:	db22      	blt.n	801e42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e3e8:	45ae      	cmp	lr, r5
 801e3ea:	dd20      	ble.n	801e42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801e3ec:	f818 600e 	ldrb.w	r6, [r8, lr]
 801e3f0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801e3f4:	3501      	adds	r5, #1
 801e3f6:	d407      	bmi.n	801e408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e3f8:	45ae      	cmp	lr, r5
 801e3fa:	dd05      	ble.n	801e408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e3fc:	b134      	cbz	r4, 801e40c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e3fe:	44c6      	add	lr, r8
 801e400:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801e404:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801e408:	2c0f      	cmp	r4, #15
 801e40a:	d802      	bhi.n	801e412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e40c:	f1bc 0f0f 	cmp.w	ip, #15
 801e410:	d914      	bls.n	801e43c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801e412:	4b26      	ldr	r3, [pc, #152]	; (801e4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801e414:	4a26      	ldr	r2, [pc, #152]	; (801e4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801e416:	4827      	ldr	r0, [pc, #156]	; (801e4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801e418:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e41c:	f006 fcf6 	bl	8024e0c <__assert_func>
 801e420:	4607      	mov	r7, r0
 801e422:	e7cf      	b.n	801e3c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801e424:	4602      	mov	r2, r0
 801e426:	4607      	mov	r7, r0
 801e428:	e7d5      	b.n	801e3d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e42a:	4602      	mov	r2, r0
 801e42c:	e7d3      	b.n	801e3d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801e42e:	4606      	mov	r6, r0
 801e430:	e7e0      	b.n	801e3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801e432:	4606      	mov	r6, r0
 801e434:	e7e8      	b.n	801e408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801e436:	2c0f      	cmp	r4, #15
 801e438:	d8eb      	bhi.n	801e412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801e43a:	4606      	mov	r6, r0
 801e43c:	043d      	lsls	r5, r7, #16
 801e43e:	fb14 f30c 	smulbb	r3, r4, ip
 801e442:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801e446:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801e44a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e44e:	10db      	asrs	r3, r3, #3
 801e450:	432f      	orrs	r7, r5
 801e452:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e456:	f1cc 0510 	rsb	r5, ip, #16
 801e45a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e45e:	1b2d      	subs	r5, r5, r4
 801e460:	ea4e 0202 	orr.w	r2, lr, r2
 801e464:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801e468:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e46c:	4354      	muls	r4, r2
 801e46e:	fb05 4507 	mla	r5, r5, r7, r4
 801e472:	0404      	lsls	r4, r0, #16
 801e474:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e478:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e47c:	4320      	orrs	r0, r4
 801e47e:	fb03 5400 	mla	r4, r3, r0, r5
 801e482:	0430      	lsls	r0, r6, #16
 801e484:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e488:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801e48c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801e490:	4330      	orrs	r0, r6
 801e492:	fb03 4000 	mla	r0, r3, r0, r4
 801e496:	0d43      	lsrs	r3, r0, #21
 801e498:	0940      	lsrs	r0, r0, #5
 801e49a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e49e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e4a2:	4318      	orrs	r0, r3
 801e4a4:	8008      	strh	r0, [r1, #0]
 801e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4aa:	bf00      	nop
 801e4ac:	08054484 	.word	0x08054484
 801e4b0:	08054a86 	.word	0x08054a86
 801e4b4:	0805450c 	.word	0x0805450c

0801e4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4bc:	ed2d 8b0a 	vpush	{d8-d12}
 801e4c0:	b095      	sub	sp, #84	; 0x54
 801e4c2:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 801e4c6:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 801e4c8:	9306      	str	r3, [sp, #24]
 801e4ca:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e4ce:	9109      	str	r1, [sp, #36]	; 0x24
 801e4d0:	9307      	str	r3, [sp, #28]
 801e4d2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e4d6:	9012      	str	r0, [sp, #72]	; 0x48
 801e4d8:	6878      	ldr	r0, [r7, #4]
 801e4da:	9211      	str	r2, [sp, #68]	; 0x44
 801e4dc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e4de:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801e4e2:	fb00 1303 	mla	r3, r0, r3, r1
 801e4e6:	6839      	ldr	r1, [r7, #0]
 801e4e8:	6857      	ldr	r7, [r2, #4]
 801e4ea:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801e4ee:	6813      	ldr	r3, [r2, #0]
 801e4f0:	9308      	str	r3, [sp, #32]
 801e4f2:	eeb0 aa40 	vmov.f32	s20, s0
 801e4f6:	eef0 9a60 	vmov.f32	s19, s1
 801e4fa:	eeb0 9a41 	vmov.f32	s18, s2
 801e4fe:	eeb0 8a62 	vmov.f32	s16, s5
 801e502:	eef0 8a43 	vmov.f32	s17, s6
 801e506:	eeb0 ca44 	vmov.f32	s24, s8
 801e50a:	eef0 ba64 	vmov.f32	s23, s9
 801e50e:	eeb0 ba45 	vmov.f32	s22, s10
 801e512:	3704      	adds	r7, #4
 801e514:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	dc03      	bgt.n	801e526 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e520:	2b00      	cmp	r3, #0
 801e522:	f340 819a 	ble.w	801e85a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801e526:	9b06      	ldr	r3, [sp, #24]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	f340 80c4 	ble.w	801e6b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801e52e:	ea5f 4229 	movs.w	r2, r9, asr #16
 801e532:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e536:	d429      	bmi.n	801e58c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e538:	1c51      	adds	r1, r2, #1
 801e53a:	428c      	cmp	r4, r1
 801e53c:	dd29      	ble.n	801e592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e53e:	2b00      	cmp	r3, #0
 801e540:	db27      	blt.n	801e592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e542:	9807      	ldr	r0, [sp, #28]
 801e544:	1c59      	adds	r1, r3, #1
 801e546:	4288      	cmp	r0, r1
 801e548:	dd23      	ble.n	801e592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e54a:	9b06      	ldr	r3, [sp, #24]
 801e54c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e54e:	3b01      	subs	r3, #1
 801e550:	fb02 9203 	mla	r2, r2, r3, r9
 801e554:	1412      	asrs	r2, r2, #16
 801e556:	d425      	bmi.n	801e5a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e558:	3201      	adds	r2, #1
 801e55a:	4294      	cmp	r4, r2
 801e55c:	dd22      	ble.n	801e5a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e55e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e560:	fb02 6303 	mla	r3, r2, r3, r6
 801e564:	141b      	asrs	r3, r3, #16
 801e566:	d41d      	bmi.n	801e5a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e568:	9a07      	ldr	r2, [sp, #28]
 801e56a:	3301      	adds	r3, #1
 801e56c:	429a      	cmp	r2, r3
 801e56e:	dd19      	ble.n	801e5a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e570:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e574:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801e578:	f1b8 0f00 	cmp.w	r8, #0
 801e57c:	f300 80f8 	bgt.w	801e770 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801e580:	9b06      	ldr	r3, [sp, #24]
 801e582:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e586:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801e58a:	e096      	b.n	801e6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801e58c:	1c51      	adds	r1, r2, #1
 801e58e:	f040 8088 	bne.w	801e6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e592:	42a2      	cmp	r2, r4
 801e594:	f280 8085 	bge.w	801e6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e598:	1c5a      	adds	r2, r3, #1
 801e59a:	f2c0 8082 	blt.w	801e6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e59e:	9a07      	ldr	r2, [sp, #28]
 801e5a0:	4293      	cmp	r3, r2
 801e5a2:	da7e      	bge.n	801e6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e5a4:	f8dd b018 	ldr.w	fp, [sp, #24]
 801e5a8:	46d0      	mov	r8, sl
 801e5aa:	f1bb 0f00 	cmp.w	fp, #0
 801e5ae:	dde7      	ble.n	801e580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e5b0:	ea5f 4229 	movs.w	r2, r9, asr #16
 801e5b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e5b8:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801e5bc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e5c0:	f100 80c0 	bmi.w	801e744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801e5c4:	f102 0c01 	add.w	ip, r2, #1
 801e5c8:	4564      	cmp	r4, ip
 801e5ca:	f340 80bd 	ble.w	801e748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f2c0 80ba 	blt.w	801e748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e5d4:	9d07      	ldr	r5, [sp, #28]
 801e5d6:	f103 0c01 	add.w	ip, r3, #1
 801e5da:	4565      	cmp	r5, ip
 801e5dc:	f340 80b4 	ble.w	801e748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801e5e0:	fb03 2304 	mla	r3, r3, r4, r2
 801e5e4:	9d08      	ldr	r5, [sp, #32]
 801e5e6:	9a08      	ldr	r2, [sp, #32]
 801e5e8:	441a      	add	r2, r3
 801e5ea:	5ceb      	ldrb	r3, [r5, r3]
 801e5ec:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 801e5f0:	2800      	cmp	r0, #0
 801e5f2:	f000 809f 	beq.w	801e734 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 801e5f6:	7853      	ldrb	r3, [r2, #1]
 801e5f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e5fc:	930d      	str	r3, [sp, #52]	; 0x34
 801e5fe:	b141      	cbz	r1, 801e612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e600:	1913      	adds	r3, r2, r4
 801e602:	5d12      	ldrb	r2, [r2, r4]
 801e604:	785b      	ldrb	r3, [r3, #1]
 801e606:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e60a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e60e:	920a      	str	r2, [sp, #40]	; 0x28
 801e610:	930e      	str	r3, [sp, #56]	; 0x38
 801e612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e614:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e616:	fb10 f201 	smulbb	r2, r0, r1
 801e61a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e61e:	10d2      	asrs	r2, r2, #3
 801e620:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e624:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e628:	ea4c 0c03 	orr.w	ip, ip, r3
 801e62c:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801e630:	930c      	str	r3, [sp, #48]	; 0x30
 801e632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e634:	041b      	lsls	r3, r3, #16
 801e636:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e63a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e63e:	432b      	orrs	r3, r5
 801e640:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e642:	4353      	muls	r3, r2
 801e644:	fb05 330c 	mla	r3, r5, ip, r3
 801e648:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e64c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e650:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e654:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e658:	f1c1 0c10 	rsb	ip, r1, #16
 801e65c:	ebac 0c00 	sub.w	ip, ip, r0
 801e660:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e664:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e66a:	0418      	lsls	r0, r3, #16
 801e66c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e670:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e674:	4318      	orrs	r0, r3
 801e676:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e67a:	fb02 c200 	mla	r2, r2, r0, ip
 801e67e:	0d53      	lsrs	r3, r2, #21
 801e680:	0952      	lsrs	r2, r2, #5
 801e682:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e686:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e68a:	431a      	orrs	r2, r3
 801e68c:	f8a8 2000 	strh.w	r2, [r8]
 801e690:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e692:	4499      	add	r9, r3
 801e694:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e696:	f108 0802 	add.w	r8, r8, #2
 801e69a:	441e      	add	r6, r3
 801e69c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e6a0:	e783      	b.n	801e5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e6a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e6a4:	4499      	add	r9, r3
 801e6a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e6a8:	441e      	add	r6, r3
 801e6aa:	9b06      	ldr	r3, [sp, #24]
 801e6ac:	3b01      	subs	r3, #1
 801e6ae:	9306      	str	r3, [sp, #24]
 801e6b0:	f10a 0a02 	add.w	sl, sl, #2
 801e6b4:	e737      	b.n	801e526 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e6b6:	f47f af48 	bne.w	801e54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	f340 80cc 	ble.w	801e85a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801e6c2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e6c6:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e6ca:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e6ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6d0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e6d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e6d8:	eef0 6a48 	vmov.f32	s13, s16
 801e6dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e6e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e6e8:	ee16 9a90 	vmov	r9, s13
 801e6ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e6f0:	eef0 6a68 	vmov.f32	s13, s17
 801e6f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e6f8:	ee18 2a10 	vmov	r2, s16
 801e6fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e700:	fb92 f3f3 	sdiv	r3, r2, r3
 801e704:	ee18 2a90 	vmov	r2, s17
 801e708:	932b      	str	r3, [sp, #172]	; 0xac
 801e70a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e70c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e710:	932c      	str	r3, [sp, #176]	; 0xb0
 801e712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e714:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e716:	3b01      	subs	r3, #1
 801e718:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71c:	9309      	str	r3, [sp, #36]	; 0x24
 801e71e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e720:	bf08      	it	eq
 801e722:	4613      	moveq	r3, r2
 801e724:	ee16 6a90 	vmov	r6, s13
 801e728:	9306      	str	r3, [sp, #24]
 801e72a:	eef0 8a67 	vmov.f32	s17, s15
 801e72e:	eeb0 8a47 	vmov.f32	s16, s14
 801e732:	e6f1      	b.n	801e518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e734:	2900      	cmp	r1, #0
 801e736:	f43f af6c 	beq.w	801e612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e73a:	5d13      	ldrb	r3, [r2, r4]
 801e73c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e740:	930a      	str	r3, [sp, #40]	; 0x28
 801e742:	e766      	b.n	801e612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e744:	1c55      	adds	r5, r2, #1
 801e746:	d1a3      	bne.n	801e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e748:	4294      	cmp	r4, r2
 801e74a:	dda1      	ble.n	801e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e74c:	1c5d      	adds	r5, r3, #1
 801e74e:	db9f      	blt.n	801e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e750:	9d07      	ldr	r5, [sp, #28]
 801e752:	429d      	cmp	r5, r3
 801e754:	dd9c      	ble.n	801e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e75a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e75e:	e9cd 4500 	strd	r4, r5, [sp]
 801e762:	463b      	mov	r3, r7
 801e764:	9a08      	ldr	r2, [sp, #32]
 801e766:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e768:	4641      	mov	r1, r8
 801e76a:	f7ff fe0f 	bl	801e38c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801e76e:	e78f      	b.n	801e690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801e770:	ea4f 4329 	mov.w	r3, r9, asr #16
 801e774:	1432      	asrs	r2, r6, #16
 801e776:	fb04 3202 	mla	r2, r4, r2, r3
 801e77a:	9908      	ldr	r1, [sp, #32]
 801e77c:	9b08      	ldr	r3, [sp, #32]
 801e77e:	4413      	add	r3, r2
 801e780:	5c8a      	ldrb	r2, [r1, r2]
 801e782:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 801e786:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e78a:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 801e78e:	f1be 0f00 	cmp.w	lr, #0
 801e792:	d05b      	beq.n	801e84c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 801e794:	785a      	ldrb	r2, [r3, #1]
 801e796:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e79a:	920f      	str	r2, [sp, #60]	; 0x3c
 801e79c:	b140      	cbz	r0, 801e7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e79e:	191a      	adds	r2, r3, r4
 801e7a0:	5d1b      	ldrb	r3, [r3, r4]
 801e7a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e7a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7a8:	7853      	ldrb	r3, [r2, #1]
 801e7aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e7ae:	9310      	str	r3, [sp, #64]	; 0x40
 801e7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e7b4:	fb1e f200 	smulbb	r2, lr, r0
 801e7b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e7bc:	10d2      	asrs	r2, r2, #3
 801e7be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e7c2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e7c6:	ea4c 0c03 	orr.w	ip, ip, r3
 801e7ca:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801e7ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7d2:	041b      	lsls	r3, r3, #16
 801e7d4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e7d8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e7dc:	ea43 030b 	orr.w	r3, r3, fp
 801e7e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e7e2:	4353      	muls	r3, r2
 801e7e4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e7e8:	fb05 3c0c 	mla	ip, r5, ip, r3
 801e7ec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e7f0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e7f4:	ea43 0b01 	orr.w	fp, r3, r1
 801e7f8:	f1c0 0110 	rsb	r1, r0, #16
 801e7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7fe:	eba1 0e0e 	sub.w	lr, r1, lr
 801e802:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801e806:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e80a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801e80e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801e812:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e816:	ea4b 0e0e 	orr.w	lr, fp, lr
 801e81a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e81e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e822:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801e826:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e82a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e82e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e832:	ea43 0c0c 	orr.w	ip, r3, ip
 801e836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e838:	f823 cb02 	strh.w	ip, [r3], #2
 801e83c:	930c      	str	r3, [sp, #48]	; 0x30
 801e83e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e840:	4499      	add	r9, r3
 801e842:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e844:	f108 38ff 	add.w	r8, r8, #4294967295
 801e848:	441e      	add	r6, r3
 801e84a:	e695      	b.n	801e578 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 801e84c:	2800      	cmp	r0, #0
 801e84e:	d0af      	beq.n	801e7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e850:	5d1b      	ldrb	r3, [r3, r4]
 801e852:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e856:	930b      	str	r3, [sp, #44]	; 0x2c
 801e858:	e7aa      	b.n	801e7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801e85a:	b015      	add	sp, #84	; 0x54
 801e85c:	ecbd 8b0a 	vpop	{d8-d12}
 801e860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801e864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e868:	468b      	mov	fp, r1
 801e86a:	8809      	ldrh	r1, [r1, #0]
 801e86c:	b089      	sub	sp, #36	; 0x24
 801e86e:	10cd      	asrs	r5, r1, #3
 801e870:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801e874:	ea4f 2921 	mov.w	r9, r1, asr #8
 801e878:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e87c:	00c9      	lsls	r1, r1, #3
 801e87e:	9500      	str	r5, [sp, #0]
 801e880:	b2c9      	uxtb	r1, r1
 801e882:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801e886:	9101      	str	r1, [sp, #4]
 801e888:	9900      	ldr	r1, [sp, #0]
 801e88a:	9202      	str	r2, [sp, #8]
 801e88c:	fb04 650e 	mla	r5, r4, lr, r6
 801e890:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801e894:	eb02 0805 	add.w	r8, r2, r5
 801e898:	0209      	lsls	r1, r1, #8
 801e89a:	9a01      	ldr	r2, [sp, #4]
 801e89c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801e8a0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e8a4:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801e8a8:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801e8ac:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801e8b0:	4311      	orrs	r1, r2
 801e8b2:	2c00      	cmp	r4, #0
 801e8b4:	9107      	str	r1, [sp, #28]
 801e8b6:	db43      	blt.n	801e940 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e8b8:	45a2      	cmp	sl, r4
 801e8ba:	dd41      	ble.n	801e940 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801e8bc:	2e00      	cmp	r6, #0
 801e8be:	db3d      	blt.n	801e93c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e8c0:	45b6      	cmp	lr, r6
 801e8c2:	dd3b      	ble.n	801e93c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801e8c4:	9a02      	ldr	r2, [sp, #8]
 801e8c6:	5d55      	ldrb	r5, [r2, r5]
 801e8c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e8cc:	441d      	add	r5, r3
 801e8ce:	1c72      	adds	r2, r6, #1
 801e8d0:	d439      	bmi.n	801e946 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e8d2:	4596      	cmp	lr, r2
 801e8d4:	dd37      	ble.n	801e946 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e8d6:	2f00      	cmp	r7, #0
 801e8d8:	d035      	beq.n	801e946 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801e8da:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e8de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e8e2:	4419      	add	r1, r3
 801e8e4:	3401      	adds	r4, #1
 801e8e6:	d432      	bmi.n	801e94e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8e8:	45a2      	cmp	sl, r4
 801e8ea:	dd30      	ble.n	801e94e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8ec:	b378      	cbz	r0, 801e94e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801e8ee:	2e00      	cmp	r6, #0
 801e8f0:	db2b      	blt.n	801e94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e8f2:	45b6      	cmp	lr, r6
 801e8f4:	dd29      	ble.n	801e94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801e8f6:	f818 400e 	ldrb.w	r4, [r8, lr]
 801e8fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e8fe:	441c      	add	r4, r3
 801e900:	3601      	adds	r6, #1
 801e902:	d427      	bmi.n	801e954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e904:	45b6      	cmp	lr, r6
 801e906:	dd25      	ble.n	801e954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e908:	b327      	cbz	r7, 801e954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801e90a:	44c6      	add	lr, r8
 801e90c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e910:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e914:	4413      	add	r3, r2
 801e916:	782a      	ldrb	r2, [r5, #0]
 801e918:	9202      	str	r2, [sp, #8]
 801e91a:	780a      	ldrb	r2, [r1, #0]
 801e91c:	9203      	str	r2, [sp, #12]
 801e91e:	7822      	ldrb	r2, [r4, #0]
 801e920:	9204      	str	r2, [sp, #16]
 801e922:	2f0f      	cmp	r7, #15
 801e924:	781a      	ldrb	r2, [r3, #0]
 801e926:	9205      	str	r2, [sp, #20]
 801e928:	d801      	bhi.n	801e92e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 801e92a:	280f      	cmp	r0, #15
 801e92c:	d914      	bls.n	801e958 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 801e92e:	4b3f      	ldr	r3, [pc, #252]	; (801ea2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 801e930:	4a3f      	ldr	r2, [pc, #252]	; (801ea30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801e932:	4840      	ldr	r0, [pc, #256]	; (801ea34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801e934:	f240 210d 	movw	r1, #525	; 0x20d
 801e938:	f006 fa68 	bl	8024e0c <__assert_func>
 801e93c:	ad07      	add	r5, sp, #28
 801e93e:	e7c6      	b.n	801e8ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 801e940:	a907      	add	r1, sp, #28
 801e942:	460d      	mov	r5, r1
 801e944:	e7ce      	b.n	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e946:	a907      	add	r1, sp, #28
 801e948:	e7cc      	b.n	801e8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801e94a:	ac07      	add	r4, sp, #28
 801e94c:	e7d8      	b.n	801e900 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 801e94e:	ab07      	add	r3, sp, #28
 801e950:	461c      	mov	r4, r3
 801e952:	e7e0      	b.n	801e916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e954:	ab07      	add	r3, sp, #28
 801e956:	e7de      	b.n	801e916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801e958:	b2ba      	uxth	r2, r7
 801e95a:	b280      	uxth	r0, r0
 801e95c:	fb02 fa00 	mul.w	sl, r2, r0
 801e960:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e964:	0112      	lsls	r2, r2, #4
 801e966:	b280      	uxth	r0, r0
 801e968:	f891 8002 	ldrb.w	r8, [r1, #2]
 801e96c:	7849      	ldrb	r1, [r1, #1]
 801e96e:	78ae      	ldrb	r6, [r5, #2]
 801e970:	786d      	ldrb	r5, [r5, #1]
 801e972:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e976:	eba2 020a 	sub.w	r2, r2, sl
 801e97a:	b292      	uxth	r2, r2
 801e97c:	ebae 0e00 	sub.w	lr, lr, r0
 801e980:	fa1f fe8e 	uxth.w	lr, lr
 801e984:	4351      	muls	r1, r2
 801e986:	fb02 f808 	mul.w	r8, r2, r8
 801e98a:	fb0e 8806 	mla	r8, lr, r6, r8
 801e98e:	fb0e 1505 	mla	r5, lr, r5, r1
 801e992:	78a6      	ldrb	r6, [r4, #2]
 801e994:	7861      	ldrb	r1, [r4, #1]
 801e996:	fa1f f78c 	uxth.w	r7, ip
 801e99a:	fb00 8806 	mla	r8, r0, r6, r8
 801e99e:	fb00 5501 	mla	r5, r0, r1, r5
 801e9a2:	789e      	ldrb	r6, [r3, #2]
 801e9a4:	7859      	ldrb	r1, [r3, #1]
 801e9a6:	9b00      	ldr	r3, [sp, #0]
 801e9a8:	ea6f 0c0c 	mvn.w	ip, ip
 801e9ac:	fa5f fc8c 	uxtb.w	ip, ip
 801e9b0:	fb0a 5101 	mla	r1, sl, r1, r5
 801e9b4:	fb13 f50c 	smulbb	r5, r3, ip
 801e9b8:	9b03      	ldr	r3, [sp, #12]
 801e9ba:	435a      	muls	r2, r3
 801e9bc:	9b02      	ldr	r3, [sp, #8]
 801e9be:	fb0e 2203 	mla	r2, lr, r3, r2
 801e9c2:	9b04      	ldr	r3, [sp, #16]
 801e9c4:	fb00 2003 	mla	r0, r0, r3, r2
 801e9c8:	9b05      	ldr	r3, [sp, #20]
 801e9ca:	fb0a 8606 	mla	r6, sl, r6, r8
 801e9ce:	fb0a 0a03 	mla	sl, sl, r3, r0
 801e9d2:	9b01      	ldr	r3, [sp, #4]
 801e9d4:	fb19 f90c 	smulbb	r9, r9, ip
 801e9d8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e9dc:	fb13 fc0c 	smulbb	ip, r3, ip
 801e9e0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e9e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e9e8:	fb06 9607 	mla	r6, r6, r7, r9
 801e9ec:	fb01 5107 	mla	r1, r1, r7, r5
 801e9f0:	fb0a c707 	mla	r7, sl, r7, ip
 801e9f4:	b2b6      	uxth	r6, r6
 801e9f6:	b289      	uxth	r1, r1
 801e9f8:	b2bf      	uxth	r7, r7
 801e9fa:	f106 0901 	add.w	r9, r6, #1
 801e9fe:	f107 0c01 	add.w	ip, r7, #1
 801ea02:	1c4d      	adds	r5, r1, #1
 801ea04:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801ea08:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ea0c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801ea10:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ea14:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ea18:	0949      	lsrs	r1, r1, #5
 801ea1a:	433e      	orrs	r6, r7
 801ea1c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea20:	430e      	orrs	r6, r1
 801ea22:	f8ab 6000 	strh.w	r6, [fp]
 801ea26:	b009      	add	sp, #36	; 0x24
 801ea28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea2c:	08054484 	.word	0x08054484
 801ea30:	080549dd 	.word	0x080549dd
 801ea34:	0805450c 	.word	0x0805450c

0801ea38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea3c:	ed2d 8b08 	vpush	{d8-d11}
 801ea40:	b097      	sub	sp, #92	; 0x5c
 801ea42:	eeb0 aa40 	vmov.f32	s20, s0
 801ea46:	9309      	str	r3, [sp, #36]	; 0x24
 801ea48:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801ea4c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801ea4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea50:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801ea54:	9310      	str	r3, [sp, #64]	; 0x40
 801ea56:	910f      	str	r1, [sp, #60]	; 0x3c
 801ea58:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ea5c:	9015      	str	r0, [sp, #84]	; 0x54
 801ea5e:	6860      	ldr	r0, [r4, #4]
 801ea60:	9213      	str	r2, [sp, #76]	; 0x4c
 801ea62:	fb00 1303 	mla	r3, r0, r3, r1
 801ea66:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ea68:	6821      	ldr	r1, [r4, #0]
 801ea6a:	6854      	ldr	r4, [r2, #4]
 801ea6c:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 801ea70:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ea74:	930a      	str	r3, [sp, #40]	; 0x28
 801ea76:	6813      	ldr	r3, [r2, #0]
 801ea78:	930e      	str	r3, [sp, #56]	; 0x38
 801ea7a:	1d23      	adds	r3, r4, #4
 801ea7c:	9308      	str	r3, [sp, #32]
 801ea7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea80:	43db      	mvns	r3, r3
 801ea82:	b2db      	uxtb	r3, r3
 801ea84:	eef0 9a60 	vmov.f32	s19, s1
 801ea88:	eeb0 9a41 	vmov.f32	s18, s2
 801ea8c:	eeb0 8a62 	vmov.f32	s16, s5
 801ea90:	eef0 8a43 	vmov.f32	s17, s6
 801ea94:	eef0 ba44 	vmov.f32	s23, s8
 801ea98:	eeb0 ba64 	vmov.f32	s22, s9
 801ea9c:	eef0 aa45 	vmov.f32	s21, s10
 801eaa0:	930c      	str	r3, [sp, #48]	; 0x30
 801eaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	dc03      	bgt.n	801eab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801eaa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	f340 825c 	ble.w	801ef68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	f340 8127 	ble.w	801ed06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 801eab8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eaba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eabc:	1412      	asrs	r2, r2, #16
 801eabe:	ea4f 4323 	mov.w	r3, r3, asr #16
 801eac2:	d430      	bmi.n	801eb26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801eac4:	1c51      	adds	r1, r2, #1
 801eac6:	428d      	cmp	r5, r1
 801eac8:	dd30      	ble.n	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	db2e      	blt.n	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801eace:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ead0:	1c59      	adds	r1, r3, #1
 801ead2:	4288      	cmp	r0, r1
 801ead4:	dd2a      	ble.n	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ead6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ead8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eada:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801eadc:	3b01      	subs	r3, #1
 801eade:	fb02 1203 	mla	r2, r2, r3, r1
 801eae2:	1412      	asrs	r2, r2, #16
 801eae4:	d42c      	bmi.n	801eb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eae6:	3201      	adds	r2, #1
 801eae8:	4295      	cmp	r5, r2
 801eaea:	dd29      	ble.n	801eb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eaec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eaee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801eaf0:	fb02 1303 	mla	r3, r2, r3, r1
 801eaf4:	141b      	asrs	r3, r3, #16
 801eaf6:	d423      	bmi.n	801eb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eaf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eafa:	3301      	adds	r3, #1
 801eafc:	429a      	cmp	r2, r3
 801eafe:	dd1f      	ble.n	801eb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801eb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb02:	9311      	str	r3, [sp, #68]	; 0x44
 801eb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb06:	930d      	str	r3, [sp, #52]	; 0x34
 801eb08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801eb0c:	9312      	str	r3, [sp, #72]	; 0x48
 801eb0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	f300 8161 	bgt.w	801edd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eb22:	930a      	str	r3, [sp, #40]	; 0x28
 801eb24:	e0f1      	b.n	801ed0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801eb26:	1c51      	adds	r1, r2, #1
 801eb28:	f040 80de 	bne.w	801ece8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb2c:	42aa      	cmp	r2, r5
 801eb2e:	f280 80db 	bge.w	801ece8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb32:	1c5f      	adds	r7, r3, #1
 801eb34:	f2c0 80d8 	blt.w	801ece8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eb3a:	4293      	cmp	r3, r2
 801eb3c:	f280 80d4 	bge.w	801ece8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb42:	9311      	str	r3, [sp, #68]	; 0x44
 801eb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb46:	930d      	str	r3, [sp, #52]	; 0x34
 801eb48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	dde3      	ble.n	801eb16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801eb4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eb50:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801eb52:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801eb54:	141a      	asrs	r2, r3, #16
 801eb56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb58:	1400      	asrs	r0, r0, #16
 801eb5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb5e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801eb62:	f100 8120 	bmi.w	801eda6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801eb66:	1c46      	adds	r6, r0, #1
 801eb68:	42b5      	cmp	r5, r6
 801eb6a:	f340 811e 	ble.w	801edaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb6e:	2a00      	cmp	r2, #0
 801eb70:	f2c0 811b 	blt.w	801edaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb74:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb76:	1c56      	adds	r6, r2, #1
 801eb78:	42b7      	cmp	r7, r6
 801eb7a:	f340 8116 	ble.w	801edaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801eb7e:	fb02 0005 	mla	r0, r2, r5, r0
 801eb82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801eb84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb86:	9c08      	ldr	r4, [sp, #32]
 801eb88:	4402      	add	r2, r0
 801eb8a:	5c30      	ldrb	r0, [r6, r0]
 801eb8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb90:	9014      	str	r0, [sp, #80]	; 0x50
 801eb92:	1826      	adds	r6, r4, r0
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	f000 80f7 	beq.w	801ed88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801eb9a:	f892 e001 	ldrb.w	lr, [r2, #1]
 801eb9e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eba2:	44a6      	add	lr, r4
 801eba4:	2900      	cmp	r1, #0
 801eba6:	f000 80f8 	beq.w	801ed9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 801ebaa:	1950      	adds	r0, r2, r5
 801ebac:	5d52      	ldrb	r2, [r2, r5]
 801ebae:	7840      	ldrb	r0, [r0, #1]
 801ebb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ebb8:	4422      	add	r2, r4
 801ebba:	4420      	add	r0, r4
 801ebbc:	b29b      	uxth	r3, r3
 801ebbe:	b289      	uxth	r1, r1
 801ebc0:	fb03 fa01 	mul.w	sl, r3, r1
 801ebc4:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ebc8:	011b      	lsls	r3, r3, #4
 801ebca:	b289      	uxth	r1, r1
 801ebcc:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ebd0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ebd4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ebd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ebd8:	f8b7 8000 	ldrh.w	r8, [r7]
 801ebdc:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 801ebe0:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801ebe4:	eba3 030a 	sub.w	r3, r3, sl
 801ebe8:	b29b      	uxth	r3, r3
 801ebea:	eba9 0901 	sub.w	r9, r9, r1
 801ebee:	fa1f f989 	uxth.w	r9, r9
 801ebf2:	fb03 fc0c 	mul.w	ip, r3, ip
 801ebf6:	fb09 cc0b 	mla	ip, r9, fp, ip
 801ebfa:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ebfe:	fb01 cc0b 	mla	ip, r1, fp, ip
 801ec02:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ec06:	fb0a cc0b 	mla	ip, sl, fp, ip
 801ec0a:	ea4f 2b28 	mov.w	fp, r8, asr #8
 801ec0e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ec12:	fb1b fb04 	smulbb	fp, fp, r4
 801ec16:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ec1a:	fb0c bc07 	mla	ip, ip, r7, fp
 801ec1e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ec22:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ec26:	f89e e000 	ldrb.w	lr, [lr]
 801ec2a:	435e      	muls	r6, r3
 801ec2c:	fb09 660b 	mla	r6, r9, fp, r6
 801ec30:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ec34:	fb01 660b 	mla	r6, r1, fp, r6
 801ec38:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec3c:	fb0a 660b 	mla	r6, sl, fp, r6
 801ec40:	ea4f 0be8 	mov.w	fp, r8, asr #3
 801ec44:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ec48:	fb1b fb04 	smulbb	fp, fp, r4
 801ec4c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ec50:	fb06 b607 	mla	r6, r6, r7, fp
 801ec54:	b2b4      	uxth	r4, r6
 801ec56:	9412      	str	r4, [sp, #72]	; 0x48
 801ec58:	9e08      	ldr	r6, [sp, #32]
 801ec5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ec5c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801ec60:	fb03 f30e 	mul.w	r3, r3, lr
 801ec64:	f892 e000 	ldrb.w	lr, [r2]
 801ec68:	fb09 330b 	mla	r3, r9, fp, r3
 801ec6c:	fb01 330e 	mla	r3, r1, lr, r3
 801ec70:	f890 e000 	ldrb.w	lr, [r0]
 801ec74:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ec78:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801ec7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec7e:	fa5f f888 	uxtb.w	r8, r8
 801ec82:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec86:	fb18 f803 	smulbb	r8, r8, r3
 801ec8a:	fb0e 8807 	mla	r8, lr, r7, r8
 801ec8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ec90:	fa1f fc8c 	uxth.w	ip, ip
 801ec94:	fa1f f888 	uxth.w	r8, r8
 801ec98:	f103 0b01 	add.w	fp, r3, #1
 801ec9c:	f10c 0201 	add.w	r2, ip, #1
 801eca0:	f108 0e01 	add.w	lr, r8, #1
 801eca4:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 801eca8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ecac:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 801ecb0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ecb4:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 801ecb8:	0976      	lsrs	r6, r6, #5
 801ecba:	ea4c 0c08 	orr.w	ip, ip, r8
 801ecbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ecc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ecc4:	ea4c 0606 	orr.w	r6, ip, r6
 801ecc8:	801e      	strh	r6, [r3, #0]
 801ecca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eccc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ecce:	3302      	adds	r3, #2
 801ecd0:	930d      	str	r3, [sp, #52]	; 0x34
 801ecd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ecd4:	4413      	add	r3, r2
 801ecd6:	9329      	str	r3, [sp, #164]	; 0xa4
 801ecd8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ecda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecdc:	4413      	add	r3, r2
 801ecde:	932a      	str	r3, [sp, #168]	; 0xa8
 801ece0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ece2:	3b01      	subs	r3, #1
 801ece4:	9311      	str	r3, [sp, #68]	; 0x44
 801ece6:	e72f      	b.n	801eb48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801ece8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ecea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ecec:	4413      	add	r3, r2
 801ecee:	9329      	str	r3, [sp, #164]	; 0xa4
 801ecf0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ecf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecf4:	4413      	add	r3, r2
 801ecf6:	932a      	str	r3, [sp, #168]	; 0xa8
 801ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecfa:	3b01      	subs	r3, #1
 801ecfc:	9309      	str	r3, [sp, #36]	; 0x24
 801ecfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed00:	3302      	adds	r3, #2
 801ed02:	930a      	str	r3, [sp, #40]	; 0x28
 801ed04:	e6d4      	b.n	801eab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ed06:	f47f aee6 	bne.w	801ead6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801ed0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	f340 812b 	ble.w	801ef68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801ed12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ed16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ed1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed20:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ed24:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ed28:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ed2c:	eef0 6a48 	vmov.f32	s13, s16
 801ed30:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ed34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed38:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ed3c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ed40:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ed44:	eef0 6a68 	vmov.f32	s13, s17
 801ed48:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ed4c:	ee18 2a10 	vmov	r2, s16
 801ed50:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ed54:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed58:	ee18 2a90 	vmov	r2, s17
 801ed5c:	932b      	str	r3, [sp, #172]	; 0xac
 801ed5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed60:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed64:	932c      	str	r3, [sp, #176]	; 0xb0
 801ed66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed6a:	3b01      	subs	r3, #1
 801ed6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed70:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed74:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801ed78:	bf08      	it	eq
 801ed7a:	4613      	moveq	r3, r2
 801ed7c:	9309      	str	r3, [sp, #36]	; 0x24
 801ed7e:	eef0 8a67 	vmov.f32	s17, s15
 801ed82:	eeb0 8a47 	vmov.f32	s16, s14
 801ed86:	e68c      	b.n	801eaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ed88:	b151      	cbz	r1, 801eda0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801ed8a:	5d52      	ldrb	r2, [r2, r5]
 801ed8c:	9808      	ldr	r0, [sp, #32]
 801ed8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed92:	4402      	add	r2, r0
 801ed94:	4630      	mov	r0, r6
 801ed96:	46b6      	mov	lr, r6
 801ed98:	e710      	b.n	801ebbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	4632      	mov	r2, r6
 801ed9e:	e70d      	b.n	801ebbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801eda0:	4630      	mov	r0, r6
 801eda2:	4632      	mov	r2, r6
 801eda4:	e7f7      	b.n	801ed96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 801eda6:	1c46      	adds	r6, r0, #1
 801eda8:	d18f      	bne.n	801ecca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801edaa:	4285      	cmp	r5, r0
 801edac:	dd8d      	ble.n	801ecca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801edae:	1c54      	adds	r4, r2, #1
 801edb0:	db8b      	blt.n	801ecca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801edb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801edb4:	4294      	cmp	r4, r2
 801edb6:	dd88      	ble.n	801ecca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801edb8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801edbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801edbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edc0:	9002      	str	r0, [sp, #8]
 801edc2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801edc6:	e9cd 5300 	strd	r5, r3, [sp]
 801edca:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801edce:	9b08      	ldr	r3, [sp, #32]
 801edd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801edd2:	f7ff fd47 	bl	801e864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801edd6:	e778      	b.n	801ecca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801edd8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801edda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eddc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801edde:	1410      	asrs	r0, r2, #16
 801ede0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ede4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ede6:	1412      	asrs	r2, r2, #16
 801ede8:	fb05 2000 	mla	r0, r5, r0, r2
 801edec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801edee:	f814 a000 	ldrb.w	sl, [r4, r0]
 801edf2:	4402      	add	r2, r0
 801edf4:	9808      	ldr	r0, [sp, #32]
 801edf6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801edfa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801edfe:	eb00 060a 	add.w	r6, r0, sl
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	f000 80a1 	beq.w	801ef4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 801ee08:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ee0c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ee10:	4484      	add	ip, r0
 801ee12:	2900      	cmp	r1, #0
 801ee14:	f000 80a2 	beq.w	801ef5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801ee18:	1950      	adds	r0, r2, r5
 801ee1a:	5d52      	ldrb	r2, [r2, r5]
 801ee1c:	7840      	ldrb	r0, [r0, #1]
 801ee1e:	9c08      	ldr	r4, [sp, #32]
 801ee20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee28:	4422      	add	r2, r4
 801ee2a:	4420      	add	r0, r4
 801ee2c:	b29b      	uxth	r3, r3
 801ee2e:	b289      	uxth	r1, r1
 801ee30:	fb03 f901 	mul.w	r9, r3, r1
 801ee34:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ee38:	011b      	lsls	r3, r3, #4
 801ee3a:	b289      	uxth	r1, r1
 801ee3c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801ee40:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ee44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee46:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801ee4a:	eba3 0309 	sub.w	r3, r3, r9
 801ee4e:	b29b      	uxth	r3, r3
 801ee50:	eba8 0801 	sub.w	r8, r8, r1
 801ee54:	fa1f f888 	uxth.w	r8, r8
 801ee58:	435f      	muls	r7, r3
 801ee5a:	fb08 770b 	mla	r7, r8, fp, r7
 801ee5e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ee62:	f8b4 e000 	ldrh.w	lr, [r4]
 801ee66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ee68:	fb01 770b 	mla	r7, r1, fp, r7
 801ee6c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ee70:	fb09 770b 	mla	r7, r9, fp, r7
 801ee74:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801ee78:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ee7c:	fb1b fb04 	smulbb	fp, fp, r4
 801ee80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee82:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ee86:	fb07 b704 	mla	r7, r7, r4, fp
 801ee8a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ee8e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801ee92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ee94:	f89c c000 	ldrb.w	ip, [ip]
 801ee98:	435e      	muls	r6, r3
 801ee9a:	fb08 660b 	mla	r6, r8, fp, r6
 801ee9e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801eea2:	fb01 660b 	mla	r6, r1, fp, r6
 801eea6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801eeaa:	fb09 660b 	mla	r6, r9, fp, r6
 801eeae:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801eeb2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801eeb6:	fb1b fb04 	smulbb	fp, fp, r4
 801eeba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eebc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801eec0:	fb06 b604 	mla	r6, r6, r4, fp
 801eec4:	9c08      	ldr	r4, [sp, #32]
 801eec6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801eeca:	fb03 f30c 	mul.w	r3, r3, ip
 801eece:	f892 c000 	ldrb.w	ip, [r2]
 801eed2:	fb08 330a 	mla	r3, r8, sl, r3
 801eed6:	fb01 330c 	mla	r3, r1, ip, r3
 801eeda:	f890 c000 	ldrb.w	ip, [r0]
 801eede:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eee2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eee8:	fa5f fe8e 	uxtb.w	lr, lr
 801eeec:	fb1e fe03 	smulbb	lr, lr, r3
 801eef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eef2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801eef6:	fb0c ec03 	mla	ip, ip, r3, lr
 801eefa:	b2bf      	uxth	r7, r7
 801eefc:	b2b6      	uxth	r6, r6
 801eefe:	fa1f fc8c 	uxth.w	ip, ip
 801ef02:	1c7b      	adds	r3, r7, #1
 801ef04:	f10c 0201 	add.w	r2, ip, #1
 801ef08:	f106 0b01 	add.w	fp, r6, #1
 801ef0c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ef10:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801ef14:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801ef18:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ef1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef20:	0976      	lsrs	r6, r6, #5
 801ef22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef24:	4317      	orrs	r7, r2
 801ef26:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ef2a:	4337      	orrs	r7, r6
 801ef2c:	f823 7b02 	strh.w	r7, [r3], #2
 801ef30:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ef32:	930d      	str	r3, [sp, #52]	; 0x34
 801ef34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ef36:	4413      	add	r3, r2
 801ef38:	9329      	str	r3, [sp, #164]	; 0xa4
 801ef3a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ef3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef3e:	4413      	add	r3, r2
 801ef40:	932a      	str	r3, [sp, #168]	; 0xa8
 801ef42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ef44:	3b01      	subs	r3, #1
 801ef46:	9311      	str	r3, [sp, #68]	; 0x44
 801ef48:	e5e1      	b.n	801eb0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801ef4a:	b151      	cbz	r1, 801ef62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801ef4c:	5d52      	ldrb	r2, [r2, r5]
 801ef4e:	9808      	ldr	r0, [sp, #32]
 801ef50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef54:	4402      	add	r2, r0
 801ef56:	4630      	mov	r0, r6
 801ef58:	46b4      	mov	ip, r6
 801ef5a:	e767      	b.n	801ee2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801ef5c:	4630      	mov	r0, r6
 801ef5e:	4632      	mov	r2, r6
 801ef60:	e764      	b.n	801ee2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801ef62:	4630      	mov	r0, r6
 801ef64:	4632      	mov	r2, r6
 801ef66:	e7f7      	b.n	801ef58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 801ef68:	b017      	add	sp, #92	; 0x5c
 801ef6a:	ecbd 8b08 	vpop	{d8-d11}
 801ef6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ef74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef78:	880e      	ldrh	r6, [r1, #0]
 801ef7a:	b085      	sub	sp, #20
 801ef7c:	0230      	lsls	r0, r6, #8
 801ef7e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801ef82:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801ef86:	0170      	lsls	r0, r6, #5
 801ef88:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ef8c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ef90:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ef94:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801ef98:	00f6      	lsls	r6, r6, #3
 801ef9a:	ea4b 0000 	orr.w	r0, fp, r0
 801ef9e:	b2f6      	uxtb	r6, r6
 801efa0:	4691      	mov	r9, r2
 801efa2:	fb05 7a0c 	mla	sl, r5, ip, r7
 801efa6:	4306      	orrs	r6, r0
 801efa8:	2d00      	cmp	r5, #0
 801efaa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801efae:	9603      	str	r6, [sp, #12]
 801efb0:	eb09 0e0a 	add.w	lr, r9, sl
 801efb4:	db42      	blt.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801efb6:	45a8      	cmp	r8, r5
 801efb8:	dd40      	ble.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801efba:	2f00      	cmp	r7, #0
 801efbc:	db3c      	blt.n	801f038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801efbe:	45bc      	cmp	ip, r7
 801efc0:	dd3a      	ble.n	801f038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801efc2:	f819 600a 	ldrb.w	r6, [r9, sl]
 801efc6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801efca:	441e      	add	r6, r3
 801efcc:	1c78      	adds	r0, r7, #1
 801efce:	d438      	bmi.n	801f042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801efd0:	4584      	cmp	ip, r0
 801efd2:	dd36      	ble.n	801f042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801efd4:	b3aa      	cbz	r2, 801f042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801efd6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801efda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efde:	4418      	add	r0, r3
 801efe0:	3501      	adds	r5, #1
 801efe2:	d432      	bmi.n	801f04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801efe4:	45a8      	cmp	r8, r5
 801efe6:	dd30      	ble.n	801f04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801efe8:	b37c      	cbz	r4, 801f04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801efea:	2f00      	cmp	r7, #0
 801efec:	db2b      	blt.n	801f046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801efee:	45bc      	cmp	ip, r7
 801eff0:	dd29      	ble.n	801f046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801eff2:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801eff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801effa:	441d      	add	r5, r3
 801effc:	3701      	adds	r7, #1
 801effe:	d427      	bmi.n	801f050 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801f000:	45bc      	cmp	ip, r7
 801f002:	dd25      	ble.n	801f050 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801f004:	b322      	cbz	r2, 801f050 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801f006:	44f4      	add	ip, lr
 801f008:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801f00c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f010:	443b      	add	r3, r7
 801f012:	781f      	ldrb	r7, [r3, #0]
 801f014:	f896 a000 	ldrb.w	sl, [r6]
 801f018:	f890 b000 	ldrb.w	fp, [r0]
 801f01c:	f895 9000 	ldrb.w	r9, [r5]
 801f020:	9700      	str	r7, [sp, #0]
 801f022:	2a0f      	cmp	r2, #15
 801f024:	d801      	bhi.n	801f02a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801f026:	2c0f      	cmp	r4, #15
 801f028:	d914      	bls.n	801f054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801f02a:	4b2c      	ldr	r3, [pc, #176]	; (801f0dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801f02c:	4a2c      	ldr	r2, [pc, #176]	; (801f0e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801f02e:	482d      	ldr	r0, [pc, #180]	; (801f0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801f030:	f240 210d 	movw	r1, #525	; 0x20d
 801f034:	f005 feea 	bl	8024e0c <__assert_func>
 801f038:	ae03      	add	r6, sp, #12
 801f03a:	e7c7      	b.n	801efcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801f03c:	a803      	add	r0, sp, #12
 801f03e:	4606      	mov	r6, r0
 801f040:	e7ce      	b.n	801efe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801f042:	a803      	add	r0, sp, #12
 801f044:	e7cc      	b.n	801efe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801f046:	ad03      	add	r5, sp, #12
 801f048:	e7d8      	b.n	801effc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801f04a:	ab03      	add	r3, sp, #12
 801f04c:	461d      	mov	r5, r3
 801f04e:	e7e0      	b.n	801f012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801f050:	ab03      	add	r3, sp, #12
 801f052:	e7de      	b.n	801f012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801f054:	b292      	uxth	r2, r2
 801f056:	b2a4      	uxth	r4, r4
 801f058:	fb02 f804 	mul.w	r8, r2, r4
 801f05c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f060:	0112      	lsls	r2, r2, #4
 801f062:	b2a4      	uxth	r4, r4
 801f064:	f890 e002 	ldrb.w	lr, [r0, #2]
 801f068:	78b7      	ldrb	r7, [r6, #2]
 801f06a:	7840      	ldrb	r0, [r0, #1]
 801f06c:	7876      	ldrb	r6, [r6, #1]
 801f06e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801f072:	eba2 0208 	sub.w	r2, r2, r8
 801f076:	b292      	uxth	r2, r2
 801f078:	ebac 0c04 	sub.w	ip, ip, r4
 801f07c:	fa1f fc8c 	uxth.w	ip, ip
 801f080:	fb02 fe0e 	mul.w	lr, r2, lr
 801f084:	fb0c ee07 	mla	lr, ip, r7, lr
 801f088:	78af      	ldrb	r7, [r5, #2]
 801f08a:	fb04 ee07 	mla	lr, r4, r7, lr
 801f08e:	789f      	ldrb	r7, [r3, #2]
 801f090:	785b      	ldrb	r3, [r3, #1]
 801f092:	fb08 e707 	mla	r7, r8, r7, lr
 801f096:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f09a:	fb02 fe0b 	mul.w	lr, r2, fp
 801f09e:	4342      	muls	r2, r0
 801f0a0:	7868      	ldrb	r0, [r5, #1]
 801f0a2:	9701      	str	r7, [sp, #4]
 801f0a4:	fb0c ee0a 	mla	lr, ip, sl, lr
 801f0a8:	9f00      	ldr	r7, [sp, #0]
 801f0aa:	fb0c 2206 	mla	r2, ip, r6, r2
 801f0ae:	fb04 ee09 	mla	lr, r4, r9, lr
 801f0b2:	fb04 2400 	mla	r4, r4, r0, r2
 801f0b6:	fb08 ee07 	mla	lr, r8, r7, lr
 801f0ba:	9f01      	ldr	r7, [sp, #4]
 801f0bc:	fb08 4803 	mla	r8, r8, r3, r4
 801f0c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f0c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f0c8:	ea47 070e 	orr.w	r7, r7, lr
 801f0cc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f0d0:	ea47 0708 	orr.w	r7, r7, r8
 801f0d4:	800f      	strh	r7, [r1, #0]
 801f0d6:	b005      	add	sp, #20
 801f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0dc:	08054484 	.word	0x08054484
 801f0e0:	080549dd 	.word	0x080549dd
 801f0e4:	0805450c 	.word	0x0805450c

0801f0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ec:	ed2d 8b0a 	vpush	{d8-d12}
 801f0f0:	b091      	sub	sp, #68	; 0x44
 801f0f2:	eeb0 aa40 	vmov.f32	s20, s0
 801f0f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f0f8:	9307      	str	r3, [sp, #28]
 801f0fa:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 801f0fe:	910c      	str	r1, [sp, #48]	; 0x30
 801f100:	9309      	str	r3, [sp, #36]	; 0x24
 801f102:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f106:	900f      	str	r0, [sp, #60]	; 0x3c
 801f108:	6860      	ldr	r0, [r4, #4]
 801f10a:	920e      	str	r2, [sp, #56]	; 0x38
 801f10c:	fb00 1303 	mla	r3, r0, r3, r1
 801f110:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f112:	6821      	ldr	r1, [r4, #0]
 801f114:	6854      	ldr	r4, [r2, #4]
 801f116:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 801f11a:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 801f11e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f122:	9308      	str	r3, [sp, #32]
 801f124:	6813      	ldr	r3, [r2, #0]
 801f126:	930a      	str	r3, [sp, #40]	; 0x28
 801f128:	eef0 9a60 	vmov.f32	s19, s1
 801f12c:	eeb0 9a41 	vmov.f32	s18, s2
 801f130:	eeb0 8a62 	vmov.f32	s16, s5
 801f134:	eef0 8a43 	vmov.f32	s17, s6
 801f138:	eeb0 ca44 	vmov.f32	s24, s8
 801f13c:	eef0 ba64 	vmov.f32	s23, s9
 801f140:	eeb0 ba45 	vmov.f32	s22, s10
 801f144:	3404      	adds	r4, #4
 801f146:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	dc03      	bgt.n	801f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f152:	2b00      	cmp	r3, #0
 801f154:	f340 81cb 	ble.w	801f4ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f158:	9b07      	ldr	r3, [sp, #28]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	f340 80dd 	ble.w	801f31a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 801f160:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f162:	1412      	asrs	r2, r2, #16
 801f164:	ea4f 432b 	mov.w	r3, fp, asr #16
 801f168:	d42c      	bmi.n	801f1c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f16a:	1c51      	adds	r1, r2, #1
 801f16c:	428d      	cmp	r5, r1
 801f16e:	dd2c      	ble.n	801f1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f170:	2b00      	cmp	r3, #0
 801f172:	db2a      	blt.n	801f1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f174:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f176:	1c59      	adds	r1, r3, #1
 801f178:	4288      	cmp	r0, r1
 801f17a:	dd26      	ble.n	801f1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f17c:	9b07      	ldr	r3, [sp, #28]
 801f17e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f180:	9925      	ldr	r1, [sp, #148]	; 0x94
 801f182:	3b01      	subs	r3, #1
 801f184:	fb02 1203 	mla	r2, r2, r3, r1
 801f188:	1412      	asrs	r2, r2, #16
 801f18a:	d428      	bmi.n	801f1de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f18c:	3201      	adds	r2, #1
 801f18e:	4295      	cmp	r5, r2
 801f190:	dd25      	ble.n	801f1de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f192:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f194:	fb02 b303 	mla	r3, r2, r3, fp
 801f198:	141b      	asrs	r3, r3, #16
 801f19a:	d420      	bmi.n	801f1de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f19e:	3301      	adds	r3, #1
 801f1a0:	429a      	cmp	r2, r3
 801f1a2:	dd1c      	ble.n	801f1de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801f1a4:	9b07      	ldr	r3, [sp, #28]
 801f1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f1a8:	9b08      	ldr	r3, [sp, #32]
 801f1aa:	930d      	str	r3, [sp, #52]	; 0x34
 801f1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	f300 8116 	bgt.w	801f3e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801f1b4:	9b07      	ldr	r3, [sp, #28]
 801f1b6:	9a08      	ldr	r2, [sp, #32]
 801f1b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f1c0:	9308      	str	r3, [sp, #32]
 801f1c2:	e0ac      	b.n	801f31e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801f1c4:	1c51      	adds	r1, r2, #1
 801f1c6:	f040 809b 	bne.w	801f300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f1ca:	42aa      	cmp	r2, r5
 801f1cc:	f280 8098 	bge.w	801f300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f1d0:	1c5a      	adds	r2, r3, #1
 801f1d2:	f2c0 8095 	blt.w	801f300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f1d8:	4293      	cmp	r3, r2
 801f1da:	f280 8091 	bge.w	801f300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801f1de:	9b07      	ldr	r3, [sp, #28]
 801f1e0:	930d      	str	r3, [sp, #52]	; 0x34
 801f1e2:	9b08      	ldr	r3, [sp, #32]
 801f1e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	dde3      	ble.n	801f1b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f1ec:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f1ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1f0:	1400      	asrs	r0, r0, #16
 801f1f2:	ea4f 422b 	mov.w	r2, fp, asr #16
 801f1f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f1fa:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801f1fe:	f100 80d9 	bmi.w	801f3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f202:	1c46      	adds	r6, r0, #1
 801f204:	42b5      	cmp	r5, r6
 801f206:	f340 80d7 	ble.w	801f3b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f20a:	2a00      	cmp	r2, #0
 801f20c:	f2c0 80d4 	blt.w	801f3b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f210:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f212:	1c56      	adds	r6, r2, #1
 801f214:	42b7      	cmp	r7, r6
 801f216:	f340 80cf 	ble.w	801f3b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f21a:	fb02 0005 	mla	r0, r2, r5, r0
 801f21e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f222:	4402      	add	r2, r0
 801f224:	5c30      	ldrb	r0, [r6, r0]
 801f226:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f22a:	eb04 0c08 	add.w	ip, r4, r8
 801f22e:	2b00      	cmp	r3, #0
 801f230:	f000 80b2 	beq.w	801f398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f234:	7856      	ldrb	r6, [r2, #1]
 801f236:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f23a:	4426      	add	r6, r4
 801f23c:	2900      	cmp	r1, #0
 801f23e:	f000 80b3 	beq.w	801f3a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801f242:	1950      	adds	r0, r2, r5
 801f244:	5d52      	ldrb	r2, [r2, r5]
 801f246:	7840      	ldrb	r0, [r0, #1]
 801f248:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f24c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f250:	4422      	add	r2, r4
 801f252:	4420      	add	r0, r4
 801f254:	b29b      	uxth	r3, r3
 801f256:	b289      	uxth	r1, r1
 801f258:	fb03 f901 	mul.w	r9, r3, r1
 801f25c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f260:	011b      	lsls	r3, r3, #4
 801f262:	b289      	uxth	r1, r1
 801f264:	78b7      	ldrb	r7, [r6, #2]
 801f266:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f26a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f26e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f272:	eba3 0309 	sub.w	r3, r3, r9
 801f276:	b29b      	uxth	r3, r3
 801f278:	ebae 0e01 	sub.w	lr, lr, r1
 801f27c:	fa1f fe8e 	uxth.w	lr, lr
 801f280:	435f      	muls	r7, r3
 801f282:	fb0e 770a 	mla	r7, lr, sl, r7
 801f286:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f28a:	fb01 770a 	mla	r7, r1, sl, r7
 801f28e:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f292:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f296:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f29a:	f896 8000 	ldrb.w	r8, [r6]
 801f29e:	7876      	ldrb	r6, [r6, #1]
 801f2a0:	fb03 f808 	mul.w	r8, r3, r8
 801f2a4:	fb0e 8807 	mla	r8, lr, r7, r8
 801f2a8:	7817      	ldrb	r7, [r2, #0]
 801f2aa:	fb01 8807 	mla	r8, r1, r7, r8
 801f2ae:	7807      	ldrb	r7, [r0, #0]
 801f2b0:	fb09 8707 	mla	r7, r9, r7, r8
 801f2b4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f2b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f2bc:	ea4a 0707 	orr.w	r7, sl, r7
 801f2c0:	4373      	muls	r3, r6
 801f2c2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f2c6:	fb0e 330c 	mla	r3, lr, ip, r3
 801f2ca:	fb01 310a 	mla	r1, r1, sl, r3
 801f2ce:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2d4:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f2d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2dc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f2e0:	ea47 070a 	orr.w	r7, r7, sl
 801f2e4:	801f      	strh	r7, [r3, #0]
 801f2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f2ea:	3302      	adds	r3, #2
 801f2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f2f0:	4413      	add	r3, r2
 801f2f2:	9325      	str	r3, [sp, #148]	; 0x94
 801f2f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2f6:	449b      	add	fp, r3
 801f2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2fa:	3b01      	subs	r3, #1
 801f2fc:	930d      	str	r3, [sp, #52]	; 0x34
 801f2fe:	e772      	b.n	801f1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f300:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f302:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f304:	4413      	add	r3, r2
 801f306:	9325      	str	r3, [sp, #148]	; 0x94
 801f308:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f30a:	449b      	add	fp, r3
 801f30c:	9b07      	ldr	r3, [sp, #28]
 801f30e:	3b01      	subs	r3, #1
 801f310:	9307      	str	r3, [sp, #28]
 801f312:	9b08      	ldr	r3, [sp, #32]
 801f314:	3302      	adds	r3, #2
 801f316:	9308      	str	r3, [sp, #32]
 801f318:	e71e      	b.n	801f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f31a:	f47f af2f 	bne.w	801f17c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f320:	2b00      	cmp	r3, #0
 801f322:	f340 80e4 	ble.w	801f4ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f326:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f32a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f32e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f332:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f334:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f338:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f33c:	eef0 6a48 	vmov.f32	s13, s16
 801f340:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f344:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f348:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f34c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801f350:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f354:	eef0 6a68 	vmov.f32	s13, s17
 801f358:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f35c:	ee18 2a10 	vmov	r2, s16
 801f360:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f364:	fb92 f3f3 	sdiv	r3, r2, r3
 801f368:	ee18 2a90 	vmov	r2, s17
 801f36c:	9327      	str	r3, [sp, #156]	; 0x9c
 801f36e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f370:	fb92 f3f3 	sdiv	r3, r2, r3
 801f374:	9328      	str	r3, [sp, #160]	; 0xa0
 801f376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f37a:	3b01      	subs	r3, #1
 801f37c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f380:	930c      	str	r3, [sp, #48]	; 0x30
 801f382:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f384:	bf08      	it	eq
 801f386:	4613      	moveq	r3, r2
 801f388:	ee16 ba90 	vmov	fp, s13
 801f38c:	9307      	str	r3, [sp, #28]
 801f38e:	eef0 8a67 	vmov.f32	s17, s15
 801f392:	eeb0 8a47 	vmov.f32	s16, s14
 801f396:	e6d8      	b.n	801f14a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801f398:	b149      	cbz	r1, 801f3ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f39a:	5d52      	ldrb	r2, [r2, r5]
 801f39c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f3a0:	4422      	add	r2, r4
 801f3a2:	4660      	mov	r0, ip
 801f3a4:	4666      	mov	r6, ip
 801f3a6:	e755      	b.n	801f254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801f3a8:	4660      	mov	r0, ip
 801f3aa:	4662      	mov	r2, ip
 801f3ac:	e752      	b.n	801f254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801f3ae:	4660      	mov	r0, ip
 801f3b0:	4662      	mov	r2, ip
 801f3b2:	e7f7      	b.n	801f3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801f3b4:	1c47      	adds	r7, r0, #1
 801f3b6:	d196      	bne.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f3b8:	4285      	cmp	r5, r0
 801f3ba:	dd94      	ble.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f3bc:	1c56      	adds	r6, r2, #1
 801f3be:	db92      	blt.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f3c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f3c2:	4296      	cmp	r6, r2
 801f3c4:	dd8f      	ble.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f3c6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f3ca:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f3ce:	e9cd 5600 	strd	r5, r6, [sp]
 801f3d2:	4623      	mov	r3, r4
 801f3d4:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 801f3d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f3da:	f7ff fdcb 	bl	801ef74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801f3de:	e782      	b.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f3e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f3e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f3e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f3e6:	1412      	asrs	r2, r2, #16
 801f3e8:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f3ec:	fb05 2000 	mla	r0, r5, r0, r2
 801f3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3f2:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f3f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f3fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f3fe:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801f402:	4402      	add	r2, r0
 801f404:	eb04 0c08 	add.w	ip, r4, r8
 801f408:	2b00      	cmp	r3, #0
 801f40a:	d062      	beq.n	801f4d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 801f40c:	7856      	ldrb	r6, [r2, #1]
 801f40e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f412:	4426      	add	r6, r4
 801f414:	2900      	cmp	r1, #0
 801f416:	d064      	beq.n	801f4e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801f418:	1950      	adds	r0, r2, r5
 801f41a:	5d52      	ldrb	r2, [r2, r5]
 801f41c:	7840      	ldrb	r0, [r0, #1]
 801f41e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f422:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f426:	4422      	add	r2, r4
 801f428:	4420      	add	r0, r4
 801f42a:	b29b      	uxth	r3, r3
 801f42c:	b289      	uxth	r1, r1
 801f42e:	fb03 f901 	mul.w	r9, r3, r1
 801f432:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f436:	011b      	lsls	r3, r3, #4
 801f438:	b289      	uxth	r1, r1
 801f43a:	78b7      	ldrb	r7, [r6, #2]
 801f43c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f440:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f444:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f448:	eba3 0309 	sub.w	r3, r3, r9
 801f44c:	b29b      	uxth	r3, r3
 801f44e:	ebae 0e01 	sub.w	lr, lr, r1
 801f452:	fa1f fe8e 	uxth.w	lr, lr
 801f456:	435f      	muls	r7, r3
 801f458:	fb0e 770a 	mla	r7, lr, sl, r7
 801f45c:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f460:	fb01 770a 	mla	r7, r1, sl, r7
 801f464:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f468:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f46c:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f470:	f896 8000 	ldrb.w	r8, [r6]
 801f474:	7876      	ldrb	r6, [r6, #1]
 801f476:	fb03 f808 	mul.w	r8, r3, r8
 801f47a:	fb0e 8807 	mla	r8, lr, r7, r8
 801f47e:	7817      	ldrb	r7, [r2, #0]
 801f480:	fb01 8807 	mla	r8, r1, r7, r8
 801f484:	7807      	ldrb	r7, [r0, #0]
 801f486:	fb09 8707 	mla	r7, r9, r7, r8
 801f48a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f48e:	4373      	muls	r3, r6
 801f490:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f494:	7856      	ldrb	r6, [r2, #1]
 801f496:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f498:	ea4a 0707 	orr.w	r7, sl, r7
 801f49c:	fb0e 330c 	mla	r3, lr, ip, r3
 801f4a0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f4a4:	fb01 3306 	mla	r3, r1, r6, r3
 801f4a8:	fb09 3a0a 	mla	sl, r9, sl, r3
 801f4ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4b6:	ea47 070a 	orr.w	r7, r7, sl
 801f4ba:	f823 7b02 	strh.w	r7, [r3], #2
 801f4be:	930d      	str	r3, [sp, #52]	; 0x34
 801f4c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f4c2:	4413      	add	r3, r2
 801f4c4:	9325      	str	r3, [sp, #148]	; 0x94
 801f4c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f4c8:	449b      	add	fp, r3
 801f4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4cc:	3b01      	subs	r3, #1
 801f4ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4d0:	e66c      	b.n	801f1ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801f4d2:	b149      	cbz	r1, 801f4e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 801f4d4:	5d52      	ldrb	r2, [r2, r5]
 801f4d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4da:	4422      	add	r2, r4
 801f4dc:	4660      	mov	r0, ip
 801f4de:	4666      	mov	r6, ip
 801f4e0:	e7a3      	b.n	801f42a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f4e2:	4660      	mov	r0, ip
 801f4e4:	4662      	mov	r2, ip
 801f4e6:	e7a0      	b.n	801f42a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f4e8:	4660      	mov	r0, ip
 801f4ea:	4662      	mov	r2, ip
 801f4ec:	e7f7      	b.n	801f4de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f4ee:	b011      	add	sp, #68	; 0x44
 801f4f0:	ecbd 8b0a 	vpop	{d8-d12}
 801f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801f4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4fc:	8808      	ldrh	r0, [r1, #0]
 801f4fe:	b085      	sub	sp, #20
 801f500:	1206      	asrs	r6, r0, #8
 801f502:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801f506:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f50a:	9600      	str	r6, [sp, #0]
 801f50c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f510:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801f514:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801f518:	10c6      	asrs	r6, r0, #3
 801f51a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f51e:	9601      	str	r6, [sp, #4]
 801f520:	00c0      	lsls	r0, r0, #3
 801f522:	fb04 560c 	mla	r6, r4, ip, r5
 801f526:	b2c0      	uxtb	r0, r0
 801f528:	4692      	mov	sl, r2
 801f52a:	eb02 0e06 	add.w	lr, r2, r6
 801f52e:	9a00      	ldr	r2, [sp, #0]
 801f530:	9002      	str	r0, [sp, #8]
 801f532:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f536:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f53a:	9a01      	ldr	r2, [sp, #4]
 801f53c:	2c00      	cmp	r4, #0
 801f53e:	4698      	mov	r8, r3
 801f540:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f544:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f548:	db3e      	blt.n	801f5c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f54a:	45a1      	cmp	r9, r4
 801f54c:	dd3c      	ble.n	801f5c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801f54e:	2d00      	cmp	r5, #0
 801f550:	db38      	blt.n	801f5c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801f552:	45ac      	cmp	ip, r5
 801f554:	dd36      	ble.n	801f5c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801f556:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801f55a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801f55e:	1c6e      	adds	r6, r5, #1
 801f560:	d435      	bmi.n	801f5ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f562:	45b4      	cmp	ip, r6
 801f564:	dd33      	ble.n	801f5ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f566:	b393      	cbz	r3, 801f5ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801f568:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801f56c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801f570:	3401      	adds	r4, #1
 801f572:	d430      	bmi.n	801f5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f574:	45a1      	cmp	r9, r4
 801f576:	dd2e      	ble.n	801f5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f578:	b36f      	cbz	r7, 801f5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801f57a:	2d00      	cmp	r5, #0
 801f57c:	db29      	blt.n	801f5d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801f57e:	45ac      	cmp	ip, r5
 801f580:	dd27      	ble.n	801f5d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801f582:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801f586:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801f58a:	3501      	adds	r5, #1
 801f58c:	d407      	bmi.n	801f59e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f58e:	45ac      	cmp	ip, r5
 801f590:	dd05      	ble.n	801f59e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f592:	b123      	cbz	r3, 801f59e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f594:	44f4      	add	ip, lr
 801f596:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f59a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801f59e:	2b0f      	cmp	r3, #15
 801f5a0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f5a4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f5a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f5ac:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f5b0:	d801      	bhi.n	801f5b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801f5b2:	2f0f      	cmp	r7, #15
 801f5b4:	d911      	bls.n	801f5da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801f5b6:	4b7f      	ldr	r3, [pc, #508]	; (801f7b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 801f5b8:	4a7f      	ldr	r2, [pc, #508]	; (801f7b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 801f5ba:	4880      	ldr	r0, [pc, #512]	; (801f7bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801f5bc:	f240 210d 	movw	r1, #525	; 0x20d
 801f5c0:	f005 fc24 	bl	8024e0c <__assert_func>
 801f5c4:	4602      	mov	r2, r0
 801f5c6:	e7ca      	b.n	801f55e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 801f5c8:	4606      	mov	r6, r0
 801f5ca:	4602      	mov	r2, r0
 801f5cc:	e7d0      	b.n	801f570 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801f5ce:	4606      	mov	r6, r0
 801f5d0:	e7ce      	b.n	801f570 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801f5d2:	4604      	mov	r4, r0
 801f5d4:	e7d9      	b.n	801f58a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801f5d6:	4604      	mov	r4, r0
 801f5d8:	e7e1      	b.n	801f59e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801f5da:	b29b      	uxth	r3, r3
 801f5dc:	b2bf      	uxth	r7, r7
 801f5de:	fb03 fe07 	mul.w	lr, r3, r7
 801f5e2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f5e6:	011b      	lsls	r3, r3, #4
 801f5e8:	eba3 0c0e 	sub.w	ip, r3, lr
 801f5ec:	b2bf      	uxth	r7, r7
 801f5ee:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f5f2:	fa1f fc8c 	uxth.w	ip, ip
 801f5f6:	1bed      	subs	r5, r5, r7
 801f5f8:	b2ad      	uxth	r5, r5
 801f5fa:	fb0c f30a 	mul.w	r3, ip, sl
 801f5fe:	fb05 330b 	mla	r3, r5, fp, r3
 801f602:	fb07 3309 	mla	r3, r7, r9, r3
 801f606:	fb0e 3308 	mla	r3, lr, r8, r3
 801f60a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f60e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f612:	9303      	str	r3, [sp, #12]
 801f614:	d018      	beq.n	801f648 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 801f616:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f61a:	fb0b f303 	mul.w	r3, fp, r3
 801f61e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f622:	fb0b fb02 	mul.w	fp, fp, r2
 801f626:	0a1a      	lsrs	r2, r3, #8
 801f628:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f62c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f630:	441a      	add	r2, r3
 801f632:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f636:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f63a:	0a12      	lsrs	r2, r2, #8
 801f63c:	0a1b      	lsrs	r3, r3, #8
 801f63e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f646:	431a      	orrs	r2, r3
 801f648:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f64c:	d019      	beq.n	801f682 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 801f64e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f652:	fb0a fb0b 	mul.w	fp, sl, fp
 801f656:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f65a:	fb0a fa06 	mul.w	sl, sl, r6
 801f65e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f662:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f666:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f66a:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f66e:	445e      	add	r6, fp
 801f670:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f674:	0a36      	lsrs	r6, r6, #8
 801f676:	0a1b      	lsrs	r3, r3, #8
 801f678:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f67c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f680:	431e      	orrs	r6, r3
 801f682:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f686:	d019      	beq.n	801f6bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 801f688:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f68c:	fb09 fa0a 	mul.w	sl, r9, sl
 801f690:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f694:	fb09 f904 	mul.w	r9, r9, r4
 801f698:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f69c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f6a0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f6a4:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f6a8:	4454      	add	r4, sl
 801f6aa:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f6ae:	0a24      	lsrs	r4, r4, #8
 801f6b0:	0a1b      	lsrs	r3, r3, #8
 801f6b2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f6b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6ba:	431c      	orrs	r4, r3
 801f6bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6c0:	d019      	beq.n	801f6f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801f6c2:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f6c6:	fb08 f909 	mul.w	r9, r8, r9
 801f6ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f6ce:	fb08 f800 	mul.w	r8, r8, r0
 801f6d2:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f6d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f6da:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f6de:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f6e2:	4448      	add	r0, r9
 801f6e4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f6e8:	0a00      	lsrs	r0, r0, #8
 801f6ea:	0a1b      	lsrs	r3, r3, #8
 801f6ec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f6f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6f4:	4318      	orrs	r0, r3
 801f6f6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f6fa:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f6fe:	fb0c f808 	mul.w	r8, ip, r8
 801f702:	fb05 8803 	mla	r8, r5, r3, r8
 801f706:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f70a:	fb07 8803 	mla	r8, r7, r3, r8
 801f70e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f712:	fb0e 8303 	mla	r3, lr, r3, r8
 801f716:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f71a:	fb0c f606 	mul.w	r6, ip, r6
 801f71e:	0a1b      	lsrs	r3, r3, #8
 801f720:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f724:	fb05 6202 	mla	r2, r5, r2, r6
 801f728:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f72c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f730:	fb07 2703 	mla	r7, r7, r3, r2
 801f734:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f738:	b295      	uxth	r5, r2
 801f73a:	9a03      	ldr	r2, [sp, #12]
 801f73c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f740:	436a      	muls	r2, r5
 801f742:	fb0e 7303 	mla	r3, lr, r3, r7
 801f746:	1c50      	adds	r0, r2, #1
 801f748:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f74c:	0a1b      	lsrs	r3, r3, #8
 801f74e:	9a00      	ldr	r2, [sp, #0]
 801f750:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f754:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f758:	ea48 0303 	orr.w	r3, r8, r3
 801f75c:	b2c0      	uxtb	r0, r0
 801f75e:	fb12 f200 	smulbb	r2, r2, r0
 801f762:	0c1e      	lsrs	r6, r3, #16
 801f764:	fb06 2605 	mla	r6, r6, r5, r2
 801f768:	9a01      	ldr	r2, [sp, #4]
 801f76a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801f76e:	fb12 f200 	smulbb	r2, r2, r0
 801f772:	fb04 2205 	mla	r2, r4, r5, r2
 801f776:	b294      	uxth	r4, r2
 801f778:	9a02      	ldr	r2, [sp, #8]
 801f77a:	b2db      	uxtb	r3, r3
 801f77c:	fb12 f200 	smulbb	r2, r2, r0
 801f780:	fb03 2205 	mla	r2, r3, r5, r2
 801f784:	b2b6      	uxth	r6, r6
 801f786:	b292      	uxth	r2, r2
 801f788:	1c73      	adds	r3, r6, #1
 801f78a:	1c50      	adds	r0, r2, #1
 801f78c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801f790:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f794:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f798:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f79c:	4313      	orrs	r3, r2
 801f79e:	1c62      	adds	r2, r4, #1
 801f7a0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f7a4:	0952      	lsrs	r2, r2, #5
 801f7a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f7aa:	4313      	orrs	r3, r2
 801f7ac:	800b      	strh	r3, [r1, #0]
 801f7ae:	b005      	add	sp, #20
 801f7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7b4:	08054484 	.word	0x08054484
 801f7b8:	080549dd 	.word	0x080549dd
 801f7bc:	0805450c 	.word	0x0805450c

0801f7c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c4:	ed2d 8b08 	vpush	{d8-d11}
 801f7c8:	b09b      	sub	sp, #108	; 0x6c
 801f7ca:	eeb0 aa40 	vmov.f32	s20, s0
 801f7ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f7d0:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f7d4:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f7d6:	9311      	str	r3, [sp, #68]	; 0x44
 801f7d8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f7dc:	9114      	str	r1, [sp, #80]	; 0x50
 801f7de:	9317      	str	r3, [sp, #92]	; 0x5c
 801f7e0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f7e4:	9019      	str	r0, [sp, #100]	; 0x64
 801f7e6:	6868      	ldr	r0, [r5, #4]
 801f7e8:	9218      	str	r2, [sp, #96]	; 0x60
 801f7ea:	fb00 1303 	mla	r3, r0, r3, r1
 801f7ee:	6829      	ldr	r1, [r5, #0]
 801f7f0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f7f2:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f7f6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f7fa:	930c      	str	r3, [sp, #48]	; 0x30
 801f7fc:	6813      	ldr	r3, [r2, #0]
 801f7fe:	9313      	str	r3, [sp, #76]	; 0x4c
 801f800:	6853      	ldr	r3, [r2, #4]
 801f802:	3304      	adds	r3, #4
 801f804:	eef0 9a60 	vmov.f32	s19, s1
 801f808:	eeb0 9a41 	vmov.f32	s18, s2
 801f80c:	eeb0 8a62 	vmov.f32	s16, s5
 801f810:	eef0 8a43 	vmov.f32	s17, s6
 801f814:	eef0 ba44 	vmov.f32	s23, s8
 801f818:	eeb0 ba64 	vmov.f32	s22, s9
 801f81c:	eef0 aa45 	vmov.f32	s21, s10
 801f820:	9308      	str	r3, [sp, #32]
 801f822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f824:	2b00      	cmp	r3, #0
 801f826:	dc03      	bgt.n	801f830 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f828:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	f340 8363 	ble.w	801fef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801f830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f832:	2b00      	cmp	r3, #0
 801f834:	f340 81ad 	ble.w	801fb92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 801f838:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f83a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f83c:	1412      	asrs	r2, r2, #16
 801f83e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f842:	d42f      	bmi.n	801f8a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f844:	1c51      	adds	r1, r2, #1
 801f846:	428c      	cmp	r4, r1
 801f848:	dd2f      	ble.n	801f8aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	db2d      	blt.n	801f8aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f84e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f850:	1c59      	adds	r1, r3, #1
 801f852:	4288      	cmp	r0, r1
 801f854:	dd29      	ble.n	801f8aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f858:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f85a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f85c:	3b01      	subs	r3, #1
 801f85e:	fb02 1203 	mla	r2, r2, r3, r1
 801f862:	1412      	asrs	r2, r2, #16
 801f864:	d42b      	bmi.n	801f8be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f866:	3201      	adds	r2, #1
 801f868:	4294      	cmp	r4, r2
 801f86a:	dd28      	ble.n	801f8be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f86c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f86e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f870:	fb02 1303 	mla	r3, r2, r3, r1
 801f874:	141b      	asrs	r3, r3, #16
 801f876:	d422      	bmi.n	801f8be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f87a:	3301      	adds	r3, #1
 801f87c:	429a      	cmp	r2, r3
 801f87e:	dd1e      	ble.n	801f8be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f882:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f886:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f88a:	9312      	str	r3, [sp, #72]	; 0x48
 801f88c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f88e:	2b00      	cmp	r3, #0
 801f890:	f300 81ea 	bgt.w	801fc68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 801f894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f89c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f8a0:	930c      	str	r3, [sp, #48]	; 0x30
 801f8a2:	e178      	b.n	801fb96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 801f8a4:	1c51      	adds	r1, r2, #1
 801f8a6:	f040 8165 	bne.w	801fb74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f8aa:	42a2      	cmp	r2, r4
 801f8ac:	f280 8162 	bge.w	801fb74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f8b0:	1c5f      	adds	r7, r3, #1
 801f8b2:	f2c0 815f 	blt.w	801fb74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f8b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f8b8:	4293      	cmp	r3, r2
 801f8ba:	f280 815b 	bge.w	801fb74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8c0:	9316      	str	r3, [sp, #88]	; 0x58
 801f8c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8c4:	9312      	str	r3, [sp, #72]	; 0x48
 801f8c6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f8ca:	9315      	str	r3, [sp, #84]	; 0x54
 801f8cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	dde0      	ble.n	801f894 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f8d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f8d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8d6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f8da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f8dc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f8e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f8e2:	1412      	asrs	r2, r2, #16
 801f8e4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f8e8:	f100 81a5 	bmi.w	801fc36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 801f8ec:	1c55      	adds	r5, r2, #1
 801f8ee:	42ac      	cmp	r4, r5
 801f8f0:	f340 81a3 	ble.w	801fc3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	f2c0 81a0 	blt.w	801fc3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f8fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801f8fc:	1c5d      	adds	r5, r3, #1
 801f8fe:	42af      	cmp	r7, r5
 801f900:	f340 819b 	ble.w	801fc3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801f904:	fb03 2304 	mla	r3, r3, r4, r2
 801f908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f90a:	18d5      	adds	r5, r2, r3
 801f90c:	5cd3      	ldrb	r3, [r2, r3]
 801f90e:	9a08      	ldr	r2, [sp, #32]
 801f910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f914:	0e1f      	lsrs	r7, r3, #24
 801f916:	2800      	cmp	r0, #0
 801f918:	f000 817c 	beq.w	801fc14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801f91c:	786a      	ldrb	r2, [r5, #1]
 801f91e:	9e08      	ldr	r6, [sp, #32]
 801f920:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f924:	920d      	str	r2, [sp, #52]	; 0x34
 801f926:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f92a:	2900      	cmp	r1, #0
 801f92c:	f000 817d 	beq.w	801fc2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 801f930:	192a      	adds	r2, r5, r4
 801f932:	5d2d      	ldrb	r5, [r5, r4]
 801f934:	7852      	ldrb	r2, [r2, #1]
 801f936:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f93a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f93e:	950a      	str	r5, [sp, #40]	; 0x28
 801f940:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f944:	920e      	str	r2, [sp, #56]	; 0x38
 801f946:	0e15      	lsrs	r5, r2, #24
 801f948:	b280      	uxth	r0, r0
 801f94a:	b289      	uxth	r1, r1
 801f94c:	fb00 fa01 	mul.w	sl, r0, r1
 801f950:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f954:	0100      	lsls	r0, r0, #4
 801f956:	eba0 080a 	sub.w	r8, r0, sl
 801f95a:	b289      	uxth	r1, r1
 801f95c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f960:	fa1f f888 	uxth.w	r8, r8
 801f964:	1a52      	subs	r2, r2, r1
 801f966:	b292      	uxth	r2, r2
 801f968:	fb08 f00e 	mul.w	r0, r8, lr
 801f96c:	fb02 0007 	mla	r0, r2, r7, r0
 801f970:	fb01 0009 	mla	r0, r1, r9, r0
 801f974:	fb0a 0005 	mla	r0, sl, r5, r0
 801f978:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f97c:	2800      	cmp	r0, #0
 801f97e:	f000 80ea 	beq.w	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f982:	2fff      	cmp	r7, #255	; 0xff
 801f984:	d01a      	beq.n	801f9bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 801f986:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f98a:	fb07 fc0c 	mul.w	ip, r7, ip
 801f98e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f992:	435f      	muls	r7, r3
 801f994:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f998:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f99c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f9a0:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f9a4:	4463      	add	r3, ip
 801f9a6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f9aa:	0a1b      	lsrs	r3, r3, #8
 801f9ac:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f9b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f9b4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f9b8:	ea43 030b 	orr.w	r3, r3, fp
 801f9bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f9c0:	d01e      	beq.n	801fa00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f9c2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f9c4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f9c8:	fb0e fb0b 	mul.w	fp, lr, fp
 801f9cc:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801f9d0:	fb0e fe07 	mul.w	lr, lr, r7
 801f9d4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f9d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f9e0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f9e4:	44dc      	add	ip, fp
 801f9e6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f9ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9f6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f9fa:	ea4c 060e 	orr.w	r6, ip, lr
 801f9fe:	960d      	str	r6, [sp, #52]	; 0x34
 801fa00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fa04:	d01e      	beq.n	801fa44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801fa06:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fa08:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801fa0c:	fb09 fe0e 	mul.w	lr, r9, lr
 801fa10:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801fa14:	fb09 f907 	mul.w	r9, r9, r7
 801fa18:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa20:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa24:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801fa28:	44f4      	add	ip, lr
 801fa2a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fa2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa32:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fa36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa3a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fa3e:	ea4c 0609 	orr.w	r6, ip, r9
 801fa42:	960a      	str	r6, [sp, #40]	; 0x28
 801fa44:	2dff      	cmp	r5, #255	; 0xff
 801fa46:	d01c      	beq.n	801fa82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801fa48:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801fa4a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801fa4e:	fb05 fe0e 	mul.w	lr, r5, lr
 801fa52:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801fa56:	437d      	muls	r5, r7
 801fa58:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fa5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa60:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa64:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801fa68:	44f4      	add	ip, lr
 801fa6a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801fa6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa72:	0a2d      	lsrs	r5, r5, #8
 801fa74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa78:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fa7c:	ea4c 0505 	orr.w	r5, ip, r5
 801fa80:	950e      	str	r5, [sp, #56]	; 0x38
 801fa82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fa84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fa86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fa8a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fa8e:	fb08 f505 	mul.w	r5, r8, r5
 801fa92:	fb02 5507 	mla	r5, r2, r7, r5
 801fa96:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801fa9a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801fa9c:	fb01 5507 	mla	r5, r1, r7, r5
 801faa0:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801faa4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801faa6:	fb0a 5507 	mla	r5, sl, r7, r5
 801faaa:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801faae:	fb08 f807 	mul.w	r8, r8, r7
 801fab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fab6:	fb02 8303 	mla	r3, r2, r3, r8
 801faba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fabc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801fabe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fac4:	fb01 330c 	mla	r3, r1, ip, r3
 801fac8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801facc:	fb0a 3a01 	mla	sl, sl, r1, r3
 801fad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fad2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fad4:	881f      	ldrh	r7, [r3, #0]
 801fad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fad8:	0a2d      	lsrs	r5, r5, #8
 801fada:	4343      	muls	r3, r0
 801fadc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fae0:	1c58      	adds	r0, r3, #1
 801fae2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fae6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801faea:	ea45 050a 	orr.w	r5, r5, sl
 801faee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801faf2:	0c29      	lsrs	r1, r5, #16
 801faf4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801faf8:	123b      	asrs	r3, r7, #8
 801fafa:	b2c0      	uxtb	r0, r0
 801fafc:	fb11 f102 	smulbb	r1, r1, r2
 801fb00:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801fb04:	fb03 1300 	mla	r3, r3, r0, r1
 801fb08:	b299      	uxth	r1, r3
 801fb0a:	10fa      	asrs	r2, r7, #3
 801fb0c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fb10:	fb13 f306 	smulbb	r3, r3, r6
 801fb14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fb18:	fb02 3200 	mla	r2, r2, r0, r3
 801fb1c:	b2ed      	uxtb	r5, r5
 801fb1e:	00fb      	lsls	r3, r7, #3
 801fb20:	b2db      	uxtb	r3, r3
 801fb22:	fb15 f506 	smulbb	r5, r5, r6
 801fb26:	fb03 5500 	mla	r5, r3, r0, r5
 801fb2a:	b292      	uxth	r2, r2
 801fb2c:	b2ad      	uxth	r5, r5
 801fb2e:	1c4b      	adds	r3, r1, #1
 801fb30:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fb34:	1c68      	adds	r0, r5, #1
 801fb36:	1c51      	adds	r1, r2, #1
 801fb38:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801fb3c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fb40:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fb44:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fb48:	0952      	lsrs	r2, r2, #5
 801fb4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb4e:	432b      	orrs	r3, r5
 801fb50:	4313      	orrs	r3, r2
 801fb52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb54:	8013      	strh	r3, [r2, #0]
 801fb56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb58:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb5a:	3302      	adds	r3, #2
 801fb5c:	9312      	str	r3, [sp, #72]	; 0x48
 801fb5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb60:	4413      	add	r3, r2
 801fb62:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb64:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb68:	4413      	add	r3, r2
 801fb6a:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fb6e:	3b01      	subs	r3, #1
 801fb70:	9316      	str	r3, [sp, #88]	; 0x58
 801fb72:	e6ab      	b.n	801f8cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fb74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb76:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fb78:	4413      	add	r3, r2
 801fb7a:	932d      	str	r3, [sp, #180]	; 0xb4
 801fb7c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fb7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb80:	4413      	add	r3, r2
 801fb82:	932e      	str	r3, [sp, #184]	; 0xb8
 801fb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb86:	3b01      	subs	r3, #1
 801fb88:	9309      	str	r3, [sp, #36]	; 0x24
 801fb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb8c:	3302      	adds	r3, #2
 801fb8e:	930c      	str	r3, [sp, #48]	; 0x30
 801fb90:	e64e      	b.n	801f830 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fb92:	f47f ae60 	bne.w	801f856 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801fb96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	f340 81ac 	ble.w	801fef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801fb9e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fba6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fbaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fbb0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fbb4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fbb8:	eef0 6a48 	vmov.f32	s13, s16
 801fbbc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fbc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbc4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fbc8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801fbcc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fbd0:	eef0 6a68 	vmov.f32	s13, s17
 801fbd4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fbd8:	ee18 2a10 	vmov	r2, s16
 801fbdc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fbe0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbe4:	ee18 2a90 	vmov	r2, s17
 801fbe8:	932f      	str	r3, [sp, #188]	; 0xbc
 801fbea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbec:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbf0:	9330      	str	r3, [sp, #192]	; 0xc0
 801fbf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fbf4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fbf6:	3b01      	subs	r3, #1
 801fbf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbfc:	9314      	str	r3, [sp, #80]	; 0x50
 801fbfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc00:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801fc04:	bf08      	it	eq
 801fc06:	4613      	moveq	r3, r2
 801fc08:	9309      	str	r3, [sp, #36]	; 0x24
 801fc0a:	eef0 8a67 	vmov.f32	s17, s15
 801fc0e:	eeb0 8a47 	vmov.f32	s16, s14
 801fc12:	e606      	b.n	801f822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801fc14:	b161      	cbz	r1, 801fc30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801fc16:	5d2a      	ldrb	r2, [r5, r4]
 801fc18:	9d08      	ldr	r5, [sp, #32]
 801fc1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fc1e:	920a      	str	r2, [sp, #40]	; 0x28
 801fc20:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fc24:	25ff      	movs	r5, #255	; 0xff
 801fc26:	46ae      	mov	lr, r5
 801fc28:	e68e      	b.n	801f948 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801fc2a:	25ff      	movs	r5, #255	; 0xff
 801fc2c:	46a9      	mov	r9, r5
 801fc2e:	e68b      	b.n	801f948 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801fc30:	25ff      	movs	r5, #255	; 0xff
 801fc32:	46a9      	mov	r9, r5
 801fc34:	e7f7      	b.n	801fc26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801fc36:	1c56      	adds	r6, r2, #1
 801fc38:	d18d      	bne.n	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc3a:	4294      	cmp	r4, r2
 801fc3c:	dd8b      	ble.n	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc3e:	1c5d      	adds	r5, r3, #1
 801fc40:	db89      	blt.n	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fc44:	429d      	cmp	r5, r3
 801fc46:	dd86      	ble.n	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc48:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801fc4c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801fc4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc50:	9202      	str	r2, [sp, #8]
 801fc52:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fc56:	e9cd 4300 	strd	r4, r3, [sp]
 801fc5a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 801fc5e:	9b08      	ldr	r3, [sp, #32]
 801fc60:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fc62:	f7ff fc49 	bl	801f4f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801fc66:	e776      	b.n	801fb56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801fc68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fc6a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fc6c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fc70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc72:	1412      	asrs	r2, r2, #16
 801fc74:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fc78:	141b      	asrs	r3, r3, #16
 801fc7a:	fb04 2303 	mla	r3, r4, r3, r2
 801fc7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc80:	18d5      	adds	r5, r2, r3
 801fc82:	5cd3      	ldrb	r3, [r2, r3]
 801fc84:	9a08      	ldr	r2, [sp, #32]
 801fc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fc8a:	0e1e      	lsrs	r6, r3, #24
 801fc8c:	2900      	cmp	r1, #0
 801fc8e:	f000 8121 	beq.w	801fed4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801fc92:	786a      	ldrb	r2, [r5, #1]
 801fc94:	9f08      	ldr	r7, [sp, #32]
 801fc96:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fc9a:	920f      	str	r2, [sp, #60]	; 0x3c
 801fc9c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fca0:	2800      	cmp	r0, #0
 801fca2:	f000 8122 	beq.w	801feea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 801fca6:	192a      	adds	r2, r5, r4
 801fca8:	5d2d      	ldrb	r5, [r5, r4]
 801fcaa:	7852      	ldrb	r2, [r2, #1]
 801fcac:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fcb0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fcb4:	950b      	str	r5, [sp, #44]	; 0x2c
 801fcb6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801fcba:	9210      	str	r2, [sp, #64]	; 0x40
 801fcbc:	0e15      	lsrs	r5, r2, #24
 801fcbe:	b289      	uxth	r1, r1
 801fcc0:	b280      	uxth	r0, r0
 801fcc2:	fb01 f900 	mul.w	r9, r1, r0
 801fcc6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fcca:	0109      	lsls	r1, r1, #4
 801fccc:	eba1 0e09 	sub.w	lr, r1, r9
 801fcd0:	b280      	uxth	r0, r0
 801fcd2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fcd6:	fa1f fe8e 	uxth.w	lr, lr
 801fcda:	1a12      	subs	r2, r2, r0
 801fcdc:	b292      	uxth	r2, r2
 801fcde:	fb0e f10c 	mul.w	r1, lr, ip
 801fce2:	fb02 1106 	mla	r1, r2, r6, r1
 801fce6:	fb00 1108 	mla	r1, r0, r8, r1
 801fcea:	fb09 1105 	mla	r1, r9, r5, r1
 801fcee:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fcf2:	2900      	cmp	r1, #0
 801fcf4:	f000 80e0 	beq.w	801feb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 801fcf8:	2eff      	cmp	r6, #255	; 0xff
 801fcfa:	d016      	beq.n	801fd2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 801fcfc:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fd00:	4377      	muls	r7, r6
 801fd02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd06:	435e      	muls	r6, r3
 801fd08:	0a3b      	lsrs	r3, r7, #8
 801fd0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd12:	443b      	add	r3, r7
 801fd14:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fd18:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fd1c:	0a1b      	lsrs	r3, r3, #8
 801fd1e:	0a3f      	lsrs	r7, r7, #8
 801fd20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd24:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fd28:	433b      	orrs	r3, r7
 801fd2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fd2e:	d01d      	beq.n	801fd6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 801fd30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fd32:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fd34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fd38:	fb0c f606 	mul.w	r6, ip, r6
 801fd3c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fd40:	fb0c fc07 	mul.w	ip, ip, r7
 801fd44:	0a37      	lsrs	r7, r6, #8
 801fd46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd4a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fd4e:	4437      	add	r7, r6
 801fd50:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fd54:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fd58:	0a3f      	lsrs	r7, r7, #8
 801fd5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd5e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd62:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fd66:	ea47 060c 	orr.w	r6, r7, ip
 801fd6a:	960f      	str	r6, [sp, #60]	; 0x3c
 801fd6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fd70:	d01d      	beq.n	801fdae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801fd72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fd74:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fd78:	fb08 fc0c 	mul.w	ip, r8, ip
 801fd7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd80:	fb08 f806 	mul.w	r8, r8, r6
 801fd84:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fd88:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801fd8c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fd90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd94:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801fd98:	4467      	add	r7, ip
 801fd9a:	0a3f      	lsrs	r7, r7, #8
 801fd9c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fda0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fda4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fda8:	ea47 0608 	orr.w	r6, r7, r8
 801fdac:	960b      	str	r6, [sp, #44]	; 0x2c
 801fdae:	2dff      	cmp	r5, #255	; 0xff
 801fdb0:	d01a      	beq.n	801fde8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801fdb2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fdb4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fdb8:	fb05 fc0c 	mul.w	ip, r5, ip
 801fdbc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fdc0:	4375      	muls	r5, r6
 801fdc2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fdc6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fdce:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fdd2:	4467      	add	r7, ip
 801fdd4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fdd8:	0a3f      	lsrs	r7, r7, #8
 801fdda:	0a2d      	lsrs	r5, r5, #8
 801fddc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fde0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fde4:	433d      	orrs	r5, r7
 801fde6:	9510      	str	r5, [sp, #64]	; 0x40
 801fde8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801fdea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fdee:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fdf2:	fb0e f505 	mul.w	r5, lr, r5
 801fdf6:	fb02 5506 	mla	r5, r2, r6, r5
 801fdfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fdfc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe00:	fb00 5506 	mla	r5, r0, r6, r5
 801fe04:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fe06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fe0a:	fb09 5506 	mla	r5, r9, r6, r5
 801fe0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fe10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe14:	fb0e fe06 	mul.w	lr, lr, r6
 801fe18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe1c:	fb02 e303 	mla	r3, r2, r3, lr
 801fe20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe22:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fe26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe28:	fb00 3307 	mla	r3, r0, r7, r3
 801fe2c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fe30:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fe34:	fb01 f10b 	mul.w	r1, r1, fp
 801fe38:	0a2d      	lsrs	r5, r5, #8
 801fe3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe3e:	f8ba 0000 	ldrh.w	r0, [sl]
 801fe42:	1c4b      	adds	r3, r1, #1
 801fe44:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe4c:	ea45 050c 	orr.w	r5, r5, ip
 801fe50:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fe54:	1202      	asrs	r2, r0, #8
 801fe56:	0c2b      	lsrs	r3, r5, #16
 801fe58:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fe5c:	b2c9      	uxtb	r1, r1
 801fe5e:	fb13 f30b 	smulbb	r3, r3, fp
 801fe62:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fe66:	fb02 3201 	mla	r2, r2, r1, r3
 801fe6a:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801fe6e:	10c3      	asrs	r3, r0, #3
 801fe70:	b2ed      	uxtb	r5, r5
 801fe72:	00c0      	lsls	r0, r0, #3
 801fe74:	b2c0      	uxtb	r0, r0
 801fe76:	fb15 f50b 	smulbb	r5, r5, fp
 801fe7a:	fb00 5001 	mla	r0, r0, r1, r5
 801fe7e:	b292      	uxth	r2, r2
 801fe80:	fb16 f60b 	smulbb	r6, r6, fp
 801fe84:	b280      	uxth	r0, r0
 801fe86:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801fe8a:	fb03 6301 	mla	r3, r3, r1, r6
 801fe8e:	1c51      	adds	r1, r2, #1
 801fe90:	1c46      	adds	r6, r0, #1
 801fe92:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fe96:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801fe9a:	b29b      	uxth	r3, r3
 801fe9c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fea0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801fea4:	4332      	orrs	r2, r6
 801fea6:	1c5e      	adds	r6, r3, #1
 801fea8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801feac:	095b      	lsrs	r3, r3, #5
 801feae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feb2:	431a      	orrs	r2, r3
 801feb4:	f8aa 2000 	strh.w	r2, [sl]
 801feb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801feba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801febc:	4413      	add	r3, r2
 801febe:	932d      	str	r3, [sp, #180]	; 0xb4
 801fec0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fec2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fec4:	4413      	add	r3, r2
 801fec6:	932e      	str	r3, [sp, #184]	; 0xb8
 801fec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801feca:	3b01      	subs	r3, #1
 801fecc:	f10a 0a02 	add.w	sl, sl, #2
 801fed0:	9312      	str	r3, [sp, #72]	; 0x48
 801fed2:	e4db      	b.n	801f88c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801fed4:	b160      	cbz	r0, 801fef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801fed6:	5d2a      	ldrb	r2, [r5, r4]
 801fed8:	9d08      	ldr	r5, [sp, #32]
 801feda:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fede:	920b      	str	r2, [sp, #44]	; 0x2c
 801fee0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fee4:	25ff      	movs	r5, #255	; 0xff
 801fee6:	46ac      	mov	ip, r5
 801fee8:	e6e9      	b.n	801fcbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801feea:	25ff      	movs	r5, #255	; 0xff
 801feec:	46a8      	mov	r8, r5
 801feee:	e6e6      	b.n	801fcbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801fef0:	25ff      	movs	r5, #255	; 0xff
 801fef2:	46a8      	mov	r8, r5
 801fef4:	e7f7      	b.n	801fee6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801fef6:	b01b      	add	sp, #108	; 0x6c
 801fef8:	ecbd 8b08 	vpop	{d8-d11}
 801fefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff04:	8808      	ldrh	r0, [r1, #0]
 801ff06:	b085      	sub	sp, #20
 801ff08:	1206      	asrs	r6, r0, #8
 801ff0a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801ff0e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ff12:	9600      	str	r6, [sp, #0]
 801ff14:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ff18:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ff1c:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801ff20:	10c6      	asrs	r6, r0, #3
 801ff22:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ff26:	9601      	str	r6, [sp, #4]
 801ff28:	00c0      	lsls	r0, r0, #3
 801ff2a:	fb04 560c 	mla	r6, r4, ip, r5
 801ff2e:	b2c0      	uxtb	r0, r0
 801ff30:	4692      	mov	sl, r2
 801ff32:	eb02 0e06 	add.w	lr, r2, r6
 801ff36:	9a00      	ldr	r2, [sp, #0]
 801ff38:	9002      	str	r0, [sp, #8]
 801ff3a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ff3e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ff42:	9a01      	ldr	r2, [sp, #4]
 801ff44:	2c00      	cmp	r4, #0
 801ff46:	4698      	mov	r8, r3
 801ff48:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ff4c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ff50:	db3e      	blt.n	801ffd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff52:	45a1      	cmp	r9, r4
 801ff54:	dd3c      	ble.n	801ffd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801ff56:	2d00      	cmp	r5, #0
 801ff58:	db38      	blt.n	801ffcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801ff5a:	45ac      	cmp	ip, r5
 801ff5c:	dd36      	ble.n	801ffcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801ff5e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801ff62:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801ff66:	1c6e      	adds	r6, r5, #1
 801ff68:	d435      	bmi.n	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff6a:	45b4      	cmp	ip, r6
 801ff6c:	dd33      	ble.n	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff6e:	b393      	cbz	r3, 801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801ff70:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801ff74:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801ff78:	3401      	adds	r4, #1
 801ff7a:	d430      	bmi.n	801ffde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff7c:	45a1      	cmp	r9, r4
 801ff7e:	dd2e      	ble.n	801ffde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff80:	b36f      	cbz	r7, 801ffde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801ff82:	2d00      	cmp	r5, #0
 801ff84:	db29      	blt.n	801ffda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801ff86:	45ac      	cmp	ip, r5
 801ff88:	dd27      	ble.n	801ffda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801ff8a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801ff8e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801ff92:	3501      	adds	r5, #1
 801ff94:	d407      	bmi.n	801ffa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff96:	45ac      	cmp	ip, r5
 801ff98:	dd05      	ble.n	801ffa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff9a:	b123      	cbz	r3, 801ffa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ff9c:	44f4      	add	ip, lr
 801ff9e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ffa2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801ffa6:	2b0f      	cmp	r3, #15
 801ffa8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ffac:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ffb0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ffb4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ffb8:	d801      	bhi.n	801ffbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801ffba:	2f0f      	cmp	r7, #15
 801ffbc:	d911      	bls.n	801ffe2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801ffbe:	4b79      	ldr	r3, [pc, #484]	; (80201a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 801ffc0:	4a79      	ldr	r2, [pc, #484]	; (80201a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801ffc2:	487a      	ldr	r0, [pc, #488]	; (80201ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801ffc4:	f240 210d 	movw	r1, #525	; 0x20d
 801ffc8:	f004 ff20 	bl	8024e0c <__assert_func>
 801ffcc:	4602      	mov	r2, r0
 801ffce:	e7ca      	b.n	801ff66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 801ffd0:	4606      	mov	r6, r0
 801ffd2:	4602      	mov	r2, r0
 801ffd4:	e7d0      	b.n	801ff78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801ffd6:	4606      	mov	r6, r0
 801ffd8:	e7ce      	b.n	801ff78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801ffda:	4604      	mov	r4, r0
 801ffdc:	e7d9      	b.n	801ff92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 801ffde:	4604      	mov	r4, r0
 801ffe0:	e7e1      	b.n	801ffa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801ffe2:	b29b      	uxth	r3, r3
 801ffe4:	b2bf      	uxth	r7, r7
 801ffe6:	fb03 fe07 	mul.w	lr, r3, r7
 801ffea:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ffee:	011b      	lsls	r3, r3, #4
 801fff0:	eba3 0c0e 	sub.w	ip, r3, lr
 801fff4:	b2bf      	uxth	r7, r7
 801fff6:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fffa:	fa1f fc8c 	uxth.w	ip, ip
 801fffe:	1bed      	subs	r5, r5, r7
 8020000:	b2ad      	uxth	r5, r5
 8020002:	fb0c f30a 	mul.w	r3, ip, sl
 8020006:	fb05 330b 	mla	r3, r5, fp, r3
 802000a:	fb07 3309 	mla	r3, r7, r9, r3
 802000e:	fb0e 3308 	mla	r3, lr, r8, r3
 8020012:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020016:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802001a:	9303      	str	r3, [sp, #12]
 802001c:	d018      	beq.n	8020050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 802001e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020022:	fb0b f303 	mul.w	r3, fp, r3
 8020026:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802002a:	fb0b fb02 	mul.w	fp, fp, r2
 802002e:	0a1a      	lsrs	r2, r3, #8
 8020030:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020034:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020038:	441a      	add	r2, r3
 802003a:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802003e:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020042:	0a12      	lsrs	r2, r2, #8
 8020044:	0a1b      	lsrs	r3, r3, #8
 8020046:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802004a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802004e:	431a      	orrs	r2, r3
 8020050:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020054:	d019      	beq.n	802008a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 8020056:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802005a:	fb0a fb0b 	mul.w	fp, sl, fp
 802005e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020062:	fb0a fa06 	mul.w	sl, sl, r6
 8020066:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802006a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802006e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020072:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020076:	445e      	add	r6, fp
 8020078:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802007c:	0a36      	lsrs	r6, r6, #8
 802007e:	0a1b      	lsrs	r3, r3, #8
 8020080:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020084:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020088:	431e      	orrs	r6, r3
 802008a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802008e:	d019      	beq.n	80200c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8020090:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020094:	fb09 fa0a 	mul.w	sl, r9, sl
 8020098:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802009c:	fb09 f904 	mul.w	r9, r9, r4
 80200a0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80200a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80200a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80200ac:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80200b0:	4454      	add	r4, sl
 80200b2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80200b6:	0a24      	lsrs	r4, r4, #8
 80200b8:	0a1b      	lsrs	r3, r3, #8
 80200ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80200be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200c2:	431c      	orrs	r4, r3
 80200c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80200c8:	d019      	beq.n	80200fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 80200ca:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80200ce:	fb08 f909 	mul.w	r9, r8, r9
 80200d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80200d6:	fb08 f800 	mul.w	r8, r8, r0
 80200da:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80200de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200e2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80200e6:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80200ea:	4448      	add	r0, r9
 80200ec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80200f0:	0a00      	lsrs	r0, r0, #8
 80200f2:	0a1b      	lsrs	r3, r3, #8
 80200f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200fc:	4318      	orrs	r0, r3
 80200fe:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020102:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020106:	fb0c f808 	mul.w	r8, ip, r8
 802010a:	fb05 8803 	mla	r8, r5, r3, r8
 802010e:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020112:	fb07 8803 	mla	r8, r7, r3, r8
 8020116:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802011a:	fb0e 8303 	mla	r3, lr, r3, r8
 802011e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020122:	0a1b      	lsrs	r3, r3, #8
 8020124:	fb0c f606 	mul.w	r6, ip, r6
 8020128:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802012c:	fb05 6202 	mla	r2, r5, r2, r6
 8020130:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020134:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020138:	fb07 2703 	mla	r7, r7, r3, r2
 802013c:	9a03      	ldr	r2, [sp, #12]
 802013e:	9c02      	ldr	r4, [sp, #8]
 8020140:	9d01      	ldr	r5, [sp, #4]
 8020142:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020146:	fb0e 7303 	mla	r3, lr, r3, r7
 802014a:	43d0      	mvns	r0, r2
 802014c:	9a00      	ldr	r2, [sp, #0]
 802014e:	b2c0      	uxtb	r0, r0
 8020150:	0a1b      	lsrs	r3, r3, #8
 8020152:	4342      	muls	r2, r0
 8020154:	4344      	muls	r4, r0
 8020156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802015a:	ea48 0303 	orr.w	r3, r8, r3
 802015e:	4345      	muls	r5, r0
 8020160:	4620      	mov	r0, r4
 8020162:	1c54      	adds	r4, r2, #1
 8020164:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020168:	0c1a      	lsrs	r2, r3, #16
 802016a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802016e:	4a10      	ldr	r2, [pc, #64]	; (80201b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8020170:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 8020174:	1c44      	adds	r4, r0, #1
 8020176:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802017a:	b2d8      	uxtb	r0, r3
 802017c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020180:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8020184:	1c68      	adds	r0, r5, #1
 8020186:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 802018a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802018e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020192:	00db      	lsls	r3, r3, #3
 8020194:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020198:	4313      	orrs	r3, r2
 802019a:	800b      	strh	r3, [r1, #0]
 802019c:	b005      	add	sp, #20
 802019e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201a2:	bf00      	nop
 80201a4:	08054484 	.word	0x08054484
 80201a8:	080549dd 	.word	0x080549dd
 80201ac:	0805450c 	.word	0x0805450c
 80201b0:	fffff800 	.word	0xfffff800

080201b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b8:	ed2d 8b08 	vpush	{d8-d11}
 80201bc:	b097      	sub	sp, #92	; 0x5c
 80201be:	eeb0 aa40 	vmov.f32	s20, s0
 80201c2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80201c4:	9307      	str	r3, [sp, #28]
 80201c6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80201ca:	9112      	str	r1, [sp, #72]	; 0x48
 80201cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80201ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80201d2:	9015      	str	r0, [sp, #84]	; 0x54
 80201d4:	6868      	ldr	r0, [r5, #4]
 80201d6:	9214      	str	r2, [sp, #80]	; 0x50
 80201d8:	fb00 1303 	mla	r3, r0, r3, r1
 80201dc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80201de:	6829      	ldr	r1, [r5, #0]
 80201e0:	6855      	ldr	r5, [r2, #4]
 80201e2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80201e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80201ea:	930a      	str	r3, [sp, #40]	; 0x28
 80201ec:	6813      	ldr	r3, [r2, #0]
 80201ee:	9311      	str	r3, [sp, #68]	; 0x44
 80201f0:	eef0 9a60 	vmov.f32	s19, s1
 80201f4:	eeb0 9a41 	vmov.f32	s18, s2
 80201f8:	eeb0 8a62 	vmov.f32	s16, s5
 80201fc:	eef0 8a43 	vmov.f32	s17, s6
 8020200:	eef0 ba44 	vmov.f32	s23, s8
 8020204:	eeb0 ba64 	vmov.f32	s22, s9
 8020208:	eef0 aa45 	vmov.f32	s21, s10
 802020c:	3504      	adds	r5, #4
 802020e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020210:	2b00      	cmp	r3, #0
 8020212:	dc03      	bgt.n	802021c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020216:	2b00      	cmp	r3, #0
 8020218:	f340 834d 	ble.w	80208b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 802021c:	9b07      	ldr	r3, [sp, #28]
 802021e:	2b00      	cmp	r3, #0
 8020220:	f340 819c 	ble.w	802055c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 8020224:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020226:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020228:	1412      	asrs	r2, r2, #16
 802022a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802022e:	d42d      	bmi.n	802028c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8020230:	1c51      	adds	r1, r2, #1
 8020232:	428c      	cmp	r4, r1
 8020234:	dd2d      	ble.n	8020292 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020236:	2b00      	cmp	r3, #0
 8020238:	db2b      	blt.n	8020292 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802023a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802023c:	1c59      	adds	r1, r3, #1
 802023e:	4288      	cmp	r0, r1
 8020240:	dd27      	ble.n	8020292 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020242:	9b07      	ldr	r3, [sp, #28]
 8020244:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020246:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020248:	3b01      	subs	r3, #1
 802024a:	fb02 1203 	mla	r2, r2, r3, r1
 802024e:	1412      	asrs	r2, r2, #16
 8020250:	d429      	bmi.n	80202a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020252:	3201      	adds	r2, #1
 8020254:	4294      	cmp	r4, r2
 8020256:	dd26      	ble.n	80202a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020258:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802025a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802025c:	fb02 1303 	mla	r3, r2, r3, r1
 8020260:	141b      	asrs	r3, r3, #16
 8020262:	d420      	bmi.n	80202a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020266:	3301      	adds	r3, #1
 8020268:	429a      	cmp	r2, r3
 802026a:	dd1c      	ble.n	80202a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802026c:	9b07      	ldr	r3, [sp, #28]
 802026e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8020272:	9310      	str	r3, [sp, #64]	; 0x40
 8020274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020276:	2b00      	cmp	r3, #0
 8020278:	f300 81da 	bgt.w	8020630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 802027c:	9b07      	ldr	r3, [sp, #28]
 802027e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020284:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020288:	930a      	str	r3, [sp, #40]	; 0x28
 802028a:	e169      	b.n	8020560 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802028c:	1c51      	adds	r1, r2, #1
 802028e:	f040 8156 	bne.w	802053e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8020292:	42a2      	cmp	r2, r4
 8020294:	f280 8153 	bge.w	802053e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8020298:	1c5a      	adds	r2, r3, #1
 802029a:	f2c0 8150 	blt.w	802053e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 802029e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80202a0:	4293      	cmp	r3, r2
 80202a2:	f280 814c 	bge.w	802053e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 80202a6:	9b07      	ldr	r3, [sp, #28]
 80202a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80202aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ac:	9310      	str	r3, [sp, #64]	; 0x40
 80202ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	dde3      	ble.n	802027c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80202b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80202b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80202b8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80202bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80202be:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80202c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80202c4:	1412      	asrs	r2, r2, #16
 80202c6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80202ca:	f100 8198 	bmi.w	80205fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 80202ce:	1c56      	adds	r6, r2, #1
 80202d0:	42b4      	cmp	r4, r6
 80202d2:	f340 8196 	ble.w	8020602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	f2c0 8193 	blt.w	8020602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80202dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80202de:	1c5e      	adds	r6, r3, #1
 80202e0:	42b7      	cmp	r7, r6
 80202e2:	f340 818e 	ble.w	8020602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80202e6:	fb03 2304 	mla	r3, r3, r4, r2
 80202ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202ec:	18d6      	adds	r6, r2, r3
 80202ee:	5cd3      	ldrb	r3, [r2, r3]
 80202f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80202f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202f8:	2900      	cmp	r1, #0
 80202fa:	f000 8170 	beq.w	80205de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80202fe:	7872      	ldrb	r2, [r6, #1]
 8020300:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020304:	920b      	str	r2, [sp, #44]	; 0x2c
 8020306:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802030a:	2800      	cmp	r0, #0
 802030c:	f000 8171 	beq.w	80205f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 8020310:	1932      	adds	r2, r6, r4
 8020312:	5d36      	ldrb	r6, [r6, r4]
 8020314:	7852      	ldrb	r2, [r2, #1]
 8020316:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802031a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802031e:	9608      	str	r6, [sp, #32]
 8020320:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020324:	920c      	str	r2, [sp, #48]	; 0x30
 8020326:	0e16      	lsrs	r6, r2, #24
 8020328:	b289      	uxth	r1, r1
 802032a:	b280      	uxth	r0, r0
 802032c:	fb01 fb00 	mul.w	fp, r1, r0
 8020330:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020334:	0109      	lsls	r1, r1, #4
 8020336:	eba1 090b 	sub.w	r9, r1, fp
 802033a:	b280      	uxth	r0, r0
 802033c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020340:	fa1f f989 	uxth.w	r9, r9
 8020344:	1a12      	subs	r2, r2, r0
 8020346:	b292      	uxth	r2, r2
 8020348:	fb09 f108 	mul.w	r1, r9, r8
 802034c:	fb02 110c 	mla	r1, r2, ip, r1
 8020350:	fb00 110a 	mla	r1, r0, sl, r1
 8020354:	fb0b 1106 	mla	r1, fp, r6, r1
 8020358:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802035c:	2900      	cmp	r1, #0
 802035e:	f000 80df 	beq.w	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8020362:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020366:	d01b      	beq.n	80203a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8020368:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802036c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020374:	fb0c fc03 	mul.w	ip, ip, r3
 8020378:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802037c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020380:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020384:	4473      	add	r3, lr
 8020386:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802038a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802038e:	0a1b      	lsrs	r3, r3, #8
 8020390:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020394:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020398:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802039c:	ea43 030e 	orr.w	r3, r3, lr
 80203a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80203a4:	d01e      	beq.n	80203e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 80203a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80203a8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80203ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80203b0:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80203b4:	fb08 f80e 	mul.w	r8, r8, lr
 80203b8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80203bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80203c4:	44e6      	add	lr, ip
 80203c6:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80203ca:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80203ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203d2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80203d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80203da:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80203de:	ea4e 0708 	orr.w	r7, lr, r8
 80203e2:	970b      	str	r7, [sp, #44]	; 0x2c
 80203e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80203e8:	d01e      	beq.n	8020428 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80203ea:	9f08      	ldr	r7, [sp, #32]
 80203ec:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80203f0:	fb0a f808 	mul.w	r8, sl, r8
 80203f4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80203f8:	fb0a fa0c 	mul.w	sl, sl, ip
 80203fc:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020400:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020404:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020408:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802040c:	44c6      	add	lr, r8
 802040e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020416:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802041a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802041e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020422:	ea4e 070a 	orr.w	r7, lr, sl
 8020426:	9708      	str	r7, [sp, #32]
 8020428:	2eff      	cmp	r6, #255	; 0xff
 802042a:	d01d      	beq.n	8020468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 802042c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802042e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020432:	fb06 f808 	mul.w	r8, r6, r8
 8020436:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802043a:	fb06 f60c 	mul.w	r6, r6, ip
 802043e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020442:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020446:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802044a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802044e:	44c6      	add	lr, r8
 8020450:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020454:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020458:	0a36      	lsrs	r6, r6, #8
 802045a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802045e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020462:	ea4e 0606 	orr.w	r6, lr, r6
 8020466:	960c      	str	r6, [sp, #48]	; 0x30
 8020468:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802046a:	9f08      	ldr	r7, [sp, #32]
 802046c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020470:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020474:	fb09 f606 	mul.w	r6, r9, r6
 8020478:	fb02 660c 	mla	r6, r2, ip, r6
 802047c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020480:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020482:	fb00 660c 	mla	r6, r0, ip, r6
 8020486:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802048a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802048c:	fb0b 660c 	mla	r6, fp, ip, r6
 8020490:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020494:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020498:	fb09 f90c 	mul.w	r9, r9, ip
 802049c:	fb02 9303 	mla	r3, r2, r3, r9
 80204a0:	9a08      	ldr	r2, [sp, #32]
 80204a2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80204a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204a8:	fb00 330e 	mla	r3, r0, lr, r3
 80204ac:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80204b0:	fb0b 3b00 	mla	fp, fp, r0, r3
 80204b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80204b6:	881b      	ldrh	r3, [r3, #0]
 80204b8:	43c9      	mvns	r1, r1
 80204ba:	1218      	asrs	r0, r3, #8
 80204bc:	b2c9      	uxtb	r1, r1
 80204be:	10da      	asrs	r2, r3, #3
 80204c0:	0a36      	lsrs	r6, r6, #8
 80204c2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80204c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80204ca:	00db      	lsls	r3, r3, #3
 80204cc:	4348      	muls	r0, r1
 80204ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80204d2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80204d6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80204da:	b2db      	uxtb	r3, r3
 80204dc:	434b      	muls	r3, r1
 80204de:	ea46 060b 	orr.w	r6, r6, fp
 80204e2:	434a      	muls	r2, r1
 80204e4:	1c41      	adds	r1, r0, #1
 80204e6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80204ea:	0c30      	lsrs	r0, r6, #16
 80204ec:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80204f0:	494e      	ldr	r1, [pc, #312]	; (802062c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 80204f2:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 80204f6:	1c59      	adds	r1, r3, #1
 80204f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80204fc:	b2f3      	uxtb	r3, r6
 80204fe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020502:	1c51      	adds	r1, r2, #1
 8020504:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020508:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802050c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020510:	00f6      	lsls	r6, r6, #3
 8020512:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8020516:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802051a:	431e      	orrs	r6, r3
 802051c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802051e:	801e      	strh	r6, [r3, #0]
 8020520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020522:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020524:	3302      	adds	r3, #2
 8020526:	9310      	str	r3, [sp, #64]	; 0x40
 8020528:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802052a:	4413      	add	r3, r2
 802052c:	9329      	str	r3, [sp, #164]	; 0xa4
 802052e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020530:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020532:	4413      	add	r3, r2
 8020534:	932a      	str	r3, [sp, #168]	; 0xa8
 8020536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020538:	3b01      	subs	r3, #1
 802053a:	9313      	str	r3, [sp, #76]	; 0x4c
 802053c:	e6b7      	b.n	80202ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802053e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020540:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020542:	4413      	add	r3, r2
 8020544:	9329      	str	r3, [sp, #164]	; 0xa4
 8020546:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020548:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802054a:	4413      	add	r3, r2
 802054c:	932a      	str	r3, [sp, #168]	; 0xa8
 802054e:	9b07      	ldr	r3, [sp, #28]
 8020550:	3b01      	subs	r3, #1
 8020552:	9307      	str	r3, [sp, #28]
 8020554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020556:	3302      	adds	r3, #2
 8020558:	930a      	str	r3, [sp, #40]	; 0x28
 802055a:	e65f      	b.n	802021c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802055c:	f47f ae71 	bne.w	8020242 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8020560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020562:	2b00      	cmp	r3, #0
 8020564:	f340 81a7 	ble.w	80208b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8020568:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802056c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020570:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020574:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020576:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802057a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802057e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020582:	eef0 6a48 	vmov.f32	s13, s16
 8020586:	ee69 7a27 	vmul.f32	s15, s18, s15
 802058a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802058e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020592:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020596:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802059a:	eef0 6a68 	vmov.f32	s13, s17
 802059e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205a2:	ee18 2a10 	vmov	r2, s16
 80205a6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ae:	ee18 2a90 	vmov	r2, s17
 80205b2:	932b      	str	r3, [sp, #172]	; 0xac
 80205b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ba:	932c      	str	r3, [sp, #176]	; 0xb0
 80205bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80205be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80205c0:	3b01      	subs	r3, #1
 80205c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205c6:	9312      	str	r3, [sp, #72]	; 0x48
 80205c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205ca:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80205ce:	bf08      	it	eq
 80205d0:	4613      	moveq	r3, r2
 80205d2:	9307      	str	r3, [sp, #28]
 80205d4:	eef0 8a67 	vmov.f32	s17, s15
 80205d8:	eeb0 8a47 	vmov.f32	s16, s14
 80205dc:	e617      	b.n	802020e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 80205de:	b158      	cbz	r0, 80205f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 80205e0:	5d32      	ldrb	r2, [r6, r4]
 80205e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80205e6:	9208      	str	r2, [sp, #32]
 80205e8:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80205ec:	26ff      	movs	r6, #255	; 0xff
 80205ee:	46b0      	mov	r8, r6
 80205f0:	e69a      	b.n	8020328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80205f2:	26ff      	movs	r6, #255	; 0xff
 80205f4:	46b2      	mov	sl, r6
 80205f6:	e697      	b.n	8020328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80205f8:	26ff      	movs	r6, #255	; 0xff
 80205fa:	46b2      	mov	sl, r6
 80205fc:	e7f7      	b.n	80205ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 80205fe:	1c57      	adds	r7, r2, #1
 8020600:	d18e      	bne.n	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8020602:	4294      	cmp	r4, r2
 8020604:	dd8c      	ble.n	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8020606:	1c5e      	adds	r6, r3, #1
 8020608:	db8a      	blt.n	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802060a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802060c:	429e      	cmp	r6, r3
 802060e:	dd87      	ble.n	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8020610:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020618:	e9cd 4600 	strd	r4, r6, [sp]
 802061c:	462b      	mov	r3, r5
 802061e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8020622:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020624:	f7ff fc6c 	bl	801ff00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020628:	e77a      	b.n	8020520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 802062a:	bf00      	nop
 802062c:	fffff800 	.word	0xfffff800
 8020630:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020632:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020634:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020638:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802063a:	1409      	asrs	r1, r1, #16
 802063c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020640:	141b      	asrs	r3, r3, #16
 8020642:	fb04 1303 	mla	r3, r4, r3, r1
 8020646:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020648:	18ce      	adds	r6, r1, r3
 802064a:	5ccb      	ldrb	r3, [r1, r3]
 802064c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020650:	0e1f      	lsrs	r7, r3, #24
 8020652:	2a00      	cmp	r2, #0
 8020654:	f000 811f 	beq.w	8020896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 8020658:	7871      	ldrb	r1, [r6, #1]
 802065a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802065e:	910d      	str	r1, [sp, #52]	; 0x34
 8020660:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020664:	2800      	cmp	r0, #0
 8020666:	f000 8120 	beq.w	80208aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 802066a:	1931      	adds	r1, r6, r4
 802066c:	5d36      	ldrb	r6, [r6, r4]
 802066e:	7849      	ldrb	r1, [r1, #1]
 8020670:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020674:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020678:	9609      	str	r6, [sp, #36]	; 0x24
 802067a:	ea4f 6916 	mov.w	r9, r6, lsr #24
 802067e:	910e      	str	r1, [sp, #56]	; 0x38
 8020680:	0e0e      	lsrs	r6, r1, #24
 8020682:	b292      	uxth	r2, r2
 8020684:	b280      	uxth	r0, r0
 8020686:	fb02 fa00 	mul.w	sl, r2, r0
 802068a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802068e:	0112      	lsls	r2, r2, #4
 8020690:	eba2 080a 	sub.w	r8, r2, sl
 8020694:	b280      	uxth	r0, r0
 8020696:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802069a:	fa1f f888 	uxth.w	r8, r8
 802069e:	1a09      	subs	r1, r1, r0
 80206a0:	b289      	uxth	r1, r1
 80206a2:	fb08 f20e 	mul.w	r2, r8, lr
 80206a6:	fb01 2207 	mla	r2, r1, r7, r2
 80206aa:	fb00 2209 	mla	r2, r0, r9, r2
 80206ae:	fb0a 2206 	mla	r2, sl, r6, r2
 80206b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80206b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80206b8:	2a00      	cmp	r2, #0
 80206ba:	f000 80de 	beq.w	802087a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 80206be:	2fff      	cmp	r7, #255	; 0xff
 80206c0:	d01a      	beq.n	80206f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 80206c2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80206c6:	fb07 fc0c 	mul.w	ip, r7, ip
 80206ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206ce:	435f      	muls	r7, r3
 80206d0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80206d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206dc:	4463      	add	r3, ip
 80206de:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80206e2:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80206e6:	0a1b      	lsrs	r3, r3, #8
 80206e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80206f4:	ea43 030c 	orr.w	r3, r3, ip
 80206f8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80206fc:	d01f      	beq.n	802073e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 80206fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020702:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020706:	fb0e f707 	mul.w	r7, lr, r7
 802070a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802070e:	fb0e fe0c 	mul.w	lr, lr, ip
 8020712:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020716:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802071a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802071e:	44bc      	add	ip, r7
 8020720:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020724:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020728:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802072c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020734:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020738:	ea4c 020e 	orr.w	r2, ip, lr
 802073c:	920d      	str	r2, [sp, #52]	; 0x34
 802073e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020742:	d01e      	beq.n	8020782 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 8020744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020746:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802074a:	fb09 fe0e 	mul.w	lr, r9, lr
 802074e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020752:	fb09 f907 	mul.w	r9, r9, r7
 8020756:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802075a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802075e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020762:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020766:	44f4      	add	ip, lr
 8020768:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802076c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020770:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020774:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020778:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802077c:	ea4c 0209 	orr.w	r2, ip, r9
 8020780:	9209      	str	r2, [sp, #36]	; 0x24
 8020782:	2eff      	cmp	r6, #255	; 0xff
 8020784:	d01c      	beq.n	80207c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 8020786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020788:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802078c:	fb06 fe0e 	mul.w	lr, r6, lr
 8020790:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020794:	437e      	muls	r6, r7
 8020796:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802079a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802079e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80207a2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80207a6:	44f4      	add	ip, lr
 80207a8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80207ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207b0:	0a36      	lsrs	r6, r6, #8
 80207b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80207ba:	ea4c 0206 	orr.w	r2, ip, r6
 80207be:	920e      	str	r2, [sp, #56]	; 0x38
 80207c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80207c2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80207c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207c8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80207cc:	fb08 f606 	mul.w	r6, r8, r6
 80207d0:	fb01 6607 	mla	r6, r1, r7, r6
 80207d4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80207d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207da:	fb00 6607 	mla	r6, r0, r7, r6
 80207de:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80207e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80207e4:	fb0a 6607 	mla	r6, sl, r7, r6
 80207e8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80207ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207ee:	fb08 f807 	mul.w	r8, r8, r7
 80207f2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80207f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80207fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207fc:	fb01 8303 	mla	r3, r1, r3, r8
 8020800:	fb00 330c 	mla	r3, r0, ip, r3
 8020804:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020808:	fb0a 3e0e 	mla	lr, sl, lr, r3
 802080c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802080e:	f8bb 3000 	ldrh.w	r3, [fp]
 8020812:	43d2      	mvns	r2, r2
 8020814:	1218      	asrs	r0, r3, #8
 8020816:	b2d2      	uxtb	r2, r2
 8020818:	0a36      	lsrs	r6, r6, #8
 802081a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802081e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020822:	4350      	muls	r0, r2
 8020824:	10d9      	asrs	r1, r3, #3
 8020826:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802082a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802082e:	00db      	lsls	r3, r3, #3
 8020830:	ea46 060e 	orr.w	r6, r6, lr
 8020834:	1c47      	adds	r7, r0, #1
 8020836:	b2db      	uxtb	r3, r3
 8020838:	4353      	muls	r3, r2
 802083a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802083e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020842:	0c37      	lsrs	r7, r6, #16
 8020844:	4351      	muls	r1, r2
 8020846:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802084a:	4a1d      	ldr	r2, [pc, #116]	; (80208c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 802084c:	1c5f      	adds	r7, r3, #1
 802084e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020852:	b2f7      	uxtb	r7, r6
 8020854:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020858:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802085c:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8020860:	1c4b      	adds	r3, r1, #1
 8020862:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020866:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802086a:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802086e:	00f6      	lsls	r6, r6, #3
 8020870:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020874:	4330      	orrs	r0, r6
 8020876:	f8ab 0000 	strh.w	r0, [fp]
 802087a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802087c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802087e:	4413      	add	r3, r2
 8020880:	9329      	str	r3, [sp, #164]	; 0xa4
 8020882:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020884:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020886:	4413      	add	r3, r2
 8020888:	932a      	str	r3, [sp, #168]	; 0xa8
 802088a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802088c:	3b01      	subs	r3, #1
 802088e:	f10b 0b02 	add.w	fp, fp, #2
 8020892:	9310      	str	r3, [sp, #64]	; 0x40
 8020894:	e4ee      	b.n	8020274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8020896:	b158      	cbz	r0, 80208b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8020898:	5d31      	ldrb	r1, [r6, r4]
 802089a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802089e:	9109      	str	r1, [sp, #36]	; 0x24
 80208a0:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80208a4:	26ff      	movs	r6, #255	; 0xff
 80208a6:	46b6      	mov	lr, r6
 80208a8:	e6eb      	b.n	8020682 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 80208aa:	26ff      	movs	r6, #255	; 0xff
 80208ac:	46b1      	mov	r9, r6
 80208ae:	e6e8      	b.n	8020682 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 80208b0:	26ff      	movs	r6, #255	; 0xff
 80208b2:	46b1      	mov	r9, r6
 80208b4:	e7f7      	b.n	80208a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 80208b6:	b017      	add	sp, #92	; 0x5c
 80208b8:	ecbd 8b08 	vpop	{d8-d11}
 80208bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208c0:	fffff800 	.word	0xfffff800

080208c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80208c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208c8:	b087      	sub	sp, #28
 80208ca:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 80208ce:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80208d2:	9105      	str	r1, [sp, #20]
 80208d4:	fb00 e604 	mla	r6, r0, r4, lr
 80208d8:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 80208dc:	9102      	str	r1, [sp, #8]
 80208de:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 80208e2:	9103      	str	r1, [sp, #12]
 80208e4:	9905      	ldr	r1, [sp, #20]
 80208e6:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 80208ea:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80208ee:	8809      	ldrh	r1, [r1, #0]
 80208f0:	2800      	cmp	r0, #0
 80208f2:	eb03 0a06 	add.w	sl, r3, r6
 80208f6:	f2c0 80ca 	blt.w	8020a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 80208fa:	4287      	cmp	r7, r0
 80208fc:	f340 80c7 	ble.w	8020a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8020900:	f1be 0f00 	cmp.w	lr, #0
 8020904:	f2c0 80bf 	blt.w	8020a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8020908:	4574      	cmp	r4, lr
 802090a:	f340 80bc 	ble.w	8020a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 802090e:	f813 c006 	ldrb.w	ip, [r3, r6]
 8020912:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 8020916:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802091a:	d01c      	beq.n	8020956 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 802091c:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8020920:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020924:	4372      	muls	r2, r6
 8020926:	f64f 081f 	movw	r8, #63519	; 0xf81f
 802092a:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 802092e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020932:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8020936:	fb0c f609 	mul.w	r6, ip, r9
 802093a:	eb03 0902 	add.w	r9, r3, r2
 802093e:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8020942:	f106 0820 	add.w	r8, r6, #32
 8020946:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 802094a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802094e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020952:	ea49 0908 	orr.w	r9, r9, r8
 8020956:	fa1f f989 	uxth.w	r9, r9
 802095a:	f11e 0301 	adds.w	r3, lr, #1
 802095e:	f100 809b 	bmi.w	8020a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8020962:	429c      	cmp	r4, r3
 8020964:	f340 8098 	ble.w	8020a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8020968:	2d00      	cmp	r5, #0
 802096a:	f000 8095 	beq.w	8020a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 802096e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8020972:	9b03      	ldr	r3, [sp, #12]
 8020974:	2eff      	cmp	r6, #255	; 0xff
 8020976:	885b      	ldrh	r3, [r3, #2]
 8020978:	d01b      	beq.n	80209b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 802097a:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802097e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8020982:	fb08 f202 	mul.w	r2, r8, r2
 8020986:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802098a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802098e:	fb06 f803 	mul.w	r8, r6, r3
 8020992:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8020996:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802099a:	441a      	add	r2, r3
 802099c:	f108 0320 	add.w	r3, r8, #32
 80209a0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80209a4:	0a1b      	lsrs	r3, r3, #8
 80209a6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80209aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80209ae:	ea4b 0303 	orr.w	r3, fp, r3
 80209b2:	b29b      	uxth	r3, r3
 80209b4:	9301      	str	r3, [sp, #4]
 80209b6:	3001      	adds	r0, #1
 80209b8:	d474      	bmi.n	8020aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80209ba:	4287      	cmp	r7, r0
 80209bc:	dd72      	ble.n	8020aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80209be:	9a02      	ldr	r2, [sp, #8]
 80209c0:	2a00      	cmp	r2, #0
 80209c2:	f000 8121 	beq.w	8020c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 80209c6:	f1be 0f00 	cmp.w	lr, #0
 80209ca:	db68      	blt.n	8020a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 80209cc:	4574      	cmp	r4, lr
 80209ce:	dd66      	ble.n	8020a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 80209d0:	f81a 7004 	ldrb.w	r7, [sl, r4]
 80209d4:	9a03      	ldr	r2, [sp, #12]
 80209d6:	2fff      	cmp	r7, #255	; 0xff
 80209d8:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80209dc:	d01c      	beq.n	8020a18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 80209de:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 80209e2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80209e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80209ea:	fb07 fb00 	mul.w	fp, r7, r0
 80209ee:	fb08 f802 	mul.w	r8, r8, r2
 80209f2:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80209f6:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 80209fa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80209fe:	4490      	add	r8, r2
 8020a00:	f10b 0220 	add.w	r2, fp, #32
 8020a04:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8020a08:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020a0c:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8020a10:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020a14:	ea40 000b 	orr.w	r0, r0, fp
 8020a18:	b280      	uxth	r0, r0
 8020a1a:	f11e 0e01 	adds.w	lr, lr, #1
 8020a1e:	d446      	bmi.n	8020aae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8020a20:	4574      	cmp	r4, lr
 8020a22:	dd44      	ble.n	8020aae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8020a24:	2d00      	cmp	r5, #0
 8020a26:	d045      	beq.n	8020ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8020a28:	1c62      	adds	r2, r4, #1
 8020a2a:	9b03      	ldr	r3, [sp, #12]
 8020a2c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8020a30:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020a34:	2cff      	cmp	r4, #255	; 0xff
 8020a36:	d01c      	beq.n	8020a72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 8020a38:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8020a3c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020a40:	fb08 fe0e 	mul.w	lr, r8, lr
 8020a44:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8020a48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a4c:	fb04 f802 	mul.w	r8, r4, r2
 8020a50:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 8020a54:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020a58:	4472      	add	r2, lr
 8020a5a:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8020a5e:	f108 0a20 	add.w	sl, r8, #32
 8020a62:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 8020a66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a6e:	ea42 020a 	orr.w	r2, r2, sl
 8020a72:	b292      	uxth	r2, r2
 8020a74:	2d0f      	cmp	r5, #15
 8020a76:	d91f      	bls.n	8020ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 8020a78:	4b67      	ldr	r3, [pc, #412]	; (8020c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 8020a7a:	4a68      	ldr	r2, [pc, #416]	; (8020c1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 8020a7c:	4868      	ldr	r0, [pc, #416]	; (8020c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 8020a7e:	f240 210d 	movw	r1, #525	; 0x20d
 8020a82:	f004 f9c3 	bl	8024e0c <__assert_func>
 8020a86:	4689      	mov	r9, r1
 8020a88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020a8c:	e765      	b.n	802095a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 8020a8e:	26ff      	movs	r6, #255	; 0xff
 8020a90:	9101      	str	r1, [sp, #4]
 8020a92:	4689      	mov	r9, r1
 8020a94:	46b4      	mov	ip, r6
 8020a96:	e78e      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8020a98:	9101      	str	r1, [sp, #4]
 8020a9a:	26ff      	movs	r6, #255	; 0xff
 8020a9c:	e78b      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8020a9e:	4608      	mov	r0, r1
 8020aa0:	27ff      	movs	r7, #255	; 0xff
 8020aa2:	e7ba      	b.n	8020a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 8020aa4:	24ff      	movs	r4, #255	; 0xff
 8020aa6:	460a      	mov	r2, r1
 8020aa8:	4608      	mov	r0, r1
 8020aaa:	4627      	mov	r7, r4
 8020aac:	e7e2      	b.n	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8020aae:	460a      	mov	r2, r1
 8020ab0:	24ff      	movs	r4, #255	; 0xff
 8020ab2:	e7df      	b.n	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8020ab4:	460a      	mov	r2, r1
 8020ab6:	24ff      	movs	r4, #255	; 0xff
 8020ab8:	9b02      	ldr	r3, [sp, #8]
 8020aba:	2b0f      	cmp	r3, #15
 8020abc:	d8dc      	bhi.n	8020a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8020abe:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8020ac2:	fa1f f885 	uxth.w	r8, r5
 8020ac6:	fb08 fa0e 	mul.w	sl, r8, lr
 8020aca:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8020ace:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8020ad2:	9303      	str	r3, [sp, #12]
 8020ad4:	fa1f f38e 	uxth.w	r3, lr
 8020ad8:	9304      	str	r3, [sp, #16]
 8020ada:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8020ade:	9b02      	ldr	r3, [sp, #8]
 8020ae0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020ae4:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8020ae8:	fb15 fe03 	smulbb	lr, r5, r3
 8020aec:	ea48 0809 	orr.w	r8, r8, r9
 8020af0:	f1c3 0910 	rsb	r9, r3, #16
 8020af4:	9b01      	ldr	r3, [sp, #4]
 8020af6:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020afa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020afe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020b02:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020b06:	eba9 0905 	sub.w	r9, r9, r5
 8020b0a:	ea4b 0303 	orr.w	r3, fp, r3
 8020b0e:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8020b12:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020b16:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8020b1a:	436b      	muls	r3, r5
 8020b1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020b20:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020b24:	ea4b 0202 	orr.w	r2, fp, r2
 8020b28:	fb09 3308 	mla	r3, r9, r8, r3
 8020b2c:	fb0e 3302 	mla	r3, lr, r2, r3
 8020b30:	0402      	lsls	r2, r0, #16
 8020b32:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020b36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b3a:	4310      	orrs	r0, r2
 8020b3c:	9a02      	ldr	r2, [sp, #8]
 8020b3e:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8020b42:	fb0e 3e00 	mla	lr, lr, r0, r3
 8020b46:	9803      	ldr	r0, [sp, #12]
 8020b48:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8020b4c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8020b50:	9804      	ldr	r0, [sp, #16]
 8020b52:	1a2d      	subs	r5, r5, r0
 8020b54:	9803      	ldr	r0, [sp, #12]
 8020b56:	eba0 000a 	sub.w	r0, r0, sl
 8020b5a:	b280      	uxth	r0, r0
 8020b5c:	b2ad      	uxth	r5, r5
 8020b5e:	4346      	muls	r6, r0
 8020b60:	9804      	ldr	r0, [sp, #16]
 8020b62:	fb0c 6605 	mla	r6, ip, r5, r6
 8020b66:	fb00 6707 	mla	r7, r0, r7, r6
 8020b6a:	fb0a 7404 	mla	r4, sl, r4, r7
 8020b6e:	b292      	uxth	r2, r2
 8020b70:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020b74:	4354      	muls	r4, r2
 8020b76:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8020b7a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020b7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b82:	f104 0a01 	add.w	sl, r4, #1
 8020b86:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020b8a:	ea43 0e0e 	orr.w	lr, r3, lr
 8020b8e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020b92:	fa1f f38e 	uxth.w	r3, lr
 8020b96:	1208      	asrs	r0, r1, #8
 8020b98:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8020b9c:	b2e4      	uxtb	r4, r4
 8020b9e:	121d      	asrs	r5, r3, #8
 8020ba0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020ba4:	fb10 f004 	smulbb	r0, r0, r4
 8020ba8:	10ce      	asrs	r6, r1, #3
 8020baa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020bae:	00c9      	lsls	r1, r1, #3
 8020bb0:	fb05 0502 	mla	r5, r5, r2, r0
 8020bb4:	b2c9      	uxtb	r1, r1
 8020bb6:	10d8      	asrs	r0, r3, #3
 8020bb8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020bbc:	00db      	lsls	r3, r3, #3
 8020bbe:	fb16 f604 	smulbb	r6, r6, r4
 8020bc2:	b2db      	uxtb	r3, r3
 8020bc4:	fb11 f404 	smulbb	r4, r1, r4
 8020bc8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020bcc:	fb00 6002 	mla	r0, r0, r2, r6
 8020bd0:	fb03 4202 	mla	r2, r3, r2, r4
 8020bd4:	b2ad      	uxth	r5, r5
 8020bd6:	b292      	uxth	r2, r2
 8020bd8:	1c6b      	adds	r3, r5, #1
 8020bda:	1c51      	adds	r1, r2, #1
 8020bdc:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8020be0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020be4:	b280      	uxth	r0, r0
 8020be6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020bea:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020bee:	4313      	orrs	r3, r2
 8020bf0:	1c42      	adds	r2, r0, #1
 8020bf2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020bf6:	0940      	lsrs	r0, r0, #5
 8020bf8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020bfc:	9a05      	ldr	r2, [sp, #20]
 8020bfe:	4303      	orrs	r3, r0
 8020c00:	8013      	strh	r3, [r2, #0]
 8020c02:	b007      	add	sp, #28
 8020c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c08:	2d0f      	cmp	r5, #15
 8020c0a:	f63f af35 	bhi.w	8020a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8020c0e:	24ff      	movs	r4, #255	; 0xff
 8020c10:	460a      	mov	r2, r1
 8020c12:	4608      	mov	r0, r1
 8020c14:	4627      	mov	r7, r4
 8020c16:	e752      	b.n	8020abe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8020c18:	08054484 	.word	0x08054484
 8020c1c:	080549dd 	.word	0x080549dd
 8020c20:	0805450c 	.word	0x0805450c

08020c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c28:	ed2d 8b08 	vpush	{d8-d11}
 8020c2c:	b099      	sub	sp, #100	; 0x64
 8020c2e:	eeb0 aa40 	vmov.f32	s20, s0
 8020c32:	9308      	str	r3, [sp, #32]
 8020c34:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8020c38:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8020c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c3c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8020c40:	9314      	str	r3, [sp, #80]	; 0x50
 8020c42:	9113      	str	r1, [sp, #76]	; 0x4c
 8020c44:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8020c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8020c4a:	6870      	ldr	r0, [r6, #4]
 8020c4c:	9216      	str	r2, [sp, #88]	; 0x58
 8020c4e:	fb00 1303 	mla	r3, r0, r3, r1
 8020c52:	6831      	ldr	r1, [r6, #0]
 8020c54:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020c56:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 8020c5a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8020c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c60:	6813      	ldr	r3, [r2, #0]
 8020c62:	930c      	str	r3, [sp, #48]	; 0x30
 8020c64:	6853      	ldr	r3, [r2, #4]
 8020c66:	930d      	str	r3, [sp, #52]	; 0x34
 8020c68:	006b      	lsls	r3, r5, #1
 8020c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8020c6c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8020c70:	930a      	str	r3, [sp, #40]	; 0x28
 8020c72:	eef0 9a60 	vmov.f32	s19, s1
 8020c76:	eeb0 9a41 	vmov.f32	s18, s2
 8020c7a:	eeb0 8a62 	vmov.f32	s16, s5
 8020c7e:	eef0 8a43 	vmov.f32	s17, s6
 8020c82:	eef0 ba44 	vmov.f32	s23, s8
 8020c86:	eeb0 ba64 	vmov.f32	s22, s9
 8020c8a:	eef0 aa45 	vmov.f32	s21, s10
 8020c8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	dc03      	bgt.n	8020c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8020c94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	f340 83bf 	ble.w	802141a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8020c9c:	9b08      	ldr	r3, [sp, #32]
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	f340 81cb 	ble.w	802103a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 8020ca4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020ca6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ca8:	1412      	asrs	r2, r2, #16
 8020caa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020cae:	d42f      	bmi.n	8020d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8020cb0:	1c51      	adds	r1, r2, #1
 8020cb2:	428d      	cmp	r5, r1
 8020cb4:	dd2f      	ble.n	8020d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	db2d      	blt.n	8020d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020cba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020cbc:	1c59      	adds	r1, r3, #1
 8020cbe:	4288      	cmp	r0, r1
 8020cc0:	dd29      	ble.n	8020d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020cc2:	9b08      	ldr	r3, [sp, #32]
 8020cc4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020cc6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8020cc8:	3b01      	subs	r3, #1
 8020cca:	fb02 1203 	mla	r2, r2, r3, r1
 8020cce:	1412      	asrs	r2, r2, #16
 8020cd0:	d42b      	bmi.n	8020d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020cd2:	3201      	adds	r2, #1
 8020cd4:	4295      	cmp	r5, r2
 8020cd6:	dd28      	ble.n	8020d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020cd8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020cda:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020cdc:	fb02 1303 	mla	r3, r2, r3, r1
 8020ce0:	141b      	asrs	r3, r3, #16
 8020ce2:	d422      	bmi.n	8020d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ce6:	3301      	adds	r3, #1
 8020ce8:	429a      	cmp	r2, r3
 8020cea:	dd1e      	ble.n	8020d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8020cec:	9b08      	ldr	r3, [sp, #32]
 8020cee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8020cf2:	9315      	str	r3, [sp, #84]	; 0x54
 8020cf4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	f300 8217 	bgt.w	802112e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8020d00:	9b08      	ldr	r3, [sp, #32]
 8020d02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d08:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8020d0e:	e196      	b.n	802103e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8020d10:	1c57      	adds	r7, r2, #1
 8020d12:	f040 8183 	bne.w	802101c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020d16:	42aa      	cmp	r2, r5
 8020d18:	f280 8180 	bge.w	802101c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020d1c:	1c5e      	adds	r6, r3, #1
 8020d1e:	f2c0 817d 	blt.w	802101c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020d24:	4293      	cmp	r3, r2
 8020d26:	f280 8179 	bge.w	802101c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8020d2a:	9b08      	ldr	r3, [sp, #32]
 8020d2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020d2e:	9315      	str	r3, [sp, #84]	; 0x54
 8020d30:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	dde2      	ble.n	8020d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020d3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d3c:	1419      	asrs	r1, r3, #16
 8020d3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020d44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d46:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020d4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d4c:	141b      	asrs	r3, r3, #16
 8020d4e:	f100 81d3 	bmi.w	80210f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020d52:	1c58      	adds	r0, r3, #1
 8020d54:	4285      	cmp	r5, r0
 8020d56:	f340 81d1 	ble.w	80210fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d5a:	2900      	cmp	r1, #0
 8020d5c:	f2c0 81ce 	blt.w	80210fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d62:	1c48      	adds	r0, r1, #1
 8020d64:	4284      	cmp	r4, r0
 8020d66:	f340 81c9 	ble.w	80210fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8020d6a:	fb01 3105 	mla	r1, r1, r5, r3
 8020d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d70:	fa1f fe82 	uxth.w	lr, r2
 8020d74:	eb03 0a01 	add.w	sl, r3, r1
 8020d78:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8020d7c:	f813 9001 	ldrb.w	r9, [r3, r1]
 8020d80:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020d84:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	f1bc 0f00 	cmp.w	ip, #0
 8020d8e:	f000 8195 	beq.w	80210bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 8020d92:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8020d96:	940e      	str	r4, [sp, #56]	; 0x38
 8020d98:	eb0a 0b05 	add.w	fp, sl, r5
 8020d9c:	fa1f fa8c 	uxth.w	sl, ip
 8020da0:	fb0a fe0e 	mul.w	lr, sl, lr
 8020da4:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020da8:	fa1f fa8a 	uxth.w	sl, sl
 8020dac:	eba0 000e 	sub.w	r0, r0, lr
 8020db0:	eba3 030a 	sub.w	r3, r3, sl
 8020db4:	b280      	uxth	r0, r0
 8020db6:	fb08 f000 	mul.w	r0, r8, r0
 8020dba:	b29b      	uxth	r3, r3
 8020dbc:	fb09 0303 	mla	r3, r9, r3, r0
 8020dc0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020dc2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020dc6:	940f      	str	r4, [sp, #60]	; 0x3c
 8020dc8:	fb0a 3300 	mla	r3, sl, r0, r3
 8020dcc:	fb0e 3304 	mla	r3, lr, r4, r3
 8020dd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	f000 8114 	beq.w	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8020dda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020dde:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020de2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020de6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8020dea:	f000 816c 	beq.w	80210c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020dee:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020df2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020df6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020dfa:	fb09 f101 	mul.w	r1, r9, r1
 8020dfe:	fb0a fe0e 	mul.w	lr, sl, lr
 8020e02:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020e06:	f101 0b20 	add.w	fp, r1, #32
 8020e0a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020e0e:	44ce      	add	lr, r9
 8020e10:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8020e14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e18:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020e1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020e20:	ea4e 0909 	orr.w	r9, lr, r9
 8020e24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020e28:	8841      	ldrh	r1, [r0, #2]
 8020e2a:	d019      	beq.n	8020e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8020e2c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020e30:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020e34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e38:	fb0a fe0e 	mul.w	lr, sl, lr
 8020e3c:	fb08 f801 	mul.w	r8, r8, r1
 8020e40:	f108 0b20 	add.w	fp, r8, #32
 8020e44:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8020e48:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020e4c:	448e      	add	lr, r1
 8020e4e:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8020e52:	0a09      	lsrs	r1, r1, #8
 8020e54:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8020e58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e5c:	ea4a 0101 	orr.w	r1, sl, r1
 8020e60:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020e64:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e68:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020e6c:	ea4e 0909 	orr.w	r9, lr, r9
 8020e70:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8020e74:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e78:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020e7c:	ea4e 0e01 	orr.w	lr, lr, r1
 8020e80:	f1bc 0f00 	cmp.w	ip, #0
 8020e84:	f000 8121 	beq.w	80210ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8020e88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020e8a:	eb00 0801 	add.w	r8, r0, r1
 8020e8e:	5a41      	ldrh	r1, [r0, r1]
 8020e90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020e92:	28ff      	cmp	r0, #255	; 0xff
 8020e94:	d019      	beq.n	8020eca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8020e96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e98:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020e9c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020ea0:	fb04 fb01 	mul.w	fp, r4, r1
 8020ea4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020ea8:	fb0a fa00 	mul.w	sl, sl, r0
 8020eac:	f10b 0020 	add.w	r0, fp, #32
 8020eb0:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8020eb4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020eb8:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020ebc:	4451      	add	r1, sl
 8020ebe:	0a00      	lsrs	r0, r0, #8
 8020ec0:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020ec4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020ec8:	4301      	orrs	r1, r0
 8020eca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ecc:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8020ed0:	2cff      	cmp	r4, #255	; 0xff
 8020ed2:	d01a      	beq.n	8020f0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 8020ed4:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8020ed8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020edc:	fb04 fb00 	mul.w	fp, r4, r0
 8020ee0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020ee4:	fb0a fa08 	mul.w	sl, sl, r8
 8020ee8:	f10b 0820 	add.w	r8, fp, #32
 8020eec:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8020ef0:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8020ef4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020ef8:	4450      	add	r0, sl
 8020efa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020efe:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020f02:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020f06:	ea40 0008 	orr.w	r0, r0, r8
 8020f0a:	fb1c f802 	smulbb	r8, ip, r2
 8020f0e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8020f12:	f1cc 0a10 	rsb	sl, ip, #16
 8020f16:	ebaa 0a02 	sub.w	sl, sl, r2
 8020f1a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020f1e:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8020f22:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8020f26:	fb0e f202 	mul.w	r2, lr, r2
 8020f2a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020f2e:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8020f32:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020f36:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8020f3a:	fb09 220a 	mla	r2, r9, sl, r2
 8020f3e:	ea4b 0101 	orr.w	r1, fp, r1
 8020f42:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020f46:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020f4a:	fb0c 2201 	mla	r2, ip, r1, r2
 8020f4e:	ea4e 0000 	orr.w	r0, lr, r0
 8020f52:	fb08 2800 	mla	r8, r8, r0, r2
 8020f56:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8020f5a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020f5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020f62:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020f66:	ea42 0808 	orr.w	r8, r2, r8
 8020f6a:	fa1f f288 	uxth.w	r2, r8
 8020f6e:	2bff      	cmp	r3, #255	; 0xff
 8020f70:	d103      	bne.n	8020f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020f72:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020f74:	29ff      	cmp	r1, #255	; 0xff
 8020f76:	f000 80bd 	beq.w	80210f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 8020f7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f7c:	f8b7 c000 	ldrh.w	ip, [r7]
 8020f80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f82:	434b      	muls	r3, r1
 8020f84:	f103 0e01 	add.w	lr, r3, #1
 8020f88:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 8020f8c:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 8020f90:	ea4f 202c 	mov.w	r0, ip, asr #8
 8020f94:	fa5f fe8e 	uxtb.w	lr, lr
 8020f98:	1213      	asrs	r3, r2, #8
 8020f9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020f9e:	fb10 f00e 	smulbb	r0, r0, lr
 8020fa2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020fa6:	fb03 0301 	mla	r3, r3, r1, r0
 8020faa:	b298      	uxth	r0, r3
 8020fac:	ea4f 03ec 	mov.w	r3, ip, asr #3
 8020fb0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020fb4:	10d1      	asrs	r1, r2, #3
 8020fb6:	fa5f fc8c 	uxtb.w	ip, ip
 8020fba:	00d2      	lsls	r2, r2, #3
 8020fbc:	fb1c fc0e 	smulbb	ip, ip, lr
 8020fc0:	b2d2      	uxtb	r2, r2
 8020fc2:	fb02 c204 	mla	r2, r2, r4, ip
 8020fc6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020fca:	fb13 f30e 	smulbb	r3, r3, lr
 8020fce:	b292      	uxth	r2, r2
 8020fd0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020fd4:	fb01 3104 	mla	r1, r1, r4, r3
 8020fd8:	f102 0c01 	add.w	ip, r2, #1
 8020fdc:	1c43      	adds	r3, r0, #1
 8020fde:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020fe2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020fe6:	b289      	uxth	r1, r1
 8020fe8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020fec:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020ff0:	4313      	orrs	r3, r2
 8020ff2:	1c4a      	adds	r2, r1, #1
 8020ff4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020ff8:	0949      	lsrs	r1, r1, #5
 8020ffa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020ffe:	430b      	orrs	r3, r1
 8021000:	803b      	strh	r3, [r7, #0]
 8021002:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021004:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021006:	4413      	add	r3, r2
 8021008:	932b      	str	r3, [sp, #172]	; 0xac
 802100a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802100c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802100e:	441a      	add	r2, r3
 8021010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021012:	922c      	str	r2, [sp, #176]	; 0xb0
 8021014:	3b01      	subs	r3, #1
 8021016:	3702      	adds	r7, #2
 8021018:	9315      	str	r3, [sp, #84]	; 0x54
 802101a:	e68b      	b.n	8020d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802101c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802101e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021020:	4413      	add	r3, r2
 8021022:	932b      	str	r3, [sp, #172]	; 0xac
 8021024:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021026:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021028:	441a      	add	r2, r3
 802102a:	9b08      	ldr	r3, [sp, #32]
 802102c:	922c      	str	r2, [sp, #176]	; 0xb0
 802102e:	3b01      	subs	r3, #1
 8021030:	9308      	str	r3, [sp, #32]
 8021032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021034:	3302      	adds	r3, #2
 8021036:	9309      	str	r3, [sp, #36]	; 0x24
 8021038:	e630      	b.n	8020c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802103a:	f47f ae42 	bne.w	8020cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 802103e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021040:	2b00      	cmp	r3, #0
 8021042:	f340 81ea 	ble.w	802141a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8021046:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802104a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802104e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021054:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021058:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802105c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021060:	eef0 6a48 	vmov.f32	s13, s16
 8021064:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021068:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802106c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021070:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8021074:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021078:	eef0 6a68 	vmov.f32	s13, s17
 802107c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021080:	ee18 2a10 	vmov	r2, s16
 8021084:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021088:	fb92 f3f3 	sdiv	r3, r2, r3
 802108c:	ee18 2a90 	vmov	r2, s17
 8021090:	932d      	str	r3, [sp, #180]	; 0xb4
 8021092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021094:	fb92 f3f3 	sdiv	r3, r2, r3
 8021098:	932e      	str	r3, [sp, #184]	; 0xb8
 802109a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802109c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802109e:	3b01      	subs	r3, #1
 80210a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80210a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210a8:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 80210ac:	bf08      	it	eq
 80210ae:	4613      	moveq	r3, r2
 80210b0:	9308      	str	r3, [sp, #32]
 80210b2:	eef0 8a67 	vmov.f32	s17, s15
 80210b6:	eeb0 8a47 	vmov.f32	s16, s14
 80210ba:	e5e8      	b.n	8020c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80210bc:	fb08 f000 	mul.w	r0, r8, r0
 80210c0:	fb09 0303 	mla	r3, r9, r3, r0
 80210c4:	e684      	b.n	8020dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 80210c6:	4689      	mov	r9, r1
 80210c8:	e6ac      	b.n	8020e24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80210ca:	f1c2 0010 	rsb	r0, r2, #16
 80210ce:	fb0e f202 	mul.w	r2, lr, r2
 80210d2:	fb09 2900 	mla	r9, r9, r0, r2
 80210d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80210da:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80210de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80210e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210e6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80210ea:	ea42 0909 	orr.w	r9, r2, r9
 80210ee:	fa1f f289 	uxth.w	r2, r9
 80210f2:	e73c      	b.n	8020f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 80210f4:	803a      	strh	r2, [r7, #0]
 80210f6:	e784      	b.n	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210f8:	1c5c      	adds	r4, r3, #1
 80210fa:	d182      	bne.n	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80210fc:	429d      	cmp	r5, r3
 80210fe:	dd80      	ble.n	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8021100:	1c48      	adds	r0, r1, #1
 8021102:	f6ff af7e 	blt.w	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8021106:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021108:	4288      	cmp	r0, r1
 802110a:	f77f af7a 	ble.w	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 802110e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021110:	9302      	str	r3, [sp, #8]
 8021112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021114:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8021118:	e9cd c005 	strd	ip, r0, [sp, #20]
 802111c:	e9cd 5300 	strd	r5, r3, [sp]
 8021120:	4639      	mov	r1, r7
 8021122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8021126:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021128:	f7ff fbcc 	bl	80208c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802112c:	e769      	b.n	8021002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 802112e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021130:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021134:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021136:	141f      	asrs	r7, r3, #16
 8021138:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802113c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802113e:	141b      	asrs	r3, r3, #16
 8021140:	fb05 3707 	mla	r7, r5, r7, r3
 8021144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021146:	fa1f fc82 	uxth.w	ip, r2
 802114a:	eb03 0a07 	add.w	sl, r3, r7
 802114e:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8021152:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021156:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802115a:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 802115e:	b29b      	uxth	r3, r3
 8021160:	2800      	cmp	r0, #0
 8021162:	f000 813f 	beq.w	80213e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 8021166:	f81a 4005 	ldrb.w	r4, [sl, r5]
 802116a:	9410      	str	r4, [sp, #64]	; 0x40
 802116c:	eb0a 0b05 	add.w	fp, sl, r5
 8021170:	fa1f fa80 	uxth.w	sl, r0
 8021174:	fb0a fc0c 	mul.w	ip, sl, ip
 8021178:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802117c:	fa1f fa8a 	uxth.w	sl, sl
 8021180:	eba1 010c 	sub.w	r1, r1, ip
 8021184:	eba3 030a 	sub.w	r3, r3, sl
 8021188:	b289      	uxth	r1, r1
 802118a:	fb08 f101 	mul.w	r1, r8, r1
 802118e:	b29b      	uxth	r3, r3
 8021190:	fb09 1303 	mla	r3, r9, r3, r1
 8021194:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021196:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802119a:	9411      	str	r4, [sp, #68]	; 0x44
 802119c:	fb0a 3301 	mla	r3, sl, r1, r3
 80211a0:	fb0c 3304 	mla	r3, ip, r4, r3
 80211a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	f000 810d 	beq.w	80213c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 80211ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80211b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80211b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80211b6:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80211ba:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80211be:	f000 8116 	beq.w	80213ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 80211c2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80211c6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80211ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80211ce:	fb09 f707 	mul.w	r7, r9, r7
 80211d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80211d6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80211da:	f107 0b20 	add.w	fp, r7, #32
 80211de:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80211e2:	44cc      	add	ip, r9
 80211e4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80211e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80211ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80211f0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80211f4:	ea4c 0909 	orr.w	r9, ip, r9
 80211f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80211fc:	884f      	ldrh	r7, [r1, #2]
 80211fe:	d019      	beq.n	8021234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 8021200:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021204:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021208:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802120c:	fb08 f807 	mul.w	r8, r8, r7
 8021210:	fb0a fc0c 	mul.w	ip, sl, ip
 8021214:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021218:	f108 0b20 	add.w	fp, r8, #32
 802121c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021220:	44bc      	add	ip, r7
 8021222:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021226:	0a3f      	lsrs	r7, r7, #8
 8021228:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802122c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021230:	ea4c 0707 	orr.w	r7, ip, r7
 8021234:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021238:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802123c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021240:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021244:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021248:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802124c:	ea4c 0909 	orr.w	r9, ip, r9
 8021250:	ea4a 0707 	orr.w	r7, sl, r7
 8021254:	2800      	cmp	r0, #0
 8021256:	f000 80cc 	beq.w	80213f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 802125a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802125c:	eb01 0c04 	add.w	ip, r1, r4
 8021260:	f831 8004 	ldrh.w	r8, [r1, r4]
 8021264:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021266:	29ff      	cmp	r1, #255	; 0xff
 8021268:	d01a      	beq.n	80212a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 802126a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802126c:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8021270:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021274:	fb04 fb08 	mul.w	fp, r4, r8
 8021278:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802127c:	fb0a fa01 	mul.w	sl, sl, r1
 8021280:	f10b 0120 	add.w	r1, fp, #32
 8021284:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8021288:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 802128c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021290:	44d0      	add	r8, sl
 8021292:	0a09      	lsrs	r1, r1, #8
 8021294:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8021298:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802129c:	ea48 0801 	orr.w	r8, r8, r1
 80212a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80212a2:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 80212a6:	2cff      	cmp	r4, #255	; 0xff
 80212a8:	d01a      	beq.n	80212e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80212aa:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 80212ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80212b2:	fb04 fb01 	mul.w	fp, r4, r1
 80212b6:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80212ba:	fb0a fa0c 	mul.w	sl, sl, ip
 80212be:	f10b 0c20 	add.w	ip, fp, #32
 80212c2:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 80212c6:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 80212ca:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80212ce:	4451      	add	r1, sl
 80212d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212d4:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80212d8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80212dc:	ea41 010c 	orr.w	r1, r1, ip
 80212e0:	fb10 fc02 	smulbb	ip, r0, r2
 80212e4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80212e8:	f1c0 0a10 	rsb	sl, r0, #16
 80212ec:	ebaa 0a02 	sub.w	sl, sl, r2
 80212f0:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80212f4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80212f8:	437a      	muls	r2, r7
 80212fa:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 80212fe:	040f      	lsls	r7, r1, #16
 8021300:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021304:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021308:	fb09 220a 	mla	r2, r9, sl, r2
 802130c:	ea4b 0808 	orr.w	r8, fp, r8
 8021310:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 8021314:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8021318:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802131c:	fb00 2208 	mla	r2, r0, r8, r2
 8021320:	4339      	orrs	r1, r7
 8021322:	fb0c 2201 	mla	r2, ip, r1, r2
 8021326:	ea4f 5952 	mov.w	r9, r2, lsr #21
 802132a:	0952      	lsrs	r2, r2, #5
 802132c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021330:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021334:	ea49 0202 	orr.w	r2, r9, r2
 8021338:	2bff      	cmp	r3, #255	; 0xff
 802133a:	b292      	uxth	r2, r2
 802133c:	d102      	bne.n	8021344 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 802133e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021340:	29ff      	cmp	r1, #255	; 0xff
 8021342:	d067      	beq.n	8021414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 8021344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021346:	f8be 0000 	ldrh.w	r0, [lr]
 802134a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802134c:	434b      	muls	r3, r1
 802134e:	1c59      	adds	r1, r3, #1
 8021350:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8021354:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021358:	1201      	asrs	r1, r0, #8
 802135a:	b2db      	uxtb	r3, r3
 802135c:	1217      	asrs	r7, r2, #8
 802135e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021362:	fb11 f103 	smulbb	r1, r1, r3
 8021366:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 802136a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802136e:	00c0      	lsls	r0, r0, #3
 8021370:	fb07 1704 	mla	r7, r7, r4, r1
 8021374:	b2c0      	uxtb	r0, r0
 8021376:	10d1      	asrs	r1, r2, #3
 8021378:	00d2      	lsls	r2, r2, #3
 802137a:	fb10 f003 	smulbb	r0, r0, r3
 802137e:	b2d2      	uxtb	r2, r2
 8021380:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021384:	fb02 0204 	mla	r2, r2, r4, r0
 8021388:	fb1c fc03 	smulbb	ip, ip, r3
 802138c:	b2bf      	uxth	r7, r7
 802138e:	b292      	uxth	r2, r2
 8021390:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021394:	fb01 c104 	mla	r1, r1, r4, ip
 8021398:	1c7b      	adds	r3, r7, #1
 802139a:	f102 0c01 	add.w	ip, r2, #1
 802139e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80213a2:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80213a6:	b289      	uxth	r1, r1
 80213a8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80213ac:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80213b0:	ea47 070c 	orr.w	r7, r7, ip
 80213b4:	f101 0c01 	add.w	ip, r1, #1
 80213b8:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80213bc:	0949      	lsrs	r1, r1, #5
 80213be:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80213c2:	430f      	orrs	r7, r1
 80213c4:	f8ae 7000 	strh.w	r7, [lr]
 80213c8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80213ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80213cc:	4413      	add	r3, r2
 80213ce:	932b      	str	r3, [sp, #172]	; 0xac
 80213d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80213d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80213d4:	441a      	add	r2, r3
 80213d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80213d8:	922c      	str	r2, [sp, #176]	; 0xb0
 80213da:	3b01      	subs	r3, #1
 80213dc:	f10e 0e02 	add.w	lr, lr, #2
 80213e0:	9315      	str	r3, [sp, #84]	; 0x54
 80213e2:	e489      	b.n	8020cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80213e4:	fb08 f101 	mul.w	r1, r8, r1
 80213e8:	fb09 1303 	mla	r3, r9, r3, r1
 80213ec:	e6da      	b.n	80211a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 80213ee:	46b9      	mov	r9, r7
 80213f0:	e702      	b.n	80211f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 80213f2:	f1c2 0110 	rsb	r1, r2, #16
 80213f6:	437a      	muls	r2, r7
 80213f8:	fb09 2901 	mla	r9, r9, r1, r2
 80213fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021400:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021404:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021408:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802140c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021410:	4302      	orrs	r2, r0
 8021412:	e791      	b.n	8021338 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8021414:	f8ae 2000 	strh.w	r2, [lr]
 8021418:	e7d6      	b.n	80213c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 802141a:	b019      	add	sp, #100	; 0x64
 802141c:	ecbd 8b08 	vpop	{d8-d11}
 8021420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021428:	b087      	sub	sp, #28
 802142a:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 802142e:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8021432:	9105      	str	r1, [sp, #20]
 8021434:	fb00 e604 	mla	r6, r0, r4, lr
 8021438:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 802143c:	9102      	str	r1, [sp, #8]
 802143e:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 8021442:	9103      	str	r1, [sp, #12]
 8021444:	9905      	ldr	r1, [sp, #20]
 8021446:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 802144a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 802144e:	8809      	ldrh	r1, [r1, #0]
 8021450:	2800      	cmp	r0, #0
 8021452:	eb02 0a06 	add.w	sl, r2, r6
 8021456:	f2c0 80ca 	blt.w	80215ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 802145a:	4287      	cmp	r7, r0
 802145c:	f340 80c7 	ble.w	80215ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8021460:	f1be 0f00 	cmp.w	lr, #0
 8021464:	f2c0 80bf 	blt.w	80215e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8021468:	4574      	cmp	r4, lr
 802146a:	f340 80bc 	ble.w	80215e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 802146e:	f812 c006 	ldrb.w	ip, [r2, r6]
 8021472:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 8021476:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802147a:	d01c      	beq.n	80214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 802147c:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8021480:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021484:	4372      	muls	r2, r6
 8021486:	f64f 081f 	movw	r8, #63519	; 0xf81f
 802148a:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 802148e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021492:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8021496:	fb0c f609 	mul.w	r6, ip, r9
 802149a:	eb03 0902 	add.w	r9, r3, r2
 802149e:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 80214a2:	f106 0820 	add.w	r8, r6, #32
 80214a6:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80214aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80214ae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80214b2:	ea49 0908 	orr.w	r9, r9, r8
 80214b6:	fa1f f989 	uxth.w	r9, r9
 80214ba:	f11e 0301 	adds.w	r3, lr, #1
 80214be:	f100 809b 	bmi.w	80215f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80214c2:	429c      	cmp	r4, r3
 80214c4:	f340 8098 	ble.w	80215f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80214c8:	2d00      	cmp	r5, #0
 80214ca:	f000 8095 	beq.w	80215f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 80214ce:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80214d2:	9b03      	ldr	r3, [sp, #12]
 80214d4:	2eff      	cmp	r6, #255	; 0xff
 80214d6:	885b      	ldrh	r3, [r3, #2]
 80214d8:	d01b      	beq.n	8021512 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 80214da:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80214de:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80214e2:	fb08 f202 	mul.w	r2, r8, r2
 80214e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214ea:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80214ee:	fb06 f803 	mul.w	r8, r6, r3
 80214f2:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80214f6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80214fa:	441a      	add	r2, r3
 80214fc:	f108 0320 	add.w	r3, r8, #32
 8021500:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021504:	0a1b      	lsrs	r3, r3, #8
 8021506:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802150a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802150e:	ea4b 0303 	orr.w	r3, fp, r3
 8021512:	b29b      	uxth	r3, r3
 8021514:	9301      	str	r3, [sp, #4]
 8021516:	3001      	adds	r0, #1
 8021518:	d474      	bmi.n	8021604 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802151a:	4287      	cmp	r7, r0
 802151c:	dd72      	ble.n	8021604 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802151e:	9a02      	ldr	r2, [sp, #8]
 8021520:	2a00      	cmp	r2, #0
 8021522:	f000 8111 	beq.w	8021748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 8021526:	f1be 0f00 	cmp.w	lr, #0
 802152a:	db68      	blt.n	80215fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 802152c:	4574      	cmp	r4, lr
 802152e:	dd66      	ble.n	80215fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 8021530:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8021534:	9a03      	ldr	r2, [sp, #12]
 8021536:	2fff      	cmp	r7, #255	; 0xff
 8021538:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 802153c:	d01c      	beq.n	8021578 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 802153e:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8021542:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8021546:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802154a:	fb07 fb00 	mul.w	fp, r7, r0
 802154e:	fb08 f802 	mul.w	r8, r8, r2
 8021552:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021556:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 802155a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802155e:	4490      	add	r8, r2
 8021560:	f10b 0220 	add.w	r2, fp, #32
 8021564:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8021568:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802156c:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8021570:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021574:	ea40 000b 	orr.w	r0, r0, fp
 8021578:	b280      	uxth	r0, r0
 802157a:	f11e 0e01 	adds.w	lr, lr, #1
 802157e:	d446      	bmi.n	802160e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8021580:	4574      	cmp	r4, lr
 8021582:	dd44      	ble.n	802160e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8021584:	2d00      	cmp	r5, #0
 8021586:	d045      	beq.n	8021614 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8021588:	1c62      	adds	r2, r4, #1
 802158a:	9b03      	ldr	r3, [sp, #12]
 802158c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021590:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021594:	2cff      	cmp	r4, #255	; 0xff
 8021596:	d01c      	beq.n	80215d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 8021598:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 802159c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80215a0:	fb08 fe0e 	mul.w	lr, r8, lr
 80215a4:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 80215a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215ac:	fb04 f802 	mul.w	r8, r4, r2
 80215b0:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 80215b4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80215b8:	4472      	add	r2, lr
 80215ba:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 80215be:	f108 0a20 	add.w	sl, r8, #32
 80215c2:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 80215c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215ca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80215ce:	ea42 020a 	orr.w	r2, r2, sl
 80215d2:	b292      	uxth	r2, r2
 80215d4:	2d0f      	cmp	r5, #15
 80215d6:	d91f      	bls.n	8021618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 80215d8:	4b5f      	ldr	r3, [pc, #380]	; (8021758 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 80215da:	4a60      	ldr	r2, [pc, #384]	; (802175c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 80215dc:	4860      	ldr	r0, [pc, #384]	; (8021760 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 80215de:	f240 210d 	movw	r1, #525	; 0x20d
 80215e2:	f003 fc13 	bl	8024e0c <__assert_func>
 80215e6:	4689      	mov	r9, r1
 80215e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80215ec:	e765      	b.n	80214ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 80215ee:	26ff      	movs	r6, #255	; 0xff
 80215f0:	9101      	str	r1, [sp, #4]
 80215f2:	4689      	mov	r9, r1
 80215f4:	46b4      	mov	ip, r6
 80215f6:	e78e      	b.n	8021516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 80215f8:	9101      	str	r1, [sp, #4]
 80215fa:	26ff      	movs	r6, #255	; 0xff
 80215fc:	e78b      	b.n	8021516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 80215fe:	4608      	mov	r0, r1
 8021600:	27ff      	movs	r7, #255	; 0xff
 8021602:	e7ba      	b.n	802157a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 8021604:	24ff      	movs	r4, #255	; 0xff
 8021606:	460a      	mov	r2, r1
 8021608:	4608      	mov	r0, r1
 802160a:	4627      	mov	r7, r4
 802160c:	e7e2      	b.n	80215d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802160e:	460a      	mov	r2, r1
 8021610:	24ff      	movs	r4, #255	; 0xff
 8021612:	e7df      	b.n	80215d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8021614:	460a      	mov	r2, r1
 8021616:	24ff      	movs	r4, #255	; 0xff
 8021618:	9b02      	ldr	r3, [sp, #8]
 802161a:	2b0f      	cmp	r3, #15
 802161c:	d8dc      	bhi.n	80215d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 802161e:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8021622:	fa1f f885 	uxth.w	r8, r5
 8021626:	fb08 fa0e 	mul.w	sl, r8, lr
 802162a:	ea4f 1308 	mov.w	r3, r8, lsl #4
 802162e:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8021632:	9303      	str	r3, [sp, #12]
 8021634:	fa1f f38e 	uxth.w	r3, lr
 8021638:	9304      	str	r3, [sp, #16]
 802163a:	ea4f 4809 	mov.w	r8, r9, lsl #16
 802163e:	9b02      	ldr	r3, [sp, #8]
 8021640:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021644:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8021648:	fb15 fe03 	smulbb	lr, r5, r3
 802164c:	ea48 0809 	orr.w	r8, r8, r9
 8021650:	f1c3 0910 	rsb	r9, r3, #16
 8021654:	9b01      	ldr	r3, [sp, #4]
 8021656:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802165a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802165e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021662:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021666:	eba9 0905 	sub.w	r9, r9, r5
 802166a:	ea4b 0303 	orr.w	r3, fp, r3
 802166e:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8021672:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021676:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 802167a:	436b      	muls	r3, r5
 802167c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021680:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021684:	ea4b 0202 	orr.w	r2, fp, r2
 8021688:	fb09 3308 	mla	r3, r9, r8, r3
 802168c:	fb0e 3302 	mla	r3, lr, r2, r3
 8021690:	0402      	lsls	r2, r0, #16
 8021692:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021696:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802169a:	4310      	orrs	r0, r2
 802169c:	9a02      	ldr	r2, [sp, #8]
 802169e:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 80216a2:	9a03      	ldr	r2, [sp, #12]
 80216a4:	fb0e 3e00 	mla	lr, lr, r0, r3
 80216a8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80216ac:	9a04      	ldr	r2, [sp, #16]
 80216ae:	1a80      	subs	r0, r0, r2
 80216b0:	9a03      	ldr	r2, [sp, #12]
 80216b2:	eba2 020a 	sub.w	r2, r2, sl
 80216b6:	b292      	uxth	r2, r2
 80216b8:	b280      	uxth	r0, r0
 80216ba:	4356      	muls	r6, r2
 80216bc:	9a04      	ldr	r2, [sp, #16]
 80216be:	fb0c 6600 	mla	r6, ip, r0, r6
 80216c2:	fb02 6707 	mla	r7, r2, r7, r6
 80216c6:	fb0a 7404 	mla	r4, sl, r4, r7
 80216ca:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80216ce:	1208      	asrs	r0, r1, #8
 80216d0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80216d4:	ea6f 2424 	mvn.w	r4, r4, asr #8
 80216d8:	b2e4      	uxtb	r4, r4
 80216da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216de:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80216e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80216e6:	4360      	muls	r0, r4
 80216e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80216ec:	fa1f f38e 	uxth.w	r3, lr
 80216f0:	1c42      	adds	r2, r0, #1
 80216f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80216f6:	1218      	asrs	r0, r3, #8
 80216f8:	10cd      	asrs	r5, r1, #3
 80216fa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80216fe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021702:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021706:	4a17      	ldr	r2, [pc, #92]	; (8021764 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 8021708:	4365      	muls	r5, r4
 802170a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802170e:	1c6a      	adds	r2, r5, #1
 8021710:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021714:	00c9      	lsls	r1, r1, #3
 8021716:	10da      	asrs	r2, r3, #3
 8021718:	b2c9      	uxtb	r1, r1
 802171a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802171e:	434c      	muls	r4, r1
 8021720:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8021724:	1c61      	adds	r1, r4, #1
 8021726:	00d2      	lsls	r2, r2, #3
 8021728:	00db      	lsls	r3, r3, #3
 802172a:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 802172e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021732:	b2db      	uxtb	r3, r3
 8021734:	4302      	orrs	r2, r0
 8021736:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802173a:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 802173e:	9a05      	ldr	r2, [sp, #20]
 8021740:	8013      	strh	r3, [r2, #0]
 8021742:	b007      	add	sp, #28
 8021744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021748:	2d0f      	cmp	r5, #15
 802174a:	f63f af45 	bhi.w	80215d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 802174e:	24ff      	movs	r4, #255	; 0xff
 8021750:	460a      	mov	r2, r1
 8021752:	4608      	mov	r0, r1
 8021754:	4627      	mov	r7, r4
 8021756:	e762      	b.n	802161e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 8021758:	08054484 	.word	0x08054484
 802175c:	080549dd 	.word	0x080549dd
 8021760:	0805450c 	.word	0x0805450c
 8021764:	fffff800 	.word	0xfffff800

08021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802176c:	ed2d 8b08 	vpush	{d8-d11}
 8021770:	b095      	sub	sp, #84	; 0x54
 8021772:	eeb0 aa40 	vmov.f32	s20, s0
 8021776:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8021778:	9306      	str	r3, [sp, #24]
 802177a:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802177e:	9110      	str	r1, [sp, #64]	; 0x40
 8021780:	9308      	str	r3, [sp, #32]
 8021782:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021786:	9013      	str	r0, [sp, #76]	; 0x4c
 8021788:	6870      	ldr	r0, [r6, #4]
 802178a:	9212      	str	r2, [sp, #72]	; 0x48
 802178c:	fb00 1303 	mla	r3, r0, r3, r1
 8021790:	6831      	ldr	r1, [r6, #0]
 8021792:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021794:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8021798:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802179c:	9307      	str	r3, [sp, #28]
 802179e:	6813      	ldr	r3, [r2, #0]
 80217a0:	9309      	str	r3, [sp, #36]	; 0x24
 80217a2:	6853      	ldr	r3, [r2, #4]
 80217a4:	930a      	str	r3, [sp, #40]	; 0x28
 80217a6:	006b      	lsls	r3, r5, #1
 80217a8:	eef0 9a60 	vmov.f32	s19, s1
 80217ac:	eeb0 9a41 	vmov.f32	s18, s2
 80217b0:	eeb0 8a62 	vmov.f32	s16, s5
 80217b4:	eef0 8a43 	vmov.f32	s17, s6
 80217b8:	eef0 ba44 	vmov.f32	s23, s8
 80217bc:	eeb0 ba64 	vmov.f32	s22, s9
 80217c0:	eef0 aa45 	vmov.f32	s21, s10
 80217c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80217c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	dc03      	bgt.n	80217d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80217cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	f340 83a3 	ble.w	8021f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 80217d4:	9b06      	ldr	r3, [sp, #24]
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	f340 81bc 	ble.w	8021b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 80217dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80217de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217e0:	1412      	asrs	r2, r2, #16
 80217e2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80217e6:	d42f      	bmi.n	8021848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80217e8:	1c51      	adds	r1, r2, #1
 80217ea:	428d      	cmp	r5, r1
 80217ec:	dd2f      	ble.n	802184e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	db2d      	blt.n	802184e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217f2:	9808      	ldr	r0, [sp, #32]
 80217f4:	1c59      	adds	r1, r3, #1
 80217f6:	4288      	cmp	r0, r1
 80217f8:	dd29      	ble.n	802184e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80217fa:	9b06      	ldr	r3, [sp, #24]
 80217fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80217fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021800:	3b01      	subs	r3, #1
 8021802:	fb02 1203 	mla	r2, r2, r3, r1
 8021806:	1412      	asrs	r2, r2, #16
 8021808:	d42b      	bmi.n	8021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802180a:	3201      	adds	r2, #1
 802180c:	4295      	cmp	r5, r2
 802180e:	dd28      	ble.n	8021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021810:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021812:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021814:	fb02 1303 	mla	r3, r2, r3, r1
 8021818:	141b      	asrs	r3, r3, #16
 802181a:	d422      	bmi.n	8021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802181c:	9a08      	ldr	r2, [sp, #32]
 802181e:	3301      	adds	r3, #1
 8021820:	429a      	cmp	r2, r3
 8021822:	dd1e      	ble.n	8021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021824:	9b06      	ldr	r3, [sp, #24]
 8021826:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802182a:	9311      	str	r3, [sp, #68]	; 0x44
 802182c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021832:	2b00      	cmp	r3, #0
 8021834:	f300 8208 	bgt.w	8021c48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 8021838:	9b06      	ldr	r3, [sp, #24]
 802183a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802183e:	9b07      	ldr	r3, [sp, #28]
 8021840:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021844:	9307      	str	r3, [sp, #28]
 8021846:	e187      	b.n	8021b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 8021848:	1c57      	adds	r7, r2, #1
 802184a:	f040 8174 	bne.w	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 802184e:	42aa      	cmp	r2, r5
 8021850:	f280 8171 	bge.w	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8021854:	1c5e      	adds	r6, r3, #1
 8021856:	f2c0 816e 	blt.w	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 802185a:	9a08      	ldr	r2, [sp, #32]
 802185c:	4293      	cmp	r3, r2
 802185e:	f280 816a 	bge.w	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8021862:	9b06      	ldr	r3, [sp, #24]
 8021864:	9f07      	ldr	r7, [sp, #28]
 8021866:	9311      	str	r3, [sp, #68]	; 0x44
 8021868:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802186c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802186e:	2b00      	cmp	r3, #0
 8021870:	dde2      	ble.n	8021838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021872:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021874:	1419      	asrs	r1, r3, #16
 8021876:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021878:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802187c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802187e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021882:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021884:	141b      	asrs	r3, r3, #16
 8021886:	f100 81c4 	bmi.w	8021c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 802188a:	1c58      	adds	r0, r3, #1
 802188c:	4285      	cmp	r5, r0
 802188e:	f340 81c2 	ble.w	8021c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8021892:	2900      	cmp	r1, #0
 8021894:	f2c0 81bf 	blt.w	8021c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8021898:	9c08      	ldr	r4, [sp, #32]
 802189a:	1c48      	adds	r0, r1, #1
 802189c:	4284      	cmp	r4, r0
 802189e:	f340 81ba 	ble.w	8021c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80218a2:	fb01 3105 	mla	r1, r1, r5, r3
 80218a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80218a8:	fa1f fe82 	uxth.w	lr, r2
 80218ac:	eb03 0a01 	add.w	sl, r3, r1
 80218b0:	ea4f 100e 	mov.w	r0, lr, lsl #4
 80218b4:	f813 9001 	ldrb.w	r9, [r3, r1]
 80218b8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80218bc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80218c0:	b29b      	uxth	r3, r3
 80218c2:	f1bc 0f00 	cmp.w	ip, #0
 80218c6:	f000 8186 	beq.w	8021bd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 80218ca:	f81a 4005 	ldrb.w	r4, [sl, r5]
 80218ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80218d0:	eb0a 0b05 	add.w	fp, sl, r5
 80218d4:	fa1f fa8c 	uxth.w	sl, ip
 80218d8:	fb0a fe0e 	mul.w	lr, sl, lr
 80218dc:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80218e0:	fa1f fa8a 	uxth.w	sl, sl
 80218e4:	eba0 000e 	sub.w	r0, r0, lr
 80218e8:	eba3 030a 	sub.w	r3, r3, sl
 80218ec:	b280      	uxth	r0, r0
 80218ee:	fb08 f000 	mul.w	r0, r8, r0
 80218f2:	b29b      	uxth	r3, r3
 80218f4:	fb09 0303 	mla	r3, r9, r3, r0
 80218f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80218fa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80218fe:	940c      	str	r4, [sp, #48]	; 0x30
 8021900:	fb0a 3300 	mla	r3, sl, r0, r3
 8021904:	fb0e 3304 	mla	r3, lr, r4, r3
 8021908:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802190c:	2b00      	cmp	r3, #0
 802190e:	f000 8105 	beq.w	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021914:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021916:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802191a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802191e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8021922:	f000 815d 	beq.w	8021be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 8021926:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802192a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802192e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021932:	fb09 f101 	mul.w	r1, r9, r1
 8021936:	fb0a fe0e 	mul.w	lr, sl, lr
 802193a:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802193e:	f101 0b20 	add.w	fp, r1, #32
 8021942:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021946:	44ce      	add	lr, r9
 8021948:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 802194c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021950:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021954:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021958:	ea4e 0909 	orr.w	r9, lr, r9
 802195c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021960:	8841      	ldrh	r1, [r0, #2]
 8021962:	d019      	beq.n	8021998 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 8021964:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021968:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802196c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021970:	fb0a fe0e 	mul.w	lr, sl, lr
 8021974:	fb08 f801 	mul.w	r8, r8, r1
 8021978:	f108 0b20 	add.w	fp, r8, #32
 802197c:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8021980:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021984:	448e      	add	lr, r1
 8021986:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 802198a:	0a09      	lsrs	r1, r1, #8
 802198c:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8021990:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021994:	ea4a 0101 	orr.w	r1, sl, r1
 8021998:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802199c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80219a0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80219a4:	ea4e 0909 	orr.w	r9, lr, r9
 80219a8:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 80219ac:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80219b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80219b4:	ea4e 0e01 	orr.w	lr, lr, r1
 80219b8:	f1bc 0f00 	cmp.w	ip, #0
 80219bc:	f000 8112 	beq.w	8021be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 80219c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80219c2:	eb00 0801 	add.w	r8, r0, r1
 80219c6:	5a41      	ldrh	r1, [r0, r1]
 80219c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80219ca:	28ff      	cmp	r0, #255	; 0xff
 80219cc:	d019      	beq.n	8021a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80219ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219d0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80219d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80219d8:	fb04 fb01 	mul.w	fp, r4, r1
 80219dc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80219e0:	fb0a fa00 	mul.w	sl, sl, r0
 80219e4:	f10b 0020 	add.w	r0, fp, #32
 80219e8:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 80219ec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80219f0:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80219f4:	4451      	add	r1, sl
 80219f6:	0a00      	lsrs	r0, r0, #8
 80219f8:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80219fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a00:	4301      	orrs	r1, r0
 8021a02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021a04:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8021a08:	2cff      	cmp	r4, #255	; 0xff
 8021a0a:	d01a      	beq.n	8021a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021a0c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8021a10:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a14:	fb04 fb00 	mul.w	fp, r4, r0
 8021a18:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021a1c:	fb0a fa08 	mul.w	sl, sl, r8
 8021a20:	f10b 0820 	add.w	r8, fp, #32
 8021a24:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8021a28:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8021a2c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021a30:	4450      	add	r0, sl
 8021a32:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021a36:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021a3a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021a3e:	ea40 0008 	orr.w	r0, r0, r8
 8021a42:	fb1c f802 	smulbb	r8, ip, r2
 8021a46:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021a4a:	f1cc 0a10 	rsb	sl, ip, #16
 8021a4e:	ebaa 0a02 	sub.w	sl, sl, r2
 8021a52:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021a56:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8021a5a:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8021a5e:	fb0e f202 	mul.w	r2, lr, r2
 8021a62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021a66:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8021a6a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021a6e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8021a72:	fb09 220a 	mla	r2, r9, sl, r2
 8021a76:	ea4b 0101 	orr.w	r1, fp, r1
 8021a7a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a82:	fb0c 2201 	mla	r2, ip, r1, r2
 8021a86:	ea4e 0000 	orr.w	r0, lr, r0
 8021a8a:	fb08 2800 	mla	r8, r8, r0, r2
 8021a8e:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8021a92:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021a96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a9a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021a9e:	ea42 0808 	orr.w	r8, r2, r8
 8021aa2:	fa1f f288 	uxth.w	r2, r8
 8021aa6:	2bff      	cmp	r3, #255	; 0xff
 8021aa8:	f000 80b1 	beq.w	8021c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8021aac:	f8b7 8000 	ldrh.w	r8, [r7]
 8021ab0:	43db      	mvns	r3, r3
 8021ab2:	ea4f 2028 	mov.w	r0, r8, asr #8
 8021ab6:	fa5f fe83 	uxtb.w	lr, r3
 8021aba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021abe:	fb00 f00e 	mul.w	r0, r0, lr
 8021ac2:	1c41      	adds	r1, r0, #1
 8021ac4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021ac8:	1210      	asrs	r0, r2, #8
 8021aca:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021ace:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021ad2:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8021ad6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021ada:	495a      	ldr	r1, [pc, #360]	; (8021c44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8021adc:	fb0c fc0e 	mul.w	ip, ip, lr
 8021ae0:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8021ae4:	f10c 0101 	add.w	r1, ip, #1
 8021ae8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021aec:	10d1      	asrs	r1, r2, #3
 8021aee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021af2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8021af6:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8021afa:	b2db      	uxtb	r3, r3
 8021afc:	00c9      	lsls	r1, r1, #3
 8021afe:	fb03 f30e 	mul.w	r3, r3, lr
 8021b02:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021b06:	4301      	orrs	r1, r0
 8021b08:	1c58      	adds	r0, r3, #1
 8021b0a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021b0e:	00d3      	lsls	r3, r2, #3
 8021b10:	b2db      	uxtb	r3, r3
 8021b12:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021b16:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8021b1a:	803b      	strh	r3, [r7, #0]
 8021b1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021b1e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021b20:	4413      	add	r3, r2
 8021b22:	9327      	str	r3, [sp, #156]	; 0x9c
 8021b24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021b26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b28:	441a      	add	r2, r3
 8021b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021b2c:	9228      	str	r2, [sp, #160]	; 0xa0
 8021b2e:	3b01      	subs	r3, #1
 8021b30:	3702      	adds	r7, #2
 8021b32:	9311      	str	r3, [sp, #68]	; 0x44
 8021b34:	e69a      	b.n	802186c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021b36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021b38:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021b3a:	4413      	add	r3, r2
 8021b3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8021b3e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021b40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b42:	441a      	add	r2, r3
 8021b44:	9b06      	ldr	r3, [sp, #24]
 8021b46:	9228      	str	r2, [sp, #160]	; 0xa0
 8021b48:	3b01      	subs	r3, #1
 8021b4a:	9306      	str	r3, [sp, #24]
 8021b4c:	9b07      	ldr	r3, [sp, #28]
 8021b4e:	3302      	adds	r3, #2
 8021b50:	9307      	str	r3, [sp, #28]
 8021b52:	e63f      	b.n	80217d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021b54:	f47f ae51 	bne.w	80217fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	f340 81dd 	ble.w	8021f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8021b60:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b68:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021b6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b72:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b76:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b7a:	eef0 6a48 	vmov.f32	s13, s16
 8021b7e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b86:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b8a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8021b8e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b92:	eef0 6a68 	vmov.f32	s13, s17
 8021b96:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b9a:	ee18 2a10 	vmov	r2, s16
 8021b9e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ba6:	ee18 2a90 	vmov	r2, s17
 8021baa:	9329      	str	r3, [sp, #164]	; 0xa4
 8021bac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bb2:	932a      	str	r3, [sp, #168]	; 0xa8
 8021bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bb8:	3b01      	subs	r3, #1
 8021bba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8021bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021bc2:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8021bc6:	bf08      	it	eq
 8021bc8:	4613      	moveq	r3, r2
 8021bca:	9306      	str	r3, [sp, #24]
 8021bcc:	eef0 8a67 	vmov.f32	s17, s15
 8021bd0:	eeb0 8a47 	vmov.f32	s16, s14
 8021bd4:	e5f7      	b.n	80217c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8021bd6:	fb08 f000 	mul.w	r0, r8, r0
 8021bda:	fb09 0303 	mla	r3, r9, r3, r0
 8021bde:	e693      	b.n	8021908 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8021be0:	4689      	mov	r9, r1
 8021be2:	e6bb      	b.n	802195c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8021be4:	f1c2 0010 	rsb	r0, r2, #16
 8021be8:	fb0e f202 	mul.w	r2, lr, r2
 8021bec:	fb09 2900 	mla	r9, r9, r0, r2
 8021bf0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021bf4:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021bf8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021bfc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c00:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021c04:	ea42 0909 	orr.w	r9, r2, r9
 8021c08:	fa1f f289 	uxth.w	r2, r9
 8021c0c:	e74b      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8021c0e:	803a      	strh	r2, [r7, #0]
 8021c10:	e784      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c12:	1c5c      	adds	r4, r3, #1
 8021c14:	d182      	bne.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c16:	429d      	cmp	r5, r3
 8021c18:	dd80      	ble.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c1a:	1c48      	adds	r0, r1, #1
 8021c1c:	f6ff af7e 	blt.w	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c20:	9808      	ldr	r0, [sp, #32]
 8021c22:	4288      	cmp	r0, r1
 8021c24:	f77f af7a 	ble.w	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c28:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8021c2c:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8021c30:	e9cd 5000 	strd	r5, r0, [sp]
 8021c34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8021c38:	4639      	mov	r1, r7
 8021c3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021c3c:	f7ff fbf2 	bl	8021424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021c40:	e76c      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8021c42:	bf00      	nop
 8021c44:	fffff800 	.word	0xfffff800
 8021c48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c4a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021c4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c50:	141f      	asrs	r7, r3, #16
 8021c52:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021c56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c58:	141b      	asrs	r3, r3, #16
 8021c5a:	fb05 3707 	mla	r7, r5, r7, r3
 8021c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c60:	fa1f fc82 	uxth.w	ip, r2
 8021c64:	eb03 0a07 	add.w	sl, r3, r7
 8021c68:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8021c6c:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021c70:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021c74:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8021c78:	b29b      	uxth	r3, r3
 8021c7a:	2800      	cmp	r0, #0
 8021c7c:	f000 8132 	beq.w	8021ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 8021c80:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8021c84:	940d      	str	r4, [sp, #52]	; 0x34
 8021c86:	eb0a 0b05 	add.w	fp, sl, r5
 8021c8a:	fa1f fa80 	uxth.w	sl, r0
 8021c8e:	fb0a fc0c 	mul.w	ip, sl, ip
 8021c92:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021c96:	fa1f fa8a 	uxth.w	sl, sl
 8021c9a:	eba1 010c 	sub.w	r1, r1, ip
 8021c9e:	eba3 030a 	sub.w	r3, r3, sl
 8021ca2:	b289      	uxth	r1, r1
 8021ca4:	fb08 f101 	mul.w	r1, r8, r1
 8021ca8:	b29b      	uxth	r3, r3
 8021caa:	fb09 1303 	mla	r3, r9, r3, r1
 8021cae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021cb0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021cb4:	940e      	str	r4, [sp, #56]	; 0x38
 8021cb6:	fb0a 3301 	mla	r3, sl, r1, r3
 8021cba:	fb0c 3304 	mla	r3, ip, r4, r3
 8021cbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	f000 8100 	beq.w	8021ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8021cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021cca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ccc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cd0:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8021cd4:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021cd8:	f000 8109 	beq.w	8021eee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 8021cdc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021ce0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021ce4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021ce8:	fb09 f707 	mul.w	r7, r9, r7
 8021cec:	fb0a fc0c 	mul.w	ip, sl, ip
 8021cf0:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021cf4:	f107 0b20 	add.w	fp, r7, #32
 8021cf8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021cfc:	44cc      	add	ip, r9
 8021cfe:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021d02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d06:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021d0a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021d0e:	ea4c 0909 	orr.w	r9, ip, r9
 8021d12:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d16:	884f      	ldrh	r7, [r1, #2]
 8021d18:	d019      	beq.n	8021d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 8021d1a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021d1e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021d22:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d26:	fb08 f807 	mul.w	r8, r8, r7
 8021d2a:	fb0a fc0c 	mul.w	ip, sl, ip
 8021d2e:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021d32:	f108 0b20 	add.w	fp, r8, #32
 8021d36:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021d3a:	44bc      	add	ip, r7
 8021d3c:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021d40:	0a3f      	lsrs	r7, r7, #8
 8021d42:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021d46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d4a:	ea4c 0707 	orr.w	r7, ip, r7
 8021d4e:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021d52:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021d56:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d5a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021d5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021d62:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021d66:	ea4c 0909 	orr.w	r9, ip, r9
 8021d6a:	ea4a 0707 	orr.w	r7, sl, r7
 8021d6e:	2800      	cmp	r0, #0
 8021d70:	f000 80bf 	beq.w	8021ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 8021d74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d76:	eb01 0c04 	add.w	ip, r1, r4
 8021d7a:	f831 8004 	ldrh.w	r8, [r1, r4]
 8021d7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021d80:	29ff      	cmp	r1, #255	; 0xff
 8021d82:	d01a      	beq.n	8021dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 8021d84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d86:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8021d8a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021d8e:	fb04 fb08 	mul.w	fp, r4, r8
 8021d92:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021d96:	fb0a fa01 	mul.w	sl, sl, r1
 8021d9a:	f10b 0120 	add.w	r1, fp, #32
 8021d9e:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8021da2:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8021da6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021daa:	44d0      	add	r8, sl
 8021dac:	0a09      	lsrs	r1, r1, #8
 8021dae:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8021db2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021db6:	ea48 0801 	orr.w	r8, r8, r1
 8021dba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021dbc:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8021dc0:	2cff      	cmp	r4, #255	; 0xff
 8021dc2:	d01a      	beq.n	8021dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 8021dc4:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8021dc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021dcc:	fb04 fb01 	mul.w	fp, r4, r1
 8021dd0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8021dd4:	fb0a fa0c 	mul.w	sl, sl, ip
 8021dd8:	f10b 0c20 	add.w	ip, fp, #32
 8021ddc:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8021de0:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8021de4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021de8:	4451      	add	r1, sl
 8021dea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dee:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021df2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021df6:	ea41 010c 	orr.w	r1, r1, ip
 8021dfa:	fb10 fc02 	smulbb	ip, r0, r2
 8021dfe:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021e02:	f1c0 0a10 	rsb	sl, r0, #16
 8021e06:	ebaa 0a02 	sub.w	sl, sl, r2
 8021e0a:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8021e0e:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021e12:	437a      	muls	r2, r7
 8021e14:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8021e18:	040f      	lsls	r7, r1, #16
 8021e1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021e1e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021e22:	fb09 220a 	mla	r2, r9, sl, r2
 8021e26:	ea4b 0808 	orr.w	r8, fp, r8
 8021e2a:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 8021e2e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8021e32:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021e36:	fb00 2208 	mla	r2, r0, r8, r2
 8021e3a:	4339      	orrs	r1, r7
 8021e3c:	fb0c 2201 	mla	r2, ip, r1, r2
 8021e40:	ea4f 5952 	mov.w	r9, r2, lsr #21
 8021e44:	0952      	lsrs	r2, r2, #5
 8021e46:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e4e:	ea49 0202 	orr.w	r2, r9, r2
 8021e52:	2bff      	cmp	r3, #255	; 0xff
 8021e54:	b292      	uxth	r2, r2
 8021e56:	d05d      	beq.n	8021f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 8021e58:	f8be 8000 	ldrh.w	r8, [lr]
 8021e5c:	4c31      	ldr	r4, [pc, #196]	; (8021f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 8021e5e:	43db      	mvns	r3, r3
 8021e60:	ea4f 2028 	mov.w	r0, r8, asr #8
 8021e64:	fa5f fc83 	uxtb.w	ip, r3
 8021e68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021e6c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8021e70:	fb00 f00c 	mul.w	r0, r0, ip
 8021e74:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e78:	fb07 f10c 	mul.w	r1, r7, ip
 8021e7c:	1c47      	adds	r7, r0, #1
 8021e7e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021e82:	1217      	asrs	r7, r2, #8
 8021e84:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021e88:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021e8c:	1c4f      	adds	r7, r1, #1
 8021e8e:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8021e92:	10d1      	asrs	r1, r2, #3
 8021e94:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e98:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8021e9c:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8021ea0:	b2db      	uxtb	r3, r3
 8021ea2:	00c9      	lsls	r1, r1, #3
 8021ea4:	fb03 f30c 	mul.w	r3, r3, ip
 8021ea8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021eac:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8021eb0:	4308      	orrs	r0, r1
 8021eb2:	00d2      	lsls	r2, r2, #3
 8021eb4:	1c59      	adds	r1, r3, #1
 8021eb6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021eba:	b2d2      	uxtb	r2, r2
 8021ebc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ec0:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8021ec4:	f8ae 0000 	strh.w	r0, [lr]
 8021ec8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021eca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ecc:	4413      	add	r3, r2
 8021ece:	9327      	str	r3, [sp, #156]	; 0x9c
 8021ed0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021ed2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021ed4:	441a      	add	r2, r3
 8021ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021ed8:	9228      	str	r2, [sp, #160]	; 0xa0
 8021eda:	3b01      	subs	r3, #1
 8021edc:	f10e 0e02 	add.w	lr, lr, #2
 8021ee0:	9311      	str	r3, [sp, #68]	; 0x44
 8021ee2:	e4a5      	b.n	8021830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021ee4:	fb08 f101 	mul.w	r1, r8, r1
 8021ee8:	fb09 1303 	mla	r3, r9, r3, r1
 8021eec:	e6e7      	b.n	8021cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8021eee:	46b9      	mov	r9, r7
 8021ef0:	e70f      	b.n	8021d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 8021ef2:	f1c2 0110 	rsb	r1, r2, #16
 8021ef6:	437a      	muls	r2, r7
 8021ef8:	fb09 2901 	mla	r9, r9, r1, r2
 8021efc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021f00:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021f04:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021f08:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f0c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f10:	4302      	orrs	r2, r0
 8021f12:	e79e      	b.n	8021e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 8021f14:	f8ae 2000 	strh.w	r2, [lr]
 8021f18:	e7d6      	b.n	8021ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8021f1a:	b015      	add	sp, #84	; 0x54
 8021f1c:	ecbd 8b08 	vpop	{d8-d11}
 8021f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f24:	fffff800 	.word	0xfffff800

08021f28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8021f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f2c:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8021f30:	fb0c 4e03 	mla	lr, ip, r3, r4
 8021f34:	f1bc 0f00 	cmp.w	ip, #0
 8021f38:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8021f3c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8021f40:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8021f44:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021f48:	8808      	ldrh	r0, [r1, #0]
 8021f4a:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8021f4e:	db2f      	blt.n	8021fb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f50:	45e2      	cmp	sl, ip
 8021f52:	dd2d      	ble.n	8021fb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8021f54:	2c00      	cmp	r4, #0
 8021f56:	db29      	blt.n	8021fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f58:	42a3      	cmp	r3, r4
 8021f5a:	dd27      	ble.n	8021fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8021f5c:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8021f60:	1c62      	adds	r2, r4, #1
 8021f62:	d428      	bmi.n	8021fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f64:	4293      	cmp	r3, r2
 8021f66:	dd26      	ble.n	8021fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f68:	b32f      	cbz	r7, 8021fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8021f6a:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8021f6e:	f11c 0c01 	adds.w	ip, ip, #1
 8021f72:	d424      	bmi.n	8021fbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f74:	45e2      	cmp	sl, ip
 8021f76:	dd22      	ble.n	8021fbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8021f78:	2e00      	cmp	r6, #0
 8021f7a:	f000 809c 	beq.w	80220b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8021f7e:	2c00      	cmp	r4, #0
 8021f80:	db1b      	blt.n	8021fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f82:	42a3      	cmp	r3, r4
 8021f84:	dd19      	ble.n	8021fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8021f86:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8021f8a:	3401      	adds	r4, #1
 8021f8c:	d41a      	bmi.n	8021fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021f8e:	42a3      	cmp	r3, r4
 8021f90:	dd18      	ble.n	8021fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8021f92:	b1cf      	cbz	r7, 8021fc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8021f94:	3301      	adds	r3, #1
 8021f96:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8021f9a:	2f0f      	cmp	r7, #15
 8021f9c:	d915      	bls.n	8021fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8021f9e:	4b49      	ldr	r3, [pc, #292]	; (80220c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8021fa0:	4a49      	ldr	r2, [pc, #292]	; (80220c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8021fa2:	484a      	ldr	r0, [pc, #296]	; (80220cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8021fa4:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021fa8:	f002 ff30 	bl	8024e0c <__assert_func>
 8021fac:	4681      	mov	r9, r0
 8021fae:	e7d7      	b.n	8021f60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8021fb0:	4686      	mov	lr, r0
 8021fb2:	4681      	mov	r9, r0
 8021fb4:	e7db      	b.n	8021f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021fb6:	4686      	mov	lr, r0
 8021fb8:	e7d9      	b.n	8021f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8021fba:	4684      	mov	ip, r0
 8021fbc:	e7e5      	b.n	8021f8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8021fbe:	4603      	mov	r3, r0
 8021fc0:	4684      	mov	ip, r0
 8021fc2:	e7ea      	b.n	8021f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021fc4:	4603      	mov	r3, r0
 8021fc6:	e7e8      	b.n	8021f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8021fc8:	4603      	mov	r3, r0
 8021fca:	2e0f      	cmp	r6, #15
 8021fcc:	d8e7      	bhi.n	8021f9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8021fce:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8021fd2:	fb17 f806 	smulbb	r8, r7, r6
 8021fd6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021fda:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8021fde:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021fe2:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8021fe6:	ea44 0909 	orr.w	r9, r4, r9
 8021fea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021fee:	f1c6 0410 	rsb	r4, r6, #16
 8021ff2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021ff6:	1be4      	subs	r4, r4, r7
 8021ff8:	041a      	lsls	r2, r3, #16
 8021ffa:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8021ffe:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022002:	fb07 fe0e 	mul.w	lr, r7, lr
 8022006:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802200a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802200e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022012:	fb04 e409 	mla	r4, r4, r9, lr
 8022016:	4313      	orrs	r3, r2
 8022018:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802201c:	fb08 4303 	mla	r3, r8, r3, r4
 8022020:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022024:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8022028:	4322      	orrs	r2, r4
 802202a:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802202e:	fb06 3202 	mla	r2, r6, r2, r3
 8022032:	0d53      	lsrs	r3, r2, #21
 8022034:	0952      	lsrs	r2, r2, #5
 8022036:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802203a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802203e:	431a      	orrs	r2, r3
 8022040:	b293      	uxth	r3, r2
 8022042:	b2af      	uxth	r7, r5
 8022044:	1202      	asrs	r2, r0, #8
 8022046:	43ed      	mvns	r5, r5
 8022048:	b2ed      	uxtb	r5, r5
 802204a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802204e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022052:	fb12 f205 	smulbb	r2, r2, r5
 8022056:	10c6      	asrs	r6, r0, #3
 8022058:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802205c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022060:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022064:	10da      	asrs	r2, r3, #3
 8022066:	fb16 f605 	smulbb	r6, r6, r5
 802206a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802206e:	fb02 6207 	mla	r2, r2, r7, r6
 8022072:	b296      	uxth	r6, r2
 8022074:	00c2      	lsls	r2, r0, #3
 8022076:	00dc      	lsls	r4, r3, #3
 8022078:	b2d2      	uxtb	r2, r2
 802207a:	b2e4      	uxtb	r4, r4
 802207c:	fb12 f205 	smulbb	r2, r2, r5
 8022080:	fb04 2207 	mla	r2, r4, r7, r2
 8022084:	fa1f fc8c 	uxth.w	ip, ip
 8022088:	b292      	uxth	r2, r2
 802208a:	f10c 0301 	add.w	r3, ip, #1
 802208e:	1c50      	adds	r0, r2, #1
 8022090:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022094:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022098:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802209c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80220a0:	4313      	orrs	r3, r2
 80220a2:	1c72      	adds	r2, r6, #1
 80220a4:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80220a8:	0952      	lsrs	r2, r2, #5
 80220aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220ae:	4313      	orrs	r3, r2
 80220b0:	800b      	strh	r3, [r1, #0]
 80220b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220b6:	2f0f      	cmp	r7, #15
 80220b8:	f63f af71 	bhi.w	8021f9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80220bc:	4603      	mov	r3, r0
 80220be:	4684      	mov	ip, r0
 80220c0:	e785      	b.n	8021fce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80220c2:	bf00      	nop
 80220c4:	08054484 	.word	0x08054484
 80220c8:	08054a86 	.word	0x08054a86
 80220cc:	0805450c 	.word	0x0805450c

080220d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80220d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220d4:	ed2d 8b08 	vpush	{d8-d11}
 80220d8:	b095      	sub	sp, #84	; 0x54
 80220da:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80220de:	9306      	str	r3, [sp, #24]
 80220e0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80220e4:	9212      	str	r2, [sp, #72]	; 0x48
 80220e6:	9307      	str	r3, [sp, #28]
 80220e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220ea:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80220ee:	930c      	str	r3, [sp, #48]	; 0x30
 80220f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80220f2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80220f6:	9013      	str	r0, [sp, #76]	; 0x4c
 80220f8:	6850      	ldr	r0, [r2, #4]
 80220fa:	6812      	ldr	r2, [r2, #0]
 80220fc:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 8022100:	fb00 1303 	mla	r3, r0, r3, r1
 8022104:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022108:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	9309      	str	r3, [sp, #36]	; 0x24
 802210e:	007b      	lsls	r3, r7, #1
 8022110:	930a      	str	r3, [sp, #40]	; 0x28
 8022112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022114:	43db      	mvns	r3, r3
 8022116:	b2db      	uxtb	r3, r3
 8022118:	eeb0 aa40 	vmov.f32	s20, s0
 802211c:	eef0 9a60 	vmov.f32	s19, s1
 8022120:	eeb0 9a41 	vmov.f32	s18, s2
 8022124:	eeb0 8a62 	vmov.f32	s16, s5
 8022128:	eef0 8a43 	vmov.f32	s17, s6
 802212c:	eef0 ba44 	vmov.f32	s23, s8
 8022130:	eeb0 ba64 	vmov.f32	s22, s9
 8022134:	eef0 aa45 	vmov.f32	s21, s10
 8022138:	9308      	str	r3, [sp, #32]
 802213a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802213c:	2b00      	cmp	r3, #0
 802213e:	dc03      	bgt.n	8022148 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8022140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022142:	2b00      	cmp	r3, #0
 8022144:	f340 81f3 	ble.w	802252e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8022148:	9b06      	ldr	r3, [sp, #24]
 802214a:	2b00      	cmp	r3, #0
 802214c:	f340 80fa 	ble.w	8022344 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022150:	1422      	asrs	r2, r4, #16
 8022152:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022156:	d42b      	bmi.n	80221b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022158:	1c51      	adds	r1, r2, #1
 802215a:	428f      	cmp	r7, r1
 802215c:	dd2b      	ble.n	80221b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802215e:	2b00      	cmp	r3, #0
 8022160:	db29      	blt.n	80221b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022162:	9807      	ldr	r0, [sp, #28]
 8022164:	1c59      	adds	r1, r3, #1
 8022166:	4288      	cmp	r0, r1
 8022168:	dd25      	ble.n	80221b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802216a:	9b06      	ldr	r3, [sp, #24]
 802216c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802216e:	3b01      	subs	r3, #1
 8022170:	fb02 4203 	mla	r2, r2, r3, r4
 8022174:	1412      	asrs	r2, r2, #16
 8022176:	d428      	bmi.n	80221ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022178:	3201      	adds	r2, #1
 802217a:	4297      	cmp	r7, r2
 802217c:	dd25      	ble.n	80221ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802217e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022180:	fb02 6303 	mla	r3, r2, r3, r6
 8022184:	141b      	asrs	r3, r3, #16
 8022186:	d420      	bmi.n	80221ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022188:	9a07      	ldr	r2, [sp, #28]
 802218a:	3301      	adds	r3, #1
 802218c:	429a      	cmp	r2, r3
 802218e:	dd1c      	ble.n	80221ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022190:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022194:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8022198:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 802219c:	f1b8 0f00 	cmp.w	r8, #0
 80221a0:	f300 8129 	bgt.w	80223f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 80221a4:	9b06      	ldr	r3, [sp, #24]
 80221a6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80221aa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80221ae:	e0cb      	b.n	8022348 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80221b0:	1c51      	adds	r1, r2, #1
 80221b2:	f040 80bd 	bne.w	8022330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80221b6:	42ba      	cmp	r2, r7
 80221b8:	f280 80ba 	bge.w	8022330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80221bc:	1c5a      	adds	r2, r3, #1
 80221be:	f2c0 80b7 	blt.w	8022330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80221c2:	9a07      	ldr	r2, [sp, #28]
 80221c4:	4293      	cmp	r3, r2
 80221c6:	f280 80b3 	bge.w	8022330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80221ca:	f8dd b018 	ldr.w	fp, [sp, #24]
 80221ce:	46c8      	mov	r8, r9
 80221d0:	f1bb 0f00 	cmp.w	fp, #0
 80221d4:	dde6      	ble.n	80221a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80221d6:	1421      	asrs	r1, r4, #16
 80221d8:	ea4f 4226 	mov.w	r2, r6, asr #16
 80221dc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80221e0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80221e4:	f100 80ef 	bmi.w	80223c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80221e8:	f101 0c01 	add.w	ip, r1, #1
 80221ec:	4567      	cmp	r7, ip
 80221ee:	f340 80ec 	ble.w	80223ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80221f2:	2a00      	cmp	r2, #0
 80221f4:	f2c0 80e9 	blt.w	80223ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80221f8:	9d07      	ldr	r5, [sp, #28]
 80221fa:	f102 0c01 	add.w	ip, r2, #1
 80221fe:	4565      	cmp	r5, ip
 8022200:	f340 80e3 	ble.w	80223ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022204:	fb02 1207 	mla	r2, r2, r7, r1
 8022208:	9909      	ldr	r1, [sp, #36]	; 0x24
 802220a:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 802220e:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8022212:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8022216:	b138      	cbz	r0, 8022228 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 8022218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802221a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802221c:	4472      	add	r2, lr
 802221e:	f83e 5005 	ldrh.w	r5, [lr, r5]
 8022222:	8852      	ldrh	r2, [r2, #2]
 8022224:	950e      	str	r5, [sp, #56]	; 0x38
 8022226:	920f      	str	r2, [sp, #60]	; 0x3c
 8022228:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 802222c:	fb13 f200 	smulbb	r2, r3, r0
 8022230:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022234:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022238:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802223c:	10d2      	asrs	r2, r2, #3
 802223e:	ea4e 0c0c 	orr.w	ip, lr, ip
 8022242:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022246:	f1c0 0e10 	rsb	lr, r0, #16
 802224a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802224e:	ebae 0e03 	sub.w	lr, lr, r3
 8022252:	ea4a 0101 	orr.w	r1, sl, r1
 8022256:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802225a:	4359      	muls	r1, r3
 802225c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802225e:	9d08      	ldr	r5, [sp, #32]
 8022260:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022264:	fb0e 1e0c 	mla	lr, lr, ip, r1
 8022268:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802226c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022270:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022274:	ea4c 0c03 	orr.w	ip, ip, r3
 8022278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802227a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802227c:	041b      	lsls	r3, r3, #16
 802227e:	fb02 ec0c 	mla	ip, r2, ip, lr
 8022282:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022286:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802228a:	ea43 030e 	orr.w	r3, r3, lr
 802228e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022292:	fb02 c203 	mla	r2, r2, r3, ip
 8022296:	0d53      	lsrs	r3, r2, #21
 8022298:	0952      	lsrs	r2, r2, #5
 802229a:	f8b8 c000 	ldrh.w	ip, [r8]
 802229e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80222a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222a6:	431a      	orrs	r2, r3
 80222a8:	b292      	uxth	r2, r2
 80222aa:	ea4f 212c 	mov.w	r1, ip, asr #8
 80222ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80222b2:	1210      	asrs	r0, r2, #8
 80222b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80222b8:	fb11 f105 	smulbb	r1, r1, r5
 80222bc:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80222c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80222c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80222c8:	fb00 1003 	mla	r0, r0, r3, r1
 80222cc:	fa5f fc8c 	uxtb.w	ip, ip
 80222d0:	10d1      	asrs	r1, r2, #3
 80222d2:	00d2      	lsls	r2, r2, #3
 80222d4:	fb1c fc05 	smulbb	ip, ip, r5
 80222d8:	b2d2      	uxtb	r2, r2
 80222da:	fb02 c203 	mla	r2, r2, r3, ip
 80222de:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80222e2:	b280      	uxth	r0, r0
 80222e4:	b292      	uxth	r2, r2
 80222e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80222ea:	fb1e fe05 	smulbb	lr, lr, r5
 80222ee:	fb01 e103 	mla	r1, r1, r3, lr
 80222f2:	f102 0c01 	add.w	ip, r2, #1
 80222f6:	1c43      	adds	r3, r0, #1
 80222f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80222fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022300:	b289      	uxth	r1, r1
 8022302:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022306:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802230a:	4313      	orrs	r3, r2
 802230c:	1c4a      	adds	r2, r1, #1
 802230e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022312:	0949      	lsrs	r1, r1, #5
 8022314:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022318:	430b      	orrs	r3, r1
 802231a:	f8a8 3000 	strh.w	r3, [r8]
 802231e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022320:	441c      	add	r4, r3
 8022322:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022324:	f108 0802 	add.w	r8, r8, #2
 8022328:	441e      	add	r6, r3
 802232a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802232e:	e74f      	b.n	80221d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8022330:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022332:	441c      	add	r4, r3
 8022334:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022336:	441e      	add	r6, r3
 8022338:	9b06      	ldr	r3, [sp, #24]
 802233a:	3b01      	subs	r3, #1
 802233c:	9306      	str	r3, [sp, #24]
 802233e:	f109 0902 	add.w	r9, r9, #2
 8022342:	e701      	b.n	8022148 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8022344:	f47f af11 	bne.w	802216a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802234a:	2b00      	cmp	r3, #0
 802234c:	f340 80ef 	ble.w	802252e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8022350:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022358:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802235c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802235e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022362:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022366:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802236a:	eef0 6a48 	vmov.f32	s13, s16
 802236e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022376:	ee37 8a48 	vsub.f32	s16, s14, s16
 802237a:	ee16 4a90 	vmov	r4, s13
 802237e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022382:	eef0 6a68 	vmov.f32	s13, s17
 8022386:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802238a:	ee18 2a10 	vmov	r2, s16
 802238e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022392:	fb92 f3f3 	sdiv	r3, r2, r3
 8022396:	ee18 2a90 	vmov	r2, s17
 802239a:	9329      	str	r3, [sp, #164]	; 0xa4
 802239c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802239e:	fb92 f3f3 	sdiv	r3, r2, r3
 80223a2:	932a      	str	r3, [sp, #168]	; 0xa8
 80223a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80223a8:	3b01      	subs	r3, #1
 80223aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80223b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80223b2:	bf08      	it	eq
 80223b4:	4613      	moveq	r3, r2
 80223b6:	ee16 6a90 	vmov	r6, s13
 80223ba:	9306      	str	r3, [sp, #24]
 80223bc:	eef0 8a67 	vmov.f32	s17, s15
 80223c0:	eeb0 8a47 	vmov.f32	s16, s14
 80223c4:	e6b9      	b.n	802213a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80223c6:	1c4d      	adds	r5, r1, #1
 80223c8:	d1a9      	bne.n	802231e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223ca:	428f      	cmp	r7, r1
 80223cc:	dda7      	ble.n	802231e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223ce:	1c55      	adds	r5, r2, #1
 80223d0:	dba5      	blt.n	802231e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223d2:	9d07      	ldr	r5, [sp, #28]
 80223d4:	4295      	cmp	r5, r2
 80223d6:	dda2      	ble.n	802231e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80223da:	9101      	str	r1, [sp, #4]
 80223dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80223e0:	9b07      	ldr	r3, [sp, #28]
 80223e2:	9300      	str	r3, [sp, #0]
 80223e4:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80223e8:	463b      	mov	r3, r7
 80223ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80223ee:	4641      	mov	r1, r8
 80223f0:	f7ff fd9a 	bl	8021f28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80223f4:	e793      	b.n	802231e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80223f6:	1422      	asrs	r2, r4, #16
 80223f8:	1431      	asrs	r1, r6, #16
 80223fa:	fb07 2101 	mla	r1, r7, r1, r2
 80223fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022402:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8022406:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802240a:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 802240e:	8851      	ldrh	r1, [r2, #2]
 8022410:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022414:	f1be 0f00 	cmp.w	lr, #0
 8022418:	d006      	beq.n	8022428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 802241a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802241c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802241e:	1810      	adds	r0, r2, r0
 8022420:	5b52      	ldrh	r2, [r2, r5]
 8022422:	9210      	str	r2, [sp, #64]	; 0x40
 8022424:	8842      	ldrh	r2, [r0, #2]
 8022426:	9211      	str	r2, [sp, #68]	; 0x44
 8022428:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802242c:	fb13 f20e 	smulbb	r2, r3, lr
 8022430:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022434:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022438:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802243c:	10d2      	asrs	r2, r2, #3
 802243e:	ea40 000c 	orr.w	r0, r0, ip
 8022442:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022446:	f1ce 0c10 	rsb	ip, lr, #16
 802244a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802244e:	ebac 0c03 	sub.w	ip, ip, r3
 8022452:	ea4b 0101 	orr.w	r1, fp, r1
 8022456:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 802245a:	4359      	muls	r1, r3
 802245c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802245e:	9d08      	ldr	r5, [sp, #32]
 8022460:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022464:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022468:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802246c:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8022470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022472:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022476:	ea4b 0000 	orr.w	r0, fp, r0
 802247a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802247e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022482:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022486:	fb02 c000 	mla	r0, r2, r0, ip
 802248a:	ea4b 0b03 	orr.w	fp, fp, r3
 802248e:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8022492:	fb02 0b0b 	mla	fp, r2, fp, r0
 8022496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022498:	ea4f 515b 	mov.w	r1, fp, lsr #21
 802249c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80224a0:	8812      	ldrh	r2, [r2, #0]
 80224a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80224a6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80224aa:	ea41 0b0b 	orr.w	fp, r1, fp
 80224ae:	fa1f f38b 	uxth.w	r3, fp
 80224b2:	1211      	asrs	r1, r2, #8
 80224b4:	1218      	asrs	r0, r3, #8
 80224b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80224ba:	fb11 f105 	smulbb	r1, r1, r5
 80224be:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80224c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80224c6:	00d2      	lsls	r2, r2, #3
 80224c8:	fb00 100a 	mla	r0, r0, sl, r1
 80224cc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80224d0:	10d9      	asrs	r1, r3, #3
 80224d2:	b2d2      	uxtb	r2, r2
 80224d4:	00db      	lsls	r3, r3, #3
 80224d6:	fb1c fc05 	smulbb	ip, ip, r5
 80224da:	fb12 f205 	smulbb	r2, r2, r5
 80224de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80224e2:	b2db      	uxtb	r3, r3
 80224e4:	b280      	uxth	r0, r0
 80224e6:	fb01 c10a 	mla	r1, r1, sl, ip
 80224ea:	fb03 230a 	mla	r3, r3, sl, r2
 80224ee:	b29b      	uxth	r3, r3
 80224f0:	b289      	uxth	r1, r1
 80224f2:	1c42      	adds	r2, r0, #1
 80224f4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224f8:	f101 0c01 	add.w	ip, r1, #1
 80224fc:	1c5a      	adds	r2, r3, #1
 80224fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022502:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022506:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802250a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802250e:	0949      	lsrs	r1, r1, #5
 8022510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022512:	4310      	orrs	r0, r2
 8022514:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022518:	4308      	orrs	r0, r1
 802251a:	f823 0b02 	strh.w	r0, [r3], #2
 802251e:	930d      	str	r3, [sp, #52]	; 0x34
 8022520:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022522:	441c      	add	r4, r3
 8022524:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022526:	f108 38ff 	add.w	r8, r8, #4294967295
 802252a:	441e      	add	r6, r3
 802252c:	e636      	b.n	802219c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802252e:	b015      	add	sp, #84	; 0x54
 8022530:	ecbd 8b08 	vpop	{d8-d11}
 8022534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022538 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8022538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802253c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8022540:	fb06 5c03 	mla	ip, r6, r3, r5
 8022544:	2e00      	cmp	r6, #0
 8022546:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802254a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802254e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8022552:	8808      	ldrh	r0, [r1, #0]
 8022554:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022558:	db2e      	blt.n	80225b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802255a:	45b0      	cmp	r8, r6
 802255c:	dd2c      	ble.n	80225b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802255e:	2d00      	cmp	r5, #0
 8022560:	db28      	blt.n	80225b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8022562:	42ab      	cmp	r3, r5
 8022564:	dd26      	ble.n	80225b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8022566:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802256a:	1c6a      	adds	r2, r5, #1
 802256c:	d427      	bmi.n	80225be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802256e:	4293      	cmp	r3, r2
 8022570:	dd25      	ble.n	80225be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8022572:	b324      	cbz	r4, 80225be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8022574:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022578:	3601      	adds	r6, #1
 802257a:	d424      	bmi.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802257c:	45b0      	cmp	r8, r6
 802257e:	dd22      	ble.n	80225c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8022580:	b31f      	cbz	r7, 80225ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8022582:	2d00      	cmp	r5, #0
 8022584:	db1d      	blt.n	80225c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8022586:	42ab      	cmp	r3, r5
 8022588:	dd1b      	ble.n	80225c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802258a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802258e:	3501      	adds	r5, #1
 8022590:	d405      	bmi.n	802259e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8022592:	42ab      	cmp	r3, r5
 8022594:	dd03      	ble.n	802259e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8022596:	b124      	cbz	r4, 80225a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8022598:	3301      	adds	r3, #1
 802259a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802259e:	2c0f      	cmp	r4, #15
 80225a0:	d801      	bhi.n	80225a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80225a2:	2f0f      	cmp	r7, #15
 80225a4:	d914      	bls.n	80225d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80225a6:	4b27      	ldr	r3, [pc, #156]	; (8022644 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80225a8:	4a27      	ldr	r2, [pc, #156]	; (8022648 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80225aa:	4828      	ldr	r0, [pc, #160]	; (802264c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80225ac:	f240 11ef 	movw	r1, #495	; 0x1ef
 80225b0:	f002 fc2c 	bl	8024e0c <__assert_func>
 80225b4:	4684      	mov	ip, r0
 80225b6:	e7d8      	b.n	802256a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80225b8:	4602      	mov	r2, r0
 80225ba:	4684      	mov	ip, r0
 80225bc:	e7dc      	b.n	8022578 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80225be:	4602      	mov	r2, r0
 80225c0:	e7da      	b.n	8022578 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80225c2:	4606      	mov	r6, r0
 80225c4:	e7e3      	b.n	802258e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80225c6:	4606      	mov	r6, r0
 80225c8:	e7e9      	b.n	802259e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80225ca:	2c0f      	cmp	r4, #15
 80225cc:	d8eb      	bhi.n	80225a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80225ce:	4606      	mov	r6, r0
 80225d0:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80225d4:	fb14 f307 	smulbb	r3, r4, r7
 80225d8:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80225dc:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80225e0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80225e4:	10db      	asrs	r3, r3, #3
 80225e6:	ea45 0c0c 	orr.w	ip, r5, ip
 80225ea:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80225ee:	f1c7 0510 	rsb	r5, r7, #16
 80225f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80225f6:	1b2d      	subs	r5, r5, r4
 80225f8:	ea4e 0202 	orr.w	r2, lr, r2
 80225fc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8022600:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8022604:	4354      	muls	r4, r2
 8022606:	fb05 450c 	mla	r5, r5, ip, r4
 802260a:	0404      	lsls	r4, r0, #16
 802260c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022610:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022614:	4320      	orrs	r0, r4
 8022616:	fb03 5400 	mla	r4, r3, r0, r5
 802261a:	0430      	lsls	r0, r6, #16
 802261c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022620:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8022624:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8022628:	4330      	orrs	r0, r6
 802262a:	fb07 4000 	mla	r0, r7, r0, r4
 802262e:	0d43      	lsrs	r3, r0, #21
 8022630:	0940      	lsrs	r0, r0, #5
 8022632:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022636:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802263a:	4318      	orrs	r0, r3
 802263c:	8008      	strh	r0, [r1, #0]
 802263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022642:	bf00      	nop
 8022644:	08054484 	.word	0x08054484
 8022648:	08054a86 	.word	0x08054a86
 802264c:	0805450c 	.word	0x0805450c

08022650 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022654:	ed2d 8b0a 	vpush	{d8-d12}
 8022658:	b093      	sub	sp, #76	; 0x4c
 802265a:	461d      	mov	r5, r3
 802265c:	9210      	str	r2, [sp, #64]	; 0x40
 802265e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022660:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 8022664:	9208      	str	r2, [sp, #32]
 8022666:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 802266a:	910b      	str	r1, [sp, #44]	; 0x2c
 802266c:	6859      	ldr	r1, [r3, #4]
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 8022674:	9011      	str	r0, [sp, #68]	; 0x44
 8022676:	fb01 2707 	mla	r7, r1, r7, r2
 802267a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802267e:	9307      	str	r3, [sp, #28]
 8022680:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022682:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	9309      	str	r3, [sp, #36]	; 0x24
 802268a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802268e:	eeb0 aa40 	vmov.f32	s20, s0
 8022692:	eef0 9a60 	vmov.f32	s19, s1
 8022696:	eeb0 9a41 	vmov.f32	s18, s2
 802269a:	eeb0 8a62 	vmov.f32	s16, s5
 802269e:	eef0 8a43 	vmov.f32	s17, s6
 80226a2:	eeb0 ca44 	vmov.f32	s24, s8
 80226a6:	eef0 ba64 	vmov.f32	s23, s9
 80226aa:	eeb0 ba45 	vmov.f32	s22, s10
 80226ae:	930a      	str	r3, [sp, #40]	; 0x28
 80226b0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80226b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	dc03      	bgt.n	80226c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80226ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226bc:	2b00      	cmp	r3, #0
 80226be:	f340 816c 	ble.w	802299a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 80226c2:	2d00      	cmp	r5, #0
 80226c4:	f340 80b6 	ble.w	8022834 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 80226c8:	1422      	asrs	r2, r4, #16
 80226ca:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226ce:	d428      	bmi.n	8022722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80226d0:	1c51      	adds	r1, r2, #1
 80226d2:	4588      	cmp	r8, r1
 80226d4:	dd27      	ble.n	8022726 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	db25      	blt.n	8022726 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80226da:	9808      	ldr	r0, [sp, #32]
 80226dc:	1c59      	adds	r1, r3, #1
 80226de:	4288      	cmp	r0, r1
 80226e0:	dd21      	ble.n	8022726 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80226e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80226e4:	1e6b      	subs	r3, r5, #1
 80226e6:	fb02 4203 	mla	r2, r2, r3, r4
 80226ea:	1412      	asrs	r2, r2, #16
 80226ec:	d422      	bmi.n	8022734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226ee:	3201      	adds	r2, #1
 80226f0:	4590      	cmp	r8, r2
 80226f2:	dd1f      	ble.n	8022734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226f4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80226f6:	fb02 6303 	mla	r3, r2, r3, r6
 80226fa:	141b      	asrs	r3, r3, #16
 80226fc:	d41a      	bmi.n	8022734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80226fe:	9a08      	ldr	r2, [sp, #32]
 8022700:	3301      	adds	r3, #1
 8022702:	429a      	cmp	r2, r3
 8022704:	dd16      	ble.n	8022734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022706:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802270a:	46a9      	mov	r9, r5
 802270c:	f1b9 0f00 	cmp.w	r9, #0
 8022710:	f300 80e4 	bgt.w	80228dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 8022714:	9b07      	ldr	r3, [sp, #28]
 8022716:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802271a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802271e:	9307      	str	r3, [sp, #28]
 8022720:	e08a      	b.n	8022838 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8022722:	1c51      	adds	r1, r2, #1
 8022724:	d17d      	bne.n	8022822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8022726:	4542      	cmp	r2, r8
 8022728:	da7b      	bge.n	8022822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802272a:	1c5a      	adds	r2, r3, #1
 802272c:	db79      	blt.n	8022822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 802272e:	9a08      	ldr	r2, [sp, #32]
 8022730:	4293      	cmp	r3, r2
 8022732:	da76      	bge.n	8022822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8022734:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022738:	46aa      	mov	sl, r5
 802273a:	f1ba 0f00 	cmp.w	sl, #0
 802273e:	dde9      	ble.n	8022714 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8022740:	1421      	asrs	r1, r4, #16
 8022742:	ea4f 4226 	mov.w	r2, r6, asr #16
 8022746:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802274a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802274e:	f100 80b0 	bmi.w	80228b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 8022752:	f101 0c01 	add.w	ip, r1, #1
 8022756:	45e0      	cmp	r8, ip
 8022758:	f340 80ad 	ble.w	80228b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802275c:	2a00      	cmp	r2, #0
 802275e:	f2c0 80aa 	blt.w	80228b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8022762:	9f08      	ldr	r7, [sp, #32]
 8022764:	f102 0c01 	add.w	ip, r2, #1
 8022768:	4567      	cmp	r7, ip
 802276a:	f340 80a4 	ble.w	80228b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 802276e:	fb02 1208 	mla	r2, r2, r8, r1
 8022772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022774:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 8022778:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 802277c:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8022780:	b138      	cbz	r0, 8022792 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022784:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022786:	4472      	add	r2, lr
 8022788:	f83e 7007 	ldrh.w	r7, [lr, r7]
 802278c:	8852      	ldrh	r2, [r2, #2]
 802278e:	970c      	str	r7, [sp, #48]	; 0x30
 8022790:	920d      	str	r2, [sp, #52]	; 0x34
 8022792:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 8022796:	fb13 f200 	smulbb	r2, r3, r0
 802279a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802279e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80227a2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80227a6:	10d2      	asrs	r2, r2, #3
 80227a8:	ea4e 0c0c 	orr.w	ip, lr, ip
 80227ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80227b0:	f1c0 0e10 	rsb	lr, r0, #16
 80227b4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80227b8:	ebae 0e03 	sub.w	lr, lr, r3
 80227bc:	ea4b 0101 	orr.w	r1, fp, r1
 80227c0:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 80227c4:	4359      	muls	r1, r3
 80227c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227c8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80227cc:	fb0e 1e0c 	mla	lr, lr, ip, r1
 80227d0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80227d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80227d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80227dc:	ea4c 0c03 	orr.w	ip, ip, r3
 80227e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80227e4:	041b      	lsls	r3, r3, #16
 80227e6:	fb02 ec0c 	mla	ip, r2, ip, lr
 80227ea:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227ee:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80227f2:	ea43 030e 	orr.w	r3, r3, lr
 80227f6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80227fa:	fb02 c203 	mla	r2, r2, r3, ip
 80227fe:	0d53      	lsrs	r3, r2, #21
 8022800:	0952      	lsrs	r2, r2, #5
 8022802:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022806:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802280a:	431a      	orrs	r2, r3
 802280c:	f8a9 2000 	strh.w	r2, [r9]
 8022810:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022812:	441c      	add	r4, r3
 8022814:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022816:	f109 0902 	add.w	r9, r9, #2
 802281a:	441e      	add	r6, r3
 802281c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022820:	e78b      	b.n	802273a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022822:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022824:	441c      	add	r4, r3
 8022826:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022828:	441e      	add	r6, r3
 802282a:	9b07      	ldr	r3, [sp, #28]
 802282c:	3302      	adds	r3, #2
 802282e:	3d01      	subs	r5, #1
 8022830:	9307      	str	r3, [sp, #28]
 8022832:	e746      	b.n	80226c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022834:	f47f af55 	bne.w	80226e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802283a:	2b00      	cmp	r3, #0
 802283c:	f340 80ad 	ble.w	802299a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 8022840:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022844:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022848:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802284c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802284e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022852:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022856:	eef0 6a48 	vmov.f32	s13, s16
 802285a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802285e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022862:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022866:	ee16 4a90 	vmov	r4, s13
 802286a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802286e:	eef0 6a68 	vmov.f32	s13, s17
 8022872:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022876:	ee18 2a10 	vmov	r2, s16
 802287a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802287e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022882:	ee18 2a90 	vmov	r2, s17
 8022886:	9329      	str	r3, [sp, #164]	; 0xa4
 8022888:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802288a:	fb92 f3f3 	sdiv	r3, r2, r3
 802288e:	932a      	str	r3, [sp, #168]	; 0xa8
 8022890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022892:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022894:	3b01      	subs	r3, #1
 8022896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802289a:	930b      	str	r3, [sp, #44]	; 0x2c
 802289c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802289e:	ee16 6a90 	vmov	r6, s13
 80228a2:	bf14      	ite	ne
 80228a4:	461d      	movne	r5, r3
 80228a6:	4615      	moveq	r5, r2
 80228a8:	eef0 8a67 	vmov.f32	s17, s15
 80228ac:	eeb0 8a47 	vmov.f32	s16, s14
 80228b0:	e700      	b.n	80226b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80228b2:	1c4f      	adds	r7, r1, #1
 80228b4:	d1ac      	bne.n	8022810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80228b6:	4588      	cmp	r8, r1
 80228b8:	ddaa      	ble.n	8022810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80228ba:	1c57      	adds	r7, r2, #1
 80228bc:	dba8      	blt.n	8022810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80228be:	9f08      	ldr	r7, [sp, #32]
 80228c0:	4297      	cmp	r7, r2
 80228c2:	dda5      	ble.n	8022810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80228c4:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80228c8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80228cc:	9700      	str	r7, [sp, #0]
 80228ce:	4643      	mov	r3, r8
 80228d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80228d4:	4649      	mov	r1, r9
 80228d6:	f7ff fe2f 	bl	8022538 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80228da:	e799      	b.n	8022810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80228dc:	1422      	asrs	r2, r4, #16
 80228de:	1431      	asrs	r1, r6, #16
 80228e0:	fb08 2101 	mla	r1, r8, r1, r2
 80228e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80228ec:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80228f0:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 80228f4:	8851      	ldrh	r1, [r2, #2]
 80228f6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80228fa:	f1be 0f00 	cmp.w	lr, #0
 80228fe:	d006      	beq.n	802290e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022902:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022904:	1810      	adds	r0, r2, r0
 8022906:	5bd2      	ldrh	r2, [r2, r7]
 8022908:	920e      	str	r2, [sp, #56]	; 0x38
 802290a:	8842      	ldrh	r2, [r0, #2]
 802290c:	920f      	str	r2, [sp, #60]	; 0x3c
 802290e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022912:	fb13 f20e 	smulbb	r2, r3, lr
 8022916:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802291a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802291e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022922:	10d2      	asrs	r2, r2, #3
 8022924:	ea40 000c 	orr.w	r0, r0, ip
 8022928:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802292c:	f1ce 0c10 	rsb	ip, lr, #16
 8022930:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022934:	ebac 0c03 	sub.w	ip, ip, r3
 8022938:	ea4a 0101 	orr.w	r1, sl, r1
 802293c:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 8022940:	4359      	muls	r1, r3
 8022942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022944:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022948:	fb0c 1c00 	mla	ip, ip, r0, r1
 802294c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022950:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8022954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022956:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022958:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802295c:	041b      	lsls	r3, r3, #16
 802295e:	ea4a 0000 	orr.w	r0, sl, r0
 8022962:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022966:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 802296a:	fb02 c000 	mla	r0, r2, r0, ip
 802296e:	ea43 0a0a 	orr.w	sl, r3, sl
 8022972:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8022976:	fb02 000a 	mla	r0, r2, sl, r0
 802297a:	0d43      	lsrs	r3, r0, #21
 802297c:	0940      	lsrs	r0, r0, #5
 802297e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022982:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022986:	4318      	orrs	r0, r3
 8022988:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802298a:	f82b 0b02 	strh.w	r0, [fp], #2
 802298e:	441c      	add	r4, r3
 8022990:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022992:	f109 39ff 	add.w	r9, r9, #4294967295
 8022996:	441e      	add	r6, r3
 8022998:	e6b8      	b.n	802270c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 802299a:	b013      	add	sp, #76	; 0x4c
 802299c:	ecbd 8b0a 	vpop	{d8-d12}
 80229a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080229a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80229a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229a8:	8808      	ldrh	r0, [r1, #0]
 80229aa:	b085      	sub	sp, #20
 80229ac:	1206      	asrs	r6, r0, #8
 80229ae:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80229b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80229b6:	9600      	str	r6, [sp, #0]
 80229b8:	10c6      	asrs	r6, r0, #3
 80229ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80229be:	9601      	str	r6, [sp, #4]
 80229c0:	00c0      	lsls	r0, r0, #3
 80229c2:	fb04 c603 	mla	r6, r4, r3, ip
 80229c6:	b2c0      	uxtb	r0, r0
 80229c8:	4691      	mov	r9, r2
 80229ca:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80229ce:	9a00      	ldr	r2, [sp, #0]
 80229d0:	9002      	str	r0, [sp, #8]
 80229d2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80229d6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80229da:	9a01      	ldr	r2, [sp, #4]
 80229dc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80229e0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80229e4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80229e8:	2c00      	cmp	r4, #0
 80229ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80229ee:	db3a      	blt.n	8022a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 80229f0:	45a0      	cmp	r8, r4
 80229f2:	dd38      	ble.n	8022a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 80229f4:	f1bc 0f00 	cmp.w	ip, #0
 80229f8:	db33      	blt.n	8022a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 80229fa:	4563      	cmp	r3, ip
 80229fc:	dd31      	ble.n	8022a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 80229fe:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8022a02:	f11c 0601 	adds.w	r6, ip, #1
 8022a06:	d431      	bmi.n	8022a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 8022a08:	42b3      	cmp	r3, r6
 8022a0a:	dd2f      	ble.n	8022a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 8022a0c:	b375      	cbz	r5, 8022a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 8022a0e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8022a12:	3401      	adds	r4, #1
 8022a14:	d42e      	bmi.n	8022a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8022a16:	45a0      	cmp	r8, r4
 8022a18:	dd2c      	ble.n	8022a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8022a1a:	b35f      	cbz	r7, 8022a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8022a1c:	f1bc 0f00 	cmp.w	ip, #0
 8022a20:	db26      	blt.n	8022a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8022a22:	4563      	cmp	r3, ip
 8022a24:	dd24      	ble.n	8022a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8022a26:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022a2a:	f11c 0c01 	adds.w	ip, ip, #1
 8022a2e:	d405      	bmi.n	8022a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8022a30:	4563      	cmp	r3, ip
 8022a32:	dd03      	ble.n	8022a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8022a34:	b115      	cbz	r5, 8022a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8022a36:	3301      	adds	r3, #1
 8022a38:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022a3c:	2d0f      	cmp	r5, #15
 8022a3e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022a42:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022a46:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022a4a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022a4e:	d801      	bhi.n	8022a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8022a50:	2f0f      	cmp	r7, #15
 8022a52:	d911      	bls.n	8022a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8022a54:	4b82      	ldr	r3, [pc, #520]	; (8022c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8022a56:	4a83      	ldr	r2, [pc, #524]	; (8022c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 8022a58:	4883      	ldr	r0, [pc, #524]	; (8022c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 8022a5a:	f240 210d 	movw	r1, #525	; 0x20d
 8022a5e:	f002 f9d5 	bl	8024e0c <__assert_func>
 8022a62:	4602      	mov	r2, r0
 8022a64:	e7cd      	b.n	8022a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8022a66:	4606      	mov	r6, r0
 8022a68:	4602      	mov	r2, r0
 8022a6a:	e7d2      	b.n	8022a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 8022a6c:	4606      	mov	r6, r0
 8022a6e:	e7d0      	b.n	8022a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 8022a70:	4604      	mov	r4, r0
 8022a72:	e7da      	b.n	8022a2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 8022a74:	4604      	mov	r4, r0
 8022a76:	e7e1      	b.n	8022a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8022a78:	b2ab      	uxth	r3, r5
 8022a7a:	b2bf      	uxth	r7, r7
 8022a7c:	fb03 fe07 	mul.w	lr, r3, r7
 8022a80:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022a84:	011b      	lsls	r3, r3, #4
 8022a86:	eba3 0c0e 	sub.w	ip, r3, lr
 8022a8a:	b2bf      	uxth	r7, r7
 8022a8c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022a90:	fa1f fc8c 	uxth.w	ip, ip
 8022a94:	1bed      	subs	r5, r5, r7
 8022a96:	b2ad      	uxth	r5, r5
 8022a98:	fb0c f30a 	mul.w	r3, ip, sl
 8022a9c:	fb05 330b 	mla	r3, r5, fp, r3
 8022aa0:	fb07 3309 	mla	r3, r7, r9, r3
 8022aa4:	fb0e 3308 	mla	r3, lr, r8, r3
 8022aa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022aac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022ab0:	9303      	str	r3, [sp, #12]
 8022ab2:	d018      	beq.n	8022ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8022ab4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022ab8:	fb0b f303 	mul.w	r3, fp, r3
 8022abc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ac0:	fb0b fb02 	mul.w	fp, fp, r2
 8022ac4:	0a1a      	lsrs	r2, r3, #8
 8022ac6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022aca:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022ace:	441a      	add	r2, r3
 8022ad0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022ad4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022ad8:	0a12      	lsrs	r2, r2, #8
 8022ada:	0a1b      	lsrs	r3, r3, #8
 8022adc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022ae0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ae4:	431a      	orrs	r2, r3
 8022ae6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022aea:	d019      	beq.n	8022b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8022aec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022af0:	fb0a fb0b 	mul.w	fp, sl, fp
 8022af4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022af8:	fb0a fa06 	mul.w	sl, sl, r6
 8022afc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022b00:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b08:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022b0c:	445e      	add	r6, fp
 8022b0e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022b12:	0a36      	lsrs	r6, r6, #8
 8022b14:	0a1b      	lsrs	r3, r3, #8
 8022b16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b1e:	431e      	orrs	r6, r3
 8022b20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b24:	d019      	beq.n	8022b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8022b26:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022b2a:	fb09 fa0a 	mul.w	sl, r9, sl
 8022b2e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b32:	fb09 f904 	mul.w	r9, r9, r4
 8022b36:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022b3a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b3e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b42:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022b46:	4454      	add	r4, sl
 8022b48:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022b4c:	0a24      	lsrs	r4, r4, #8
 8022b4e:	0a1b      	lsrs	r3, r3, #8
 8022b50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b58:	431c      	orrs	r4, r3
 8022b5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b5e:	d019      	beq.n	8022b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8022b60:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022b64:	fb08 f909 	mul.w	r9, r8, r9
 8022b68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b6c:	fb08 f800 	mul.w	r8, r8, r0
 8022b70:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022b74:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b78:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022b7c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022b80:	4448      	add	r0, r9
 8022b82:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022b86:	0a00      	lsrs	r0, r0, #8
 8022b88:	0a1b      	lsrs	r3, r3, #8
 8022b8a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b92:	4318      	orrs	r0, r3
 8022b94:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022b98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b9c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022ba0:	fb0c f808 	mul.w	r8, ip, r8
 8022ba4:	fb0c f606 	mul.w	r6, ip, r6
 8022ba8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022bac:	fb05 6202 	mla	r2, r5, r2, r6
 8022bb0:	fb05 8803 	mla	r8, r5, r3, r8
 8022bb4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022bb8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022bbc:	fb07 8803 	mla	r8, r7, r3, r8
 8022bc0:	fb07 2704 	mla	r7, r7, r4, r2
 8022bc4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022bc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022bcc:	fb0e 8303 	mla	r3, lr, r3, r8
 8022bd0:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022bd4:	0a1b      	lsrs	r3, r3, #8
 8022bd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bde:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8022be2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022be6:	ea43 0e0e 	orr.w	lr, r3, lr
 8022bea:	9b03      	ldr	r3, [sp, #12]
 8022bec:	b2a4      	uxth	r4, r4
 8022bee:	4363      	muls	r3, r4
 8022bf0:	1c5a      	adds	r2, r3, #1
 8022bf2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022bf6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022bfa:	9b00      	ldr	r3, [sp, #0]
 8022bfc:	b2d2      	uxtb	r2, r2
 8022bfe:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8022c02:	fb13 f302 	smulbb	r3, r3, r2
 8022c06:	fb05 3304 	mla	r3, r5, r4, r3
 8022c0a:	b29d      	uxth	r5, r3
 8022c0c:	9b01      	ldr	r3, [sp, #4]
 8022c0e:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8022c12:	fb13 f302 	smulbb	r3, r3, r2
 8022c16:	fb00 3004 	mla	r0, r0, r4, r3
 8022c1a:	9b02      	ldr	r3, [sp, #8]
 8022c1c:	fa5f fe8e 	uxtb.w	lr, lr
 8022c20:	fb13 f202 	smulbb	r2, r3, r2
 8022c24:	fb0e 2e04 	mla	lr, lr, r4, r2
 8022c28:	fa1f fe8e 	uxth.w	lr, lr
 8022c2c:	b280      	uxth	r0, r0
 8022c2e:	f10e 0201 	add.w	r2, lr, #1
 8022c32:	1c6b      	adds	r3, r5, #1
 8022c34:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022c38:	1c42      	adds	r2, r0, #1
 8022c3a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022c3e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022c42:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022c46:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022c4a:	0952      	lsrs	r2, r2, #5
 8022c4c:	ea43 030e 	orr.w	r3, r3, lr
 8022c50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c54:	4313      	orrs	r3, r2
 8022c56:	800b      	strh	r3, [r1, #0]
 8022c58:	b005      	add	sp, #20
 8022c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c5e:	bf00      	nop
 8022c60:	08054484 	.word	0x08054484
 8022c64:	080549dd 	.word	0x080549dd
 8022c68:	0805450c 	.word	0x0805450c

08022c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c70:	ed2d 8b08 	vpush	{d8-d11}
 8022c74:	b099      	sub	sp, #100	; 0x64
 8022c76:	eeb0 aa40 	vmov.f32	s20, s0
 8022c7a:	9306      	str	r3, [sp, #24]
 8022c7c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8022c80:	9307      	str	r3, [sp, #28]
 8022c82:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022c86:	9216      	str	r2, [sp, #88]	; 0x58
 8022c88:	9310      	str	r3, [sp, #64]	; 0x40
 8022c8a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022c8c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8022c90:	9113      	str	r1, [sp, #76]	; 0x4c
 8022c92:	9315      	str	r3, [sp, #84]	; 0x54
 8022c94:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022c98:	9017      	str	r0, [sp, #92]	; 0x5c
 8022c9a:	6850      	ldr	r0, [r2, #4]
 8022c9c:	6812      	ldr	r2, [r2, #0]
 8022c9e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022ca0:	fb00 1303 	mla	r3, r0, r3, r1
 8022ca4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8022caa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022cac:	681b      	ldr	r3, [r3, #0]
 8022cae:	9312      	str	r3, [sp, #72]	; 0x48
 8022cb0:	9b07      	ldr	r3, [sp, #28]
 8022cb2:	009b      	lsls	r3, r3, #2
 8022cb4:	eef0 9a60 	vmov.f32	s19, s1
 8022cb8:	eeb0 9a41 	vmov.f32	s18, s2
 8022cbc:	eeb0 8a62 	vmov.f32	s16, s5
 8022cc0:	eef0 8a43 	vmov.f32	s17, s6
 8022cc4:	eef0 ba44 	vmov.f32	s23, s8
 8022cc8:	eeb0 ba64 	vmov.f32	s22, s9
 8022ccc:	eef0 aa45 	vmov.f32	s21, s10
 8022cd0:	930e      	str	r3, [sp, #56]	; 0x38
 8022cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	dc03      	bgt.n	8022ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	f340 8352 	ble.w	8023384 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8022ce0:	9b06      	ldr	r3, [sp, #24]
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	f340 81a8 	ble.w	8023038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 8022ce8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cea:	1412      	asrs	r2, r2, #16
 8022cec:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022cf0:	d430      	bmi.n	8022d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022cf2:	9807      	ldr	r0, [sp, #28]
 8022cf4:	1c51      	adds	r1, r2, #1
 8022cf6:	4288      	cmp	r0, r1
 8022cf8:	dd2f      	ble.n	8022d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	db2d      	blt.n	8022d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022cfe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022d00:	1c59      	adds	r1, r3, #1
 8022d02:	4288      	cmp	r0, r1
 8022d04:	dd29      	ble.n	8022d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022d06:	9b06      	ldr	r3, [sp, #24]
 8022d08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022d0a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022d0c:	3b01      	subs	r3, #1
 8022d0e:	fb02 1203 	mla	r2, r2, r3, r1
 8022d12:	1412      	asrs	r2, r2, #16
 8022d14:	d42c      	bmi.n	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d16:	9907      	ldr	r1, [sp, #28]
 8022d18:	3201      	adds	r2, #1
 8022d1a:	4291      	cmp	r1, r2
 8022d1c:	dd28      	ble.n	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022d20:	fb02 4303 	mla	r3, r2, r3, r4
 8022d24:	141b      	asrs	r3, r3, #16
 8022d26:	d423      	bmi.n	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d2a:	3301      	adds	r3, #1
 8022d2c:	429a      	cmp	r2, r3
 8022d2e:	dd1f      	ble.n	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d30:	9b06      	ldr	r3, [sp, #24]
 8022d32:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8022d36:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8022d3a:	9311      	str	r3, [sp, #68]	; 0x44
 8022d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d3e:	2b00      	cmp	r3, #0
 8022d40:	f300 81e3 	bgt.w	802310a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 8022d44:	9b06      	ldr	r3, [sp, #24]
 8022d46:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d4c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022d50:	930a      	str	r3, [sp, #40]	; 0x28
 8022d52:	e173      	b.n	802303c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022d54:	1c51      	adds	r1, r2, #1
 8022d56:	f040 8162 	bne.w	802301e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d5a:	9907      	ldr	r1, [sp, #28]
 8022d5c:	428a      	cmp	r2, r1
 8022d5e:	f280 815e 	bge.w	802301e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d62:	1c5f      	adds	r7, r3, #1
 8022d64:	f2c0 815b 	blt.w	802301e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d6a:	4293      	cmp	r3, r2
 8022d6c:	f280 8157 	bge.w	802301e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 8022d70:	9b06      	ldr	r3, [sp, #24]
 8022d72:	9314      	str	r3, [sp, #80]	; 0x50
 8022d74:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8022d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d7a:	9311      	str	r3, [sp, #68]	; 0x44
 8022d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	dde0      	ble.n	8022d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022d82:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d84:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022d88:	1412      	asrs	r2, r2, #16
 8022d8a:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022d8e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022d92:	f100 81a1 	bmi.w	80230d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 8022d96:	9e07      	ldr	r6, [sp, #28]
 8022d98:	1c55      	adds	r5, r2, #1
 8022d9a:	42ae      	cmp	r6, r5
 8022d9c:	f340 819e 	ble.w	80230dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	f2c0 819b 	blt.w	80230dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022da6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022da8:	1c5d      	adds	r5, r3, #1
 8022daa:	42ae      	cmp	r6, r5
 8022dac:	f340 8196 	ble.w	80230dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8022db0:	9d07      	ldr	r5, [sp, #28]
 8022db2:	fb03 2305 	mla	r3, r3, r5, r2
 8022db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022db8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022dc0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022dc4:	2800      	cmp	r0, #0
 8022dc6:	f000 8178 	beq.w	80230ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8022dca:	686a      	ldr	r2, [r5, #4]
 8022dcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8022dce:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022dd2:	2900      	cmp	r1, #0
 8022dd4:	f000 817a 	beq.w	80230cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8022dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022dda:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8022ddc:	18aa      	adds	r2, r5, r2
 8022dde:	59ad      	ldr	r5, [r5, r6]
 8022de0:	6852      	ldr	r2, [r2, #4]
 8022de2:	9508      	str	r5, [sp, #32]
 8022de4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022de8:	920c      	str	r2, [sp, #48]	; 0x30
 8022dea:	0e15      	lsrs	r5, r2, #24
 8022dec:	b280      	uxth	r0, r0
 8022dee:	b289      	uxth	r1, r1
 8022df0:	fb00 fb01 	mul.w	fp, r0, r1
 8022df4:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022df8:	0100      	lsls	r0, r0, #4
 8022dfa:	eba0 090b 	sub.w	r9, r0, fp
 8022dfe:	b289      	uxth	r1, r1
 8022e00:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022e04:	fa1f f989 	uxth.w	r9, r9
 8022e08:	1a52      	subs	r2, r2, r1
 8022e0a:	b292      	uxth	r2, r2
 8022e0c:	fb09 f008 	mul.w	r0, r9, r8
 8022e10:	fb02 000c 	mla	r0, r2, ip, r0
 8022e14:	fb01 000a 	mla	r0, r1, sl, r0
 8022e18:	fb0b 0005 	mla	r0, fp, r5, r0
 8022e1c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022e20:	2800      	cmp	r0, #0
 8022e22:	f000 80ef 	beq.w	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8022e26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022e2a:	d01b      	beq.n	8022e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 8022e2c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022e30:	fb0c fe0e 	mul.w	lr, ip, lr
 8022e34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e38:	fb0c fc03 	mul.w	ip, ip, r3
 8022e3c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022e40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e44:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e48:	4473      	add	r3, lr
 8022e4a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022e4e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022e52:	0a1b      	lsrs	r3, r3, #8
 8022e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e5c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e60:	ea43 030e 	orr.w	r3, r3, lr
 8022e64:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022e68:	d01e      	beq.n	8022ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8022e6a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022e6c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022e70:	fb08 fc0c 	mul.w	ip, r8, ip
 8022e74:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 8022e78:	fb08 f80e 	mul.w	r8, r8, lr
 8022e7c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e84:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e88:	44e6      	add	lr, ip
 8022e8a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022e8e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022e92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e96:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022e9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e9e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022ea2:	ea4e 0608 	orr.w	r6, lr, r8
 8022ea6:	960b      	str	r6, [sp, #44]	; 0x2c
 8022ea8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022eac:	d01e      	beq.n	8022eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8022eae:	9e08      	ldr	r6, [sp, #32]
 8022eb0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022eb4:	fb0a f808 	mul.w	r8, sl, r8
 8022eb8:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022ebc:	fb0a fa0c 	mul.w	sl, sl, ip
 8022ec0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022ec4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ec8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022ecc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ed0:	44c6      	add	lr, r8
 8022ed2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022ed6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022eda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ede:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ee6:	ea4e 060a 	orr.w	r6, lr, sl
 8022eea:	9608      	str	r6, [sp, #32]
 8022eec:	2dff      	cmp	r5, #255	; 0xff
 8022eee:	d01d      	beq.n	8022f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 8022ef0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022ef2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022ef6:	fb05 f808 	mul.w	r8, r5, r8
 8022efa:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022efe:	fb05 f50c 	mul.w	r5, r5, ip
 8022f02:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022f06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f0a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022f0e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022f12:	44c6      	add	lr, r8
 8022f14:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022f18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f1c:	0a2d      	lsrs	r5, r5, #8
 8022f1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f22:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022f26:	ea4e 0505 	orr.w	r5, lr, r5
 8022f2a:	950c      	str	r5, [sp, #48]	; 0x30
 8022f2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022f2e:	9e08      	ldr	r6, [sp, #32]
 8022f30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022f38:	fb09 f505 	mul.w	r5, r9, r5
 8022f3c:	fb02 550c 	mla	r5, r2, ip, r5
 8022f40:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022f44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022f46:	fb01 550c 	mla	r5, r1, ip, r5
 8022f4a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022f4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022f50:	fb0b 550c 	mla	r5, fp, ip, r5
 8022f54:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8022f58:	fb09 f90c 	mul.w	r9, r9, ip
 8022f5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f60:	fb02 9303 	mla	r3, r2, r3, r9
 8022f64:	9a08      	ldr	r2, [sp, #32]
 8022f66:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f6c:	fb01 330e 	mla	r3, r1, lr, r3
 8022f70:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022f74:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f7a:	0a2d      	lsrs	r5, r5, #8
 8022f7c:	f8b3 c000 	ldrh.w	ip, [r3]
 8022f80:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022f84:	fb00 f307 	mul.w	r3, r0, r7
 8022f88:	1c58      	adds	r0, r3, #1
 8022f8a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f8e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022f92:	ea45 050b 	orr.w	r5, r5, fp
 8022f96:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022f9a:	0c29      	lsrs	r1, r5, #16
 8022f9c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022fa0:	ea4f 232c 	mov.w	r3, ip, asr #8
 8022fa4:	b2c0      	uxtb	r0, r0
 8022fa6:	fb11 f107 	smulbb	r1, r1, r7
 8022faa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022fae:	fb03 1300 	mla	r3, r3, r0, r1
 8022fb2:	b299      	uxth	r1, r3
 8022fb4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022fb8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022fbc:	fb13 f307 	smulbb	r3, r3, r7
 8022fc0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022fc4:	fb02 3200 	mla	r2, r2, r0, r3
 8022fc8:	b2ed      	uxtb	r5, r5
 8022fca:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022fce:	b2db      	uxtb	r3, r3
 8022fd0:	fb15 f507 	smulbb	r5, r5, r7
 8022fd4:	fb03 5500 	mla	r5, r3, r0, r5
 8022fd8:	b292      	uxth	r2, r2
 8022fda:	b2ad      	uxth	r5, r5
 8022fdc:	1c4b      	adds	r3, r1, #1
 8022fde:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022fe2:	1c68      	adds	r0, r5, #1
 8022fe4:	1c51      	adds	r1, r2, #1
 8022fe6:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8022fea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022fee:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022ff2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022ff6:	0952      	lsrs	r2, r2, #5
 8022ff8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ffc:	432b      	orrs	r3, r5
 8022ffe:	4313      	orrs	r3, r2
 8023000:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023002:	8013      	strh	r3, [r2, #0]
 8023004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023006:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023008:	3302      	adds	r3, #2
 802300a:	9311      	str	r3, [sp, #68]	; 0x44
 802300c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802300e:	4413      	add	r3, r2
 8023010:	932b      	str	r3, [sp, #172]	; 0xac
 8023012:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023014:	441c      	add	r4, r3
 8023016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023018:	3b01      	subs	r3, #1
 802301a:	9314      	str	r3, [sp, #80]	; 0x50
 802301c:	e6ae      	b.n	8022d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802301e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023020:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023022:	4413      	add	r3, r2
 8023024:	932b      	str	r3, [sp, #172]	; 0xac
 8023026:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023028:	441c      	add	r4, r3
 802302a:	9b06      	ldr	r3, [sp, #24]
 802302c:	3b01      	subs	r3, #1
 802302e:	9306      	str	r3, [sp, #24]
 8023030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023032:	3302      	adds	r3, #2
 8023034:	930a      	str	r3, [sp, #40]	; 0x28
 8023036:	e653      	b.n	8022ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8023038:	f47f ae65 	bne.w	8022d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802303c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802303e:	2b00      	cmp	r3, #0
 8023040:	f340 81a0 	ble.w	8023384 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8023044:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802304c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023052:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023056:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802305a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802305e:	eef0 6a48 	vmov.f32	s13, s16
 8023062:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023066:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802306a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802306e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8023072:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023076:	eef0 6a68 	vmov.f32	s13, s17
 802307a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802307e:	ee18 2a10 	vmov	r2, s16
 8023082:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023086:	fb92 f3f3 	sdiv	r3, r2, r3
 802308a:	ee18 2a90 	vmov	r2, s17
 802308e:	932d      	str	r3, [sp, #180]	; 0xb4
 8023090:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023092:	fb92 f3f3 	sdiv	r3, r2, r3
 8023096:	932e      	str	r3, [sp, #184]	; 0xb8
 8023098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802309a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802309c:	3b01      	subs	r3, #1
 802309e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80230a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80230a6:	bf08      	it	eq
 80230a8:	4613      	moveq	r3, r2
 80230aa:	ee16 4a90 	vmov	r4, s13
 80230ae:	9306      	str	r3, [sp, #24]
 80230b0:	eef0 8a67 	vmov.f32	s17, s15
 80230b4:	eeb0 8a47 	vmov.f32	s16, s14
 80230b8:	e60b      	b.n	8022cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80230ba:	b151      	cbz	r1, 80230d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80230bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230be:	58aa      	ldr	r2, [r5, r2]
 80230c0:	9208      	str	r2, [sp, #32]
 80230c2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80230c6:	25ff      	movs	r5, #255	; 0xff
 80230c8:	46a8      	mov	r8, r5
 80230ca:	e68f      	b.n	8022dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 80230cc:	25ff      	movs	r5, #255	; 0xff
 80230ce:	46aa      	mov	sl, r5
 80230d0:	e68c      	b.n	8022dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 80230d2:	25ff      	movs	r5, #255	; 0xff
 80230d4:	46aa      	mov	sl, r5
 80230d6:	e7f7      	b.n	80230c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80230d8:	1c56      	adds	r6, r2, #1
 80230da:	d193      	bne.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230dc:	9d07      	ldr	r5, [sp, #28]
 80230de:	4295      	cmp	r5, r2
 80230e0:	dd90      	ble.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230e2:	1c5d      	adds	r5, r3, #1
 80230e4:	db8e      	blt.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80230e8:	429d      	cmp	r5, r3
 80230ea:	dd8b      	ble.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80230ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80230ee:	9201      	str	r2, [sp, #4]
 80230f0:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80230f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80230f6:	9300      	str	r3, [sp, #0]
 80230f8:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80230fc:	9b07      	ldr	r3, [sp, #28]
 80230fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023100:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8023104:	f7ff fc4e 	bl	80229a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023108:	e77c      	b.n	8023004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802310a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802310c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802310e:	9d07      	ldr	r5, [sp, #28]
 8023110:	1412      	asrs	r2, r2, #16
 8023112:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023116:	1423      	asrs	r3, r4, #16
 8023118:	fb05 2303 	mla	r3, r5, r3, r2
 802311c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802311e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023126:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802312a:	0e1e      	lsrs	r6, r3, #24
 802312c:	2900      	cmp	r1, #0
 802312e:	f000 811a 	beq.w	8023366 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 8023132:	686a      	ldr	r2, [r5, #4]
 8023134:	920d      	str	r2, [sp, #52]	; 0x34
 8023136:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802313a:	2800      	cmp	r0, #0
 802313c:	f000 811c 	beq.w	8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 8023140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023142:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023144:	18aa      	adds	r2, r5, r2
 8023146:	59ed      	ldr	r5, [r5, r7]
 8023148:	6852      	ldr	r2, [r2, #4]
 802314a:	9509      	str	r5, [sp, #36]	; 0x24
 802314c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8023150:	920f      	str	r2, [sp, #60]	; 0x3c
 8023152:	0e15      	lsrs	r5, r2, #24
 8023154:	b289      	uxth	r1, r1
 8023156:	b280      	uxth	r0, r0
 8023158:	fb01 f900 	mul.w	r9, r1, r0
 802315c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023160:	0109      	lsls	r1, r1, #4
 8023162:	eba1 0e09 	sub.w	lr, r1, r9
 8023166:	b280      	uxth	r0, r0
 8023168:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802316c:	fa1f fe8e 	uxth.w	lr, lr
 8023170:	1a12      	subs	r2, r2, r0
 8023172:	b292      	uxth	r2, r2
 8023174:	fb0e f10c 	mul.w	r1, lr, ip
 8023178:	fb02 1106 	mla	r1, r2, r6, r1
 802317c:	fb00 1108 	mla	r1, r0, r8, r1
 8023180:	fb09 1105 	mla	r1, r9, r5, r1
 8023184:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023188:	2900      	cmp	r1, #0
 802318a:	f000 80e0 	beq.w	802334e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 802318e:	2eff      	cmp	r6, #255	; 0xff
 8023190:	d016      	beq.n	80231c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 8023192:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023196:	4377      	muls	r7, r6
 8023198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802319c:	435e      	muls	r6, r3
 802319e:	0a3b      	lsrs	r3, r7, #8
 80231a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80231a8:	443b      	add	r3, r7
 80231aa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80231ae:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80231b2:	0a1b      	lsrs	r3, r3, #8
 80231b4:	0a3f      	lsrs	r7, r7, #8
 80231b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80231be:	433b      	orrs	r3, r7
 80231c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80231c4:	d01d      	beq.n	8023202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 80231c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80231c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80231ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231ce:	fb0c f606 	mul.w	r6, ip, r6
 80231d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80231d6:	fb0c fc07 	mul.w	ip, ip, r7
 80231da:	0a37      	lsrs	r7, r6, #8
 80231dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231e0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80231e4:	4437      	add	r7, r6
 80231e6:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80231ea:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80231ee:	0a3f      	lsrs	r7, r7, #8
 80231f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80231fc:	ea47 060c 	orr.w	r6, r7, ip
 8023200:	960d      	str	r6, [sp, #52]	; 0x34
 8023202:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023206:	d01d      	beq.n	8023244 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 8023208:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802320a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802320e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023212:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023216:	fb08 f806 	mul.w	r8, r8, r6
 802321a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802321e:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8023222:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023226:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802322a:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 802322e:	4467      	add	r7, ip
 8023230:	0a3f      	lsrs	r7, r7, #8
 8023232:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023236:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802323a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802323e:	ea47 0608 	orr.w	r6, r7, r8
 8023242:	9609      	str	r6, [sp, #36]	; 0x24
 8023244:	2dff      	cmp	r5, #255	; 0xff
 8023246:	d01a      	beq.n	802327e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 8023248:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802324a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802324e:	fb05 fc0c 	mul.w	ip, r5, ip
 8023252:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023256:	4375      	muls	r5, r6
 8023258:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802325c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023260:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023264:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023268:	4467      	add	r7, ip
 802326a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802326e:	0a3f      	lsrs	r7, r7, #8
 8023270:	0a2d      	lsrs	r5, r5, #8
 8023272:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023276:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802327a:	433d      	orrs	r5, r7
 802327c:	950f      	str	r5, [sp, #60]	; 0x3c
 802327e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023280:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023284:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8023288:	fb0e f505 	mul.w	r5, lr, r5
 802328c:	fb02 5506 	mla	r5, r2, r6, r5
 8023290:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023292:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023296:	fb00 5506 	mla	r5, r0, r6, r5
 802329a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802329c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80232a0:	fb09 5506 	mla	r5, r9, r6, r5
 80232a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80232a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80232aa:	fb0e fe06 	mul.w	lr, lr, r6
 80232ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232b2:	fb02 e303 	mla	r3, r2, r3, lr
 80232b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232b8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80232bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80232be:	fb00 3307 	mla	r3, r0, r7, r3
 80232c2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80232c6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80232ca:	fb01 f10b 	mul.w	r1, r1, fp
 80232ce:	0a2d      	lsrs	r5, r5, #8
 80232d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232d4:	f8ba 0000 	ldrh.w	r0, [sl]
 80232d8:	1c4b      	adds	r3, r1, #1
 80232da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80232de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80232e2:	ea45 050c 	orr.w	r5, r5, ip
 80232e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80232ea:	1202      	asrs	r2, r0, #8
 80232ec:	0c2b      	lsrs	r3, r5, #16
 80232ee:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80232f2:	b2c9      	uxtb	r1, r1
 80232f4:	fb13 f30b 	smulbb	r3, r3, fp
 80232f8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80232fc:	fb02 3201 	mla	r2, r2, r1, r3
 8023300:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8023304:	10c3      	asrs	r3, r0, #3
 8023306:	b2ed      	uxtb	r5, r5
 8023308:	00c0      	lsls	r0, r0, #3
 802330a:	b2c0      	uxtb	r0, r0
 802330c:	fb15 f50b 	smulbb	r5, r5, fp
 8023310:	fb00 5001 	mla	r0, r0, r1, r5
 8023314:	b292      	uxth	r2, r2
 8023316:	fb16 f60b 	smulbb	r6, r6, fp
 802331a:	b280      	uxth	r0, r0
 802331c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023320:	fb03 6301 	mla	r3, r3, r1, r6
 8023324:	1c51      	adds	r1, r2, #1
 8023326:	1c46      	adds	r6, r0, #1
 8023328:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802332c:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8023330:	b29b      	uxth	r3, r3
 8023332:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023336:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802333a:	4332      	orrs	r2, r6
 802333c:	1c5e      	adds	r6, r3, #1
 802333e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023342:	095b      	lsrs	r3, r3, #5
 8023344:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023348:	431a      	orrs	r2, r3
 802334a:	f8aa 2000 	strh.w	r2, [sl]
 802334e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023350:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023352:	4413      	add	r3, r2
 8023354:	932b      	str	r3, [sp, #172]	; 0xac
 8023356:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023358:	441c      	add	r4, r3
 802335a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802335c:	3b01      	subs	r3, #1
 802335e:	f10a 0a02 	add.w	sl, sl, #2
 8023362:	9311      	str	r3, [sp, #68]	; 0x44
 8023364:	e4ea      	b.n	8022d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8023366:	b150      	cbz	r0, 802337e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 8023368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802336a:	58aa      	ldr	r2, [r5, r2]
 802336c:	9209      	str	r2, [sp, #36]	; 0x24
 802336e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023372:	25ff      	movs	r5, #255	; 0xff
 8023374:	46ac      	mov	ip, r5
 8023376:	e6ed      	b.n	8023154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8023378:	25ff      	movs	r5, #255	; 0xff
 802337a:	46a8      	mov	r8, r5
 802337c:	e6ea      	b.n	8023154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 802337e:	25ff      	movs	r5, #255	; 0xff
 8023380:	46a8      	mov	r8, r5
 8023382:	e7f7      	b.n	8023374 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 8023384:	b019      	add	sp, #100	; 0x64
 8023386:	ecbd 8b08 	vpop	{d8-d11}
 802338a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023394:	8808      	ldrh	r0, [r1, #0]
 8023396:	b085      	sub	sp, #20
 8023398:	1206      	asrs	r6, r0, #8
 802339a:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802339e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80233a2:	9600      	str	r6, [sp, #0]
 80233a4:	10c6      	asrs	r6, r0, #3
 80233a6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80233aa:	9601      	str	r6, [sp, #4]
 80233ac:	00c0      	lsls	r0, r0, #3
 80233ae:	fb04 c603 	mla	r6, r4, r3, ip
 80233b2:	b2c0      	uxtb	r0, r0
 80233b4:	4691      	mov	r9, r2
 80233b6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80233ba:	9a00      	ldr	r2, [sp, #0]
 80233bc:	9002      	str	r0, [sp, #8]
 80233be:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80233c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80233c6:	9a01      	ldr	r2, [sp, #4]
 80233c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80233cc:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80233d0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80233d4:	2c00      	cmp	r4, #0
 80233d6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80233da:	db3a      	blt.n	8023452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 80233dc:	45a0      	cmp	r8, r4
 80233de:	dd38      	ble.n	8023452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 80233e0:	f1bc 0f00 	cmp.w	ip, #0
 80233e4:	db33      	blt.n	802344e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 80233e6:	4563      	cmp	r3, ip
 80233e8:	dd31      	ble.n	802344e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 80233ea:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80233ee:	f11c 0601 	adds.w	r6, ip, #1
 80233f2:	d431      	bmi.n	8023458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233f4:	42b3      	cmp	r3, r6
 80233f6:	dd2f      	ble.n	8023458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233f8:	b375      	cbz	r5, 8023458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80233fa:	f8de 6004 	ldr.w	r6, [lr, #4]
 80233fe:	3401      	adds	r4, #1
 8023400:	d42e      	bmi.n	8023460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8023402:	45a0      	cmp	r8, r4
 8023404:	dd2c      	ble.n	8023460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8023406:	b35f      	cbz	r7, 8023460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8023408:	f1bc 0f00 	cmp.w	ip, #0
 802340c:	db26      	blt.n	802345c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 802340e:	4563      	cmp	r3, ip
 8023410:	dd24      	ble.n	802345c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8023412:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023416:	f11c 0c01 	adds.w	ip, ip, #1
 802341a:	d405      	bmi.n	8023428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 802341c:	4563      	cmp	r3, ip
 802341e:	dd03      	ble.n	8023428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8023420:	b115      	cbz	r5, 8023428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8023422:	3301      	adds	r3, #1
 8023424:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023428:	2d0f      	cmp	r5, #15
 802342a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802342e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023432:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023436:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802343a:	d801      	bhi.n	8023440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 802343c:	2f0f      	cmp	r7, #15
 802343e:	d911      	bls.n	8023464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8023440:	4b7b      	ldr	r3, [pc, #492]	; (8023630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8023442:	4a7c      	ldr	r2, [pc, #496]	; (8023634 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8023444:	487c      	ldr	r0, [pc, #496]	; (8023638 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 8023446:	f240 210d 	movw	r1, #525	; 0x20d
 802344a:	f001 fcdf 	bl	8024e0c <__assert_func>
 802344e:	4602      	mov	r2, r0
 8023450:	e7cd      	b.n	80233ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8023452:	4606      	mov	r6, r0
 8023454:	4602      	mov	r2, r0
 8023456:	e7d2      	b.n	80233fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 8023458:	4606      	mov	r6, r0
 802345a:	e7d0      	b.n	80233fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 802345c:	4604      	mov	r4, r0
 802345e:	e7da      	b.n	8023416 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 8023460:	4604      	mov	r4, r0
 8023462:	e7e1      	b.n	8023428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8023464:	b2ab      	uxth	r3, r5
 8023466:	b2bf      	uxth	r7, r7
 8023468:	fb03 fe07 	mul.w	lr, r3, r7
 802346c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023470:	011b      	lsls	r3, r3, #4
 8023472:	eba3 0c0e 	sub.w	ip, r3, lr
 8023476:	b2bf      	uxth	r7, r7
 8023478:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802347c:	fa1f fc8c 	uxth.w	ip, ip
 8023480:	1bed      	subs	r5, r5, r7
 8023482:	b2ad      	uxth	r5, r5
 8023484:	fb0c f30a 	mul.w	r3, ip, sl
 8023488:	fb05 330b 	mla	r3, r5, fp, r3
 802348c:	fb07 3309 	mla	r3, r7, r9, r3
 8023490:	fb0e 3308 	mla	r3, lr, r8, r3
 8023494:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023498:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802349c:	9303      	str	r3, [sp, #12]
 802349e:	d018      	beq.n	80234d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 80234a0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80234a4:	fb0b f303 	mul.w	r3, fp, r3
 80234a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80234ac:	fb0b fb02 	mul.w	fp, fp, r2
 80234b0:	0a1a      	lsrs	r2, r3, #8
 80234b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80234b6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80234ba:	441a      	add	r2, r3
 80234bc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80234c0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80234c4:	0a12      	lsrs	r2, r2, #8
 80234c6:	0a1b      	lsrs	r3, r3, #8
 80234c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80234cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234d0:	431a      	orrs	r2, r3
 80234d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80234d6:	d019      	beq.n	802350c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 80234d8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80234dc:	fb0a fb0b 	mul.w	fp, sl, fp
 80234e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80234e4:	fb0a fa06 	mul.w	sl, sl, r6
 80234e8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80234ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234f4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80234f8:	445e      	add	r6, fp
 80234fa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80234fe:	0a36      	lsrs	r6, r6, #8
 8023500:	0a1b      	lsrs	r3, r3, #8
 8023502:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802350a:	431e      	orrs	r6, r3
 802350c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023510:	d019      	beq.n	8023546 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 8023512:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023516:	fb09 fa0a 	mul.w	sl, r9, sl
 802351a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802351e:	fb09 f904 	mul.w	r9, r9, r4
 8023522:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023526:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802352a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802352e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023532:	4454      	add	r4, sl
 8023534:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023538:	0a24      	lsrs	r4, r4, #8
 802353a:	0a1b      	lsrs	r3, r3, #8
 802353c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023540:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023544:	431c      	orrs	r4, r3
 8023546:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802354a:	d019      	beq.n	8023580 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 802354c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023550:	fb08 f909 	mul.w	r9, r8, r9
 8023554:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023558:	fb08 f800 	mul.w	r8, r8, r0
 802355c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023560:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023564:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023568:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802356c:	4448      	add	r0, r9
 802356e:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023572:	0a00      	lsrs	r0, r0, #8
 8023574:	0a1b      	lsrs	r3, r3, #8
 8023576:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802357a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802357e:	4318      	orrs	r0, r3
 8023580:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023584:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023588:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802358c:	fb0c f808 	mul.w	r8, ip, r8
 8023590:	fb0c f606 	mul.w	r6, ip, r6
 8023594:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023598:	fb05 8803 	mla	r8, r5, r3, r8
 802359c:	fb05 6202 	mla	r2, r5, r2, r6
 80235a0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80235a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80235a8:	fb07 8803 	mla	r8, r7, r3, r8
 80235ac:	fb07 2704 	mla	r7, r7, r4, r2
 80235b0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80235b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80235b8:	fb0e 8303 	mla	r3, lr, r3, r8
 80235bc:	fb0e 7e00 	mla	lr, lr, r0, r7
 80235c0:	0a1b      	lsrs	r3, r3, #8
 80235c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80235ca:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80235ce:	ea43 0e0e 	orr.w	lr, r3, lr
 80235d2:	9b03      	ldr	r3, [sp, #12]
 80235d4:	9800      	ldr	r0, [sp, #0]
 80235d6:	9c01      	ldr	r4, [sp, #4]
 80235d8:	9a02      	ldr	r2, [sp, #8]
 80235da:	43db      	mvns	r3, r3
 80235dc:	b2db      	uxtb	r3, r3
 80235de:	4358      	muls	r0, r3
 80235e0:	435c      	muls	r4, r3
 80235e2:	435a      	muls	r2, r3
 80235e4:	1c43      	adds	r3, r0, #1
 80235e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80235ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80235ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80235f2:	4b12      	ldr	r3, [pc, #72]	; (802363c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 80235f4:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 80235f8:	1c50      	adds	r0, r2, #1
 80235fa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80235fe:	fa5f f28e 	uxtb.w	r2, lr
 8023602:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023606:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802360a:	1c62      	adds	r2, r4, #1
 802360c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023610:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023614:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8023618:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802361c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023620:	ea43 0e0e 	orr.w	lr, r3, lr
 8023624:	f8a1 e000 	strh.w	lr, [r1]
 8023628:	b005      	add	sp, #20
 802362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802362e:	bf00      	nop
 8023630:	08054484 	.word	0x08054484
 8023634:	080549dd 	.word	0x080549dd
 8023638:	0805450c 	.word	0x0805450c
 802363c:	fffff800 	.word	0xfffff800

08023640 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023644:	ed2d 8b08 	vpush	{d8-d11}
 8023648:	b097      	sub	sp, #92	; 0x5c
 802364a:	eeb0 aa40 	vmov.f32	s20, s0
 802364e:	9306      	str	r3, [sp, #24]
 8023650:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8023654:	9307      	str	r3, [sp, #28]
 8023656:	9214      	str	r2, [sp, #80]	; 0x50
 8023658:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802365c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802365e:	9112      	str	r1, [sp, #72]	; 0x48
 8023660:	9310      	str	r3, [sp, #64]	; 0x40
 8023662:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023666:	9015      	str	r0, [sp, #84]	; 0x54
 8023668:	6850      	ldr	r0, [r2, #4]
 802366a:	6812      	ldr	r2, [r2, #0]
 802366c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802366e:	fb00 1303 	mla	r3, r0, r3, r1
 8023672:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023676:	930a      	str	r3, [sp, #40]	; 0x28
 8023678:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	9311      	str	r3, [sp, #68]	; 0x44
 802367e:	9b07      	ldr	r3, [sp, #28]
 8023680:	009b      	lsls	r3, r3, #2
 8023682:	eef0 9a60 	vmov.f32	s19, s1
 8023686:	eeb0 9a41 	vmov.f32	s18, s2
 802368a:	eeb0 8a62 	vmov.f32	s16, s5
 802368e:	eef0 8a43 	vmov.f32	s17, s6
 8023692:	eef0 ba44 	vmov.f32	s23, s8
 8023696:	eeb0 ba64 	vmov.f32	s22, s9
 802369a:	eef0 aa45 	vmov.f32	s21, s10
 802369e:	930e      	str	r3, [sp, #56]	; 0x38
 80236a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	dc03      	bgt.n	80236ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80236a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	f340 8361 	ble.w	8023d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 80236ae:	9b06      	ldr	r3, [sp, #24]
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	f340 819b 	ble.w	80239ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80236b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80236b8:	1412      	asrs	r2, r2, #16
 80236ba:	ea4f 4325 	mov.w	r3, r5, asr #16
 80236be:	d42e      	bmi.n	802371e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80236c0:	9807      	ldr	r0, [sp, #28]
 80236c2:	1c51      	adds	r1, r2, #1
 80236c4:	4288      	cmp	r0, r1
 80236c6:	dd2d      	ble.n	8023724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	db2b      	blt.n	8023724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80236ce:	1c59      	adds	r1, r3, #1
 80236d0:	4288      	cmp	r0, r1
 80236d2:	dd27      	ble.n	8023724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236d4:	9b06      	ldr	r3, [sp, #24]
 80236d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80236d8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80236da:	3b01      	subs	r3, #1
 80236dc:	fb02 1203 	mla	r2, r2, r3, r1
 80236e0:	1412      	asrs	r2, r2, #16
 80236e2:	d42a      	bmi.n	802373a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236e4:	9907      	ldr	r1, [sp, #28]
 80236e6:	3201      	adds	r2, #1
 80236e8:	4291      	cmp	r1, r2
 80236ea:	dd26      	ble.n	802373a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80236ee:	fb02 5303 	mla	r3, r2, r3, r5
 80236f2:	141b      	asrs	r3, r3, #16
 80236f4:	d421      	bmi.n	802373a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236f8:	3301      	adds	r3, #1
 80236fa:	429a      	cmp	r2, r3
 80236fc:	dd1d      	ble.n	802373a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80236fe:	9b06      	ldr	r3, [sp, #24]
 8023700:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8023704:	9313      	str	r3, [sp, #76]	; 0x4c
 8023706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023708:	2b00      	cmp	r3, #0
 802370a:	f300 81e3 	bgt.w	8023ad4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802370e:	9b06      	ldr	r3, [sp, #24]
 8023710:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023716:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802371a:	930a      	str	r3, [sp, #40]	; 0x28
 802371c:	e168      	b.n	80239f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802371e:	1c51      	adds	r1, r2, #1
 8023720:	f040 8157 	bne.w	80239d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023724:	9907      	ldr	r1, [sp, #28]
 8023726:	428a      	cmp	r2, r1
 8023728:	f280 8153 	bge.w	80239d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802372c:	1c5f      	adds	r7, r3, #1
 802372e:	f2c0 8150 	blt.w	80239d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023732:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023734:	4293      	cmp	r3, r2
 8023736:	f280 814c 	bge.w	80239d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802373a:	9b06      	ldr	r3, [sp, #24]
 802373c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802373e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023742:	2b00      	cmp	r3, #0
 8023744:	dde3      	ble.n	802370e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8023746:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023748:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802374a:	1409      	asrs	r1, r1, #16
 802374c:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023750:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8023754:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023758:	f100 81a3 	bmi.w	8023aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802375c:	9c07      	ldr	r4, [sp, #28]
 802375e:	1c4e      	adds	r6, r1, #1
 8023760:	42b4      	cmp	r4, r6
 8023762:	f340 81a0 	ble.w	8023aa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023766:	2b00      	cmp	r3, #0
 8023768:	f2c0 819d 	blt.w	8023aa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802376c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802376e:	1c5e      	adds	r6, r3, #1
 8023770:	42b4      	cmp	r4, r6
 8023772:	f340 8198 	ble.w	8023aa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023776:	9c07      	ldr	r4, [sp, #28]
 8023778:	fb03 1304 	mla	r3, r3, r4, r1
 802377c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802377e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023786:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802378a:	2a00      	cmp	r2, #0
 802378c:	f000 816f 	beq.w	8023a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023790:	6871      	ldr	r1, [r6, #4]
 8023792:	910b      	str	r1, [sp, #44]	; 0x2c
 8023794:	ea4f 6811 	mov.w	r8, r1, lsr #24
 8023798:	2800      	cmp	r0, #0
 802379a:	f000 8171 	beq.w	8023a80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802379e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80237a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237a2:	1871      	adds	r1, r6, r1
 80237a4:	5934      	ldr	r4, [r6, r4]
 80237a6:	6849      	ldr	r1, [r1, #4]
 80237a8:	9408      	str	r4, [sp, #32]
 80237aa:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80237ae:	910c      	str	r1, [sp, #48]	; 0x30
 80237b0:	0e0e      	lsrs	r6, r1, #24
 80237b2:	b292      	uxth	r2, r2
 80237b4:	b280      	uxth	r0, r0
 80237b6:	fb02 fb00 	mul.w	fp, r2, r0
 80237ba:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80237be:	0112      	lsls	r2, r2, #4
 80237c0:	eba2 090b 	sub.w	r9, r2, fp
 80237c4:	b280      	uxth	r0, r0
 80237c6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80237ca:	fa1f f989 	uxth.w	r9, r9
 80237ce:	1a09      	subs	r1, r1, r0
 80237d0:	b289      	uxth	r1, r1
 80237d2:	fb09 f208 	mul.w	r2, r9, r8
 80237d6:	fb01 220c 	mla	r2, r1, ip, r2
 80237da:	fb00 220a 	mla	r2, r0, sl, r2
 80237de:	fb0b 2206 	mla	r2, fp, r6, r2
 80237e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80237e6:	2a00      	cmp	r2, #0
 80237e8:	f000 80e8 	beq.w	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80237ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80237f0:	d01b      	beq.n	802382a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 80237f2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80237f6:	fb0c fe0e 	mul.w	lr, ip, lr
 80237fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237fe:	fb0c fc03 	mul.w	ip, ip, r3
 8023802:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023806:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802380a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802380e:	4473      	add	r3, lr
 8023810:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023814:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023818:	0a1b      	lsrs	r3, r3, #8
 802381a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802381e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023822:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023826:	ea43 030e 	orr.w	r3, r3, lr
 802382a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802382e:	d01e      	beq.n	802386e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 8023830:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023832:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023836:	fb08 fc0c 	mul.w	ip, r8, ip
 802383a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802383e:	fb08 f80e 	mul.w	r8, r8, lr
 8023842:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023846:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802384a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802384e:	44e6      	add	lr, ip
 8023850:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023854:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023858:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802385c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023860:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023864:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023868:	ea4e 0408 	orr.w	r4, lr, r8
 802386c:	940b      	str	r4, [sp, #44]	; 0x2c
 802386e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023872:	d01e      	beq.n	80238b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8023874:	9c08      	ldr	r4, [sp, #32]
 8023876:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802387a:	fb0a f808 	mul.w	r8, sl, r8
 802387e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023882:	fb0a fa0c 	mul.w	sl, sl, ip
 8023886:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802388a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802388e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023892:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023896:	44c6      	add	lr, r8
 8023898:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802389c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238ac:	ea4e 040a 	orr.w	r4, lr, sl
 80238b0:	9408      	str	r4, [sp, #32]
 80238b2:	2eff      	cmp	r6, #255	; 0xff
 80238b4:	d01d      	beq.n	80238f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80238b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80238b8:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80238bc:	fb06 f808 	mul.w	r8, r6, r8
 80238c0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80238c4:	fb06 f60c 	mul.w	r6, r6, ip
 80238c8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80238cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238d0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80238d4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80238d8:	44c6      	add	lr, r8
 80238da:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80238de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238e2:	0a36      	lsrs	r6, r6, #8
 80238e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238ec:	ea4e 0406 	orr.w	r4, lr, r6
 80238f0:	940c      	str	r4, [sp, #48]	; 0x30
 80238f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80238f4:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 80238f8:	9c08      	ldr	r4, [sp, #32]
 80238fa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80238fe:	fb09 f606 	mul.w	r6, r9, r6
 8023902:	fb01 660c 	mla	r6, r1, ip, r6
 8023906:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802390a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802390c:	fb00 660c 	mla	r6, r0, ip, r6
 8023910:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023914:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023916:	fb0b 660c 	mla	r6, fp, ip, r6
 802391a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802391e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023922:	fb09 f90c 	mul.w	r9, r9, ip
 8023926:	fb01 9303 	mla	r3, r1, r3, r9
 802392a:	9908      	ldr	r1, [sp, #32]
 802392c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023930:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023932:	fb00 330e 	mla	r3, r0, lr, r3
 8023936:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802393a:	fb0b 3b00 	mla	fp, fp, r0, r3
 802393e:	0a36      	lsrs	r6, r6, #8
 8023940:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023944:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023948:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802394c:	ea46 060b 	orr.w	r6, r6, fp
 8023950:	2aff      	cmp	r2, #255	; 0xff
 8023952:	ea4f 2316 	mov.w	r3, r6, lsr #8
 8023956:	f000 8099 	beq.w	8023a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802395a:	8839      	ldrh	r1, [r7, #0]
 802395c:	43d2      	mvns	r2, r2
 802395e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8023962:	fa5f fe82 	uxtb.w	lr, r2
 8023966:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802396a:	fb0c fc0e 	mul.w	ip, ip, lr
 802396e:	10c8      	asrs	r0, r1, #3
 8023970:	00ca      	lsls	r2, r1, #3
 8023972:	f10c 0101 	add.w	r1, ip, #1
 8023976:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802397a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 802397e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023982:	b2d2      	uxtb	r2, r2
 8023984:	4952      	ldr	r1, [pc, #328]	; (8023ad0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 8023986:	fb02 f20e 	mul.w	r2, r2, lr
 802398a:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802398e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023992:	1c51      	adds	r1, r2, #1
 8023994:	fb00 f00e 	mul.w	r0, r0, lr
 8023998:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802399c:	b2f6      	uxtb	r6, r6
 802399e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80239a2:	1c42      	adds	r2, r0, #1
 80239a4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80239a8:	b2db      	uxtb	r3, r3
 80239aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80239ae:	00db      	lsls	r3, r3, #3
 80239b0:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 80239b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80239b8:	431e      	orrs	r6, r3
 80239ba:	803e      	strh	r6, [r7, #0]
 80239bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239c0:	441a      	add	r2, r3
 80239c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80239c6:	441d      	add	r5, r3
 80239c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239ca:	3b01      	subs	r3, #1
 80239cc:	3702      	adds	r7, #2
 80239ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80239d0:	e6b6      	b.n	8023740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80239d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239d6:	441a      	add	r2, r3
 80239d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239da:	9229      	str	r2, [sp, #164]	; 0xa4
 80239dc:	441d      	add	r5, r3
 80239de:	9b06      	ldr	r3, [sp, #24]
 80239e0:	3b01      	subs	r3, #1
 80239e2:	9306      	str	r3, [sp, #24]
 80239e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239e6:	3302      	adds	r3, #2
 80239e8:	930a      	str	r3, [sp, #40]	; 0x28
 80239ea:	e660      	b.n	80236ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80239ec:	f47f ae72 	bne.w	80236d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80239f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	f340 81bc 	ble.w	8023d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 80239f8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80239fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a00:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a06:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a0a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a0e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a12:	eef0 6a48 	vmov.f32	s13, s16
 8023a16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a1e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a22:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023a26:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a2a:	eef0 6a68 	vmov.f32	s13, s17
 8023a2e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a32:	ee18 2a10 	vmov	r2, s16
 8023a36:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a3e:	ee18 2a90 	vmov	r2, s17
 8023a42:	932b      	str	r3, [sp, #172]	; 0xac
 8023a44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a4a:	932c      	str	r3, [sp, #176]	; 0xb0
 8023a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023a4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a50:	3b01      	subs	r3, #1
 8023a52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a56:	9312      	str	r3, [sp, #72]	; 0x48
 8023a58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a5a:	bf08      	it	eq
 8023a5c:	4613      	moveq	r3, r2
 8023a5e:	ee16 5a90 	vmov	r5, s13
 8023a62:	9306      	str	r3, [sp, #24]
 8023a64:	eef0 8a67 	vmov.f32	s17, s15
 8023a68:	eeb0 8a47 	vmov.f32	s16, s14
 8023a6c:	e618      	b.n	80236a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8023a6e:	b150      	cbz	r0, 8023a86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023a70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023a72:	5871      	ldr	r1, [r6, r1]
 8023a74:	9108      	str	r1, [sp, #32]
 8023a76:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023a7a:	26ff      	movs	r6, #255	; 0xff
 8023a7c:	46b0      	mov	r8, r6
 8023a7e:	e698      	b.n	80237b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023a80:	26ff      	movs	r6, #255	; 0xff
 8023a82:	46b2      	mov	sl, r6
 8023a84:	e695      	b.n	80237b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023a86:	26ff      	movs	r6, #255	; 0xff
 8023a88:	46b2      	mov	sl, r6
 8023a8a:	e7f7      	b.n	8023a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8023a8c:	0972      	lsrs	r2, r6, #5
 8023a8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023a92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a96:	f023 0307 	bic.w	r3, r3, #7
 8023a9a:	4313      	orrs	r3, r2
 8023a9c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023aa0:	e78a      	b.n	80239b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 8023aa2:	1c4e      	adds	r6, r1, #1
 8023aa4:	d18a      	bne.n	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023aa6:	9c07      	ldr	r4, [sp, #28]
 8023aa8:	428c      	cmp	r4, r1
 8023aaa:	dd87      	ble.n	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023aac:	1c5c      	adds	r4, r3, #1
 8023aae:	db85      	blt.n	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023ab0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023ab2:	429c      	cmp	r4, r3
 8023ab4:	dd82      	ble.n	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023ab6:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8023aba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8023abe:	9400      	str	r4, [sp, #0]
 8023ac0:	9b07      	ldr	r3, [sp, #28]
 8023ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023ac4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023ac6:	4639      	mov	r1, r7
 8023ac8:	f7ff fc62 	bl	8023390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023acc:	e776      	b.n	80239bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023ace:	bf00      	nop
 8023ad0:	fffff800 	.word	0xfffff800
 8023ad4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ad6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023ad8:	9c07      	ldr	r4, [sp, #28]
 8023ada:	1409      	asrs	r1, r1, #16
 8023adc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ae0:	142b      	asrs	r3, r5, #16
 8023ae2:	fb04 1303 	mla	r3, r4, r3, r1
 8023ae6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023ae8:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023af0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023af4:	0e1f      	lsrs	r7, r3, #24
 8023af6:	2a00      	cmp	r2, #0
 8023af8:	f000 811d 	beq.w	8023d36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8023afc:	6871      	ldr	r1, [r6, #4]
 8023afe:	910d      	str	r1, [sp, #52]	; 0x34
 8023b00:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023b04:	2800      	cmp	r0, #0
 8023b06:	f000 811f 	beq.w	8023d48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 8023b0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023b0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023b0e:	1871      	adds	r1, r6, r1
 8023b10:	5934      	ldr	r4, [r6, r4]
 8023b12:	6849      	ldr	r1, [r1, #4]
 8023b14:	9409      	str	r4, [sp, #36]	; 0x24
 8023b16:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023b1a:	910f      	str	r1, [sp, #60]	; 0x3c
 8023b1c:	0e0e      	lsrs	r6, r1, #24
 8023b1e:	b292      	uxth	r2, r2
 8023b20:	b280      	uxth	r0, r0
 8023b22:	fb02 fb00 	mul.w	fp, r2, r0
 8023b26:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023b2a:	0112      	lsls	r2, r2, #4
 8023b2c:	eba2 080b 	sub.w	r8, r2, fp
 8023b30:	b280      	uxth	r0, r0
 8023b32:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023b36:	fa1f f888 	uxth.w	r8, r8
 8023b3a:	1a09      	subs	r1, r1, r0
 8023b3c:	b289      	uxth	r1, r1
 8023b3e:	fb08 f20e 	mul.w	r2, r8, lr
 8023b42:	fb01 2207 	mla	r2, r1, r7, r2
 8023b46:	fb00 2209 	mla	r2, r0, r9, r2
 8023b4a:	fb0b 2206 	mla	r2, fp, r6, r2
 8023b4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b52:	2a00      	cmp	r2, #0
 8023b54:	f000 80e3 	beq.w	8023d1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 8023b58:	2fff      	cmp	r7, #255	; 0xff
 8023b5a:	d01a      	beq.n	8023b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 8023b5c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b60:	fb07 fc0c 	mul.w	ip, r7, ip
 8023b64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b68:	435f      	muls	r7, r3
 8023b6a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023b6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b76:	4463      	add	r3, ip
 8023b78:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023b7c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023b80:	0a1b      	lsrs	r3, r3, #8
 8023b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b8e:	ea43 030c 	orr.w	r3, r3, ip
 8023b92:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b96:	d01e      	beq.n	8023bd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 8023b98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023b9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023b9e:	fb0e f707 	mul.w	r7, lr, r7
 8023ba2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023ba6:	fb0e fe0c 	mul.w	lr, lr, ip
 8023baa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023bae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bb2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023bb6:	44bc      	add	ip, r7
 8023bb8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023bbc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023bc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bcc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023bd0:	ea4c 040e 	orr.w	r4, ip, lr
 8023bd4:	940d      	str	r4, [sp, #52]	; 0x34
 8023bd6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023bda:	d01e      	beq.n	8023c1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8023bdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023bde:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023be2:	fb09 fe0e 	mul.w	lr, r9, lr
 8023be6:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023bea:	fb09 f907 	mul.w	r9, r9, r7
 8023bee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023bf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bf6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023bfa:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023bfe:	44f4      	add	ip, lr
 8023c00:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c14:	ea4c 0409 	orr.w	r4, ip, r9
 8023c18:	9409      	str	r4, [sp, #36]	; 0x24
 8023c1a:	2eff      	cmp	r6, #255	; 0xff
 8023c1c:	d01c      	beq.n	8023c58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 8023c1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c20:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c24:	fb06 fe0e 	mul.w	lr, r6, lr
 8023c28:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023c2c:	437e      	muls	r6, r7
 8023c2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023c32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c36:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023c3a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023c3e:	44f4      	add	ip, lr
 8023c40:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023c44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c48:	0a36      	lsrs	r6, r6, #8
 8023c4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c4e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c52:	ea4c 0406 	orr.w	r4, ip, r6
 8023c56:	940f      	str	r4, [sp, #60]	; 0x3c
 8023c58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c5a:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 8023c5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023c60:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023c64:	fb08 f606 	mul.w	r6, r8, r6
 8023c68:	fb01 6607 	mla	r6, r1, r7, r6
 8023c6c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023c70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c72:	fb00 6607 	mla	r6, r0, r7, r6
 8023c76:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023c7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c7c:	fb0b 6607 	mla	r6, fp, r7, r6
 8023c80:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8023c84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c88:	fb08 f807 	mul.w	r8, r8, r7
 8023c8c:	fb01 8303 	mla	r3, r1, r3, r8
 8023c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023c92:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023c96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023c98:	fb00 330c 	mla	r3, r0, ip, r3
 8023c9c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023ca0:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023ca4:	0a36      	lsrs	r6, r6, #8
 8023ca6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023caa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023cae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023cb2:	ea46 060e 	orr.w	r6, r6, lr
 8023cb6:	2aff      	cmp	r2, #255	; 0xff
 8023cb8:	ea4f 2316 	mov.w	r3, r6, lsr #8
 8023cbc:	d04a      	beq.n	8023d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8023cbe:	f8ba 1000 	ldrh.w	r1, [sl]
 8023cc2:	43d2      	mvns	r2, r2
 8023cc4:	120f      	asrs	r7, r1, #8
 8023cc6:	fa5f fc82 	uxtb.w	ip, r2
 8023cca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023cce:	fb07 f70c 	mul.w	r7, r7, ip
 8023cd2:	10c8      	asrs	r0, r1, #3
 8023cd4:	00ca      	lsls	r2, r1, #3
 8023cd6:	1c79      	adds	r1, r7, #1
 8023cd8:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8023cdc:	0c37      	lsrs	r7, r6, #16
 8023cde:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8023ce2:	b2d2      	uxtb	r2, r2
 8023ce4:	4925      	ldr	r1, [pc, #148]	; (8023d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 8023ce6:	fb02 f20c 	mul.w	r2, r2, ip
 8023cea:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 8023cee:	1c51      	adds	r1, r2, #1
 8023cf0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023cf4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023cf8:	b2f6      	uxtb	r6, r6
 8023cfa:	fb00 f00c 	mul.w	r0, r0, ip
 8023cfe:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023d02:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 8023d06:	1c46      	adds	r6, r0, #1
 8023d08:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8023d0c:	b2de      	uxtb	r6, r3
 8023d0e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8023d12:	00f6      	lsls	r6, r6, #3
 8023d14:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023d18:	4337      	orrs	r7, r6
 8023d1a:	f8aa 7000 	strh.w	r7, [sl]
 8023d1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023d20:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d22:	441a      	add	r2, r3
 8023d24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d26:	9229      	str	r2, [sp, #164]	; 0xa4
 8023d28:	441d      	add	r5, r3
 8023d2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d2c:	3b01      	subs	r3, #1
 8023d2e:	f10a 0a02 	add.w	sl, sl, #2
 8023d32:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d34:	e4e7      	b.n	8023706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8023d36:	b150      	cbz	r0, 8023d4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 8023d38:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d3a:	5871      	ldr	r1, [r6, r1]
 8023d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8023d3e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023d42:	26ff      	movs	r6, #255	; 0xff
 8023d44:	46b6      	mov	lr, r6
 8023d46:	e6ea      	b.n	8023b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8023d48:	26ff      	movs	r6, #255	; 0xff
 8023d4a:	46b1      	mov	r9, r6
 8023d4c:	e6e7      	b.n	8023b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8023d4e:	26ff      	movs	r6, #255	; 0xff
 8023d50:	46b1      	mov	r9, r6
 8023d52:	e7f7      	b.n	8023d44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 8023d54:	0972      	lsrs	r2, r6, #5
 8023d56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023d5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d5e:	f023 0307 	bic.w	r3, r3, #7
 8023d62:	4313      	orrs	r3, r2
 8023d64:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023d68:	431e      	orrs	r6, r3
 8023d6a:	f8aa 6000 	strh.w	r6, [sl]
 8023d6e:	e7d6      	b.n	8023d1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 8023d70:	b017      	add	sp, #92	; 0x5c
 8023d72:	ecbd 8b08 	vpop	{d8-d11}
 8023d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d7a:	bf00      	nop
 8023d7c:	fffff800 	.word	0xfffff800

08023d80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8023d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d84:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8023d88:	2c00      	cmp	r4, #0
 8023d8a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023d8e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023d92:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023d96:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8023d9a:	fb04 ce03 	mla	lr, r4, r3, ip
 8023d9e:	db60      	blt.n	8023e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023da0:	45a1      	cmp	r9, r4
 8023da2:	dd5e      	ble.n	8023e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8023da4:	f1bc 0f00 	cmp.w	ip, #0
 8023da8:	db59      	blt.n	8023e5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023daa:	45e0      	cmp	r8, ip
 8023dac:	dd57      	ble.n	8023e5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8023dae:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8023db2:	f01e 0f01 	tst.w	lr, #1
 8023db6:	5c16      	ldrb	r6, [r2, r0]
 8023db8:	bf0c      	ite	eq
 8023dba:	f006 060f 	andeq.w	r6, r6, #15
 8023dbe:	1136      	asrne	r6, r6, #4
 8023dc0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023dc4:	b2f6      	uxtb	r6, r6
 8023dc6:	f11c 0001 	adds.w	r0, ip, #1
 8023dca:	d44d      	bmi.n	8023e68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023dcc:	4580      	cmp	r8, r0
 8023dce:	dd4b      	ble.n	8023e68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8023dd0:	2d00      	cmp	r5, #0
 8023dd2:	d04b      	beq.n	8023e6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8023dd4:	f10e 0a01 	add.w	sl, lr, #1
 8023dd8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8023ddc:	f01a 0f01 	tst.w	sl, #1
 8023de0:	5c10      	ldrb	r0, [r2, r0]
 8023de2:	bf0c      	ite	eq
 8023de4:	f000 000f 	andeq.w	r0, r0, #15
 8023de8:	1100      	asrne	r0, r0, #4
 8023dea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023dee:	b2c0      	uxtb	r0, r0
 8023df0:	3401      	adds	r4, #1
 8023df2:	d43f      	bmi.n	8023e74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023df4:	45a1      	cmp	r9, r4
 8023df6:	dd3d      	ble.n	8023e74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8023df8:	2f00      	cmp	r7, #0
 8023dfa:	f000 809e 	beq.w	8023f3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8023dfe:	f1bc 0f00 	cmp.w	ip, #0
 8023e02:	db35      	blt.n	8023e70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023e04:	45e0      	cmp	r8, ip
 8023e06:	dd33      	ble.n	8023e70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8023e08:	eb03 090e 	add.w	r9, r3, lr
 8023e0c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8023e10:	f019 0f01 	tst.w	r9, #1
 8023e14:	5d14      	ldrb	r4, [r2, r4]
 8023e16:	bf0c      	ite	eq
 8023e18:	f004 040f 	andeq.w	r4, r4, #15
 8023e1c:	1124      	asrne	r4, r4, #4
 8023e1e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023e22:	b2e4      	uxtb	r4, r4
 8023e24:	f11c 0c01 	adds.w	ip, ip, #1
 8023e28:	d427      	bmi.n	8023e7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023e2a:	45e0      	cmp	r8, ip
 8023e2c:	dd25      	ble.n	8023e7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8023e2e:	b335      	cbz	r5, 8023e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8023e30:	3301      	adds	r3, #1
 8023e32:	449e      	add	lr, r3
 8023e34:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023e38:	f01e 0f01 	tst.w	lr, #1
 8023e3c:	5cd2      	ldrb	r2, [r2, r3]
 8023e3e:	bf0c      	ite	eq
 8023e40:	f002 020f 	andeq.w	r2, r2, #15
 8023e44:	1112      	asrne	r2, r2, #4
 8023e46:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023e4a:	b2d3      	uxtb	r3, r2
 8023e4c:	2d0f      	cmp	r5, #15
 8023e4e:	d917      	bls.n	8023e80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8023e50:	4b3c      	ldr	r3, [pc, #240]	; (8023f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8023e52:	4a3d      	ldr	r2, [pc, #244]	; (8023f48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8023e54:	483d      	ldr	r0, [pc, #244]	; (8023f4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8023e56:	f240 210d 	movw	r1, #525	; 0x20d
 8023e5a:	f000 ffd7 	bl	8024e0c <__assert_func>
 8023e5e:	2600      	movs	r6, #0
 8023e60:	e7b1      	b.n	8023dc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8023e62:	2000      	movs	r0, #0
 8023e64:	4606      	mov	r6, r0
 8023e66:	e7c3      	b.n	8023df0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e68:	2000      	movs	r0, #0
 8023e6a:	e7c1      	b.n	8023df0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e6c:	4628      	mov	r0, r5
 8023e6e:	e7bf      	b.n	8023df0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8023e70:	2400      	movs	r4, #0
 8023e72:	e7d7      	b.n	8023e24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8023e74:	2300      	movs	r3, #0
 8023e76:	461c      	mov	r4, r3
 8023e78:	e7e8      	b.n	8023e4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023e7a:	2300      	movs	r3, #0
 8023e7c:	e7e6      	b.n	8023e4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8023e7e:	462b      	mov	r3, r5
 8023e80:	2f0f      	cmp	r7, #15
 8023e82:	d8e5      	bhi.n	8023e50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023e84:	b2ad      	uxth	r5, r5
 8023e86:	b2bf      	uxth	r7, r7
 8023e88:	fb05 fc07 	mul.w	ip, r5, r7
 8023e8c:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023e90:	012d      	lsls	r5, r5, #4
 8023e92:	b2bf      	uxth	r7, r7
 8023e94:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8023e98:	eba5 050c 	sub.w	r5, r5, ip
 8023e9c:	1bd2      	subs	r2, r2, r7
 8023e9e:	b2ad      	uxth	r5, r5
 8023ea0:	b292      	uxth	r2, r2
 8023ea2:	4368      	muls	r0, r5
 8023ea4:	fb06 0002 	mla	r0, r6, r2, r0
 8023ea8:	fb07 0404 	mla	r4, r7, r4, r0
 8023eac:	fb0c 4303 	mla	r3, ip, r3, r4
 8023eb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d03e      	beq.n	8023f36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8023eb8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8023ebc:	4a24      	ldr	r2, [pc, #144]	; (8023f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8023ebe:	4343      	muls	r3, r0
 8023ec0:	1c58      	adds	r0, r3, #1
 8023ec2:	6816      	ldr	r6, [r2, #0]
 8023ec4:	880a      	ldrh	r2, [r1, #0]
 8023ec6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023eca:	1200      	asrs	r0, r0, #8
 8023ecc:	b284      	uxth	r4, r0
 8023ece:	1215      	asrs	r5, r2, #8
 8023ed0:	43c0      	mvns	r0, r0
 8023ed2:	b2c3      	uxtb	r3, r0
 8023ed4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023ed8:	0a30      	lsrs	r0, r6, #8
 8023eda:	fb15 f503 	smulbb	r5, r5, r3
 8023ede:	10d7      	asrs	r7, r2, #3
 8023ee0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023ee4:	fb00 5004 	mla	r0, r0, r4, r5
 8023ee8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023eec:	08f5      	lsrs	r5, r6, #3
 8023eee:	00d2      	lsls	r2, r2, #3
 8023ef0:	fb17 f703 	smulbb	r7, r7, r3
 8023ef4:	b2d2      	uxtb	r2, r2
 8023ef6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023efa:	00f6      	lsls	r6, r6, #3
 8023efc:	fb05 7504 	mla	r5, r5, r4, r7
 8023f00:	fb12 f303 	smulbb	r3, r2, r3
 8023f04:	b2f6      	uxtb	r6, r6
 8023f06:	fb06 3304 	mla	r3, r6, r4, r3
 8023f0a:	b2ad      	uxth	r5, r5
 8023f0c:	b29a      	uxth	r2, r3
 8023f0e:	b280      	uxth	r0, r0
 8023f10:	1c6b      	adds	r3, r5, #1
 8023f12:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8023f16:	1c44      	adds	r4, r0, #1
 8023f18:	095b      	lsrs	r3, r3, #5
 8023f1a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023f1e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023f22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f26:	4303      	orrs	r3, r0
 8023f28:	1c50      	adds	r0, r2, #1
 8023f2a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023f2e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023f32:	4313      	orrs	r3, r2
 8023f34:	800b      	strh	r3, [r1, #0]
 8023f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f3a:	2d0f      	cmp	r5, #15
 8023f3c:	d888      	bhi.n	8023e50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8023f3e:	463b      	mov	r3, r7
 8023f40:	463c      	mov	r4, r7
 8023f42:	e79f      	b.n	8023e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8023f44:	08054484 	.word	0x08054484
 8023f48:	080549dd 	.word	0x080549dd
 8023f4c:	0805450c 	.word	0x0805450c
 8023f50:	20001360 	.word	0x20001360

08023f54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f58:	ed2d 8b08 	vpush	{d8-d11}
 8023f5c:	b099      	sub	sp, #100	; 0x64
 8023f5e:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 8023f62:	9309      	str	r3, [sp, #36]	; 0x24
 8023f64:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023f68:	930a      	str	r3, [sp, #40]	; 0x28
 8023f6a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8023f6e:	9216      	str	r2, [sp, #88]	; 0x58
 8023f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f72:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023f74:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8023f78:	910f      	str	r1, [sp, #60]	; 0x3c
 8023f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8023f7c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023f80:	9017      	str	r0, [sp, #92]	; 0x5c
 8023f82:	6850      	ldr	r0, [r2, #4]
 8023f84:	6812      	ldr	r2, [r2, #0]
 8023f86:	fb00 1303 	mla	r3, r0, r3, r1
 8023f8a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8023f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f90:	3301      	adds	r3, #1
 8023f92:	f023 0301 	bic.w	r3, r3, #1
 8023f96:	930c      	str	r3, [sp, #48]	; 0x30
 8023f98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f9a:	681f      	ldr	r7, [r3, #0]
 8023f9c:	eeb0 aa40 	vmov.f32	s20, s0
 8023fa0:	eef0 9a60 	vmov.f32	s19, s1
 8023fa4:	eeb0 9a41 	vmov.f32	s18, s2
 8023fa8:	eeb0 8a62 	vmov.f32	s16, s5
 8023fac:	eef0 8a43 	vmov.f32	s17, s6
 8023fb0:	eef0 ba44 	vmov.f32	s23, s8
 8023fb4:	eeb0 ba64 	vmov.f32	s22, s9
 8023fb8:	eef0 aa45 	vmov.f32	s21, s10
 8023fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023fbe:	2b00      	cmp	r3, #0
 8023fc0:	dc03      	bgt.n	8023fca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	f340 8267 	ble.w	8024498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 8023fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	f340 811e 	ble.w	802420e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8023fd2:	1422      	asrs	r2, r4, #16
 8023fd4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023fd8:	d42d      	bmi.n	8024036 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8023fda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023fdc:	1c51      	adds	r1, r2, #1
 8023fde:	4288      	cmp	r0, r1
 8023fe0:	dd2c      	ble.n	802403c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	db2a      	blt.n	802403c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023fe6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023fe8:	1c59      	adds	r1, r3, #1
 8023fea:	4288      	cmp	r0, r1
 8023fec:	dd26      	ble.n	802403c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ff0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023ff2:	3b01      	subs	r3, #1
 8023ff4:	fb02 4203 	mla	r2, r2, r3, r4
 8023ff8:	1412      	asrs	r2, r2, #16
 8023ffa:	d42a      	bmi.n	8024052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8023ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023ffe:	3201      	adds	r2, #1
 8024000:	4291      	cmp	r1, r2
 8024002:	dd26      	ble.n	8024052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8024004:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024006:	fb02 6303 	mla	r3, r2, r3, r6
 802400a:	141b      	asrs	r3, r3, #16
 802400c:	d421      	bmi.n	8024052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802400e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024010:	3301      	adds	r3, #1
 8024012:	429a      	cmp	r2, r3
 8024014:	dd1d      	ble.n	8024052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8024016:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802401a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802401e:	9311      	str	r3, [sp, #68]	; 0x44
 8024020:	46d1      	mov	r9, sl
 8024022:	f1bb 0f00 	cmp.w	fp, #0
 8024026:	f300 8162 	bgt.w	80242ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39a>
 802402a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802402c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024030:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8024034:	e0ed      	b.n	8024212 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8024036:	1c51      	adds	r1, r2, #1
 8024038:	f040 80df 	bne.w	80241fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802403c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802403e:	4291      	cmp	r1, r2
 8024040:	f340 80db 	ble.w	80241fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8024044:	1c5a      	adds	r2, r3, #1
 8024046:	f2c0 80d8 	blt.w	80241fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802404a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802404c:	4293      	cmp	r3, r2
 802404e:	f280 80d4 	bge.w	80241fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8024052:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8024056:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802405a:	9311      	str	r3, [sp, #68]	; 0x44
 802405c:	46d0      	mov	r8, sl
 802405e:	f1b9 0f00 	cmp.w	r9, #0
 8024062:	dde2      	ble.n	802402a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8024064:	1420      	asrs	r0, r4, #16
 8024066:	ea4f 4326 	mov.w	r3, r6, asr #16
 802406a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802406e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024072:	f100 8121 	bmi.w	80242b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x364>
 8024076:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024078:	f100 0c01 	add.w	ip, r0, #1
 802407c:	4565      	cmp	r5, ip
 802407e:	f340 811d 	ble.w	80242bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8024082:	2b00      	cmp	r3, #0
 8024084:	f2c0 811a 	blt.w	80242bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8024088:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802408a:	f103 0c01 	add.w	ip, r3, #1
 802408e:	4565      	cmp	r5, ip
 8024090:	f340 8114 	ble.w	80242bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8024094:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024096:	fb03 0305 	mla	r3, r3, r5, r0
 802409a:	0858      	lsrs	r0, r3, #1
 802409c:	07dd      	lsls	r5, r3, #31
 802409e:	5c38      	ldrb	r0, [r7, r0]
 80240a0:	bf54      	ite	pl
 80240a2:	f000 000f 	andpl.w	r0, r0, #15
 80240a6:	1100      	asrmi	r0, r0, #4
 80240a8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80240ac:	b2c0      	uxtb	r0, r0
 80240ae:	2a00      	cmp	r2, #0
 80240b0:	f000 80ee 	beq.w	8024290 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80240b4:	f103 0e01 	add.w	lr, r3, #1
 80240b8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80240bc:	f01e 0f01 	tst.w	lr, #1
 80240c0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240c4:	bf0c      	ite	eq
 80240c6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80240ca:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80240ce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80240d2:	fa5f f58c 	uxtb.w	r5, ip
 80240d6:	9512      	str	r5, [sp, #72]	; 0x48
 80240d8:	b1f9      	cbz	r1, 802411a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 80240da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80240dc:	442b      	add	r3, r5
 80240de:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80240e2:	07dd      	lsls	r5, r3, #31
 80240e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240e8:	bf54      	ite	pl
 80240ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 80240ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80240f2:	3301      	adds	r3, #1
 80240f4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80240f8:	fa5f f58c 	uxtb.w	r5, ip
 80240fc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024100:	950d      	str	r5, [sp, #52]	; 0x34
 8024102:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024106:	07dd      	lsls	r5, r3, #31
 8024108:	bf54      	ite	pl
 802410a:	f00c 030f 	andpl.w	r3, ip, #15
 802410e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024112:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024116:	b2db      	uxtb	r3, r3
 8024118:	9313      	str	r3, [sp, #76]	; 0x4c
 802411a:	b292      	uxth	r2, r2
 802411c:	b289      	uxth	r1, r1
 802411e:	fb02 f301 	mul.w	r3, r2, r1
 8024122:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024126:	0112      	lsls	r2, r2, #4
 8024128:	b289      	uxth	r1, r1
 802412a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802412e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024130:	1ad2      	subs	r2, r2, r3
 8024132:	ebac 0c01 	sub.w	ip, ip, r1
 8024136:	b292      	uxth	r2, r2
 8024138:	436a      	muls	r2, r5
 802413a:	fa1f fc8c 	uxth.w	ip, ip
 802413e:	fb00 200c 	mla	r0, r0, ip, r2
 8024142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024144:	fb01 0102 	mla	r1, r1, r2, r0
 8024148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802414a:	fb03 1302 	mla	r3, r3, r2, r1
 802414e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024152:	2b00      	cmp	r3, #0
 8024154:	d048      	beq.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8024156:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024158:	4ace      	ldr	r2, [pc, #824]	; (8024494 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 802415a:	434b      	muls	r3, r1
 802415c:	1c59      	adds	r1, r3, #1
 802415e:	f8d2 e000 	ldr.w	lr, [r2]
 8024162:	f8b8 2000 	ldrh.w	r2, [r8]
 8024166:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802416a:	121b      	asrs	r3, r3, #8
 802416c:	b299      	uxth	r1, r3
 802416e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024172:	43db      	mvns	r3, r3
 8024174:	b2db      	uxtb	r3, r3
 8024176:	ea4f 201e 	mov.w	r0, lr, lsr #8
 802417a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802417e:	fb1c fc03 	smulbb	ip, ip, r3
 8024182:	ea4f 0be2 	mov.w	fp, r2, asr #3
 8024186:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802418a:	fb00 c001 	mla	r0, r0, r1, ip
 802418e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024192:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8024196:	fb1b fb03 	smulbb	fp, fp, r3
 802419a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802419e:	00d2      	lsls	r2, r2, #3
 80241a0:	fb0c bc01 	mla	ip, ip, r1, fp
 80241a4:	b2d2      	uxtb	r2, r2
 80241a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80241aa:	fb12 f303 	smulbb	r3, r2, r3
 80241ae:	fa1f fc8c 	uxth.w	ip, ip
 80241b2:	fa5f fe8e 	uxtb.w	lr, lr
 80241b6:	b280      	uxth	r0, r0
 80241b8:	fb0e 3101 	mla	r1, lr, r1, r3
 80241bc:	f10c 0201 	add.w	r2, ip, #1
 80241c0:	b289      	uxth	r1, r1
 80241c2:	1c43      	adds	r3, r0, #1
 80241c4:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80241c8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80241cc:	0952      	lsrs	r2, r2, #5
 80241ce:	1c4b      	adds	r3, r1, #1
 80241d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80241d4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80241d8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80241dc:	4310      	orrs	r0, r2
 80241de:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80241e2:	4308      	orrs	r0, r1
 80241e4:	f8a8 0000 	strh.w	r0, [r8]
 80241e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80241ea:	441c      	add	r4, r3
 80241ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80241ee:	f108 0802 	add.w	r8, r8, #2
 80241f2:	441e      	add	r6, r3
 80241f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80241f8:	e731      	b.n	802405e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80241fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80241fc:	441c      	add	r4, r3
 80241fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024200:	441e      	add	r6, r3
 8024202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024204:	3b01      	subs	r3, #1
 8024206:	9309      	str	r3, [sp, #36]	; 0x24
 8024208:	f10a 0a02 	add.w	sl, sl, #2
 802420c:	e6dd      	b.n	8023fca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802420e:	f47f aeee 	bne.w	8023fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8024212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024214:	2b00      	cmp	r3, #0
 8024216:	f340 813f 	ble.w	8024498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 802421a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802421e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024222:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024226:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024228:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802422c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024230:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024234:	eef0 6a48 	vmov.f32	s13, s16
 8024238:	ee69 7a27 	vmul.f32	s15, s18, s15
 802423c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024240:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024244:	ee16 4a90 	vmov	r4, s13
 8024248:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802424c:	eef0 6a68 	vmov.f32	s13, s17
 8024250:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024254:	ee18 2a10 	vmov	r2, s16
 8024258:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802425c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024260:	ee18 2a90 	vmov	r2, s17
 8024264:	932d      	str	r3, [sp, #180]	; 0xb4
 8024266:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024268:	fb92 f3f3 	sdiv	r3, r2, r3
 802426c:	932e      	str	r3, [sp, #184]	; 0xb8
 802426e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024270:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024272:	3b01      	subs	r3, #1
 8024274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024278:	930f      	str	r3, [sp, #60]	; 0x3c
 802427a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802427c:	bf08      	it	eq
 802427e:	4613      	moveq	r3, r2
 8024280:	ee16 6a90 	vmov	r6, s13
 8024284:	9309      	str	r3, [sp, #36]	; 0x24
 8024286:	eef0 8a67 	vmov.f32	s17, s15
 802428a:	eeb0 8a47 	vmov.f32	s16, s14
 802428e:	e695      	b.n	8023fbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024290:	2900      	cmp	r1, #0
 8024292:	f43f af42 	beq.w	802411a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8024296:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024298:	442b      	add	r3, r5
 802429a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802429e:	07db      	lsls	r3, r3, #31
 80242a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80242a4:	bf54      	ite	pl
 80242a6:	f00c 030f 	andpl.w	r3, ip, #15
 80242aa:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80242ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80242b2:	b2db      	uxtb	r3, r3
 80242b4:	930d      	str	r3, [sp, #52]	; 0x34
 80242b6:	e730      	b.n	802411a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 80242b8:	1c45      	adds	r5, r0, #1
 80242ba:	d195      	bne.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80242be:	4285      	cmp	r5, r0
 80242c0:	dd92      	ble.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242c2:	1c5d      	adds	r5, r3, #1
 80242c4:	db90      	blt.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80242c8:	429d      	cmp	r5, r3
 80242ca:	dd8d      	ble.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80242d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80242d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242d4:	9301      	str	r3, [sp, #4]
 80242d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80242d8:	9002      	str	r0, [sp, #8]
 80242da:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80242de:	9300      	str	r3, [sp, #0]
 80242e0:	463a      	mov	r2, r7
 80242e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80242e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80242e6:	4641      	mov	r1, r8
 80242e8:	f7ff fd4a 	bl	8023d80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80242ec:	e77c      	b.n	80241e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 80242ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80242f0:	1422      	asrs	r2, r4, #16
 80242f2:	1433      	asrs	r3, r6, #16
 80242f4:	fb05 2303 	mla	r3, r5, r3, r2
 80242f8:	085a      	lsrs	r2, r3, #1
 80242fa:	07dd      	lsls	r5, r3, #31
 80242fc:	5cba      	ldrb	r2, [r7, r2]
 80242fe:	bf54      	ite	pl
 8024300:	f002 020f 	andpl.w	r2, r2, #15
 8024304:	1112      	asrmi	r2, r2, #4
 8024306:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802430a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802430e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024312:	b2d2      	uxtb	r2, r2
 8024314:	2900      	cmp	r1, #0
 8024316:	f000 80a8 	beq.w	802446a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 802431a:	f103 0e01 	add.w	lr, r3, #1
 802431e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024322:	f01e 0f01 	tst.w	lr, #1
 8024326:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802432a:	bf0c      	ite	eq
 802432c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024330:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024334:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024338:	fa5f f58c 	uxtb.w	r5, ip
 802433c:	9514      	str	r5, [sp, #80]	; 0x50
 802433e:	b300      	cbz	r0, 8024382 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024340:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024342:	442b      	add	r3, r5
 8024344:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024348:	07dd      	lsls	r5, r3, #31
 802434a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802434e:	bf54      	ite	pl
 8024350:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024354:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024358:	3301      	adds	r3, #1
 802435a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802435e:	fa5f f58c 	uxtb.w	r5, ip
 8024362:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024366:	950e      	str	r5, [sp, #56]	; 0x38
 8024368:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802436c:	07dd      	lsls	r5, r3, #31
 802436e:	bf54      	ite	pl
 8024370:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024374:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024378:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802437c:	fa5f f38c 	uxtb.w	r3, ip
 8024380:	9315      	str	r3, [sp, #84]	; 0x54
 8024382:	b289      	uxth	r1, r1
 8024384:	b280      	uxth	r0, r0
 8024386:	fb01 f300 	mul.w	r3, r1, r0
 802438a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802438e:	0109      	lsls	r1, r1, #4
 8024390:	b280      	uxth	r0, r0
 8024392:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024396:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024398:	1ac9      	subs	r1, r1, r3
 802439a:	ebac 0c00 	sub.w	ip, ip, r0
 802439e:	b289      	uxth	r1, r1
 80243a0:	4369      	muls	r1, r5
 80243a2:	fa1f fc8c 	uxth.w	ip, ip
 80243a6:	fb02 120c 	mla	r2, r2, ip, r1
 80243aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80243ac:	fb00 2001 	mla	r0, r0, r1, r2
 80243b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80243b2:	fb03 0302 	mla	r3, r3, r2, r0
 80243b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	d04c      	beq.n	8024458 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x504>
 80243be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80243c0:	4a34      	ldr	r2, [pc, #208]	; (8024494 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x540>)
 80243c2:	434b      	muls	r3, r1
 80243c4:	1c59      	adds	r1, r3, #1
 80243c6:	f8d2 e000 	ldr.w	lr, [r2]
 80243ca:	f8b9 2000 	ldrh.w	r2, [r9]
 80243ce:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80243d2:	121b      	asrs	r3, r3, #8
 80243d4:	b299      	uxth	r1, r3
 80243d6:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80243da:	43db      	mvns	r3, r3
 80243dc:	b2db      	uxtb	r3, r3
 80243de:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80243e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80243e6:	fb1c fc03 	smulbb	ip, ip, r3
 80243ea:	ea4f 08e2 	mov.w	r8, r2, asr #3
 80243ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80243f2:	fb00 c001 	mla	r0, r0, r1, ip
 80243f6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80243fa:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80243fe:	fb18 f803 	smulbb	r8, r8, r3
 8024402:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8024406:	00d2      	lsls	r2, r2, #3
 8024408:	fb0c 8c01 	mla	ip, ip, r1, r8
 802440c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024410:	b2d2      	uxtb	r2, r2
 8024412:	fa1f fc8c 	uxth.w	ip, ip
 8024416:	fa5f fe8e 	uxtb.w	lr, lr
 802441a:	fb12 f203 	smulbb	r2, r2, r3
 802441e:	b280      	uxth	r0, r0
 8024420:	fb0e 2201 	mla	r2, lr, r1, r2
 8024424:	f10c 0801 	add.w	r8, ip, #1
 8024428:	b292      	uxth	r2, r2
 802442a:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 802442e:	f100 0801 	add.w	r8, r0, #1
 8024432:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024436:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 802443a:	1c51      	adds	r1, r2, #1
 802443c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024440:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024444:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024448:	ea4c 0c00 	orr.w	ip, ip, r0
 802444c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024450:	ea4c 0c02 	orr.w	ip, ip, r2
 8024454:	f8a9 c000 	strh.w	ip, [r9]
 8024458:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802445a:	441c      	add	r4, r3
 802445c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802445e:	f109 0902 	add.w	r9, r9, #2
 8024462:	441e      	add	r6, r3
 8024464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024468:	e5db      	b.n	8024022 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802446a:	2800      	cmp	r0, #0
 802446c:	d089      	beq.n	8024382 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802446e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024470:	442b      	add	r3, r5
 8024472:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024476:	07db      	lsls	r3, r3, #31
 8024478:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802447c:	bf54      	ite	pl
 802447e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024482:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024486:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802448a:	fa5f f38c 	uxtb.w	r3, ip
 802448e:	930e      	str	r3, [sp, #56]	; 0x38
 8024490:	e777      	b.n	8024382 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024492:	bf00      	nop
 8024494:	20001360 	.word	0x20001360
 8024498:	b019      	add	sp, #100	; 0x64
 802449a:	ecbd 8b08 	vpop	{d8-d11}
 802449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244a2:	bf00      	nop

080244a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80244a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244a8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80244ac:	2c00      	cmp	r4, #0
 80244ae:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80244b2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80244b6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80244ba:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80244be:	fb04 ce03 	mla	lr, r4, r3, ip
 80244c2:	db60      	blt.n	8024586 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80244c4:	45a1      	cmp	r9, r4
 80244c6:	dd5e      	ble.n	8024586 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80244c8:	f1bc 0f00 	cmp.w	ip, #0
 80244cc:	db59      	blt.n	8024582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80244ce:	45e0      	cmp	r8, ip
 80244d0:	dd57      	ble.n	8024582 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80244d2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80244d6:	f01e 0f01 	tst.w	lr, #1
 80244da:	5c16      	ldrb	r6, [r2, r0]
 80244dc:	bf0c      	ite	eq
 80244de:	f006 060f 	andeq.w	r6, r6, #15
 80244e2:	1136      	asrne	r6, r6, #4
 80244e4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80244e8:	b2f6      	uxtb	r6, r6
 80244ea:	f11c 0001 	adds.w	r0, ip, #1
 80244ee:	d44d      	bmi.n	802458c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80244f0:	4580      	cmp	r8, r0
 80244f2:	dd4b      	ble.n	802458c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80244f4:	2d00      	cmp	r5, #0
 80244f6:	d04b      	beq.n	8024590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80244f8:	f10e 0a01 	add.w	sl, lr, #1
 80244fc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8024500:	f01a 0f01 	tst.w	sl, #1
 8024504:	5c10      	ldrb	r0, [r2, r0]
 8024506:	bf0c      	ite	eq
 8024508:	f000 000f 	andeq.w	r0, r0, #15
 802450c:	1100      	asrne	r0, r0, #4
 802450e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024512:	b2c0      	uxtb	r0, r0
 8024514:	3401      	adds	r4, #1
 8024516:	d43f      	bmi.n	8024598 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8024518:	45a1      	cmp	r9, r4
 802451a:	dd3d      	ble.n	8024598 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802451c:	2f00      	cmp	r7, #0
 802451e:	f000 8097 	beq.w	8024650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8024522:	f1bc 0f00 	cmp.w	ip, #0
 8024526:	db35      	blt.n	8024594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8024528:	45e0      	cmp	r8, ip
 802452a:	dd33      	ble.n	8024594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802452c:	eb03 090e 	add.w	r9, r3, lr
 8024530:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8024534:	f019 0f01 	tst.w	r9, #1
 8024538:	5d14      	ldrb	r4, [r2, r4]
 802453a:	bf0c      	ite	eq
 802453c:	f004 040f 	andeq.w	r4, r4, #15
 8024540:	1124      	asrne	r4, r4, #4
 8024542:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024546:	b2e4      	uxtb	r4, r4
 8024548:	f11c 0c01 	adds.w	ip, ip, #1
 802454c:	d427      	bmi.n	802459e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802454e:	45e0      	cmp	r8, ip
 8024550:	dd25      	ble.n	802459e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8024552:	b335      	cbz	r5, 80245a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8024554:	3301      	adds	r3, #1
 8024556:	449e      	add	lr, r3
 8024558:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802455c:	f01e 0f01 	tst.w	lr, #1
 8024560:	5cd2      	ldrb	r2, [r2, r3]
 8024562:	bf0c      	ite	eq
 8024564:	f002 020f 	andeq.w	r2, r2, #15
 8024568:	1112      	asrne	r2, r2, #4
 802456a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802456e:	b2d3      	uxtb	r3, r2
 8024570:	2d0f      	cmp	r5, #15
 8024572:	d917      	bls.n	80245a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8024574:	4b39      	ldr	r3, [pc, #228]	; (802465c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8024576:	4a3a      	ldr	r2, [pc, #232]	; (8024660 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8024578:	483a      	ldr	r0, [pc, #232]	; (8024664 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 802457a:	f240 210d 	movw	r1, #525	; 0x20d
 802457e:	f000 fc45 	bl	8024e0c <__assert_func>
 8024582:	2600      	movs	r6, #0
 8024584:	e7b1      	b.n	80244ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8024586:	2000      	movs	r0, #0
 8024588:	4606      	mov	r6, r0
 802458a:	e7c3      	b.n	8024514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802458c:	2000      	movs	r0, #0
 802458e:	e7c1      	b.n	8024514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024590:	4628      	mov	r0, r5
 8024592:	e7bf      	b.n	8024514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8024594:	2400      	movs	r4, #0
 8024596:	e7d7      	b.n	8024548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8024598:	2300      	movs	r3, #0
 802459a:	461c      	mov	r4, r3
 802459c:	e7e8      	b.n	8024570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802459e:	2300      	movs	r3, #0
 80245a0:	e7e6      	b.n	8024570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80245a2:	462b      	mov	r3, r5
 80245a4:	2f0f      	cmp	r7, #15
 80245a6:	d8e5      	bhi.n	8024574 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80245a8:	b2ad      	uxth	r5, r5
 80245aa:	b2bf      	uxth	r7, r7
 80245ac:	fb05 fc07 	mul.w	ip, r5, r7
 80245b0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80245b4:	012d      	lsls	r5, r5, #4
 80245b6:	b2bf      	uxth	r7, r7
 80245b8:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80245bc:	eba5 050c 	sub.w	r5, r5, ip
 80245c0:	1bd2      	subs	r2, r2, r7
 80245c2:	b2ad      	uxth	r5, r5
 80245c4:	b292      	uxth	r2, r2
 80245c6:	4368      	muls	r0, r5
 80245c8:	fb06 0002 	mla	r0, r6, r2, r0
 80245cc:	fb07 0404 	mla	r4, r7, r4, r0
 80245d0:	fb0c 4303 	mla	r3, ip, r3, r4
 80245d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245d8:	2b00      	cmp	r3, #0
 80245da:	d037      	beq.n	802464c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 80245dc:	4a22      	ldr	r2, [pc, #136]	; (8024668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 80245de:	6816      	ldr	r6, [r2, #0]
 80245e0:	880a      	ldrh	r2, [r1, #0]
 80245e2:	b298      	uxth	r0, r3
 80245e4:	1215      	asrs	r5, r2, #8
 80245e6:	43db      	mvns	r3, r3
 80245e8:	b2db      	uxtb	r3, r3
 80245ea:	0a34      	lsrs	r4, r6, #8
 80245ec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80245f0:	fb15 f503 	smulbb	r5, r5, r3
 80245f4:	10d7      	asrs	r7, r2, #3
 80245f6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80245fa:	fb04 5400 	mla	r4, r4, r0, r5
 80245fe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024602:	08f5      	lsrs	r5, r6, #3
 8024604:	fb17 f703 	smulbb	r7, r7, r3
 8024608:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802460c:	00d2      	lsls	r2, r2, #3
 802460e:	fb05 7500 	mla	r5, r5, r0, r7
 8024612:	b2d2      	uxtb	r2, r2
 8024614:	00f6      	lsls	r6, r6, #3
 8024616:	fb12 f303 	smulbb	r3, r2, r3
 802461a:	b2ad      	uxth	r5, r5
 802461c:	b2f6      	uxtb	r6, r6
 802461e:	b2a4      	uxth	r4, r4
 8024620:	fb06 3000 	mla	r0, r6, r0, r3
 8024624:	1c6b      	adds	r3, r5, #1
 8024626:	b280      	uxth	r0, r0
 8024628:	1c62      	adds	r2, r4, #1
 802462a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802462e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024632:	095b      	lsrs	r3, r3, #5
 8024634:	1c42      	adds	r2, r0, #1
 8024636:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802463a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802463e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024642:	4323      	orrs	r3, r4
 8024644:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024648:	4303      	orrs	r3, r0
 802464a:	800b      	strh	r3, [r1, #0]
 802464c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024650:	2d0f      	cmp	r5, #15
 8024652:	d88f      	bhi.n	8024574 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8024654:	463b      	mov	r3, r7
 8024656:	463c      	mov	r4, r7
 8024658:	e7a6      	b.n	80245a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802465a:	bf00      	nop
 802465c:	08054484 	.word	0x08054484
 8024660:	080549dd 	.word	0x080549dd
 8024664:	0805450c 	.word	0x0805450c
 8024668:	20001360 	.word	0x20001360

0802466c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024670:	ed2d 8b08 	vpush	{d8-d11}
 8024674:	b095      	sub	sp, #84	; 0x54
 8024676:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802467a:	9306      	str	r3, [sp, #24]
 802467c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8024680:	9307      	str	r3, [sp, #28]
 8024682:	920d      	str	r2, [sp, #52]	; 0x34
 8024684:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024688:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802468a:	910a      	str	r1, [sp, #40]	; 0x28
 802468c:	9308      	str	r3, [sp, #32]
 802468e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024692:	9013      	str	r0, [sp, #76]	; 0x4c
 8024694:	6850      	ldr	r0, [r2, #4]
 8024696:	6812      	ldr	r2, [r2, #0]
 8024698:	fb00 1303 	mla	r3, r0, r3, r1
 802469c:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 80246a0:	9b07      	ldr	r3, [sp, #28]
 80246a2:	3301      	adds	r3, #1
 80246a4:	f023 0301 	bic.w	r3, r3, #1
 80246a8:	9309      	str	r3, [sp, #36]	; 0x24
 80246aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80246ac:	681f      	ldr	r7, [r3, #0]
 80246ae:	eeb0 aa40 	vmov.f32	s20, s0
 80246b2:	eef0 9a60 	vmov.f32	s19, s1
 80246b6:	eeb0 9a41 	vmov.f32	s18, s2
 80246ba:	eeb0 8a62 	vmov.f32	s16, s5
 80246be:	eef0 8a43 	vmov.f32	s17, s6
 80246c2:	eef0 ba44 	vmov.f32	s23, s8
 80246c6:	eeb0 ba64 	vmov.f32	s22, s9
 80246ca:	eef0 aa45 	vmov.f32	s21, s10
 80246ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	dc03      	bgt.n	80246dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80246d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	f340 825c 	ble.w	8024b94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80246dc:	9b06      	ldr	r3, [sp, #24]
 80246de:	2b00      	cmp	r3, #0
 80246e0:	f340 8119 	ble.w	8024916 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2aa>
 80246e4:	1422      	asrs	r2, r4, #16
 80246e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80246ea:	d42d      	bmi.n	8024748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80246ec:	9807      	ldr	r0, [sp, #28]
 80246ee:	1c51      	adds	r1, r2, #1
 80246f0:	4288      	cmp	r0, r1
 80246f2:	dd2c      	ble.n	802474e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	db2a      	blt.n	802474e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80246f8:	9808      	ldr	r0, [sp, #32]
 80246fa:	1c59      	adds	r1, r3, #1
 80246fc:	4288      	cmp	r0, r1
 80246fe:	dd26      	ble.n	802474e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8024700:	9b06      	ldr	r3, [sp, #24]
 8024702:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024704:	3b01      	subs	r3, #1
 8024706:	fb02 4203 	mla	r2, r2, r3, r4
 802470a:	1412      	asrs	r2, r2, #16
 802470c:	d42a      	bmi.n	8024764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802470e:	9907      	ldr	r1, [sp, #28]
 8024710:	3201      	adds	r2, #1
 8024712:	4291      	cmp	r1, r2
 8024714:	dd26      	ble.n	8024764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024716:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024718:	fb02 6303 	mla	r3, r2, r3, r6
 802471c:	141b      	asrs	r3, r3, #16
 802471e:	d421      	bmi.n	8024764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024720:	9a08      	ldr	r2, [sp, #32]
 8024722:	3301      	adds	r3, #1
 8024724:	429a      	cmp	r2, r3
 8024726:	dd1d      	ble.n	8024764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024728:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802472c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024730:	930e      	str	r3, [sp, #56]	; 0x38
 8024732:	46d8      	mov	r8, fp
 8024734:	f1ba 0f00 	cmp.w	sl, #0
 8024738:	f300 8161 	bgt.w	80249fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802473c:	9b06      	ldr	r3, [sp, #24]
 802473e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024742:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8024746:	e0e8      	b.n	802491a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ae>
 8024748:	1c51      	adds	r1, r2, #1
 802474a:	f040 80da 	bne.w	8024902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802474e:	9907      	ldr	r1, [sp, #28]
 8024750:	4291      	cmp	r1, r2
 8024752:	f340 80d6 	ble.w	8024902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8024756:	1c5a      	adds	r2, r3, #1
 8024758:	f2c0 80d3 	blt.w	8024902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802475c:	9a08      	ldr	r2, [sp, #32]
 802475e:	4293      	cmp	r3, r2
 8024760:	f280 80cf 	bge.w	8024902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8024764:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8024768:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802476c:	46d8      	mov	r8, fp
 802476e:	f1b9 0f00 	cmp.w	r9, #0
 8024772:	dde3      	ble.n	802473c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8024774:	1420      	asrs	r0, r4, #16
 8024776:	ea4f 4326 	mov.w	r3, r6, asr #16
 802477a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802477e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024782:	f100 8124 	bmi.w	80249ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8024786:	9d07      	ldr	r5, [sp, #28]
 8024788:	f100 0c01 	add.w	ip, r0, #1
 802478c:	4565      	cmp	r5, ip
 802478e:	f340 8120 	ble.w	80249d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 8024792:	2b00      	cmp	r3, #0
 8024794:	f2c0 811d 	blt.w	80249d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 8024798:	9d08      	ldr	r5, [sp, #32]
 802479a:	f103 0c01 	add.w	ip, r3, #1
 802479e:	4565      	cmp	r5, ip
 80247a0:	f340 8117 	ble.w	80249d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 80247a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80247a6:	fb03 0305 	mla	r3, r3, r5, r0
 80247aa:	0858      	lsrs	r0, r3, #1
 80247ac:	07dd      	lsls	r5, r3, #31
 80247ae:	5c38      	ldrb	r0, [r7, r0]
 80247b0:	bf54      	ite	pl
 80247b2:	f000 000f 	andpl.w	r0, r0, #15
 80247b6:	1100      	asrmi	r0, r0, #4
 80247b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80247bc:	b2c0      	uxtb	r0, r0
 80247be:	2a00      	cmp	r2, #0
 80247c0:	f000 80ea 	beq.w	8024998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32c>
 80247c4:	f103 0e01 	add.w	lr, r3, #1
 80247c8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80247cc:	f01e 0f01 	tst.w	lr, #1
 80247d0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247d4:	bf0c      	ite	eq
 80247d6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80247da:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80247de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80247e2:	fa5f fc8c 	uxtb.w	ip, ip
 80247e6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80247ea:	b1f9      	cbz	r1, 802482c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80247ec:	4453      	add	r3, sl
 80247ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80247f2:	07dd      	lsls	r5, r3, #31
 80247f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80247f8:	bf54      	ite	pl
 80247fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80247fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024802:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024806:	3301      	adds	r3, #1
 8024808:	fa5f fc8c 	uxtb.w	ip, ip
 802480c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8024810:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024814:	07dd      	lsls	r5, r3, #31
 8024816:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802481a:	bf54      	ite	pl
 802481c:	f00c 030f 	andpl.w	r3, ip, #15
 8024820:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024824:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024828:	b2db      	uxtb	r3, r3
 802482a:	9310      	str	r3, [sp, #64]	; 0x40
 802482c:	b292      	uxth	r2, r2
 802482e:	b289      	uxth	r1, r1
 8024830:	fb02 f301 	mul.w	r3, r2, r1
 8024834:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024838:	0112      	lsls	r2, r2, #4
 802483a:	b289      	uxth	r1, r1
 802483c:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8024840:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024842:	1ad2      	subs	r2, r2, r3
 8024844:	ebac 0c01 	sub.w	ip, ip, r1
 8024848:	b292      	uxth	r2, r2
 802484a:	436a      	muls	r2, r5
 802484c:	fa1f fc8c 	uxth.w	ip, ip
 8024850:	fb00 200c 	mla	r0, r0, ip, r2
 8024854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024856:	fb01 0102 	mla	r1, r1, r2, r0
 802485a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802485c:	fb03 1302 	mla	r3, r3, r2, r1
 8024860:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024864:	2b00      	cmp	r3, #0
 8024866:	d043      	beq.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8024868:	4ac9      	ldr	r2, [pc, #804]	; (8024b90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 802486a:	6811      	ldr	r1, [r2, #0]
 802486c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8024870:	08ca      	lsrs	r2, r1, #3
 8024872:	00c9      	lsls	r1, r1, #3
 8024874:	b2c9      	uxtb	r1, r1
 8024876:	2bff      	cmp	r3, #255	; 0xff
 8024878:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802487c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024880:	460d      	mov	r5, r1
 8024882:	f000 809c 	beq.w	80249be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8024886:	f8b8 c000 	ldrh.w	ip, [r8]
 802488a:	b299      	uxth	r1, r3
 802488c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024890:	43db      	mvns	r3, r3
 8024892:	b2db      	uxtb	r3, r3
 8024894:	fb1e fe01 	smulbb	lr, lr, r1
 8024898:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802489c:	fb00 e003 	mla	r0, r0, r3, lr
 80248a0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80248a4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80248a8:	fb12 f201 	smulbb	r2, r2, r1
 80248ac:	fb0e 2203 	mla	r2, lr, r3, r2
 80248b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80248b4:	b292      	uxth	r2, r2
 80248b6:	fb15 f101 	smulbb	r1, r5, r1
 80248ba:	fa5f fc8c 	uxtb.w	ip, ip
 80248be:	b280      	uxth	r0, r0
 80248c0:	fb0c 1303 	mla	r3, ip, r3, r1
 80248c4:	f102 0e01 	add.w	lr, r2, #1
 80248c8:	b29b      	uxth	r3, r3
 80248ca:	1c41      	adds	r1, r0, #1
 80248cc:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80248d0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80248d4:	0952      	lsrs	r2, r2, #5
 80248d6:	1c59      	adds	r1, r3, #1
 80248d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80248e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80248e4:	4310      	orrs	r0, r2
 80248e6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80248ea:	4318      	orrs	r0, r3
 80248ec:	f8a8 0000 	strh.w	r0, [r8]
 80248f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248f2:	441c      	add	r4, r3
 80248f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248f6:	f108 0802 	add.w	r8, r8, #2
 80248fa:	441e      	add	r6, r3
 80248fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8024900:	e735      	b.n	802476e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024902:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024904:	441c      	add	r4, r3
 8024906:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024908:	441e      	add	r6, r3
 802490a:	9b06      	ldr	r3, [sp, #24]
 802490c:	3b01      	subs	r3, #1
 802490e:	9306      	str	r3, [sp, #24]
 8024910:	f10b 0b02 	add.w	fp, fp, #2
 8024914:	e6e2      	b.n	80246dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024916:	f47f aef3 	bne.w	8024700 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802491a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802491c:	2b00      	cmp	r3, #0
 802491e:	f340 8139 	ble.w	8024b94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8024922:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802492a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802492e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024930:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024934:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024938:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802493c:	eef0 6a48 	vmov.f32	s13, s16
 8024940:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024944:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024948:	ee37 8a48 	vsub.f32	s16, s14, s16
 802494c:	ee16 4a90 	vmov	r4, s13
 8024950:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024954:	eef0 6a68 	vmov.f32	s13, s17
 8024958:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802495c:	ee18 2a10 	vmov	r2, s16
 8024960:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024964:	fb92 f3f3 	sdiv	r3, r2, r3
 8024968:	ee18 2a90 	vmov	r2, s17
 802496c:	9329      	str	r3, [sp, #164]	; 0xa4
 802496e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024970:	fb92 f3f3 	sdiv	r3, r2, r3
 8024974:	932a      	str	r3, [sp, #168]	; 0xa8
 8024976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802497a:	3b01      	subs	r3, #1
 802497c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024980:	930a      	str	r3, [sp, #40]	; 0x28
 8024982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024984:	bf08      	it	eq
 8024986:	4613      	moveq	r3, r2
 8024988:	ee16 6a90 	vmov	r6, s13
 802498c:	9306      	str	r3, [sp, #24]
 802498e:	eef0 8a67 	vmov.f32	s17, s15
 8024992:	eeb0 8a47 	vmov.f32	s16, s14
 8024996:	e69a      	b.n	80246ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8024998:	2900      	cmp	r1, #0
 802499a:	f43f af47 	beq.w	802482c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802499e:	4453      	add	r3, sl
 80249a0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249a4:	07db      	lsls	r3, r3, #31
 80249a6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249aa:	bf54      	ite	pl
 80249ac:	f00c 030f 	andpl.w	r3, ip, #15
 80249b0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80249b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80249b8:	b2db      	uxtb	r3, r3
 80249ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80249bc:	e736      	b.n	802482c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 80249be:	00d2      	lsls	r2, r2, #3
 80249c0:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80249c4:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 80249c8:	f8a8 1000 	strh.w	r1, [r8]
 80249cc:	e790      	b.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249ce:	1c45      	adds	r5, r0, #1
 80249d0:	d18e      	bne.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249d2:	9d07      	ldr	r5, [sp, #28]
 80249d4:	4285      	cmp	r5, r0
 80249d6:	dd8b      	ble.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249d8:	1c5d      	adds	r5, r3, #1
 80249da:	db89      	blt.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249dc:	9d08      	ldr	r5, [sp, #32]
 80249de:	429d      	cmp	r5, r3
 80249e0:	dd86      	ble.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80249e6:	9b07      	ldr	r3, [sp, #28]
 80249e8:	9300      	str	r3, [sp, #0]
 80249ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80249ee:	9501      	str	r5, [sp, #4]
 80249f0:	4653      	mov	r3, sl
 80249f2:	463a      	mov	r2, r7
 80249f4:	4641      	mov	r1, r8
 80249f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80249f8:	f7ff fd54 	bl	80244a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80249fc:	e778      	b.n	80248f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80249fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024a00:	1422      	asrs	r2, r4, #16
 8024a02:	1433      	asrs	r3, r6, #16
 8024a04:	fb01 2303 	mla	r3, r1, r3, r2
 8024a08:	085a      	lsrs	r2, r3, #1
 8024a0a:	07d9      	lsls	r1, r3, #31
 8024a0c:	5cba      	ldrb	r2, [r7, r2]
 8024a0e:	bf54      	ite	pl
 8024a10:	f002 020f 	andpl.w	r2, r2, #15
 8024a14:	1112      	asrmi	r2, r2, #4
 8024a16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024a1a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024a1e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024a22:	b2d2      	uxtb	r2, r2
 8024a24:	2800      	cmp	r0, #0
 8024a26:	f000 8099 	beq.w	8024b5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>
 8024a2a:	f103 0e01 	add.w	lr, r3, #1
 8024a2e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8024a32:	f01e 0f01 	tst.w	lr, #1
 8024a36:	5c79      	ldrb	r1, [r7, r1]
 8024a38:	bf0c      	ite	eq
 8024a3a:	f001 010f 	andeq.w	r1, r1, #15
 8024a3e:	1109      	asrne	r1, r1, #4
 8024a40:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a44:	b2c9      	uxtb	r1, r1
 8024a46:	9111      	str	r1, [sp, #68]	; 0x44
 8024a48:	f1bc 0f00 	cmp.w	ip, #0
 8024a4c:	d018      	beq.n	8024a80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024a4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024a50:	440b      	add	r3, r1
 8024a52:	0859      	lsrs	r1, r3, #1
 8024a54:	07dd      	lsls	r5, r3, #31
 8024a56:	5c79      	ldrb	r1, [r7, r1]
 8024a58:	bf54      	ite	pl
 8024a5a:	f001 010f 	andpl.w	r1, r1, #15
 8024a5e:	1109      	asrmi	r1, r1, #4
 8024a60:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a64:	b2c9      	uxtb	r1, r1
 8024a66:	3301      	adds	r3, #1
 8024a68:	910c      	str	r1, [sp, #48]	; 0x30
 8024a6a:	0859      	lsrs	r1, r3, #1
 8024a6c:	07dd      	lsls	r5, r3, #31
 8024a6e:	5c79      	ldrb	r1, [r7, r1]
 8024a70:	bf54      	ite	pl
 8024a72:	f001 010f 	andpl.w	r1, r1, #15
 8024a76:	1109      	asrmi	r1, r1, #4
 8024a78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024a7c:	b2c9      	uxtb	r1, r1
 8024a7e:	9112      	str	r1, [sp, #72]	; 0x48
 8024a80:	b280      	uxth	r0, r0
 8024a82:	fa1f fc8c 	uxth.w	ip, ip
 8024a86:	fb00 f30c 	mul.w	r3, r0, ip
 8024a8a:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024a8e:	0100      	lsls	r0, r0, #4
 8024a90:	fa1f fc8c 	uxth.w	ip, ip
 8024a94:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024a98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a9a:	1ac0      	subs	r0, r0, r3
 8024a9c:	eba1 010c 	sub.w	r1, r1, ip
 8024aa0:	b280      	uxth	r0, r0
 8024aa2:	b289      	uxth	r1, r1
 8024aa4:	4368      	muls	r0, r5
 8024aa6:	fb02 0201 	mla	r2, r2, r1, r0
 8024aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024aac:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024ab0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024ab2:	fb03 c302 	mla	r3, r3, r2, ip
 8024ab6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d045      	beq.n	8024b4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8024abe:	4a34      	ldr	r2, [pc, #208]	; (8024b90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>)
 8024ac0:	6811      	ldr	r1, [r2, #0]
 8024ac2:	2bff      	cmp	r3, #255	; 0xff
 8024ac4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8024ac8:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8024acc:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8024ad0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024ad4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024ad8:	b2c9      	uxtb	r1, r1
 8024ada:	d050      	beq.n	8024b7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8024adc:	f8b8 c000 	ldrh.w	ip, [r8]
 8024ae0:	fa1f f983 	uxth.w	r9, r3
 8024ae4:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024ae8:	43db      	mvns	r3, r3
 8024aea:	b2db      	uxtb	r3, r3
 8024aec:	fb1e fe09 	smulbb	lr, lr, r9
 8024af0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024af4:	fb00 e003 	mla	r0, r0, r3, lr
 8024af8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8024afc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024b00:	fb12 f209 	smulbb	r2, r2, r9
 8024b04:	fb0e 2203 	mla	r2, lr, r3, r2
 8024b08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024b0c:	b292      	uxth	r2, r2
 8024b0e:	fa5f fc8c 	uxtb.w	ip, ip
 8024b12:	fb11 f109 	smulbb	r1, r1, r9
 8024b16:	b280      	uxth	r0, r0
 8024b18:	fb0c 1103 	mla	r1, ip, r3, r1
 8024b1c:	f102 0e01 	add.w	lr, r2, #1
 8024b20:	b289      	uxth	r1, r1
 8024b22:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024b26:	f100 0e01 	add.w	lr, r0, #1
 8024b2a:	0952      	lsrs	r2, r2, #5
 8024b2c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024b30:	1c4b      	adds	r3, r1, #1
 8024b32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b36:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024b3a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024b3e:	4302      	orrs	r2, r0
 8024b40:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024b44:	430a      	orrs	r2, r1
 8024b46:	f8a8 2000 	strh.w	r2, [r8]
 8024b4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b4c:	441c      	add	r4, r3
 8024b4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b50:	f108 0802 	add.w	r8, r8, #2
 8024b54:	441e      	add	r6, r3
 8024b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024b5a:	e5eb      	b.n	8024734 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8024b5c:	f1bc 0f00 	cmp.w	ip, #0
 8024b60:	d08e      	beq.n	8024a80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024b62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b64:	440b      	add	r3, r1
 8024b66:	0859      	lsrs	r1, r3, #1
 8024b68:	07db      	lsls	r3, r3, #31
 8024b6a:	5c79      	ldrb	r1, [r7, r1]
 8024b6c:	bf54      	ite	pl
 8024b6e:	f001 010f 	andpl.w	r1, r1, #15
 8024b72:	1109      	asrmi	r1, r1, #4
 8024b74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b78:	b2c9      	uxtb	r1, r1
 8024b7a:	910c      	str	r1, [sp, #48]	; 0x30
 8024b7c:	e780      	b.n	8024a80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024b7e:	00d2      	lsls	r2, r2, #3
 8024b80:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8024b84:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8024b88:	f8a8 1000 	strh.w	r1, [r8]
 8024b8c:	e7dd      	b.n	8024b4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 8024b8e:	bf00      	nop
 8024b90:	20001360 	.word	0x20001360
 8024b94:	b015      	add	sp, #84	; 0x54
 8024b96:	ecbd 8b08 	vpop	{d8-d11}
 8024b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b9e:	bf00      	nop

08024ba0 <CRC_Lock>:
 8024ba0:	b530      	push	{r4, r5, lr}
 8024ba2:	4a1d      	ldr	r2, [pc, #116]	; (8024c18 <CRC_Lock+0x78>)
 8024ba4:	6813      	ldr	r3, [r2, #0]
 8024ba6:	f023 0301 	bic.w	r3, r3, #1
 8024baa:	6013      	str	r3, [r2, #0]
 8024bac:	4b1b      	ldr	r3, [pc, #108]	; (8024c1c <CRC_Lock+0x7c>)
 8024bae:	681a      	ldr	r2, [r3, #0]
 8024bb0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024bb4:	4022      	ands	r2, r4
 8024bb6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024bba:	42aa      	cmp	r2, r5
 8024bbc:	d005      	beq.n	8024bca <CRC_Lock+0x2a>
 8024bbe:	681b      	ldr	r3, [r3, #0]
 8024bc0:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024bc4:	4023      	ands	r3, r4
 8024bc6:	4293      	cmp	r3, r2
 8024bc8:	d11d      	bne.n	8024c06 <CRC_Lock+0x66>
 8024bca:	4b15      	ldr	r3, [pc, #84]	; (8024c20 <CRC_Lock+0x80>)
 8024bcc:	681b      	ldr	r3, [r3, #0]
 8024bce:	b9d3      	cbnz	r3, 8024c06 <CRC_Lock+0x66>
 8024bd0:	4a14      	ldr	r2, [pc, #80]	; (8024c24 <CRC_Lock+0x84>)
 8024bd2:	6813      	ldr	r3, [r2, #0]
 8024bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024bd8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024bdc:	d006      	beq.n	8024bec <CRC_Lock+0x4c>
 8024bde:	6813      	ldr	r3, [r2, #0]
 8024be0:	f240 4283 	movw	r2, #1155	; 0x483
 8024be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024be8:	4293      	cmp	r3, r2
 8024bea:	d10c      	bne.n	8024c06 <CRC_Lock+0x66>
 8024bec:	4b0e      	ldr	r3, [pc, #56]	; (8024c28 <CRC_Lock+0x88>)
 8024bee:	2201      	movs	r2, #1
 8024bf0:	601a      	str	r2, [r3, #0]
 8024bf2:	681a      	ldr	r2, [r3, #0]
 8024bf4:	2a00      	cmp	r2, #0
 8024bf6:	d1fc      	bne.n	8024bf2 <CRC_Lock+0x52>
 8024bf8:	4b0c      	ldr	r3, [pc, #48]	; (8024c2c <CRC_Lock+0x8c>)
 8024bfa:	6018      	str	r0, [r3, #0]
 8024bfc:	6818      	ldr	r0, [r3, #0]
 8024bfe:	1a43      	subs	r3, r0, r1
 8024c00:	4258      	negs	r0, r3
 8024c02:	4158      	adcs	r0, r3
 8024c04:	bd30      	pop	{r4, r5, pc}
 8024c06:	4b0a      	ldr	r3, [pc, #40]	; (8024c30 <CRC_Lock+0x90>)
 8024c08:	2201      	movs	r2, #1
 8024c0a:	601a      	str	r2, [r3, #0]
 8024c0c:	681a      	ldr	r2, [r3, #0]
 8024c0e:	2a00      	cmp	r2, #0
 8024c10:	d1fc      	bne.n	8024c0c <CRC_Lock+0x6c>
 8024c12:	4b08      	ldr	r3, [pc, #32]	; (8024c34 <CRC_Lock+0x94>)
 8024c14:	e7f1      	b.n	8024bfa <CRC_Lock+0x5a>
 8024c16:	bf00      	nop
 8024c18:	e0002000 	.word	0xe0002000
 8024c1c:	e000ed00 	.word	0xe000ed00
 8024c20:	e0042000 	.word	0xe0042000
 8024c24:	5c001000 	.word	0x5c001000
 8024c28:	58024c08 	.word	0x58024c08
 8024c2c:	58024c00 	.word	0x58024c00
 8024c30:	40023008 	.word	0x40023008
 8024c34:	40023000 	.word	0x40023000

08024c38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024c38:	6101      	str	r1, [r0, #16]
 8024c3a:	4770      	bx	lr

08024c3c <_ZN8touchgfx8Gestures4tickEv>:
 8024c3c:	7b83      	ldrb	r3, [r0, #14]
 8024c3e:	b14b      	cbz	r3, 8024c54 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024c40:	8903      	ldrh	r3, [r0, #8]
 8024c42:	3301      	adds	r3, #1
 8024c44:	b29b      	uxth	r3, r3
 8024c46:	2b07      	cmp	r3, #7
 8024c48:	8103      	strh	r3, [r0, #8]
 8024c4a:	bf81      	itttt	hi
 8024c4c:	2300      	movhi	r3, #0
 8024c4e:	8143      	strhhi	r3, [r0, #10]
 8024c50:	8183      	strhhi	r3, [r0, #12]
 8024c52:	7383      	strbhi	r3, [r0, #14]
 8024c54:	4770      	bx	lr
	...

08024c58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024c58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024c5c:	4604      	mov	r4, r0
 8024c5e:	8880      	ldrh	r0, [r0, #4]
 8024c60:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024c64:	4698      	mov	r8, r3
 8024c66:	eba8 0000 	sub.w	r0, r8, r0
 8024c6a:	4b1c      	ldr	r3, [pc, #112]	; (8024cdc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024c6c:	9300      	str	r3, [sp, #0]
 8024c6e:	b280      	uxth	r0, r0
 8024c70:	2300      	movs	r3, #0
 8024c72:	f88d 3004 	strb.w	r3, [sp, #4]
 8024c76:	b203      	sxth	r3, r0
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	bfb8      	it	lt
 8024c7c:	4240      	neglt	r0, r0
 8024c7e:	4617      	mov	r7, r2
 8024c80:	8aa2      	ldrh	r2, [r4, #20]
 8024c82:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024c86:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024c8a:	bfb8      	it	lt
 8024c8c:	b203      	sxthlt	r3, r0
 8024c8e:	460e      	mov	r6, r1
 8024c90:	4293      	cmp	r3, r2
 8024c92:	88e1      	ldrh	r1, [r4, #6]
 8024c94:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024c98:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024c9c:	dc08      	bgt.n	8024cb0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024c9e:	1a69      	subs	r1, r5, r1
 8024ca0:	b289      	uxth	r1, r1
 8024ca2:	b20b      	sxth	r3, r1
 8024ca4:	2b00      	cmp	r3, #0
 8024ca6:	bfbc      	itt	lt
 8024ca8:	4249      	neglt	r1, r1
 8024caa:	b20b      	sxthlt	r3, r1
 8024cac:	429a      	cmp	r2, r3
 8024cae:	da13      	bge.n	8024cd8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024cb0:	6920      	ldr	r0, [r4, #16]
 8024cb2:	6803      	ldr	r3, [r0, #0]
 8024cb4:	4669      	mov	r1, sp
 8024cb6:	685b      	ldr	r3, [r3, #4]
 8024cb8:	4798      	blx	r3
 8024cba:	eba8 0606 	sub.w	r6, r8, r6
 8024cbe:	2300      	movs	r3, #0
 8024cc0:	1bef      	subs	r7, r5, r7
 8024cc2:	2001      	movs	r0, #1
 8024cc4:	8123      	strh	r3, [r4, #8]
 8024cc6:	8166      	strh	r6, [r4, #10]
 8024cc8:	81a7      	strh	r7, [r4, #12]
 8024cca:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024cce:	80e5      	strh	r5, [r4, #6]
 8024cd0:	73a0      	strb	r0, [r4, #14]
 8024cd2:	b004      	add	sp, #16
 8024cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024cd8:	2000      	movs	r0, #0
 8024cda:	e7fa      	b.n	8024cd2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024cdc:	08053950 	.word	0x08053950

08024ce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ce2:	461e      	mov	r6, r3
 8024ce4:	1e4b      	subs	r3, r1, #1
 8024ce6:	2b01      	cmp	r3, #1
 8024ce8:	b085      	sub	sp, #20
 8024cea:	4604      	mov	r4, r0
 8024cec:	460d      	mov	r5, r1
 8024cee:	4617      	mov	r7, r2
 8024cf0:	d84b      	bhi.n	8024d8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024cf2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024cf6:	1cd3      	adds	r3, r2, #3
 8024cf8:	b29b      	uxth	r3, r3
 8024cfa:	2b06      	cmp	r3, #6
 8024cfc:	d916      	bls.n	8024d2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024cfe:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024da0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024d02:	f8cd c004 	str.w	ip, [sp, #4]
 8024d06:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024d0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024d0e:	6900      	ldr	r0, [r0, #16]
 8024d10:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024d14:	f04f 0c00 	mov.w	ip, #0
 8024d18:	f88d c008 	strb.w	ip, [sp, #8]
 8024d1c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024d20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d24:	6803      	ldr	r3, [r0, #0]
 8024d26:	a901      	add	r1, sp, #4
 8024d28:	689b      	ldr	r3, [r3, #8]
 8024d2a:	4798      	blx	r3
 8024d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024d30:	1cd3      	adds	r3, r2, #3
 8024d32:	b29b      	uxth	r3, r3
 8024d34:	2b06      	cmp	r3, #6
 8024d36:	d916      	bls.n	8024d66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d38:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024da0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024d3c:	f8cd c004 	str.w	ip, [sp, #4]
 8024d40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024d44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024d48:	6920      	ldr	r0, [r4, #16]
 8024d4a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024d4e:	f04f 0c01 	mov.w	ip, #1
 8024d52:	f88d c008 	strb.w	ip, [sp, #8]
 8024d56:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024d5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d5e:	6803      	ldr	r3, [r0, #0]
 8024d60:	a901      	add	r1, sp, #4
 8024d62:	689b      	ldr	r3, [r3, #8]
 8024d64:	4798      	blx	r3
 8024d66:	4b0d      	ldr	r3, [pc, #52]	; (8024d9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024d68:	9301      	str	r3, [sp, #4]
 8024d6a:	6920      	ldr	r0, [r4, #16]
 8024d6c:	f88d 5008 	strb.w	r5, [sp, #8]
 8024d70:	2300      	movs	r3, #0
 8024d72:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024d76:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024d7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d7e:	6803      	ldr	r3, [r0, #0]
 8024d80:	a901      	add	r1, sp, #4
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	4798      	blx	r3
 8024d86:	b005      	add	sp, #20
 8024d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d8a:	2900      	cmp	r1, #0
 8024d8c:	d1eb      	bne.n	8024d66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d8e:	80a2      	strh	r2, [r4, #4]
 8024d90:	80c6      	strh	r6, [r0, #6]
 8024d92:	60a1      	str	r1, [r4, #8]
 8024d94:	81a1      	strh	r1, [r4, #12]
 8024d96:	73a1      	strb	r1, [r4, #14]
 8024d98:	e7e5      	b.n	8024d66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024d9a:	bf00      	nop
 8024d9c:	0805393c 	.word	0x0805393c
 8024da0:	08053964 	.word	0x08053964

08024da4 <__aeabi_atexit>:
 8024da4:	460b      	mov	r3, r1
 8024da6:	4601      	mov	r1, r0
 8024da8:	4618      	mov	r0, r3
 8024daa:	f000 b853 	b.w	8024e54 <__cxa_atexit>

08024dae <__cxa_pure_virtual>:
 8024dae:	b508      	push	{r3, lr}
 8024db0:	f000 f820 	bl	8024df4 <_ZSt9terminatev>

08024db4 <_ZdlPvj>:
 8024db4:	f000 b80f 	b.w	8024dd6 <_ZdlPv>

08024db8 <__cxa_guard_acquire>:
 8024db8:	6803      	ldr	r3, [r0, #0]
 8024dba:	07db      	lsls	r3, r3, #31
 8024dbc:	d406      	bmi.n	8024dcc <__cxa_guard_acquire+0x14>
 8024dbe:	7843      	ldrb	r3, [r0, #1]
 8024dc0:	b103      	cbz	r3, 8024dc4 <__cxa_guard_acquire+0xc>
 8024dc2:	deff      	udf	#255	; 0xff
 8024dc4:	2301      	movs	r3, #1
 8024dc6:	7043      	strb	r3, [r0, #1]
 8024dc8:	4618      	mov	r0, r3
 8024dca:	4770      	bx	lr
 8024dcc:	2000      	movs	r0, #0
 8024dce:	4770      	bx	lr

08024dd0 <__cxa_guard_release>:
 8024dd0:	2301      	movs	r3, #1
 8024dd2:	6003      	str	r3, [r0, #0]
 8024dd4:	4770      	bx	lr

08024dd6 <_ZdlPv>:
 8024dd6:	f000 b88f 	b.w	8024ef8 <free>

08024dda <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024dda:	b508      	push	{r3, lr}
 8024ddc:	4780      	blx	r0
 8024dde:	f000 f80e 	bl	8024dfe <abort>
	...

08024de4 <_ZSt13get_terminatev>:
 8024de4:	4b02      	ldr	r3, [pc, #8]	; (8024df0 <_ZSt13get_terminatev+0xc>)
 8024de6:	6818      	ldr	r0, [r3, #0]
 8024de8:	f3bf 8f5b 	dmb	ish
 8024dec:	4770      	bx	lr
 8024dee:	bf00      	nop
 8024df0:	200000a8 	.word	0x200000a8

08024df4 <_ZSt9terminatev>:
 8024df4:	b508      	push	{r3, lr}
 8024df6:	f7ff fff5 	bl	8024de4 <_ZSt13get_terminatev>
 8024dfa:	f7ff ffee 	bl	8024dda <_ZN10__cxxabiv111__terminateEPFvvE>

08024dfe <abort>:
 8024dfe:	b508      	push	{r3, lr}
 8024e00:	2006      	movs	r0, #6
 8024e02:	f000 fcb9 	bl	8025778 <raise>
 8024e06:	2001      	movs	r0, #1
 8024e08:	f7dc fe78 	bl	8001afc <_exit>

08024e0c <__assert_func>:
 8024e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024e0e:	461c      	mov	r4, r3
 8024e10:	4b09      	ldr	r3, [pc, #36]	; (8024e38 <__assert_func+0x2c>)
 8024e12:	681b      	ldr	r3, [r3, #0]
 8024e14:	4605      	mov	r5, r0
 8024e16:	68d8      	ldr	r0, [r3, #12]
 8024e18:	b152      	cbz	r2, 8024e30 <__assert_func+0x24>
 8024e1a:	4b08      	ldr	r3, [pc, #32]	; (8024e3c <__assert_func+0x30>)
 8024e1c:	9100      	str	r1, [sp, #0]
 8024e1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024e22:	4907      	ldr	r1, [pc, #28]	; (8024e40 <__assert_func+0x34>)
 8024e24:	462b      	mov	r3, r5
 8024e26:	4622      	mov	r2, r4
 8024e28:	f000 f828 	bl	8024e7c <fiprintf>
 8024e2c:	f7ff ffe7 	bl	8024dfe <abort>
 8024e30:	4b04      	ldr	r3, [pc, #16]	; (8024e44 <__assert_func+0x38>)
 8024e32:	461a      	mov	r2, r3
 8024e34:	e7f2      	b.n	8024e1c <__assert_func+0x10>
 8024e36:	bf00      	nop
 8024e38:	200000ac 	.word	0x200000ac
 8024e3c:	08054c18 	.word	0x08054c18
 8024e40:	08054c25 	.word	0x08054c25
 8024e44:	08054c53 	.word	0x08054c53

08024e48 <atexit>:
 8024e48:	2300      	movs	r3, #0
 8024e4a:	4601      	mov	r1, r0
 8024e4c:	461a      	mov	r2, r3
 8024e4e:	4618      	mov	r0, r3
 8024e50:	f000 bd6e 	b.w	8025930 <__register_exitproc>

08024e54 <__cxa_atexit>:
 8024e54:	b510      	push	{r4, lr}
 8024e56:	4c05      	ldr	r4, [pc, #20]	; (8024e6c <__cxa_atexit+0x18>)
 8024e58:	4613      	mov	r3, r2
 8024e5a:	b12c      	cbz	r4, 8024e68 <__cxa_atexit+0x14>
 8024e5c:	460a      	mov	r2, r1
 8024e5e:	4601      	mov	r1, r0
 8024e60:	2002      	movs	r0, #2
 8024e62:	f000 fd65 	bl	8025930 <__register_exitproc>
 8024e66:	bd10      	pop	{r4, pc}
 8024e68:	4620      	mov	r0, r4
 8024e6a:	e7fc      	b.n	8024e66 <__cxa_atexit+0x12>
 8024e6c:	08025931 	.word	0x08025931

08024e70 <__errno>:
 8024e70:	4b01      	ldr	r3, [pc, #4]	; (8024e78 <__errno+0x8>)
 8024e72:	6818      	ldr	r0, [r3, #0]
 8024e74:	4770      	bx	lr
 8024e76:	bf00      	nop
 8024e78:	200000ac 	.word	0x200000ac

08024e7c <fiprintf>:
 8024e7c:	b40e      	push	{r1, r2, r3}
 8024e7e:	b503      	push	{r0, r1, lr}
 8024e80:	4601      	mov	r1, r0
 8024e82:	ab03      	add	r3, sp, #12
 8024e84:	4805      	ldr	r0, [pc, #20]	; (8024e9c <fiprintf+0x20>)
 8024e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e8a:	6800      	ldr	r0, [r0, #0]
 8024e8c:	9301      	str	r3, [sp, #4]
 8024e8e:	f000 f921 	bl	80250d4 <_vfiprintf_r>
 8024e92:	b002      	add	sp, #8
 8024e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e98:	b003      	add	sp, #12
 8024e9a:	4770      	bx	lr
 8024e9c:	200000ac 	.word	0x200000ac

08024ea0 <__libc_init_array>:
 8024ea0:	b570      	push	{r4, r5, r6, lr}
 8024ea2:	4e0d      	ldr	r6, [pc, #52]	; (8024ed8 <__libc_init_array+0x38>)
 8024ea4:	4c0d      	ldr	r4, [pc, #52]	; (8024edc <__libc_init_array+0x3c>)
 8024ea6:	1ba4      	subs	r4, r4, r6
 8024ea8:	10a4      	asrs	r4, r4, #2
 8024eaa:	2500      	movs	r5, #0
 8024eac:	42a5      	cmp	r5, r4
 8024eae:	d109      	bne.n	8024ec4 <__libc_init_array+0x24>
 8024eb0:	4e0b      	ldr	r6, [pc, #44]	; (8024ee0 <__libc_init_array+0x40>)
 8024eb2:	4c0c      	ldr	r4, [pc, #48]	; (8024ee4 <__libc_init_array+0x44>)
 8024eb4:	f001 f82c 	bl	8025f10 <_init>
 8024eb8:	1ba4      	subs	r4, r4, r6
 8024eba:	10a4      	asrs	r4, r4, #2
 8024ebc:	2500      	movs	r5, #0
 8024ebe:	42a5      	cmp	r5, r4
 8024ec0:	d105      	bne.n	8024ece <__libc_init_array+0x2e>
 8024ec2:	bd70      	pop	{r4, r5, r6, pc}
 8024ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024ec8:	4798      	blx	r3
 8024eca:	3501      	adds	r5, #1
 8024ecc:	e7ee      	b.n	8024eac <__libc_init_array+0xc>
 8024ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024ed2:	4798      	blx	r3
 8024ed4:	3501      	adds	r5, #1
 8024ed6:	e7f2      	b.n	8024ebe <__libc_init_array+0x1e>
 8024ed8:	0808a2b0 	.word	0x0808a2b0
 8024edc:	0808a2b0 	.word	0x0808a2b0
 8024ee0:	0808a2b0 	.word	0x0808a2b0
 8024ee4:	0808a2c4 	.word	0x0808a2c4

08024ee8 <malloc>:
 8024ee8:	4b02      	ldr	r3, [pc, #8]	; (8024ef4 <malloc+0xc>)
 8024eea:	4601      	mov	r1, r0
 8024eec:	6818      	ldr	r0, [r3, #0]
 8024eee:	f000 b86d 	b.w	8024fcc <_malloc_r>
 8024ef2:	bf00      	nop
 8024ef4:	200000ac 	.word	0x200000ac

08024ef8 <free>:
 8024ef8:	4b02      	ldr	r3, [pc, #8]	; (8024f04 <free+0xc>)
 8024efa:	4601      	mov	r1, r0
 8024efc:	6818      	ldr	r0, [r3, #0]
 8024efe:	f000 b817 	b.w	8024f30 <_free_r>
 8024f02:	bf00      	nop
 8024f04:	200000ac 	.word	0x200000ac

08024f08 <memcpy>:
 8024f08:	b510      	push	{r4, lr}
 8024f0a:	1e43      	subs	r3, r0, #1
 8024f0c:	440a      	add	r2, r1
 8024f0e:	4291      	cmp	r1, r2
 8024f10:	d100      	bne.n	8024f14 <memcpy+0xc>
 8024f12:	bd10      	pop	{r4, pc}
 8024f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024f1c:	e7f7      	b.n	8024f0e <memcpy+0x6>

08024f1e <memset>:
 8024f1e:	4402      	add	r2, r0
 8024f20:	4603      	mov	r3, r0
 8024f22:	4293      	cmp	r3, r2
 8024f24:	d100      	bne.n	8024f28 <memset+0xa>
 8024f26:	4770      	bx	lr
 8024f28:	f803 1b01 	strb.w	r1, [r3], #1
 8024f2c:	e7f9      	b.n	8024f22 <memset+0x4>
	...

08024f30 <_free_r>:
 8024f30:	b538      	push	{r3, r4, r5, lr}
 8024f32:	4605      	mov	r5, r0
 8024f34:	2900      	cmp	r1, #0
 8024f36:	d045      	beq.n	8024fc4 <_free_r+0x94>
 8024f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f3c:	1f0c      	subs	r4, r1, #4
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	bfb8      	it	lt
 8024f42:	18e4      	addlt	r4, r4, r3
 8024f44:	f000 ff36 	bl	8025db4 <__malloc_lock>
 8024f48:	4a1f      	ldr	r2, [pc, #124]	; (8024fc8 <_free_r+0x98>)
 8024f4a:	6813      	ldr	r3, [r2, #0]
 8024f4c:	4610      	mov	r0, r2
 8024f4e:	b933      	cbnz	r3, 8024f5e <_free_r+0x2e>
 8024f50:	6063      	str	r3, [r4, #4]
 8024f52:	6014      	str	r4, [r2, #0]
 8024f54:	4628      	mov	r0, r5
 8024f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f5a:	f000 bf2c 	b.w	8025db6 <__malloc_unlock>
 8024f5e:	42a3      	cmp	r3, r4
 8024f60:	d90c      	bls.n	8024f7c <_free_r+0x4c>
 8024f62:	6821      	ldr	r1, [r4, #0]
 8024f64:	1862      	adds	r2, r4, r1
 8024f66:	4293      	cmp	r3, r2
 8024f68:	bf04      	itt	eq
 8024f6a:	681a      	ldreq	r2, [r3, #0]
 8024f6c:	685b      	ldreq	r3, [r3, #4]
 8024f6e:	6063      	str	r3, [r4, #4]
 8024f70:	bf04      	itt	eq
 8024f72:	1852      	addeq	r2, r2, r1
 8024f74:	6022      	streq	r2, [r4, #0]
 8024f76:	6004      	str	r4, [r0, #0]
 8024f78:	e7ec      	b.n	8024f54 <_free_r+0x24>
 8024f7a:	4613      	mov	r3, r2
 8024f7c:	685a      	ldr	r2, [r3, #4]
 8024f7e:	b10a      	cbz	r2, 8024f84 <_free_r+0x54>
 8024f80:	42a2      	cmp	r2, r4
 8024f82:	d9fa      	bls.n	8024f7a <_free_r+0x4a>
 8024f84:	6819      	ldr	r1, [r3, #0]
 8024f86:	1858      	adds	r0, r3, r1
 8024f88:	42a0      	cmp	r0, r4
 8024f8a:	d10b      	bne.n	8024fa4 <_free_r+0x74>
 8024f8c:	6820      	ldr	r0, [r4, #0]
 8024f8e:	4401      	add	r1, r0
 8024f90:	1858      	adds	r0, r3, r1
 8024f92:	4282      	cmp	r2, r0
 8024f94:	6019      	str	r1, [r3, #0]
 8024f96:	d1dd      	bne.n	8024f54 <_free_r+0x24>
 8024f98:	6810      	ldr	r0, [r2, #0]
 8024f9a:	6852      	ldr	r2, [r2, #4]
 8024f9c:	605a      	str	r2, [r3, #4]
 8024f9e:	4401      	add	r1, r0
 8024fa0:	6019      	str	r1, [r3, #0]
 8024fa2:	e7d7      	b.n	8024f54 <_free_r+0x24>
 8024fa4:	d902      	bls.n	8024fac <_free_r+0x7c>
 8024fa6:	230c      	movs	r3, #12
 8024fa8:	602b      	str	r3, [r5, #0]
 8024faa:	e7d3      	b.n	8024f54 <_free_r+0x24>
 8024fac:	6820      	ldr	r0, [r4, #0]
 8024fae:	1821      	adds	r1, r4, r0
 8024fb0:	428a      	cmp	r2, r1
 8024fb2:	bf04      	itt	eq
 8024fb4:	6811      	ldreq	r1, [r2, #0]
 8024fb6:	6852      	ldreq	r2, [r2, #4]
 8024fb8:	6062      	str	r2, [r4, #4]
 8024fba:	bf04      	itt	eq
 8024fbc:	1809      	addeq	r1, r1, r0
 8024fbe:	6021      	streq	r1, [r4, #0]
 8024fc0:	605c      	str	r4, [r3, #4]
 8024fc2:	e7c7      	b.n	8024f54 <_free_r+0x24>
 8024fc4:	bd38      	pop	{r3, r4, r5, pc}
 8024fc6:	bf00      	nop
 8024fc8:	20001474 	.word	0x20001474

08024fcc <_malloc_r>:
 8024fcc:	b570      	push	{r4, r5, r6, lr}
 8024fce:	1ccd      	adds	r5, r1, #3
 8024fd0:	f025 0503 	bic.w	r5, r5, #3
 8024fd4:	3508      	adds	r5, #8
 8024fd6:	2d0c      	cmp	r5, #12
 8024fd8:	bf38      	it	cc
 8024fda:	250c      	movcc	r5, #12
 8024fdc:	2d00      	cmp	r5, #0
 8024fde:	4606      	mov	r6, r0
 8024fe0:	db01      	blt.n	8024fe6 <_malloc_r+0x1a>
 8024fe2:	42a9      	cmp	r1, r5
 8024fe4:	d903      	bls.n	8024fee <_malloc_r+0x22>
 8024fe6:	230c      	movs	r3, #12
 8024fe8:	6033      	str	r3, [r6, #0]
 8024fea:	2000      	movs	r0, #0
 8024fec:	bd70      	pop	{r4, r5, r6, pc}
 8024fee:	f000 fee1 	bl	8025db4 <__malloc_lock>
 8024ff2:	4a21      	ldr	r2, [pc, #132]	; (8025078 <_malloc_r+0xac>)
 8024ff4:	6814      	ldr	r4, [r2, #0]
 8024ff6:	4621      	mov	r1, r4
 8024ff8:	b991      	cbnz	r1, 8025020 <_malloc_r+0x54>
 8024ffa:	4c20      	ldr	r4, [pc, #128]	; (802507c <_malloc_r+0xb0>)
 8024ffc:	6823      	ldr	r3, [r4, #0]
 8024ffe:	b91b      	cbnz	r3, 8025008 <_malloc_r+0x3c>
 8025000:	4630      	mov	r0, r6
 8025002:	f000 fb81 	bl	8025708 <_sbrk_r>
 8025006:	6020      	str	r0, [r4, #0]
 8025008:	4629      	mov	r1, r5
 802500a:	4630      	mov	r0, r6
 802500c:	f000 fb7c 	bl	8025708 <_sbrk_r>
 8025010:	1c43      	adds	r3, r0, #1
 8025012:	d124      	bne.n	802505e <_malloc_r+0x92>
 8025014:	230c      	movs	r3, #12
 8025016:	6033      	str	r3, [r6, #0]
 8025018:	4630      	mov	r0, r6
 802501a:	f000 fecc 	bl	8025db6 <__malloc_unlock>
 802501e:	e7e4      	b.n	8024fea <_malloc_r+0x1e>
 8025020:	680b      	ldr	r3, [r1, #0]
 8025022:	1b5b      	subs	r3, r3, r5
 8025024:	d418      	bmi.n	8025058 <_malloc_r+0x8c>
 8025026:	2b0b      	cmp	r3, #11
 8025028:	d90f      	bls.n	802504a <_malloc_r+0x7e>
 802502a:	600b      	str	r3, [r1, #0]
 802502c:	50cd      	str	r5, [r1, r3]
 802502e:	18cc      	adds	r4, r1, r3
 8025030:	4630      	mov	r0, r6
 8025032:	f000 fec0 	bl	8025db6 <__malloc_unlock>
 8025036:	f104 000b 	add.w	r0, r4, #11
 802503a:	1d23      	adds	r3, r4, #4
 802503c:	f020 0007 	bic.w	r0, r0, #7
 8025040:	1ac3      	subs	r3, r0, r3
 8025042:	d0d3      	beq.n	8024fec <_malloc_r+0x20>
 8025044:	425a      	negs	r2, r3
 8025046:	50e2      	str	r2, [r4, r3]
 8025048:	e7d0      	b.n	8024fec <_malloc_r+0x20>
 802504a:	428c      	cmp	r4, r1
 802504c:	684b      	ldr	r3, [r1, #4]
 802504e:	bf16      	itet	ne
 8025050:	6063      	strne	r3, [r4, #4]
 8025052:	6013      	streq	r3, [r2, #0]
 8025054:	460c      	movne	r4, r1
 8025056:	e7eb      	b.n	8025030 <_malloc_r+0x64>
 8025058:	460c      	mov	r4, r1
 802505a:	6849      	ldr	r1, [r1, #4]
 802505c:	e7cc      	b.n	8024ff8 <_malloc_r+0x2c>
 802505e:	1cc4      	adds	r4, r0, #3
 8025060:	f024 0403 	bic.w	r4, r4, #3
 8025064:	42a0      	cmp	r0, r4
 8025066:	d005      	beq.n	8025074 <_malloc_r+0xa8>
 8025068:	1a21      	subs	r1, r4, r0
 802506a:	4630      	mov	r0, r6
 802506c:	f000 fb4c 	bl	8025708 <_sbrk_r>
 8025070:	3001      	adds	r0, #1
 8025072:	d0cf      	beq.n	8025014 <_malloc_r+0x48>
 8025074:	6025      	str	r5, [r4, #0]
 8025076:	e7db      	b.n	8025030 <_malloc_r+0x64>
 8025078:	20001474 	.word	0x20001474
 802507c:	20001478 	.word	0x20001478

08025080 <__sfputc_r>:
 8025080:	6893      	ldr	r3, [r2, #8]
 8025082:	3b01      	subs	r3, #1
 8025084:	2b00      	cmp	r3, #0
 8025086:	b410      	push	{r4}
 8025088:	6093      	str	r3, [r2, #8]
 802508a:	da08      	bge.n	802509e <__sfputc_r+0x1e>
 802508c:	6994      	ldr	r4, [r2, #24]
 802508e:	42a3      	cmp	r3, r4
 8025090:	db01      	blt.n	8025096 <__sfputc_r+0x16>
 8025092:	290a      	cmp	r1, #10
 8025094:	d103      	bne.n	802509e <__sfputc_r+0x1e>
 8025096:	f85d 4b04 	ldr.w	r4, [sp], #4
 802509a:	f000 bb89 	b.w	80257b0 <__swbuf_r>
 802509e:	6813      	ldr	r3, [r2, #0]
 80250a0:	1c58      	adds	r0, r3, #1
 80250a2:	6010      	str	r0, [r2, #0]
 80250a4:	7019      	strb	r1, [r3, #0]
 80250a6:	4608      	mov	r0, r1
 80250a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80250ac:	4770      	bx	lr

080250ae <__sfputs_r>:
 80250ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250b0:	4606      	mov	r6, r0
 80250b2:	460f      	mov	r7, r1
 80250b4:	4614      	mov	r4, r2
 80250b6:	18d5      	adds	r5, r2, r3
 80250b8:	42ac      	cmp	r4, r5
 80250ba:	d101      	bne.n	80250c0 <__sfputs_r+0x12>
 80250bc:	2000      	movs	r0, #0
 80250be:	e007      	b.n	80250d0 <__sfputs_r+0x22>
 80250c0:	463a      	mov	r2, r7
 80250c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80250c6:	4630      	mov	r0, r6
 80250c8:	f7ff ffda 	bl	8025080 <__sfputc_r>
 80250cc:	1c43      	adds	r3, r0, #1
 80250ce:	d1f3      	bne.n	80250b8 <__sfputs_r+0xa>
 80250d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080250d4 <_vfiprintf_r>:
 80250d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250d8:	460c      	mov	r4, r1
 80250da:	b09d      	sub	sp, #116	; 0x74
 80250dc:	4617      	mov	r7, r2
 80250de:	461d      	mov	r5, r3
 80250e0:	4606      	mov	r6, r0
 80250e2:	b118      	cbz	r0, 80250ec <_vfiprintf_r+0x18>
 80250e4:	6983      	ldr	r3, [r0, #24]
 80250e6:	b90b      	cbnz	r3, 80250ec <_vfiprintf_r+0x18>
 80250e8:	f000 fd76 	bl	8025bd8 <__sinit>
 80250ec:	4b7c      	ldr	r3, [pc, #496]	; (80252e0 <_vfiprintf_r+0x20c>)
 80250ee:	429c      	cmp	r4, r3
 80250f0:	d158      	bne.n	80251a4 <_vfiprintf_r+0xd0>
 80250f2:	6874      	ldr	r4, [r6, #4]
 80250f4:	89a3      	ldrh	r3, [r4, #12]
 80250f6:	0718      	lsls	r0, r3, #28
 80250f8:	d55e      	bpl.n	80251b8 <_vfiprintf_r+0xe4>
 80250fa:	6923      	ldr	r3, [r4, #16]
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d05b      	beq.n	80251b8 <_vfiprintf_r+0xe4>
 8025100:	2300      	movs	r3, #0
 8025102:	9309      	str	r3, [sp, #36]	; 0x24
 8025104:	2320      	movs	r3, #32
 8025106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802510a:	2330      	movs	r3, #48	; 0x30
 802510c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025110:	9503      	str	r5, [sp, #12]
 8025112:	f04f 0b01 	mov.w	fp, #1
 8025116:	46b8      	mov	r8, r7
 8025118:	4645      	mov	r5, r8
 802511a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802511e:	b10b      	cbz	r3, 8025124 <_vfiprintf_r+0x50>
 8025120:	2b25      	cmp	r3, #37	; 0x25
 8025122:	d154      	bne.n	80251ce <_vfiprintf_r+0xfa>
 8025124:	ebb8 0a07 	subs.w	sl, r8, r7
 8025128:	d00b      	beq.n	8025142 <_vfiprintf_r+0x6e>
 802512a:	4653      	mov	r3, sl
 802512c:	463a      	mov	r2, r7
 802512e:	4621      	mov	r1, r4
 8025130:	4630      	mov	r0, r6
 8025132:	f7ff ffbc 	bl	80250ae <__sfputs_r>
 8025136:	3001      	adds	r0, #1
 8025138:	f000 80c2 	beq.w	80252c0 <_vfiprintf_r+0x1ec>
 802513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802513e:	4453      	add	r3, sl
 8025140:	9309      	str	r3, [sp, #36]	; 0x24
 8025142:	f898 3000 	ldrb.w	r3, [r8]
 8025146:	2b00      	cmp	r3, #0
 8025148:	f000 80ba 	beq.w	80252c0 <_vfiprintf_r+0x1ec>
 802514c:	2300      	movs	r3, #0
 802514e:	f04f 32ff 	mov.w	r2, #4294967295
 8025152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025156:	9304      	str	r3, [sp, #16]
 8025158:	9307      	str	r3, [sp, #28]
 802515a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802515e:	931a      	str	r3, [sp, #104]	; 0x68
 8025160:	46a8      	mov	r8, r5
 8025162:	2205      	movs	r2, #5
 8025164:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025168:	485e      	ldr	r0, [pc, #376]	; (80252e4 <_vfiprintf_r+0x210>)
 802516a:	f7db f841 	bl	80001f0 <memchr>
 802516e:	9b04      	ldr	r3, [sp, #16]
 8025170:	bb78      	cbnz	r0, 80251d2 <_vfiprintf_r+0xfe>
 8025172:	06d9      	lsls	r1, r3, #27
 8025174:	bf44      	itt	mi
 8025176:	2220      	movmi	r2, #32
 8025178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802517c:	071a      	lsls	r2, r3, #28
 802517e:	bf44      	itt	mi
 8025180:	222b      	movmi	r2, #43	; 0x2b
 8025182:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025186:	782a      	ldrb	r2, [r5, #0]
 8025188:	2a2a      	cmp	r2, #42	; 0x2a
 802518a:	d02a      	beq.n	80251e2 <_vfiprintf_r+0x10e>
 802518c:	9a07      	ldr	r2, [sp, #28]
 802518e:	46a8      	mov	r8, r5
 8025190:	2000      	movs	r0, #0
 8025192:	250a      	movs	r5, #10
 8025194:	4641      	mov	r1, r8
 8025196:	f811 3b01 	ldrb.w	r3, [r1], #1
 802519a:	3b30      	subs	r3, #48	; 0x30
 802519c:	2b09      	cmp	r3, #9
 802519e:	d969      	bls.n	8025274 <_vfiprintf_r+0x1a0>
 80251a0:	b360      	cbz	r0, 80251fc <_vfiprintf_r+0x128>
 80251a2:	e024      	b.n	80251ee <_vfiprintf_r+0x11a>
 80251a4:	4b50      	ldr	r3, [pc, #320]	; (80252e8 <_vfiprintf_r+0x214>)
 80251a6:	429c      	cmp	r4, r3
 80251a8:	d101      	bne.n	80251ae <_vfiprintf_r+0xda>
 80251aa:	68b4      	ldr	r4, [r6, #8]
 80251ac:	e7a2      	b.n	80250f4 <_vfiprintf_r+0x20>
 80251ae:	4b4f      	ldr	r3, [pc, #316]	; (80252ec <_vfiprintf_r+0x218>)
 80251b0:	429c      	cmp	r4, r3
 80251b2:	bf08      	it	eq
 80251b4:	68f4      	ldreq	r4, [r6, #12]
 80251b6:	e79d      	b.n	80250f4 <_vfiprintf_r+0x20>
 80251b8:	4621      	mov	r1, r4
 80251ba:	4630      	mov	r0, r6
 80251bc:	f000 fb4a 	bl	8025854 <__swsetup_r>
 80251c0:	2800      	cmp	r0, #0
 80251c2:	d09d      	beq.n	8025100 <_vfiprintf_r+0x2c>
 80251c4:	f04f 30ff 	mov.w	r0, #4294967295
 80251c8:	b01d      	add	sp, #116	; 0x74
 80251ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251ce:	46a8      	mov	r8, r5
 80251d0:	e7a2      	b.n	8025118 <_vfiprintf_r+0x44>
 80251d2:	4a44      	ldr	r2, [pc, #272]	; (80252e4 <_vfiprintf_r+0x210>)
 80251d4:	1a80      	subs	r0, r0, r2
 80251d6:	fa0b f000 	lsl.w	r0, fp, r0
 80251da:	4318      	orrs	r0, r3
 80251dc:	9004      	str	r0, [sp, #16]
 80251de:	4645      	mov	r5, r8
 80251e0:	e7be      	b.n	8025160 <_vfiprintf_r+0x8c>
 80251e2:	9a03      	ldr	r2, [sp, #12]
 80251e4:	1d11      	adds	r1, r2, #4
 80251e6:	6812      	ldr	r2, [r2, #0]
 80251e8:	9103      	str	r1, [sp, #12]
 80251ea:	2a00      	cmp	r2, #0
 80251ec:	db01      	blt.n	80251f2 <_vfiprintf_r+0x11e>
 80251ee:	9207      	str	r2, [sp, #28]
 80251f0:	e004      	b.n	80251fc <_vfiprintf_r+0x128>
 80251f2:	4252      	negs	r2, r2
 80251f4:	f043 0302 	orr.w	r3, r3, #2
 80251f8:	9207      	str	r2, [sp, #28]
 80251fa:	9304      	str	r3, [sp, #16]
 80251fc:	f898 3000 	ldrb.w	r3, [r8]
 8025200:	2b2e      	cmp	r3, #46	; 0x2e
 8025202:	d10e      	bne.n	8025222 <_vfiprintf_r+0x14e>
 8025204:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025208:	2b2a      	cmp	r3, #42	; 0x2a
 802520a:	d138      	bne.n	802527e <_vfiprintf_r+0x1aa>
 802520c:	9b03      	ldr	r3, [sp, #12]
 802520e:	1d1a      	adds	r2, r3, #4
 8025210:	681b      	ldr	r3, [r3, #0]
 8025212:	9203      	str	r2, [sp, #12]
 8025214:	2b00      	cmp	r3, #0
 8025216:	bfb8      	it	lt
 8025218:	f04f 33ff 	movlt.w	r3, #4294967295
 802521c:	f108 0802 	add.w	r8, r8, #2
 8025220:	9305      	str	r3, [sp, #20]
 8025222:	4d33      	ldr	r5, [pc, #204]	; (80252f0 <_vfiprintf_r+0x21c>)
 8025224:	f898 1000 	ldrb.w	r1, [r8]
 8025228:	2203      	movs	r2, #3
 802522a:	4628      	mov	r0, r5
 802522c:	f7da ffe0 	bl	80001f0 <memchr>
 8025230:	b140      	cbz	r0, 8025244 <_vfiprintf_r+0x170>
 8025232:	2340      	movs	r3, #64	; 0x40
 8025234:	1b40      	subs	r0, r0, r5
 8025236:	fa03 f000 	lsl.w	r0, r3, r0
 802523a:	9b04      	ldr	r3, [sp, #16]
 802523c:	4303      	orrs	r3, r0
 802523e:	f108 0801 	add.w	r8, r8, #1
 8025242:	9304      	str	r3, [sp, #16]
 8025244:	f898 1000 	ldrb.w	r1, [r8]
 8025248:	482a      	ldr	r0, [pc, #168]	; (80252f4 <_vfiprintf_r+0x220>)
 802524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802524e:	2206      	movs	r2, #6
 8025250:	f108 0701 	add.w	r7, r8, #1
 8025254:	f7da ffcc 	bl	80001f0 <memchr>
 8025258:	2800      	cmp	r0, #0
 802525a:	d037      	beq.n	80252cc <_vfiprintf_r+0x1f8>
 802525c:	4b26      	ldr	r3, [pc, #152]	; (80252f8 <_vfiprintf_r+0x224>)
 802525e:	bb1b      	cbnz	r3, 80252a8 <_vfiprintf_r+0x1d4>
 8025260:	9b03      	ldr	r3, [sp, #12]
 8025262:	3307      	adds	r3, #7
 8025264:	f023 0307 	bic.w	r3, r3, #7
 8025268:	3308      	adds	r3, #8
 802526a:	9303      	str	r3, [sp, #12]
 802526c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802526e:	444b      	add	r3, r9
 8025270:	9309      	str	r3, [sp, #36]	; 0x24
 8025272:	e750      	b.n	8025116 <_vfiprintf_r+0x42>
 8025274:	fb05 3202 	mla	r2, r5, r2, r3
 8025278:	2001      	movs	r0, #1
 802527a:	4688      	mov	r8, r1
 802527c:	e78a      	b.n	8025194 <_vfiprintf_r+0xc0>
 802527e:	2300      	movs	r3, #0
 8025280:	f108 0801 	add.w	r8, r8, #1
 8025284:	9305      	str	r3, [sp, #20]
 8025286:	4619      	mov	r1, r3
 8025288:	250a      	movs	r5, #10
 802528a:	4640      	mov	r0, r8
 802528c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025290:	3a30      	subs	r2, #48	; 0x30
 8025292:	2a09      	cmp	r2, #9
 8025294:	d903      	bls.n	802529e <_vfiprintf_r+0x1ca>
 8025296:	2b00      	cmp	r3, #0
 8025298:	d0c3      	beq.n	8025222 <_vfiprintf_r+0x14e>
 802529a:	9105      	str	r1, [sp, #20]
 802529c:	e7c1      	b.n	8025222 <_vfiprintf_r+0x14e>
 802529e:	fb05 2101 	mla	r1, r5, r1, r2
 80252a2:	2301      	movs	r3, #1
 80252a4:	4680      	mov	r8, r0
 80252a6:	e7f0      	b.n	802528a <_vfiprintf_r+0x1b6>
 80252a8:	ab03      	add	r3, sp, #12
 80252aa:	9300      	str	r3, [sp, #0]
 80252ac:	4622      	mov	r2, r4
 80252ae:	4b13      	ldr	r3, [pc, #76]	; (80252fc <_vfiprintf_r+0x228>)
 80252b0:	a904      	add	r1, sp, #16
 80252b2:	4630      	mov	r0, r6
 80252b4:	f3af 8000 	nop.w
 80252b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80252bc:	4681      	mov	r9, r0
 80252be:	d1d5      	bne.n	802526c <_vfiprintf_r+0x198>
 80252c0:	89a3      	ldrh	r3, [r4, #12]
 80252c2:	065b      	lsls	r3, r3, #25
 80252c4:	f53f af7e 	bmi.w	80251c4 <_vfiprintf_r+0xf0>
 80252c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80252ca:	e77d      	b.n	80251c8 <_vfiprintf_r+0xf4>
 80252cc:	ab03      	add	r3, sp, #12
 80252ce:	9300      	str	r3, [sp, #0]
 80252d0:	4622      	mov	r2, r4
 80252d2:	4b0a      	ldr	r3, [pc, #40]	; (80252fc <_vfiprintf_r+0x228>)
 80252d4:	a904      	add	r1, sp, #16
 80252d6:	4630      	mov	r0, r6
 80252d8:	f000 f888 	bl	80253ec <_printf_i>
 80252dc:	e7ec      	b.n	80252b8 <_vfiprintf_r+0x1e4>
 80252de:	bf00      	nop
 80252e0:	08054cb0 	.word	0x08054cb0
 80252e4:	08054c58 	.word	0x08054c58
 80252e8:	08054cd0 	.word	0x08054cd0
 80252ec:	08054c90 	.word	0x08054c90
 80252f0:	08054c5e 	.word	0x08054c5e
 80252f4:	08054c62 	.word	0x08054c62
 80252f8:	00000000 	.word	0x00000000
 80252fc:	080250af 	.word	0x080250af

08025300 <_printf_common>:
 8025300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025304:	4691      	mov	r9, r2
 8025306:	461f      	mov	r7, r3
 8025308:	688a      	ldr	r2, [r1, #8]
 802530a:	690b      	ldr	r3, [r1, #16]
 802530c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025310:	4293      	cmp	r3, r2
 8025312:	bfb8      	it	lt
 8025314:	4613      	movlt	r3, r2
 8025316:	f8c9 3000 	str.w	r3, [r9]
 802531a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802531e:	4606      	mov	r6, r0
 8025320:	460c      	mov	r4, r1
 8025322:	b112      	cbz	r2, 802532a <_printf_common+0x2a>
 8025324:	3301      	adds	r3, #1
 8025326:	f8c9 3000 	str.w	r3, [r9]
 802532a:	6823      	ldr	r3, [r4, #0]
 802532c:	0699      	lsls	r1, r3, #26
 802532e:	bf42      	ittt	mi
 8025330:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025334:	3302      	addmi	r3, #2
 8025336:	f8c9 3000 	strmi.w	r3, [r9]
 802533a:	6825      	ldr	r5, [r4, #0]
 802533c:	f015 0506 	ands.w	r5, r5, #6
 8025340:	d107      	bne.n	8025352 <_printf_common+0x52>
 8025342:	f104 0a19 	add.w	sl, r4, #25
 8025346:	68e3      	ldr	r3, [r4, #12]
 8025348:	f8d9 2000 	ldr.w	r2, [r9]
 802534c:	1a9b      	subs	r3, r3, r2
 802534e:	42ab      	cmp	r3, r5
 8025350:	dc28      	bgt.n	80253a4 <_printf_common+0xa4>
 8025352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025356:	6822      	ldr	r2, [r4, #0]
 8025358:	3300      	adds	r3, #0
 802535a:	bf18      	it	ne
 802535c:	2301      	movne	r3, #1
 802535e:	0692      	lsls	r2, r2, #26
 8025360:	d42d      	bmi.n	80253be <_printf_common+0xbe>
 8025362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025366:	4639      	mov	r1, r7
 8025368:	4630      	mov	r0, r6
 802536a:	47c0      	blx	r8
 802536c:	3001      	adds	r0, #1
 802536e:	d020      	beq.n	80253b2 <_printf_common+0xb2>
 8025370:	6823      	ldr	r3, [r4, #0]
 8025372:	68e5      	ldr	r5, [r4, #12]
 8025374:	f8d9 2000 	ldr.w	r2, [r9]
 8025378:	f003 0306 	and.w	r3, r3, #6
 802537c:	2b04      	cmp	r3, #4
 802537e:	bf08      	it	eq
 8025380:	1aad      	subeq	r5, r5, r2
 8025382:	68a3      	ldr	r3, [r4, #8]
 8025384:	6922      	ldr	r2, [r4, #16]
 8025386:	bf0c      	ite	eq
 8025388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802538c:	2500      	movne	r5, #0
 802538e:	4293      	cmp	r3, r2
 8025390:	bfc4      	itt	gt
 8025392:	1a9b      	subgt	r3, r3, r2
 8025394:	18ed      	addgt	r5, r5, r3
 8025396:	f04f 0900 	mov.w	r9, #0
 802539a:	341a      	adds	r4, #26
 802539c:	454d      	cmp	r5, r9
 802539e:	d11a      	bne.n	80253d6 <_printf_common+0xd6>
 80253a0:	2000      	movs	r0, #0
 80253a2:	e008      	b.n	80253b6 <_printf_common+0xb6>
 80253a4:	2301      	movs	r3, #1
 80253a6:	4652      	mov	r2, sl
 80253a8:	4639      	mov	r1, r7
 80253aa:	4630      	mov	r0, r6
 80253ac:	47c0      	blx	r8
 80253ae:	3001      	adds	r0, #1
 80253b0:	d103      	bne.n	80253ba <_printf_common+0xba>
 80253b2:	f04f 30ff 	mov.w	r0, #4294967295
 80253b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80253ba:	3501      	adds	r5, #1
 80253bc:	e7c3      	b.n	8025346 <_printf_common+0x46>
 80253be:	18e1      	adds	r1, r4, r3
 80253c0:	1c5a      	adds	r2, r3, #1
 80253c2:	2030      	movs	r0, #48	; 0x30
 80253c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80253c8:	4422      	add	r2, r4
 80253ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80253ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80253d2:	3302      	adds	r3, #2
 80253d4:	e7c5      	b.n	8025362 <_printf_common+0x62>
 80253d6:	2301      	movs	r3, #1
 80253d8:	4622      	mov	r2, r4
 80253da:	4639      	mov	r1, r7
 80253dc:	4630      	mov	r0, r6
 80253de:	47c0      	blx	r8
 80253e0:	3001      	adds	r0, #1
 80253e2:	d0e6      	beq.n	80253b2 <_printf_common+0xb2>
 80253e4:	f109 0901 	add.w	r9, r9, #1
 80253e8:	e7d8      	b.n	802539c <_printf_common+0x9c>
	...

080253ec <_printf_i>:
 80253ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80253f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80253f4:	460c      	mov	r4, r1
 80253f6:	7e09      	ldrb	r1, [r1, #24]
 80253f8:	b085      	sub	sp, #20
 80253fa:	296e      	cmp	r1, #110	; 0x6e
 80253fc:	4617      	mov	r7, r2
 80253fe:	4606      	mov	r6, r0
 8025400:	4698      	mov	r8, r3
 8025402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025404:	f000 80b3 	beq.w	802556e <_printf_i+0x182>
 8025408:	d822      	bhi.n	8025450 <_printf_i+0x64>
 802540a:	2963      	cmp	r1, #99	; 0x63
 802540c:	d036      	beq.n	802547c <_printf_i+0x90>
 802540e:	d80a      	bhi.n	8025426 <_printf_i+0x3a>
 8025410:	2900      	cmp	r1, #0
 8025412:	f000 80b9 	beq.w	8025588 <_printf_i+0x19c>
 8025416:	2958      	cmp	r1, #88	; 0x58
 8025418:	f000 8083 	beq.w	8025522 <_printf_i+0x136>
 802541c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025424:	e032      	b.n	802548c <_printf_i+0xa0>
 8025426:	2964      	cmp	r1, #100	; 0x64
 8025428:	d001      	beq.n	802542e <_printf_i+0x42>
 802542a:	2969      	cmp	r1, #105	; 0x69
 802542c:	d1f6      	bne.n	802541c <_printf_i+0x30>
 802542e:	6820      	ldr	r0, [r4, #0]
 8025430:	6813      	ldr	r3, [r2, #0]
 8025432:	0605      	lsls	r5, r0, #24
 8025434:	f103 0104 	add.w	r1, r3, #4
 8025438:	d52a      	bpl.n	8025490 <_printf_i+0xa4>
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	6011      	str	r1, [r2, #0]
 802543e:	2b00      	cmp	r3, #0
 8025440:	da03      	bge.n	802544a <_printf_i+0x5e>
 8025442:	222d      	movs	r2, #45	; 0x2d
 8025444:	425b      	negs	r3, r3
 8025446:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802544a:	486f      	ldr	r0, [pc, #444]	; (8025608 <_printf_i+0x21c>)
 802544c:	220a      	movs	r2, #10
 802544e:	e039      	b.n	80254c4 <_printf_i+0xd8>
 8025450:	2973      	cmp	r1, #115	; 0x73
 8025452:	f000 809d 	beq.w	8025590 <_printf_i+0x1a4>
 8025456:	d808      	bhi.n	802546a <_printf_i+0x7e>
 8025458:	296f      	cmp	r1, #111	; 0x6f
 802545a:	d020      	beq.n	802549e <_printf_i+0xb2>
 802545c:	2970      	cmp	r1, #112	; 0x70
 802545e:	d1dd      	bne.n	802541c <_printf_i+0x30>
 8025460:	6823      	ldr	r3, [r4, #0]
 8025462:	f043 0320 	orr.w	r3, r3, #32
 8025466:	6023      	str	r3, [r4, #0]
 8025468:	e003      	b.n	8025472 <_printf_i+0x86>
 802546a:	2975      	cmp	r1, #117	; 0x75
 802546c:	d017      	beq.n	802549e <_printf_i+0xb2>
 802546e:	2978      	cmp	r1, #120	; 0x78
 8025470:	d1d4      	bne.n	802541c <_printf_i+0x30>
 8025472:	2378      	movs	r3, #120	; 0x78
 8025474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025478:	4864      	ldr	r0, [pc, #400]	; (802560c <_printf_i+0x220>)
 802547a:	e055      	b.n	8025528 <_printf_i+0x13c>
 802547c:	6813      	ldr	r3, [r2, #0]
 802547e:	1d19      	adds	r1, r3, #4
 8025480:	681b      	ldr	r3, [r3, #0]
 8025482:	6011      	str	r1, [r2, #0]
 8025484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802548c:	2301      	movs	r3, #1
 802548e:	e08c      	b.n	80255aa <_printf_i+0x1be>
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	6011      	str	r1, [r2, #0]
 8025494:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025498:	bf18      	it	ne
 802549a:	b21b      	sxthne	r3, r3
 802549c:	e7cf      	b.n	802543e <_printf_i+0x52>
 802549e:	6813      	ldr	r3, [r2, #0]
 80254a0:	6825      	ldr	r5, [r4, #0]
 80254a2:	1d18      	adds	r0, r3, #4
 80254a4:	6010      	str	r0, [r2, #0]
 80254a6:	0628      	lsls	r0, r5, #24
 80254a8:	d501      	bpl.n	80254ae <_printf_i+0xc2>
 80254aa:	681b      	ldr	r3, [r3, #0]
 80254ac:	e002      	b.n	80254b4 <_printf_i+0xc8>
 80254ae:	0668      	lsls	r0, r5, #25
 80254b0:	d5fb      	bpl.n	80254aa <_printf_i+0xbe>
 80254b2:	881b      	ldrh	r3, [r3, #0]
 80254b4:	4854      	ldr	r0, [pc, #336]	; (8025608 <_printf_i+0x21c>)
 80254b6:	296f      	cmp	r1, #111	; 0x6f
 80254b8:	bf14      	ite	ne
 80254ba:	220a      	movne	r2, #10
 80254bc:	2208      	moveq	r2, #8
 80254be:	2100      	movs	r1, #0
 80254c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80254c4:	6865      	ldr	r5, [r4, #4]
 80254c6:	60a5      	str	r5, [r4, #8]
 80254c8:	2d00      	cmp	r5, #0
 80254ca:	f2c0 8095 	blt.w	80255f8 <_printf_i+0x20c>
 80254ce:	6821      	ldr	r1, [r4, #0]
 80254d0:	f021 0104 	bic.w	r1, r1, #4
 80254d4:	6021      	str	r1, [r4, #0]
 80254d6:	2b00      	cmp	r3, #0
 80254d8:	d13d      	bne.n	8025556 <_printf_i+0x16a>
 80254da:	2d00      	cmp	r5, #0
 80254dc:	f040 808e 	bne.w	80255fc <_printf_i+0x210>
 80254e0:	4665      	mov	r5, ip
 80254e2:	2a08      	cmp	r2, #8
 80254e4:	d10b      	bne.n	80254fe <_printf_i+0x112>
 80254e6:	6823      	ldr	r3, [r4, #0]
 80254e8:	07db      	lsls	r3, r3, #31
 80254ea:	d508      	bpl.n	80254fe <_printf_i+0x112>
 80254ec:	6923      	ldr	r3, [r4, #16]
 80254ee:	6862      	ldr	r2, [r4, #4]
 80254f0:	429a      	cmp	r2, r3
 80254f2:	bfde      	ittt	le
 80254f4:	2330      	movle	r3, #48	; 0x30
 80254f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80254fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80254fe:	ebac 0305 	sub.w	r3, ip, r5
 8025502:	6123      	str	r3, [r4, #16]
 8025504:	f8cd 8000 	str.w	r8, [sp]
 8025508:	463b      	mov	r3, r7
 802550a:	aa03      	add	r2, sp, #12
 802550c:	4621      	mov	r1, r4
 802550e:	4630      	mov	r0, r6
 8025510:	f7ff fef6 	bl	8025300 <_printf_common>
 8025514:	3001      	adds	r0, #1
 8025516:	d14d      	bne.n	80255b4 <_printf_i+0x1c8>
 8025518:	f04f 30ff 	mov.w	r0, #4294967295
 802551c:	b005      	add	sp, #20
 802551e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025522:	4839      	ldr	r0, [pc, #228]	; (8025608 <_printf_i+0x21c>)
 8025524:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025528:	6813      	ldr	r3, [r2, #0]
 802552a:	6821      	ldr	r1, [r4, #0]
 802552c:	1d1d      	adds	r5, r3, #4
 802552e:	681b      	ldr	r3, [r3, #0]
 8025530:	6015      	str	r5, [r2, #0]
 8025532:	060a      	lsls	r2, r1, #24
 8025534:	d50b      	bpl.n	802554e <_printf_i+0x162>
 8025536:	07ca      	lsls	r2, r1, #31
 8025538:	bf44      	itt	mi
 802553a:	f041 0120 	orrmi.w	r1, r1, #32
 802553e:	6021      	strmi	r1, [r4, #0]
 8025540:	b91b      	cbnz	r3, 802554a <_printf_i+0x15e>
 8025542:	6822      	ldr	r2, [r4, #0]
 8025544:	f022 0220 	bic.w	r2, r2, #32
 8025548:	6022      	str	r2, [r4, #0]
 802554a:	2210      	movs	r2, #16
 802554c:	e7b7      	b.n	80254be <_printf_i+0xd2>
 802554e:	064d      	lsls	r5, r1, #25
 8025550:	bf48      	it	mi
 8025552:	b29b      	uxthmi	r3, r3
 8025554:	e7ef      	b.n	8025536 <_printf_i+0x14a>
 8025556:	4665      	mov	r5, ip
 8025558:	fbb3 f1f2 	udiv	r1, r3, r2
 802555c:	fb02 3311 	mls	r3, r2, r1, r3
 8025560:	5cc3      	ldrb	r3, [r0, r3]
 8025562:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025566:	460b      	mov	r3, r1
 8025568:	2900      	cmp	r1, #0
 802556a:	d1f5      	bne.n	8025558 <_printf_i+0x16c>
 802556c:	e7b9      	b.n	80254e2 <_printf_i+0xf6>
 802556e:	6813      	ldr	r3, [r2, #0]
 8025570:	6825      	ldr	r5, [r4, #0]
 8025572:	6961      	ldr	r1, [r4, #20]
 8025574:	1d18      	adds	r0, r3, #4
 8025576:	6010      	str	r0, [r2, #0]
 8025578:	0628      	lsls	r0, r5, #24
 802557a:	681b      	ldr	r3, [r3, #0]
 802557c:	d501      	bpl.n	8025582 <_printf_i+0x196>
 802557e:	6019      	str	r1, [r3, #0]
 8025580:	e002      	b.n	8025588 <_printf_i+0x19c>
 8025582:	066a      	lsls	r2, r5, #25
 8025584:	d5fb      	bpl.n	802557e <_printf_i+0x192>
 8025586:	8019      	strh	r1, [r3, #0]
 8025588:	2300      	movs	r3, #0
 802558a:	6123      	str	r3, [r4, #16]
 802558c:	4665      	mov	r5, ip
 802558e:	e7b9      	b.n	8025504 <_printf_i+0x118>
 8025590:	6813      	ldr	r3, [r2, #0]
 8025592:	1d19      	adds	r1, r3, #4
 8025594:	6011      	str	r1, [r2, #0]
 8025596:	681d      	ldr	r5, [r3, #0]
 8025598:	6862      	ldr	r2, [r4, #4]
 802559a:	2100      	movs	r1, #0
 802559c:	4628      	mov	r0, r5
 802559e:	f7da fe27 	bl	80001f0 <memchr>
 80255a2:	b108      	cbz	r0, 80255a8 <_printf_i+0x1bc>
 80255a4:	1b40      	subs	r0, r0, r5
 80255a6:	6060      	str	r0, [r4, #4]
 80255a8:	6863      	ldr	r3, [r4, #4]
 80255aa:	6123      	str	r3, [r4, #16]
 80255ac:	2300      	movs	r3, #0
 80255ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80255b2:	e7a7      	b.n	8025504 <_printf_i+0x118>
 80255b4:	6923      	ldr	r3, [r4, #16]
 80255b6:	462a      	mov	r2, r5
 80255b8:	4639      	mov	r1, r7
 80255ba:	4630      	mov	r0, r6
 80255bc:	47c0      	blx	r8
 80255be:	3001      	adds	r0, #1
 80255c0:	d0aa      	beq.n	8025518 <_printf_i+0x12c>
 80255c2:	6823      	ldr	r3, [r4, #0]
 80255c4:	079b      	lsls	r3, r3, #30
 80255c6:	d413      	bmi.n	80255f0 <_printf_i+0x204>
 80255c8:	68e0      	ldr	r0, [r4, #12]
 80255ca:	9b03      	ldr	r3, [sp, #12]
 80255cc:	4298      	cmp	r0, r3
 80255ce:	bfb8      	it	lt
 80255d0:	4618      	movlt	r0, r3
 80255d2:	e7a3      	b.n	802551c <_printf_i+0x130>
 80255d4:	2301      	movs	r3, #1
 80255d6:	464a      	mov	r2, r9
 80255d8:	4639      	mov	r1, r7
 80255da:	4630      	mov	r0, r6
 80255dc:	47c0      	blx	r8
 80255de:	3001      	adds	r0, #1
 80255e0:	d09a      	beq.n	8025518 <_printf_i+0x12c>
 80255e2:	3501      	adds	r5, #1
 80255e4:	68e3      	ldr	r3, [r4, #12]
 80255e6:	9a03      	ldr	r2, [sp, #12]
 80255e8:	1a9b      	subs	r3, r3, r2
 80255ea:	42ab      	cmp	r3, r5
 80255ec:	dcf2      	bgt.n	80255d4 <_printf_i+0x1e8>
 80255ee:	e7eb      	b.n	80255c8 <_printf_i+0x1dc>
 80255f0:	2500      	movs	r5, #0
 80255f2:	f104 0919 	add.w	r9, r4, #25
 80255f6:	e7f5      	b.n	80255e4 <_printf_i+0x1f8>
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	d1ac      	bne.n	8025556 <_printf_i+0x16a>
 80255fc:	7803      	ldrb	r3, [r0, #0]
 80255fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025606:	e76c      	b.n	80254e2 <_printf_i+0xf6>
 8025608:	08054c69 	.word	0x08054c69
 802560c:	08054c7a 	.word	0x08054c7a

08025610 <iprintf>:
 8025610:	b40f      	push	{r0, r1, r2, r3}
 8025612:	4b0a      	ldr	r3, [pc, #40]	; (802563c <iprintf+0x2c>)
 8025614:	b513      	push	{r0, r1, r4, lr}
 8025616:	681c      	ldr	r4, [r3, #0]
 8025618:	b124      	cbz	r4, 8025624 <iprintf+0x14>
 802561a:	69a3      	ldr	r3, [r4, #24]
 802561c:	b913      	cbnz	r3, 8025624 <iprintf+0x14>
 802561e:	4620      	mov	r0, r4
 8025620:	f000 fada 	bl	8025bd8 <__sinit>
 8025624:	ab05      	add	r3, sp, #20
 8025626:	9a04      	ldr	r2, [sp, #16]
 8025628:	68a1      	ldr	r1, [r4, #8]
 802562a:	9301      	str	r3, [sp, #4]
 802562c:	4620      	mov	r0, r4
 802562e:	f7ff fd51 	bl	80250d4 <_vfiprintf_r>
 8025632:	b002      	add	sp, #8
 8025634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025638:	b004      	add	sp, #16
 802563a:	4770      	bx	lr
 802563c:	200000ac 	.word	0x200000ac

08025640 <_puts_r>:
 8025640:	b570      	push	{r4, r5, r6, lr}
 8025642:	460e      	mov	r6, r1
 8025644:	4605      	mov	r5, r0
 8025646:	b118      	cbz	r0, 8025650 <_puts_r+0x10>
 8025648:	6983      	ldr	r3, [r0, #24]
 802564a:	b90b      	cbnz	r3, 8025650 <_puts_r+0x10>
 802564c:	f000 fac4 	bl	8025bd8 <__sinit>
 8025650:	69ab      	ldr	r3, [r5, #24]
 8025652:	68ac      	ldr	r4, [r5, #8]
 8025654:	b913      	cbnz	r3, 802565c <_puts_r+0x1c>
 8025656:	4628      	mov	r0, r5
 8025658:	f000 fabe 	bl	8025bd8 <__sinit>
 802565c:	4b23      	ldr	r3, [pc, #140]	; (80256ec <_puts_r+0xac>)
 802565e:	429c      	cmp	r4, r3
 8025660:	d117      	bne.n	8025692 <_puts_r+0x52>
 8025662:	686c      	ldr	r4, [r5, #4]
 8025664:	89a3      	ldrh	r3, [r4, #12]
 8025666:	071b      	lsls	r3, r3, #28
 8025668:	d51d      	bpl.n	80256a6 <_puts_r+0x66>
 802566a:	6923      	ldr	r3, [r4, #16]
 802566c:	b1db      	cbz	r3, 80256a6 <_puts_r+0x66>
 802566e:	3e01      	subs	r6, #1
 8025670:	68a3      	ldr	r3, [r4, #8]
 8025672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025676:	3b01      	subs	r3, #1
 8025678:	60a3      	str	r3, [r4, #8]
 802567a:	b9e9      	cbnz	r1, 80256b8 <_puts_r+0x78>
 802567c:	2b00      	cmp	r3, #0
 802567e:	da2e      	bge.n	80256de <_puts_r+0x9e>
 8025680:	4622      	mov	r2, r4
 8025682:	210a      	movs	r1, #10
 8025684:	4628      	mov	r0, r5
 8025686:	f000 f893 	bl	80257b0 <__swbuf_r>
 802568a:	3001      	adds	r0, #1
 802568c:	d011      	beq.n	80256b2 <_puts_r+0x72>
 802568e:	200a      	movs	r0, #10
 8025690:	e011      	b.n	80256b6 <_puts_r+0x76>
 8025692:	4b17      	ldr	r3, [pc, #92]	; (80256f0 <_puts_r+0xb0>)
 8025694:	429c      	cmp	r4, r3
 8025696:	d101      	bne.n	802569c <_puts_r+0x5c>
 8025698:	68ac      	ldr	r4, [r5, #8]
 802569a:	e7e3      	b.n	8025664 <_puts_r+0x24>
 802569c:	4b15      	ldr	r3, [pc, #84]	; (80256f4 <_puts_r+0xb4>)
 802569e:	429c      	cmp	r4, r3
 80256a0:	bf08      	it	eq
 80256a2:	68ec      	ldreq	r4, [r5, #12]
 80256a4:	e7de      	b.n	8025664 <_puts_r+0x24>
 80256a6:	4621      	mov	r1, r4
 80256a8:	4628      	mov	r0, r5
 80256aa:	f000 f8d3 	bl	8025854 <__swsetup_r>
 80256ae:	2800      	cmp	r0, #0
 80256b0:	d0dd      	beq.n	802566e <_puts_r+0x2e>
 80256b2:	f04f 30ff 	mov.w	r0, #4294967295
 80256b6:	bd70      	pop	{r4, r5, r6, pc}
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	da04      	bge.n	80256c6 <_puts_r+0x86>
 80256bc:	69a2      	ldr	r2, [r4, #24]
 80256be:	429a      	cmp	r2, r3
 80256c0:	dc06      	bgt.n	80256d0 <_puts_r+0x90>
 80256c2:	290a      	cmp	r1, #10
 80256c4:	d004      	beq.n	80256d0 <_puts_r+0x90>
 80256c6:	6823      	ldr	r3, [r4, #0]
 80256c8:	1c5a      	adds	r2, r3, #1
 80256ca:	6022      	str	r2, [r4, #0]
 80256cc:	7019      	strb	r1, [r3, #0]
 80256ce:	e7cf      	b.n	8025670 <_puts_r+0x30>
 80256d0:	4622      	mov	r2, r4
 80256d2:	4628      	mov	r0, r5
 80256d4:	f000 f86c 	bl	80257b0 <__swbuf_r>
 80256d8:	3001      	adds	r0, #1
 80256da:	d1c9      	bne.n	8025670 <_puts_r+0x30>
 80256dc:	e7e9      	b.n	80256b2 <_puts_r+0x72>
 80256de:	6823      	ldr	r3, [r4, #0]
 80256e0:	200a      	movs	r0, #10
 80256e2:	1c5a      	adds	r2, r3, #1
 80256e4:	6022      	str	r2, [r4, #0]
 80256e6:	7018      	strb	r0, [r3, #0]
 80256e8:	e7e5      	b.n	80256b6 <_puts_r+0x76>
 80256ea:	bf00      	nop
 80256ec:	08054cb0 	.word	0x08054cb0
 80256f0:	08054cd0 	.word	0x08054cd0
 80256f4:	08054c90 	.word	0x08054c90

080256f8 <puts>:
 80256f8:	4b02      	ldr	r3, [pc, #8]	; (8025704 <puts+0xc>)
 80256fa:	4601      	mov	r1, r0
 80256fc:	6818      	ldr	r0, [r3, #0]
 80256fe:	f7ff bf9f 	b.w	8025640 <_puts_r>
 8025702:	bf00      	nop
 8025704:	200000ac 	.word	0x200000ac

08025708 <_sbrk_r>:
 8025708:	b538      	push	{r3, r4, r5, lr}
 802570a:	4c06      	ldr	r4, [pc, #24]	; (8025724 <_sbrk_r+0x1c>)
 802570c:	2300      	movs	r3, #0
 802570e:	4605      	mov	r5, r0
 8025710:	4608      	mov	r0, r1
 8025712:	6023      	str	r3, [r4, #0]
 8025714:	f7dc fa6a 	bl	8001bec <_sbrk>
 8025718:	1c43      	adds	r3, r0, #1
 802571a:	d102      	bne.n	8025722 <_sbrk_r+0x1a>
 802571c:	6823      	ldr	r3, [r4, #0]
 802571e:	b103      	cbz	r3, 8025722 <_sbrk_r+0x1a>
 8025720:	602b      	str	r3, [r5, #0]
 8025722:	bd38      	pop	{r3, r4, r5, pc}
 8025724:	20002b1c 	.word	0x20002b1c

08025728 <_raise_r>:
 8025728:	291f      	cmp	r1, #31
 802572a:	b538      	push	{r3, r4, r5, lr}
 802572c:	4604      	mov	r4, r0
 802572e:	460d      	mov	r5, r1
 8025730:	d904      	bls.n	802573c <_raise_r+0x14>
 8025732:	2316      	movs	r3, #22
 8025734:	6003      	str	r3, [r0, #0]
 8025736:	f04f 30ff 	mov.w	r0, #4294967295
 802573a:	bd38      	pop	{r3, r4, r5, pc}
 802573c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802573e:	b112      	cbz	r2, 8025746 <_raise_r+0x1e>
 8025740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025744:	b94b      	cbnz	r3, 802575a <_raise_r+0x32>
 8025746:	4620      	mov	r0, r4
 8025748:	f000 f830 	bl	80257ac <_getpid_r>
 802574c:	462a      	mov	r2, r5
 802574e:	4601      	mov	r1, r0
 8025750:	4620      	mov	r0, r4
 8025752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025756:	f000 b817 	b.w	8025788 <_kill_r>
 802575a:	2b01      	cmp	r3, #1
 802575c:	d00a      	beq.n	8025774 <_raise_r+0x4c>
 802575e:	1c59      	adds	r1, r3, #1
 8025760:	d103      	bne.n	802576a <_raise_r+0x42>
 8025762:	2316      	movs	r3, #22
 8025764:	6003      	str	r3, [r0, #0]
 8025766:	2001      	movs	r0, #1
 8025768:	e7e7      	b.n	802573a <_raise_r+0x12>
 802576a:	2400      	movs	r4, #0
 802576c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025770:	4628      	mov	r0, r5
 8025772:	4798      	blx	r3
 8025774:	2000      	movs	r0, #0
 8025776:	e7e0      	b.n	802573a <_raise_r+0x12>

08025778 <raise>:
 8025778:	4b02      	ldr	r3, [pc, #8]	; (8025784 <raise+0xc>)
 802577a:	4601      	mov	r1, r0
 802577c:	6818      	ldr	r0, [r3, #0]
 802577e:	f7ff bfd3 	b.w	8025728 <_raise_r>
 8025782:	bf00      	nop
 8025784:	200000ac 	.word	0x200000ac

08025788 <_kill_r>:
 8025788:	b538      	push	{r3, r4, r5, lr}
 802578a:	4c07      	ldr	r4, [pc, #28]	; (80257a8 <_kill_r+0x20>)
 802578c:	2300      	movs	r3, #0
 802578e:	4605      	mov	r5, r0
 8025790:	4608      	mov	r0, r1
 8025792:	4611      	mov	r1, r2
 8025794:	6023      	str	r3, [r4, #0]
 8025796:	f7dc f9a1 	bl	8001adc <_kill>
 802579a:	1c43      	adds	r3, r0, #1
 802579c:	d102      	bne.n	80257a4 <_kill_r+0x1c>
 802579e:	6823      	ldr	r3, [r4, #0]
 80257a0:	b103      	cbz	r3, 80257a4 <_kill_r+0x1c>
 80257a2:	602b      	str	r3, [r5, #0]
 80257a4:	bd38      	pop	{r3, r4, r5, pc}
 80257a6:	bf00      	nop
 80257a8:	20002b1c 	.word	0x20002b1c

080257ac <_getpid_r>:
 80257ac:	f7dc b98e 	b.w	8001acc <_getpid>

080257b0 <__swbuf_r>:
 80257b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257b2:	460e      	mov	r6, r1
 80257b4:	4614      	mov	r4, r2
 80257b6:	4605      	mov	r5, r0
 80257b8:	b118      	cbz	r0, 80257c2 <__swbuf_r+0x12>
 80257ba:	6983      	ldr	r3, [r0, #24]
 80257bc:	b90b      	cbnz	r3, 80257c2 <__swbuf_r+0x12>
 80257be:	f000 fa0b 	bl	8025bd8 <__sinit>
 80257c2:	4b21      	ldr	r3, [pc, #132]	; (8025848 <__swbuf_r+0x98>)
 80257c4:	429c      	cmp	r4, r3
 80257c6:	d12a      	bne.n	802581e <__swbuf_r+0x6e>
 80257c8:	686c      	ldr	r4, [r5, #4]
 80257ca:	69a3      	ldr	r3, [r4, #24]
 80257cc:	60a3      	str	r3, [r4, #8]
 80257ce:	89a3      	ldrh	r3, [r4, #12]
 80257d0:	071a      	lsls	r2, r3, #28
 80257d2:	d52e      	bpl.n	8025832 <__swbuf_r+0x82>
 80257d4:	6923      	ldr	r3, [r4, #16]
 80257d6:	b363      	cbz	r3, 8025832 <__swbuf_r+0x82>
 80257d8:	6923      	ldr	r3, [r4, #16]
 80257da:	6820      	ldr	r0, [r4, #0]
 80257dc:	1ac0      	subs	r0, r0, r3
 80257de:	6963      	ldr	r3, [r4, #20]
 80257e0:	b2f6      	uxtb	r6, r6
 80257e2:	4283      	cmp	r3, r0
 80257e4:	4637      	mov	r7, r6
 80257e6:	dc04      	bgt.n	80257f2 <__swbuf_r+0x42>
 80257e8:	4621      	mov	r1, r4
 80257ea:	4628      	mov	r0, r5
 80257ec:	f000 f98a 	bl	8025b04 <_fflush_r>
 80257f0:	bb28      	cbnz	r0, 802583e <__swbuf_r+0x8e>
 80257f2:	68a3      	ldr	r3, [r4, #8]
 80257f4:	3b01      	subs	r3, #1
 80257f6:	60a3      	str	r3, [r4, #8]
 80257f8:	6823      	ldr	r3, [r4, #0]
 80257fa:	1c5a      	adds	r2, r3, #1
 80257fc:	6022      	str	r2, [r4, #0]
 80257fe:	701e      	strb	r6, [r3, #0]
 8025800:	6963      	ldr	r3, [r4, #20]
 8025802:	3001      	adds	r0, #1
 8025804:	4283      	cmp	r3, r0
 8025806:	d004      	beq.n	8025812 <__swbuf_r+0x62>
 8025808:	89a3      	ldrh	r3, [r4, #12]
 802580a:	07db      	lsls	r3, r3, #31
 802580c:	d519      	bpl.n	8025842 <__swbuf_r+0x92>
 802580e:	2e0a      	cmp	r6, #10
 8025810:	d117      	bne.n	8025842 <__swbuf_r+0x92>
 8025812:	4621      	mov	r1, r4
 8025814:	4628      	mov	r0, r5
 8025816:	f000 f975 	bl	8025b04 <_fflush_r>
 802581a:	b190      	cbz	r0, 8025842 <__swbuf_r+0x92>
 802581c:	e00f      	b.n	802583e <__swbuf_r+0x8e>
 802581e:	4b0b      	ldr	r3, [pc, #44]	; (802584c <__swbuf_r+0x9c>)
 8025820:	429c      	cmp	r4, r3
 8025822:	d101      	bne.n	8025828 <__swbuf_r+0x78>
 8025824:	68ac      	ldr	r4, [r5, #8]
 8025826:	e7d0      	b.n	80257ca <__swbuf_r+0x1a>
 8025828:	4b09      	ldr	r3, [pc, #36]	; (8025850 <__swbuf_r+0xa0>)
 802582a:	429c      	cmp	r4, r3
 802582c:	bf08      	it	eq
 802582e:	68ec      	ldreq	r4, [r5, #12]
 8025830:	e7cb      	b.n	80257ca <__swbuf_r+0x1a>
 8025832:	4621      	mov	r1, r4
 8025834:	4628      	mov	r0, r5
 8025836:	f000 f80d 	bl	8025854 <__swsetup_r>
 802583a:	2800      	cmp	r0, #0
 802583c:	d0cc      	beq.n	80257d8 <__swbuf_r+0x28>
 802583e:	f04f 37ff 	mov.w	r7, #4294967295
 8025842:	4638      	mov	r0, r7
 8025844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025846:	bf00      	nop
 8025848:	08054cb0 	.word	0x08054cb0
 802584c:	08054cd0 	.word	0x08054cd0
 8025850:	08054c90 	.word	0x08054c90

08025854 <__swsetup_r>:
 8025854:	4b32      	ldr	r3, [pc, #200]	; (8025920 <__swsetup_r+0xcc>)
 8025856:	b570      	push	{r4, r5, r6, lr}
 8025858:	681d      	ldr	r5, [r3, #0]
 802585a:	4606      	mov	r6, r0
 802585c:	460c      	mov	r4, r1
 802585e:	b125      	cbz	r5, 802586a <__swsetup_r+0x16>
 8025860:	69ab      	ldr	r3, [r5, #24]
 8025862:	b913      	cbnz	r3, 802586a <__swsetup_r+0x16>
 8025864:	4628      	mov	r0, r5
 8025866:	f000 f9b7 	bl	8025bd8 <__sinit>
 802586a:	4b2e      	ldr	r3, [pc, #184]	; (8025924 <__swsetup_r+0xd0>)
 802586c:	429c      	cmp	r4, r3
 802586e:	d10f      	bne.n	8025890 <__swsetup_r+0x3c>
 8025870:	686c      	ldr	r4, [r5, #4]
 8025872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025876:	b29a      	uxth	r2, r3
 8025878:	0715      	lsls	r5, r2, #28
 802587a:	d42c      	bmi.n	80258d6 <__swsetup_r+0x82>
 802587c:	06d0      	lsls	r0, r2, #27
 802587e:	d411      	bmi.n	80258a4 <__swsetup_r+0x50>
 8025880:	2209      	movs	r2, #9
 8025882:	6032      	str	r2, [r6, #0]
 8025884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025888:	81a3      	strh	r3, [r4, #12]
 802588a:	f04f 30ff 	mov.w	r0, #4294967295
 802588e:	e03e      	b.n	802590e <__swsetup_r+0xba>
 8025890:	4b25      	ldr	r3, [pc, #148]	; (8025928 <__swsetup_r+0xd4>)
 8025892:	429c      	cmp	r4, r3
 8025894:	d101      	bne.n	802589a <__swsetup_r+0x46>
 8025896:	68ac      	ldr	r4, [r5, #8]
 8025898:	e7eb      	b.n	8025872 <__swsetup_r+0x1e>
 802589a:	4b24      	ldr	r3, [pc, #144]	; (802592c <__swsetup_r+0xd8>)
 802589c:	429c      	cmp	r4, r3
 802589e:	bf08      	it	eq
 80258a0:	68ec      	ldreq	r4, [r5, #12]
 80258a2:	e7e6      	b.n	8025872 <__swsetup_r+0x1e>
 80258a4:	0751      	lsls	r1, r2, #29
 80258a6:	d512      	bpl.n	80258ce <__swsetup_r+0x7a>
 80258a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80258aa:	b141      	cbz	r1, 80258be <__swsetup_r+0x6a>
 80258ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80258b0:	4299      	cmp	r1, r3
 80258b2:	d002      	beq.n	80258ba <__swsetup_r+0x66>
 80258b4:	4630      	mov	r0, r6
 80258b6:	f7ff fb3b 	bl	8024f30 <_free_r>
 80258ba:	2300      	movs	r3, #0
 80258bc:	6363      	str	r3, [r4, #52]	; 0x34
 80258be:	89a3      	ldrh	r3, [r4, #12]
 80258c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80258c4:	81a3      	strh	r3, [r4, #12]
 80258c6:	2300      	movs	r3, #0
 80258c8:	6063      	str	r3, [r4, #4]
 80258ca:	6923      	ldr	r3, [r4, #16]
 80258cc:	6023      	str	r3, [r4, #0]
 80258ce:	89a3      	ldrh	r3, [r4, #12]
 80258d0:	f043 0308 	orr.w	r3, r3, #8
 80258d4:	81a3      	strh	r3, [r4, #12]
 80258d6:	6923      	ldr	r3, [r4, #16]
 80258d8:	b94b      	cbnz	r3, 80258ee <__swsetup_r+0x9a>
 80258da:	89a3      	ldrh	r3, [r4, #12]
 80258dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80258e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80258e4:	d003      	beq.n	80258ee <__swsetup_r+0x9a>
 80258e6:	4621      	mov	r1, r4
 80258e8:	4630      	mov	r0, r6
 80258ea:	f000 fa23 	bl	8025d34 <__smakebuf_r>
 80258ee:	89a2      	ldrh	r2, [r4, #12]
 80258f0:	f012 0301 	ands.w	r3, r2, #1
 80258f4:	d00c      	beq.n	8025910 <__swsetup_r+0xbc>
 80258f6:	2300      	movs	r3, #0
 80258f8:	60a3      	str	r3, [r4, #8]
 80258fa:	6963      	ldr	r3, [r4, #20]
 80258fc:	425b      	negs	r3, r3
 80258fe:	61a3      	str	r3, [r4, #24]
 8025900:	6923      	ldr	r3, [r4, #16]
 8025902:	b953      	cbnz	r3, 802591a <__swsetup_r+0xc6>
 8025904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025908:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802590c:	d1ba      	bne.n	8025884 <__swsetup_r+0x30>
 802590e:	bd70      	pop	{r4, r5, r6, pc}
 8025910:	0792      	lsls	r2, r2, #30
 8025912:	bf58      	it	pl
 8025914:	6963      	ldrpl	r3, [r4, #20]
 8025916:	60a3      	str	r3, [r4, #8]
 8025918:	e7f2      	b.n	8025900 <__swsetup_r+0xac>
 802591a:	2000      	movs	r0, #0
 802591c:	e7f7      	b.n	802590e <__swsetup_r+0xba>
 802591e:	bf00      	nop
 8025920:	200000ac 	.word	0x200000ac
 8025924:	08054cb0 	.word	0x08054cb0
 8025928:	08054cd0 	.word	0x08054cd0
 802592c:	08054c90 	.word	0x08054c90

08025930 <__register_exitproc>:
 8025930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025934:	4d2c      	ldr	r5, [pc, #176]	; (80259e8 <__register_exitproc+0xb8>)
 8025936:	682c      	ldr	r4, [r5, #0]
 8025938:	4607      	mov	r7, r0
 802593a:	460e      	mov	r6, r1
 802593c:	4691      	mov	r9, r2
 802593e:	4698      	mov	r8, r3
 8025940:	b934      	cbnz	r4, 8025950 <__register_exitproc+0x20>
 8025942:	4b2a      	ldr	r3, [pc, #168]	; (80259ec <__register_exitproc+0xbc>)
 8025944:	4c2a      	ldr	r4, [pc, #168]	; (80259f0 <__register_exitproc+0xc0>)
 8025946:	602c      	str	r4, [r5, #0]
 8025948:	b113      	cbz	r3, 8025950 <__register_exitproc+0x20>
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025950:	6863      	ldr	r3, [r4, #4]
 8025952:	2b1f      	cmp	r3, #31
 8025954:	dd3d      	ble.n	80259d2 <__register_exitproc+0xa2>
 8025956:	4b27      	ldr	r3, [pc, #156]	; (80259f4 <__register_exitproc+0xc4>)
 8025958:	b91b      	cbnz	r3, 8025962 <__register_exitproc+0x32>
 802595a:	f04f 30ff 	mov.w	r0, #4294967295
 802595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025962:	208c      	movs	r0, #140	; 0x8c
 8025964:	f7ff fac0 	bl	8024ee8 <malloc>
 8025968:	4604      	mov	r4, r0
 802596a:	2800      	cmp	r0, #0
 802596c:	d0f5      	beq.n	802595a <__register_exitproc+0x2a>
 802596e:	2300      	movs	r3, #0
 8025970:	682a      	ldr	r2, [r5, #0]
 8025972:	6002      	str	r2, [r0, #0]
 8025974:	6043      	str	r3, [r0, #4]
 8025976:	6028      	str	r0, [r5, #0]
 8025978:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802597c:	b30f      	cbz	r7, 80259c2 <__register_exitproc+0x92>
 802597e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025982:	f7ff fab1 	bl	8024ee8 <malloc>
 8025986:	2800      	cmp	r0, #0
 8025988:	d0e7      	beq.n	802595a <__register_exitproc+0x2a>
 802598a:	2300      	movs	r3, #0
 802598c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025990:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025994:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025998:	6862      	ldr	r2, [r4, #4]
 802599a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802599e:	2301      	movs	r3, #1
 80259a0:	4093      	lsls	r3, r2
 80259a2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80259a6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80259aa:	431a      	orrs	r2, r3
 80259ac:	2f02      	cmp	r7, #2
 80259ae:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80259b2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80259b6:	bf02      	ittt	eq
 80259b8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80259bc:	4313      	orreq	r3, r2
 80259be:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80259c2:	6863      	ldr	r3, [r4, #4]
 80259c4:	1c5a      	adds	r2, r3, #1
 80259c6:	3302      	adds	r3, #2
 80259c8:	6062      	str	r2, [r4, #4]
 80259ca:	2000      	movs	r0, #0
 80259cc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80259d0:	e7c5      	b.n	802595e <__register_exitproc+0x2e>
 80259d2:	2f00      	cmp	r7, #0
 80259d4:	d0f5      	beq.n	80259c2 <__register_exitproc+0x92>
 80259d6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80259da:	2800      	cmp	r0, #0
 80259dc:	d1dc      	bne.n	8025998 <__register_exitproc+0x68>
 80259de:	4b05      	ldr	r3, [pc, #20]	; (80259f4 <__register_exitproc+0xc4>)
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d0ba      	beq.n	802595a <__register_exitproc+0x2a>
 80259e4:	e7cb      	b.n	802597e <__register_exitproc+0x4e>
 80259e6:	bf00      	nop
 80259e8:	20001610 	.word	0x20001610
 80259ec:	08054c8c 	.word	0x08054c8c
 80259f0:	20001584 	.word	0x20001584
 80259f4:	08024ee9 	.word	0x08024ee9

080259f8 <__sflush_r>:
 80259f8:	898a      	ldrh	r2, [r1, #12]
 80259fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259fe:	4605      	mov	r5, r0
 8025a00:	0710      	lsls	r0, r2, #28
 8025a02:	460c      	mov	r4, r1
 8025a04:	d458      	bmi.n	8025ab8 <__sflush_r+0xc0>
 8025a06:	684b      	ldr	r3, [r1, #4]
 8025a08:	2b00      	cmp	r3, #0
 8025a0a:	dc05      	bgt.n	8025a18 <__sflush_r+0x20>
 8025a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025a0e:	2b00      	cmp	r3, #0
 8025a10:	dc02      	bgt.n	8025a18 <__sflush_r+0x20>
 8025a12:	2000      	movs	r0, #0
 8025a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a1a:	2e00      	cmp	r6, #0
 8025a1c:	d0f9      	beq.n	8025a12 <__sflush_r+0x1a>
 8025a1e:	2300      	movs	r3, #0
 8025a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025a24:	682f      	ldr	r7, [r5, #0]
 8025a26:	6a21      	ldr	r1, [r4, #32]
 8025a28:	602b      	str	r3, [r5, #0]
 8025a2a:	d032      	beq.n	8025a92 <__sflush_r+0x9a>
 8025a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025a2e:	89a3      	ldrh	r3, [r4, #12]
 8025a30:	075a      	lsls	r2, r3, #29
 8025a32:	d505      	bpl.n	8025a40 <__sflush_r+0x48>
 8025a34:	6863      	ldr	r3, [r4, #4]
 8025a36:	1ac0      	subs	r0, r0, r3
 8025a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025a3a:	b10b      	cbz	r3, 8025a40 <__sflush_r+0x48>
 8025a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025a3e:	1ac0      	subs	r0, r0, r3
 8025a40:	2300      	movs	r3, #0
 8025a42:	4602      	mov	r2, r0
 8025a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a46:	6a21      	ldr	r1, [r4, #32]
 8025a48:	4628      	mov	r0, r5
 8025a4a:	47b0      	blx	r6
 8025a4c:	1c43      	adds	r3, r0, #1
 8025a4e:	89a3      	ldrh	r3, [r4, #12]
 8025a50:	d106      	bne.n	8025a60 <__sflush_r+0x68>
 8025a52:	6829      	ldr	r1, [r5, #0]
 8025a54:	291d      	cmp	r1, #29
 8025a56:	d848      	bhi.n	8025aea <__sflush_r+0xf2>
 8025a58:	4a29      	ldr	r2, [pc, #164]	; (8025b00 <__sflush_r+0x108>)
 8025a5a:	40ca      	lsrs	r2, r1
 8025a5c:	07d6      	lsls	r6, r2, #31
 8025a5e:	d544      	bpl.n	8025aea <__sflush_r+0xf2>
 8025a60:	2200      	movs	r2, #0
 8025a62:	6062      	str	r2, [r4, #4]
 8025a64:	04d9      	lsls	r1, r3, #19
 8025a66:	6922      	ldr	r2, [r4, #16]
 8025a68:	6022      	str	r2, [r4, #0]
 8025a6a:	d504      	bpl.n	8025a76 <__sflush_r+0x7e>
 8025a6c:	1c42      	adds	r2, r0, #1
 8025a6e:	d101      	bne.n	8025a74 <__sflush_r+0x7c>
 8025a70:	682b      	ldr	r3, [r5, #0]
 8025a72:	b903      	cbnz	r3, 8025a76 <__sflush_r+0x7e>
 8025a74:	6560      	str	r0, [r4, #84]	; 0x54
 8025a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025a78:	602f      	str	r7, [r5, #0]
 8025a7a:	2900      	cmp	r1, #0
 8025a7c:	d0c9      	beq.n	8025a12 <__sflush_r+0x1a>
 8025a7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025a82:	4299      	cmp	r1, r3
 8025a84:	d002      	beq.n	8025a8c <__sflush_r+0x94>
 8025a86:	4628      	mov	r0, r5
 8025a88:	f7ff fa52 	bl	8024f30 <_free_r>
 8025a8c:	2000      	movs	r0, #0
 8025a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8025a90:	e7c0      	b.n	8025a14 <__sflush_r+0x1c>
 8025a92:	2301      	movs	r3, #1
 8025a94:	4628      	mov	r0, r5
 8025a96:	47b0      	blx	r6
 8025a98:	1c41      	adds	r1, r0, #1
 8025a9a:	d1c8      	bne.n	8025a2e <__sflush_r+0x36>
 8025a9c:	682b      	ldr	r3, [r5, #0]
 8025a9e:	2b00      	cmp	r3, #0
 8025aa0:	d0c5      	beq.n	8025a2e <__sflush_r+0x36>
 8025aa2:	2b1d      	cmp	r3, #29
 8025aa4:	d001      	beq.n	8025aaa <__sflush_r+0xb2>
 8025aa6:	2b16      	cmp	r3, #22
 8025aa8:	d101      	bne.n	8025aae <__sflush_r+0xb6>
 8025aaa:	602f      	str	r7, [r5, #0]
 8025aac:	e7b1      	b.n	8025a12 <__sflush_r+0x1a>
 8025aae:	89a3      	ldrh	r3, [r4, #12]
 8025ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ab4:	81a3      	strh	r3, [r4, #12]
 8025ab6:	e7ad      	b.n	8025a14 <__sflush_r+0x1c>
 8025ab8:	690f      	ldr	r7, [r1, #16]
 8025aba:	2f00      	cmp	r7, #0
 8025abc:	d0a9      	beq.n	8025a12 <__sflush_r+0x1a>
 8025abe:	0793      	lsls	r3, r2, #30
 8025ac0:	680e      	ldr	r6, [r1, #0]
 8025ac2:	bf08      	it	eq
 8025ac4:	694b      	ldreq	r3, [r1, #20]
 8025ac6:	600f      	str	r7, [r1, #0]
 8025ac8:	bf18      	it	ne
 8025aca:	2300      	movne	r3, #0
 8025acc:	eba6 0807 	sub.w	r8, r6, r7
 8025ad0:	608b      	str	r3, [r1, #8]
 8025ad2:	f1b8 0f00 	cmp.w	r8, #0
 8025ad6:	dd9c      	ble.n	8025a12 <__sflush_r+0x1a>
 8025ad8:	4643      	mov	r3, r8
 8025ada:	463a      	mov	r2, r7
 8025adc:	6a21      	ldr	r1, [r4, #32]
 8025ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ae0:	4628      	mov	r0, r5
 8025ae2:	47b0      	blx	r6
 8025ae4:	2800      	cmp	r0, #0
 8025ae6:	dc06      	bgt.n	8025af6 <__sflush_r+0xfe>
 8025ae8:	89a3      	ldrh	r3, [r4, #12]
 8025aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025aee:	81a3      	strh	r3, [r4, #12]
 8025af0:	f04f 30ff 	mov.w	r0, #4294967295
 8025af4:	e78e      	b.n	8025a14 <__sflush_r+0x1c>
 8025af6:	4407      	add	r7, r0
 8025af8:	eba8 0800 	sub.w	r8, r8, r0
 8025afc:	e7e9      	b.n	8025ad2 <__sflush_r+0xda>
 8025afe:	bf00      	nop
 8025b00:	20400001 	.word	0x20400001

08025b04 <_fflush_r>:
 8025b04:	b538      	push	{r3, r4, r5, lr}
 8025b06:	690b      	ldr	r3, [r1, #16]
 8025b08:	4605      	mov	r5, r0
 8025b0a:	460c      	mov	r4, r1
 8025b0c:	b1db      	cbz	r3, 8025b46 <_fflush_r+0x42>
 8025b0e:	b118      	cbz	r0, 8025b18 <_fflush_r+0x14>
 8025b10:	6983      	ldr	r3, [r0, #24]
 8025b12:	b90b      	cbnz	r3, 8025b18 <_fflush_r+0x14>
 8025b14:	f000 f860 	bl	8025bd8 <__sinit>
 8025b18:	4b0c      	ldr	r3, [pc, #48]	; (8025b4c <_fflush_r+0x48>)
 8025b1a:	429c      	cmp	r4, r3
 8025b1c:	d109      	bne.n	8025b32 <_fflush_r+0x2e>
 8025b1e:	686c      	ldr	r4, [r5, #4]
 8025b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b24:	b17b      	cbz	r3, 8025b46 <_fflush_r+0x42>
 8025b26:	4621      	mov	r1, r4
 8025b28:	4628      	mov	r0, r5
 8025b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b2e:	f7ff bf63 	b.w	80259f8 <__sflush_r>
 8025b32:	4b07      	ldr	r3, [pc, #28]	; (8025b50 <_fflush_r+0x4c>)
 8025b34:	429c      	cmp	r4, r3
 8025b36:	d101      	bne.n	8025b3c <_fflush_r+0x38>
 8025b38:	68ac      	ldr	r4, [r5, #8]
 8025b3a:	e7f1      	b.n	8025b20 <_fflush_r+0x1c>
 8025b3c:	4b05      	ldr	r3, [pc, #20]	; (8025b54 <_fflush_r+0x50>)
 8025b3e:	429c      	cmp	r4, r3
 8025b40:	bf08      	it	eq
 8025b42:	68ec      	ldreq	r4, [r5, #12]
 8025b44:	e7ec      	b.n	8025b20 <_fflush_r+0x1c>
 8025b46:	2000      	movs	r0, #0
 8025b48:	bd38      	pop	{r3, r4, r5, pc}
 8025b4a:	bf00      	nop
 8025b4c:	08054cb0 	.word	0x08054cb0
 8025b50:	08054cd0 	.word	0x08054cd0
 8025b54:	08054c90 	.word	0x08054c90

08025b58 <std>:
 8025b58:	2300      	movs	r3, #0
 8025b5a:	b510      	push	{r4, lr}
 8025b5c:	4604      	mov	r4, r0
 8025b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8025b62:	6083      	str	r3, [r0, #8]
 8025b64:	8181      	strh	r1, [r0, #12]
 8025b66:	6643      	str	r3, [r0, #100]	; 0x64
 8025b68:	81c2      	strh	r2, [r0, #14]
 8025b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025b6e:	6183      	str	r3, [r0, #24]
 8025b70:	4619      	mov	r1, r3
 8025b72:	2208      	movs	r2, #8
 8025b74:	305c      	adds	r0, #92	; 0x5c
 8025b76:	f7ff f9d2 	bl	8024f1e <memset>
 8025b7a:	4b05      	ldr	r3, [pc, #20]	; (8025b90 <std+0x38>)
 8025b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8025b7e:	4b05      	ldr	r3, [pc, #20]	; (8025b94 <std+0x3c>)
 8025b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8025b82:	4b05      	ldr	r3, [pc, #20]	; (8025b98 <std+0x40>)
 8025b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025b86:	4b05      	ldr	r3, [pc, #20]	; (8025b9c <std+0x44>)
 8025b88:	6224      	str	r4, [r4, #32]
 8025b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8025b8c:	bd10      	pop	{r4, pc}
 8025b8e:	bf00      	nop
 8025b90:	08025db9 	.word	0x08025db9
 8025b94:	08025ddb 	.word	0x08025ddb
 8025b98:	08025e13 	.word	0x08025e13
 8025b9c:	08025e37 	.word	0x08025e37

08025ba0 <_cleanup_r>:
 8025ba0:	4901      	ldr	r1, [pc, #4]	; (8025ba8 <_cleanup_r+0x8>)
 8025ba2:	f000 b885 	b.w	8025cb0 <_fwalk_reent>
 8025ba6:	bf00      	nop
 8025ba8:	08025b05 	.word	0x08025b05

08025bac <__sfmoreglue>:
 8025bac:	b570      	push	{r4, r5, r6, lr}
 8025bae:	1e4a      	subs	r2, r1, #1
 8025bb0:	2568      	movs	r5, #104	; 0x68
 8025bb2:	4355      	muls	r5, r2
 8025bb4:	460e      	mov	r6, r1
 8025bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025bba:	f7ff fa07 	bl	8024fcc <_malloc_r>
 8025bbe:	4604      	mov	r4, r0
 8025bc0:	b140      	cbz	r0, 8025bd4 <__sfmoreglue+0x28>
 8025bc2:	2100      	movs	r1, #0
 8025bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8025bc8:	300c      	adds	r0, #12
 8025bca:	60a0      	str	r0, [r4, #8]
 8025bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025bd0:	f7ff f9a5 	bl	8024f1e <memset>
 8025bd4:	4620      	mov	r0, r4
 8025bd6:	bd70      	pop	{r4, r5, r6, pc}

08025bd8 <__sinit>:
 8025bd8:	6983      	ldr	r3, [r0, #24]
 8025bda:	b510      	push	{r4, lr}
 8025bdc:	4604      	mov	r4, r0
 8025bde:	bb33      	cbnz	r3, 8025c2e <__sinit+0x56>
 8025be0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025be4:	6503      	str	r3, [r0, #80]	; 0x50
 8025be6:	4b12      	ldr	r3, [pc, #72]	; (8025c30 <__sinit+0x58>)
 8025be8:	4a12      	ldr	r2, [pc, #72]	; (8025c34 <__sinit+0x5c>)
 8025bea:	681b      	ldr	r3, [r3, #0]
 8025bec:	6282      	str	r2, [r0, #40]	; 0x28
 8025bee:	4298      	cmp	r0, r3
 8025bf0:	bf04      	itt	eq
 8025bf2:	2301      	moveq	r3, #1
 8025bf4:	6183      	streq	r3, [r0, #24]
 8025bf6:	f000 f81f 	bl	8025c38 <__sfp>
 8025bfa:	6060      	str	r0, [r4, #4]
 8025bfc:	4620      	mov	r0, r4
 8025bfe:	f000 f81b 	bl	8025c38 <__sfp>
 8025c02:	60a0      	str	r0, [r4, #8]
 8025c04:	4620      	mov	r0, r4
 8025c06:	f000 f817 	bl	8025c38 <__sfp>
 8025c0a:	2200      	movs	r2, #0
 8025c0c:	60e0      	str	r0, [r4, #12]
 8025c0e:	2104      	movs	r1, #4
 8025c10:	6860      	ldr	r0, [r4, #4]
 8025c12:	f7ff ffa1 	bl	8025b58 <std>
 8025c16:	2201      	movs	r2, #1
 8025c18:	2109      	movs	r1, #9
 8025c1a:	68a0      	ldr	r0, [r4, #8]
 8025c1c:	f7ff ff9c 	bl	8025b58 <std>
 8025c20:	2202      	movs	r2, #2
 8025c22:	2112      	movs	r1, #18
 8025c24:	68e0      	ldr	r0, [r4, #12]
 8025c26:	f7ff ff97 	bl	8025b58 <std>
 8025c2a:	2301      	movs	r3, #1
 8025c2c:	61a3      	str	r3, [r4, #24]
 8025c2e:	bd10      	pop	{r4, pc}
 8025c30:	08054c54 	.word	0x08054c54
 8025c34:	08025ba1 	.word	0x08025ba1

08025c38 <__sfp>:
 8025c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c3a:	4b1b      	ldr	r3, [pc, #108]	; (8025ca8 <__sfp+0x70>)
 8025c3c:	681e      	ldr	r6, [r3, #0]
 8025c3e:	69b3      	ldr	r3, [r6, #24]
 8025c40:	4607      	mov	r7, r0
 8025c42:	b913      	cbnz	r3, 8025c4a <__sfp+0x12>
 8025c44:	4630      	mov	r0, r6
 8025c46:	f7ff ffc7 	bl	8025bd8 <__sinit>
 8025c4a:	3648      	adds	r6, #72	; 0x48
 8025c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025c50:	3b01      	subs	r3, #1
 8025c52:	d503      	bpl.n	8025c5c <__sfp+0x24>
 8025c54:	6833      	ldr	r3, [r6, #0]
 8025c56:	b133      	cbz	r3, 8025c66 <__sfp+0x2e>
 8025c58:	6836      	ldr	r6, [r6, #0]
 8025c5a:	e7f7      	b.n	8025c4c <__sfp+0x14>
 8025c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025c60:	b16d      	cbz	r5, 8025c7e <__sfp+0x46>
 8025c62:	3468      	adds	r4, #104	; 0x68
 8025c64:	e7f4      	b.n	8025c50 <__sfp+0x18>
 8025c66:	2104      	movs	r1, #4
 8025c68:	4638      	mov	r0, r7
 8025c6a:	f7ff ff9f 	bl	8025bac <__sfmoreglue>
 8025c6e:	6030      	str	r0, [r6, #0]
 8025c70:	2800      	cmp	r0, #0
 8025c72:	d1f1      	bne.n	8025c58 <__sfp+0x20>
 8025c74:	230c      	movs	r3, #12
 8025c76:	603b      	str	r3, [r7, #0]
 8025c78:	4604      	mov	r4, r0
 8025c7a:	4620      	mov	r0, r4
 8025c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c7e:	4b0b      	ldr	r3, [pc, #44]	; (8025cac <__sfp+0x74>)
 8025c80:	6665      	str	r5, [r4, #100]	; 0x64
 8025c82:	e9c4 5500 	strd	r5, r5, [r4]
 8025c86:	60a5      	str	r5, [r4, #8]
 8025c88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025c8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025c90:	2208      	movs	r2, #8
 8025c92:	4629      	mov	r1, r5
 8025c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025c98:	f7ff f941 	bl	8024f1e <memset>
 8025c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025ca4:	e7e9      	b.n	8025c7a <__sfp+0x42>
 8025ca6:	bf00      	nop
 8025ca8:	08054c54 	.word	0x08054c54
 8025cac:	ffff0001 	.word	0xffff0001

08025cb0 <_fwalk_reent>:
 8025cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025cb4:	4680      	mov	r8, r0
 8025cb6:	4689      	mov	r9, r1
 8025cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025cbc:	2600      	movs	r6, #0
 8025cbe:	b914      	cbnz	r4, 8025cc6 <_fwalk_reent+0x16>
 8025cc0:	4630      	mov	r0, r6
 8025cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025cc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025cca:	3f01      	subs	r7, #1
 8025ccc:	d501      	bpl.n	8025cd2 <_fwalk_reent+0x22>
 8025cce:	6824      	ldr	r4, [r4, #0]
 8025cd0:	e7f5      	b.n	8025cbe <_fwalk_reent+0xe>
 8025cd2:	89ab      	ldrh	r3, [r5, #12]
 8025cd4:	2b01      	cmp	r3, #1
 8025cd6:	d907      	bls.n	8025ce8 <_fwalk_reent+0x38>
 8025cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025cdc:	3301      	adds	r3, #1
 8025cde:	d003      	beq.n	8025ce8 <_fwalk_reent+0x38>
 8025ce0:	4629      	mov	r1, r5
 8025ce2:	4640      	mov	r0, r8
 8025ce4:	47c8      	blx	r9
 8025ce6:	4306      	orrs	r6, r0
 8025ce8:	3568      	adds	r5, #104	; 0x68
 8025cea:	e7ee      	b.n	8025cca <_fwalk_reent+0x1a>

08025cec <__swhatbuf_r>:
 8025cec:	b570      	push	{r4, r5, r6, lr}
 8025cee:	460e      	mov	r6, r1
 8025cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cf4:	2900      	cmp	r1, #0
 8025cf6:	b096      	sub	sp, #88	; 0x58
 8025cf8:	4614      	mov	r4, r2
 8025cfa:	461d      	mov	r5, r3
 8025cfc:	da07      	bge.n	8025d0e <__swhatbuf_r+0x22>
 8025cfe:	2300      	movs	r3, #0
 8025d00:	602b      	str	r3, [r5, #0]
 8025d02:	89b3      	ldrh	r3, [r6, #12]
 8025d04:	061a      	lsls	r2, r3, #24
 8025d06:	d410      	bmi.n	8025d2a <__swhatbuf_r+0x3e>
 8025d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025d0c:	e00e      	b.n	8025d2c <__swhatbuf_r+0x40>
 8025d0e:	466a      	mov	r2, sp
 8025d10:	f000 f8b8 	bl	8025e84 <_fstat_r>
 8025d14:	2800      	cmp	r0, #0
 8025d16:	dbf2      	blt.n	8025cfe <__swhatbuf_r+0x12>
 8025d18:	9a01      	ldr	r2, [sp, #4]
 8025d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025d22:	425a      	negs	r2, r3
 8025d24:	415a      	adcs	r2, r3
 8025d26:	602a      	str	r2, [r5, #0]
 8025d28:	e7ee      	b.n	8025d08 <__swhatbuf_r+0x1c>
 8025d2a:	2340      	movs	r3, #64	; 0x40
 8025d2c:	2000      	movs	r0, #0
 8025d2e:	6023      	str	r3, [r4, #0]
 8025d30:	b016      	add	sp, #88	; 0x58
 8025d32:	bd70      	pop	{r4, r5, r6, pc}

08025d34 <__smakebuf_r>:
 8025d34:	898b      	ldrh	r3, [r1, #12]
 8025d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025d38:	079d      	lsls	r5, r3, #30
 8025d3a:	4606      	mov	r6, r0
 8025d3c:	460c      	mov	r4, r1
 8025d3e:	d507      	bpl.n	8025d50 <__smakebuf_r+0x1c>
 8025d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025d44:	6023      	str	r3, [r4, #0]
 8025d46:	6123      	str	r3, [r4, #16]
 8025d48:	2301      	movs	r3, #1
 8025d4a:	6163      	str	r3, [r4, #20]
 8025d4c:	b002      	add	sp, #8
 8025d4e:	bd70      	pop	{r4, r5, r6, pc}
 8025d50:	ab01      	add	r3, sp, #4
 8025d52:	466a      	mov	r2, sp
 8025d54:	f7ff ffca 	bl	8025cec <__swhatbuf_r>
 8025d58:	9900      	ldr	r1, [sp, #0]
 8025d5a:	4605      	mov	r5, r0
 8025d5c:	4630      	mov	r0, r6
 8025d5e:	f7ff f935 	bl	8024fcc <_malloc_r>
 8025d62:	b948      	cbnz	r0, 8025d78 <__smakebuf_r+0x44>
 8025d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d68:	059a      	lsls	r2, r3, #22
 8025d6a:	d4ef      	bmi.n	8025d4c <__smakebuf_r+0x18>
 8025d6c:	f023 0303 	bic.w	r3, r3, #3
 8025d70:	f043 0302 	orr.w	r3, r3, #2
 8025d74:	81a3      	strh	r3, [r4, #12]
 8025d76:	e7e3      	b.n	8025d40 <__smakebuf_r+0xc>
 8025d78:	4b0d      	ldr	r3, [pc, #52]	; (8025db0 <__smakebuf_r+0x7c>)
 8025d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8025d7c:	89a3      	ldrh	r3, [r4, #12]
 8025d7e:	6020      	str	r0, [r4, #0]
 8025d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025d84:	81a3      	strh	r3, [r4, #12]
 8025d86:	9b00      	ldr	r3, [sp, #0]
 8025d88:	6163      	str	r3, [r4, #20]
 8025d8a:	9b01      	ldr	r3, [sp, #4]
 8025d8c:	6120      	str	r0, [r4, #16]
 8025d8e:	b15b      	cbz	r3, 8025da8 <__smakebuf_r+0x74>
 8025d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d94:	4630      	mov	r0, r6
 8025d96:	f000 f887 	bl	8025ea8 <_isatty_r>
 8025d9a:	b128      	cbz	r0, 8025da8 <__smakebuf_r+0x74>
 8025d9c:	89a3      	ldrh	r3, [r4, #12]
 8025d9e:	f023 0303 	bic.w	r3, r3, #3
 8025da2:	f043 0301 	orr.w	r3, r3, #1
 8025da6:	81a3      	strh	r3, [r4, #12]
 8025da8:	89a3      	ldrh	r3, [r4, #12]
 8025daa:	431d      	orrs	r5, r3
 8025dac:	81a5      	strh	r5, [r4, #12]
 8025dae:	e7cd      	b.n	8025d4c <__smakebuf_r+0x18>
 8025db0:	08025ba1 	.word	0x08025ba1

08025db4 <__malloc_lock>:
 8025db4:	4770      	bx	lr

08025db6 <__malloc_unlock>:
 8025db6:	4770      	bx	lr

08025db8 <__sread>:
 8025db8:	b510      	push	{r4, lr}
 8025dba:	460c      	mov	r4, r1
 8025dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dc0:	f000 f894 	bl	8025eec <_read_r>
 8025dc4:	2800      	cmp	r0, #0
 8025dc6:	bfab      	itete	ge
 8025dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025dca:	89a3      	ldrhlt	r3, [r4, #12]
 8025dcc:	181b      	addge	r3, r3, r0
 8025dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025dd2:	bfac      	ite	ge
 8025dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8025dd6:	81a3      	strhlt	r3, [r4, #12]
 8025dd8:	bd10      	pop	{r4, pc}

08025dda <__swrite>:
 8025dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dde:	461f      	mov	r7, r3
 8025de0:	898b      	ldrh	r3, [r1, #12]
 8025de2:	05db      	lsls	r3, r3, #23
 8025de4:	4605      	mov	r5, r0
 8025de6:	460c      	mov	r4, r1
 8025de8:	4616      	mov	r6, r2
 8025dea:	d505      	bpl.n	8025df8 <__swrite+0x1e>
 8025dec:	2302      	movs	r3, #2
 8025dee:	2200      	movs	r2, #0
 8025df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025df4:	f000 f868 	bl	8025ec8 <_lseek_r>
 8025df8:	89a3      	ldrh	r3, [r4, #12]
 8025dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025e02:	81a3      	strh	r3, [r4, #12]
 8025e04:	4632      	mov	r2, r6
 8025e06:	463b      	mov	r3, r7
 8025e08:	4628      	mov	r0, r5
 8025e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025e0e:	f000 b817 	b.w	8025e40 <_write_r>

08025e12 <__sseek>:
 8025e12:	b510      	push	{r4, lr}
 8025e14:	460c      	mov	r4, r1
 8025e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e1a:	f000 f855 	bl	8025ec8 <_lseek_r>
 8025e1e:	1c43      	adds	r3, r0, #1
 8025e20:	89a3      	ldrh	r3, [r4, #12]
 8025e22:	bf15      	itete	ne
 8025e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8025e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025e2e:	81a3      	strheq	r3, [r4, #12]
 8025e30:	bf18      	it	ne
 8025e32:	81a3      	strhne	r3, [r4, #12]
 8025e34:	bd10      	pop	{r4, pc}

08025e36 <__sclose>:
 8025e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e3a:	f000 b813 	b.w	8025e64 <_close_r>
	...

08025e40 <_write_r>:
 8025e40:	b538      	push	{r3, r4, r5, lr}
 8025e42:	4c07      	ldr	r4, [pc, #28]	; (8025e60 <_write_r+0x20>)
 8025e44:	4605      	mov	r5, r0
 8025e46:	4608      	mov	r0, r1
 8025e48:	4611      	mov	r1, r2
 8025e4a:	2200      	movs	r2, #0
 8025e4c:	6022      	str	r2, [r4, #0]
 8025e4e:	461a      	mov	r2, r3
 8025e50:	f7db fe7b 	bl	8001b4a <_write>
 8025e54:	1c43      	adds	r3, r0, #1
 8025e56:	d102      	bne.n	8025e5e <_write_r+0x1e>
 8025e58:	6823      	ldr	r3, [r4, #0]
 8025e5a:	b103      	cbz	r3, 8025e5e <_write_r+0x1e>
 8025e5c:	602b      	str	r3, [r5, #0]
 8025e5e:	bd38      	pop	{r3, r4, r5, pc}
 8025e60:	20002b1c 	.word	0x20002b1c

08025e64 <_close_r>:
 8025e64:	b538      	push	{r3, r4, r5, lr}
 8025e66:	4c06      	ldr	r4, [pc, #24]	; (8025e80 <_close_r+0x1c>)
 8025e68:	2300      	movs	r3, #0
 8025e6a:	4605      	mov	r5, r0
 8025e6c:	4608      	mov	r0, r1
 8025e6e:	6023      	str	r3, [r4, #0]
 8025e70:	f7db fe87 	bl	8001b82 <_close>
 8025e74:	1c43      	adds	r3, r0, #1
 8025e76:	d102      	bne.n	8025e7e <_close_r+0x1a>
 8025e78:	6823      	ldr	r3, [r4, #0]
 8025e7a:	b103      	cbz	r3, 8025e7e <_close_r+0x1a>
 8025e7c:	602b      	str	r3, [r5, #0]
 8025e7e:	bd38      	pop	{r3, r4, r5, pc}
 8025e80:	20002b1c 	.word	0x20002b1c

08025e84 <_fstat_r>:
 8025e84:	b538      	push	{r3, r4, r5, lr}
 8025e86:	4c07      	ldr	r4, [pc, #28]	; (8025ea4 <_fstat_r+0x20>)
 8025e88:	2300      	movs	r3, #0
 8025e8a:	4605      	mov	r5, r0
 8025e8c:	4608      	mov	r0, r1
 8025e8e:	4611      	mov	r1, r2
 8025e90:	6023      	str	r3, [r4, #0]
 8025e92:	f7db fe82 	bl	8001b9a <_fstat>
 8025e96:	1c43      	adds	r3, r0, #1
 8025e98:	d102      	bne.n	8025ea0 <_fstat_r+0x1c>
 8025e9a:	6823      	ldr	r3, [r4, #0]
 8025e9c:	b103      	cbz	r3, 8025ea0 <_fstat_r+0x1c>
 8025e9e:	602b      	str	r3, [r5, #0]
 8025ea0:	bd38      	pop	{r3, r4, r5, pc}
 8025ea2:	bf00      	nop
 8025ea4:	20002b1c 	.word	0x20002b1c

08025ea8 <_isatty_r>:
 8025ea8:	b538      	push	{r3, r4, r5, lr}
 8025eaa:	4c06      	ldr	r4, [pc, #24]	; (8025ec4 <_isatty_r+0x1c>)
 8025eac:	2300      	movs	r3, #0
 8025eae:	4605      	mov	r5, r0
 8025eb0:	4608      	mov	r0, r1
 8025eb2:	6023      	str	r3, [r4, #0]
 8025eb4:	f7db fe81 	bl	8001bba <_isatty>
 8025eb8:	1c43      	adds	r3, r0, #1
 8025eba:	d102      	bne.n	8025ec2 <_isatty_r+0x1a>
 8025ebc:	6823      	ldr	r3, [r4, #0]
 8025ebe:	b103      	cbz	r3, 8025ec2 <_isatty_r+0x1a>
 8025ec0:	602b      	str	r3, [r5, #0]
 8025ec2:	bd38      	pop	{r3, r4, r5, pc}
 8025ec4:	20002b1c 	.word	0x20002b1c

08025ec8 <_lseek_r>:
 8025ec8:	b538      	push	{r3, r4, r5, lr}
 8025eca:	4c07      	ldr	r4, [pc, #28]	; (8025ee8 <_lseek_r+0x20>)
 8025ecc:	4605      	mov	r5, r0
 8025ece:	4608      	mov	r0, r1
 8025ed0:	4611      	mov	r1, r2
 8025ed2:	2200      	movs	r2, #0
 8025ed4:	6022      	str	r2, [r4, #0]
 8025ed6:	461a      	mov	r2, r3
 8025ed8:	f7db fe7a 	bl	8001bd0 <_lseek>
 8025edc:	1c43      	adds	r3, r0, #1
 8025ede:	d102      	bne.n	8025ee6 <_lseek_r+0x1e>
 8025ee0:	6823      	ldr	r3, [r4, #0]
 8025ee2:	b103      	cbz	r3, 8025ee6 <_lseek_r+0x1e>
 8025ee4:	602b      	str	r3, [r5, #0]
 8025ee6:	bd38      	pop	{r3, r4, r5, pc}
 8025ee8:	20002b1c 	.word	0x20002b1c

08025eec <_read_r>:
 8025eec:	b538      	push	{r3, r4, r5, lr}
 8025eee:	4c07      	ldr	r4, [pc, #28]	; (8025f0c <_read_r+0x20>)
 8025ef0:	4605      	mov	r5, r0
 8025ef2:	4608      	mov	r0, r1
 8025ef4:	4611      	mov	r1, r2
 8025ef6:	2200      	movs	r2, #0
 8025ef8:	6022      	str	r2, [r4, #0]
 8025efa:	461a      	mov	r2, r3
 8025efc:	f7db fe08 	bl	8001b10 <_read>
 8025f00:	1c43      	adds	r3, r0, #1
 8025f02:	d102      	bne.n	8025f0a <_read_r+0x1e>
 8025f04:	6823      	ldr	r3, [r4, #0]
 8025f06:	b103      	cbz	r3, 8025f0a <_read_r+0x1e>
 8025f08:	602b      	str	r3, [r5, #0]
 8025f0a:	bd38      	pop	{r3, r4, r5, pc}
 8025f0c:	20002b1c 	.word	0x20002b1c

08025f10 <_init>:
 8025f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f12:	bf00      	nop
 8025f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f16:	bc08      	pop	{r3}
 8025f18:	469e      	mov	lr, r3
 8025f1a:	4770      	bx	lr

08025f1c <_fini>:
 8025f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f1e:	bf00      	nop
 8025f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f22:	bc08      	pop	{r3}
 8025f24:	469e      	mov	lr, r3
 8025f26:	4770      	bx	lr
